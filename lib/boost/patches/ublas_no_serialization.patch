Index: boost_1_60_0/boost/numeric/ublas/matrix.hpp
===================================================================
--- boost_1_60_0.orig/boost/numeric/ublas/matrix.hpp
+++ boost_1_60_0/boost/numeric/ublas/matrix.hpp
@@ -18,9 +18,11 @@
 #include <boost/numeric/ublas/vector.hpp>
 #include <boost/numeric/ublas/matrix_expression.hpp>
 #include <boost/numeric/ublas/detail/matrix_assign.hpp>
+#ifdef BOOST_UBLAS_SERIALIZATION
 #include <boost/serialization/collection_size_type.hpp>
 #include <boost/serialization/array.hpp>
 #include <boost/serialization/nvp.hpp>
+#endif
 
 // Iterators based on ideas of Jeremy Siek
 
@@ -1156,6 +1158,7 @@ namespace boost { namespace numeric {
             return reverse_iterator2 (begin2 ());
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
         // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -1176,6 +1179,7 @@ namespace boost { namespace numeric {
             }
             ar & serialization::make_nvp("data",data_);
         }
+#endif
 
     private:
         size_type size1_;
@@ -2238,11 +2242,13 @@ namespace boost { namespace numeric {
             return reverse_iterator2 (begin2 ());
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
         // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
             ar & serialization::make_nvp("data",data_);
         }
+#endif
 
     private:
         array_type data_;
@@ -3389,6 +3395,7 @@ namespace boost { namespace numeric {
             return reverse_iterator2 (begin2 ());
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
         // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -3409,6 +3416,7 @@ namespace boost { namespace numeric {
             }
             ar & serialization::make_nvp("data",data_);
         }
+#endif
 
     private:
         size_type size1_;
@@ -3862,6 +3870,7 @@ namespace boost { namespace numeric {
             return rend2 ();
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
          // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -3881,6 +3890,7 @@ namespace boost { namespace numeric {
                 size2_ = s2;
             }
         }
+#endif
 
     private:
         size_type size1_;
@@ -4361,6 +4371,7 @@ namespace boost { namespace numeric {
             return rend2 ();
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
          // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -4381,6 +4392,7 @@ namespace boost { namespace numeric {
                 size_common_ = ((std::min)(size1_, size2_));
             }
         }
+#endif
 
     private:
         size_type size1_;
@@ -4916,6 +4928,7 @@ namespace boost { namespace numeric {
             return rend2 ();
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
          // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -4937,6 +4950,7 @@ namespace boost { namespace numeric {
 
             ar & serialization::make_nvp("value", value_);
         }
+#endif
 
     private:
         size_type size1_;
@@ -5955,6 +5969,7 @@ namespace boost { namespace numeric {
             return reverse_iterator2 (begin2 ());
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
          // Serialization
         template<class Archive>
         void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -5976,6 +5991,7 @@ namespace boost { namespace numeric {
             // could probably use make_array( &(data[0][0]), N*M ) 
             ar & serialization::make_array(data_, N);
         }
+#endif
 
     private:
         size_type size1_;
Index: boost_1_60_0/boost/numeric/ublas/vector.hpp
===================================================================
--- boost_1_60_0.orig/boost/numeric/ublas/vector.hpp
+++ boost_1_60_0/boost/numeric/ublas/vector.hpp
@@ -21,8 +21,10 @@
 #include <boost/numeric/ublas/storage.hpp>
 #include <boost/numeric/ublas/vector_expression.hpp>
 #include <boost/numeric/ublas/detail/vector_assign.hpp>
+#ifdef BOOST_UBLAS_SERIALIZATION
 #include <boost/serialization/collection_size_type.hpp>
 #include <boost/serialization/nvp.hpp>
+#endif
 
 #ifdef BOOST_UBLAS_CPP_GE_2011
 #include <array>
@@ -809,6 +811,7 @@ namespace boost { namespace numeric { na
 	        return reverse_iterator (begin ());
 	    }
 	
+#ifdef BOOST_UBLAS_SERIALIZATION
 	// -------------
 	    // Serialization
 	// -------------
@@ -820,6 +823,7 @@ namespace boost { namespace numeric { na
 	     void serialize(Archive & ar, const unsigned int /* file_version */){
 	         ar & serialization::make_nvp("data",data_);
 	     }
+#endif
 
 	 private:
 	     array_type data_;
@@ -1587,6 +1591,7 @@ namespace boost { namespace numeric { na
             return reverse_iterator (begin ());
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
     // -------------
         // Serialization
     // -------------
@@ -1598,6 +1603,7 @@ namespace boost { namespace numeric { na
          void serialize(Archive & ar, const unsigned int /* file_version */){
              ar & serialization::make_nvp("data",data_);
          }
+#endif
 
      private:
          array_type data_;
@@ -1883,6 +1889,7 @@ namespace boost { namespace numeric { na
              return rend ();
          }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
 	      // Serialization
 	     template<class Archive>
 	     void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -1892,6 +1899,7 @@ namespace boost { namespace numeric { na
 	             size_ = s;
 	         }
 	     }
+#endif
 
 	 private:
 	     size_type size_;
@@ -2143,6 +2151,7 @@ namespace boost { namespace numeric { na
              return rend ();
          }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
 	      // Serialization
 	     template<class Archive>
 	     void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -2153,6 +2162,7 @@ namespace boost { namespace numeric { na
 	         }
 	         ar & serialization::make_nvp("index", index_);
 	     }
+#endif
 
 	 private:
 	     size_type size_;
@@ -2407,6 +2417,7 @@ namespace boost { namespace numeric { na
              return rend ();
          }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
 	      // Serialization
 	     template<class Archive>
 	     void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -2417,6 +2428,7 @@ namespace boost { namespace numeric { na
 	         }
 	         ar & serialization::make_nvp("value", value_);
 	     }
+#endif
 
 	 private:
 	     size_type size_;
@@ -2929,6 +2941,7 @@ namespace boost { namespace numeric { na
 	         return reverse_iterator (begin ());
 	     }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
 	     // Serialization
 	     template<class Archive>
 	     void serialize(Archive & ar, const unsigned int /* file_version */){
@@ -2943,6 +2956,7 @@ namespace boost { namespace numeric { na
 	         // ISSUE: this writes the full array
 	         ar & serialization::make_nvp("data",data_);
 	     }
+#endif
 
 	 private:
 	     size_type size_;
Index: boost_1_60_0/boost/numeric/ublas/storage.hpp
===================================================================
--- boost_1_60_0.orig/boost/numeric/ublas/storage.hpp
+++ boost_1_60_0/boost/numeric/ublas/storage.hpp
@@ -18,9 +18,11 @@
 #include <boost/shared_array.hpp>
 #endif
 
+#ifdef BOOST_UBLAS_SERIALIZATION
 #include <boost/serialization/array.hpp>
 #include <boost/serialization/collection_size_type.hpp>
 #include <boost/serialization/nvp.hpp>
+#endif
 
 #include <boost/numeric/ublas/exception.hpp>
 #include <boost/numeric/ublas/traits.hpp>
@@ -284,6 +286,7 @@ namespace boost { namespace numeric { na
             return alloc_;
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
     private:
         friend class boost::serialization::access;
 
@@ -298,6 +301,7 @@ namespace boost { namespace numeric { na
             }
             ar & serialization::make_array(data_, s);
         }
+#endif
 
     private:
         // Handle explict destroy on a (possibly indexed) iterator
@@ -478,6 +482,7 @@ namespace boost { namespace numeric { na
             return reverse_iterator (begin ());
         }
 
+#ifdef BOOST_UBLAS_SERIALIZATION
     private:
         // Serialization
         friend class boost::serialization::access;
@@ -493,6 +498,7 @@ namespace boost { namespace numeric { na
             }
             ar & serialization::make_array(data_, s);
         }
+#endif
 
     private:
         size_type size_;
