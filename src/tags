!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
A	XML/Node.hpp	/^  XMLNode &operator=(const XMLNode& A) = delete;$/;"	m	class:XMLNode
A	XML/Node.hpp	/^  XMLNode(const XMLNode &A) = delete;$/;"	m	class:XMLNode
A1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD A1:11;$/;"	m	struct:IMI::TObservationZone
A12	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD A12:12;$/;"	m	struct:IMI::TObservationZone
A2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD A2:11;$/;"	m	struct:IMI::TObservationZone
AAT	Engine/Task/Factory/TaskFactoryType.hpp	/^  AAT,$/;"	m	class:TaskFactoryType
AAT	Engine/Task/Points/Type.hpp	/^  AAT,$/;"	m	class:TaskPointType
AATASK	Engine/Airspace/AirspaceClass.hpp	/^  AATASK,$/;"	e	enum:uint8_t
AATISOLINEINTERCEPT_HPP	Engine/Task/Ordered/AATIsolineIntercept.hpp	24;"	d
AATISOLINESEGMENT_HPP	Engine/Task/Ordered/AATIsolineSegment.hpp	24;"	d
AATISOLINE_HPP	Engine/Task/Ordered/AATIsoline.hpp	24;"	d
AATIsoline	Engine/Task/Ordered/AATIsoline.cpp	/^AATIsoline::AATIsoline(const AATPoint& ap, const FlatProjection &projection)$/;"	f	class:AATIsoline
AATIsoline	Engine/Task/Ordered/AATIsoline.hpp	/^class AATIsoline$/;"	c
AATIsolineIntercept	Engine/Task/Ordered/AATIsolineIntercept.cpp	/^AATIsolineIntercept::AATIsolineIntercept(const AATPoint& ap)$/;"	f	class:AATIsolineIntercept
AATIsolineIntercept	Engine/Task/Ordered/AATIsolineIntercept.hpp	/^class AATIsolineIntercept: public AATIsoline$/;"	c
AATIsolineSegment	Engine/Task/Ordered/AATIsolineSegment.cpp	/^AATIsolineSegment::AATIsolineSegment(const AATPoint &ap,$/;"	f	class:AATIsolineSegment
AATIsolineSegment	Engine/Task/Ordered/AATIsolineSegment.hpp	/^class AATIsolineSegment: public AATIsoline$/;"	c
AATMinTime	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  AATMinTime,$/;"	e	enum:ControlIndex	file:
AATMinTime	Profile/ProfileKeys.cpp	/^const char AATMinTime[] = "AATMinTime";$/;"	m	namespace:ProfileKeys	file:
AATPOINT_HPP	Engine/Task/Ordered/Points/AATPoint.hpp	25;"	d
AATPoint	Engine/Task/Ordered/Points/AATPoint.hpp	/^  AATPoint(ObservationZonePoint *_oz,$/;"	f	class:final
AATTaskFactory	Engine/Task/Factory/AATTaskFactory.cpp	/^AATTaskFactory::AATTaskFactory(OrderedTask& _task, const TaskBehaviour &tb)$/;"	f	class:AATTaskFactory
AATTimeMargin	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  AATTimeMargin$/;"	e	enum:ControlIndex	file:
AATTimeMargin	Profile/ProfileKeys.cpp	/^const char AATTimeMargin[] = "AATTimeMargin";$/;"	m	namespace:ProfileKeys	file:
AAT_ANNULAR_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_ANNULAR_SECTOR,$/;"	m	class:TaskPointFactoryType
AAT_CYLINDER	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_CYLINDER,$/;"	m	class:TaskPointFactoryType
AAT_KEYHOLE	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_KEYHOLE,$/;"	m	class:TaskPointFactoryType
AAT_SEGMENT	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AAT_SEGMENT,$/;"	m	class:TaskPointFactoryType
AAT_TASK_FACTORY_HPP	Engine/Task/Factory/AATTaskFactory.hpp	25;"	d
ABORT	Engine/Task/TaskType.hpp	/^  ABORT,$/;"	m	class:TaskType
ABORTTASK_H	Engine/Task/Unordered/AbortTask.hpp	24;"	d
ABOVE	Renderer/TextInBox.hpp	/^    ABOVE,$/;"	e	enum:uint8_t
ABSTRACTAIRSPACE_HPP	Engine/Airspace/AbstractAirspace.hpp	23;"	d
ABSTRACTTASK_H	Engine/Task/AbstractTask.hpp	24;"	d
ABSTRACT_CONTEST_HPP	Engine/Contest/Solvers/AbstractContest.hpp	24;"	d
ABSTRACT_REPLAY_HPP	Replay/AbstractReplay.hpp	25;"	d
ABSTRACT_TASK_FACTORY_HPP	Engine/Task/Factory/AbstractTaskFactory.hpp	25;"	d
ACCELERATED_UPDATE_TIME	Logger/LoggerFRecord.cpp	/^constexpr std::chrono::steady_clock::duration LoggerFRecord::ACCELERATED_UPDATE_TIME;$/;"	m	class:LoggerFRecord	file:
ACCELERATED_UPDATE_TIME	Logger/LoggerFRecord.hpp	/^  static constexpr std::chrono::steady_clock::duration ACCELERATED_UPDATE_TIME = std::chrono::seconds(30);$/;"	m	class:LoggerFRecord
ACDDevice	Device/Driver/AirControlDisplay.cpp	/^  ACDDevice(Port &_port):port(_port) {}$/;"	f	class:ACDDevice
ACDDevice	Device/Driver/AirControlDisplay.cpp	/^class ACDDevice : public AbstractDevice {$/;"	c	file:
ACK	Device/Driver/KRT2.cpp	/^  static constexpr char ACK = 0x06; \/\/!< Command acknowledged character.$/;"	m	class:final	file:
ACK	Device/Driver/LX/Protocol.hpp	/^    ACK = 0x06,$/;"	e	enum:LX::Command
ACK	Device/Driver/LXERA/Protocol.hpp	/^    ACK = 0x06,$/;"	e	enum:LXEra::Command
ACK	Device/Driver/Volkslogger/Protocol.hpp	/^    ACK = 0x06,$/;"	e	enum:Volkslogger::__anon202
ACK	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^    ACK,$/;"	e	enum:final::Buttons	file:
ACK	Dialogs/MapItemListDialog.cpp	/^    ACK,$/;"	e	enum:final::Buttons	file:
ACK	Monitor/AirspaceWarningMonitor.cpp	/^    ACK,$/;"	e	enum:final::Action	file:
ACK	Tracking/SkyLines/Protocol.hpp	/^  ACK = 2,$/;"	e	enum:SkyLinesTracking::Type
ACKNOWLEDGE	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    ACKNOWLEDGE,$/;"	e	enum:SwitchesLeft::Controls	file:
ACKPacket	Tracking/SkyLines/Protocol.hpp	/^struct ACKPacket {$/;"	s	namespace:SkyLinesTracking
ACK_DAY	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^    ACK_DAY,$/;"	e	enum:final::Buttons	file:
ACK_DAY	Monitor/AirspaceWarningMonitor.cpp	/^    ACK_DAY,$/;"	e	enum:final::Action	file:
ACTIVE	Renderer/TaskPointRenderer.hpp	/^    ACTIVE,$/;"	e	enum:TaskPointRenderer::TargetVisibility
ADD	Dialogs/FileManager.cpp	/^    ADD,$/;"	e	enum:ManagedFileListWidget::Buttons	file:
ADD	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    ADD,$/;"	e	enum:PageListWidget::Buttons	file:
ADD	Dialogs/Weather/NOAAList.cpp	/^    ADD,$/;"	e	enum:final::Buttons	file:
ADD	Monitor/MatTaskMonitor.cpp	/^    ADD,$/;"	e	enum:final::Action	file:
ADDITIONAL	Engine/Waypoint/Origin.hpp	/^  ADDITIONAL,$/;"	m	class:WaypointOrigin
AFTER_ACTIVE	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^    AFTER_ACTIVE$/;"	e	enum:OrderedTaskPoint::ActiveState
AFlatGeoPoint	Geo/Flat/FlatGeoPoint.hpp	/^  AFlatGeoPoint():FlatGeoPoint(0,0),altitude(0) {};$/;"	f	struct:AFlatGeoPoint
AFlatGeoPoint	Geo/Flat/FlatGeoPoint.hpp	/^  AFlatGeoPoint(const FlatGeoPoint p, const int alt)$/;"	f	struct:AFlatGeoPoint
AFlatGeoPoint	Geo/Flat/FlatGeoPoint.hpp	/^  AFlatGeoPoint(const int x, const int y, const int alt):$/;"	f	struct:AFlatGeoPoint
AFlatGeoPoint	Geo/Flat/FlatGeoPoint.hpp	/^struct AFlatGeoPoint : public FlatGeoPoint {$/;"	s
AGL	Geo/AltitudeReference.hpp	/^  AGL = 0,$/;"	m	class:AltitudeReference
AGeoPoint	Geo/GeoPoint.hpp	/^  AGeoPoint(const GeoPoint p, const double alt)$/;"	f	struct:AGeoPoint
AGeoPoint	Geo/GeoPoint.hpp	/^struct AGeoPoint: public GeoPoint {$/;"	s
AIRBRAKE_STATE	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    AIRBRAKE_STATE,$/;"	e	enum:SwitchesLeft::Controls	file:
AIRCRAFT_HPP	Engine/Navigation/Aircraft.hpp	23;"	d
AIRCRAFT_LOOK_HPP	Look/AircraftLook.hpp	25;"	d
AIRCRAFT_SIM_HPP	Replay/AircraftSim.hpp	23;"	d
AIRCRAFT_STATE_FILTER_HPP	Engine/Util/AircraftStateFilter.hpp	24;"	d
AIRCRAFT_SYMBOL	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  AIRCRAFT_SYMBOL,$/;"	e	enum:ControlIndex	file:
AIRFIELD	Engine/Waypoint/Waypoint.hpp	/^    AIRFIELD,$/;"	m	class:Waypoint::Type
AIRPORT	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    AIRPORT,$/;"	e	enum:final::Controls	file:
AIRPORT	Waypoint/WaypointFilter.hpp	/^  AIRPORT,$/;"	m	class:TypeFilter
AIRSHIP	FLARM/Traffic.hpp	/^    AIRSHIP = 12,         \/\/!< airship$/;"	m	class:FlarmTraffic::AircraftType
AIRSPACE	Dialogs/dlgAnalysis.hpp	/^  AIRSPACE,$/;"	m	class:AnalysisPage
AIRSPACE	Engine/Route/Config.hpp	/^    AIRSPACE,$/;"	m	class:RoutePlannerConfig::Mode
AIRSPACE	MapWindow/Items/MapItem.hpp	/^    AIRSPACE,$/;"	e	enum:TaskPointType::Type
AIRSPACE	Repository/FileType.hpp	/^  AIRSPACE,$/;"	m	class:FileType
AIRSPACECIRCLE_HPP	Engine/Airspace/AirspaceCircle.hpp	24;"	d
AIRSPACECLASSCOUNT	Engine/Airspace/AirspaceClass.hpp	/^  AIRSPACECLASSCOUNT$/;"	e	enum:uint8_t
AIRSPACECLASSCOUNT	Formatter/AirspaceFormatter.cpp	/^              (size_t)AirspaceClass::AIRSPACECLASSCOUNT,$/;"	m	class:AirspaceClass	file:
AIRSPACECONFIGPANEL_HPP	Dialogs/Settings/Panels/AirspaceConfigPanel.hpp	25;"	d
AIRSPACEPOLYGON_HPP	Engine/Airspace/AirspacePolygon.hpp	24;"	d
AIRSPACESINTERFACE_HPP	Engine/Airspace/AirspacesInterface.hpp	23;"	d
AIRSPACE_ACTIVITY_HPP	Engine/Airspace/AirspaceActivity.hpp	24;"	d
AIRSPACE_AIRCRAFT_PERFORMANCE_HPP	Engine/Airspace/AirspaceAircraftPerformance.hpp	24;"	d
AIRSPACE_ALTITUDE_HPP	Engine/Airspace/AirspaceAltitude.hpp	24;"	d
AIRSPACE_CLASS_HPP	Engine/Airspace/AirspaceClass.hpp	24;"	d
AIRSPACE_CROSS_SECTION_RENDERER_HPP	CrossSection/AirspaceXSRenderer.hpp	25;"	d
AIRSPACE_HPP	Engine/Airspace/Airspace.hpp	23;"	d
AIRSPACE_INTERCEPT_SOLUTION_HPP	Engine/Airspace/AirspaceInterceptSolution.hpp	24;"	d
AIRSPACE_INTERSECTION_VECTOR_HPP	Engine/Airspace/AirspaceIntersectionVector.hpp	24;"	d
AIRSPACE_INTERSECTION_VISITOR_HPP	Engine/Airspace/AirspaceIntersectionVisitor.hpp	24;"	d
AIRSPACE_INTERSECT_SORT_HPP	Engine/Airspace/AirspaceIntersectSort.hpp	24;"	d
AIRSPACE_MINIMUM_HPP	Engine/Airspace/Minimum.hpp	25;"	d
AIRSPACE_PREDICATE_HEIGHT_RANGE_HPP	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	24;"	d
AIRSPACE_PREDICATE_HPP	Engine/Airspace/Predicate/AirspacePredicate.hpp	24;"	d
AIRSPACE_SORTER_HPP	Engine/Airspace/AirspaceSorter.hpp	2;"	d
AIRSPACE_VISIBILITY_HPP	Airspace/AirspaceVisibility.hpp	2;"	d
AIRSPACE_VISITOR_HPP	Engine/Airspace/AirspaceVisitor.hpp	23;"	d
AIRSPACE_WARNING_CONFIG_HPP	Engine/Airspace/AirspaceWarningConfig.hpp	24;"	d
AIRSPACE_WARNING_HPP	Engine/Airspace/AirspaceWarning.hpp	24;"	d
AIRSPACE_WARNING_MANAGER_HPP	Engine/Airspace/AirspaceWarningManager.hpp	23;"	d
AIRSPEED	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^    AIRSPEED,$/;"	e	enum:final::Controls	file:
AIR_REFRACTION	Math/SunEphemeris.cpp	/^static constexpr double AIR_REFRACTION = 34.0 \/ 60.0;$/;"	v	file:
AIV	Engine/Route/AirspaceRoute.cpp	/^  AIV(const RouteLink &_e,$/;"	f	class:final
AIVResult	Engine/Route/AirspaceRoute.cpp	/^  typedef std::pair<const AbstractAirspace *, RoutePoint> AIVResult;$/;"	t	class:final	file:
ALGORITHM_HPP	Util/Algorithm.hpp	31;"	d
ALL	Renderer/AirspaceRendererSettings.hpp	/^    ALL,$/;"	m	class:AirspaceClassRendererSettings::FillMode
ALL	Renderer/AirspaceRendererSettings.hpp	/^    ALL,$/;"	m	class:AirspaceRendererSettings::FillMode
ALL	Renderer/AirspaceRendererSettings.hpp	/^    ALL,$/;"	m	class:AirspaceRendererSettings::LabelSelection
ALL	Renderer/TaskPointRenderer.hpp	/^    ALL,$/;"	e	enum:TaskPointRenderer::TargetVisibility
ALL	Renderer/WaypointRendererSettings.hpp	/^    ALL,$/;"	m	class:WaypointRendererSettings::LabelSelection
ALL	Waypoint/WaypointFilter.hpp	/^  ALL = 0,$/;"	m	class:TypeFilter
ALLBELOW	Renderer/AirspaceRendererSettings.hpp	/^  ALLBELOW,$/;"	m	class:AirspaceDisplayMode
ALLOCATED_ARRAY_HXX	Util/AllocatedArray.hxx	31;"	d
ALLOCATED_GRID_HXX	Util/AllocatedGrid.hxx	31;"	d
ALLOCATED_SOCKET_ADDRESS_HXX	Net/AllocatedSocketAddress.hxx	31;"	d
ALLOCATED_STRING_HXX	Util/AllocatedString.hxx	31;"	d
ALLON	Renderer/AirspaceRendererSettings.hpp	/^  ALLON = 0,$/;"	m	class:AirspaceDisplayMode
ALPHA	Terrain/jasper/jpc/jpc_qmfb.c	1653;"	d	file:
ALPHA_OVERLAY	Look/Colors.hpp	/^static constexpr uint8_t ALPHA_OVERLAY = 0xA0;$/;"	v
ALSAEnv	Audio/ALSAEnv.cpp	/^namespace ALSAEnv$/;"	n	file:
ALSAEnv	Audio/ALSAEnv.hpp	/^namespace ALSAEnv$/;"	n
ALSAPCMPlayer	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::ALSAPCMPlayer(boost::asio::io_context &_io_context) :$/;"	f	class:ALSAPCMPlayer
ALSAPCMPlayer	Audio/ALSAPCMPlayer.hpp	/^class ALSAPCMPlayer : public PCMPlayer {$/;"	c
ALSA_DEVICE_ENV	Audio/ALSAEnv.cpp	/^static constexpr char ALSA_DEVICE_ENV[] = "ALSA_DEVICE";$/;"	m	namespace:ALSAEnv	file:
ALSA_LATENCY_ENV	Audio/ALSAEnv.cpp	/^static constexpr char ALSA_LATENCY_ENV[] = "ALSA_LATENCY";$/;"	m	namespace:ALSAEnv	file:
ALTERNATETASK_HPP	Engine/Task/Unordered/AlternateTask.hpp	24;"	d
ALTITUDE	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    ALTITUDE,$/;"	e	enum:final::Controls	file:
ALTITUDE	MapSettings.hpp	/^    ALTITUDE,$/;"	m	class:TrailSettings::Type
ALTITUDE	Units/Group.hpp	/^  ALTITUDE,$/;"	m	class:UnitGroup
ALWRUN	Dialogs/Device/LX/NanoConfigWidget.hpp	/^    ALWRUN,$/;"	e	enum:final::Controls
ANDROID_SAMSUNG_EXTERNAL_SD	LocalPath.cpp	76;"	d	file:
ANDROID_SDCARD	LocalPath.cpp	69;"	d	file:
ANGLE	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  ANGLE,$/;"	e	enum:Controls	file:
ANGLE	Form/DataField/Base.hpp	/^    ANGLE,$/;"	m	class:DataField::Type
ANGLE_FACTOR	TeamCode/TeamCode.cpp	/^static constexpr Angle ANGLE_FACTOR =$/;"	v	file:
ANGLE_HPP	Math/Angle.hpp	24;"	d
ANNULAR_SECTOR	Engine/Task/ObservationZones/ObservationZone.hpp	/^    ANNULAR_SECTOR,$/;"	m	class:ObservationZone::Shape
ANNULAR_SECTORZONE_HPP	Engine/Task/ObservationZones/AnnularSectorZone.hpp	25;"	d
APOSTROPHE	Form/DigitEntry.hpp	/^      APOSTROPHE,$/;"	m	class:CoordinateFormat::Column::Type
APPEND_EXISTING	IO/FileOutputStream.hxx	/^		APPEND_EXISTING,$/;"	m	class:final::Mode
APPEND_OR_CREATE	IO/FileOutputStream.hxx	/^		APPEND_OR_CREATE,$/;"	m	class:final::Mode
APPEND_TO_TASK	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  APPEND_TO_TASK,$/;"	e	enum:Commands	file:
ARC_STEPS	Renderer/TrackLineRenderer.cpp	34;"	d	file:
ARC_SWEEP	Renderer/TrackLineRenderer.cpp	/^static constexpr Angle ARC_SWEEP = Angle::Degrees(135.0);$/;"	v	file:
ARGS_HPP	OS/Args.hpp	25;"	d
ARM_ADVANCE	Monitor/TaskAdvanceMonitor.cpp	/^    ARM_ADVANCE,$/;"	e	enum:final::Action	file:
ARRAY_SIZE	Util/Macros.hpp	33;"	d
ARRIVAL_ALTITUDE	MapWindow/Items/MapItem.hpp	/^    ARRIVAL_ALTITUDE,$/;"	e	enum:TaskPointType::Type
ARROW_HEAD	MapSettings.hpp	/^  ARROW_HEAD,$/;"	m	class:WindArrowStyle
ASCII_HXX	Util/ASCII.hxx	31;"	d
ASSET_H	Asset.hpp	24;"	d
AST	Engine/Task/Points/Type.hpp	/^  AST,$/;"	m	class:TaskPointType
ASTAR_HPP	Engine/Route/AStar.hpp	25;"	d
ASTPOINT_HPP	Engine/Task/Ordered/Points/ASTPoint.hpp	26;"	d
ASTPoint	Engine/Task/Ordered/Points/ASTPoint.hpp	/^  ASTPoint(ObservationZonePoint *_oz,$/;"	f	class:final
AST_CYLINDER	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  AST_CYLINDER,$/;"	m	class:TaskPointFactoryType
AStar	Engine/Route/AStar.hpp	/^  AStar(const Node &node, unsigned reserve_default = DEFAULT_QUEUE_SIZE)$/;"	f	class:AStar
AStar	Engine/Route/AStar.hpp	/^  AStar(unsigned reserve_default = DEFAULT_QUEUE_SIZE)$/;"	f	class:AStar
AStar	Engine/Route/AStar.hpp	/^class AStar$/;"	c
AStarPriorityValue	Engine/Route/AStar.hpp	/^  constexpr AStarPriorityValue(const unsigned _g, const unsigned _h)$/;"	f	struct:AStarPriorityValue
AStarPriorityValue	Engine/Route/AStar.hpp	/^  explicit constexpr AStarPriorityValue(unsigned _g):g(_g), h(0) {}$/;"	f	struct:AStarPriorityValue
AStarPriorityValue	Engine/Route/AStar.hpp	/^struct AStarPriorityValue$/;"	s
ATCReferencePanel	InfoBoxes/Panel/ATCReference.cpp	/^  ATCReferencePanel()$/;"	f	class:ATCReferencePanel
ATCReferencePanel	InfoBoxes/Panel/ATCReference.cpp	/^class ATCReferencePanel : public RowFormWidget, ActionListener {$/;"	c	file:
ATC_RADIAL	InfoBoxes/Content/Type.hpp	/^    ATC_RADIAL,$/;"	e	enum:InfoBoxFactory::Type
ATR833CreateOnPort	Device/Driver/ATR833.cpp	/^ATR833CreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ATR833Device	Device/Driver/ATR833.cpp	/^  explicit ATR833Device(Port &_port):port(_port) {}$/;"	f	class:final
ATRBuffer	Device/Driver/ATR833.cpp	/^  explicit ATRBuffer(uint8_t msg_id):fill(0), checksum(0) {$/;"	f	class:ATRBuffer
ATRBuffer	Device/Driver/ATR833.cpp	/^class ATRBuffer {$/;"	c	file:
AUDIO_CONFIGPANEL_HPP	Dialogs/Settings/Panels/AudioConfigPanel.hpp	25;"	d
AUDIO_VARIOCONFIGPANEL_HPP	Dialogs/Settings/Panels/AudioVarioConfigPanel.hpp	25;"	d
AURA	Kobo/Model.hpp	/^  AURA,$/;"	m	class:KoboModel
AURA2	Kobo/Model.hpp	/^  AURA2,$/;"	m	class:KoboModel
AUTO	Device/Config.hpp	/^    AUTO,$/;"	m	class:DeviceConfig::PortType
AUTO	Engine/Task/Ordered/TaskAdvance.hpp	/^    AUTO,$/;"	e	enum:TaskAdvance::State
AUTO	IO/Charset.hpp	/^  AUTO,$/;"	m	class:Charset
AUTO	MapSettings.hpp	/^  AUTO,$/;"	m	class:DisplayGroundTrack
AUTO	MapSettings.hpp	/^  AUTO,$/;"	m	class:FinalGlideBarDisplayMode
AUTO	Renderer/AirspaceRendererSettings.hpp	/^  AUTO,$/;"	m	class:AirspaceDisplayMode
AUTO	Widget/ButtonPanelWidget.hpp	/^    AUTO, BOTTOM, LEFT$/;"	m	class:ButtonPanelWidget::Alignment
AUTO	Widget/TabWidget.hpp	/^    AUTO,$/;"	m	class:TabWidget::Orientation
AUTOOFF	Dialogs/Device/LX/NanoConfigWidget.hpp	/^    AUTOOFF,$/;"	e	enum:final::Controls
AUTOWIND_CIRCLING	Computer/Wind/Settings.hpp	/^  AUTOWIND_CIRCLING,$/;"	e	enum:AutoWindModeBits
AUTOWIND_NONE	Computer/Wind/Settings.hpp	/^  AUTOWIND_NONE = 0,$/;"	e	enum:AutoWindModeBits
AUTOWIND_ZIGZAG	Computer/Wind/Settings.hpp	/^  AUTOWIND_ZIGZAG,$/;"	e	enum:AutoWindModeBits
AUTO_IAS	Device/Driver/LX/LX1600.hpp	/^    AUTO_IAS = 2,$/;"	m	class:LX1600::SCMode
AUTO_IAS	Device/Driver/LXERA/LXERA.hpp	/^    AUTO_IAS = 2,$/;"	m	class:LXEra::SCMode
AUTO_UPDATE_MODE_AUTOMATIC_MODE	Screen/FB/mxcfb.h	76;"	d
AUTO_UPDATE_MODE_REGION_MODE	Screen/FB/mxcfb.h	75;"	d
AV_FILTER_HPP	Math/AvFilter.hpp	24;"	d
Abandon	IO/FileTransaction.cpp	/^FileTransaction::Abandon()$/;"	f	class:FileTransaction
Abort	Engine/Task/TaskManager.hpp	/^  void Abort() {$/;"	f	class:TaskManager
AbortIntersectionTest	Engine/Task/Unordered/AbortIntersectionTest.hpp	/^class AbortIntersectionTest {$/;"	c
AbortRank	Engine/Task/Unordered/AbortTask.cpp	/^struct AbortRank$/;"	s	file:
AbortTask	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::AbortTask(const TaskBehaviour &_task_behaviour,$/;"	f	class:AbortTask
AbortTask	Engine/Task/Unordered/AbortTask.hpp	/^class AbortTask: public UnorderedTask$/;"	c
AbortTaskMode	Engine/Task/TaskBehaviour.hpp	/^enum class AbortTaskMode: uint8_t {$/;"	c
AbortTaskMode	Profile/ProfileKeys.cpp	/^const char AbortTaskMode[] = "AbortTaskMode";$/;"	m	namespace:ProfileKeys	file:
Absolute	Atmosphere/Temperature.hpp	/^  Temperature Absolute() const {$/;"	f	class:Temperature
Absolute	Math/Angle.hpp	/^  Angle Absolute() const {$/;"	f	class:Angle
AbsoluteDegrees	Math/Angle.cpp	/^Angle::AbsoluteDegrees() const$/;"	f	class:Angle
AbsoluteRadians	Math/Angle.cpp	/^Angle::AbsoluteRadians() const$/;"	f	class:Angle
AbstractAirspace	Engine/Airspace/AbstractAirspace.hpp	/^  AbstractAirspace(Shape _shape):shape(_shape), active(true) {}$/;"	f	class:AbstractAirspace
AbstractAirspace	Engine/Airspace/AbstractAirspace.hpp	/^class AbstractAirspace {$/;"	c
AbstractAutoPilot	Replay/TaskAutoPilot.hpp	/^class AbstractAutoPilot {$/;"	c
AbstractContest	Engine/Contest/Solvers/AbstractContest.hpp	/^class AbstractContest {$/;"	c
AbstractDevice	Device/Driver.hpp	/^class AbstractDevice : public Device {$/;"	c
AbstractReplay	Replay/AbstractReplay.hpp	/^class AbstractReplay $/;"	c
AbstractTask	Engine/Task/AbstractTask.cpp	/^AbstractTask::AbstractTask(TaskType _type,$/;"	f	class:AbstractTask
AbstractTask	Engine/Task/AbstractTask.hpp	/^class AbstractTask: $/;"	c
AbstractTaskFactory	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  AbstractTaskFactory(const TaskFactoryConstraints &_constraints,$/;"	f	class:AbstractTaskFactory
AbstractTaskFactory	Engine/Task/Factory/AbstractTaskFactory.hpp	/^class AbstractTaskFactory: private NonCopyable$/;"	c
AcState	Replay/TaskAutoPilot.hpp	/^  enum AcState {$/;"	g	class:TaskAutoPilot
AccelerationState	NMEA/Acceleration.hpp	/^struct AccelerationState$/;"	s
AccelerometerZero	Profile/ProfileKeys.cpp	/^const char AccelerometerZero[] = "AccelerometerZero";$/;"	m	namespace:ProfileKeys	file:
AcceptInRange	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::AcceptInRange(const FlatBoundingBox &bb,$/;"	f	class:FlatTriangleFanTree
AcceptInRange	Engine/Route/ReachFan.cpp	/^ReachFan::AcceptInRange(const GeoBounds &bounds,$/;"	f	class:ReachFan
AcceptInRange	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AcceptInRange(const GeoBounds &bounds,$/;"	f	class:RoutePlanner
AcceptInRange	Task/RoutePlannerGlue.hpp	/^  void AcceptInRange(const GeoBounds &bounds,$/;"	f	class:RoutePlannerGlue
AcceptTaskPointVisitor	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::AcceptTaskPointVisitor(TaskPointConstVisitor& visitor) const$/;"	f	class:OrderedTask
AcceptTaskPointVisitor	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::AcceptTaskPointVisitor(TaskPointConstVisitor& visitor) const$/;"	f	class:AbortTask
AcceptTaskPointVisitor	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::AcceptTaskPointVisitor(TaskPointConstVisitor& visitor) const$/;"	f	class:GotoTask
Accessor	Util/QuadTree.hxx	/^			return QuadTree<T,Accessor,Alloc>::GetPosition(value);$/;"	m	struct:QuadTree::Leaf
Acft	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Acft,$/;"	e	enum:final::Controls
Ack	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Ack()$/;"	f	class:AirspaceWarningListWidget
AckDay	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::AckDay()$/;"	f	class:AirspaceWarningListWidget
Acknowledge	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::Acknowledge(const AbstractAirspace &airspace)$/;"	f	class:ProtectedAirspaceWarningManager
Acknowledge	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::Acknowledge()$/;"	f	class:AirspaceWarning
Acknowledge	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::Acknowledge(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
Acknowledge	PopupMessage.cpp	/^PopupMessage::Acknowledge(Type type)$/;"	f	class:PopupMessage
AcknowledgeAll	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeAll()$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeAll	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeAll()$/;"	f	class:AirspaceWarningManager
AcknowledgeDay	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeDay(const AbstractAirspace &airspace,$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeDay	Engine/Airspace/AirspaceWarning.hpp	/^  void AcknowledgeDay(const bool set=true) {$/;"	f	class:AirspaceWarning
AcknowledgeDay	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeDay(const AbstractAirspace& airspace,$/;"	f	class:AirspaceWarningManager
AcknowledgeInside	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeInside(const AbstractAirspace &airspace,$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeInside	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::AcknowledgeInside(const bool set)$/;"	f	class:AirspaceWarning
AcknowledgeInside	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeInside(const AbstractAirspace& airspace,$/;"	f	class:AirspaceWarningManager
AcknowledgeTime	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AcknowledgeTime,$/;"	e	enum:ControlIndex	file:
AcknowledgeWarning	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::AcknowledgeWarning(const AbstractAirspace &airspace,$/;"	f	class:ProtectedAirspaceWarningManager
AcknowledgeWarning	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::AcknowledgeWarning(const bool set)$/;"	f	class:AirspaceWarning
AcknowledgeWarning	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AcknowledgeWarning(const AbstractAirspace& airspace,$/;"	f	class:AirspaceWarningManager
AcknowledgementTime	Profile/ProfileKeys.cpp	/^const char AcknowledgementTime[] = "AcknowledgementTime";$/;"	m	namespace:ProfileKeys	file:
Action	Gauge/BigThermalAssistantWidget.hpp	/^  enum Action {$/;"	g	class:BigThermalAssistantWidget
Action	Gauge/BigTrafficWidget.hpp	/^  enum Action {$/;"	g	class:TrafficWidget
Action	Monitor/AirspaceWarningMonitor.cpp	/^  enum Action {$/;"	g	class:final	file:
Action	Monitor/MatTaskMonitor.cpp	/^  enum Action {$/;"	g	class:final	file:
Action	Monitor/TaskAdvanceMonitor.cpp	/^  enum Action {$/;"	g	class:final	file:
ActionInterface	ActionInterface.cpp	/^namespace ActionInterface {$/;"	n	file:
ActionInterface	ActionInterface.hpp	/^namespace ActionInterface {$/;"	n
ActionListener	Form/ActionListener.hpp	/^class ActionListener {$/;"	c
ActionWidget	Widget/ActionWidget.hpp	/^  ActionWidget(ActionListener &_listener, int _id)$/;"	f	class:ActionWidget
ActionWidget	Widget/ActionWidget.hpp	/^class ActionWidget$/;"	c
Actions	Dialogs/Plane/PlanePolarDialog.cpp	/^  enum Actions {$/;"	g	class:final	file:
Actions	Dialogs/Settings/dlgBasicSettings.cpp	/^enum Actions {$/;"	g	file:
Actions	Widget/KeyboardWidget.hpp	/^  enum Actions {$/;"	g	class:KeyboardWidget
ActivateMap	MainWindow.cpp	/^MainWindow::ActivateMap()$/;"	f	class:MainWindow
ActivatePan	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^ActivatePan(const Waypoint &waypoint)$/;"	f	file:
ActiveAdvanced	Computer/GlideComputerInterface.cpp	/^GlideComputerTaskEvents::ActiveAdvanced(const TaskWaypoint &tp, const int i)$/;"	f	class:GlideComputerTaskEvents
ActiveAdvanced	Engine/Task/TaskEvents.hpp	/^  virtual void ActiveAdvanced(gcc_unused const TaskWaypoint &tp,$/;"	f	class:TaskEvents
ActiveAirspacePredicate	Airspace/ActivePredicate.hpp	/^  ActiveAirspacePredicate(const ProtectedAirspaceWarningManager *_warnings)$/;"	f	class:ActiveAirspacePredicate
ActiveAirspacePredicate	Airspace/ActivePredicate.hpp	/^class ActiveAirspacePredicate {$/;"	c
ActiveState	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  enum ActiveState {$/;"	g	class:OrderedTaskPoint
Add	Audio/PCMBufferDataSource.cpp	/^PCMBufferDataSource::Add(PCMData &&data)$/;"	f	class:PCMBufferDataSource
Add	Cloud/Sender.cpp	/^ThermalResponseSender::Add(SkyLinesTracking::Thermal t)$/;"	f	class:ThermalResponseSender
Add	Cloud/Sender.cpp	/^TrafficResponseSender::Add(uint32_t pilot_id, uint32_t time,$/;"	f	class:TrafficResponseSender
Add	Computer/GlideRatioCalculator.cpp	/^GlideRatioCalculator::Add(unsigned distance, int altitude)$/;"	f	class:GlideRatioCalculator
Add	Computer/StateClock.hpp	/^  void Add(double delta) {$/;"	f	class:StateClock
Add	Dialogs/FileManager.cpp	/^ManagedFileListWidget::Add()$/;"	f	class:ManagedFileListWidget
Add	Engine/Airspace/Airspaces.cpp	/^Airspaces::Add(AbstractAirspace *airspace)$/;"	f	class:Airspaces
Add	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::Add(const GlideResult &s2)$/;"	f	class:GlideResult
Add	Engine/Route/ReachResult.hpp	/^  void Add(int delta) {$/;"	f	struct:ReachResult
Add	Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::Add(WaypointPtr wp)$/;"	f	class:Waypoints::WaypointNameTree
Add	Form/ButtonPanel.cpp	/^ButtonPanel::Add(ButtonRenderer *renderer,$/;"	f	class:ButtonPanel
Add	Form/ButtonPanel.cpp	/^ButtonPanel::Add(const TCHAR *caption, ActionListener &listener, int id)$/;"	f	class:ButtonPanel
Add	Form/TabDisplay.cpp	/^TabDisplay::Add(const TCHAR *caption, const MaskedIcon *icon)$/;"	f	class:TabDisplay
Add	MapWindow/GlueMapWindowDisplayMode.cpp	/^OffsetHistory::Add(PixelPoint p)$/;"	f	class:OffsetHistory
Add	MapWindow/Items/AirspaceBuilder.cpp	/^  void Add(const AirspaceWarning& as) {$/;"	f	class:AirspaceWarningList
Add	Math/LeastSquares.cpp	/^LeastSquares::Add(double x, double y, double weight)$/;"	f	class:LeastSquares
Add	Menu/MenuData.cpp	/^Menu::Add(const TCHAR *label, int location, unsigned event_id)$/;"	f	class:Menu
Add	NMEA/ClimbHistory.cpp	/^ClimbHistory::Add(unsigned speed, double _vario)$/;"	f	class:ClimbHistory
Add	Net/HTTP/FormData.hpp	/^    MultiPartFormData &Add(Args&&... args) {$/;"	f	class:Net::MultiPartFormData
Add	Net/HTTP/Multi.hpp	/^    void Add(CURL *easy) {$/;"	f	class:Net::CurlMulti
Add	Net/HTTP/Session.hpp	/^    void Add(CURL *easy) {$/;"	f	class:Net::Session
Add	Renderer/AirspaceLabelList.cpp	/^AirspaceLabelList::Add(const GeoPoint &pos, AirspaceClass cls, $/;"	f	class:AirspaceLabelList
Add	Renderer/LabelBlock.hpp	/^    void Add(const PixelRect rc) {$/;"	f	class:LabelBlock::Bucket
Add	Renderer/WaypointLabelList.cpp	/^WaypointLabelList::Add(const TCHAR *Name, int X, int Y,$/;"	f	class:WaypointLabelList
Add	Screen/Custom/WList.hpp	/^  void Add(Window &w) {$/;"	f	class:WindowList
Add	Util/EnumBitSet.hpp	/^  void Add(const E e) {$/;"	f	class:EnumBitSet
Add	Util/RadixTree.hpp	/^    void Add(const T &value) {$/;"	f	struct:RadixTree::LeafList
Add	Util/RadixTree.hpp	/^    void Add(const TCHAR *key, const T &value) {$/;"	f	struct:RadixTree::Node
Add	Util/RadixTree.hpp	/^  void Add(const TCHAR *key, const T &value) {$/;"	f	class:RadixTree
Add	Waypoint/LastUsed.cpp	/^LastUsedWaypoints::Add(const Waypoint &waypoint)$/;"	f	class:LastUsedWaypoints
Add	Waypoint/LastUsed.cpp	/^LastUsedWaypoints::Add(unsigned waypoint_id)$/;"	f	class:LastUsedWaypoints
Add	Widget/EditRowFormWidget.cpp	/^RowFormWidget::Add(const TCHAR *label, const TCHAR *help, bool read_only)$/;"	f	class:RowFormWidget
Add	Widget/EditRowFormWidget.cpp	/^RowFormWidget::Add(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
Add	Widget/PagerWidget.cpp	/^PagerWidget::Add(Widget *w)$/;"	f	class:PagerWidget
Add	Widget/RowFormWidget.cpp	/^RowFormWidget::Add(Row::Type type, Window *window)$/;"	f	class:RowFormWidget
Add	Widget/RowFormWidget.hpp	/^  void Add(Widget *widget) {$/;"	f	class:RowFormWidget
Add	Widget/RowFormWidget.hpp	/^  void Add(Window *window) {$/;"	f	class:RowFormWidget
AddAltitude	FlightStatistics.cpp	/^FlightStatistics::AddAltitude(const double tflight, const double alt, const bool final_glide)$/;"	f	class:FlightStatistics
AddAltitudeTerrain	FlightStatistics.cpp	/^FlightStatistics::AddAltitudeTerrain(const double tflight, const double terrainalt)$/;"	f	class:FlightStatistics
AddAngle	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddAngle(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddArrivalAltitude	Dialogs/MapItemListSettingsPanel.hpp	/^    AddArrivalAltitude,$/;"	e	enum:final::ControlIndex
AddArrivalAltitudes	MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddArrivalAltitudes($/;"	f	class:MapItemListBuilder
AddAttribute	XML/Node.hpp	/^    void AddAttribute(const TCHAR *name, const TCHAR *value) {$/;"	f	struct:XMLNode::Data
AddAttribute	XML/Node.hpp	/^    void AddAttribute(const TCHAR *name, size_t name_length,$/;"	f	struct:XMLNode::Data
AddAttribute	XML/Node.hpp	/^    void AddAttribute(tstring &&name,$/;"	f	struct:XMLNode::Data
AddAttribute	XML/Node.hpp	/^  void AddAttribute(const TCHAR *name, const TCHAR *value) {$/;"	f	class:XMLNode
AddAttribute	XML/Node.hpp	/^  void AddAttribute(const TCHAR *name, size_t name_length,$/;"	f	class:XMLNode
AddAttribute	XML/Node.hpp	/^  void AddAttribute(tstring &&name,$/;"	f	class:XMLNode
AddBackground	Lua/Background.cpp	/^Lua::AddBackground(StatePtr &&state)$/;"	f	class:Lua
AddBoolean	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddBoolean(const char *name, const TCHAR *label,$/;"	f	class:VegaParametersWidget
AddBoolean	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddBoolean(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddBorder	Form/Form.cpp	/^AddBorder(WindowStyle style)$/;"	f	file:
AddButton	Dialogs/WidgetDialog.hpp	/^  Button *AddButton(ButtonRenderer *renderer,$/;"	f	class:WidgetDialog
AddButton	Dialogs/WidgetDialog.hpp	/^  Button *AddButton(const TCHAR *caption, int modal_result) {$/;"	f	class:WidgetDialog
AddButton	Dialogs/WidgetDialog.hpp	/^  Button *AddButton(const TCHAR *caption,$/;"	f	class:WidgetDialog
AddButton	Widget/KeyboardWidget.cpp	/^KeyboardWidget::AddButton(ContainerWindow &parent,$/;"	f	class:KeyboardWidget
AddButton	Widget/QuestionWidget.hpp	/^  void AddButton(const TCHAR *caption, int id) {$/;"	f	class:QuestionWidget
AddButton	Widget/RowFormWidget.cpp	/^RowFormWidget::AddButton(const TCHAR *label, ActionListener &listener, int id)$/;"	f	class:RowFormWidget
AddButtonKey	Dialogs/WidgetDialog.hpp	/^  void AddButtonKey(unsigned key_code) {$/;"	f	class:WidgetDialog
AddCancelButton	Dialogs/ProgressDialog.cpp	/^ProgressDialog::AddCancelButton(std::function<void()> &&callback)$/;"	f	class:ProgressDialog
AddCandidate	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddCandidate(const RouteLink &e)$/;"	f	class:RoutePlanner
AddCandidate	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddCandidate(const RouteLinkBase& e)$/;"	f	class:RoutePlanner
AddChild	XML/Node.cpp	/^XMLNode::AddChild(const TCHAR *name, bool is_declaration)$/;"	f	class:XMLNode
AddChild	XML/Node.cpp	/^XMLNode::AddChild(const TCHAR *name, size_t name_length, bool is_declaration)$/;"	f	class:XMLNode
AddChoice	Form/DataField/Enum.cpp	/^DataFieldEnum::AddChoice(unsigned id, const TCHAR *text,$/;"	f	class:DataFieldEnum
AddChoices	Form/DataField/Enum.cpp	/^DataFieldEnum::AddChoices(const StaticEnumChoice *p)$/;"	f	class:DataFieldEnum
AddCircle	Airspace/AirspaceParser.cpp	/^  AddCircle(Airspaces &airspace_database)$/;"	f	struct:TempAirspaceType
AddClicked	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::AddClicked()$/;"	f	class:NOAAListWidget
AddClimbBase	FlightStatistics.cpp	/^FlightStatistics::AddClimbBase(const double tflight, const double alt)$/;"	f	class:FlightStatistics
AddClimbCeiling	FlightStatistics.cpp	/^FlightStatistics::AddClimbCeiling(const double tflight, const double alt)$/;"	f	class:FlightStatistics
AddClimbRate	FlightStatistics.cpp	/^FlightStatistics::AddClimbRate(const double tflight, const double vario, const bool circling)$/;"	f	class:FlightStatistics
AddDeclaration	IGC/IGCWriter.cpp	/^IGCWriter::AddDeclaration(const GeoPoint &location, const TCHAR *id)$/;"	f	class:IGCWriter
AddDummy	Widget/RowFormWidget.hpp	/^  void AddDummy() {$/;"	f	class:RowFormWidget
AddEdges	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddEdges(const RouteLink &e)$/;"	f	class:RoutePlanner
AddEnum	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddEnum(const char *name, const TCHAR *label,$/;"	f	class:VegaParametersWidget
AddEnum	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddEnum(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddFDF	Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::AddFDF(uint8_t id, size_t size)$/;"	f	class:DBB
AddFDFStringUpper	Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::AddFDFStringUpper(uint8_t id, const char *src)$/;"	f	class:DBB
AddFile	Form/DataField/File.cpp	/^FileDataField::AddFile(Path path)$/;"	f	class:FileDataField
AddFile	Net/HTTP/FormData.cpp	/^Net::MultiPartFormData::AddFile(const char *name, Path path)$/;"	f	class:Net::MultiPartFormData
AddFile	Widget/ProfileRowFormWidget.cpp	/^RowFormWidget::AddFile(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddFile	Widget/RowFormWidget.hpp	/^  WndProperty *AddFile(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddFileListItemRenderer	Dialogs/FileManager.cpp	/^  explicit AddFileListItemRenderer(const std::vector<AvailableFile> &_list)$/;"	f	class:final
AddFlight	Renderer/FlightListRenderer.cpp	/^FlightListRenderer::AddFlight(const FlightInfo &_flight)$/;"	f	class:FlightListRenderer
AddFloat	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddFloat(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddFloat	Widget/UnitRowFormWidget.cpp	/^RowFormWidget::AddFloat(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddGlideResult	Dialogs/Waypoint/WaypointInfoWidget.cpp	/^WaypointInfoWidget::AddGlideResult(const TCHAR *label,$/;"	f	class:WaypointInfoWidget
AddHeader	Net/HTTP/Request.cpp	/^Net::Request::AddHeader(const char *name, const char *value)$/;"	f	class:Net::Request
AddInsideSample	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::AddInsideSample(const AircraftState& state,$/;"	f	class:SampledTaskPoint
AddInteger	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddInteger(const char *name, const TCHAR *label,$/;"	f	class:VegaParametersWidget
AddInteger	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddInteger(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddItem	Dialogs/Traffic/TrafficList.cpp	/^  Item &AddItem(FlarmId id) {$/;"	f	class:TrafficListWidget	file:
AddItem	Form/GridView.hpp	/^  void AddItem(Window &w) {$/;"	f	class:GridView
AddKey	Form/ButtonPanel.cpp	/^ButtonPanel::AddKey(unsigned key_code)$/;"	f	class:ButtonPanel
AddListener	Android/DownloadManager.cpp	/^AndroidDownloadManager::AddListener(Net::DownloadListener &listener)$/;"	f	class:AndroidDownloadManager
AddListener	Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::AddListener(BlackboardListener &listener)$/;"	f	class:LiveBlackboard
AddListener	Interface.hpp	/^  static inline void AddListener(BlackboardListener &listener) {$/;"	f	namespace:CommonInterface
AddListener	Net/HTTP/DownloadManager.cpp	/^  void AddListener(Net::DownloadListener &listener) {$/;"	f	class:final
AddListener	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::AddListener(DownloadListener &listener)$/;"	f	class:Net::DownloadManager
AddLocation	Dialogs/MapItemListSettingsPanel.hpp	/^    AddLocation,$/;"	e	enum:final::ControlIndex
AddLocation	MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddLocation(const NMEAInfo &basic,$/;"	f	class:MapItemListBuilder
AddMessage	Message.cpp	/^Message::AddMessage(const TCHAR* text, const TCHAR *data)$/;"	f	class:Message
AddMessage	PopupMessage.cpp	/^PopupMessage::AddMessage(const TCHAR* text, const TCHAR *data)$/;"	f	class:PopupMessage
AddMultiLine	Widget/RowFormWidget.cpp	/^RowFormWidget::AddMultiLine(const TCHAR *text)$/;"	f	class:RowFormWidget
AddNearby	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AddNearby(const RouteLink &e)$/;"	f	class:AirspaceRoute
AddNearby	Engine/Route/TerrainRoute.cpp	/^TerrainRoute::AddNearby(const RouteLink& e)$/;"	f	class:TerrainRoute
AddNearbyAirspace	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AddNearbyAirspace(const RouteAirspaceIntersection &inx,$/;"	f	class:AirspaceRoute
AddNearbyTerrain	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddNearbyTerrain(const RoutePoint &p, const RouteLink& e)$/;"	f	class:RoutePlanner
AddNearbyTerrainSweep	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddNearbyTerrainSweep(const RoutePoint& p,$/;"	f	class:RoutePlanner
AddNetwork	Kobo/WPASupplicant.cpp	/^WPASupplicant::AddNetwork()$/;"	f	class:WPASupplicant
AddNull	Form/DataField/File.cpp	/^FileDataField::AddNull()$/;"	f	class:FileDataField
AddOrigin	Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::AddOrigin(const AFlatGeoPoint &origin, size_t reserve)$/;"	f	class:FlatTriangleFan
AddParameter	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::AddParameter(const StaticParameter &p)$/;"	f	class:VegaParametersWidget
AddParameter	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  void AddParameter(const char *name) {$/;"	f	class:VegaParametersWidget
AddPassword	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddPassword(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddPersistent	Lua/Persistent.cpp	/^Lua::AddPersistent(lua_State *L, void *p)$/;"	f	class:Lua
AddPilot	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::AddPilot(const CAI302::Pilot &pilot, OperationEnvironment &env)$/;"	f	class:CAI302Device
AddPoint	Computer/ThermalLocator.cpp	/^ThermalLocator::AddPoint(const double t, const GeoPoint &location, const double w)$/;"	f	class:ThermalLocator
AddPoint	Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::AddPoint(FlatGeoPoint p)$/;"	f	class:FlatTriangleFan
AddPoint	Topography/ShapeRenderer.hpp	/^  void AddPoint(PixelPoint pt) {$/;"	f	class:ShapeRenderer
AddPointIfDistant	Topography/ShapeRenderer.hpp	/^   void AddPointIfDistant(PixelPoint pt) {$/;"	f	class:ShapeRenderer
AddPointer	Event/Poll/Linux/MergeMouse.hpp	/^  void AddPointer() {$/;"	f	class:final
AddPolygon	Airspace/AirspaceParser.cpp	/^  AddPolygon(Airspaces &airspace_database)$/;"	f	struct:TempAirspaceType
AddPort	Dialogs/Device/DeviceEditWidget.cpp	/^AddPort(DataFieldEnum &df, DeviceConfig::PortType type,$/;"	f	file:
AddPortListener	Device/MultipleDevices.cpp	/^MultipleDevices::AddPortListener(PortListener &listener)$/;"	f	class:MultipleDevices
AddReadOnly	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddReadOnly(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddReadOnly	Widget/UnitRowFormWidget.cpp	/^RowFormWidget::AddReadOnly(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddRemaining	Widget/RowFormWidget.hpp	/^  void AddRemaining(Window *window) {$/;"	f	class:RowFormWidget
AddRoughTime	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddRoughTime(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddSample	Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::AddSample(const double time, const double height)$/;"	f	class:ThermalEncounterBand
AddSecondaryItem	FLARM/FlarmDetails.cpp	/^FlarmDetails::AddSecondaryItem(FlarmId id, const TCHAR *name)$/;"	f	class:FlarmDetails
AddSelfIfNear	MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddSelfIfNear(const GeoPoint &self, Angle bearing)$/;"	f	class:MapItemListBuilder
AddShortcut	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::AddShortcut(const RoutePoint &node)$/;"	f	class:RoutePlanner
AddSkyLinesTraffic	MapWindow/Items/TrafficBuilder.cpp	/^MapItemListBuilder::AddSkyLinesTraffic()$/;"	f	class:MapItemListBuilder
AddSource	Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::AddSource(PCMDataSource &source)$/;"	f	class:PCMMixerDataSource
AddSpacer	Widget/RowFormWidget.cpp	/^RowFormWidget::AddSpacer()$/;"	f	class:RowFormWidget
AddStation	Weather/NOAAStore.cpp	/^NOAAStore::AddStation(const TCHAR *code)$/;"	f	class:NOAAStore
AddStation	Weather/NOAAStore.cpp	/^NOAAStore::AddStation(const char *code)$/;"	f	class:NOAAStore
AddString	Net/HTTP/FormData.hpp	/^    MultiPartFormData &AddString(const char *name, const char *value) {$/;"	f	class:Net::MultiPartFormData
AddSurfaceListener	Screen/OpenGL/Surface.cpp	/^AddSurfaceListener(GLSurfaceListener &listener)$/;"	f
AddSymbol	Form/ButtonPanel.cpp	/^ButtonPanel::AddSymbol(const TCHAR *caption,$/;"	f	class:ButtonPanel
AddSymbolButton	Dialogs/WidgetDialog.hpp	/^  Button *AddSymbolButton(const TCHAR *caption,$/;"	f	class:WidgetDialog
AddTab	Widget/TabWidget.cpp	/^TabWidget::AddTab(Widget *widget, const TCHAR *caption,$/;"	f	class:TabWidget
AddTakeoffPoint	Engine/Waypoint/Waypoints.cpp	/^Waypoints::AddTakeoffPoint(const GeoPoint& location,$/;"	f	class:Waypoints
AddTaskOZs	MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddTaskOZs(const ProtectedTaskManager &task)$/;"	f	class:MapItemListBuilder
AddTaskSpeed	FlightStatistics.cpp	/^FlightStatistics::AddTaskSpeed(const double tflight, const double val)$/;"	f	class:FlightStatistics
AddText	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddText(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddText	XML/Node.cpp	/^XMLNode::AddText(const TCHAR *text, size_t length)$/;"	f	class:XMLNode
AddText	XML/Node.cpp	/^XMLNode::AddText(const TCHAR *value)$/;"	f	class:XMLNode
AddThermalAverage	FlightStatistics.cpp	/^FlightStatistics::AddThermalAverage(const double tflight_start,$/;"	f	class:FlightStatistics
AddThermals	MapWindow/Items/WeatherBuilder.cpp	/^MapItemListBuilder::AddThermals(const ThermalLocatorInfo &thermals,$/;"	f	class:MapItemListBuilder
AddTime	Widget/EditRowFormWidget.cpp	/^RowFormWidget::AddTime(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
AddTraffic	MapWindow/Items/TrafficBuilder.cpp	/^MapItemListBuilder::AddTraffic(const TrafficList &flarm)$/;"	f	class:MapItemListBuilder
AddValidationError	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  void AddValidationError(TaskValidationErrorType e) {$/;"	f	class:AbstractTaskFactory
AddValue	Util/RadixTree.hpp	/^    void AddValue(const T &value) {$/;"	f	struct:RadixTree::Node
AddValueCounts	Screen/OpenGL/Triangulate.cpp	/^AddValueCounts(unsigned *counts, unsigned max_value,$/;"	f	file:
AddVisibleAirspace	MapWindow/Items/AirspaceBuilder.cpp	/^MapItemListBuilder::AddVisibleAirspace($/;"	f	class:MapItemListBuilder
AddWaypoint	Device/Driver/EW.cpp	/^EWDevice::AddWaypoint(const Waypoint &way_point, OperationEnvironment &env)$/;"	f	class:EWDevice
AddWaypoint	Renderer/WaypointRenderer.cpp	/^  void AddWaypoint(const WaypointPtr &way_point, bool in_task) {$/;"	f	class:final
AddWaypoints	MapWindow/Items/Builder.cpp	/^MapItemListBuilder::AddWaypoints(const Waypoints &waypoints)$/;"	f	class:MapItemListBuilder
AddWeatherStations	MapWindow/Items/WeatherBuilder.cpp	/^MapItemListBuilder::AddWeatherStations(NOAAStore &store)$/;"	f	class:MapItemListBuilder
AdditionalAirspaceFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AdditionalAirspaceFile,$/;"	e	enum:ControlIndex	file:
AdditionalAirspaceFile	Profile/ProfileKeys.cpp	/^const char AdditionalAirspaceFile[] = "AdditionalAirspaceFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AdditionalWaypointFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AdditionalWaypointFile,$/;"	e	enum:ControlIndex	file:
AdditionalWaypointFile	Profile/ProfileKeys.cpp	/^const char AdditionalWaypointFile[] = "AdditionalWPFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
Adjust	Engine/Route/AStar.hpp	/^  AStarPriorityValue Adjust() const {$/;"	f	struct:AStarPriorityValue
Advance	Screen/TerminalWindow.cpp	/^TerminalWindow::Advance()$/;"	f	class:TerminalWindow
AdvanceIfRequired	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::AdvanceIfRequired(TaskAccessor& task)$/;"	f	class:TaskAutoPilot
AdvanceReaderToTask	Task/TaskFileSeeYou.cpp	/^AdvanceReaderToTask(TLineReader &reader, const unsigned index)$/;"	f	file:
AdvanceTo	Screen/Memory/Bresenham.hpp	/^  bool AdvanceTo(const int y_t) {$/;"	f	class:BresenhamIterator
AfterLocalPathCode	LocalPath.cpp	/^AfterLocalPathCode(const TCHAR *p)$/;"	f	file:
AfterStartup	Startup.cpp	/^AfterStartup()$/;"	f	file:
AirControlDisplayCreateOnPort	Device/Driver/AirControlDisplay.cpp	/^AirControlDisplayCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
AirDensity	Atmosphere/AirDensity.cpp	/^AirDensity(const double altitude)$/;"	f
AirDensityRatio	Atmosphere/AirDensity.cpp	/^AirDensityRatio(const double altitude)$/;"	f
AirbrakeState	NMEA/SwitchState.hpp	/^  enum class AirbrakeState : uint8_t {$/;"	c	struct:SwitchState
AircraftLook	Look/AircraftLook.hpp	/^struct AircraftLook {$/;"	s
AircraftReg	Profile/ProfileKeys.cpp	/^const char AircraftReg[] = "AircraftReg";$/;"	m	namespace:ProfileKeys	file:
AircraftRenderer	Renderer/AircraftRenderer.hpp	/^namespace AircraftRenderer$/;"	n
AircraftSim	Replay/AircraftSim.hpp	/^class AircraftSim {$/;"	c
AircraftState	Engine/Navigation/Aircraft.hpp	/^struct AircraftState: $/;"	s
AircraftStateFilter	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::AircraftStateFilter(const double cutoff_wavelength)$/;"	f	class:AircraftStateFilter
AircraftStateFilter	Engine/Util/AircraftStateFilter.hpp	/^class AircraftStateFilter {$/;"	c
AircraftSymbol	MapSettings.hpp	/^enum class AircraftSymbol : uint8_t {$/;"	c
AircraftSymbol	Profile/ProfileKeys.cpp	/^const char AircraftSymbol[] = "AircraftSymbol";$/;"	m	namespace:ProfileKeys	file:
AircraftType	FLARM/Traffic.hpp	/^  enum class AircraftType: uint8_t {$/;"	c	struct:FlarmTraffic
AircraftType	Profile/ProfileKeys.cpp	/^const char AircraftType[] = "AircraftType";$/;"	m	namespace:ProfileKeys	file:
AirfieldFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AirfieldFile,$/;"	e	enum:ControlIndex	file:
AirfieldFile	Profile/ProfileKeys.cpp	/^const char AirfieldFile[] = "AirfieldFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AirfieldFileChanged	UtilsSettings.cpp	/^bool AirfieldFileChanged = false;$/;"	v
Airspace	Engine/Airspace/Airspace.cpp	/^Airspace::Airspace(AbstractAirspace &airspace,$/;"	f	class:Airspace
AirspaceActivity	Engine/Airspace/AirspaceActivity.hpp	/^  AirspaceActivity() {$/;"	f	class:AirspaceActivity
AirspaceActivity	Engine/Airspace/AirspaceActivity.hpp	/^  AirspaceActivity(int8_t day_of_week) {$/;"	f	class:AirspaceActivity
AirspaceActivity	Engine/Airspace/AirspaceActivity.hpp	/^class AirspaceActivity {$/;"	c
AirspaceAircraftInterceptHorizontal	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  AirspaceAircraftInterceptHorizontal(const AirspaceAircraftPerformance &aap,$/;"	f	class:final
AirspaceAircraftInterceptVertical	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  AirspaceAircraftInterceptVertical(const AirspaceAircraftPerformance &aap,$/;"	f	class:final
AirspaceAircraftPerformance	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  AirspaceAircraftPerformance(const GlidePolar &polar,$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  constexpr AirspaceAircraftPerformance(Simple)$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  explicit AirspaceAircraftPerformance(const AircraftStateFilter &filter)$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  explicit AirspaceAircraftPerformance(const GlidePolar &polar)$/;"	f	class:AirspaceAircraftPerformance
AirspaceAircraftPerformance	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^class AirspaceAircraftPerformance {$/;"	c
AirspaceAltitude	Engine/Airspace/AirspaceAltitude.hpp	/^  AirspaceAltitude()$/;"	f	struct:AirspaceAltitude
AirspaceAltitude	Engine/Airspace/AirspaceAltitude.hpp	/^struct AirspaceAltitude$/;"	s
AirspaceAtPointPredicate	MapWindow/Items/AirspaceBuilder.cpp	/^  AirspaceAtPointPredicate(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceAtPointPredicate
AirspaceAtPointPredicate	MapWindow/Items/AirspaceBuilder.cpp	/^class AirspaceAtPointPredicate: public AirspacePredicate$/;"	c	file:
AirspaceBlackOutline	Profile/ProfileKeys.cpp	/^const char AirspaceBlackOutline[] = "AirspaceBlackOutline";$/;"	m	namespace:ProfileKeys	file:
AirspaceCircle	Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::AirspaceCircle(const GeoPoint &loc, const double _radius)$/;"	f	class:AirspaceCircle
AirspaceClassCharCouple	Airspace/AirspaceParser.cpp	/^struct AirspaceClassCharCouple$/;"	s	file:
AirspaceClassLook	Look/AirspaceLook.hpp	/^struct AirspaceClassLook {$/;"	s
AirspaceClassRendererSettings	Renderer/AirspaceRendererSettings.hpp	/^struct AirspaceClassRendererSettings$/;"	s
AirspaceClassRendererSettingsPanel	Dialogs/Airspace/AirspaceCRendererSettingsPanel.cpp	/^AirspaceClassRendererSettingsPanel::AirspaceClassRendererSettingsPanel(AirspaceClass _type)$/;"	f	class:AirspaceClassRendererSettingsPanel
AirspaceClassRendererSettingsPanel	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^class AirspaceClassRendererSettingsPanel:$/;"	c
AirspaceClassStringCouple	Airspace/AirspaceParser.cpp	/^struct AirspaceClassStringCouple$/;"	s	file:
AirspaceComputerSettings	Airspace/AirspaceComputerSettings.hpp	/^struct AirspaceComputerSettings {$/;"	s
AirspaceConfigPanel	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceConfigPanel()$/;"	f	class:final
AirspaceDetailsWidget	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  AirspaceDetailsWidget(const AbstractAirspace &_airspace,$/;"	f	class:final
AirspaceDisplay	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceDisplay,$/;"	e	enum:ControlIndex	file:
AirspaceDisplayMode	Renderer/AirspaceRendererSettings.hpp	/^enum class AirspaceDisplayMode: uint8_t$/;"	c
AirspaceFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  AirspaceFile,$/;"	e	enum:ControlIndex	file:
AirspaceFile	Profile/ProfileKeys.cpp	/^const char AirspaceFile[] = "AirspaceFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
AirspaceFileChanged	UtilsSettings.cpp	/^bool AirspaceFileChanged = false;$/;"	v
AirspaceFileType	Airspace/AirspaceParser.cpp	/^enum class AirspaceFileType {$/;"	c	file:
AirspaceFillMode	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceFillMode,$/;"	e	enum:ControlIndex	file:
AirspaceFillMode	Profile/ProfileKeys.cpp	/^const char AirspaceFillMode[] = "AirspaceFillMode";$/;"	m	namespace:ProfileKeys	file:
AirspaceFillRenderer	Renderer/AirspaceRendererGL.cpp	/^  AirspaceFillRenderer(Canvas &_canvas, const WindowProjection &_projection,$/;"	f	class:final
AirspaceFilterData	Engine/Airspace/AirspaceSorter.hpp	/^struct AirspaceFilterData {$/;"	s
AirspaceFilterPredicate	Engine/Airspace/AirspaceSorter.cpp	/^  AirspaceFilterPredicate(const GeoPoint &_location,$/;"	f	class:final
AirspaceFilterWidget	Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceFilterWidget(const DialogLook &look)$/;"	f	class:final
AirspaceFormatter	Formatter/AirspaceFormatter.hpp	/^namespace AirspaceFormatter {$/;"	n
AirspaceIndexable	Engine/Airspace/AirspacesInterface.hpp	/^  struct AirspaceIndexable {$/;"	s	class:AirspacesInterface
AirspaceInterceptSolution	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  AirspaceInterceptSolution(double _distance, double _elapsed_time)$/;"	f	struct:AirspaceInterceptSolution
AirspaceInterceptSolution	Engine/Airspace/AirspaceInterceptSolution.hpp	/^struct AirspaceInterceptSolution$/;"	s
AirspaceIntersectSort	Engine/Airspace/AirspaceIntersectSort.hpp	/^  AirspaceIntersectSort(const GeoPoint &start,$/;"	f	class:AirspaceIntersectSort
AirspaceIntersectSort	Engine/Airspace/AirspaceIntersectSort.hpp	/^class AirspaceIntersectSort {$/;"	c
AirspaceIntersectionVector	Engine/Airspace/AirspaceIntersectionVector.hpp	/^class AirspaceIntersectionVector:$/;"	c
AirspaceIntersectionVisitor	Engine/Airspace/AirspaceIntersectionVisitor.hpp	/^class AirspaceIntersectionVisitor:$/;"	c
AirspaceIntersectionVisitorSlice	CrossSection/AirspaceXSRenderer.cpp	/^  AirspaceIntersectionVisitorSlice(Canvas &_canvas,$/;"	f	class:final
AirspaceIntersectionWarningVisitor	Engine/Airspace/AirspaceWarningManager.cpp	/^  AirspaceIntersectionWarningVisitor(const AircraftState &_state,$/;"	f	class:final
AirspaceLabelList	Renderer/AirspaceLabelList.hpp	/^  AirspaceLabelList() {}$/;"	f	class:AirspaceLabelList
AirspaceLabelList	Renderer/AirspaceLabelList.hpp	/^class AirspaceLabelList : private NonCopyable {$/;"	c
AirspaceLabelListCompare	Renderer/AirspaceLabelList.cpp	/^  AirspaceLabelListCompare(const AirspaceWarningConfig &_config)$/;"	f	class:AirspaceLabelListCompare
AirspaceLabelListCompare	Renderer/AirspaceLabelList.cpp	/^class AirspaceLabelListCompare {$/;"	c	file:
AirspaceLabelRenderer	Renderer/AirspaceLabelRenderer.hpp	/^  AirspaceLabelRenderer(const AirspaceLook &_look)$/;"	f	class:AirspaceLabelRenderer
AirspaceLabelRenderer	Renderer/AirspaceLabelRenderer.hpp	/^class AirspaceLabelRenderer$/;"	c
AirspaceLabelSelection	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceLabelSelection,$/;"	e	enum:ControlIndex	file:
AirspaceLabelSelection	Profile/ProfileKeys.cpp	/^const char AirspaceLabelSelection[] = "AirspaceLabelSelection";$/;"	m	namespace:ProfileKeys	file:
AirspaceListButtons	Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceListButtons(const DialogLook &look, ActionListener &_dialog)$/;"	f	class:final
AirspaceListRenderer	Renderer/AirspaceListRenderer.hpp	/^namespace AirspaceListRenderer$/;"	n
AirspaceListWidget	Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceListWidget(AirspaceFilterWidget &_filter_widget)$/;"	f	class:final
AirspaceListWidgetState	Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceListWidgetState()$/;"	f	struct:AirspaceListWidgetState
AirspaceListWidgetState	Dialogs/Airspace/AirspaceList.cpp	/^struct AirspaceListWidgetState$/;"	s	file:
AirspaceLook	Look/AirspaceLook.hpp	/^struct AirspaceLook {$/;"	s
AirspaceMapItem	MapWindow/Items/MapItem.hpp	/^  AirspaceMapItem(const AbstractAirspace &_airspace)$/;"	f	struct:AirspaceMapItem
AirspaceMapItem	MapWindow/Items/MapItem.hpp	/^struct AirspaceMapItem: public MapItem$/;"	s
AirspaceMapVisible	Renderer/AirspaceLabelRenderer.cpp	/^  AirspaceMapVisible(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceMapVisible
AirspaceMapVisible	Renderer/AirspaceLabelRenderer.cpp	/^class AirspaceMapVisible : public AirspacePredicate$/;"	c	file:
AirspaceMapVisible	Renderer/AirspaceRenderer.cpp	/^  AirspaceMapVisible(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceMapVisible
AirspaceMapVisible	Renderer/AirspaceRenderer.cpp	/^class AirspaceMapVisible : public AirspacePredicate$/;"	c	file:
AirspaceOutlineRenderer	Renderer/AirspaceRendererOther.cpp	/^  AirspaceOutlineRenderer(Canvas &_canvas, const WindowProjection &_projection,$/;"	f	class:final
AirspaceParser	Airspace/AirspaceParser.hpp	/^  AirspaceParser(Airspaces &_airspaces): airspaces(_airspaces) {}$/;"	f	class:AirspaceParser
AirspaceParser	Airspace/AirspaceParser.hpp	/^class AirspaceParser$/;"	c
AirspacePatternsDialog	Dialogs/Airspace/dlgAirspacePatterns.cpp	/^  AirspacePatternsDialog(const AirspaceLook &_look)$/;"	f	class:AirspacePatternsDialog
AirspacePatternsDialog	Dialogs/Airspace/dlgAirspacePatterns.cpp	/^class AirspacePatternsDialog : public ListItemRenderer {$/;"	c	file:
AirspacePointersEquals	Engine/Airspace/Airspaces.cpp	/^AirspacePointersEquals(const Airspace &a, const Airspace &b)$/;"	f	file:
AirspacePolygon	Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::AirspacePolygon(const std::vector<GeoPoint> &pts,$/;"	f	class:AirspacePolygon
AirspacePredicate	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^class AirspacePredicate$/;"	c
AirspacePredicateHeightRange	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  AirspacePredicateHeightRange(const double _h_min,$/;"	f	class:AirspacePredicateHeightRange
AirspacePredicateHeightRange	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^class AirspacePredicateHeightRange$/;"	c
AirspacePredicateHeightRangeExcludeTwo	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  AirspacePredicateHeightRangeExcludeTwo(const double _h_min,$/;"	f	class:AirspacePredicateHeightRangeExcludeTwo
AirspacePredicateHeightRangeExcludeTwo	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^class AirspacePredicateHeightRangeExcludeTwo$/;"	c
AirspacePredicateRef	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  explicit AirspacePredicateRef(const AirspacePredicate &_p):p(_p) {}$/;"	f	class:AirspacePredicateRef
AirspacePredicateRef	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^class AirspacePredicateRef {$/;"	c
AirspacePreviewRenderer	Renderer/AirspacePreviewRenderer.hpp	/^namespace AirspacePreviewRenderer$/;"	n
AirspaceRenderer	Renderer/AirspaceRenderer.hpp	/^  AirspaceRenderer(const AirspaceLook &_look)$/;"	f	class:AirspaceRenderer
AirspaceRenderer	Renderer/AirspaceRenderer.hpp	/^class AirspaceRenderer$/;"	c
AirspaceRendererSettings	Renderer/AirspaceRendererSettings.hpp	/^struct AirspaceRendererSettings {$/;"	s
AirspaceRoute	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AirspaceRoute():m_airspaces(false)$/;"	f	class:AirspaceRoute
AirspaceRoute	Engine/Route/AirspaceRoute.hpp	/^class AirspaceRoute : public RoutePlanner {$/;"	c
AirspaceSelectInfo	Engine/Airspace/AirspaceSorter.hpp	/^  AirspaceSelectInfo(const AbstractAirspace &_airspace)$/;"	f	class:AirspaceSelectInfo
AirspaceSelectInfo	Engine/Airspace/AirspaceSorter.hpp	/^class AirspaceSelectInfo$/;"	c
AirspaceSelectInfoVector	Engine/Airspace/AirspaceSorter.hpp	/^typedef std::vector<AirspaceSelectInfo> AirspaceSelectInfoVector;$/;"	t
AirspaceSettingsListWidget	Dialogs/Airspace/dlgAirspace.cpp	/^  AirspaceSettingsListWidget(bool _color_mode)$/;"	f	class:AirspaceSettingsListWidget
AirspaceSettingsListWidget	Dialogs/Airspace/dlgAirspace.cpp	/^class AirspaceSettingsListWidget : public ListWidget {$/;"	c	file:
AirspaceSize	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::AirspaceSize() const$/;"	f	class:AirspaceRoute
AirspaceTransparency	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceTransparency$/;"	e	enum:ControlIndex	file:
AirspaceTransparency	Profile/ProfileKeys.cpp	/^const char AirspaceTransparency[] = "AirspaceTransparency";$/;"	m	namespace:ProfileKeys	file:
AirspaceTree	Engine/Airspace/AirspacesInterface.hpp	/^                                        AirspaceIndexable> AirspaceTree;$/;"	t	class:AirspacesInterface
AirspaceVector	Engine/Airspace/AirspacesInterface.hpp	/^  typedef std::vector<Airspace> AirspaceVector; \/**< Vector of airspaces (used internally) *\/$/;"	t	class:AirspacesInterface
AirspaceVisibility	Airspace/AirspaceVisibility.hpp	/^  AirspaceVisibility(const AirspaceComputerSettings &_computer_settings,$/;"	f	class:AirspaceVisibility
AirspaceVisibility	Airspace/AirspaceVisibility.hpp	/^class AirspaceVisibility {$/;"	c
AirspaceVisiblePredicate	Airspace/AirspaceVisibility.hpp	/^typedef WrappedAirspacePredicate<AirspaceVisibility> AirspaceVisiblePredicate;$/;"	t
AirspaceVisitor	Engine/Airspace/AirspaceVisitor.hpp	/^class AirspaceVisitor {$/;"	c
AirspaceVisitorMap	Renderer/AirspaceRendererOther.cpp	/^  AirspaceVisitorMap(StencilMapCanvas &_helper,$/;"	f	class:final
AirspaceVisitorRenderer	Renderer/AirspaceRendererGL.cpp	/^  AirspaceVisitorRenderer(Canvas &_canvas, const WindowProjection &_projection,$/;"	f	class:final
AirspaceWarning	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::AirspaceWarning(const AbstractAirspace &_airspace)$/;"	f	class:AirspaceWarning
AirspaceWarning	Engine/Airspace/AirspaceWarning.hpp	/^class AirspaceWarning {$/;"	c
AirspaceWarning	Profile/ProfileKeys.cpp	/^const char AirspaceWarning[] = "AirspaceWarn";$/;"	m	namespace:ProfileKeys	file:
AirspaceWarningConfig	Engine/Airspace/AirspaceWarningConfig.hpp	/^struct AirspaceWarningConfig$/;"	s
AirspaceWarningCopy	Airspace/AirspaceWarningCopy.hpp	/^class AirspaceWarningCopy$/;"	c
AirspaceWarningDialog	Profile/ProfileKeys.cpp	/^const char AirspaceWarningDialog[] = "AirspaceWarnDialog";$/;"	m	namespace:ProfileKeys	file:
AirspaceWarningList	Engine/Airspace/AirspaceWarningManager.hpp	/^  typedef std::list<AirspaceWarning> AirspaceWarningList;$/;"	t	class:AirspaceWarningManager
AirspaceWarningList	MapWindow/Items/AirspaceBuilder.cpp	/^class AirspaceWarningList$/;"	c	file:
AirspaceWarningListWidget	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  AirspaceWarningListWidget(ProtectedAirspaceWarningManager &aw)$/;"	f	class:final
AirspaceWarningManager	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::AirspaceWarningManager(const AirspaceWarningConfig &_config,$/;"	f	class:AirspaceWarningManager
AirspaceWarningManager	Engine/Airspace/AirspaceWarningManager.hpp	/^class AirspaceWarningManager {$/;"	c
AirspaceWarningMonitor	Monitor/AirspaceWarningMonitor.hpp	/^  AirspaceWarningMonitor():widget(nullptr) {}$/;"	f	class:AirspaceWarningMonitor
AirspaceWarningMonitor	Monitor/AirspaceWarningMonitor.hpp	/^class AirspaceWarningMonitor {$/;"	c
AirspaceWarningWidget	Monitor/AirspaceWarningMonitor.cpp	/^  AirspaceWarningWidget(AirspaceWarningMonitor &_monitor,$/;"	f	class:final
AirspaceWarnings	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AirspaceWarnings,$/;"	e	enum:ControlIndex	file:
AirspaceWarningsInfo	NMEA/Derived.hpp	/^struct AirspaceWarningsInfo {$/;"	s
AirspaceXSRenderer	CrossSection/AirspaceXSRenderer.hpp	/^  AirspaceXSRenderer(const AirspaceLook &_look): look(_look) {}$/;"	f	class:AirspaceXSRenderer
AirspaceXSRenderer	CrossSection/AirspaceXSRenderer.hpp	/^class AirspaceXSRenderer$/;"	c
Airspaces	Engine/Airspace/Airspaces.hpp	/^  Airspaces(bool _owns_children=true)$/;"	f	class:Airspaces
Airspaces	Engine/Airspace/Airspaces.hpp	/^class Airspaces : public AirspacesInterface {$/;"	c
AirspacesInterface	Engine/Airspace/AirspacesInterface.hpp	/^class AirspacesInterface {$/;"	c
AlarmType	FLARM/Traffic.hpp	/^  enum class AlarmType: uint8_t {$/;"	c	struct:FlarmTraffic
Alignment	Widget/ButtonPanelWidget.hpp	/^  enum class Alignment {$/;"	c	class:ButtonPanelWidget
AllMonitors	Monitor/AllMonitors.cpp	/^AllMonitors::AllMonitors()$/;"	f	class:AllMonitors
AllVegasRequestSetting	Input/InputEventsVega.cpp	/^AllVegasRequestSetting(const char *name)$/;"	f	file:
AllVegasSendSetting	Input/InputEventsVega.cpp	/^AllVegasSendSetting(const char *name, int value)$/;"	f	file:
Allocate	Screen/Custom/Cache.cpp	/^  void Allocate() {$/;"	f	struct:TextCacheKey
Allocate	Screen/Memory/Buffer.hpp	/^  void Allocate(unsigned _width, unsigned _height) {$/;"	f	struct:WritableImageBuffer
Allocate	Util/Cache.hxx	/^	Item &Allocate() {$/;"	f	class:Cache
AllocateSource	NMEA/ThermalLocator.cpp	/^ThermalLocatorInfo::AllocateSource()$/;"	f	class:ThermalLocatorInfo
AllocateTraffic	FLARM/List.hpp	/^  FlarmTraffic *AllocateTraffic() {$/;"	f	struct:TrafficList
AllocateTraffic	GliderLink/List.hpp	/^  GliderLinkTraffic *AllocateTraffic() {$/;"	f	struct:GliderLinkTrafficList
AllocatedArray	Util/AllocatedArray.hxx	/^		:AllocatedArray(other.buffer) {}$/;"	f	class:AllocatedArray
AllocatedArray	Util/AllocatedArray.hxx	/^class AllocatedArray {$/;"	c
AllocatedGrid	Util/AllocatedGrid.hxx	/^	AllocatedGrid(unsigned _width, unsigned _height)$/;"	f	class:AllocatedGrid
AllocatedGrid	Util/AllocatedGrid.hxx	/^class AllocatedGrid {$/;"	c
AllocatedPath	OS/Path.hpp	/^  AllocatedPath(Path src)$/;"	f	class:AllocatedPath
AllocatedPath	OS/Path.hpp	/^  AllocatedPath(const_pointer _begin, const_pointer _end)$/;"	f	class:AllocatedPath
AllocatedPath	OS/Path.hpp	/^  AllocatedPath(size_t size):value(value_type::Donate(new char_type[size])) {}$/;"	f	class:AllocatedPath
AllocatedPath	OS/Path.hpp	/^  AllocatedPath(std::nullptr_t n):value(n) {}$/;"	f	class:AllocatedPath
AllocatedPath	OS/Path.hpp	/^  AllocatedPath(value_type &&src):value(std::move(src)) {}$/;"	f	class:AllocatedPath
AllocatedPath	OS/Path.hpp	/^  explicit AllocatedPath(const_pointer src)$/;"	f	class:AllocatedPath
AllocatedPath	OS/Path.hpp	/^class AllocatedPath {$/;"	c
AllocatedSocketAddress	Net/AllocatedSocketAddress.hxx	/^		:AllocatedSocketAddress((SocketAddress)src) {}$/;"	f	class:AllocatedSocketAddress
AllocatedSocketAddress	Net/AllocatedSocketAddress.hxx	/^	AllocatedSocketAddress(struct sockaddr *_address,$/;"	f	class:AllocatedSocketAddress
AllocatedSocketAddress	Net/AllocatedSocketAddress.hxx	/^class AllocatedSocketAddress {$/;"	c
AllocatedString	Util/AllocatedString.hxx	/^class AllocatedString {$/;"	c
Allocator	Util/SliceAllocator.hxx	/^	typedef SliceAllocator<T, size> Allocator;$/;"	t	class:GlobalSliceAllocator
AllowIncrementalBoundaryStats	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::AllowIncrementalBoundaryStats(const AircraftState &aircraft) const$/;"	f	class:OrderedTask
AllowLanguage	Language/Language.cpp	/^AllowLanguage()$/;"	f
AllowLanguage	Language/Language.hpp	/^static inline void AllowLanguage() {}$/;"	f
AllowedCharacters	Dialogs/TextEntry.hpp	/^typedef std::function<const TCHAR *(const TCHAR *)> AllowedCharacters;$/;"	t
AllowedCharactersCallback	Dialogs/TouchTextEntry.cpp	/^static AllowedCharacters AllowedCharactersCallback;$/;"	v	file:
AllowedCharactersFunction	Form/DataField/Prefix.hpp	/^  typedef std::function<const TCHAR *(const TCHAR *)> AllowedCharactersFunction;$/;"	t	class:final
AlmostTheSame	Engine/Route/FlatTriangleFanTree.cpp	/^AlmostTheSame(const FlatGeoPoint p1, const FlatGeoPoint p2)$/;"	f	file:
Alpha	Screen/Memory/Color.hpp	/^  Alpha() const$/;"	f	class:Color
Alpha	Screen/OpenGL/Color.hpp	/^  Alpha() const$/;"	f	class:Color
Alpha	Screen/PortableColor.hpp	/^  constexpr uint8_t Alpha() const {$/;"	f	class:BGRA8Color
AlphaBlend	Screen/GDI/Canvas.cpp	/^Canvas::AlphaBlend(int dest_x, int dest_y,$/;"	f	class:Canvas
AlphaBlend	Screen/GDI/Canvas.hpp	/^  void AlphaBlend(int dest_x, int dest_y,$/;"	f	class:Canvas
AlphaBlend	Screen/Memory/Canvas.cpp	/^Canvas::AlphaBlend(int dest_x, int dest_y,$/;"	f	class:Canvas
AlphaBlend16	Screen/Memory/NEON.hpp	/^  static void AlphaBlend16(uint8_t *gcc_restrict p,$/;"	f	class:NEONAlphaPixelOperations
AlphaBlend4	Screen/Memory/MMX.hpp	/^  static __m64 AlphaBlend4(__m64 p, __m64 q,$/;"	f	class:MMXAlphaPixelOperations
AlphaBlendNotWhite	Screen/Memory/Canvas.cpp	/^Canvas::AlphaBlendNotWhite(int dest_x, int dest_y,$/;"	f	class:Canvas
AlphaBlendTo	Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::AlphaBlendTo(Canvas &canvas,$/;"	f	class:TransparentRendererCache
AlphaBlendTo	Renderer/TransparentRendererCache.hpp	/^  void AlphaBlendTo(Canvas &canvas, const WindowProjection &projection,$/;"	f	class:TransparentRendererCache
AlphaPixelOperations	Screen/Memory/Optimised.hpp	/^  explicit constexpr AlphaPixelOperations(const uint8_t alpha)$/;"	f	class:AlphaPixelOperations
AlphaPixelOperations	Screen/Memory/Optimised.hpp	/^class AlphaPixelOperations$/;"	c
AlphaPixelOperations	Screen/Memory/Optimised.hpp	/^class AlphaPixelOperations<BGRAPixelTraits>$/;"	c
AlphaPixelOperations	Screen/Memory/Optimised.hpp	/^class AlphaPixelOperations<GreyscalePixelTraits>$/;"	c
AltArivalAGL	Renderer/WaypointLabelList.hpp	/^    int AltArivalAGL;$/;"	m	struct:WaypointLabelList::Label
AltMargin	Profile/ProfileKeys.cpp	/^const char AltMargin[] = "AltMargin";$/;"	m	namespace:ProfileKeys	file:
AltMode	Profile/ProfileKeys.cpp	/^const char AltMode[] = "AltitudeMode";$/;"	m	namespace:ProfileKeys	file:
AltWarningMargin	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  AltWarningMargin,$/;"	e	enum:ControlIndex	file:
AltairProCreateOnPort	Device/Driver/AltairPro.cpp	/^AltairProCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
AltairProDevice	Device/Driver/AltairPro.cpp	/^  AltairProDevice(Port &_port):port(_port){}$/;"	f	class:AltairProDevice
AltairProDevice	Device/Driver/AltairPro.cpp	/^class AltairProDevice : public AbstractDevice {$/;"	c	file:
AlternateList	Engine/Task/Unordered/AlternateList.hpp	/^class AlternateList : public std::vector<AlternatePoint> {$/;"	c
AlternateMode	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  AlternateMode,$/;"	e	enum:ControlIndex	file:
AlternatePoint	Engine/Task/Unordered/AlternatePoint.hpp	/^  AlternatePoint(const WaypointPtr &_waypoint, const GlideResult &_solution)$/;"	f	struct:AlternatePoint
AlternatePoint	Engine/Task/Unordered/AlternatePoint.hpp	/^  explicit AlternatePoint(const WaypointPtr &_waypoint)$/;"	f	struct:AlternatePoint
AlternatePoint	Engine/Task/Unordered/AlternatePoint.hpp	/^struct AlternatePoint {$/;"	s
AlternateRank	Engine/Task/Unordered/AlternateTask.cpp	/^struct AlternateRank:$/;"	s	file:
AlternateTask	Engine/Task/Unordered/AlternateTask.cpp	/^AlternateTask::AlternateTask(const TaskBehaviour &tb,$/;"	f	class:AlternateTask
AlternateTaskPoint	Engine/Task/Unordered/AbortTask.hpp	/^    AlternateTaskPoint(WaypointPtr &&waypoint, const TaskBehaviour &tb,$/;"	f	struct:AbortTask::AlternateTaskPoint
AlternateTaskPoint	Engine/Task/Unordered/AbortTask.hpp	/^  struct AlternateTaskPoint {$/;"	s	class:AbortTask
AlternateTaskVector	Engine/Task/Unordered/AbortTask.hpp	/^  typedef std::vector<AlternateTaskPoint> AlternateTaskVector;$/;"	t	class:AbortTask
AlternatesListWidget	Dialogs/Task/AlternatesListDialog.cpp	/^  AlternatesListWidget(const DialogLook &_dialog_look)$/;"	f	class:final
Altitude	Dialogs/Settings/dlgBasicSettings.cpp	/^  Altitude,$/;"	e	enum:ControlIndex	file:
Altitude	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Altitude,$/;"	e	enum:Controls	file:
AltitudeInfoPanel	InfoBoxes/Panel/AltitudeInfo.cpp	/^  AltitudeInfoPanel():TwoWidgets(false) {}$/;"	f	class:AltitudeInfoPanel
AltitudeInfoPanel	InfoBoxes/Panel/AltitudeInfo.cpp	/^class AltitudeInfoPanel : public TwoWidgets, NullBlackboardListener {$/;"	c	file:
AltitudeReference	Geo/AltitudeReference.hpp	/^enum class AltitudeReference : int8_t {$/;"	c
AltitudeSetupPanel	InfoBoxes/Panel/AltitudeSetup.cpp	/^  AltitudeSetupPanel():RowFormWidget(UIGlobals::GetDialogLook()) {}$/;"	f	class:AltitudeSetupPanel
AltitudeSetupPanel	InfoBoxes/Panel/AltitudeSetup.cpp	/^class AltitudeSetupPanel : public RowFormWidget,$/;"	c	file:
AltitudeSimulatorOffsetButtons	InfoBoxes/Panel/AltitudeSimulator.cpp	/^  AltitudeSimulatorOffsetButtons(Args&&... args):OffsetButtonsWidget(args...) {}$/;"	f	class:final
AltitudeState	Engine/Navigation/Aircraft.hpp	/^struct AltitudeState $/;"	s
AltitudeUnit	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    AltitudeUnit,$/;"	e	enum:final::Controls
AltitudeUnitsValue	Profile/ProfileKeys.cpp	/^const char AltitudeUnitsValue[] = "AltitudeUnit";$/;"	m	namespace:ProfileKeys	file:
AlwaysTrue	Util/QuadTree.hxx	/^	struct AlwaysTrue {$/;"	s	class:QuadTree
AnalysisPage	Dialogs/dlgAnalysis.hpp	/^enum class AnalysisPage {$/;"	c
AnalysisWidget	Dialogs/dlgAnalysis.cpp	/^  AnalysisWidget(WndForm &_dialog, const Look &look,$/;"	f	class:final
AndPredicate	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  constexpr AndPredicate(A_ &&a, B_ &&b)$/;"	f	class:AndPredicate
AndPredicate	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^class AndPredicate : A, B {$/;"	c
AndroidBitmap	Android/Bitmap.hpp	/^class AndroidBitmap {$/;"	c
AndroidDownloadManager	Android/DownloadManager.hpp	/^  AndroidDownloadManager(JNIEnv *env, jobject obj):object(env, obj) {}$/;"	f	class:AndroidDownloadManager
AndroidDownloadManager	Android/DownloadManager.hpp	/^class AndroidDownloadManager {$/;"	c
AndroidIOIOUartPort	Device/Port/AndroidIOIOUartPort.hpp	/^namespace AndroidIOIOUartPort$/;"	n
AndroidPCMPlayer	Audio/AndroidPCMPlayer.hpp	/^class AndroidPCMPlayer : public PCMPlayer {$/;"	c
AndroidPort	Device/Port/AndroidPort.cpp	/^AndroidPort::AndroidPort(PortListener *_listener, DataHandler &_handler,$/;"	f	class:AndroidPort
AndroidPort	Device/Port/AndroidPort.hpp	/^class AndroidPort : public BufferedPort$/;"	c
AndroidSimpleBufferQueue	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    explicit AndroidSimpleBufferQueue(SLAndroidSimpleBufferQueueItf _queue)$/;"	f	class:SLES::AndroidSimpleBufferQueue
AndroidSimpleBufferQueue	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^  class AndroidSimpleBufferQueue {$/;"	c	namespace:SLES
Angle	Math/Angle.hpp	/^  constexpr Angle(DMS dms):Angle(Degrees(dms.ToFloat())) {}$/;"	f	class:Angle
Angle	Math/Angle.hpp	/^  explicit constexpr Angle(const double _value):value(_value) {};$/;"	f	class:Angle
Angle	Math/Angle.hpp	/^class Angle$/;"	c
AngleAdd	Device/Driver/IMI/Protocol/IGC.cpp	/^AngleAdd(IMI::IMIDWORD dwA, long diff)$/;"	f	file:
AngleConverter	Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::AngleConverter::AngleConverter(Angle angle)$/;"	f	class:IMI::AngleConverter
AngleConverter	Device/Driver/IMI/Protocol/Conversion.hpp	/^    AngleConverter() {}$/;"	f	struct:IMI::AngleConverter
AngleConverter	Device/Driver/IMI/Protocol/Conversion.hpp	/^  struct AngleConverter$/;"	s	namespace:IMI
AngleDataField	Form/DataField/Angle.hpp	/^  AngleDataField(Angle _value, unsigned _step, bool _fine,$/;"	f	class:final
AngleDataField	Form/DataField/Angle.hpp	/^  AngleDataField(int _value, unsigned _step, bool _fine,$/;"	f	class:final
AngleDataField	Form/DataField/Angle.hpp	/^  AngleDataField(unsigned _value, unsigned _step, bool _fine,$/;"	f	class:final
AngleEntryDialog	Dialogs/NumberEntry.cpp	/^AngleEntryDialog(const TCHAR *caption, Angle &value)$/;"	f
AngleRange	Math/ARange.hpp	/^  constexpr AngleRange(Angle _start, Angle _end)$/;"	f	struct:AngleRange
AngleRange	Math/ARange.hpp	/^struct AngleRange {$/;"	s
AngleToDonutVertex	Screen/OpenGL/Canvas.cpp	/^AngleToDonutVertex(Angle angle)$/;"	f	file:
AngleToDonutVertices	Screen/OpenGL/Canvas.cpp	/^AngleToDonutVertices(Angle start, Angle end)$/;"	f	file:
AngleToEarthDistance	Geo/FAISphere.hpp	/^  AngleToEarthDistance(Angle angle)$/;"	f	namespace:FAISphere
AngleToGradient	Engine/Util/Gradient.cpp	/^AngleToGradient(const double d)$/;"	f
AngleToHeight	Terrain/RasterProjection.hpp	/^  constexpr int AngleToHeight(Angle angle) const {$/;"	f	class:RasterProjection
AngleToIndex	Engine/Route/RouteLink.cpp	/^AngleToIndex(Angle a)$/;"	f	file:
AngleToLX	Device/Driver/LX/Declare.cpp	/^AngleToLX(Angle value)$/;"	f	file:
AngleToPixels	Projection/Projection.hpp	/^  double AngleToPixels(Angle angle) const {$/;"	f	class:Projection
AngleToWidth	Terrain/RasterProjection.hpp	/^  constexpr int AngleToWidth(Angle angle) const {$/;"	f	class:RasterProjection
AnnularSectorZone	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  AnnularSectorZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:AnnularSectorZone
AnnularSectorZone	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  AnnularSectorZone(const AnnularSectorZone &other, const GeoPoint &reference)$/;"	f	class:AnnularSectorZone
AnnularSectorZone	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  AnnularSectorZone(const GeoPoint &loc,$/;"	f	class:AnnularSectorZone
AnnularSectorZone	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^class AnnularSectorZone:$/;"	c
AntiFlickerWindow	Screen/AntiFlickerWindow.hpp	/^class AntiFlickerWindow : public BufferWindow {$/;"	c
AntiFlickerWindow	Screen/AntiFlickerWindow.hpp	/^class AntiFlickerWindow : public FakeBufferWindow {$/;"	c
AnyCanvas	Screen/AnyCanvas.hpp	/^  AnyCanvas():VirtualCanvas({1, 1}) {}$/;"	f	class:AnyCanvas
AnyCanvas	Screen/AnyCanvas.hpp	/^class AnyCanvas : public Canvas {};$/;"	c
AnyCanvas	Screen/AnyCanvas.hpp	/^class AnyCanvas : public VirtualCanvas {$/;"	c
AppAveNeedle	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppAveNeedle,$/;"	e	enum:ControlIndex	file:
AppAveNeedle	Profile/ProfileKeys.cpp	/^const char AppAveNeedle[] = "AppAveNeedle";$/;"	m	namespace:ProfileKeys	file:
AppAveThermalNeedle	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppAveThermalNeedle,$/;"	e	enum:ControlIndex	file:
AppAveThermalNeedle	Profile/ProfileKeys.cpp	/^const char AppAveThermalNeedle[] = "AppAveThermalNeedle";$/;"	m	namespace:ProfileKeys	file:
AppDialogStyle	Profile/ProfileKeys.cpp	/^const char AppDialogStyle[] = "AppDialogStyle";$/;"	m	namespace:ProfileKeys	file:
AppDialogTabStyle	Profile/ProfileKeys.cpp	/^const char AppDialogTabStyle[] = "AppDialogTabStyle";$/;"	m	namespace:ProfileKeys	file:
AppFlarmLocation	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppFlarmLocation,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioAvgText	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioAvgText,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioAvgText	Profile/ProfileKeys.cpp	/^const char AppGaugeVarioAvgText[] = "AppGaugeVarioAvgText";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioBallast	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioBallast,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioBallast	Profile/ProfileKeys.cpp	/^const char AppGaugeVarioBallast[] = "AppGaugeVarioBallast";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioBugs	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioBugs,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioBugs	Profile/ProfileKeys.cpp	/^const char AppGaugeVarioBugs[] = "AppGaugeVarioBugs";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioGross	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioGross,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioGross	Profile/ProfileKeys.cpp	/^const char AppGaugeVarioGross[] = "AppGaugeVarioGross";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioMc	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioMc,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioMc	Profile/ProfileKeys.cpp	/^const char AppGaugeVarioMc[] = "AppGaugeVarioMc";$/;"	m	namespace:ProfileKeys	file:
AppGaugeVarioSpeedToFly	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  AppGaugeVarioSpeedToFly,$/;"	e	enum:ControlIndex	file:
AppGaugeVarioSpeedToFly	Profile/ProfileKeys.cpp	/^const char AppGaugeVarioSpeedToFly[] = "AppGaugeVarioSpeedToFly";$/;"	m	namespace:ProfileKeys	file:
AppIndLandable	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppIndLandable,$/;"	e	enum:ControlIndex	file:
AppIndLandable	Profile/ProfileKeys.cpp	/^const char AppIndLandable[] = "AppIndLandable";$/;"	m	namespace:ProfileKeys	file:
AppInfoBoxBorder	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInfoBoxBorder,$/;"	e	enum:ControlIndex	file:
AppInfoBoxBorder	Profile/ProfileKeys.cpp	/^const char AppInfoBoxBorder[] = "AppInfoBoxBorder";$/;"	m	namespace:ProfileKeys	file:
AppInfoBoxColors	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInfoBoxColors,$/;"	e	enum:ControlIndex	file:
AppInfoBoxColors	Profile/ProfileKeys.cpp	/^const char AppInfoBoxColors[] = "AppInfoBoxColors";$/;"	m	namespace:ProfileKeys	file:
AppInfoBoxGeom	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInfoBoxGeom,$/;"	e	enum:ControlIndex	file:
AppInverseInfoBox	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppInverseInfoBox,$/;"	e	enum:ControlIndex	file:
AppInverseInfoBox	Profile/ProfileKeys.cpp	/^const char AppInverseInfoBox[] = "AppInverseInfoBox";$/;"	m	namespace:ProfileKeys	file:
AppLandableRenderingScale	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppLandableRenderingScale,$/;"	e	enum:ControlIndex	file:
AppLandableRenderingScale	Profile/ProfileKeys.cpp	/^const char AppLandableRenderingScale[] = "AppLandableRenderingScale";$/;"	m	namespace:ProfileKeys	file:
AppScaleRunwayLength	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppScaleRunwayLength$/;"	e	enum:ControlIndex	file:
AppScaleRunwayLength	Profile/ProfileKeys.cpp	/^const char AppScaleRunwayLength[] = "AppScaleRunwayLength";$/;"	m	namespace:ProfileKeys	file:
AppStatusMessageAlignment	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  AppStatusMessageAlignment,$/;"	e	enum:ControlIndex	file:
AppStatusMessageAlignment	Profile/ProfileKeys.cpp	/^const char AppStatusMessageAlignment[] = "AppStatusMessageAlignment";$/;"	m	namespace:ProfileKeys	file:
AppTextInputStyle	Profile/ProfileKeys.cpp	/^const char AppTextInputStyle[] = "AppTextInputStyle";$/;"	m	namespace:ProfileKeys	file:
AppUseSWLandablesRendering	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  AppUseSWLandablesRendering,$/;"	e	enum:ControlIndex	file:
AppUseSWLandablesRendering	Profile/ProfileKeys.cpp	/^const char AppUseSWLandablesRendering[] = "AppUseSWLandablesRendering";$/;"	m	namespace:ProfileKeys	file:
Append	Device/Declaration.hpp	/^  void Append(const Waypoint &waypoint) {$/;"	f	struct:Declaration
Append	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Append(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
Append	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Append(const OrderedTaskPoint &new_tp)$/;"	f	class:OrderedTask
Append	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Append(WaypointPtr wp)$/;"	f	class:Waypoints
Append	Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr Append(Waypoint &&wp) {$/;"	f	class:Waypoints
Append	Form/DataField/ComboList.hpp	/^  unsigned Append(const TCHAR *string_value) {$/;"	f	class:ComboList
Append	Form/DataField/ComboList.hpp	/^  unsigned Append(const TCHAR *string_value,$/;"	f	class:ComboList
Append	Form/DataField/ComboList.hpp	/^  unsigned Append(int int_value, const TCHAR *string_value) {$/;"	f	class:ComboList
Append	Form/DataField/ComboList.hpp	/^  unsigned Append(int int_value,$/;"	f	class:ComboList
Append	Kobo/WifiDialog.cpp	/^WifiListWidget::Append(const WifiConfiguredNetworkInfo &src)$/;"	f	class:WifiListWidget
Append	MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFan &Append(unsigned n) {$/;"	f	struct:ProjectedFans
Append	MapWindow/MapWindowGlideRange.cpp	/^  void Append(const PixelPoint &pt) {$/;"	f	struct:ProjectedFans
Append	Net/HTTP/Slist.hxx	/^	void Append(const char *value) {$/;"	f	class:CurlSlist
Append	Util/MD5.cpp	/^MD5::Append(const void *data, size_t length)$/;"	f	class:MD5
Append	Util/MD5.cpp	/^MD5::Append(uint8_t ch)$/;"	f	class:MD5
Append	Util/StringBuilder.hxx	/^	void Append(T ch) {$/;"	f	class:StringBuilder
Append	Util/StringBuilder.hxx	/^	void Append(T ch, Args&&... args) {$/;"	f	class:StringBuilder
Append	Util/StringBuilder.hxx	/^	void Append(const_pointer src) {$/;"	f	class:StringBuilder
Append	Util/StringBuilder.hxx	/^	void Append(const_pointer src, Args&&... args) {$/;"	f	class:StringBuilder
Append	Util/StringBuilder.hxx	/^	void Append(const_pointer src, size_t length) {$/;"	f	class:StringBuilder
Append	Util/StringBuilder.hxx	/^	void Append(const_pointer src, size_t length, Args&&... args) {$/;"	f	class:StringBuilder
AppendArc	Airspace/AirspaceParser.cpp	/^  AppendArc(Angle start, Angle end)$/;"	f	struct:TempAirspaceType
AppendArc	Airspace/AirspaceParser.cpp	/^  AppendArc(const GeoPoint start, const GeoPoint end)$/;"	f	struct:TempAirspaceType
AppendChild	XML/DataNodeXML.cpp	/^WritableDataNodeXML::AppendChild(const TCHAR *name)$/;"	f	class:WritableDataNodeXML
AppendComboValue	Form/DataField/Angle.cpp	/^AppendComboValue(ComboList &combo_list, unsigned value)$/;"	f	file:
AppendComboValue	Form/DataField/Float.cpp	/^DataFieldFloat::AppendComboValue(ComboList &combo_list, double value) const$/;"	f	class:DataFieldFloat
AppendComboValue	Form/DataField/Integer.cpp	/^DataFieldInteger::AppendComboValue(ComboList &combo_list, int value) const$/;"	f	class:DataFieldInteger
AppendComboValue	Form/DataField/Time.cpp	/^DataFieldTime::AppendComboValue(ComboList &combo_list, int value) const$/;"	f	class:DataFieldTime
AppendEvent	Input/InputConfig.hpp	/^  unsigned AppendEvent(pt2Event handler, const TCHAR *misc,$/;"	f	struct:InputConfig
AppendFormat	Util/StaticString.hxx	/^	void AppendFormat(const_pointer fmt, Args&&... args) {$/;"	f	class:StaticStringBase
AppendGRecordToFile	Logger/GRecord.cpp	/^GRecord::AppendGRecordToFile(Path path)$/;"	f	class:GRecord
AppendIGCString	Logger/GRecord.cpp	/^AppendIGCString(MD5 &md5, const char *s, bool ignore_comma)$/;"	f	file:
AppendMenu	Input/InputConfig.hpp	/^  void AppendMenu(unsigned mode_id, const TCHAR* label,$/;"	f	struct:InputConfig
AppendMenu	Input/InputDefaults.cpp	35;"	d	file:
AppendMode	Input/InputConfig.hpp	/^  int AppendMode(TStringView name) {$/;"	f	struct:InputConfig
AppendNMEAChecksum	NMEA/Checksum.cpp	/^AppendNMEAChecksum(char *p)$/;"	f
AppendOptionalStart	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::AppendOptionalStart(WaypointPtr wp)$/;"	f	class:AbstractTaskFactory
AppendOptionalStart	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::AppendOptionalStart(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
AppendOptionalStart	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::AppendOptionalStart(const OrderedTaskPoint &new_tp)$/;"	f	class:OrderedTask
AppendPoint	Screen/OpenGL/Triangulate.cpp	/^AppendPoint(BulkPixelPoint *&strip, int x, int y)$/;"	f	file:
AppendRecordToBuffer	Logger/GRecord.cpp	/^GRecord::AppendRecordToBuffer(const char *in)$/;"	f	class:GRecord
AppendStringToBuffer	Logger/GRecord.cpp	/^GRecord::AppendStringToBuffer(const char *in)$/;"	f	class:GRecord
AppendToTask	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^AppendToTask(ProtectedTaskManager &task_manager,$/;"	f	file:
AppendToTask	Task/MapTaskManager.cpp	/^AppendToTask(OrderedTask *task, WaypointPtr &&waypoint)$/;"	f	file:
AppendToTask	Task/MapTaskManager.cpp	/^MapTaskManager::AppendToTask(WaypointPtr &&waypoint)$/;"	f	class:MapTaskManager
Apply	IGC/IGCFix.cpp	/^IGCFix::Apply(const NMEAInfo &basic)$/;"	f	class:IGCFix
ApplyExternalSettings	ApplyExternalSettings.cpp	/^ApplyExternalSettings()$/;"	f
ApplyUnit	Profile/UnitsConfig.cpp	/^ApplyUnit(Unit &value, Unit new_value)$/;"	f	file:
ApplyVegaSwitches	ApplyVegaSwitches.cpp	/^ApplyVegaSwitches()$/;"	f
ApproxRadius	Geo/Flat/TaskProjection.cpp	/^TaskProjection::ApproxRadius() const$/;"	f	class:TaskProjection
ArcStepWidth	Airspace/AirspaceParser.cpp	/^  ArcStepWidth(double radius)$/;"	f	struct:TempAirspaceType
AreAxesSwapped	DisplayOrientation.hpp	/^AreAxesSwapped(DisplayOrientation orientation)$/;"	f
Area	Util/SliceAllocator.hxx	/^		Area()$/;"	f	struct:SliceAllocator::Area
Area	Util/SliceAllocator.hxx	/^	struct Area {$/;"	s	class:SliceAllocator
Area	Weather/PCMet/Overlays.hpp	/^  enum class Area {$/;"	c	struct:PCMet::OverlayInfo
Args	OS/Args.hpp	/^  Args(Args &&other):name(other.name), usage(other.usage) {$/;"	f	class:Args
Args	OS/Args.hpp	/^  Args(const TCHAR *_cmdline, const char *_usage)$/;"	f	class:Args
Args	OS/Args.hpp	/^  Args(int argc, char **argv, const char *_usage)$/;"	f	class:Args
Args	OS/Args.hpp	/^class Args {$/;"	c
Array	FLARM/NameDatabase.hpp	/^  typedef StaticArray<Record, 200> Array;$/;"	t	class:FlarmNameDatabase
Array	Util/TrivialArray.hxx	/^	typedef std::array<T, max> Array;$/;"	t	class:TrivialArray
ArrayWriter	JSON/Writer.hpp	/^    ArrayWriter(BufferedOutputStream &_writer):writer(_writer), first(true) {$/;"	f	class:JSON::ArrayWriter
ArrayWriter	JSON/Writer.hpp	/^  class ArrayWriter {$/;"	c	namespace:JSON
ArrivalAltitudeMapItem	MapWindow/Items/MapItem.hpp	/^  ArrivalAltitudeMapItem(double _elevation,$/;"	f	struct:ArrivalAltitudeMapItem
ArrivalAltitudeMapItem	MapWindow/Items/MapItem.hpp	/^struct ArrivalAltitudeMapItem: public MapItem$/;"	s
ArrivalHeight	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  ArrivalHeight,$/;"	e	enum:ControlIndex	file:
ArrivalHeightDisplay	Renderer/WaypointRendererSettings.hpp	/^  enum class ArrivalHeightDisplay : uint8_t {$/;"	c	struct:WaypointRendererSettings
ArrowPagerWidget	Widget/ArrowPagerWidget.hpp	/^  ArrowPagerWidget(ActionListener &_action_listener,$/;"	f	class:ArrowPagerWidget
ArrowPagerWidget	Widget/ArrowPagerWidget.hpp	/^class ArrowPagerWidget : public PagerWidget, ActionListener {$/;"	c
AsBearing	Math/Angle.cpp	/^Angle::AsBearing() const$/;"	f	class:Angle
AsDelta	Math/Angle.cpp	/^Angle::AsDelta() const$/;"	f	class:Angle
AsMinutes	Time/RoughTime.hpp	/^  constexpr int AsMinutes() const {$/;"	f	class:RoughTimeDelta
AsSeconds	Time/RoughTime.hpp	/^  constexpr int AsSeconds() const {$/;"	f	class:RoughTimeDelta
AsVector	Engine/Airspace/Airspaces.cpp	/^Airspaces::AsVector() const$/;"	f	class:Airspaces
AsioThread	IO/Async/AsioThread.hpp	/^  AsioThread():Thread("asio") {}$/;"	f	class:final
AssociatePointer	Lua/Associate.cpp	/^Lua::AssociatePointer(lua_State *L, const char *table,$/;"	f	class:Lua
AsyncAccept	Device/Port/TCPPort.hpp	/^  void AsyncAccept() {$/;"	f	class:final
AsyncJobRunner	Job/Async.hpp	/^  AsyncJobRunner():running(false) {}$/;"	f	class:final
AsyncRead	Device/Port/TCPPort.hpp	/^  void AsyncRead() {$/;"	f	class:final
AsyncRead	Device/Port/TTYPort.hpp	/^  void AsyncRead() {$/;"	f	class:TTYPort
AsyncRead	Device/Port/UDPPort.hpp	/^  void AsyncRead() {$/;"	f	class:final
AsyncRead	Event/Poll/LibInput/LibInputHandler.hpp	/^  void AsyncRead() {$/;"	f	class:final
AsyncRead	Event/Poll/Linux/Input.hpp	/^  void AsyncRead() {$/;"	f	class:final
AsyncRead	Event/Poll/WaylandQueue.hpp	/^  void AsyncRead() {$/;"	f	class:final
AsyncRead	Event/Poll/X11Queue.hpp	/^  void AsyncRead() {$/;"	f	class:X11EventQueue
AsyncRead	IO/Async/SignalListener.hpp	/^  void AsyncRead() {$/;"	f	class:SignalListener
AsyncReadEventPipe	Event/Poll/Queue.hpp	/^  void AsyncReadEventPipe() {$/;"	f	class:final
AsyncReceive	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::AsyncReceive()$/;"	f	class:SkyLinesTracking::Client
AsyncReceive	Tracking/SkyLines/Server.cpp	/^Server::AsyncReceive()$/;"	f	class:SkyLinesTracking::Server
At	Screen/Memory/Buffer.hpp	/^  constexpr const_pointer At(unsigned x, unsigned y) const {$/;"	f	struct:WritableImageBuffer
At	Screen/Memory/Buffer.hpp	/^  constexpr pointer At(unsigned x, unsigned y) const {$/;"	f	struct:ConstImageBuffer
At	Screen/Memory/Buffer.hpp	/^  constexpr pointer At(unsigned x, unsigned y) {$/;"	f	struct:WritableImageBuffer
At	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer At(const_pointer p, unsigned pitch,$/;"	f	struct:BGRAPixelTraits
At	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer At(const_pointer p, unsigned pitch,$/;"	f	struct:GreyscalePixelTraits
At	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer At(pointer p, unsigned pitch,$/;"	f	struct:BGRAPixelTraits
At	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer At(pointer p, unsigned pitch,$/;"	f	struct:GreyscalePixelTraits
At	Screen/Memory/RasterCanvas.hpp	/^  pointer At(unsigned x, unsigned y) {$/;"	f	class:RasterCanvas
AtMidnight	Time/BrokenDateTime.hpp	/^  BrokenDateTime AtMidnight() const {$/;"	f	struct:BrokenDateTime
AtScopeExit	Util/ScopeExit.hxx	85;"	d
AtmosphericPressure	Atmosphere/Pressure.hpp	/^  AtmosphericPressure(double _value):value(_value) {}$/;"	f	class:AtmosphericPressure
AtmosphericPressure	Atmosphere/Pressure.hpp	/^class AtmosphericPressure $/;"	c
AttachEnum	Lua/InputEvent.cpp	/^  void AttachEnum(unsigned code) {$/;"	f	class:final
AttachFramebuffer	Screen/OpenGL/RenderBuffer.hpp	/^  void AttachFramebuffer(GLenum attachment) {$/;"	f	class:GLRenderBuffer
AttachFramebuffer	Screen/OpenGL/Texture.hpp	/^  void AttachFramebuffer(GLenum attachment) {$/;"	f	class:GLTexture
AttachGesture	Lua/InputEvent.cpp	/^  void AttachGesture(const TCHAR* gesture) {$/;"	f	class:final
AttachKey	Lua/InputEvent.cpp	/^  void AttachKey(unsigned code) {$/;"	f	class:final
AttachShader	Screen/OpenGL/Program.hpp	/^  void AttachShader(const GLShader &shader) {$/;"	f	class:GLProgram
AttitudeState	NMEA/Attitude.hpp	/^struct AttitudeState$/;"	s
Attrib	XML/Parser.cpp	/^  enum Attrib {$/;"	g	namespace:XML	file:
Attribute	Screen/OpenGL/Attribute.hpp	/^  namespace Attribute {$/;"	n	namespace:OpenGL
Attribute	XML/Node.hpp	/^      Attribute(const TCHAR *_name, const TCHAR *_value)$/;"	f	struct:XMLNode::Data::Attribute
Attribute	XML/Node.hpp	/^      Attribute(const TCHAR *_name, size_t name_length,$/;"	f	struct:XMLNode::Data::Attribute
Attribute	XML/Node.hpp	/^      Attribute(tstring &&_name, const TCHAR *_value, size_t value_length)$/;"	f	struct:XMLNode::Data::Attribute
Attribute	XML/Node.hpp	/^    struct Attribute : private NonCopyable {$/;"	s	struct:XMLNode::Data
Audio	Dialogs/Device/Vega/Schemes.hpp	/^  struct Audio {$/;"	s	struct:VEGA_SCHEME
AudioCallback	Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::AudioCallback(int16_t *stream, size_t len_bytes)$/;"	f	class:SDLPCMPlayer
AudioConfigPanel	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  AudioConfigPanel() : RowFormWidget(UIGlobals::GetDialogLook()) {$/;"	f	class:final
AudioVarioConfigPanel	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  AudioVarioConfigPanel()$/;"	f	class:final
AudioVarioGlue	Audio/VarioGlue.hpp	/^namespace AudioVarioGlue {$/;"	n
Auto	Dialogs/WidgetDialog.hpp	/^  struct Auto {};$/;"	s	class:WidgetDialog
Auto	Gauge/TrafficSettings.hpp	/^    Auto,$/;"	m	class:TrafficSettings::GaugeLocation
AutoAdvance	Profile/ProfileKeys.cpp	/^const char AutoAdvance[] = "AutoAdvance";$/;"	m	namespace:ProfileKeys	file:
AutoBugs	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  AutoBugs,$/;"	e	enum:ControlIndex	file:
AutoBugs	Profile/ProfileKeys.cpp	/^const char AutoBugs[] = "AutoBugs";$/;"	m	namespace:ProfileKeys	file:
AutoCloseFlarmDialog	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  AutoCloseFlarmDialog,$/;"	e	enum:ControlIndex	file:
AutoCloseFlarmDialog	Profile/ProfileKeys.cpp	/^const char AutoCloseFlarmDialog[] = "AutoCloseFlarmDialog";$/;"	m	namespace:ProfileKeys	file:
AutoDetect	Units/UnitsGlue.cpp	/^AutoDetect()$/;"	f	file:
AutoDetectLanguage	Language/LanguageGlue.cpp	/^AutoDetectLanguage()$/;"	f	file:
AutoHide	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AutoHide()$/;"	f	file:
AutoLoad	Dialogs/Traffic/TrafficList.cpp	/^    void AutoLoad() {$/;"	f	struct:TrafficListWidget::Item
AutoLogger	Logger/Settings.hpp	/^  enum class AutoLogger: uint8_t {$/;"	c	struct:LoggerSettings
AutoLogger	Profile/ProfileKeys.cpp	/^const char AutoLogger[] = "AutoLogger";$/;"	m	namespace:ProfileKeys	file:
AutoMCMode	Engine/Task/TaskBehaviour.hpp	/^  enum class AutoMCMode: uint8_t {$/;"	c	struct:TaskBehaviour
AutoMc	Profile/ProfileKeys.cpp	/^const char AutoMc[] = "AutoMc";$/;"	m	namespace:ProfileKeys	file:
AutoMcMode	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  AutoMcMode,$/;"	e	enum:ControlIndex	file:
AutoMcMode	Profile/ProfileKeys.cpp	/^const char AutoMcMode[] = "AutoMcMode";$/;"	m	namespace:ProfileKeys	file:
AutoQNH	Computer/AutoQNH.hpp	/^  constexpr AutoQNH(const unsigned qnh_time = 10)$/;"	f	class:AutoQNH
AutoQNH	Computer/AutoQNH.hpp	/^class AutoQNH {$/;"	c
AutoReopen	Device/Descriptor.cpp	/^DeviceDescriptor::AutoReopen(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
AutoReopen	Device/MultipleDevices.cpp	/^MultipleDevices::AutoReopen(OperationEnvironment &env)$/;"	f	class:MultipleDevices
AutoSize	Dialogs/WidgetDialog.cpp	/^WidgetDialog::AutoSize()$/;"	f	class:WidgetDialog
AutoSizeFont	Look/AutoFont.cpp	/^AutoSizeFont(FontDescription &d, unsigned width, const TCHAR *text)$/;"	f
AutoWind	Dialogs/Settings/WindSettingsPanel.hpp	/^    AutoWind,$/;"	e	enum:final::ControlIndex
AutoWind	Profile/ProfileKeys.cpp	/^const char AutoWind[] = "AutoWind";$/;"	m	namespace:ProfileKeys	file:
AutoWindModeBits	Computer/Wind/Settings.hpp	/^enum AutoWindModeBits$/;"	g
AutoZoom	Profile/ProfileKeys.cpp	/^const char AutoZoom[] = "AutoZoom";$/;"	m	namespace:ProfileKeys	file:
AutopilotParameters	Replay/TaskAutoPilot.hpp	/^  AutopilotParameters():$/;"	f	struct:AutopilotParameters
AutopilotParameters	Replay/TaskAutoPilot.hpp	/^struct AutopilotParameters {$/;"	s
Aux	PageSettings.hpp	/^  static PageLayout Aux() {$/;"	f	struct:PageLayout
AvFilter	Math/AvFilter.hpp	/^class AvFilter $/;"	c
AvailableFile	Repository/AvailableFile.hpp	/^struct AvailableFile {$/;"	s
AvailableFileNameComparator	Repository/FileRepository.cpp	/^struct AvailableFileNameComparator {$/;"	s	file:
AverEffTime	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  AverEffTime,$/;"	e	enum:ControlIndex	file:
AverEffTime	Profile/ProfileKeys.cpp	/^const char AverEffTime[] = "AverEffTime";$/;"	m	namespace:ProfileKeys	file:
Average	Math/AvFilter.hpp	/^  double Average() const {$/;"	f	class:AvFilter
Average30s	FLARM/FlarmCalculations.cpp	/^FlarmCalculations::Average30s(FlarmId id, double time, double altitude)$/;"	f	class:FlarmCalculations
AverageCalculatorMap	FLARM/FlarmCalculations.hpp	/^  typedef std::map<FlarmId, ClimbAverageCalculator> AverageCalculatorMap;$/;"	t	class:FlarmCalculations
AverageClimbRate	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::AverageClimbRate(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
AverageEffTime	Computer/Settings.hpp	/^enum AverageEffTime {$/;"	g
AverageSpeed	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  AverageSpeed,$/;"	e	enum:Controls	file:
AverageSpeedSolver	Engine/GlideSolvers/GlideState.cpp	/^  AverageSpeedSolver(const double dwcostheta, const double wind_speed_squared,$/;"	f	class:AverageSpeedSolver
AverageSpeedSolver	Engine/GlideSolvers/GlideState.cpp	/^class AverageSpeedSolver : public Quadratic {$/;"	c	file:
AverageThermalAdjusted	FlightStatistics.cpp	/^FlightStatistics::AverageThermalAdjusted(const double mc_current,$/;"	f	class:FlightStatistics
AverageVarioComputer	Computer/AverageVarioComputer.hpp	/^class AverageVarioComputer {$/;"	c
Axis	Renderer/ChartRenderer.hpp	/^  struct Axis {$/;"	s	class:ChartRenderer
B50CreateOnPort	Device/Driver/BorgeltB50.cpp	/^B50CreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
B50Device	Device/Driver/BorgeltB50.cpp	/^  B50Device(Port &_port):port(_port) {}$/;"	f	class:B50Device
B50Device	Device/Driver/BorgeltB50.cpp	/^class B50Device : public AbstractDevice {$/;"	c	file:
BALLAST_DUMP_MANAGER_HPP	BallastDumpManager.hpp	25;"	d
BALLOON	FLARM/Traffic.hpp	/^    BALLOON = 11,         \/\/!< balloon$/;"	m	class:FlarmTraffic::AircraftType
BAROGRAPH	Dialogs/dlgAnalysis.hpp	/^  BAROGRAPH,$/;"	m	class:AnalysisPage
BASE	TeamCode/TeamCode.cpp	/^static constexpr unsigned BASE = 36;$/;"	v	file:
BASE64_HXX	Util/Base64.hxx	31;"	d
BASE_KHZ	RadioFrequency.hpp	/^  static constexpr unsigned BASE_KHZ = 100000;$/;"	m	class:RadioFrequency
BASIC_COMPUTER_HPP	Computer/BasicComputer.hpp	25;"	d
BATTERY_EXIT	BatteryTimer.hpp	/^  static constexpr unsigned BATTERY_EXIT = 5;$/;"	m	class:BatteryTimer
BATTERY_REMINDER	BatteryTimer.hpp	/^  static constexpr auto BATTERY_REMINDER = std::chrono::minutes(5);$/;"	m	class:BatteryTimer
BATTERY_WARNING	BatteryTimer.hpp	/^  static constexpr unsigned BATTERY_WARNING = 10;$/;"	m	class:BatteryTimer
BAUDRATE	Dialogs/Device/LX/NanoConfigWidget.hpp	/^    BAUDRATE,$/;"	e	enum:final::Controls
BEARING	Dialogs/Traffic/TeamCodeDialog.cpp	/^    BEARING,$/;"	e	enum:final::Buttons	file:
BEEPTYPE_CONTINUOUS	Dialogs/Device/Vega/Types.hpp	46;"	d
BEEPTYPE_LONG	Dialogs/Device/Vega/Types.hpp	45;"	d
BEEPTYPE_MEDIUM	Dialogs/Device/Vega/Types.hpp	44;"	d
BEEPTYPE_SHORT	Dialogs/Device/Vega/Types.hpp	43;"	d
BEEPTYPE_SHORTDOUBLE	Dialogs/Device/Vega/Types.hpp	47;"	d
BEEPTYPE_SILENCE	Dialogs/Device/Vega/Types.hpp	42;"	d
BEFORE_ACTIVE	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^    BEFORE_ACTIVE,$/;"	e	enum:OrderedTaskPoint::ActiveState
BEHIND	Android/NativeView.hpp	/^    BEHIND = 3,$/;"	m	class:NativeView::ScreenOrientation
BELOW	Renderer/TextInBox.hpp	/^    BELOW,$/;"	e	enum:uint8_t
BETA	Terrain/jasper/jpc/jpc_qmfb.c	1654;"	d	file:
BExt	Device/Driver/LX/LXN.hpp	/^  struct BExt {$/;"	s	namespace:LXN
BGAENHANCEDOPTION	Engine/Task/ObservationZones/ObservationZone.hpp	/^    BGAENHANCEDOPTION,$/;"	m	class:ObservationZone::Shape
BGAENHANCEDOPTION_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  BGAENHANCEDOPTION_SECTOR,$/;"	m	class:TaskPointFactoryType
BGAFIXEDCOURSE	Engine/Task/ObservationZones/ObservationZone.hpp	/^    BGAFIXEDCOURSE,$/;"	m	class:ObservationZone::Shape
BGAFIXEDCOURSE_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  BGAFIXEDCOURSE_SECTOR,$/;"	m	class:TaskPointFactoryType
BGA_START	Engine/Task/ObservationZones/ObservationZone.hpp	/^    BGA_START,$/;"	m	class:ObservationZone::Shape
BGR8Color	Screen/PortableColor.hpp	/^  constexpr BGR8Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:BGR8Color
BGR8Color	Screen/PortableColor.hpp	/^class BGR8Color {$/;"	c
BGRA8Color	Screen/PortableColor.hpp	/^  constexpr BGRA8Color(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _a=0xff)$/;"	f	class:BGRA8Color
BGRA8Color	Screen/PortableColor.hpp	/^class BGRA8Color {$/;"	c
BGRAPixelTraits	Screen/Memory/PixelTraits.hpp	/^struct BGRAPixelTraits {$/;"	s
BGRAToRGB565	Screen/Memory/Export.hpp	/^BGRAToRGB565(RGB565Color *dest, const BGRA8Color *src, unsigned n)$/;"	f
BIG	Engine/Airspace/AirspaceAircraftPerformance.cpp	28;"	d	file:
BIKE	Tracking/LiveTrack24.hpp	/^    BIKE = 16388,$/;"	m	class:LiveTrack24::VehicleType
BINARY	Device/Driver/FLARM/Device.hpp	/^    BINARY,$/;"	m	class:FlarmDevice::Mode
BITS	NMEA/Validity.hpp	/^  static constexpr int BITS = 6;$/;"	m	class:Validity
BLACKOUT_TIME	Computer/Wind/WindEKFGlue.hpp	/^  static constexpr unsigned BLACKOUT_TIME = 3;$/;"	m	class:WindEKFGlue
BLANK	Screen/Pen.hpp	/^    BLANK = PS_NULL$/;"	e	enum:Pen::Style
BLUE	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    BLUE,$/;"	e	enum:final::Buttons	file:
BLUE	FLARM/Color.hpp	/^  BLUE,$/;"	m	class:FlarmColor
BMP085Device	Android/BMP085Device.cpp	/^BMP085Device::BMP085Device(unsigned _index,$/;"	f	class:BMP085Device
BMP085Listener	Android/BMP085Listener.hpp	/^class BMP085Listener {$/;"	c
BOOLEAN	Form/DataField/Base.hpp	/^    BOOLEAN,$/;"	m	class:DataField::Type
BORDERBOTTOM	InfoBoxes/Border.hpp	37;"	d
BORDERLEFT	InfoBoxes/Border.hpp	38;"	d
BORDERRIGHT	InfoBoxes/Border.hpp	36;"	d
BORDERTOP	InfoBoxes/Border.hpp	35;"	d
BORDER_WIDTH	Look/InfoBoxLook.hpp	/^  static constexpr unsigned BORDER_WIDTH = 1;$/;"	m	struct:InfoBoxLook
BOTH	Engine/Route/Config.hpp	/^    BOTH,$/;"	m	class:RoutePlannerConfig::Mode
BOTTOM	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    BOTTOM,$/;"	e	enum:final::Controls	file:
BOTTOM	Widget/ButtonPanelWidget.hpp	/^    AUTO, BOTTOM, LEFT$/;"	m	class:ButtonPanelWidget::Alignment
BOTTOM_8_VARIO	InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_8_VARIO = 13,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_LEFT	UISettings.hpp	/^    BOTTOM_LEFT,$/;"	m	class:UISettings::ThermalAssistantPosition
BOTTOM_LEFT_AVOID_IB	UISettings.hpp	/^    BOTTOM_LEFT_AVOID_IB,$/;"	m	class:UISettings::ThermalAssistantPosition
BOTTOM_RIGHT	UISettings.hpp	/^    BOTTOM_RIGHT,$/;"	m	class:UISettings::ThermalAssistantPosition
BOTTOM_RIGHT_10	InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_10 = 22,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_12	InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_12 = 8,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_4	InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_4 = 15,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_8	InfoBoxes/InfoBoxSettings.hpp	/^    BOTTOM_RIGHT_8 = 1,$/;"	m	class:InfoBoxSettings::Geometry
BOTTOM_RIGHT_AVOID_IB	UISettings.hpp	/^    BOTTOM_RIGHT_AVOID_IB,$/;"	m	class:UISettings::ThermalAssistantPosition
BOX	InfoBoxes/InfoBoxSettings.hpp	/^    BOX,$/;"	m	class:InfoBoxSettings::BorderStyle
BRGPS	Dialogs/Device/LX/V7ConfigWidget.hpp	/^    BRGPS,$/;"	e	enum:final::Controls
BRIDGE	Engine/Waypoint/Waypoint.hpp	/^    BRIDGE,$/;"	m	class:Waypoint::Type
BROWSE	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    BROWSE,$/;"	e	enum:TaskActionsPanel::Controls
BRPDA	Dialogs/Device/LX/V7ConfigWidget.hpp	/^    BRPDA$/;"	e	enum:final::Controls
BUCKET_COUNT	Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_COUNT = SCREEN_HEIGHT \/ BUCKET_HEIGHT;$/;"	m	class:LabelBlock
BUCKET_HEIGHT	Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_HEIGHT = 1 << BUCKET_SHIFT;$/;"	m	class:LabelBlock
BUCKET_SHIFT	Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_SHIFT = 7;$/;"	m	class:LabelBlock
BUCKET_SIZE	Renderer/LabelBlock.hpp	/^  static constexpr unsigned BUCKET_SIZE = 64;$/;"	m	class:LabelBlock
BUFFERED_OUTPUT_STREAM_HXX	IO/BufferedOutputStream.hxx	31;"	d
BUFFERED_READER_HXX	IO/BufferedReader.hxx	31;"	d
BUGGY_WCSTOD	Util/NumberParser.hpp	56;"	d
BULK_BAUD_RATE	Device/Driver.hpp	/^    BULK_BAUD_RATE = 0x8,$/;"	e	enum:DeviceRegister::__anon196
BUTTON	Widget/RowFormWidget.hpp	/^      BUTTON,$/;"	m	class:RowFormWidget::Row::Type
BUTTON_LABEL_HPP	Menu/ButtonLabel.hpp	25;"	d
BW	Renderer/WaypointRendererSettings.hpp	/^    BW,$/;"	m	class:WaypointRendererSettings::LandableStyle
B_EXT	Device/Driver/LX/LXN.hpp	/^    B_EXT = 0xf9,$/;"	e	enum:LXN::Command
B_EXT_CONFIG	Device/Driver/LX/LXN.hpp	/^    B_EXT_CONFIG = 0xff, \/* 'I': extensions to the 'B' record *\/$/;"	e	enum:LXN::Command
BackgroundLua	Lua/Background.cpp	/^  explicit BackgroundLua(Lua::StatePtr &&_state):state(std::move(_state)) {$/;"	f	class:final
BackgroundRenderer	Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::BackgroundRenderer() {}$/;"	f	class:BackgroundRenderer
BackgroundRenderer	Renderer/BackgroundRenderer.hpp	/^class BackgroundRenderer {$/;"	c
BackslashBaseName	Profile/PathValue.cpp	/^BackslashBaseName(const TCHAR *p)$/;"	f	file:
Ballast	Dialogs/Settings/dlgBasicSettings.cpp	/^  Ballast,$/;"	e	enum:ControlIndex	file:
BallastDumpManager	BallastDumpManager.hpp	/^class BallastDumpManager$/;"	c
BallastDumpProcessTimer	ProcessTimer.cpp	/^BallastDumpProcessTimer()$/;"	f	file:
BallastGeometry	Gauge/GaugeVario.hpp	/^  struct BallastGeometry {$/;"	s	class:GaugeVario
BallastProcessTimer	ApplyExternalSettings.cpp	/^BallastProcessTimer()$/;"	f	file:
BallastSecsToEmpty	Profile/ProfileKeys.cpp	/^const char BallastSecsToEmpty[] = "BallastSecsToEmpty";$/;"	m	namespace:ProfileKeys	file:
BarographCaption	Renderer/BarographRenderer.cpp	/^BarographCaption(TCHAR *sTmp, const FlightStatistics &fs)$/;"	f
Base	Geo/Flat/FlatLine.hpp	/^  typedef Line2D<FlatPoint> Base;$/;"	t	class:FlatLine
Base	Util/StaticString.hxx	/^	typedef BasicStringBuffer<T, max> Base;$/;"	t	class:StaticStringBase
Base	Util/StaticString.hxx	/^	typedef StaticStringBase<char, max> Base;$/;"	t	class:NarrowString
Base	Util/StaticString.hxx	/^	typedef StaticStringBase<wchar_t, max> Base;$/;"	t	class:StaticString
Base64	Util/Base64.cxx	/^Base64(char *dest, ConstBuffer<uint8_t> src)$/;"	f
Base64	Util/Base64.cxx	/^Base64(char *dest, uint8_t a, uint8_t b, uint8_t c)$/;"	f	file:
BaseBlackboard	Blackboard/BaseBlackboard.hpp	/^class BaseBlackboard$/;"	c
Basic	Blackboard/BaseBlackboard.hpp	/^  const MoreData &Basic() const {$/;"	f	class:BaseBlackboard
Basic	Interface.hpp	/^  static inline const MoreData &Basic() {$/;"	f	namespace:CommonInterface
Basic	MapWindow/MapWindowBlackboard.hpp	/^  const MoreData &Basic() const {$/;"	f	class:MapWindowBlackboard
Basic	MapWindow/TargetMapWindow.cpp	/^Basic()$/;"	f	file:
Basic	Menu/ExpandMacros.cpp	/^Basic()$/;"	f	file:
BasicComputer	Computer/BasicComputer.hpp	/^class BasicComputer {$/;"	c
BasicIterableSplitString	Util/IterableSplitString.hxx	/^	constexpr BasicIterableSplitString(StringView _s,$/;"	f	class:BasicIterableSplitString
BasicIterableSplitString	Util/IterableSplitString.hxx	/^class BasicIterableSplitString {$/;"	c
BasicStringBuffer	Util/StringBuffer.hxx	/^class BasicStringBuffer {$/;"	c
BasicStringView	Util/StringView.hxx	/^	explicit constexpr BasicStringView(ConstBuffer<T> src)$/;"	f	struct:BasicStringView
BasicStringView	Util/StringView.hxx	/^	explicit constexpr BasicStringView(ConstBuffer<void> src)$/;"	f	struct:BasicStringView
BasicStringView	Util/StringView.hxx	/^struct BasicStringView : ConstBuffer<T> {$/;"	s
Battery	Android/Battery.cpp	/^  namespace Battery {$/;"	n	namespace:Power	file:
Battery	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Battery,$/;"	e	enum:Controls	file:
Battery	Hardware/Battery.cpp	/^  namespace Battery{$/;"	n	namespace:Power	file:
Battery	Hardware/Battery.hpp	/^  namespace Battery{$/;"	n	namespace:Power
BatteryTimer	BatteryTimer.hpp	/^class BatteryTimer {$/;"	c
Baud	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Baud,$/;"	e	enum:final::Controls
BaudRate	Dialogs/Device/DeviceEditWidget.cpp	/^  Port, BaudRate, BulkBaudRate,$/;"	e	enum:ControlIndex	file:
BaudRateToK6Bt	Device/Port/K6BtPort.cpp	/^BaudRateToK6Bt(unsigned baud_rate)$/;"	f	file:
Bearing	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Bearing,$/;"	e	enum:Controls	file:
Bearing	FLARM/Traffic.hpp	/^  Angle Bearing() const {$/;"	f	class:FlarmTraffic::AircraftType
Bearing	Geo/GeoPoint.cpp	/^GeoPoint::Bearing(const GeoPoint &other) const$/;"	f	class:GeoPoint
Bearing	Geo/Math.cpp	/^Bearing(const GeoPoint &loc1, const GeoPoint &loc2)$/;"	f
BearingS	Geo/GeoPoint.cpp	/^GeoPoint::BearingS(const GeoPoint &other) const$/;"	f	class:GeoPoint
Begin	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::Begin()$/;"	f	class:StencilMapCanvas
Begin	Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::Begin(Canvas &canvas,$/;"	f	class:TransparentRendererCache
Begin	Renderer/TransparentRendererCache.hpp	/^  constexpr Canvas &Begin(Canvas &canvas,$/;"	f	class:TransparentRendererCache
Begin	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::Begin(Canvas &other)$/;"	f	class:BufferCanvas
Begin	Topography/ShapeRenderer.hpp	/^  void Begin(unsigned n) {$/;"	f	class:ShapeRenderer
BeginClose	Device/Port/BufferedPort.cpp	/^BufferedPort::BeginClose()$/;"	f	class:BufferedPort
BeginDeinitialise	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::BeginDeinitialise()$/;"	f	class:Net::DownloadManager
BeginEditing	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void BeginEditing() {$/;"	f	class:final
BeginElement	JSON/Writer.hpp	/^    void BeginElement() {$/;"	f	class:JSON::ArrayWriter
BeginElement	JSON/Writer.hpp	/^    void BeginElement(const char *name) {$/;"	f	class:JSON::ObjectWriter
BeginLine	IGC/IGCWriter.hpp	/^  char *BeginLine() {$/;"	f	class:IGCWriter
BeginShutdown	MainWindow.cpp	/^MainWindow::BeginShutdown()$/;"	f	class:MainWindow
BeginStop	Thread/StoppableThread.hpp	/^  void BeginStop() {$/;"	f	class:StoppableThread
BeginStop	Thread/WorkerThread.hpp	/^  void BeginStop() {$/;"	f	class:WorkerThread
BeginSuspend	Thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::BeginSuspend()$/;"	f	class:RecursivelySuspensibleThread
BeginSuspend	Thread/WorkerThread.hpp	/^  void BeginSuspend() {$/;"	f	class:WorkerThread
BeginWrite	Screen/OpenGL/Buffer.hpp	/^  GLvoid *BeginWrite(size_t size) {$/;"	f	class:GLBuffer
BestCruiseArrowRenderer	Renderer/BestCruiseArrowRenderer.hpp	/^namespace BestCruiseArrowRenderer$/;"	n
Between	Math/Angle.cpp	/^Angle::Between(const Angle start, const Angle end) const$/;"	f	class:Angle
BigThermalAssistantWidget	Gauge/BigThermalAssistantWidget.hpp	/^  BigThermalAssistantWidget(LiveBlackboard &_blackboard,$/;"	f	class:BigThermalAssistantWidget
BigThermalAssistantWidget	Gauge/BigThermalAssistantWidget.hpp	/^class BigThermalAssistantWidget$/;"	c
BigThermalAssistantWindow	Gauge/BigThermalAssistantWindow.hpp	/^  BigThermalAssistantWindow(const ThermalAssistantLook &look,$/;"	f	class:BigThermalAssistantWindow
BigThermalAssistantWindow	Gauge/BigThermalAssistantWindow.hpp	/^class BigThermalAssistantWindow : public ThermalAssistantWindow {$/;"	c
BinaryMode	Device/Driver/FLARM/Mode.cpp	/^FlarmDevice::BinaryMode(OperationEnvironment &env)$/;"	f	class:FlarmDevice
BinaryPing	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::BinaryPing(OperationEnvironment &env,$/;"	f	class:FlarmDevice
BinaryReset	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::BinaryReset(OperationEnvironment &env,$/;"	f	class:FlarmDevice
BinaryWritePixel	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr BinaryWritePixel(Args&&... args)$/;"	f	struct:BinaryWritePixel
BinaryWritePixel	Screen/Memory/PixelOperations.hpp	/^struct BinaryWritePixel : private Operation {$/;"	s
Bind	Engine/PathSolvers/NavDijkstra.hpp	/^    struct Bind : public std::unordered_map<ScanTaskPoint, Value,$/;"	s	struct:NavDijkstra::DijkstraMap
Bind	Screen/Brush.hpp	/^  void Bind() const {$/;"	f	class:Brush
Bind	Screen/OpenGL/Buffer.hpp	/^  void Bind() {$/;"	f	class:GLBuffer
Bind	Screen/OpenGL/Color.hpp	/^  void Bind() const {$/;"	f	class:Color
Bind	Screen/OpenGL/FrameBuffer.hpp	/^  void Bind() {$/;"	f	class:GLFrameBuffer
Bind	Screen/OpenGL/RenderBuffer.hpp	/^  void Bind() {$/;"	f	class:GLRenderBuffer
Bind	Screen/OpenGL/Texture.hpp	/^  void Bind() {$/;"	f	class:GLTexture
Bind	Screen/OpenGL/VertexArray.hpp	/^  void Bind(ScopeVertexPointer &vp) const {$/;"	f	struct:GLVertexArray
Bind	Screen/Pen.hpp	/^  void Bind() const {$/;"	f	class:Pen
BindAndGetTexture	Screen/OpenGL/RawBitmap.cpp	/^RawBitmap::BindAndGetTexture() const$/;"	f	class:RawBitmap
BindAndGetTexture	Terrain/RasterRenderer.cpp	/^RasterRenderer::BindAndGetTexture() const$/;"	f	class:RasterRenderer
BindAttribLocation	Screen/OpenGL/Program.hpp	/^  void BindAttribLocation(GLuint index, const char *name) {$/;"	f	class:GLProgram
BindFramebuffer	Screen/OpenGL/FBO.cpp	/^FBO::BindFramebuffer(GLenum target, GLuint framebuffer)$/;"	f	class:FBO
BindInnerCircle	Screen/OpenGL/VertexArray.hpp	/^  void BindInnerCircle(ScopeVertexPointer &vp) const {$/;"	f	struct:GLDonutVertices
BindOuterCircle	Screen/OpenGL/VertexArray.hpp	/^  void BindOuterCircle(ScopeVertexPointer &vp) const {$/;"	f	struct:GLDonutVertices
BindRenderbuffer	Screen/OpenGL/FBO.cpp	/^FBO::BindRenderbuffer(GLenum target, GLuint renderbuffer)$/;"	f	class:FBO
BindStyle	Screen/Pen.hpp	/^  void BindStyle() const {$/;"	f	class:Pen
BindUniform	Screen/Brush.hpp	/^  void BindUniform(GLint location) const {$/;"	f	class:Brush
BindUniform	Screen/Pen.hpp	/^  void BindUniform(GLint location) const {$/;"	f	class:Pen
BitOrPixelOperations	Screen/Memory/Optimised.hpp	/^struct BitOrPixelOperations$/;"	s
BitOrPixelOperations	Screen/Memory/Optimised.hpp	/^struct BitOrPixelOperations<GreyscalePixelTraits>$/;"	s
BitSize	Event/Poll/Linux/Input.cpp	/^BitSize()$/;"	f	file:
Bitmap	Screen/Android/Bitmap.cpp	/^Bitmap::Bitmap(Bitmap &&src)$/;"	f	class:Bitmap
Bitmap	Screen/Android/Bitmap.cpp	/^Bitmap::Bitmap(ResourceId id)$/;"	f	class:Bitmap
Bitmap	Screen/Custom/Bitmap.cpp	/^Bitmap::Bitmap(ConstBuffer<void> _buffer)$/;"	f	class:Bitmap
Bitmap	Screen/Custom/ResourceBitmap.cpp	/^Bitmap::Bitmap(ResourceId id)$/;"	f	class:Bitmap
Bitmap	Screen/GDI/Bitmap.cpp	/^Bitmap::Bitmap(Bitmap &&src)$/;"	f	class:Bitmap
Bitmap	Screen/GDI/ResourceBitmap.cpp	/^Bitmap::Bitmap(ResourceId id)$/;"	f	class:Bitmap
Bitmap	Screen/OpenGL/Bitmap.cpp	/^Bitmap::Bitmap(Bitmap &&src)$/;"	f	class:Bitmap
BitmapButtonRenderer	Renderer/BitmapButtonRenderer.hpp	/^  explicit BitmapButtonRenderer(const Bitmap &_bitmap)$/;"	f	class:BitmapButtonRenderer
BitmapButtonRenderer	Renderer/BitmapButtonRenderer.hpp	/^class BitmapButtonRenderer : public ButtonRenderer {$/;"	c
BitmapDialog	Dialogs/Weather/PCMetDialog.cpp	/^BitmapDialog(const Bitmap &bitmap)$/;"	f	file:
BitmapDialog	Dialogs/Weather/PCMetDialog.cpp	/^BitmapDialog(const PCMet::ImageType &type, const PCMet::ImageArea &area)$/;"	f	file:
BitsToInts	Event/Poll/Linux/Input.cpp	/^BitsToInts(unsigned n_bits)$/;"	f	file:
BitwiseAnd32	Net/IPv6Address.cxx	/^BitwiseAnd32(void *dest, const void *a, const void *b, size_t n)$/;"	f	file:
BitwiseAndT	Net/IPv6Address.cxx	/^BitwiseAndT(T *dest, const T *a, const T *b, size_t n)$/;"	f	file:
BlackboardListener	Blackboard/BlackboardListener.hpp	/^class BlackboardListener {$/;"	c
BlackboardProcessTimer	ProcessTimer.cpp	/^BlackboardProcessTimer()$/;"	f	file:
Blend16	Screen/Memory/NEON.hpp	/^  static void Blend16(uint8_t *gcc_restrict p,$/;"	f	class:NEONBitOrPixelOperations
Blend32	Screen/Memory/NEON.hpp	/^  static void Blend32(uint8_t *gcc_restrict p,$/;"	f	class:NEONTransparentPixelOperations
BlockArray	Renderer/LabelBlock.hpp	/^    typedef StaticArray<PixelRect, BUCKET_SIZE> BlockArray;$/;"	t	class:LabelBlock::Bucket
BlockSTF	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  BlockSTF,$/;"	e	enum:ControlIndex	file:
BlockSTF	Profile/ProfileKeys.cpp	/^const char BlockSTF[] = "BlockSpeedToFly";$/;"	m	namespace:ProfileKeys	file:
Blue	Screen/GDI/Color.hpp	/^  uint8_t Blue() const$/;"	f	class:Color
Blue	Screen/Memory/Color.hpp	/^  uint8_t Blue() const$/;"	f	class:Color
Blue	Screen/OpenGL/Color.hpp	/^  Blue() const$/;"	f	class:Color
Blue	Screen/PortableColor.hpp	/^  constexpr uint8_t Blue() const {$/;"	f	class:BGR8Color
Blue	Screen/PortableColor.hpp	/^  constexpr uint8_t Blue() const {$/;"	f	class:BGRA8Color
Blue	Screen/PortableColor.hpp	/^  constexpr uint8_t Blue() const {$/;"	f	class:RGB8Color
BlueFlyConfigurationWidget	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  BlueFlyConfigurationWidget(const DialogLook &look, WidgetDialog &_dialog,$/;"	f	class:final
BlueFlyCreateOnPort	Device/Driver/BlueFly/Register.cpp	/^BlueFlyCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
BlueFlyDevice	Device/Driver/BlueFly/Internal.hpp	/^class BlueFlyDevice : public AbstractDevice {$/;"	c
BlueFlyDevice	Device/Driver/BlueFly/Misc.cpp	/^BlueFlyDevice::BlueFlyDevice(Port &_port)$/;"	f	class:BlueFlyDevice
BlueFlySettings	Device/Driver/BlueFly/Internal.hpp	/^  struct BlueFlySettings {$/;"	s	class:BlueFlyDevice
BlueFlyWidgets	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  enum BlueFlyWidgets {$/;"	g	class:final	file:
BluetoothHelper	Android/BluetoothHelper.cpp	/^namespace BluetoothHelper {$/;"	n	file:
BluetoothHelper	Android/BluetoothHelper.hpp	/^namespace BluetoothHelper {$/;"	n
BluetoothNameStartsWith	Device/Config.cpp	/^DeviceConfig::BluetoothNameStartsWith(const char *prefix) const$/;"	f	class:DeviceConfig
BoostRangeBox	Geo/Boost/RangeBox.cpp	/^BoostRangeBox(const GeoPoint location, double range)$/;"	f
BorderColor	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    BorderColor,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
BorderKind_t	InfoBoxes/Border.hpp	/^enum BorderKind_t {$/;"	g
BorderStyle	InfoBoxes/InfoBoxSettings.hpp	/^  enum class BorderStyle : uint8_t {$/;"	c	struct:InfoBoxSettings
BorderWidth	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    BorderWidth,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
Borrow	Device/Descriptor.cpp	/^DeviceDescriptor::Borrow()$/;"	f	class:DeviceDescriptor
BorrowExtraButton	Dialogs/Settings/dlgConfiguration.cpp	/^ConfigPanel::BorrowExtraButton(unsigned i, const TCHAR *caption,$/;"	f	class:ConfigPanel
Bottom	PageSettings.hpp	/^  enum class Bottom : uint8_t {$/;"	c	struct:PageLayout
BottomLayout	Form/ButtonPanel.cpp	/^ButtonPanel::BottomLayout()$/;"	f	class:ButtonPanel
BottomLayout	Form/ButtonPanel.cpp	/^ButtonPanel::BottomLayout(PixelRect rc)$/;"	f	class:ButtonPanel
BottomLeft	Gauge/TrafficSettings.hpp	/^    BottomLeft,$/;"	m	class:TrafficSettings::GaugeLocation
BottomRight	Gauge/TrafficSettings.hpp	/^    BottomRight,$/;"	m	class:TrafficSettings::GaugeLocation
BottomRow	Dialogs/Task/TargetDialog.cpp	/^  PixelRect BottomRow(unsigned height) {$/;"	f	class:RowLayout
BoundingBoxOverlaps	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::BoundingBoxOverlaps(const FlatBoundingBox &that) const$/;"	f	class:OrderedTaskPoint
BreakHourOfDay	Dialogs/Waypoint/WaypointInfoWidget.cpp	/^BreakHourOfDay(double t)$/;"	f	file:
BresenhamIterator	Screen/Memory/Bresenham.hpp	/^  BresenhamIterator(int x1, int y1, int x2, int y2)$/;"	f	class:BresenhamIterator
BresenhamIterator	Screen/Memory/Bresenham.hpp	/^class BresenhamIterator {$/;"	c
BringToBottom	Screen/Custom/WList.cpp	/^WindowList::BringToBottom(Window &w)$/;"	f	class:WindowList
BringToTop	Screen/Custom/WList.cpp	/^WindowList::BringToTop(Window &w)$/;"	f	class:WindowList
BroadcastCalculatedUpdate	Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastCalculatedUpdate()$/;"	f	class:LiveBlackboard
BroadcastCalculatedUpdate	Interface.hpp	/^  static inline void BroadcastCalculatedUpdate() {$/;"	f	namespace:CommonInterface
BroadcastComputerSettingsUpdate	Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastComputerSettingsUpdate()$/;"	f	class:LiveBlackboard
BroadcastComputerSettingsUpdate	Interface.hpp	/^  static inline void BroadcastComputerSettingsUpdate() {$/;"	f	namespace:CommonInterface
BroadcastGPSUpdate	Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastGPSUpdate()$/;"	f	class:LiveBlackboard
BroadcastGPSUpdate	Interface.hpp	/^  static inline void BroadcastGPSUpdate() {$/;"	f	namespace:CommonInterface
BroadcastUISettingsUpdate	Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::BroadcastUISettingsUpdate()$/;"	f	class:LiveBlackboard
BroadcastUISettingsUpdate	Interface.hpp	/^  static inline void BroadcastUISettingsUpdate() {$/;"	f	namespace:CommonInterface
BrokenDate	Time/BrokenDate.hpp	/^  BrokenDate(unsigned _year, unsigned _month, unsigned _day)$/;"	f	struct:BrokenDate
BrokenDate	Time/BrokenDate.hpp	/^struct BrokenDate {$/;"	s
BrokenDateTime	Time/BrokenDateTime.hpp	/^  BrokenDateTime(const BrokenDate &date, const BrokenTime &time)$/;"	f	struct:BrokenDateTime
BrokenDateTime	Time/BrokenDateTime.hpp	/^  BrokenDateTime(unsigned _year, unsigned _month, unsigned _day)$/;"	f	struct:BrokenDateTime
BrokenDateTime	Time/BrokenDateTime.hpp	/^  BrokenDateTime(unsigned _year, unsigned _month, unsigned _day,$/;"	f	struct:BrokenDateTime
BrokenDateTime	Time/BrokenDateTime.hpp	/^struct BrokenDateTime : public BrokenDate, public BrokenTime {$/;"	s
BrokenTime	Time/BrokenTime.hpp	/^  BrokenTime(unsigned _hour, unsigned _minute, unsigned _second=0)$/;"	f	struct:BrokenTime
BrokenTime	Time/BrokenTime.hpp	/^struct BrokenTime {$/;"	s
Brush	Screen/Brush.hpp	/^  explicit Brush(const Color _color):color(_color)  {}$/;"	f	class:Brush
Brush	Screen/Brush.hpp	/^  explicit Brush(const Color c):brush(nullptr) {$/;"	f	class:Brush
Brush	Screen/Brush.hpp	/^class Brush$/;"	c
BruttoVario	Engine/Navigation/TraceHistory.hpp	/^  TraceVariableHistory BruttoVario;$/;"	m	class:TraceHistory
Bucket	Renderer/LabelBlock.hpp	/^  class Bucket {$/;"	c	class:LabelBlock
Bucket	Util/QuadTree.hxx	/^	struct Bucket {$/;"	s
Buffer	Device/Util/LineSplitter.hpp	/^  typedef StaticFifoBuffer<char, 256u> Buffer;$/;"	t	class:PortLineSplitter
Buffer	Renderer/WaypointListRenderer.cpp	/^typedef StaticString<256u> Buffer;$/;"	t	file:
Buffer	Util/AllocatedArray.hxx	/^	typedef WritableBuffer<T> Buffer;$/;"	t	class:AllocatedArray
BufferCanvas	Screen/GDI/BufferCanvas.cpp	/^BufferCanvas::BufferCanvas(const Canvas &canvas, PixelSize new_size)$/;"	f	class:BufferCanvas
BufferCanvas	Screen/GDI/BufferCanvas.hpp	/^  BufferCanvas():bitmap(nullptr) {}$/;"	f	class:BufferCanvas
BufferCanvas	Screen/GDI/BufferCanvas.hpp	/^class BufferCanvas : public VirtualCanvas {$/;"	c
BufferSize	Screen/Font.hpp	/^  static size_t BufferSize(const PixelSize size) {$/;"	f	class:Font
BufferWindow	Screen/BufferWindow.hpp	/^class BufferWindow : public PaintWindow {$/;"	c
BufferedOutputStream	IO/BufferedOutputStream.hxx	/^	explicit BufferedOutputStream(OutputStream &_os)$/;"	f	class:BufferedOutputStream
BufferedOutputStream	IO/BufferedOutputStream.hxx	/^class BufferedOutputStream {$/;"	c
BufferedPort	Device/Port/BufferedPort.cpp	/^BufferedPort::BufferedPort(PortListener *_listener, DataHandler &_handler)$/;"	f	class:BufferedPort
BufferedPort	Device/Port/BufferedPort.hpp	/^class BufferedPort : public Port, protected DataHandler {$/;"	c
BufferedReader	IO/BufferedReader.hxx	/^class BufferedReader {$/;"	c
Bugs	Dialogs/Settings/dlgBasicSettings.cpp	/^  Bugs,$/;"	e	enum:ControlIndex	file:
BugsGeometry	Gauge/GaugeVario.hpp	/^  struct BugsGeometry {$/;"	s	class:GaugeVario
BugsProcessTimer	ApplyExternalSettings.cpp	/^BugsProcessTimer()$/;"	f	file:
Build	OS/Path.cpp	/^AllocatedPath::Build(const_pointer a, const_pointer b)$/;"	f	class:AllocatedPath
Build	OS/Path.hpp	/^  static AllocatedPath Build(Path a, Path b) {$/;"	f	class:AllocatedPath
Build	OS/Path.hpp	/^  static AllocatedPath Build(Path a, const_pointer b) {$/;"	f	class:AllocatedPath
BuildHalfHull	Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::BuildHalfHull(std::vector<SearchPoint*> input,$/;"	f	class:GrahamScan
BuildHull	Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::BuildHull()$/;"	f	class:GrahamScan
BuildIndices	Topography/XShape.cpp	/^XShape::BuildIndices(unsigned thinning_level, ShapeScalar min_distance)$/;"	f	class:XShape
BuildString	Util/StringBuilder.hxx	/^BuildString(T *buffer, size_t size, Args&&... args)$/;"	f
BuiltinLanguage	Language/LanguageGlue.hpp	/^struct BuiltinLanguage {$/;"	s
BulkBaudRate	Dialogs/Device/DeviceEditWidget.cpp	/^  Port, BaudRate, BulkBaudRate,$/;"	e	enum:ControlIndex	file:
BulkPixelPoint	Screen/GDI/BulkPoint.hpp	/^  constexpr BulkPixelPoint(LONG _x, LONG _y)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	Screen/GDI/BulkPoint.hpp	/^  constexpr BulkPixelPoint(PixelPoint src)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	Screen/GDI/BulkPoint.hpp	/^  explicit constexpr BulkPixelPoint(const POINT &other):tagPOINT(other) {}$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	Screen/GDI/BulkPoint.hpp	/^struct BulkPixelPoint : public tagPOINT {$/;"	s
BulkPixelPoint	Screen/Memory/BulkPoint.hpp	/^  constexpr BulkPixelPoint(Args&&... args)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	Screen/Memory/BulkPoint.hpp	/^struct BulkPixelPoint : PixelPoint {$/;"	s
BulkPixelPoint	Screen/OpenGL/BulkPoint.hpp	/^  constexpr BulkPixelPoint(Args&&... args)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	Screen/OpenGL/BulkPoint.hpp	/^  constexpr BulkPixelPoint(PixelPoint src)$/;"	f	struct:BulkPixelPoint
BulkPixelPoint	Screen/OpenGL/BulkPoint.hpp	/^struct BulkPixelPoint : Point2D<GLvalue, int> {$/;"	s
BulkPixelPointVector	MapWindow/MapWindowGlideRange.cpp	/^typedef std::vector<BulkPixelPoint> BulkPixelPointVector;$/;"	t	file:
Button	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  enum Button {$/;"	g	class:final	file:
Button	Form/Button.hpp	/^  Button():listener(nullptr) {}$/;"	f	class:Button
Button	Form/Button.hpp	/^  Button(ContainerWindow &parent, const ButtonLook &look,$/;"	f	class:Button
Button	Form/Button.hpp	/^  Button(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:Button
Button	Form/Button.hpp	/^class Button : public PaintWindow {$/;"	c
Button	Menu/MenuBar.hpp	/^  class Button : public ::Button {$/;"	c	class:MenuBar
Button	Widget/QuestionWidget.hpp	/^  struct Button {$/;"	s	class:QuestionWidget
ButtonFrameRenderer	Renderer/ButtonRenderer.hpp	/^  explicit ButtonFrameRenderer(const ButtonLook &_look):look(_look) {}$/;"	f	class:ButtonFrameRenderer
ButtonFrameRenderer	Renderer/ButtonRenderer.hpp	/^class ButtonFrameRenderer {$/;"	c
ButtonLabel	Menu/ButtonLabel.hpp	/^namespace ButtonLabel {$/;"	n
ButtonLook	Look/ButtonLook.hpp	/^struct ButtonLook {$/;"	s
ButtonPanel	Form/ButtonPanel.cpp	/^ButtonPanel::ButtonPanel(ContainerWindow &_parent, const ButtonLook &_look)$/;"	f	class:ButtonPanel
ButtonPanel	Form/ButtonPanel.hpp	/^class ButtonPanel {$/;"	c
ButtonPanelWidget	Widget/ButtonPanelWidget.hpp	/^  ButtonPanelWidget(Widget *_widget, Alignment _alignment=Alignment::AUTO)$/;"	f	class:ButtonPanelWidget
ButtonPanelWidget	Widget/ButtonPanelWidget.hpp	/^class ButtonPanelWidget : public Widget {$/;"	c
ButtonRenderer	Renderer/ButtonRenderer.hpp	/^class ButtonRenderer {$/;"	c
ButtonWidget	Widget/ButtonWidget.cpp	/^ButtonWidget::ButtonWidget(const ButtonLook &look, const TCHAR *caption,$/;"	f	class:ButtonWidget
ButtonWidget	Widget/ButtonWidget.hpp	/^  ButtonWidget(ButtonRenderer *_renderer, ActionListener &_listener, int _id)$/;"	f	class:ButtonWidget
ButtonWidget	Widget/ButtonWidget.hpp	/^class ButtonWidget : public WindowWidget {$/;"	c
Buttons	Dialogs/Airspace/AirspaceList.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Device/DeviceListDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Device/PortMonitor.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/DownloadFilePicker.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/FileManager.cpp	/^  enum Buttons {$/;"	g	class:ManagedFileListWidget	file:
Buttons	Dialogs/KnobTextEntry.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/MapItemListDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Plane/PlaneListDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/ProfileListDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/ReplayDialog.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  enum Buttons {$/;"	g	class:PageListWidget	file:
Buttons	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Settings/WindSettingsPanel.hpp	/^  enum Buttons {$/;"	g	class:final
Buttons	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Settings/dlgConfiguration.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/SimulatorPromptWindow.hpp	/^  enum Buttons {$/;"	g	class:final
Buttons	Dialogs/Task/AlternatesListDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  enum Buttons {$/;"	g	class:final
Buttons	Dialogs/Task/Manager/TaskEditPanel.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Task/Manager/TaskListPanel.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Task/OptionalStartsDialog.cpp	/^  enum Buttons {$/;"	g	class:OptionStartsWidget	file:
Buttons	Dialogs/Task/TargetDialog.cpp	/^  enum Buttons {$/;"	g	class:TargetWidget	file:
Buttons	Dialogs/Task/TaskPointDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Traffic/TeamCodeDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Traffic/TrafficList.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Waypoint/Manager.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Waypoint/WaypointList.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Weather/MapOverlayWidget.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Weather/NOAADetails.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/Weather/NOAAList.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Dialogs/dlgAnalysis.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Kobo/KoboMenu.cpp	/^enum Buttons {$/;"	g	file:
Buttons	Kobo/NetworkDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Kobo/SystemDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Kobo/WifiDialog.cpp	/^  enum Buttons {$/;"	g	class:final	file:
Buttons	Widget/ArrowPagerWidget.hpp	/^  enum Buttons {$/;"	g	class:ArrowPagerWidget
ByteCopy	Topography/shapelib/mapshape.c	67;"	d	file:
ByteSwap16	OS/ByteOrder.hpp	/^ByteSwap16(uint16_t value)$/;"	f
ByteSwap32	OS/ByteOrder.hpp	/^ByteSwap32(uint32_t value)$/;"	f
ByteSwap64	OS/ByteOrder.hpp	/^ByteSwap64(uint64_t value)$/;"	f
ByteSwapAndLowerVolume	Audio/AudioAlgorithms.hpp	/^inline void ByteSwapAndLowerVolume(int16_t *buffer, size_t num_frames,$/;"	f
ByteSwapAndMixPCM	Audio/AudioAlgorithms.hpp	/^inline void ByteSwapAndMixPCM(int16_t *dest, const int16_t *src,$/;"	f
ByteToPercent	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^ByteToPercent(short byte)$/;"	f	file:
C2	Device/Driver/Volkslogger/vlconv.cpp	/^  C2()$/;"	f	class:C2
C2	Device/Driver/Volkslogger/vlconv.cpp	/^class C2$/;"	c	file:
CACHE_HXX	Util/Cache.hxx	31;"	d
CAI302	Device/Driver/CAI302/PocketNav.hpp	/^namespace CAI302 {$/;"	n
CAI302	Device/Driver/CAI302/Protocol.hpp	/^namespace CAI302 {$/;"	n
CAI302CreateOnPort	Device/Driver/CAI302/Register.cpp	/^CAI302CreateOnPort(const DeviceConfig &config, Port &port)$/;"	f	file:
CAI302Device	Device/Driver/CAI302/Internal.hpp	/^  CAI302Device(const DeviceConfig &_config, Port &_port)$/;"	f	class:CAI302Device
CAI302Device	Device/Driver/CAI302/Internal.hpp	/^class CAI302Device : public AbstractDevice {$/;"	c
CAI302UnitsEditor	Dialogs/Device/CAI302/UnitsEditor.hpp	/^  CAI302UnitsEditor(const DialogLook &look, const CAI302::Pilot &_data)$/;"	f	class:final
CAI302WaypointUploader	Dialogs/Device/CAI302/WaypointUploader.hpp	/^  CAI302WaypointUploader(Path _path, CAI302Device &_device)$/;"	f	class:CAI302WaypointUploader
CAI302WaypointUploader	Dialogs/Device/CAI302/WaypointUploader.hpp	/^class CAI302WaypointUploader : public Job {$/;"	c
CALLBACK	Event/Shared/Event.hpp	/^    CALLBACK,$/;"	e	enum:Event::Type
CALLSIGN	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    CALLSIGN,$/;"	e	enum:final::Controls	file:
CALLSIGN	Dialogs/Traffic/TrafficList.cpp	/^  CALLSIGN,$/;"	e	enum:Controls	file:
CAN	Device/Driver/Volkslogger/Protocol.hpp	/^    CAN = 0x18$/;"	e	enum:Volkslogger::__anon202
CANCEL	Dialogs/FileManager.cpp	/^    CANCEL,$/;"	e	enum:ManagedFileListWidget::Buttons	file:
CANCEL	Dialogs/ProfilePasswordDialog.hpp	/^  CANCEL,$/;"	m	class:ProfilePasswordResult
CANCELED	OS/OverlappedEvent.hpp	/^    CANCELED,$/;"	e	enum:OverlappedEvent::WaitResult
CANCELLED	Device/Port/Port.hpp	/^    CANCELLED,$/;"	m	class:Port::WaitResult
CAN_READ_WRITE_UNALIGNED	OS/ByteOrder.hpp	78;"	d
CAR	Tracking/LiveTrack24.hpp	/^    CAR = 17100,$/;"	m	class:LiveTrack24::VehicleType
CAR_4X4	Tracking/LiveTrack24.hpp	/^    CAR_4X4 = 17101,$/;"	m	class:LiveTrack24::VehicleType
CAST_HXX	Util/Cast.hxx	31;"	d
CAST_HXX	Util/ContainerCast.hxx	31;"	d
CAST_ITERATOR_HPP	Util/CastIterator.hpp	31;"	d
CCL	Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
CClosure	Lua/Util.hxx	/^struct CClosure {$/;"	s	struct:Lua::StackIndex::LightUserData
CENTER	Renderer/TextInBox.hpp	/^    CENTER,$/;"	m	struct:TextInBoxMode	typeref:enum:TextInBoxMode::
CENTER	UISettings.hpp	/^    CENTER,$/;"	m	class:UISettings::PopupMessagePosition
CENTERED	Renderer/TextInBox.hpp	/^    CENTERED,$/;"	e	enum:uint8_t
CGImageToUncompressedImage	Screen/Apple/ImageDecoder.cpp	/^CGImageToUncompressedImage(CGImageRef image)$/;"	f	file:
CHANGE_BAUD_RATE	Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t CHANGE_BAUD_RATE = 0x30;$/;"	m	class:K6BtPort
CHANGE_CALLSIGN	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    CHANGE_CALLSIGN,$/;"	e	enum:final::Buttons	file:
CHANGE_CALLSIGN_BUTTON	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    CHANGE_CALLSIGN_BUTTON,$/;"	e	enum:final::Controls	file:
CHANGE_TYPE	Dialogs/Task/TaskPointDialog.cpp	/^    CHANGE_TYPE,$/;"	e	enum:final::Buttons	file:
CHARGING	Hardware/Battery.hpp	/^      CHARGING,$/;"	e	enum:Power::Battery::batterystatus
CHART_LOOK_HPP	Look/ChartLook.hpp	25;"	d
CHAR_UTIL_HXX	Util/CharUtil.hxx	31;"	d
CID	Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
CIRCLE	Engine/Airspace/AbstractAirspace.hpp	/^    CIRCLE,$/;"	m	class:AbstractAirspace::Shape
CIRCLE_DIAMETER	InfoBoxes/Content/Type.hpp	/^    CIRCLE_DIAMETER,$/;"	e	enum:InfoBoxFactory::Type
CIRCLE_SEGS	Screen/Util.cpp	/^static constexpr unsigned CIRCLE_SEGS = 64;$/;"	v	file:
CIRCLE_SIZE	Screen/OpenGL/Shapes.hpp	/^  static constexpr unsigned CIRCLE_SIZE = 32;$/;"	m	namespace:OpenGL
CIRCLE_SIZE	Screen/OpenGL/VertexArray.hpp	/^  static constexpr unsigned CIRCLE_SIZE = (SIZE - 2) \/ 2;$/;"	m	struct:GLDonutVertices
CIRCLING	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^    CIRCLING,$/;"	e	enum:final::Controls	file:
CIRCLING	DisplayMode.hpp	/^  CIRCLING,$/;"	m	class:DisplayMode
CIRCLING	NMEA/Derived.hpp	/^    CIRCLING,$/;"	m	class:DerivedInfo::WindSource
CIRCLING	NMEA/SwitchState.hpp	/^    CIRCLING,$/;"	m	class:SwitchState::FlightMode
CLAMP_HPP	Util/Clamp.hpp	31;"	d
CLANG_CHECK_VERSION	Util/Compiler.h	79;"	d
CLANG_OR_GCC_VERSION	Util/Compiler.h	53;"	d
CLANG_VERSION	Util/Compiler.h	36;"	d
CLANG_VERSION	Util/Compiler.h	38;"	d
CLASSA	Engine/Airspace/AirspaceClass.hpp	/^  CLASSA,$/;"	e	enum:uint8_t
CLASSB	Engine/Airspace/AirspaceClass.hpp	/^  CLASSB,$/;"	e	enum:uint8_t
CLASSC	Engine/Airspace/AirspaceClass.hpp	/^  CLASSC,$/;"	e	enum:uint8_t
CLASSD	Engine/Airspace/AirspaceClass.hpp	/^  CLASSD,$/;"	e	enum:uint8_t
CLASSE	Engine/Airspace/AirspaceClass.hpp	/^  CLASSE,$/;"	e	enum:uint8_t
CLASSF	Engine/Airspace/AirspaceClass.hpp	/^  CLASSF,$/;"	e	enum:uint8_t
CLASSG	Engine/Airspace/AirspaceClass.hpp	/^  CLASSG,$/;"	e	enum:uint8_t
CLEAR	Dialogs/Device/PortMonitor.cpp	/^  CLEAR = 100,$/;"	e	enum:Buttons	file:
CLEAR	Dialogs/TimeEntry.cpp	/^  CLEAR = 100,$/;"	e	enum:__anon9	file:
CLEAR	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    CLEAR,$/;"	e	enum:final::Buttons	file:
CLEAR	InfoBoxes/Panel/ATCReference.cpp	/^  CLEAR,$/;"	e	enum:Controls	file:
CLEAR_ALL	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  CLEAR_ALL,$/;"	e	enum:Buttons	file:
CLEAR_MANUAL	Dialogs/Settings/WindSettingsPanel.hpp	/^    CLEAR_MANUAL,$/;"	e	enum:final::Buttons
CLEAR_MANUAL_BUTTON	Dialogs/Settings/WindSettingsPanel.hpp	/^    CLEAR_MANUAL_BUTTON,$/;"	e	enum:final::ControlIndex
CLIMB	Dialogs/dlgAnalysis.hpp	/^  CLIMB,$/;"	m	class:AnalysisPage
CLIMB	NMEA/CirclingInfo.hpp	/^  CLIMB,$/;"	m	class:CirclingMode
CLIMBAVERAGE	Engine/Task/TaskBehaviour.hpp	/^    CLIMBAVERAGE,$/;"	m	class:TaskBehaviour::AutoMCMode
CLIMBAVERAGECALCULATOR_HPP	Computer/ClimbAverageCalculator.hpp	25;"	d
CLIMB_PERCENT_RENDERER_HPP	Renderer/ClimbPercentRenderer.hpp	25;"	d
CLIMB_RATE_G_MIN	Computer/GlideComputerAirData.cpp	/^static constexpr double CLIMB_RATE_G_MIN = 0.25;$/;"	v	file:
CLIP	Renderer/AirspaceRendererSettings.hpp	/^  CLIP,$/;"	m	class:AirspaceDisplayMode
CLIP_ACCEPT	Geo/GeoClip.cpp	/^static constexpr bool CLIP_ACCEPT(unsigned a, unsigned b) {$/;"	f	file:
CLIP_ACCEPT	Screen/Memory/RasterCanvas.hpp	/^  static constexpr bool CLIP_ACCEPT(unsigned a, unsigned b) {$/;"	f	class:RasterCanvas
CLIP_BOTTOM_EDGE	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_BOTTOM_EDGE = 0x4;$/;"	v	file:
CLIP_BOTTOM_EDGE	Screen/Memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_BOTTOM_EDGE = 0x4;$/;"	m	class:RasterCanvas
CLIP_BOTTOM_EQUALS	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_BOTTOM_EQUALS = 0x40;$/;"	v	file:
CLIP_CHECK	Topography/shapelib/mapprimitive.c	42;"	d	file:
CLIP_INSIDE	Geo/GeoClip.cpp	/^static constexpr bool CLIP_INSIDE(unsigned a) {$/;"	f	file:
CLIP_INSIDE	Screen/Memory/RasterCanvas.hpp	/^  static constexpr bool CLIP_INSIDE(unsigned a) {$/;"	f	class:RasterCanvas
CLIP_LEFT	Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	e	enum:__anon26	file:
CLIP_LEFT_EDGE	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_LEFT_EDGE = 0x1;$/;"	v	file:
CLIP_LEFT_EDGE	Screen/Memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_LEFT_EDGE = 0x1;$/;"	m	class:RasterCanvas
CLIP_LEFT_EQUALS	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_LEFT_EQUALS = 0x10;$/;"	v	file:
CLIP_MIDDLE	Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	e	enum:__anon26	file:
CLIP_REJECT	Geo/GeoClip.cpp	/^static constexpr bool CLIP_REJECT(unsigned a, unsigned b) {$/;"	f	file:
CLIP_REJECT	Screen/Memory/RasterCanvas.hpp	/^  static constexpr bool CLIP_REJECT(unsigned a, unsigned b) {$/;"	f	class:RasterCanvas
CLIP_RIGHT	Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	e	enum:__anon26	file:
CLIP_RIGHT_EDGE	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_RIGHT_EDGE = 0x2;$/;"	v	file:
CLIP_RIGHT_EDGE	Screen/Memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_RIGHT_EDGE = 0x2;$/;"	m	class:RasterCanvas
CLIP_RIGHT_EQUALS	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_RIGHT_EQUALS = 0x20;$/;"	v	file:
CLIP_STATE	Topography/shapelib/mapprimitive.c	/^typedef enum {CLIP_LEFT, CLIP_MIDDLE, CLIP_RIGHT} CLIP_STATE;$/;"	t	typeref:enum:__anon26	file:
CLIP_TOP_EDGE	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_TOP_EDGE = 0x8;$/;"	v	file:
CLIP_TOP_EDGE	Screen/Memory/RasterCanvas.hpp	/^  static constexpr unsigned CLIP_TOP_EDGE = 0x8;$/;"	m	class:RasterCanvas
CLIP_TOP_EQUALS	Geo/GeoClip.cpp	/^static constexpr unsigned CLIP_TOP_EQUALS = 0x80;$/;"	v	file:
CLOSE	Dialogs/Task/Manager/TaskClosePanel.hpp	/^    CLOSE,$/;"	e	enum:final::Buttons
CLOSE	Event/Shared/Event.hpp	/^    CLOSE,$/;"	e	enum:Event::Type
CLOSE	Gauge/BigThermalAssistantWidget.hpp	/^    CLOSE,$/;"	e	enum:BigThermalAssistantWidget::Action
CLOSE	Gauge/BigTrafficWidget.hpp	/^    CLOSE,$/;"	e	enum:TrafficWidget::Action
CLOUD_CONFIG_PANEL_HPP	Dialogs/Settings/Panels/CloudConfigPanel.hpp	25;"	d
CLOUD_ENABLE_DIALOG_HPP	Dialogs/Tracking/CloudEnableDialog.hpp	25;"	d
CLOUD_INTERVAL	Tracking/SkyLines/Glue.cpp	/^static constexpr auto CLOUD_INTERVAL = std::chrono::minutes(1);$/;"	v	file:
CLOUD_MAGIC	Cloud/Data.cpp	/^static constexpr uint32_t CLOUD_MAGIC = 0x5753f60f;$/;"	v	file:
CLOUD_VERSION	Cloud/Data.cpp	/^static constexpr uint32_t CLOUD_VERSION = 1;$/;"	v	file:
CMD_TIMEOUT	Device/Driver/KRT2.cpp	/^  static constexpr auto CMD_TIMEOUT = std::chrono::milliseconds(250); \/\/!< Command timeout$/;"	m	class:final	file:
CMD_TIMEOUT	Device/Driver/KRT2.cpp	/^constexpr std::chrono::milliseconds KRT2Device::CMD_TIMEOUT;$/;"	m	class:KRT2Device	file:
COLON	Form/DigitEntry.hpp	/^      COLON,$/;"	m	class:CoordinateFormat::Column::Type
COLOR	Screen/OpenGL/Attribute.hpp	/^    static constexpr GLuint COLOR = 3;$/;"	m	namespace:OpenGL::Attribute
COLOR_ATTACHMENT0	Screen/OpenGL/FBO.hpp	/^  static constexpr GLenum COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0_OES;$/;"	m	namespace:FBO
COLOR_BLACK	Screen/Color.hpp	/^static constexpr Color COLOR_BLACK = Color(0x00, 0x00, 0x00);$/;"	v
COLOR_BLUE	Screen/Color.hpp	/^static constexpr Color COLOR_BLUE = Color(0x00, 0x00, 0xff);$/;"	v
COLOR_BROWN	Screen/Color.hpp	/^static constexpr Color COLOR_BROWN = Color(0xb7, 0x64, 0x1e);$/;"	v
COLOR_COUNT	InfoBoxes/Data.hpp	/^  static constexpr unsigned COLOR_COUNT = 6;$/;"	m	struct:InfoBoxData
COLOR_CYAN	Screen/Color.hpp	/^static constexpr Color COLOR_CYAN = Color(0x00, 0xff, 0xff);$/;"	v
COLOR_DARK_GRAY	Screen/Color.hpp	/^static constexpr Color COLOR_DARK_GRAY = Color(0x40, 0x40, 0x40);$/;"	v
COLOR_GRAY	Screen/Color.hpp	/^static constexpr Color COLOR_GRAY = Color(0x80, 0x80, 0x80);$/;"	v
COLOR_GREEN	Screen/Color.hpp	/^static constexpr Color COLOR_GREEN = Color(0x00, 0xff, 0x00);$/;"	v
COLOR_INVERSE_BLUE	Look/InfoBoxLook.cpp	37;"	d	file:
COLOR_INVERSE_GREEN	Look/InfoBoxLook.cpp	39;"	d	file:
COLOR_INVERSE_MAGENTA	Look/InfoBoxLook.cpp	40;"	d	file:
COLOR_INVERSE_RED	Look/InfoBoxLook.cpp	36;"	d	file:
COLOR_INVERSE_YELLOW	Look/InfoBoxLook.cpp	38;"	d	file:
COLOR_LIGHT_GRAY	Screen/Color.hpp	/^static constexpr Color COLOR_LIGHT_GRAY = Color(0xc0, 0xc0, 0xc0);$/;"	v
COLOR_MAGENTA	Screen/Color.hpp	/^static constexpr Color COLOR_MAGENTA = Color(0xff, 0x00, 0xff);$/;"	v
COLOR_ORANGE	Screen/Color.hpp	/^static constexpr Color COLOR_ORANGE = Color(0xff, 0xa2, 0x00);$/;"	v
COLOR_RED	Screen/Color.hpp	/^static constexpr Color COLOR_RED = Color(0xff, 0x00, 0x00);$/;"	v
COLOR_VERY_DARK_GRAY	Screen/Color.hpp	/^static constexpr Color COLOR_VERY_DARK_GRAY = Color(0x20, 0x20, 0x20);$/;"	v
COLOR_VERY_LIGHT_GRAY	Screen/Color.hpp	/^static constexpr Color COLOR_VERY_LIGHT_GRAY = Color(0xd8, 0xd8, 0xd8);$/;"	v
COLOR_WHITE	Screen/Color.hpp	/^static constexpr Color COLOR_WHITE = Color(0xff, 0xff, 0xff);$/;"	v
COLOR_XCSOAR	Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR = Color(0x3f, 0x76, 0xa8);$/;"	v
COLOR_XCSOAR	Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR = Color(0xd0, 0x17, 0x17);$/;"	v
COLOR_XCSOAR_DARK	Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_DARK = Color(0x00, 0x31, 0x5e);$/;"	v
COLOR_XCSOAR_DARK	Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_DARK = Color(0x5d, 0x0a, 0x0a);$/;"	v
COLOR_XCSOAR_LIGHT	Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_LIGHT = Color(0xaa, 0xc9, 0xe4);$/;"	v
COLOR_XCSOAR_LIGHT	Look/Colors.hpp	/^static constexpr Color COLOR_XCSOAR_LIGHT = Color(0xed, 0x90, 0x90);$/;"	v
COLOR_YELLOW	Screen/Color.hpp	/^static constexpr Color COLOR_YELLOW = Color(0xff, 0xff, 0x00);$/;"	v
COLOURS	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^    COLOURS,$/;"	e	enum:final::Button	file:
COMMAND	Device/Driver/CAI302/Internal.hpp	/^    COMMAND,$/;"	m	class:CAI302Device::Mode
COMMAND	Device/Driver/LX/Internal.hpp	/^    COMMAND,$/;"	m	class:LXDevice::Mode
COMMAND	Device/Driver/LXERA/Internal.hpp	/^    COMMAND,$/;"	m	class:LXEraDevice::Mode
COMMENT	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    COMMENT,$/;"	e	enum:final::Rows	file:
COMMON_STATS_HPP	Engine/Task/Stats/CommonStats.hpp	23;"	d
COMMUNICATION	FLARM/Error.hpp	/^    COMMUNICATION = 0x51,$/;"	e	enum:uint8_t
COMM_MAX_BULK_SIZE	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned COMM_MAX_BULK_SIZE = 0xFFFF + 1;$/;"	m	namespace:IMI
COMM_MAX_PAYLOAD_SIZE	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned COMM_MAX_PAYLOAD_SIZE = 2048;$/;"	m	namespace:IMI
COMPETITION_CLASS	Device/Driver/LX/LXN.hpp	/^    COMPETITION_CLASS = 0xf1,$/;"	e	enum:LXN::Command
COMPETITION_ID	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    COMPETITION_ID,$/;"	e	enum:final::Controls	file:
COMPE_GPS	Waypoint/WaypointFileType.hpp	/^  COMPE_GPS,$/;"	m	class:WaypointFileType
COMPILER_H	Util/Compiler.h	25;"	d
COMPUTER_SETTINGS_BLACKBOARD_HPP	Blackboard/ComputerSettingsBlackboard.hpp	25;"	d
CONFIGPANEL_HPP	Dialogs/Settings/Panels/ConfigPanel.hpp	25;"	d
CONNECT	Kobo/WifiDialog.cpp	/^    CONNECT,$/;"	e	enum:final::Buttons	file:
CONNECTED	Net/State.hpp	/^  CONNECTED,$/;"	m	class:NetState
CONST_BUFFER_HXX	Util/ConstBuffer.hxx	31;"	d
CONTENT	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
CONTEST_QUEUE_SIZE	Engine/Contest/Solvers/ContestDijkstra.cpp	/^static constexpr unsigned CONTEST_QUEUE_SIZE = 5000;$/;"	v	file:
CONTEST_RESULT_HPP	Engine/Contest/ContestResult.hpp	24;"	d
CONTEST_STATISTICS_HPP	Engine/Contest/ContestStatistics.hpp	24;"	d
CONTINUE	Dialogs/StartupDialog.cpp	/^    CONTINUE,$/;"	e	enum:final::Controls	file:
CONTROLHEIGHTRATIO	InfoBoxes/InfoBoxLayout.cpp	/^static constexpr double CONTROLHEIGHTRATIO = 7.4;$/;"	v	file:
CONTROL_NAMES_PRIORITY	Audio/VolumeController.cpp	/^static constexpr const char *CONTROL_NAMES_PRIORITY[] =$/;"	v	file:
COORDINATE_FORMAT_HPP	Geo/CoordinateFormat.hpp	25;"	d
COPY	Dialogs/ProfileListDialog.cpp	/^    COPY,$/;"	e	enum:final::Buttons	file:
COPY	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    COPY, PASTE,$/;"	e	enum:final::Buttons	file:
COUNT	Renderer/UnitSymbolRenderer.cpp	/^static_assert(ARRAY_SIZE(symbol_strings) == (size_t)Unit::COUNT,$/;"	m	class:Unit	file:
COUNT	Units/Descriptor.cpp	/^static_assert(ARRAY_SIZE(Units::unit_descriptors) == (size_t)Unit::COUNT,$/;"	m	class:Unit	file:
CPL_SUPRESS_CPLUSPLUS	Topography/shapelib/mapserver.h	158;"	d
CProbeCreateOnPort	Device/Driver/CProbe.cpp	/^CProbeCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
CProbeDevice	Device/Driver/CProbe.cpp	/^class CProbeDevice : public AbstractDevice {$/;"	c	file:
CRC16Checksum	Device/Driver/IMI/Protocol/Checksum.cpp	/^IMI::IMIWORD IMI::CRC16Checksum(const void *message, unsigned bytes)$/;"	f	class:IMI
CRCWriter	Device/Driver/LX/Protocol.hpp	/^    CRCWriter(Port &_port):port(_port), crc(0xff) {}$/;"	f	class:LX::CRCWriter
CRCWriter	Device/Driver/LX/Protocol.hpp	/^  class CRCWriter {$/;"	c	namespace:LX
CRCWriter	Device/Driver/LXERA/Protocol.hpp	/^    CRCWriter(Port &_port):port(_port), crc(0xff) {}$/;"	f	class:LXEra::CRCWriter
CRCWriter	Device/Driver/LXERA/Protocol.hpp	/^  class CRCWriter {$/;"	c	namespace:LXEra
CREATE	IO/FileOutputStream.hxx	/^		CREATE,$/;"	m	class:final::Mode
CREATE_VISIBLE	IO/FileOutputStream.hxx	/^		CREATE_VISIBLE,$/;"	m	class:final::Mode
CRITICAL	Hardware/Battery.hpp	/^      CRITICAL,$/;"	e	enum:Power::Battery::batterystatus
CROSS_SECTION	PageSettings.hpp	/^    CROSS_SECTION,$/;"	m	class:PageLayout::Bottom
CROSS_SECTION_LOOK_HPP	Look/CrossSectionLook.hpp	25;"	d
CROSS_SECTION_RENDERER_HPP	CrossSection/CrossSectionRenderer.hpp	25;"	d
CROSS_SECTION_WINDOW_HPP	CrossSection/CrossSectionWindow.hpp	25;"	d
CRUISE	DisplayMode.hpp	/^  CRUISE,$/;"	m	class:DisplayMode
CRUISE	NMEA/CirclingInfo.hpp	/^  CRUISE = 0,$/;"	m	class:CirclingMode
CRUISE	NMEA/SwitchState.hpp	/^    CRUISE,$/;"	m	class:SwitchState::FlightMode
CRUISE_EFFICIENCY	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  CRUISE_EFFICIENCY,$/;"	e	enum:Controls	file:
CRUISE_FILTER_FACT	Engine/Airspace/AirspaceWarningManager.cpp	31;"	d	file:
CSVLine	IO/CSVLine.cpp	/^CSVLine::CSVLine(const char *line):$/;"	f	class:CSVLine
CSVLine	IO/CSVLine.hpp	/^class CSVLine {$/;"	c
CTR	Engine/Airspace/AirspaceClass.hpp	/^  CTR,$/;"	e	enum:uint8_t
CURL_EASY_HXX	Net/HTTP/Easy.hxx	31;"	d
CURL_SLIST_HXX	Net/HTTP/Slist.hxx	31;"	d
CURRENT_ACTIVE	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^    CURRENT_ACTIVE,$/;"	e	enum:OrderedTaskPoint::ActiveState
CURSOR	Form/List.hpp	/^    CURSOR,$/;"	m	class:ListControl::DragMode
CUSTOM	PageSettings.hpp	/^    CUSTOM,$/;"	m	class:PageLayout::Bottom
CUSTOM_KEYHOLE	Engine/Task/ObservationZones/ObservationZone.hpp	/^    CUSTOM_KEYHOLE,$/;"	m	class:ObservationZone::Shape
CYCLE	Tracking/LiveTrack24.hpp	/^    CYCLE = 16401,$/;"	m	class:LiveTrack24::VehicleType
CYLINDER	Device/Declaration.hpp	/^      CYLINDER,$/;"	e	enum:Declaration::TurnPoint::Shape
CYLINDER	Engine/Task/ObservationZones/ObservationZone.hpp	/^    CYLINDER,$/;"	m	class:ObservationZone::Shape
CYLINDERZONE_HPP	Engine/Task/ObservationZones/CylinderZone.hpp	25;"	d
C_RECORD	Device/Driver/Volkslogger/vlconv.cpp	/^  C_RECORD()$/;"	f	class:C_RECORD
C_RECORD	Device/Driver/Volkslogger/vlconv.cpp	/^class C_RECORD$/;"	c	file:
Cache	Util/Cache.hxx	/^	Cache()$/;"	f	class:Cache
Cache	Util/Cache.hxx	/^class Cache {$/;"	c
CacheHeader	Terrain/RasterTileCache.hpp	/^  struct CacheHeader {$/;"	s	class:RasterTileCache
CachedTopographyRenderer	Topography/CachedTopographyRenderer.hpp	/^  CachedTopographyRenderer(const TopographyStore &store,$/;"	f	class:CachedTopographyRenderer
CachedTopographyRenderer	Topography/CachedTopographyRenderer.hpp	/^class CachedTopographyRenderer {$/;"	c
CaiGpsNavCreateOnPort	Device/Driver/CaiGpsNav.cpp	/^CaiGpsNavCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
CaiGpsNavDevice	Device/Driver/CaiGpsNav.cpp	/^  CaiGpsNavDevice(Port &_port):port(_port) {}$/;"	f	class:CaiGpsNavDevice
CaiGpsNavDevice	Device/Driver/CaiGpsNav.cpp	/^class CaiGpsNavDevice : public AbstractDevice {$/;"	c	file:
CaiLNavCreateOnPort	Device/Driver/CaiLNav.cpp	/^CaiLNavCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
CaiLNavDevice	Device/Driver/CaiLNav.cpp	/^  CaiLNavDevice(Port &_port):port(_port) {}$/;"	f	class:final
CalcA	Geo/Math.cpp	/^CalcA(double u_sq)$/;"	f	file:
CalcAlpha	Engine/Task/Shapes/FAITriangleArea.cpp	/^CalcAlpha(double dist_a, double dist_b, double dist_c)$/;"	f	file:
CalcAngle	Engine/Task/Shapes/FAITriangleArea.cpp	/^CalcAngle(Angle angle, double dist_a, double dist_b, double dist_c,$/;"	f	file:
CalcAutoZoom	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::CalcAutoZoom()$/;"	f	class:FlarmTrafficControl
CalcAverageDeltaDistance	Engine/Trace/Trace.cpp	/^Trace::CalcAverageDeltaDistance(const unsigned no_thin) const$/;"	f	class:Trace
CalcAverageDeltaTime	Engine/Trace/Trace.cpp	/^Trace::CalcAverageDeltaTime(const unsigned no_thin) const$/;"	f	class:Trace
CalcAverageSpeed	Engine/GlideSolvers/GlideState.cpp	/^GlideState::CalcAverageSpeed(const double Veff) const$/;"	f	class:GlideState
CalcAzimuth	Math/SunEphemeris.cpp	/^SunEphemeris::CalcAzimuth(const GeoPoint &location,$/;"	f	class:SunEphemeris
CalcB	Geo/Math.cpp	/^CalcB(double u_sq)$/;"	f	file:
CalcBB	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::CalcBB()$/;"	f	class:FlatTriangleFanTree
CalcBestMC	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcBestMC(const AircraftState &aircraft,$/;"	f	class:OrderedTask
CalcBestMC	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::CalcBestMC(const AircraftState &aircraft,$/;"	f	class:UnorderedTask
CalcBoundingBox	Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::CalcBoundingBox()$/;"	f	class:FlatTriangleFan
CalcC	Geo/Math.cpp	/^CalcC(double cos_sq_alpha)$/;"	f	file:
CalcCruiseBearing	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::CalcCruiseBearing()$/;"	f	class:GlideResult
CalcCruiseEfficiency	Engine/Task/AbstractTask.hpp	/^  virtual bool CalcCruiseEfficiency(gcc_unused const AircraftState &state_now,$/;"	f	class:AbstractTask
CalcCruiseEfficiency	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcCruiseEfficiency(const AircraftState &aircraft,$/;"	f	class:OrderedTask
CalcDeferred	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::CalcDeferred()$/;"	f	class:GlideResult
CalcDistanceTo	Terrain/RasterTile.cpp	/^RasterTile::CalcDistanceTo(int x, int y) const$/;"	f	class:RasterTile
CalcEffectiveMC	Engine/Task/AbstractTask.cpp	/^AbstractTask::CalcEffectiveMC(const AircraftState &state_now,$/;"	f	class:AbstractTask
CalcEffectiveMC	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcEffectiveMC(const AircraftState &aircraft,$/;"	f	class:OrderedTask
CalcGeoPoint	Engine/Task/Shapes/FAITriangleArea.cpp	/^CalcGeoPoint(const GeoPoint &origin, Angle angle,$/;"	f	file:
CalcGlideArrival	Engine/Route/RoutePolars.cpp	/^RoutePolars::CalcGlideArrival(const AFlatGeoPoint& origin,$/;"	f	class:RoutePolars
CalcGradient	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcGradient(const AircraftState &state) const$/;"	f	class:OrderedTask
CalcGradient	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::CalcGradient(const AircraftState &state) const$/;"	f	class:UnorderedTask
CalcIncrement	Screen/Memory/PixelTraits.hpp	/^  static constexpr int CalcIncrement(int delta) {$/;"	f	struct:BGRAPixelTraits
CalcIncrement	Screen/Memory/PixelTraits.hpp	/^  static constexpr int CalcIncrement(int delta) {$/;"	f	struct:GreyscalePixelTraits
CalcIncrementalSpeed	Engine/Task/Computer/DistanceStatComputer.hpp	/^  void CalcIncrementalSpeed(DistanceStat &data, double time) {$/;"	f	class:DistanceStatComputer
CalcInfoBoxSizes	InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::CalcInfoBoxSizes(Layout &layout, PixelSize screen_size,$/;"	f	class:InfoBoxLayout
CalcIntermediateAngle	Task/TaskFileSeeYou.cpp	/^CalcIntermediateAngle(const SeeYouTurnpointInformation &turnpoint_infos,$/;"	f	file:
CalcLegGradient	Engine/Task/AbstractTask.cpp	/^AbstractTask::CalcLegGradient(const AircraftState &aircraft) const$/;"	f	class:AbstractTask
CalcMinTarget	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcMinTarget(const AircraftState &aircraft,$/;"	f	class:OrderedTask
CalcRatioAndDistance	Computer/WaveComputer.cpp	/^CalcRatioAndDistance(const FlatLine line, const FlatPoint point)$/;"	f	file:
CalcRequiredGlide	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CalcRequiredGlide(const AircraftState &aircraft,$/;"	f	class:OrderedTask
CalcRequiredGlide	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::CalcRequiredGlide(const AircraftState &aircraft,$/;"	f	class:UnorderedTask
CalcSpeed	Engine/Task/Computer/DistanceStatComputer.cpp	/^DistanceStatComputer::CalcSpeed(DistanceStat &data, double time)$/;"	f	class:DistanceStatComputer
CalcSpeeds	Engine/Task/Computer/ElementStatComputer.cpp	/^ElementStatComputer::CalcSpeeds(ElementStat &data, const double time)$/;"	f	class:ElementStatComputer
CalcSpeedups	Engine/GlideSolvers/GlideState.cpp	/^GlideState::CalcSpeedups(const SpeedVector _wind)$/;"	f	class:GlideState
CalcSpeedups	Engine/Route/RouteLink.cpp	/^RouteLink::CalcSpeedups(const FlatProjection &proj)$/;"	f	class:RouteLink
CalcSunTimes	Math/SunEphemeris.cpp	/^SunEphemeris::CalcSunTimes(const GeoPoint &location,$/;"	f	class:SunEphemeris
CalcTextSize	Screen/Custom/MoreCanvas.cpp	/^Canvas::CalcTextSize(const TCHAR *text, size_t length) const$/;"	f	class:Canvas
CalcTextSize	Screen/GDI/Canvas.cpp	/^Canvas::CalcTextSize(const TCHAR *text) const$/;"	f	class:Canvas
CalcTextSize	Screen/GDI/Canvas.cpp	/^Canvas::CalcTextSize(const TCHAR *text, size_t length) const$/;"	f	class:Canvas
CalcTextSize	Screen/Memory/Canvas.cpp	/^Canvas::CalcTextSize(const TCHAR *text) const$/;"	f	class:Canvas
CalcTextSize	Screen/OpenGL/Canvas.cpp	/^Canvas::CalcTextSize(const TCHAR *text) const$/;"	f	class:Canvas
CalcTextWidth	Screen/GDI/Canvas.hpp	/^  unsigned CalcTextWidth(const TCHAR *text) const {$/;"	f	class:Canvas
CalcTextWidth	Screen/Memory/Canvas.hpp	/^  unsigned CalcTextWidth(const TCHAR *text) const {$/;"	f	class:Canvas
CalcTextWidth	Screen/OpenGL/Canvas.hpp	/^  unsigned CalcTextWidth(const TCHAR *text) const {$/;"	f	class:Canvas
CalcTime	Engine/Route/RoutePolars.cpp	/^RoutePolars::CalcTime(const RouteLink& link) const$/;"	f	class:RoutePolars
CalcUSquare	Geo/Math.cpp	/^CalcUSquare(double cos_sq_alpha)$/;"	f	file:
CalcVHeight	Engine/Route/RoutePolars.cpp	/^RoutePolars::CalcVHeight(const RouteLink &link) const$/;"	f	class:RoutePolars
CalcWind	Computer/Wind/CirclingWind.cpp	/^CirclingWind::CalcWind()$/;"	f	class:CirclingWind
Calculate	Computer/GlideRatioCalculator.cpp	/^GlideRatioCalculator::Calculate() const$/;"	f	class:GlideRatioCalculator
Calculate	InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::Calculate(PixelRect rc, InfoBoxSettings::Geometry geometry)$/;"	f	class:InfoBoxLayout
Calculate	Renderer/WaypointRenderer.cpp	/^  void Calculate(const ProtectedRoutePlanner *route_planner,$/;"	f	class:final
CalculateAdjustedLocation	NMEA/ThermalLocator.cpp	/^ThermalSource::CalculateAdjustedLocation(double altitude,$/;"	f	class:ThermalSource
CalculateAll	NMEA/ClimbInfo.hpp	/^  void CalculateAll() {$/;"	f	struct:OneClimbInfo
CalculateAzimuth	Math/SunEphemeris.cpp	/^CalculateAzimuth(const GeoPoint &Location, const BrokenTime &time,$/;"	f	file:
CalculateBoundingbox	Geo/SearchPointVector.cpp	/^SearchPointVector::CalculateBoundingbox() const$/;"	f	class:SearchPointVector
CalculateCRC	Device/Driver/FLARM/CRC16.cpp	/^FLARM::CalculateCRC(const FrameHeader &header,$/;"	f	class:FLARM
CalculateCoefficients	Polar/Polar.cpp	/^PolarInfo::CalculateCoefficients() const$/;"	f	class:PolarInfo
CalculateCoefficients	Polar/Shape.cpp	/^PolarShape::CalculateCoefficients() const$/;"	f	class:PolarShape
CalculateDirect	Renderer/WaypointRenderer.cpp	/^  void CalculateDirect(const PolarSettings &polar_settings,$/;"	f	class:final
CalculateDrift	Engine/Trace/Point.hpp	/^  double CalculateDrift(double now) const {$/;"	f	class:TracePoint
CalculateDuration	NMEA/ClimbInfo.hpp	/^  void CalculateDuration() {$/;"	f	struct:OneClimbInfo
CalculateGeoBounds	Geo/SearchPointVector.cpp	/^SearchPointVector::CalculateGeoBounds() const$/;"	f	class:SearchPointVector
CalculateHeights	Screen/GDI/Font.cpp	/^Font::CalculateHeights()$/;"	f	class:Font
CalculateInfoBoxColumnWidth	InfoBoxes/InfoBoxLayout.cpp	/^CalculateInfoBoxColumnWidth(unsigned screen_width, unsigned control_height)$/;"	f	file:
CalculateInfoBoxRowHeight	InfoBoxes/InfoBoxLayout.cpp	/^CalculateInfoBoxRowHeight(unsigned screen_height, unsigned control_width)$/;"	f	file:
CalculateLayout	Dialogs/ComboPicker.cpp	/^  unsigned CalculateLayout(const DialogLook &look) {$/;"	f	class:ComboPickerSupport
CalculateLayout	Dialogs/FileManager.cpp	/^  unsigned CalculateLayout(const DialogLook &look) {$/;"	f	class:final
CalculateLayout	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Layout CalculateLayout(const PixelRect &rc) const {$/;"	f	class:final	file:
CalculateLayout	Dialogs/Task/MutateTaskPointDialog.cpp	/^  unsigned CalculateLayout(const DialogLook &look) {$/;"	f	class:final
CalculateLayout	Form/DigitEntry.cpp	/^DigitEntry::CalculateLayout()$/;"	f	class:DigitEntry
CalculateLayout	Form/TabDisplay.cpp	/^TabDisplay::CalculateLayout()$/;"	f	class:TabDisplay
CalculateLayout	Renderer/MapItemListRenderer.cpp	/^MapItemListRenderer::CalculateLayout(const DialogLook &dialog_look)$/;"	f	class:MapItemListRenderer
CalculateLayout	Renderer/TextRowRenderer.cpp	/^TextRowRenderer::CalculateLayout(const Font &font)$/;"	f	class:TextRowRenderer
CalculateLayout	Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::CalculateLayout(const Font &_first_font,$/;"	f	class:TwoTextRowsRenderer
CalculateLayout	Widget/TwoWidgets.cpp	/^TwoWidgets::CalculateLayout(const PixelRect &rc) const$/;"	f	class:TwoWidgets
CalculateLiftPoints	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::CalculateLiftPoints(LiftPoints &lift_points,$/;"	f	class:ThermalAssistantRenderer
CalculateLiftRate	NMEA/ClimbInfo.hpp	/^  void CalculateLiftRate() {$/;"	f	struct:OneClimbInfo
CalculateMapScale	Projection/MapWindowProjection.cpp	/^MapWindowProjection::CalculateMapScale(unsigned scale) const$/;"	f	class:MapWindowProjection
CalculateMaxLift	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::CalculateMaxLift() const$/;"	f	class:ThermalAssistantRenderer
CalculateNearestAirspaceHorizontal	Airspace/NearestAirspace.cpp	/^CalculateNearestAirspaceHorizontal(const GeoPoint &location,$/;"	f	file:
CalculateOwnTeamCode	Computer/GlideComputer.cpp	/^GlideComputer::CalculateOwnTeamCode()$/;"	f	class:GlideComputer
CalculateQNH	Computer/AutoQNH.cpp	/^AutoQNH::CalculateQNH(const NMEAInfo &basic, DerivedInfo &calculated,$/;"	f	class:AutoQNH
CalculateReachability	Renderer/WaypointRenderer.cpp	/^  void CalculateReachability(const RoutePlannerGlue &route_planner,$/;"	f	struct:VisibleWaypoint
CalculateReachabilityDirect	Renderer/WaypointRenderer.cpp	/^  void CalculateReachabilityDirect(const MoreData &basic,$/;"	f	struct:VisibleWaypoint
CalculateRoute	Renderer/WaypointRenderer.cpp	/^  void CalculateRoute(const ProtectedRoutePlanner &route_planner) {$/;"	f	class:final
CalculateRouteArrival	Renderer/WaypointRenderer.cpp	/^  bool CalculateRouteArrival(const RoutePlannerGlue &route_planner,$/;"	f	struct:VisibleWaypoint
CalculateSoonestAirspace	Engine/Airspace/SoonestAirspace.cpp	/^CalculateSoonestAirspace(const AircraftState &state,$/;"	f	file:
CalculateSplit	Widget/TwoWidgets.cpp	/^CalculateSplit(int top, int bottom, unsigned min_a,$/;"	f	file:
CalculateSplit	Widget/TwoWidgets.cpp	/^TwoWidgets::CalculateSplit(const PixelRect &rc) const$/;"	f	class:TwoWidgets
CalculateTeammateBearingRange	Computer/GlideComputer.cpp	/^GlideComputer::CalculateTeammateBearingRange()$/;"	f	class:GlideComputer
CalculateTimespanComponents	Formatter/TimeFormatter.cpp	/^CalculateTimespanComponents(unsigned timespan, unsigned &days, unsigned &hours,$/;"	f	file:
CalculateVarioScale	Computer/GlideComputer.cpp	/^GlideComputer::CalculateVarioScale()$/;"	f	class:GlideComputer
CalculateWidth	PopupMessage.cpp	/^PopupMessage::CalculateWidth() const$/;"	f	class:PopupMessage
CalculateWorkingBand	Computer/GlideComputer.cpp	/^GlideComputer::CalculateWorkingBand()$/;"	f	class:GlideComputer
CalculateWorkingFraction	NMEA/Derived.cpp	/^DerivedInfo::CalculateWorkingFraction(const double h, const double safety_height) const$/;"	f	class:DerivedInfo
CalculateZoneLetter	Geo/UTM.cpp	/^CalculateZoneLetter(const Angle latitude)$/;"	f	file:
CalculateZoneNumber	Geo/UTM.cpp	/^CalculateZoneNumber(const GeoPoint &p)$/;"	f	file:
Calculated	Blackboard/BaseBlackboard.hpp	/^  const DerivedInfo& Calculated() const {$/;"	f	class:BaseBlackboard
Calculated	Interface.hpp	/^  static inline const DerivedInfo &Calculated() {$/;"	f	namespace:CommonInterface
Calculated	MapWindow/MapWindowBlackboard.hpp	/^  const DerivedInfo &Calculated() const {$/;"	f	class:MapWindowBlackboard
Calculated	MapWindow/TargetMapWindow.cpp	/^Calculated()$/;"	f	file:
Calculated	Menu/ExpandMacros.cpp	/^Calculated()$/;"	f	file:
CalculationThread	CalculationThread.cpp	/^CalculationThread::CalculationThread(GlideComputer &_glide_computer)$/;"	f	class:CalculationThread
Callback	Event/Notify.cpp	/^Notify::Callback(void *ctx)$/;"	f	class:Notify
Callback	Event/SDL/Loop.hpp	/^  typedef void (*Callback)(void *ctx);$/;"	t	class:EventLoop
Callback	Event/Shared/Event.hpp	/^  typedef void (*Callback)(void *ctx);$/;"	t	struct:Event
CallbackWidget	Widget/CallbackWidget.hpp	/^  CallbackWidget(void (*_callback)())$/;"	f	class:CallbackWidget
CallbackWidget	Widget/CallbackWidget.hpp	/^class CallbackWidget$/;"	c
CanBorrow	Device/Descriptor.hpp	/^  bool CanBorrow() const {$/;"	f	class:final
CanClimb	Engine/Route/RoutePolars.cpp	/^RoutePolars::CanClimb() const$/;"	f	class:RoutePolars
CanDeclare	Device/Descriptor.cpp	/^DeviceDescriptor::CanDeclare() const$/;"	f	class:DeviceDescriptor
CanDeclare	Device/Driver.hpp	/^  bool CanDeclare() const {$/;"	f	struct:DeviceRegister
CanDownload	Dialogs/FileManager.cpp	/^CanDownload(const FileRepository &repository, const TCHAR *name)$/;"	f	file:
CanPassThrough	Dialogs/Device/DeviceEditWidget.cpp	/^CanPassThrough(const DataField &df)$/;"	f	file:
CanReceiveSettings	Device/Driver.hpp	/^  bool CanReceiveSettings() const {$/;"	f	struct:DeviceRegister
CanReceiveSettings	Dialogs/Device/DeviceEditWidget.cpp	/^CanReceiveSettings(const DataField &df)$/;"	f	file:
CanSendSettings	Device/Driver.hpp	/^  bool CanSendSettings() const {$/;"	f	struct:DeviceRegister
CanSendSettings	Dialogs/Device/DeviceEditWidget.cpp	/^CanSendSettings(const DataField &df)$/;"	f	file:
CanStartThroughTop	Engine/Task/ObservationZones/ObservationZone.hpp	/^  bool CanStartThroughTop() const {$/;"	f	class:ObservationZone
CanStartThroughTop	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::CanStartThroughTop() const$/;"	f	class:ObservationZoneClient
CanZoomIn	Gauge/BigTrafficWidget.cpp	/^  bool CanZoomIn() const {$/;"	f	class:FlarmTrafficControl
CanZoomOut	Gauge/BigTrafficWidget.cpp	/^  bool CanZoomOut() const {$/;"	f	class:FlarmTrafficControl
Cancel	Android/DownloadManager.cpp	/^AndroidDownloadManager::Cancel(JNIEnv *env, Path path_relative)$/;"	f	class:AndroidDownloadManager
Cancel	Android/Vibrator.cpp	/^Vibrator::Cancel(JNIEnv *env)$/;"	f	class:Vibrator
Cancel	Dialogs/FileManager.cpp	/^ManagedFileListWidget::Cancel()$/;"	f	class:ManagedFileListWidget
Cancel	Event/Poll/Timer.cpp	/^Timer::Cancel()$/;"	f	class:Timer
Cancel	Event/Shared/Timer.cpp	/^Timer::Cancel()$/;"	f	class:Timer
Cancel	Event/Shared/TimerQueue.cpp	/^TimerQueue::Cancel(Timer &timer)$/;"	f	class:TimerQueue
Cancel	IO/FileCache.cpp	/^FileCache::Cancel(const TCHAR *name, FILE *file)$/;"	f	class:FileCache
Cancel	Job/Async.cpp	/^AsyncJobRunner::Cancel()$/;"	f	class:AsyncJobRunner
Cancel	Lua/InputEvent.cpp	/^  void Cancel() {$/;"	f	class:final
Cancel	Lua/Timer.cpp	/^  void Cancel() {$/;"	f	class:final
Cancel	Net/HTTP/DownloadManager.cpp	/^  void Cancel(Path relative_path) {$/;"	f	class:final
Cancel	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::Cancel(Path relative_path)$/;"	f	class:Net::DownloadManager
Cancel	Operation/ThreadedOperationEnvironment.hpp	/^  void Cancel() {$/;"	f	class:ThreadedOperationEnvironment
CancelAsync	Device/Descriptor.cpp	/^DeviceDescriptor::CancelAsync()$/;"	f	class:DeviceDescriptor
CancelTimer	Event/Android/Queue.cpp	/^EventQueue::CancelTimer(Timer &timer)$/;"	f	class:EventQueue
CancelTimer	Event/SDL/Queue.cpp	/^EventQueue::CancelTimer(Timer &timer)$/;"	f	class:EventQueue
CancelTimer	Event/Windows/Queue.cpp	/^EventQueue::CancelTimer(Timer &timer)$/;"	f	class:EventQueue
CancelWait	IO/Async/AsioUtil.hpp	/^CancelWait(T &t)$/;"	f
CancelWait	IO/Async/AsioUtil.hpp	/^CancelWait(boost::asio::io_service &io_service, T &t)$/;"	f
CandidateSet	Engine/Contest/Solvers/TriangleContest.hpp	/^  struct CandidateSet {$/;"	s	class:TriangleContest
Canvas	Screen/GDI/Canvas.hpp	/^  Canvas(HDC _dc, PixelSize new_size)$/;"	f	class:Canvas
Canvas	Screen/GDI/Canvas.hpp	/^class Canvas {$/;"	c
Canvas	Screen/Memory/Canvas.hpp	/^  Canvas()$/;"	f	class:Canvas
Canvas	Screen/Memory/Canvas.hpp	/^  explicit Canvas(WritableImageBuffer<ActivePixelTraits> _buffer)$/;"	f	class:Canvas
Canvas	Screen/Memory/Canvas.hpp	/^class Canvas {$/;"	c
Canvas	Screen/OpenGL/Canvas.hpp	/^  Canvas(PixelSize _size):size(_size) {}$/;"	f	class:Canvas
Canvas	Screen/OpenGL/Canvas.hpp	/^class Canvas {$/;"	c
CanvasRotateShift	Screen/OpenGL/CanvasRotateShift.hpp	/^  CanvasRotateShift(const PixelPoint pos, Angle angle,$/;"	f	class:CanvasRotateShift
CanvasRotateShift	Screen/OpenGL/CanvasRotateShift.hpp	/^class CanvasRotateShift$/;"	c
CaptionOLC	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::CaptionOLC(TCHAR *sTmp,$/;"	f	class:FlightStatisticsRenderer
CaptionTask	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::CaptionTask(TCHAR *sTmp, const DerivedInfo &derived)$/;"	f	class:FlightStatisticsRenderer
Caption_GateWidth	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^static const TCHAR *const Caption_GateWidth = N_("Gate width");$/;"	v	file:
Caption_Radius	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^static const TCHAR *const Caption_Radius = N_("Radius");$/;"	v	file:
Cast	Lua/Class.hxx	/^	static reference Cast(lua_State *L, int idx) {$/;"	f	struct:Lua::Class
Cast	Util/Manual.hxx	/^	static constexpr Manual<T> &Cast(T &value) {$/;"	f	class:Manual
CastIterator	Util/CastIterator.hpp	/^  CastIterator(const IT _iterator):iterator(_iterator) {}$/;"	f	class:CastIterator
CastIterator	Util/CastIterator.hpp	/^class CastIterator {$/;"	c
CastToIPv4	Net/IPv4Address.cxx	/^	:address(*CastToIPv4(src.GetAddress())) {}$/;"	f
CastToIPv6	Net/IPv6Address.cxx	/^	:address(*CastToIPv6(src.GetAddress())) {}$/;"	f
CatchCallback	Lua/Catch.hpp	/^typedef void (*CatchCallback)(Error &&error);$/;"	t	namespace:Lua
Cathetus	Math/Util.hpp	/^Cathetus(double hypotenuse, double cathetus1)$/;"	f
CatmullRomInterpolator	Replay/CatmullRomInterpolator.hpp	/^  CatmullRomInterpolator(double _time):time(_time)$/;"	f	class:CatmullRomInterpolator
CatmullRomInterpolator	Replay/CatmullRomInterpolator.hpp	/^class CatmullRomInterpolator$/;"	c
CelsiusToKelvin	Atmosphere/Temperature.hpp	/^CelsiusToKelvin(double celsius)$/;"	f
Center	Gauge/LogoView.cpp	/^Center(unsigned canvas_size, unsigned element_size)$/;"	f	file:
CentreBottom	Gauge/TrafficSettings.hpp	/^    CentreBottom,$/;"	m	class:TrafficSettings::GaugeLocation
CentreTop	Gauge/TrafficSettings.hpp	/^    CentreTop,$/;"	m	class:TrafficSettings::GaugeLocation
ChangedState	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::ChangedState() const$/;"	f	class:AirspaceWarning
CharacterButton	Form/CharacterButton.hpp	/^class CharacterButton : public Button {$/;"	c
CharacterFunction	Form/Form.hpp	/^  typedef std::function<bool(unsigned)> CharacterFunction;$/;"	t	class:WndForm
Charset	IO/Charset.hpp	/^enum class Charset {$/;"	c
ChartControl	Dialogs/dlgAnalysis.cpp	/^  ChartControl(AnalysisWidget &_analysis_widget,$/;"	f	class:ChartControl
ChartControl	Dialogs/dlgAnalysis.cpp	/^class ChartControl: public PaintWindow$/;"	c	file:
ChartLook	Look/ChartLook.hpp	/^struct ChartLook {$/;"	s
ChartProjection	Projection/ChartProjection.hpp	/^  ChartProjection(const PixelRect &rc, const OrderedTask &task) {$/;"	f	class:ChartProjection
ChartProjection	Projection/ChartProjection.hpp	/^  ChartProjection(const PixelRect &rc, const OrderedTaskPoint &point) {$/;"	f	class:ChartProjection
ChartProjection	Projection/ChartProjection.hpp	/^  explicit ChartProjection(const PixelRect &rc,$/;"	f	class:ChartProjection
ChartProjection	Projection/ChartProjection.hpp	/^class ChartProjection:$/;"	c
ChartRenderer	Renderer/ChartRenderer.cpp	/^ChartRenderer::ChartRenderer(const ChartLook &_look, Canvas &the_canvas,$/;"	f	class:ChartRenderer
ChartRenderer	Renderer/ChartRenderer.hpp	/^class ChartRenderer$/;"	c
Check	Computer/FlyingComputer.cpp	/^FlyingComputer::Check(FlyingState &state, double time)$/;"	f	class:FlyingComputer
Check	Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::Check(const TMsg *msg, IMIDWORD size)$/;"	f	class:IMI::MessageParser
Check	Geo/GeoBounds.hpp	/^  constexpr bool Check() const {$/;"	f	class:GeoBounds
Check	Geo/GeoPoint.hpp	/^  constexpr bool Check() const {$/;"	f	struct:GeoPoint
Check	Geo/Quadrilateral.hpp	/^  constexpr bool Check() const {$/;"	f	struct:GeoQuadrilateral
Check	Input/TaskEventObserver.cpp	/^TaskEventObserver::Check(const TaskManager &tm)$/;"	f	class:TaskEventObserver
Check	Lua/Class.hxx	/^	static pointer Check(lua_State *L, int idx) {$/;"	f	struct:Lua::Class
Check	Lua/InputEvent.cpp	/^  static LuaInputEvent &Check(lua_State *L, int idx) {$/;"	f	class:final	file:
Check	Monitor/AirspaceWarningMonitor.cpp	/^AirspaceWarningMonitor::Check()$/;"	f	class:AirspaceWarningMonitor
Check	Monitor/AllMonitors.hpp	/^  void Check() {$/;"	f	class:final
Check	Monitor/MatTaskMonitor.cpp	/^MatTaskMonitor::Check()$/;"	f	class:MatTaskMonitor
Check	Monitor/TaskAdvanceMonitor.cpp	/^TaskAdvanceMonitor::Check()$/;"	f	class:TaskAdvanceMonitor
Check	Monitor/TaskConstraintsMonitor.cpp	/^TaskConstraintsMonitor::Check()$/;"	f	class:TaskConstraintsMonitor
Check	Monitor/WindMonitor.cpp	/^WindMonitor::Check()$/;"	f	class:WindMonitor
Check	NMEA/ClimbHistory.hpp	/^  bool Check(unsigned speed) const {$/;"	f	class:ClimbHistory
Check	Renderer/LabelBlock.cpp	/^LabelBlock::Bucket::Check(const PixelRect rc) const$/;"	f	class:LabelBlock::Bucket
Check	Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::Check(const WindowProjection &projection) const$/;"	f	class:TransparentRendererCache
Check	Renderer/TransparentRendererCache.hpp	/^  constexpr bool Check(const WindowProjection &projection) const {$/;"	f	class:TransparentRendererCache
Check	Screen/Custom/DoubleClick.hpp	/^  bool Check(PixelPoint _location) {$/;"	f	class:DoubleClick
Check	Screen/Memory/Buffer.hpp	/^  constexpr bool Check(unsigned x, unsigned y) const {$/;"	f	struct:ConstImageBuffer
Check	Screen/Memory/Buffer.hpp	/^  constexpr bool Check(unsigned x, unsigned y) const {$/;"	f	struct:WritableImageBuffer
Check	Screen/Memory/RasterCanvas.hpp	/^  constexpr bool Check(unsigned x, unsigned y) const {$/;"	f	class:RasterCanvas
CheckAddFinish	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CheckAddFinish()$/;"	f	class:AbstractTaskFactory
CheckAltitudeAGL	Computer/FlyingComputer.cpp	/^CheckAltitudeAGL(const DerivedInfo &calculated)$/;"	f	file:
CheckBit	Event/Poll/Linux/Input.cpp	/^CheckBit(const T bits[], unsigned i)$/;"	f	file:
CheckBoxControl	Form/CheckBox.hpp	/^class CheckBoxControl : public PaintWindow {$/;"	c
CheckBoxLook	Look/CheckBoxLook.hpp	/^struct CheckBoxLook {$/;"	s
CheckClearance	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::CheckClearance(const RouteLink &e, RoutePoint &inp) const$/;"	f	class:AirspaceRoute
CheckClearance	Engine/Route/RoutePolars.cpp	/^RoutePolars::CheckClearance(const RouteLink &e, const RasterMap* map,$/;"	f	class:RoutePolars
CheckClearance	Engine/Route/TerrainRoute.cpp	/^TerrainRoute::CheckClearance(const RouteLink &e, RoutePoint& inp) const$/;"	f	class:TerrainRoute
CheckClearanceTerrain	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::CheckClearanceTerrain(const RouteLink &e, RoutePoint& inp) const$/;"	f	class:RoutePlanner
CheckClimbing	Computer/FlyingComputer.cpp	/^FlyingComputer::CheckClimbing(double dt, double altitude)$/;"	f	class:FlyingComputer
CheckCondition	Computer/ConditionMonitor/ConditionMonitorAATTime.cpp	/^ConditionMonitorAATTime::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorAATTime
CheckCondition	Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp	/^ConditionMonitorFinalGlide::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorFinalGlide
CheckCondition	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.cpp	/^ConditionMonitorGlideTerrain::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorGlideTerrain
CheckCondition	Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp	/^ConditionMonitorLandableReachable::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorLandableReachable
CheckCondition	Computer/ConditionMonitor/ConditionMonitorSunset.cpp	/^ConditionMonitorSunset::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorSunset
CheckCondition	Computer/ConditionMonitor/ConditionMonitorWind.cpp	/^ConditionMonitorWind::CheckCondition(const NMEAInfo &basic,$/;"	f	class:ConditionMonitorWind
CheckDepthStencil	Screen/OpenGL/Init.cpp	/^CheckDepthStencil()$/;"	f	file:
CheckDuplicateWaypoints	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckDuplicateWaypoints(Waypoints& waypoints)$/;"	f	class:OrderedTask
CheckDuplicateWaypoints	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckDuplicateWaypoints(Waypoints& waypoints,$/;"	f	class:OrderedTask
CheckEnabled	Device/Port/DumpPort.cpp	/^DumpPort::CheckEnabled()$/;"	f	class:DumpPort
CheckEnterTransition	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::CheckEnterTransition(const AircraftState &ref_now,$/;"	f	class:FinishPoint
CheckEnterTransition	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::CheckEnterTransition(const AircraftState &ref_now,$/;"	f	class:OrderedTaskPoint
CheckEnterTransitionMat	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool CheckEnterTransitionMat(const AircraftState &ref_now,$/;"	f	class:OrderedTaskPoint
CheckError	Net/HTTP/ToFile.cpp	/^  void CheckError() const {$/;"	f	class:final
CheckExistsOrAppend	Engine/Waypoint/Waypoints.cpp	/^Waypoints::CheckExistsOrAppend(WaypointPtr waypoint)$/;"	f	class:Waypoints
CheckExitTransition	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::CheckExitTransition(const AircraftState &ref_now,$/;"	f	class:StartPoint
CheckExpand	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::CheckExpand(const ThermalBand& tb, bool update)$/;"	f	class:ThermalBand
CheckFBO	Screen/OpenGL/Init.cpp	/^CheckFBO()$/;"	f	file:
CheckGap	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::CheckGap(const AFlatGeoPoint &n, const RouteLink &e_1,$/;"	f	class:FlatTriangleFanTree
CheckHeight	Engine/Task/Ordered/FinishConstraints.cpp	/^FinishConstraints::CheckHeight(const AircraftState &state,$/;"	f	class:FinishConstraints
CheckHeight	Engine/Task/Ordered/StartConstraints.cpp	/^StartConstraints::CheckHeight(const AircraftState &state,$/;"	f	class:StartConstraints
CheckKey	Form/Form.cpp	/^CheckKey(ContainerWindow *container, const Event &event)$/;"	f	file:
CheckLandingSpeed	Computer/FlyingComputer.cpp	/^CheckLandingSpeed(double takeoff_speed, const NMEAInfo &basic)$/;"	f	file:
CheckOESDrawTexture	Screen/OpenGL/Init.cpp	/^CheckOESDrawTexture()$/;"	f	file:
CheckOrderedTask	Engine/Task/TaskManager.cpp	/^TaskManager::CheckOrderedTask() const$/;"	f	class:TaskManager
CheckPersistent	Lua/Persistent.cpp	/^Lua::CheckPersistent(lua_State *L)$/;"	f	class:Lua
CheckPowered	Computer/FlyingComputer.cpp	/^FlyingComputer::CheckPowered(double dt, const NMEAInfo &basic,$/;"	f	class:FlyingComputer
CheckProfileFilePassword	Dialogs/ProfilePasswordDialog.cpp	/^CheckProfileFilePassword(Path path)$/;"	f
CheckProfilePassword	Dialogs/ProfilePasswordDialog.cpp	/^CheckProfilePassword(const ProfileMap &map)$/;"	f
CheckProfilePasswordResult	Dialogs/ProfilePasswordDialog.cpp	/^CheckProfilePasswordResult(ProfilePasswordResult result)$/;"	f
CheckReadyToAdvance	Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::CheckReadyToAdvance(const TaskPoint &tp,$/;"	f	class:SmartTaskAdvance
CheckRelease	Computer/FlyingComputer.cpp	/^FlyingComputer::CheckRelease(FlyingState &state, double time,$/;"	f	class:FlyingComputer
CheckResize	Screen/FB/TopCanvas.cpp	/^TopCanvas::CheckResize()$/;"	f	class:TopCanvas
CheckResize	Screen/FB/TopCanvas.cpp	/^TopCanvas::CheckResize(const PixelSize new_native_size)$/;"	f	class:TopCanvas
CheckResize	Screen/OpenGL/TopCanvas.cpp	/^TopCanvas::CheckResize(PixelSize new_native_size)$/;"	f	class:TopCanvas
CheckReverse	Time/GPSClock.hpp	/^  bool CheckReverse(const double now) {$/;"	f	class:GPSClock
CheckSatellitesChanged	Logger/LoggerFRecord.cpp	/^LoggerFRecord::CheckSatellitesChanged(const GPSState &gps) const$/;"	f	class:LoggerFRecord
CheckSecondary	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::CheckSecondary(const RouteLink &e)$/;"	f	class:AirspaceRoute
CheckSecondary	Engine/Route/RoutePlanner.hpp	/^  virtual bool CheckSecondary(const RouteLink &e) {$/;"	f	class:RoutePlanner
CheckSequenceUTF8	Util/UTF8.cpp	/^struct CheckSequenceUTF8 {$/;"	s	file:
CheckSequenceUTF8	Util/UTF8.cpp	/^struct CheckSequenceUTF8<0u> {$/;"	s	file:
CheckShutdown	UIActions.cpp	/^UIActions::CheckShutdown()$/;"	f	class:UIActions
CheckSpeed	Engine/Task/Ordered/StartConstraints.cpp	/^StartConstraints::CheckSpeed(double ground_speed,$/;"	f	class:StartConstraints
CheckStencil	Screen/OpenGL/Init.cpp	/^CheckStencil()$/;"	f	file:
CheckStopped	Thread/StoppableThread.hpp	/^  bool CheckStopped() const {$/;"	f	class:StoppableThread
CheckTTYName	Device/Port/TTYEnumerator.cpp	/^CheckTTYName(const char *name)$/;"	f	file:
CheckTakeOffSpeed	Computer/FlyingComputer.cpp	/^CheckTakeOffSpeed(double takeoff_speed, const NMEAInfo &basic)$/;"	f	file:
CheckTarget	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::CheckTarget(const AircraftState &state, const bool known_outside)$/;"	f	class:AATPoint
CheckTargetInside	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::CheckTargetInside(const AircraftState& state)$/;"	f	class:AATPoint
CheckTargetOutside	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::CheckTargetOutside(const AircraftState& state)$/;"	f	class:AATPoint
CheckTask	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckTask() const$/;"	f	class:OrderedTask
CheckTask	Engine/Task/TaskManager.cpp	/^TaskManager::CheckTask() const$/;"	f	class:TaskManager
CheckTask	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::CheckTask() const$/;"	f	class:UnorderedTask
CheckThreeAlphaNumeric	IGC/IGCParser.cpp	/^CheckThreeAlphaNumeric(const char *src)$/;"	f	file:
CheckTileVisibility	Terrain/RasterTile.cpp	/^RasterTile::CheckTileVisibility(int view_x, int view_y, unsigned view_radius)$/;"	f	class:RasterTile
CheckTitle	Weather/NOAAFormatter.cpp	/^CheckTitle(const TCHAR *title, size_t title_length, const TCHAR *check)$/;"	f	file:
CheckTransitionOptionalStart	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckTransitionOptionalStart(const AircraftState &state,$/;"	f	class:OrderedTask
CheckTransitionPoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckTransitionPoint(OrderedTaskPoint &point,$/;"	f	class:OrderedTask
CheckTransitions	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::CheckTransitions(const AircraftState &state,$/;"	f	class:OrderedTask
CheckTransitions	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::CheckTransitions(const AircraftState &state_now,$/;"	f	class:UnorderedTask
ChecklistText	Dialogs/dlgChecklist.cpp	/^static TCHAR *ChecklistText[MAXTITLE];$/;"	v	file:
ChecklistTitle	Dialogs/dlgChecklist.cpp	/^static TCHAR *ChecklistTitle[MAXTITLE];$/;"	v	file:
Child	Widget/PagerWidget.hpp	/^    Child(Widget *_widget):widget(_widget), prepared(false) {}$/;"	f	struct:PagerWidget::Child
Child	Widget/PagerWidget.hpp	/^  struct Child {$/;"	s	class:PagerWidget
ChronologicalList	Engine/Trace/Trace.hpp	/^                                 boost::intrusive::constant_time_size<false>> ChronologicalList;$/;"	t	class:Trace
CircleZoom	Profile/ProfileKeys.cpp	/^const char CircleZoom[] = "CircleZoom";$/;"	m	namespace:ProfileKeys	file:
CirclingAverage	Engine/Navigation/TraceHistory.hpp	/^  TraceVariableHistory CirclingAverage;$/;"	m	class:TraceHistory
CirclingComputer	Computer/CirclingComputer.hpp	/^class CirclingComputer {$/;"	c
CirclingInfo	NMEA/CirclingInfo.hpp	/^struct CirclingInfo$/;"	s
CirclingMode	NMEA/CirclingInfo.hpp	/^enum class CirclingMode: uint8_t {$/;"	c
CirclingSettings	Computer/Settings.hpp	/^struct CirclingSettings {$/;"	s
CirclingWind	Computer/Wind/CirclingWind.hpp	/^class CirclingWind$/;"	c
CirclingWindEnabled	Computer/Wind/Settings.hpp	/^  bool CirclingWindEnabled() const {$/;"	f	struct:WindSettings
CirclingZoom	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  CirclingZoom,$/;"	e	enum:ControlIndex	file:
Clamp	Util/Clamp.hpp	/^Clamp(const T &value, const T &min, const T &max)$/;"	f
Class	Java/Class.hxx	/^	class Class : public LocalRef<jclass> {$/;"	c	namespace:Java
Class	Lua/Class.hxx	/^struct Class {$/;"	s	namespace:Lua
CleanASCII	Util/StaticString.hxx	/^	void CleanASCII() {$/;"	f	class:StaticStringBase
CleanString	Device/Driver/EWMicroRecorder.cpp	/^CleanString(char *p)$/;"	f	file:
CleanUp	FLARM/FlarmCalculations.cpp	/^FlarmCalculations::CleanUp(double now)$/;"	f	class:FlarmCalculations
Clear	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::Clear()$/;"	f	class:ProtectedAirspaceWarningManager
Clear	Audio/PCMBufferDataSource.cpp	/^PCMBufferDataSource::Clear()$/;"	f	class:PCMBufferDataSource
Clear	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult Clear() {$/;"	f	class:SLES::AndroidSimpleBufferQueue
Clear	Computer/LiftDatabaseComputer.cpp	/^LiftDatabaseComputer::Clear(LiftDatabase &lift_database,$/;"	f	class:LiftDatabaseComputer
Clear	Computer/StateClock.hpp	/^  void Clear() {$/;"	f	class:StateClock
Clear	Computer/WaveResult.hpp	/^  void Clear() {$/;"	f	struct:WaveResult
Clear	Device/Config.cpp	/^DeviceConfig::Clear()$/;"	f	class:DeviceConfig
Clear	Dialogs/Device/DeviceListDialog.cpp	/^    void Clear() {$/;"	f	union:final::Item
Clear	Dialogs/Device/PortMonitor.cpp	/^  void Clear() {$/;"	f	class:final
Clear	Engine/Airspace/AirspaceSorter.hpp	/^  void Clear() {$/;"	f	struct:AirspaceFilterData
Clear	Engine/Airspace/Airspaces.cpp	/^Airspaces::Clear()$/;"	f	class:Airspaces
Clear	Engine/Route/AStar.hpp	/^  void Clear() {$/;"	f	class:AStar
Clear	Engine/Route/FlatTriangleFan.hpp	/^  void Clear() {$/;"	f	class:FlatTriangleFan
Clear	Engine/Route/FlatTriangleFanTree.hpp	/^  void Clear() {$/;"	f	class:FlatTriangleFanTree
Clear	Engine/Route/ReachResult.hpp	/^  void Clear() {$/;"	f	struct:ReachResult
Clear	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Clear()$/;"	f	class:OrderedTask
Clear	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::Clear()$/;"	f	class:AbortTask
Clear	Engine/Task/Unordered/AlternateTask.cpp	/^AlternateTask::Clear()$/;"	f	class:AlternateTask
Clear	Engine/Trace/Point.hpp	/^  void Clear() {$/;"	f	class:TracePoint
Clear	Engine/Waypoint/Runway.hpp	/^  void Clear() {$/;"	f	class:Runway
Clear	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Clear()$/;"	f	class:Waypoints
Clear	FLARM/Data.hpp	/^  void Clear() {$/;"	f	struct:FlarmData
Clear	FLARM/Error.hpp	/^  void Clear() {$/;"	f
Clear	FLARM/FlarmId.hpp	/^  void Clear() {$/;"	f	class:FlarmId
Clear	FLARM/FlarmNetDatabase.hpp	/^  void Clear() {$/;"	f	class:FlarmNetDatabase
Clear	FLARM/List.hpp	/^  void Clear() {$/;"	f	struct:TrafficList
Clear	FLARM/Status.hpp	/^  void Clear() {$/;"	f	struct:FlarmStatus
Clear	FLARM/Traffic.hpp	/^  void Clear() {$/;"	f	class:FlarmTraffic::AircraftType
Clear	FLARM/Version.hpp	/^  void Clear() {$/;"	f	struct:FlarmVersion
Clear	Form/DataField/ComboList.hpp	/^  void Clear() {$/;"	f	class:ComboList
Clear	GliderLink/List.hpp	/^  void Clear() {$/;"	f	struct:GliderLinkTrafficList
Clear	GliderLink/Traffic.hpp	/^  void Clear() {$/;"	f	struct:GliderLinkTraffic
Clear	IGC/IGCFix.hpp	/^  void Clear() {$/;"	f	struct:IGCFix
Clear	InfoBoxes/Data.cpp	/^InfoBoxData::Clear()$/;"	f	class:InfoBoxData
Clear	InfoBoxes/InfoBoxSettings.cpp	/^InfoBoxSettings::Panel::Clear()$/;"	f	class:InfoBoxSettings::Panel
Clear	Kobo/WPASupplicant.hpp	/^  void Clear() {$/;"	f	struct:WifiStatus
Clear	Lua/InputEvent.cpp	/^bool LuaEventRegistry<T>::Clear(const T event) {$/;"	f	class:LuaEventRegistry
Clear	Math/DifferentialWindowFilter.hpp	/^  void Clear() {$/;"	f	class:DifferentialWindowFilter
Clear	Math/Histogram.cpp	/^void Histogram::Clear()$/;"	f	class:Histogram
Clear	Menu/MenuData.cpp	/^Menu::Clear()$/;"	f	class:Menu
Clear	Menu/MenuData.hpp	/^  void Clear() {$/;"	f	class:MenuItem
Clear	NMEA/CirclingInfo.cpp	/^CirclingInfo::Clear()$/;"	f	class:CirclingInfo
Clear	NMEA/ClimbHistory.cpp	/^ClimbHistory::Clear()$/;"	f	class:ClimbHistory
Clear	NMEA/ClimbInfo.cpp	/^ClimbInfo::Clear()$/;"	f	class:ClimbInfo
Clear	NMEA/ClimbInfo.cpp	/^OneClimbInfo::Clear()$/;"	f	class:OneClimbInfo
Clear	NMEA/Derived.cpp	/^AirspaceWarningsInfo::Clear()$/;"	f	class:AirspaceWarningsInfo
Clear	NMEA/Derived.cpp	/^TeamInfo::Clear()$/;"	f	class:TeamInfo
Clear	NMEA/Derived.cpp	/^TerrainInfo::Clear()$/;"	f	class:TerrainInfo
Clear	NMEA/DeviceInfo.hpp	/^  void Clear() {$/;"	f	struct:DeviceInfo
Clear	NMEA/ExternalSettings.cpp	/^ExternalSettings::Clear()$/;"	f	class:ExternalSettings
Clear	NMEA/LiftDatabase.hpp	/^  void Clear() {$/;"	f	class:LiftDatabase
Clear	NMEA/ThermalLocator.cpp	/^ThermalLocatorInfo::Clear()$/;"	f	class:ThermalLocatorInfo
Clear	NMEA/Validity.hpp	/^  void Clear() {$/;"	f	class:Validity
Clear	NMEA/VarioInfo.cpp	/^VarioInfo::Clear()$/;"	f	class:VarioInfo
Clear	PageState.cpp	/^PagesState::Clear()$/;"	f	class:PagesState
Clear	PageState.hpp	/^  void Clear() {$/;"	f	struct:PageState
Clear	Profile/ProfileMap.cpp	/^Profile::Clear()$/;"	f	class:Profile
Clear	Projection/CompareProjection.hpp	/^  void Clear() {$/;"	f	class:CompareProjection
Clear	RadioFrequency.hpp	/^  void Clear() {$/;"	f	class:RadioFrequency
Clear	Renderer/AirspaceLabelList.hpp	/^  void Clear() {$/;"	f	class:AirspaceLabelList
Clear	Renderer/AirspaceLabelRenderer.hpp	/^  void Clear() {$/;"	f	class:AirspaceLabelRenderer
Clear	Renderer/AirspaceRenderer.hpp	/^  void Clear() {$/;"	f	class:AirspaceRenderer
Clear	Renderer/LabelBlock.cpp	/^LabelBlock::Bucket::Clear()$/;"	f	class:LabelBlock::Bucket
Clear	Repository/AvailableFile.hpp	/^  void Clear() {$/;"	f	struct:AvailableFile
Clear	Repository/FileRepository.hpp	/^  void Clear() {$/;"	f	struct:FileRepository
Clear	Screen/Custom/WList.cpp	/^WindowList::Clear()$/;"	f	class:WindowList
Clear	Screen/GDI/Canvas.hpp	/^  void Clear() {$/;"	f	class:Canvas
Clear	Screen/GDI/Canvas.hpp	/^  void Clear(const Brush &brush) {$/;"	f	class:Canvas
Clear	Screen/GDI/Canvas.hpp	/^  void Clear(const Color color) {$/;"	f	class:Canvas
Clear	Screen/GDI/Canvas.hpp	/^  void Clear(const HWColor color) {$/;"	f	class:Canvas
Clear	Screen/Memory/Canvas.hpp	/^  void Clear() {$/;"	f	class:Canvas
Clear	Screen/Memory/Canvas.hpp	/^  void Clear(const Brush &brush) {$/;"	f	class:Canvas
Clear	Screen/Memory/Canvas.hpp	/^  void Clear(const Color color) {$/;"	f	class:Canvas
Clear	Screen/OpenGL/Canvas.hpp	/^  void Clear() {$/;"	f	class:Canvas
Clear	Screen/OpenGL/Canvas.hpp	/^  void Clear(const Brush &brush) {$/;"	f	class:Canvas
Clear	Screen/OpenGL/Canvas.hpp	/^  void Clear(const Color color) {$/;"	f	class:Canvas
Clear	Screen/TerminalWindow.cpp	/^TerminalWindow::Clear()$/;"	f	class:TerminalWindow
Clear	Task/TaskStore.cpp	/^TaskStore::Clear()$/;"	f	class:TaskStore
Clear	TeamCode/TeamCode.hpp	/^  void Clear() {$/;"	f	class:TeamCode
Clear	Terrain/RasterTile.hpp	/^  void Clear() {$/;"	f	class:RasterTile
Clear	Time/BrokenDate.hpp	/^  void Clear() {$/;"	f	struct:BrokenDate
Clear	UIState.cpp	/^UIState::Clear()$/;"	f	class:UIState
Clear	Util/Cache.hxx	/^	void Clear() {$/;"	f	class:Cache
Clear	Util/RadixTree.hpp	/^    void Clear() {$/;"	f	struct:RadixTree::LeafList
Clear	Util/RadixTree.hpp	/^    void Clear() {$/;"	f	struct:RadixTree::Node
Clear	Util/RadixTree.hpp	/^  void Clear() {$/;"	f	class:RadixTree
Clear	Waypoint/WaypointFilter.hpp	/^  void Clear() {$/;"	f	struct:WaypointFilter
Clear	Weather/METAR.hpp	/^  void Clear() {$/;"	f	struct:METAR
Clear	Weather/WeatherUIState.hpp	/^  void Clear() {$/;"	f	struct:WeatherUIState
Clear	Widget/ManagedWidget.cpp	/^ManagedWidget::Clear()$/;"	f	class:ManagedWidget
Clear	Widget/PagerWidget.cpp	/^PagerWidget::Clear()$/;"	f	class:PagerWidget
ClearAirspaces	Computer/GlideComputer.hpp	/^  void ClearAirspaces() {$/;"	f	class:GlideComputer
ClearAirspaces	Computer/RouteComputer.hpp	/^  void ClearAirspaces() {$/;"	f	class:RouteComputer
ClearAirspaces	Computer/TaskComputer.hpp	/^  void ClearAirspaces() {$/;"	f	class:TaskComputer
ClearBuffer	Logger/Logger.cpp	/^Logger::ClearBuffer()$/;"	f	class:Logger
ClearBuffer	Logger/LoggerImpl.cpp	/^LoggerImpl::ClearBuffer()$/;"	f	class:LoggerImpl
ClearBuffer	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::ClearBuffer()$/;"	f	class:StencilMapCanvas
ClearCache	Topography/TopographyFile.cpp	/^TopographyFile::ClearCache()$/;"	f	class:TopographyFile
ClearChoices	Form/DataField/Enum.hpp	/^  void ClearChoices() {$/;"	f	class:final
ClearClearance	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::ClearClearance() const$/;"	f	class:AbstractAirspace
ClearClearance	Engine/Airspace/Airspace.cpp	/^Airspace::ClearClearance() const$/;"	f	class:Airspace
ClearClearances	Engine/Airspace/Airspaces.cpp	/^Airspaces::ClearClearances()$/;"	f	class:Airspaces
ClearConfig	Device/Descriptor.cpp	/^DeviceDescriptor::ClearConfig()$/;"	f	class:DeviceDescriptor
ClearDirection	Engine/Waypoint/Runway.hpp	/^  void ClearDirection() {$/;"	f	class:Runway
ClearExtensions	IGC/IGCFix.hpp	/^  void ClearExtensions() {$/;"	f	struct:IGCFix
ClearFillStencil	Renderer/AirspaceRendererGL.cpp	/^  void ClearFillStencil() {$/;"	f	class:final	file:
ClearHome	Computer/Settings.cpp	/^PlacesOfInterestSettings::ClearHome()$/;"	f	class:PlacesOfInterestSettings
ClearKeyDownFunction	Form/Form.hpp	/^  void ClearKeyDownFunction() {$/;"	f	class:WndForm
ClearLog	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ClearLog(OperationEnvironment &env)$/;"	f	class:CAI302Device
ClearLog	Device/Driver/CAI302/Protocol.cpp	/^CAI302::ClearLog(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
ClearName	Engine/Task/Ordered/OrderedTask.hpp	/^  void ClearName() {$/;"	f	class:final
ClearNotification	Event/Notify.cpp	/^Notify::ClearNotification()$/;"	f	class:Notify
ClearPilot	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ClearPilot(OperationEnvironment &env)$/;"	f	class:CAI302Device
ClearPilot	Device/Driver/CAI302/Protocol.cpp	/^CAI302::ClearPilot(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
ClearPoints	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ClearPoints(OperationEnvironment &env)$/;"	f	class:CAI302Device
ClearPoints	Device/Driver/CAI302/Protocol.cpp	/^CAI302::ClearPoints(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
ClearQueues	Input/InputQueue.cpp	/^InputEvents::ClearQueues()$/;"	f	class:InputEvents
ClearReach	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::ClearReach()$/;"	f	class:RoutePlanner
ClearReach	Task/ProtectedRoutePlanner.hpp	/^  void ClearReach() {$/;"	f	class:ProtectedRoutePlanner
ClearReach	Task/RoutePlannerGlue.hpp	/^  void ClearReach() {$/;"	f	class:RoutePlannerGlue
ClearRequest	Terrain/RasterTile.hpp	/^  void ClearRequest() {$/;"	f	class:RasterTile
ClearSampleAllButLast	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::ClearSampleAllButLast(const AircraftState& ref_last,$/;"	f	class:SampledTaskPoint
ClearSuffix	Dialogs/Task/Manager/TaskListPanel.cpp	/^ClearSuffix(TCHAR *p, const TCHAR *suffix)$/;"	f	file:
ClearText	Dialogs/TouchTextEntry.cpp	/^ClearText()$/;"	f	file:
ClearText	Widget/RowFormWidget.hpp	/^  void ClearText(unsigned i) {$/;"	f	class:RowFormWidget
ClearUpdate	Operation/ThreadedOperationEnvironment.hpp	/^    void ClearUpdate() {$/;"	f	struct:ThreadedOperationEnvironment::Data
ClearValidationErrors	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  void ClearValidationErrors() {$/;"	f	class:AbstractTaskFactory
ClearValue	Widget/RowFormWidget.hpp	/^  void ClearValue(unsigned i) {$/;"	f	class:RowFormWidget
ClearVario	InfoBoxes/InfoBoxLayout.hpp	/^    void ClearVario() {$/;"	f	struct:InfoBoxLayout::Layout
ClearWeakBaroAltitude	NMEA/Info.hpp	/^  void ClearWeakBaroAltitude() {$/;"	f	struct:NMEAInfo
ClearWeakPressureAltitude	NMEA/Info.hpp	/^  void ClearWeakPressureAltitude() {$/;"	f	struct:NMEAInfo
ClearWhite	Screen/GDI/Canvas.hpp	/^  void ClearWhite() {$/;"	f	class:Canvas
ClearWhite	Screen/Memory/Canvas.hpp	/^  void ClearWhite() {$/;"	f	class:Canvas
ClearWhite	Screen/OpenGL/Canvas.hpp	/^  void ClearWhite() {$/;"	f	class:Canvas
ClearingPair	Engine/Route/RoutePlanner.hpp	/^  typedef std::pair<AFlatGeoPoint, AFlatGeoPoint> ClearingPair;$/;"	t	class:RoutePlanner
Click	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::Click()$/;"	f	class:TaskClosePanel
Click	Form/Button.cpp	/^Button::Click()$/;"	f	class:Button
Click	Widget/ActionWidget.cpp	/^ActionWidget::Click()$/;"	f	class:ActionWidget
Click	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Click()$/;"	f	class:ButtonPanelWidget
Click	Widget/CallbackWidget.cpp	/^CallbackWidget::Click()$/;"	f	class:CallbackWidget
Click	Widget/PagerWidget.cpp	/^PagerWidget::Click()$/;"	f	class:PagerWidget
Click	Widget/SolidWidget.cpp	/^SolidWidget::Click()$/;"	f	class:SolidWidget
Click	Widget/TwoWidgets.cpp	/^TwoWidgets::Click()$/;"	f	class:TwoWidgets
Click	Widget/Widget.cpp	/^NullWidget::Click()$/;"	f	class:NullWidget
ClickPage	Widget/PagerWidget.hpp	/^  bool ClickPage(unsigned i) {$/;"	f	class:PagerWidget
ClickPage	Widget/TabWidget.cpp	/^TabWidget::ClickPage(unsigned i)$/;"	f	class:TabWidget
Client	Tracking/SkyLines/Client.hpp	/^  explicit Client(boost::asio::io_context &io_context,$/;"	f	class:SkyLinesTracking::Client
Client	Tracking/SkyLines/Client.hpp	/^class Client {$/;"	c	namespace:SkyLinesTracking
Client	Tracking/SkyLines/Server.hpp	/^  struct Client {$/;"	s	class:SkyLinesTracking::Server
ClientUpdate	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::ClientUpdate(const AircraftState &state_now, bool reachable)$/;"	f	class:AbortTask
ClientUpdate	Engine/Task/Unordered/AlternateTask.cpp	/^AlternateTask::ClientUpdate(const AircraftState &state_now,$/;"	f	class:AlternateTask
Climb	Replay/TaskAutoPilot.hpp	/^    Climb = 0,$/;"	e	enum:TaskAutoPilot::AcState
ClimbAverageCalculator	Computer/ClimbAverageCalculator.hpp	/^class ClimbAverageCalculator$/;"	c
ClimbChartCaption	Renderer/ClimbChartRenderer.cpp	/^ClimbChartCaption(TCHAR *sTmp,$/;"	f
ClimbHistory	NMEA/ClimbHistory.hpp	/^class ClimbHistory {$/;"	c
ClimbInfo	NMEA/ClimbInfo.hpp	/^struct ClimbInfo$/;"	s
ClimbMapScale	Profile/ProfileKeys.cpp	/^const char ClimbMapScale[] = "ClimbMapScale";$/;"	m	namespace:ProfileKeys	file:
ClimbPercentLook	Look/ClimbPercentLook.hpp	/^struct ClimbPercentLook {$/;"	s
ClimbPercentRenderer	Renderer/ClimbPercentRenderer.hpp	/^  ClimbPercentRenderer(const ClimbPercentLook &_look):look(_look) {}$/;"	f	class:ClimbPercentRenderer
ClimbPercentRenderer	Renderer/ClimbPercentRenderer.hpp	/^class ClimbPercentRenderer {$/;"	c
Clip	Audio/AudioAlgorithms.hpp	/^inline int16_t Clip(int32_t value) {$/;"	f
Clip	MapWindow/OverlayBitmap.cpp	/^Clip(const GeoQuadrilateral &_geo, const GeoBounds &_bounds)$/;"	f	file:
Clip	Screen/Memory/Canvas.cpp	/^Clip(int &position, unsigned &length, unsigned max,$/;"	f	file:
ClipAlt	Profile/ProfileKeys.cpp	/^const char ClipAlt[] = "ClipAlt";$/;"	m	namespace:ProfileKeys	file:
ClipAltitude	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  ClipAltitude,$/;"	e	enum:ControlIndex	file:
ClipAxis	Screen/Memory/RasterCanvas.hpp	/^  static bool ClipAxis(int &position, unsigned &length, unsigned max,$/;"	f	class:RasterCanvas
ClipEncode	Geo/GeoClip.cpp	/^GeoClip::ClipEncode(const GeoPoint pt) const$/;"	f	class:GeoClip
ClipEncode	Screen/Memory/RasterCanvas.hpp	/^  unsigned ClipEncode(int x, int y) const {$/;"	f	class:RasterCanvas
ClipEncodeX	Geo/GeoClip.cpp	/^  void ClipEncodeX(const Angle& west, const Angle& east) {$/;"	f	class:ClipGeoPoint
ClipEncodeX	Geo/GeoClip.cpp	/^GeoClip::ClipEncodeX(const Angle x) const$/;"	f	class:GeoClip
ClipEncodeX	Screen/Memory/RasterCanvas.hpp	/^  unsigned ClipEncodeX(int x) const {$/;"	f	class:RasterCanvas
ClipEncodeY	Geo/GeoClip.cpp	/^  void ClipEncodeY(const Angle& south, const Angle& north) {$/;"	f	class:ClipGeoPoint
ClipEncodeY	Geo/GeoClip.cpp	/^GeoClip::ClipEncodeY(const Angle y) const$/;"	f	class:GeoClip
ClipEncodeY	Screen/Memory/RasterCanvas.hpp	/^  unsigned ClipEncodeY(int y) const {$/;"	f	class:RasterCanvas
ClipGeoPoint	Geo/GeoClip.cpp	/^  ClipGeoPoint(): clip_code(0) {}$/;"	f	class:ClipGeoPoint
ClipGeoPoint	Geo/GeoClip.cpp	/^  ClipGeoPoint(const GeoPoint& _p): GeoPoint(_p), clip_code(0)$/;"	f	class:ClipGeoPoint
ClipGeoPoint	Geo/GeoClip.cpp	/^class ClipGeoPoint: public GeoPoint {$/;"	c	file:
ClipHeightDelta	Terrain/RasterRenderer.cpp	/^ClipHeightDelta(TerrainHeight a, TerrainHeight b)$/;"	f	file:
ClipHeightDelta	Terrain/RasterRenderer.cpp	/^ClipHeightDelta(int d)$/;"	f	file:
ClipIncremental	Screen/Memory/RasterCanvas.hpp	/^  bool ClipIncremental(int &x1, int &y1, int &x2, int &y2,$/;"	f	class:RasterCanvas
ClipLine	Geo/GeoClip.cpp	/^GeoClip::ClipLine(GeoPoint &a, GeoPoint &b) const$/;"	f	class:GeoClip
ClipLine	Screen/Memory/RasterCanvas.hpp	/^  bool ClipLine(int &x1, int &y1, int &x2, int &y2) const {$/;"	f	class:RasterCanvas
ClipMax	Screen/Memory/SubCanvas.cpp	/^ClipMax(unsigned limit, int offset, unsigned size) {$/;"	f	file:
ClipPolygon	Geo/GeoClip.cpp	/^GeoClip::ClipPolygon(GeoPoint *dest,$/;"	f	class:GeoClip
ClipPolygonLatitude	Geo/GeoClip.cpp	/^ClipPolygonLatitude(const Angle south, const Angle north, GeoPoint *dest,$/;"	f	file:
ClipPolygonLongitude	Geo/GeoClip.cpp	/^ClipPolygonLongitude(const Angle west, const Angle east, GeoPoint *dest,$/;"	f	file:
ClipScaleAxis	Screen/Memory/RasterCanvas.hpp	/^  static bool ClipScaleAxis(int &dest_position, unsigned &dest_length,$/;"	f	class:RasterCanvas
ClipVertexLongitude	Geo/GeoClip.cpp	/^ClipVertexLongitude(const Angle west, const Angle east,$/;"	f	file:
ClipVertex_latitude	Geo/GeoClip.cpp	/^ClipVertex_latitude(const Angle south, const Angle north,$/;"	f	file:
ClockCache	Time/ClockCache.hxx	/^class ClockCache {$/;"	c
Clone	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  ObservationZonePoint *Clone() const {$/;"	f	class:ObservationZonePoint
Clone	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Clone(const TaskBehaviour &tb) const$/;"	f	class:OrderedTask
Clone	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::Clone(const TaskBehaviour &task_behaviour,$/;"	f	class:OrderedTaskPoint
Clone	Engine/Task/TaskManager.cpp	/^TaskManager::Clone(const TaskBehaviour &tb) const$/;"	f	class:TaskManager
Clone	Util/AllocatedString.hxx	/^	AllocatedString Clone() const {$/;"	f	class:AllocatedString
Close	Device/Descriptor.cpp	/^DeviceDescriptor::Close()$/;"	f	class:DeviceDescriptor
Close	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::Close()$/;"	f	class:LibInputHandler
Close	Event/Poll/Linux/Input.cpp	/^LinuxInputDevice::Close()$/;"	f	class:LinuxInputDevice
Close	Kobo/WPASupplicant.cpp	/^WPASupplicant::Close()$/;"	f	class:WPASupplicant
Close	ProgressGlue.cpp	/^ProgressGlue::Close()$/;"	f	class:ProgressGlue
Close	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::Close()$/;"	f	class:SkyLinesTracking::Client
Close	Weather/Rasp/RaspCache.cpp	/^RaspCache::Close()$/;"	f	class:RaspCache
CloseAlsaHandle	Audio/ALSAPCMPlayer.hpp	/^  static inline void CloseAlsaHandle(snd_pcm_t *handle) {$/;"	f	class:ALSAPCMPlayer
CloseDevice	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::CloseDevice(int fd)$/;"	f	class:LibInputHandler
CloseLanguageFile	Language/LanguageGlue.cpp	/^CloseLanguageFile()$/;"	f
CloseNavpoints	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::CloseNavpoints(OperationEnvironment &env)$/;"	f	class:CAI302Device
CloseNavpoints	Device/Driver/CAI302/Protocol.cpp	/^CAI302::CloseNavpoints(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
CloseTab	Dialogs/Task/Manager/Internal.hpp	/^    CloseTab,$/;"	e	enum:final::Tabs
ClosestPoint	Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::ClosestPoint(const GeoPoint &loc,$/;"	f	class:AirspaceCircle
ClosestPoint	Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::ClosestPoint(const GeoPoint &loc,$/;"	f	class:AirspacePolygon
ClosingPair	Engine/Contest/Solvers/TriangleContest.hpp	/^  typedef std::pair<unsigned, unsigned> ClosingPair;$/;"	t	class:TriangleContest
ClosingPairs	Engine/Contest/Solvers/TriangleContest.hpp	/^  struct ClosingPairs {$/;"	s	class:TriangleContest
CloudClient	Cloud/Client.hpp	/^  CloudClient(const boost::asio::ip::udp::endpoint &_endpoint, uint64_t _key,$/;"	f	struct:CloudClient
CloudClient	Cloud/Client.hpp	/^struct CloudClient$/;"	s
CloudClientContainer	Cloud/Client.cpp	/^CloudClientContainer::CloudClientContainer()$/;"	f	class:CloudClientContainer
CloudClientContainer	Cloud/Client.hpp	/^class CloudClientContainer {$/;"	c
CloudClientIndexable	Cloud/Client.hpp	/^struct CloudClientIndexable {$/;"	s
CloudConfigPanel	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  CloudConfigPanel()$/;"	f	class:final
CloudData	Cloud/Data.hpp	/^struct CloudData {$/;"	s
CloudEnableDialog	Dialogs/Tracking/CloudEnableDialog.cpp	/^CloudEnableDialog()$/;"	f
CloudEnabled	Profile/ProfileKeys.cpp	/^const char CloudEnabled[] = "CloudEnabled";$/;"	m	namespace:ProfileKeys	file:
CloudKey	Profile/ProfileKeys.cpp	/^const char CloudKey[] = "CloudKey";$/;"	m	namespace:ProfileKeys	file:
CloudServer	Cloud/Main.cpp	/^  CloudServer(AllocatedPath &&_db_path, boost::asio::io_context &_io_context,$/;"	f	class:final
CloudSettings	Tracking/SkyLines/CloudSettings.hpp	/^struct CloudSettings {$/;"	s	namespace:SkyLinesTracking
CloudShowThermals	Profile/ProfileKeys.cpp	/^const char CloudShowThermals[] = "CloudShowThermals";$/;"	m	namespace:ProfileKeys	file:
CloudThermal	Cloud/Thermal.hpp	/^  CloudThermal(uint64_t _client_key,$/;"	f	struct:CloudThermal
CloudThermal	Cloud/Thermal.hpp	/^struct CloudThermal$/;"	s
CloudThermalContainer	Cloud/Thermal.cpp	/^CloudThermalContainer::CloudThermalContainer()$/;"	f	class:CloudThermalContainer
CloudThermalContainer	Cloud/Thermal.hpp	/^class CloudThermalContainer {$/;"	c
CloudThermalIndexable	Cloud/Thermal.hpp	/^struct CloudThermalIndexable {$/;"	s
CoPilotName	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  CoPilotName,$/;"	e	enum:ControlIndex	file:
CoPilotName	Profile/ProfileKeys.cpp	/^const char CoPilotName[] = "CoPilotName";$/;"	m	namespace:ProfileKeys	file:
CoarsePixelDistance	Terrain/RasterProjection.hpp	/^  double CoarsePixelDistance(const GeoPoint &location, unsigned pixels) const {$/;"	f	class:RasterProjection
CollectOverlays	Weather/PCMet/Overlays.cpp	/^PCMet::CollectOverlays()$/;"	f	class:PCMet
Color	Screen/GDI/Color.hpp	/^  constexpr Color(uint8_t r, uint8_t g, uint8_t b) : value(RGB(r, g, b)) {}$/;"	f	class:Color
Color	Screen/GDI/Color.hpp	/^  explicit constexpr Color(COLORREF c) : value(c) {}$/;"	f	class:Color
Color	Screen/GDI/Color.hpp	/^  explicit constexpr Color(RGB8Color other)$/;"	f	class:Color
Color	Screen/GDI/Color.hpp	/^class Color {$/;"	c
Color	Screen/Memory/Color.hpp	/^  Color(uint8_t r, uint8_t g, uint8_t b, uint8_t a=OPAQUE)$/;"	f	class:Color
Color	Screen/Memory/Color.hpp	/^  constexpr Color(uint8_t r, uint8_t g, uint8_t b,$/;"	f	class:Color
Color	Screen/Memory/Color.hpp	/^  explicit constexpr Color(RGB8Color other)$/;"	f	class:Color
Color	Screen/Memory/Color.hpp	/^  explicit constexpr Color(RGB8Color other, uint8_t _alpha=OPAQUE)$/;"	f	class:Color
Color	Screen/Memory/Color.hpp	/^  explicit constexpr Color(uint8_t _luminosity,$/;"	f	class:Color
Color	Screen/Memory/Color.hpp	/^class Color {$/;"	c
Color	Screen/OpenGL/Color.hpp	/^  constexpr Color(GLubyte _r, GLubyte _g, GLubyte _b, GLubyte _a)$/;"	f	class:Color
Color	Screen/OpenGL/Color.hpp	/^  constexpr Color(Internal,$/;"	f	class:Color
Color	Screen/OpenGL/Color.hpp	/^  constexpr Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:Color
Color	Screen/OpenGL/Color.hpp	/^  explicit constexpr Color(RGB8Color other)$/;"	f	class:Color
Color	Screen/OpenGL/Color.hpp	/^class Color {$/;"	c
ColorButtonRenderer	Renderer/ColorButtonRenderer.hpp	/^  ColorButtonRenderer(const ButtonLook &_look, Color _color)$/;"	f	class:ColorButtonRenderer
ColorButtonRenderer	Renderer/ColorButtonRenderer.hpp	/^class ColorButtonRenderer : public ButtonRenderer {$/;"	c
ColorKey	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr ColorKey(argument_type _key):key(_key) {}$/;"	f	struct:ColorKey
ColorKey	Screen/Memory/PixelOperations.hpp	/^struct ColorKey {$/;"	s
ColorRamp	Screen/Ramp.hpp	/^struct ColorRamp {$/;"	s
ColorRampLookup	Screen/Ramp.cpp	/^ColorRampLookup(const int h,$/;"	f
ColorWithAlpha	Screen/Color.hpp	/^ColorWithAlpha(const Color &c, uint8_t a)$/;"	f
Column	Form/DigitEntry.hpp	/^  struct Column {$/;"	s	class:CoordinateFormat
CombineAlpha	Screen/OpenGL/ConstantAlpha.cpp	/^CombineAlpha(float alpha)$/;"	f	file:
CombinedDivAndMod	Math/FastMath.hpp	/^CombinedDivAndMod(unsigned &lx)$/;"	f
ComboList	Form/DataField/ComboList.hpp	/^  ComboList()$/;"	f	class:ComboList
ComboList	Form/DataField/ComboList.hpp	/^class ComboList {$/;"	c
ComboListPopup	Dialogs/ComboPicker.cpp	/^static const ComboList *ComboListPopup;$/;"	v	file:
ComboPicker	Dialogs/ComboPicker.cpp	/^ComboPicker(const TCHAR *caption, DataField &df,$/;"	f
ComboPicker	Dialogs/ComboPicker.cpp	/^ComboPicker(const TCHAR *caption,$/;"	f
ComboPickerSupport	Dialogs/ComboPicker.cpp	/^  ComboPickerSupport(const ComboList &_combo_list)$/;"	f	class:ComboPickerSupport
ComboPickerSupport	Dialogs/ComboPicker.cpp	/^class ComboPickerSupport : public ListItemRenderer {$/;"	c	file:
Command	Device/Driver/LX/LXN.hpp	/^  enum Command {$/;"	g	namespace:LXN
Command	Device/Driver/LX/Protocol.hpp	/^  enum Command {$/;"	g	namespace:LX
Command	Device/Driver/LXERA/Protocol.hpp	/^  enum Command {$/;"	g	namespace:LXEra
Command	Device/Driver/Volkslogger/Protocol.hpp	/^  enum Command {$/;"	g	namespace:Volkslogger
CommandLine	CommandLine.cpp	/^namespace CommandLine {$/;"	n	file:
CommandLine	CommandLine.hpp	/^namespace CommandLine {$/;"	n
CommandMode	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::CommandMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
CommandMode	Device/Driver/CAI302/Protocol.cpp	/^CAI302::CommandMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
CommandMode	Device/Driver/LX/Protocol.cpp	/^LX::CommandMode(Port &port, OperationEnvironment &env)$/;"	f	class:LX
CommandModeQuick	Device/Driver/CAI302/Protocol.cpp	/^CAI302::CommandModeQuick(Port &port)$/;"	f	class:CAI302
CommandModeQuick	Device/Driver/LX/Protocol.cpp	/^LX::CommandModeQuick(Port &port, OperationEnvironment &env)$/;"	f	class:LX
Commands	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^enum Commands {$/;"	g	file:
Commit	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::Commit()$/;"	f	class:TaskManagerDialog
Commit	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Commit(const OrderedTask& that)$/;"	f	class:OrderedTask
Commit	Engine/Task/TaskManager.cpp	/^TaskManager::Commit(const OrderedTask &other)$/;"	f	class:TaskManager
Commit	IO/FileCache.cpp	/^FileCache::Commit(const TCHAR *name, FILE *file)$/;"	f	class:FileCache
Commit	IO/FileOutputStream.cxx	/^FileOutputStream::Commit()$/;"	f	class:FileOutputStream
Commit	IO/FileTransaction.cpp	/^FileTransaction::Commit()$/;"	f	class:FileTransaction
Commit	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::Commit()$/;"	f	class:StencilMapCanvas
Commit	Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::Commit(Canvas &canvas,$/;"	f	class:TransparentRendererCache
Commit	Renderer/TransparentRendererCache.hpp	/^  void Commit(Canvas &canvas, const WindowProjection &projection) {$/;"	f	class:TransparentRendererCache
Commit	Repository/Parser.cpp	/^Commit(FileRepository &repository, AvailableFile &file)$/;"	f	file:
Commit	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::Commit(Canvas &other)$/;"	f	class:BufferCanvas
Commit	Topography/ShapeRenderer.hpp	/^  void Commit() {$/;"	f	class:ShapeRenderer
CommitAndClose	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::CommitAndClose()$/;"	f	class:TaskClosePanel
CommitLine	IGC/IGCWriter.cpp	/^IGCWriter::CommitLine(char *line)$/;"	f	class:IGCWriter
CommitPoints	Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::CommitPoints(bool closed)$/;"	f	class:FlatTriangleFan
CommitWrite	Screen/OpenGL/Buffer.hpp	/^  void CommitWrite(size_t size, GLvoid *data) {$/;"	f	class:GLBuffer
CommonInterface	Interface.hpp	/^namespace CommonInterface {$/;"	n
CommonProcessTimer	ProcessTimer.cpp	/^CommonProcessTimer()$/;"	f	file:
CommonStats	Engine/Task/Stats/CommonStats.hpp	/^class CommonStats $/;"	c
Compare	Projection/CompareProjection.cpp	/^CompareProjection::Compare(const CompareProjection &other) const$/;"	f	class:CompareProjection
Compare	Projection/CompareProjection.hpp	/^  bool Compare(const WindowProjection &projection) const {$/;"	f	class:CompareProjection
CompareAirspaceVectors	Engine/Airspace/Airspaces.cpp	/^CompareAirspaceVectors(const AirspacesInterface::AirspaceVector &a,$/;"	f	file:
CompareAndUpdate	Projection/CompareProjection.cpp	/^CompareProjection::CompareAndUpdate(const CompareProjection &other)$/;"	f	class:CompareProjection
CompareAndUpdate	Projection/CompareProjection.hpp	/^  bool CompareAndUpdate(const WindowProjection &projection) {$/;"	f	class:CompareProjection
CompareBallastFraction	NMEA/ExternalSettings.hpp	/^  bool CompareBallastFraction(double value) const {$/;"	f	struct:ExternalSettings
CompareBallastOverload	NMEA/ExternalSettings.hpp	/^  bool CompareBallastOverload(double value) const {$/;"	f	struct:ExternalSettings
CompareBugs	NMEA/ExternalSettings.hpp	/^  bool CompareBugs(double value) const {$/;"	f	struct:ExternalSettings
CompareComment	InfoBoxes/Data.cpp	/^InfoBoxData::CompareComment(const InfoBoxData &other) const$/;"	f	class:InfoBoxData
CompareDirection	Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareDirection(const Waypoint &waypoint, Angle angle,$/;"	f	class:WaypointFilter
CompareDirection	Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareDirection(const Waypoint &waypoint,$/;"	f	class:WaypointFilter
CompareHorizontal	Screen/Memory/Bresenham.hpp	/^  static bool CompareHorizontal(const BresenhamIterator& i1,$/;"	f	class:BresenhamIterator
CompareMacCready	NMEA/ExternalSettings.hpp	/^  bool CompareMacCready(double value) const {$/;"	f	struct:ExternalSettings
CompareMapItems	MapWindow/Items/List.cpp	/^CompareMapItems(const MapItem *a, const MapItem *b)$/;"	f	file:
CompareName	Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareName(const Waypoint &waypoint) const$/;"	f	class:WaypointFilter
CompareName	Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareName(const Waypoint &waypoint, const TCHAR *name)$/;"	f	class:WaypointFilter
CompareNearestAirspace	Airspace/NearestAirspace.cpp	/^struct CompareNearestAirspace {$/;"	s	file:
CompareProjection	Projection/CompareProjection.cpp	/^CompareProjection::CompareProjection(const WindowProjection &projection)$/;"	f	class:CompareProjection
CompareProjection	Projection/CompareProjection.hpp	/^  CompareProjection():max_delta(-1) {}$/;"	f	class:CompareProjection
CompareProjection	Projection/CompareProjection.hpp	/^class CompareProjection {$/;"	c
CompareQNH	NMEA/ExternalSettings.hpp	/^  bool CompareQNH(AtmosphericPressure value) const {$/;"	f	struct:ExternalSettings
CompareRoughly	Math/Angle.cpp	/^Angle::CompareRoughly(Angle other, Angle threshold) const$/;"	f	class:Angle
CompareSoonestAirspace	Engine/Airspace/SoonestAirspace.cpp	/^struct CompareSoonestAirspace {$/;"	s	file:
CompareTagName	XML/Parser.cpp	/^CompareTagName(const TCHAR *cclose, const TCHAR *copen)$/;"	f	file:
CompareTime	NMEA/ThermalLocator.cpp	/^CompareTime(const ThermalSource &a, const ThermalSource &b)$/;"	f	file:
CompareTitle	InfoBoxes/Data.cpp	/^InfoBoxData::CompareTitle(const InfoBoxData &other) const$/;"	f	class:InfoBoxData
CompareType	Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareType(const Waypoint &waypoint, TypeFilter type,$/;"	f	class:WaypointFilter
CompareType	Waypoint/WaypointFilter.cpp	/^WaypointFilter::CompareType(const Waypoint &waypoint,$/;"	f	class:WaypointFilter
CompareValue	InfoBoxes/Data.cpp	/^InfoBoxData::CompareValue(const InfoBoxData &other) const$/;"	f	class:InfoBoxData
CompareVerticalHorizontal	Screen/Memory/Bresenham.hpp	/^  static bool CompareVerticalHorizontal(const BresenhamIterator& i1,$/;"	f	class:BresenhamIterator
CompareVolume	NMEA/ExternalSettings.hpp	/^  bool CompareVolume(unsigned value) const {$/;"	f	struct:ExternalSettings
CompareWaypointItems	MapWindow/Items/List.cpp	/^CompareWaypointItems(const WaypointMapItem *a, const WaypointMapItem *b)$/;"	f	file:
CompareWingLoading	NMEA/ExternalSettings.hpp	/^  bool CompareWingLoading(double value) const {$/;"	f	struct:ExternalSettings
CompassRenderer	Renderer/CompassRenderer.hpp	/^  CompassRenderer(const MapLook &_look):look(_look) {}$/;"	f	class:CompassRenderer
CompassRenderer	Renderer/CompassRenderer.hpp	/^class CompassRenderer {$/;"	c
CompetitionClass	Device/Driver/LX/LXN.hpp	/^  struct CompetitionClass {$/;"	s	namespace:LXN
CompetitionID	Device/Driver/LX/Protocol.hpp	/^    char CompetitionID[4];$/;"	m	struct:LX::Pilot
CompetitionID	Device/Driver/LXERA/Protocol.hpp	/^    char CompetitionID[4];$/;"	m	struct:LXEra::Pilot
CompetitionId	Profile/ProfileKeys.cpp	/^const char CompetitionId[] = "AircraftRego";$/;"	m	namespace:ProfileKeys	file:
Compile	Screen/OpenGL/Program.hpp	/^  void Compile() {$/;"	f	class:GLShader
CompileAttachShader	Screen/OpenGL/Shaders.cpp	/^CompileAttachShader(GLProgram &program, GLenum type, const char *code)$/;"	f	file:
CompileProgram	Screen/OpenGL/Shaders.cpp	/^CompileProgram(const char *vertex_shader, const char *fragment_shader)$/;"	f	file:
Complement	FLARM/Data.hpp	/^  void Complement(const FlarmData &add) {$/;"	f	struct:FlarmData
Complement	FLARM/Error.hpp	/^  void Complement(const FlarmError &add) {$/;"	f
Complement	FLARM/List.hpp	/^  void Complement(const TrafficList &add) {$/;"	f	struct:TrafficList
Complement	FLARM/Status.hpp	/^  void Complement(const FlarmStatus &add) {$/;"	f	struct:FlarmStatus
Complement	FLARM/Version.hpp	/^  void Complement(const FlarmVersion &add) {$/;"	f	struct:FlarmVersion
Complement	GliderLink/GliderLinkData.hpp	/^  void Complement(const GliderLinkData &add) {$/;"	f	struct:GliderLinkData
Complement	GliderLink/List.hpp	/^  void Complement(const GliderLinkTrafficList &add) {$/;"	f	struct:GliderLinkTrafficList
Complement	NMEA/Acceleration.cpp	/^AccelerationState::Complement(const AccelerationState &add)$/;"	f	class:AccelerationState
Complement	NMEA/Attitude.cpp	/^AttitudeState::Complement(const AttitudeState &add)$/;"	f	class:AttitudeState
Complement	NMEA/ExternalSettings.cpp	/^ExternalSettings::Complement(const ExternalSettings &add)$/;"	f	class:ExternalSettings
Complement	NMEA/Info.cpp	/^NMEAInfo::Complement(const NMEAInfo &add)$/;"	f	class:NMEAInfo
Complement	NMEA/SwitchState.cpp	/^SwitchState::Complement(const SwitchState &add)$/;"	f	class:SwitchState
Complement	NMEA/Validity.hpp	/^  bool Complement(const Validity &other) {$/;"	f	class:Validity
Complement	NMEA/VegaSwitchState.hpp	/^  void Complement(const VegaSwitchState &add) {$/;"	f	struct:VegaSwitchState
Component	Screen/OpenGL/Color.hpp	/^  typedef GLfixed Component;$/;"	t	class:Color
ComposeWrite	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::ComposeWrite(const char p_type,PolarCoefficients &p,$/;"	f	class:OpenVarioDevice
CompositingFilter	Topography/shapelib/mapserver.h	/^  } CompositingFilter;$/;"	t	typeref:struct:_CompositingFilter
CompositingOperation	Topography/shapelib/mapserver.h	/^  } CompositingOperation;$/;"	t	typeref:enum:__anon27
Compress	PageSettings.cpp	/^PageSettings::Compress()$/;"	f	class:PageSettings
Compute	Computer/AverageVarioComputer.cpp	/^AverageVarioComputer::Compute(const MoreData &basic,$/;"	f	class:AverageVarioComputer
Compute	Computer/BasicComputer.cpp	/^BasicComputer::Compute(MoreData &data,$/;"	f	class:BasicComputer
Compute	Computer/CuComputer.cpp	/^CuComputer::Compute(const NMEAInfo &basic, const DerivedInfo &calculated,$/;"	f	class:CuComputer
Compute	Computer/FlyingComputer.cpp	/^FlyingComputer::Compute(double takeoff_speed,$/;"	f	class:FlyingComputer
Compute	Computer/GlideRatioComputer.cpp	/^GlideRatioComputer::Compute(const MoreData &basic,$/;"	f	class:GlideRatioComputer
Compute	Computer/GroundSpeedComputer.cpp	/^GroundSpeedComputer::Compute(NMEAInfo &basic)$/;"	f	class:GroundSpeedComputer
Compute	Computer/LiftDatabaseComputer.cpp	/^LiftDatabaseComputer::Compute(LiftDatabase &lift_database,$/;"	f	class:LiftDatabaseComputer
Compute	Computer/ThermalBandComputer.cpp	/^ThermalBandComputer::Compute(const MoreData &basic,$/;"	f	class:ThermalBandComputer
Compute	Computer/WaveComputer.cpp	/^WaveComputer::Compute(const NMEAInfo &basic,$/;"	f	class:WaveComputer
Compute	Computer/Wind/Computer.cpp	/^WindComputer::Compute(const WindSettings &settings,$/;"	f	class:WindComputer
Compute	Engine/Task/Computer/IncrementalSpeedComputer.cpp	/^IncrementalSpeedComputer::Compute(DistanceStat &data, const double time)$/;"	f	class:IncrementalSpeedComputer
Compute	Engine/Task/Computer/WindowStatsComputer.cpp	/^WindowStatsComputer::Compute(double time, const TaskStats &task_stats,$/;"	f	class:WindowStatsComputer
Compute	Math/LeastSquares.cpp	/^LeastSquares::Compute()$/;"	f	class:LeastSquares
ComputeAirspeed	Computer/BasicComputer.cpp	/^ComputeAirspeed(NMEAInfo &basic, const DerivedInfo &calculated)$/;"	f	file:
ComputeBruttoVario	Computer/BasicComputer.cpp	/^ComputeBruttoVario(MoreData &basic)$/;"	f	file:
ComputeDynamics	Computer/BasicComputer.cpp	/^ComputeDynamics(MoreData &basic, const DerivedInfo &calculated)$/;"	f	file:
ComputeEnergyHeight	Computer/BasicComputer.cpp	/^ComputeEnergyHeight(MoreData &basic)$/;"	f	file:
ComputeFlarmTeam	Computer/GlideComputer.cpp	/^ComputeFlarmTeam(const GeoPoint &location, const GeoPoint &reference_location,$/;"	f	file:
ComputeGPSVario	Computer/BasicComputer.cpp	/^ComputeGPSVario(MoreData &basic,$/;"	f	file:
ComputeHeadWind	Computer/Wind/Computer.cpp	/^WindComputer::ComputeHeadWind(const NMEAInfo &basic, DerivedInfo &info)$/;"	f	class:WindComputer
ComputeHeading	Computer/BasicComputer.cpp	/^ComputeHeading(AttitudeState &attitude, const NMEAInfo &basic,$/;"	f	file:
ComputeNavAltitude	Computer/BasicComputer.cpp	/^ComputeNavAltitude(MoreData &basic, const FeaturesSettings &features)$/;"	f	file:
ComputeNettoVario	Computer/BasicComputer.cpp	/^ComputeNettoVario(MoreData &basic, const VarioInfo &vario)$/;"	f	file:
ComputeNoncompVario	Android/BMP085Device.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputeNoncompVario	Android/I2CbaroDevice.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputeNoncompVario	Android/InternalSensors.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputeNoncompVario	Device/Driver/BlueFly/Parser.cpp	/^ComputeNoncompVario(const double pressure, const double d_pressure)$/;"	f	file:
ComputePressure	Computer/BasicComputer.cpp	/^ComputePressure(NMEAInfo &basic, const AtmosphericPressure qnh)$/;"	f	file:
ComputeTeamCode	Computer/GlideComputer.cpp	/^ComputeTeamCode(const GeoPoint &location, const GeoPoint &reference_location,$/;"	f	file:
ComputeTrack	Computer/BasicComputer.cpp	/^ComputeTrack(NMEAInfo &basic, const NMEAInfo &last)$/;"	f	file:
ComputeWindow	Engine/Task/Computer/TaskStatsComputer.cpp	/^TaskStatsComputer::ComputeWindow(double time, TaskStats &data)$/;"	f	class:TaskStatsComputer
ComputerSettings	Computer/Settings.hpp	/^struct ComputerSettings {$/;"	s
ComputerSettingsBlackboard	Blackboard/ComputerSettingsBlackboard.hpp	/^class ComputerSettingsBlackboard$/;"	c
Cond	Thread/Cond.hxx	/^class Cond : public WindowsCond {};$/;"	c
ConditionMonitor	Computer/ConditionMonitor/ConditionMonitor.hpp	/^  constexpr ConditionMonitor(unsigned _interval_notification,$/;"	f	class:ConditionMonitor
ConditionMonitor	Computer/ConditionMonitor/ConditionMonitor.hpp	/^class ConditionMonitor$/;"	c
ConditionMonitorAATTime	Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^  constexpr ConditionMonitorAATTime():ConditionMonitor(60 * 15, 10) {}$/;"	f	class:final
ConditionMonitorFinalGlide	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  constexpr ConditionMonitorFinalGlide()$/;"	f	class:final
ConditionMonitorGlideTerrain	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^  constexpr ConditionMonitorGlideTerrain():ConditionMonitor(60 * 5, 1) {}$/;"	f	class:final
ConditionMonitorLandableReachable	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  constexpr ConditionMonitorLandableReachable()$/;"	f	class:final
ConditionMonitorSunset	Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^  constexpr ConditionMonitorSunset():ConditionMonitor(60 * 30, 60) {}$/;"	f	class:final
ConditionMonitorWind	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  constexpr ConditionMonitorWind()$/;"	f	class:final
ConditionMonitorsUpdate	Computer/ConditionMonitor/ConditionMonitors.cpp	/^ConditionMonitorsUpdate(const NMEAInfo &basic, const DerivedInfo &calculated,$/;"	f
ConditionalWritePixel	Screen/Memory/PixelOperations.hpp	/^  ConditionalWritePixel(C &&c, O &&o)$/;"	f	struct:ConditionalWritePixel
ConditionalWritePixel	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr ConditionalWritePixel(Args&&... args)$/;"	f	struct:ConditionalWritePixel
ConditionalWritePixel	Screen/Memory/PixelOperations.hpp	/^struct ConditionalWritePixel : private Check, private Operation {$/;"	s
CondorCreateOnPort	Device/Driver/Condor.cpp	/^CondorCreateOnPort(const DeviceConfig &config, gcc_unused Port &com_port)$/;"	f	file:
CondorDevice	Device/Driver/Condor.cpp	/^class CondorDevice : public AbstractDevice {$/;"	c	file:
ConfigPanel	Dialogs/Settings/Panels/ConfigPanel.hpp	/^namespace ConfigPanel {$/;"	n
ConfigurationExtraButtons	Dialogs/Settings/dlgConfiguration.cpp	/^  ConfigurationExtraButtons(const DialogLook &_look)$/;"	f	class:final
Configure	Audio/VarioGlue.cpp	/^AudioVarioGlue::Configure(const VarioSoundSettings &settings)$/;"	f	class:AudioVarioGlue
Configure	Screen/OpenGL/Texture.cpp	/^GLTexture::Configure()$/;"	f	class:GLTexture
Configure	Topography/ShapeRenderer.hpp	/^  void Configure(const Pen *_pen, const Brush *_brush) {$/;"	f	class:ShapeRenderer
ConfirmDeleteProfile	Dialogs/ProfileListDialog.cpp	/^ConfirmDeleteProfile(const TCHAR *name)$/;"	f	file:
Connect	Device/Driver/IMI/Internal.cpp	/^IMIDevice::Connect(OperationEnvironment &env)$/;"	f	class:IMIDevice
Connect	Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::Connect(Port &port, OperationEnvironment &env)$/;"	f	class:IMI
Connect	Device/Driver/LX/Protocol.hpp	/^  Connect(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX
Connect	Device/Driver/LXERA/Protocol.hpp	/^  Connect(Port &port, OperationEnvironment &env,$/;"	f	namespace:LXEra
Connect	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::Connect(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
Connect	Device/Port/TCPClientPort.cpp	/^TCPClientPort::Connect(const char *host, unsigned port)$/;"	f	class:TCPClientPort
Connect	Kobo/WPASupplicant.cpp	/^WPASupplicant::Connect(const char *path)$/;"	f	class:WPASupplicant
Connect	Kobo/WifiDialog.cpp	/^WifiListWidget::Connect()$/;"	f	class:WifiListWidget
ConnectAndFlush	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::ConnectAndFlush(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
ConnectionProcessTimer	ProcessTimer.cpp	/^ConnectionProcessTimer()$/;"	f	file:
ConsoleOperationEnvironment	Operation/ConsoleOperationEnvironment.hpp	/^class ConsoleOperationEnvironment : public QuietOperationEnvironment {$/;"	c
ConstBuffer	Util/ConstBuffer.hxx	/^struct ConstBuffer {$/;"	s
ConstBuffer	Util/ConstBuffer.hxx	/^struct ConstBuffer<void> {$/;"	s
ConstDataNode	XML/DataNode.hpp	/^class ConstDataNode {$/;"	c
ConstDataNodeXML	XML/DataNodeXML.hpp	/^  explicit ConstDataNodeXML(const XMLNode &_node)$/;"	f	class:final
ConstImageBuffer	Screen/Memory/Buffer.hpp	/^  constexpr ConstImageBuffer(WritableImageBuffer<PixelTraits> other)$/;"	f	struct:ConstImageBuffer
ConstImageBuffer	Screen/Memory/Buffer.hpp	/^  constexpr ConstImageBuffer(rpointer _data, unsigned _pitch,$/;"	f	struct:ConstImageBuffer
ConstImageBuffer	Screen/Memory/Buffer.hpp	/^struct ConstImageBuffer {$/;"	s
ConstTaskPointList	Engine/Task/Ordered/OrderedTask.hpp	/^                                      const OrderedTaskPoint> ConstTaskPointList;$/;"	t	class:final
Construct	Net/IPv4Address.hxx	/^		:IPv4Address(Construct(_address, port)) {}$/;"	f	class:IPv4Address
Construct	Net/IPv6Address.hxx	/^		:address(Construct(_address, port, scope_id)) {}$/;"	f	class:IPv6Address
Construct	Util/Cache.hxx	/^		void Construct(K &&_key, U &&value) {$/;"	f	class:Cache::Item
Construct	Util/Manual.hxx	/^	void Construct(Args&&... args) {$/;"	f	class:Manual
ContainerAttributeOffset	Util/Cast.hxx	/^ContainerAttributeOffset(const A C::*p)$/;"	f
ContainerAttributeOffset	Util/Cast.hxx	/^ContainerAttributeOffset(const C *null_c, const A C::*p)$/;"	f
ContainerAttributeOffset	Util/ContainerCast.hxx	/^ContainerAttributeOffset(const A C::*p)$/;"	f
ContainerAttributeOffset	Util/ContainerCast.hxx	/^ContainerAttributeOffset(const C *null_c, const A C::*p)$/;"	f
ContainerCast	Util/Cast.hxx	/^ContainerCast(A &a, const A C::*member)$/;"	f
ContainerCast	Util/Cast.hxx	/^ContainerCast(const A &a, const A C::*member)$/;"	f
ContainerCast	Util/ContainerCast.hxx	/^ContainerCast(A &a, A C::*member)$/;"	f
ContainerCast	Util/ContainerCast.hxx	/^ContainerCast(const A &a, A C::*member)$/;"	f
ContainerWidget	Widget/ContainerWidget.hpp	/^class ContainerWidget : public WindowWidget {$/;"	c
ContainerWindow	Screen/ContainerWindow.hpp	/^class ContainerWindow : public PaintWindow {$/;"	c
Contains	MapWindow/Items/AirspaceBuilder.cpp	/^  bool Contains(const AbstractAirspace& as) const {$/;"	f	class:AirspaceWarningList
Contains	Math/Line2D.hpp	/^  constexpr bool Contains(Point p) const {$/;"	f	struct:Line2D
Contains	Screen/Custom/WList.cpp	/^WindowList::Contains(const Window &w) const$/;"	f	class:WindowList
Contains	Util/EnumBitSet.hpp	/^  constexpr bool Contains(E e) const {$/;"	f	class:EnumBitSet
Contains	Util/StaticString.hxx	/^	bool Contains(const_pointer needle) const {$/;"	f	class:StaticStringBase
ContentString	Weather/METAR.hpp	/^  typedef StaticString<1024> ContentString;$/;"	t	struct:METAR
ContentString	Weather/TAF.hpp	/^  typedef StaticString<1024> ContentString;$/;"	t	struct:TAF
Contest	Engine/Contest/Settings.hpp	/^enum class Contest : uint8_t {$/;"	c
ContestClass	Device/Driver/LX/Protocol.hpp	/^  struct ContestClass {$/;"	s	namespace:LX
ContestClass	Device/Driver/LXERA/Protocol.hpp	/^  struct ContestClass {$/;"	s	namespace:LXEra
ContestComputer	Computer/ContestComputer.cpp	/^ContestComputer::ContestComputer(const Trace &trace_full,$/;"	f	class:ContestComputer
ContestComputer	Computer/ContestComputer.hpp	/^class ContestComputer {$/;"	c
ContestDijkstra	Engine/Contest/Solvers/ContestDijkstra.hpp	/^class ContestDijkstra : public AbstractContest, protected NavDijkstra, public TraceManager {$/;"	c
ContestDijkstra	Engine/Contest/Solvers/DMStQuad.cpp	/^  :ContestDijkstra(_trace, true, 4, 1000) {}$/;"	f
ContestDijkstra	Engine/Contest/Solvers/NetCoupe.cpp	/^  :ContestDijkstra(_trace, true, 4, 1000) {}$/;"	f
ContestDijkstra	Engine/Contest/Solvers/OLCClassic.cpp	/^  :ContestDijkstra(_trace, true, 6, 1000) {}$/;"	f
ContestDijkstra	Engine/Contest/Solvers/OLCSISAT.cpp	/^  :ContestDijkstra(_trace, true, 6, 1000) {}$/;"	f
ContestDijkstra	Engine/Contest/Solvers/OLCSprint.cpp	/^  :ContestDijkstra(_trace, false, 4, 0) {}$/;"	f
ContestManager	Engine/Contest/ContestManager.cpp	/^ContestManager::ContestManager(const Contest _contest,$/;"	f	class:ContestManager
ContestManager	Engine/Contest/ContestManager.hpp	/^class ContestManager$/;"	c
ContestResult	Engine/Contest/ContestResult.hpp	/^struct ContestResult$/;"	s
ContestSettings	Engine/Contest/Settings.hpp	/^struct ContestSettings {$/;"	s
ContestStatistics	Engine/Contest/ContestStatistics.hpp	/^struct ContestStatistics$/;"	s
ContestTracePoint	Engine/Contest/ContestTrace.hpp	/^struct ContestTracePoint {$/;"	s
ContestTraceVector	Engine/Contest/ContestTrace.hpp	/^class ContestTraceVector : public TrivialArray<ContestTracePoint, 10> {};$/;"	c
Contests	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  Contests,$/;"	e	enum:ControlIndex	file:
Context	Android/Context.hpp	/^  Context(JNIEnv *env, jobject obj):Java::GlobalObject(env, obj) {$/;"	f	class:Context
Context	Android/Context.hpp	/^class Context : public Java::GlobalObject {$/;"	c
Context	Device/Driver/LX/Convert.cpp	/^  Context()$/;"	f	struct:Context
Context	Device/Driver/LX/Convert.cpp	/^struct Context {$/;"	s	file:
ContourInterval	Terrain/RasterRenderer.cpp	/^ContourInterval(const TerrainHeight h, const unsigned contour_height_scale)$/;"	f	file:
ContourInterval	Terrain/RasterRenderer.cpp	/^ContourInterval(const unsigned h, const unsigned contour_height_scale)$/;"	f	file:
ContourStart	Terrain/RasterRenderer.cpp	/^RasterRenderer::ContourStart(const unsigned contour_height_scale)$/;"	f	class:RasterRenderer
Contours	Terrain/TerrainSettings.hpp	/^enum class Contours: uint8_t {$/;"	c
ContractLocalPath	LocalPath.cpp	/^ContractLocalPath(Path src)$/;"	f
ControlIndex	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  enum ControlIndex {$/;"	g	class:AirspaceClassRendererSettingsPanel
ControlIndex	Dialogs/Device/DeviceEditWidget.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/MapItemListSettingsPanel.hpp	/^  enum ControlIndex {$/;"	g	class:final
ControlIndex	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^enum ControlIndex {$/;"	g	file:
ControlIndex	Dialogs/Settings/WindSettingsPanel.hpp	/^  enum ControlIndex {$/;"	g	class:final
ControlIndex	Dialogs/Settings/dlgBasicSettings.cpp	/^enum ControlIndex {$/;"	g	file:
Controls	Dialogs/Airspace/AirspaceList.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Device/CAI302/UnitsEditor.hpp	/^  enum Controls {$/;"	g	class:final
Controls	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  enum Controls {$/;"	g	class:final
Controls	Dialogs/Device/LX/ManageNanoDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Device/LX/NanoConfigWidget.hpp	/^  enum Controls {$/;"	g	class:final
Controls	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  enum Controls {$/;"	g	class:final
Controls	Dialogs/Device/ManageCAI302Dialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Device/ManageFlarmDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  enum Controls {$/;"	g	class:SwitchesLeft	file:
Controls	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  enum Controls {$/;"	g	class:SwitchesRight	file:
Controls	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Plane/PlanePolarDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/ReplayDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/StartupDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  enum Controls {$/;"	g	class:TaskActionsPanel
Controls	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Traffic/TeamCodeDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	Dialogs/Traffic/TrafficList.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Waypoint/WaypointList.cpp	/^enum Controls {$/;"	g	file:
Controls	Dialogs/Weather/RASPDialog.cpp	/^  enum Controls {$/;"	g	class:final	file:
Controls	InfoBoxes/Panel/ATCReference.cpp	/^enum Controls {$/;"	g	file:
ConvertABGRToARGB	Android/NativeView.cpp	/^ConvertABGRToARGB(UncompressedImage &image)$/;"	f	file:
ConvertACPToWide	Util/ConvertString.cpp	/^ConvertACPToWide(const char *p)$/;"	f
ConvertBaudRate	Device/Driver/CAI302/Protocol.cpp	/^ConvertBaudRate(unsigned baud_rate)$/;"	f	file:
ConvertBearingToTeamCode	TeamCode/TeamCode.cpp	/^ConvertBearingToTeamCode(const Angle bearing, TCHAR *code)$/;"	f	file:
ConvertColorType	Screen/Custom/LibPNG.cpp	/^ConvertColorType(int color_type)$/;"	f	file:
ConvertDirectoryToRecordedFlightList	Device/Driver/Volkslogger/Logger.cpp	/^ConvertDirectoryToRecordedFlightList(const std::vector<DIRENTRY> &dir,$/;"	f	file:
ConvertFromWide	Util/ConvertString.cpp	/^ConvertFromWide(const TCHAR *p, UINT codepage)$/;"	f	file:
ConvertImage	Screen/Memory/UncompressedImage.hpp	/^ConvertImage(WritableImageBuffer<PixelTraits> buffer,$/;"	f
ConvertLXNToIGC	Device/Driver/LX/Convert.cpp	/^LX::ConvertLXNToIGC(const void *_data, size_t _length,$/;"	f	class:LX
ConvertLine	Screen/Memory/UncompressedImage.hpp	/^ConvertLine(typename PixelTraits::rpointer dest, Reader src, unsigned n)$/;"	f
ConvertLineReader	IO/ConvertLineReader.cpp	/^ConvertLineReader::ConvertLineReader(std::unique_ptr<LineReader<char>> &&_source,$/;"	f	class:ConvertLineReader
ConvertLineReader	IO/ConvertLineReader.hpp	/^class ConvertLineReader : public TLineReader {$/;"	c
ConvertMono	Screen/FreeType/Font.cpp	/^ConvertMono(FT_Bitmap &dest, const FT_Bitmap &src)$/;"	f	file:
ConvertMono	Screen/FreeType/Font.cpp	/^ConvertMono(unsigned char *dest, const unsigned char *src, unsigned n)$/;"	f	file:
ConvertOZ	Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertOZ(const Declaration::TurnPoint &tp, bool is_start, bool is_finish,$/;"	f	class:IMI
ConvertRect	Topography/Convert.hpp	/^ConvertRect(const GeoBounds &br)$/;"	f
ConvertToChar	Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertToChar(const TCHAR* unicode, char* ascii, int outSize)$/;"	f	class:IMI
ConvertToDateTime	Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertToDateTime(IMI::IMIDATETIMESEC in)$/;"	f	class:IMI
ConvertToWide	Util/ConvertString.cpp	/^ConvertToWide(const char *p, UINT codepage)$/;"	f	file:
ConvertUTF8ToWide	Util/ConvertString.cpp	/^ConvertUTF8ToWide(const char *p)$/;"	f
ConvertWaypoint	Device/Driver/IMI/Protocol/Conversion.cpp	/^IMI::ConvertWaypoint(const Waypoint &wp, TWaypoint &imiWp)$/;"	f	class:IMI
ConvertWideToACP	Util/ConvertString.cpp	/^ConvertWideToACP(const TCHAR *p)$/;"	f
ConvertWideToUTF8	Util/ConvertString.cpp	/^ConvertWideToUTF8(const TCHAR *p)$/;"	f
ConvexFilter	Math/ConvexFilter.hpp	/^class ConvexFilter: public LeastSquares$/;"	c
CoordinateFormat	Form/DigitEntry.hpp	/^enum class CoordinateFormat : uint8_t;$/;"	c
CoordinateFormat	Geo/CoordinateFormat.hpp	/^enum class CoordinateFormat: uint8_t {$/;"	c
Copy	Device/Driver/CAI302/Logger.cpp	/^Copy(BrokenDate &dest, const CAI302::DateTime &src)$/;"	f	file:
Copy	Device/Driver/CAI302/Logger.cpp	/^Copy(BrokenTime &dest, const CAI302::DateTime &src)$/;"	f	file:
Copy	Device/Driver/CAI302/Logger.cpp	/^Copy(RecordedFlightInfo &dest, unsigned index,$/;"	f	file:
Copy	Device/Driver/LX/Logger.cpp	/^Copy(RecordedFlightInfo &dest, const LX::FlightInfo &src)$/;"	f	file:
Copy	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::Copy(PolarCoefficients &dest, const PolarCoefficients &src)$/;"	f	class:OpenVarioDevice
Copy	Engine/Task/AbstractTask.cpp	/^Copy(DistanceStat &stat, const GlideResult &solution)$/;"	f	file:
Copy	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Copy(const ThermalBand& o)$/;"	f	class:ThermalBand
Copy	Kobo/Kernel.cpp	/^Copy(int out_fd, int in_fd, const char *out_path, const char *in_path)$/;"	f	file:
Copy	Screen/GDI/Canvas.cpp	/^Canvas::Copy(const Bitmap &src)$/;"	f	class:Canvas
Copy	Screen/GDI/Canvas.cpp	/^Canvas::Copy(const Canvas &src)$/;"	f	class:Canvas
Copy	Screen/GDI/Canvas.cpp	/^Canvas::Copy(const Canvas &src, int src_x, int src_y)$/;"	f	class:Canvas
Copy	Screen/GDI/Canvas.cpp	/^Canvas::Copy(int dest_x, int dest_y,$/;"	f	class:Canvas
Copy	Screen/GDI/Canvas.hpp	/^  void Copy(int dest_x, int dest_y, unsigned dest_width, unsigned dest_height,$/;"	f	class:Canvas
Copy	Screen/Memory/Canvas.cpp	/^Canvas::Copy(const Bitmap &_src)$/;"	f	class:Canvas
Copy	Screen/Memory/Canvas.cpp	/^Canvas::Copy(const Canvas &src)$/;"	f	class:Canvas
Copy	Screen/Memory/Canvas.cpp	/^Canvas::Copy(const Canvas &src, int src_x, int src_y)$/;"	f	class:Canvas
Copy	Screen/Memory/Canvas.cpp	/^Canvas::Copy(int dest_x, int dest_y,$/;"	f	class:Canvas
Copy	Screen/Memory/Canvas.hpp	/^  void Copy(int dest_x, int dest_y, ConstImageBuffer src) {$/;"	f	class:Canvas
Copy	Screen/Memory/Canvas.hpp	/^  void Copy(int dest_x, int dest_y, unsigned dest_width, unsigned dest_height,$/;"	f	class:Canvas
Copy	Screen/OpenGL/Canvas.cpp	/^Canvas::Copy(const Bitmap &src)$/;"	f	class:Canvas
Copy	Screen/OpenGL/Canvas.cpp	/^Canvas::Copy(int dest_x, int dest_y,$/;"	f	class:Canvas
Copy16	Screen/Memory/NEON.hpp	/^  static void Copy16(uint8_t *gcc_restrict p, const uint8_t *gcc_restrict q) {$/;"	f	struct:NEONBytesTwice
CopyASCII	Util/ASCII.cxx	/^CopyASCII(char *dest, const char *src)$/;"	f
CopyASCII	Util/ASCII.cxx	/^CopyASCII(char *dest, size_t dest_size, const char *src, const char *src_end)$/;"	f
CopyASCII	Util/WASCII.cxx	/^CopyASCII(char *dest, size_t dest_size, const wchar_t *src, const wchar_t *src_end)$/;"	f
CopyASCII	Util/WASCII.cxx	/^CopyASCII(wchar_t *dest, const char *src)$/;"	f
CopyASCII	Util/WASCII.cxx	/^CopyASCII(wchar_t *dest, const wchar_t *src)$/;"	f
CopyASCII	Util/WASCII.cxx	/^CopyASCII(wchar_t *dest, size_t dest_size, const char *src, const char *src_end)$/;"	f
CopyASCII	Util/WASCII.cxx	/^CopyASCII(wchar_t *dest, size_t dest_size,$/;"	f
CopyASCIIUpper	Util/ASCII.cxx	/^CopyASCIIUpper(char *dest, const char *src)$/;"	f
CopyASCIIUpper	Util/WASCII.cxx	/^CopyASCIIUpper(char *dest, const wchar_t *src)$/;"	f
CopyAnd	Screen/GDI/Canvas.hpp	/^  void CopyAnd(const Canvas &src) {$/;"	f	class:Canvas
CopyAnd	Screen/GDI/Canvas.hpp	/^  void CopyAnd(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyAnd	Screen/Memory/Canvas.cpp	/^Canvas::CopyAnd(const Bitmap &src)$/;"	f	class:Canvas
CopyAnd	Screen/Memory/Canvas.cpp	/^Canvas::CopyAnd(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyAnd	Screen/Memory/Canvas.hpp	/^  void CopyAnd(const Canvas &src) {$/;"	f	class:Canvas
CopyAnd	Screen/Memory/Canvas.hpp	/^  void CopyAnd(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyAndTo	Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::CopyAndTo(Canvas &canvas,$/;"	f	class:TransparentRendererCache
CopyAndTo	Renderer/TransparentRendererCache.hpp	/^  void CopyAndTo(Canvas &canvas) const {$/;"	f	class:TransparentRendererCache
CopyCleanFlarmString	Device/Driver/FLARM/TextProtocol.cpp	/^CopyCleanFlarmString(char *gcc_restrict dest, const char *gcc_restrict src)$/;"	f
CopyClicked	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::CopyClicked()$/;"	f	class:ProfileListWidget
CopyFrom	Device/Driver/Vega/Volatile.cpp	/^Vega::VolatileData::CopyFrom(const DerivedInfo &calculated)$/;"	f	class:Vega::VolatileData
CopyFrom	Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DATABASE::CopyFrom(const DBB &dbb)$/;"	f	class:VLAPI_DATA::DATABASE
CopyFrom	Terrain/RasterTile.cpp	/^RasterTile::CopyFrom(const struct jas_matrix &m)$/;"	f	class:RasterTile
CopyFromBGRA	Screen/Memory/Export.cpp	/^CopyFromBGRA(void *_dest_pixels, unsigned _dest_pitch, unsigned dest_bpp,$/;"	f
CopyFromGreyscale	Screen/Memory/Export.cpp	/^CopyFromGreyscale($/;"	f
CopyFromGreyscale	Screen/SDL/TopCanvas.cpp	/^CopyFromGreyscale($/;"	f	file:
CopyGreyscale	Screen/Memory/Export.cpp	/^CopyGreyscale(uint8_t *dest_pixels, unsigned dest_pitch,$/;"	f	file:
CopyGreyscaleToRGB565	Screen/Memory/Export.hpp	/^CopyGreyscaleToRGB565(RGB565Color *gcc_restrict dest,$/;"	f
CopyGreyscaleToRGB8	Screen/Memory/Export.hpp	/^CopyGreyscaleToRGB8(uint32_t *gcc_restrict dest,$/;"	f
CopyIGCString	IGC/IGCString.cpp	/^CopyIGCString(char *dest, char *dest_limit, const TCHAR *src)$/;"	f
CopyIGCString	IGC/IGCString.cpp	/^CopyIGCString(char *dest, char *dest_limit, const char *src)$/;"	f
CopyList	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::CopyList()$/;"	f	class:AirspaceWarningListWidget
CopyNot	Screen/GDI/Canvas.hpp	/^  void CopyNot(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyNot	Screen/Memory/Canvas.cpp	/^Canvas::CopyNot(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyNotOr	Screen/GDI/Canvas.hpp	/^  void CopyNotOr(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyNotOr	Screen/Memory/Canvas.cpp	/^Canvas::CopyNotOr(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyOr	Screen/GDI/Canvas.hpp	/^  void CopyOr(const Canvas &src) {$/;"	f	class:Canvas
CopyOr	Screen/GDI/Canvas.hpp	/^  void CopyOr(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyOr	Screen/Memory/Canvas.cpp	/^Canvas::CopyOr(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyOr	Screen/Memory/Canvas.hpp	/^  void CopyOr(const Bitmap &src) {$/;"	f	class:Canvas
CopyOr	Screen/Memory/Canvas.hpp	/^  void CopyOr(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyOverviewRow	Terrain/RasterTileCache.cpp	/^CopyOverviewRow(TerrainHeight *gcc_restrict dest, const jas_seqent_t *gcc_restrict src,$/;"	f	file:
CopyPaddedUpper	Device/Driver/Volkslogger/Util.cpp	/^CopyPaddedUpper(char *dest, size_t size, const char *src)$/;"	f
CopyPixels	Screen/Memory/MMX.hpp	/^  void CopyPixels(BGRA8Color *p, const BGRA8Color *q, unsigned n) const {$/;"	f	class:MMXAlphaPixelOperations
CopyPixels	Screen/Memory/MMX.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:MMXAlphaPixelOperations
CopyPixels	Screen/Memory/MMX.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:MMXAlphaPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:NEONAlphaPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:NEONBitOrPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	class:NEONTransparentPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(Luminosity8 *p, const Luminosity8 *q, unsigned n) const {$/;"	f	struct:NEONBytesTwice
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:NEONAlphaPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:NEONBitOrPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	class:NEONTransparentPixelOperations
CopyPixels	Screen/Memory/NEON.hpp	/^  void CopyPixels(uint8_t *gcc_restrict p,$/;"	f	struct:NEONBytesTwice
CopyPixels	Screen/Memory/Optimised.hpp	/^  void CopyPixels(rpointer p, const_rpointer q, unsigned n) const {$/;"	f	class:SelectOptimisedPixelOperations
CopyPixels	Screen/Memory/PixelOperations.hpp	/^  void CopyPixels(rpointer p, source_const_rpointer src,$/;"	f	struct:PerPixelOperations
CopyPixels	Screen/Memory/PixelTraits.hpp	/^  static void CopyPixels(rpointer p, const_rpointer src,$/;"	f	struct:GreyscalePixelTraits
CopyPixels	Screen/Memory/PixelTraits.hpp	/^  static void CopyPixels(rpointer p,$/;"	f	struct:BGRAPixelTraits
CopyRectangle	Screen/Memory/RasterCanvas.hpp	/^  void CopyRectangle(int x, int y, unsigned w, unsigned h,$/;"	f	class:RasterCanvas
CopyString	Util/StringUtil.cpp	/^CopyString(char *gcc_restrict dest, const char *gcc_restrict src, size_t size)$/;"	f
CopyString	Util/WStringUtil.cpp	/^CopyString(wchar_t *gcc_restrict dest, const wchar_t *gcc_restrict src,$/;"	f
CopyTerminatedUpper	Device/Driver/Volkslogger/Util.cpp	/^CopyTerminatedUpper(char *dest, const char *src, size_t size)$/;"	f
CopyTextRectangle	Screen/Memory/Canvas.cpp	/^CopyTextRectangle(SDLRasterCanvas &canvas, int x, int y,$/;"	f	file:
CopyTo	Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DATABASE::CopyTo(DBB &dbb) const$/;"	f	class:VLAPI_DATA::DATABASE
CopyTo	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::CopyTo(Canvas &other)$/;"	f	class:BufferCanvas
CopyTo	Util/EnumBitSet.hpp	/^  void CopyTo(O o) const {$/;"	f	class:EnumBitSet
CopyToArray	OS/Process.hpp	/^CopyToArray(const char **dest)$/;"	f
CopyToArray	OS/Process.hpp	/^CopyToArray(const char **dest, const char *src, Args... args)$/;"	f
CopyToNarrowBuffer	Device/Driver/Volkslogger/Declare.cpp	/^CopyToNarrowBuffer(char *dest, size_t max_size, const TCHAR *src)$/;"	f	file:
CopyToTexture	Screen/OpenGL/Canvas.cpp	/^Canvas::CopyToTexture(GLTexture &texture, PixelRect src_rc) const$/;"	f	class:Canvas
CopyTransparentWhite	Screen/GDI/Canvas.cpp	/^Canvas::CopyTransparentWhite(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyTransparentWhite	Screen/Memory/Canvas.cpp	/^Canvas::CopyTransparentWhite(int dest_x, int dest_y,$/;"	f	class:Canvas
CopyTransparentWhiteTo	Renderer/TransparentRendererCache.cpp	/^TransparentRendererCache::CopyTransparentWhiteTo(Canvas &canvas,$/;"	f	class:TransparentRendererCache
CopyTransparentWhiteTo	Renderer/TransparentRendererCache.hpp	/^  void CopyTransparentWhiteTo(Canvas &canvas) const {$/;"	f	class:TransparentRendererCache
CopyTruncateString	Util/TruncateString.cpp	/^CopyTruncateString(TCHAR *dest, size_t dest_size, const TCHAR *src)$/;"	f
CopyTruncateString	Util/TruncateString.cpp	/^CopyTruncateString(TCHAR *dest, size_t dest_size,$/;"	f
CopyTruncateString	Util/TruncateString.cpp	/^CopyTruncateString(char *dest, size_t dest_size, const char *src)$/;"	f
CopyTurnPoint	Device/Driver/Volkslogger/Declare.cpp	/^CopyTurnPoint(VLAPI_DATA::DCLWPT &dest, const Declaration::TurnPoint &src)$/;"	f	file:
CopyUTF8	Util/StaticString.cxx	/^CopyUTF8(char *dest, size_t dest_size, const char *src)$/;"	f
CopyUTF8	Util/StaticString.cxx	/^CopyUTF8(wchar_t *dest, size_t dest_size, const char *src)$/;"	f
CopyUpper	Device/Driver/Volkslogger/Util.cpp	/^CopyUpper(char *dest, const char *src, const char *end)$/;"	f	file:
CopyWaypoint	Device/Driver/Volkslogger/Declare.cpp	/^CopyWaypoint(VLAPI_DATA::WPT &dest, const Waypoint &src)$/;"	f	file:
CorrectedWidth	Screen/GDI/RawBitmap.cpp	/^CorrectedWidth(unsigned nWidth)$/;"	f	file:
CorrectedWidth	Screen/Memory/RawBitmap.cpp	/^CorrectedWidth(unsigned nWidth)$/;"	f	file:
CorrectedWidth	Screen/OpenGL/RawBitmap.cpp	/^CorrectedWidth(unsigned nWidth)$/;"	f	file:
Count	Form/DataField/Enum.hpp	/^  unsigned Count() const {$/;"	f	class:final
Count	Polar/PolarStore.cpp	/^PolarStore::Count()$/;"	f	class:PolarStore
Count	Task/TaskFileIGC.cpp	/^TaskFileIGC::Count()$/;"	f	class:TaskFileIGC
Count	Task/TaskFileSeeYou.cpp	/^TaskFileSeeYou::Count()$/;"	f	class:TaskFileSeeYou
Count	Task/TaskFileXCSoar.hpp	/^  unsigned Count() {$/;"	f	class:TaskFileXCSoar
Count	Units/UnitsStore.cpp	/^Units::Store::Count()$/;"	f	class:Units::Store
Count	Weather/NOAAStore.hpp	/^  unsigned Count() const {$/;"	f	class:NOAAStore
CountDigits	TeamCode/TeamCode.cpp	/^CountDigits(unsigned value)$/;"	f	file:
CountLinesAndColumns	XML/Parser.cpp	/^CountLinesAndColumns(const TCHAR *lpXML, size_t nUpto, XML::Results *pResults)$/;"	f	file:
CountWaypoints	Device/Driver/IMI/Protocol/IGC.cpp	/^CountWaypoints(const IMI::TWaypoint *wps)$/;"	f	file:
CounterToQuality	Computer/Wind/WindEKFGlue.cpp	/^CounterToQuality(unsigned i)$/;"	f	file:
Create	Android/DownloadManager.cpp	/^AndroidDownloadManager::Create(JNIEnv *env, Context &context)$/;"	f	class:AndroidDownloadManager
Create	Android/NativeBMP085Listener.cpp	/^NativeBMP085Listener::Create(JNIEnv *env, BMP085Listener &listener)$/;"	f	class:NativeBMP085Listener
Create	Android/NativeI2CbaroListener.cpp	/^NativeI2CbaroListener::Create(JNIEnv *env, I2CbaroListener &listener)$/;"	f	class:NativeI2CbaroListener
Create	Android/NativeInputListener.cpp	/^NativeInputListener::Create(JNIEnv *env, DataHandler &handler)$/;"	f	class:NativeInputListener
Create	Android/NativeLeScanCallback.cpp	/^NativeLeScanCallback::Create(JNIEnv *env, LeScanCallback &cb)$/;"	f	class:NativeLeScanCallback
Create	Android/NativeNunchuckListener.cpp	/^NativeNunchuckListener::Create(JNIEnv *env, NunchuckListener &listener)$/;"	f	class:NativeNunchuckListener
Create	Android/NativePortListener.cpp	/^NativePortListener::Create(JNIEnv *env, PortListener &listener)$/;"	f	class:NativePortListener
Create	Android/NativeVoltageListener.cpp	/^NativeVoltageListener::Create(JNIEnv *env, VoltageListener &listener)$/;"	f	class:NativeVoltageListener
Create	Android/Vibrator.cpp	/^Vibrator::Create(JNIEnv *env, Context &context)$/;"	f	class:Vibrator
Create	Apple/InternalSensors.cpp	/^InternalSensors * InternalSensors::Create(unsigned int index)$/;"	f	class:InternalSensors
Create	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Create() {$/;"	f	class:SwitchesLeft
Create	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Create() {$/;"	f	class:SwitchesRight
Create	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Create(const GeoPoint &location)$/;"	f	class:Waypoints
Create	Form/Button.cpp	/^Button::Create(ContainerWindow &parent, const ButtonLook &look,$/;"	f	class:Button
Create	Form/Button.cpp	/^Button::Create(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:Button
Create	Form/Button.cpp	/^Button::Create(ContainerWindow &parent,$/;"	f	class:Button
Create	Form/CharacterButton.cpp	/^CharacterButton::Create(ContainerWindow &parent, const ButtonLook &look,$/;"	f	class:CharacterButton
Create	Form/CheckBox.cpp	/^CheckBoxControl::Create(ContainerWindow &parent, const DialogLook &_look,$/;"	f	class:CheckBoxControl
Create	Form/DigitEntry.cpp	/^DigitEntry::Create(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
Create	Form/Draw.hpp	/^  void Create(ContainerWindow &parent,$/;"	f	class:WndOwnerDrawFrame
Create	Form/Form.cpp	/^WndForm::Create(SingleWindow &main_window, const PixelRect &rc,$/;"	f	class:WndForm
Create	Form/Form.cpp	/^WndForm::Create(SingleWindow &main_window,$/;"	f	class:WndForm
Create	Form/GridView.cpp	/^GridView::Create(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:GridView
Create	Form/Panel.cpp	/^PanelControl::Create(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:PanelControl
Create	IO/Async/SignalListener.hpp	/^  bool Create(unsigned signo, Args&&... args) {$/;"	f	class:SignalListener
Create	InfoBoxes/Content/Factory.cpp	/^  static InfoBoxContent *Create() {$/;"	f	struct:IBFHelper
Create	InfoBoxes/Content/Factory.cpp	/^  static InfoBoxContent *Create() {$/;"	f	struct:IBFHelperInt
Create	InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::Create(Type type)$/;"	f	class:InfoBoxFactory
Create	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Create(ContainerWindow &parent,$/;"	f	class:InfoBoxManager
Create	Java/URL.cxx	/^Java::URL::Create(JNIEnv *env, const char *url)$/;"	f	class:Java::URL
Create	Java/URL.hxx	/^		static jobject Create(JNIEnv *env, jstring url) {$/;"	f	class:Java::URL
Create	MainWindow.cpp	/^MainWindow::Create(PixelSize size, TopWindowStyle style)$/;"	f	class:MainWindow
Create	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::Create(ContainerWindow &parent, PixelRect rc,$/;"	f	class:TargetMapWindow
Create	Menu/ShowMenuButton.cpp	/^ShowMenuButton::Create(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:ShowMenuButton
Create	OS/EventPipe.cpp	/^EventPipe::Create()$/;"	f	class:EventPipe
Create	OS/FileUtil.cpp	/^Directory::Create(Path path)$/;"	f	class:Directory
Create	PopupMessage.cpp	/^PopupMessage::Create(const PixelRect _rc)$/;"	f	class:PopupMessage
Create	ProgressGlue.cpp	/^ProgressGlue::Create(const TCHAR *text)$/;"	f	class:ProgressGlue
Create	Screen/Android/TopCanvas.cpp	/^TopCanvas::Create(PixelSize new_size, bool full_screen, bool resizable)$/;"	f	class:TopCanvas
Create	Screen/Brush.hpp	/^Brush::Create(const Color c)$/;"	f	class:Brush
Create	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::Create(ContainerWindow &parent, PixelRect rc,$/;"	f	class:LargeTextWindow
Create	Screen/Custom/Pen.cpp	/^Pen::Create(Style _style, unsigned _width, const Color c)$/;"	f	class:Pen
Create	Screen/Custom/Pen.cpp	/^Pen::Create(unsigned width, const Color c)$/;"	f	class:Pen
Create	Screen/Custom/TopCanvas.hpp	/^  void Create(EGLNativeDisplayType native_display,$/;"	f	class:DisplayOrientation
Create	Screen/Custom/TopCanvas.hpp	/^  void Create(_XDisplay *x_display,$/;"	f	class:DisplayOrientation
Create	Screen/EGL/TopCanvas.cpp	/^TopCanvas::Create(PixelSize new_size,$/;"	f	class:TopCanvas
Create	Screen/FB/TopCanvas.cpp	/^TopCanvas::Create(PixelSize new_size,$/;"	f	class:TopCanvas
Create	Screen/GDI/Brush.cpp	/^Brush::Create(const Bitmap &bitmap)$/;"	f	class:Brush
Create	Screen/GDI/Brush.cpp	/^Brush::Create(const Color c)$/;"	f	class:Brush
Create	Screen/GDI/BufferCanvas.cpp	/^BufferCanvas::Create(const Canvas &canvas)$/;"	f	class:BufferCanvas
Create	Screen/GDI/BufferCanvas.cpp	/^BufferCanvas::Create(const Canvas &canvas, PixelSize new_size)$/;"	f	class:BufferCanvas
Create	Screen/GDI/Canvas.hpp	/^  void Create(HDC _dc, PixelSize new_size) {$/;"	f	class:Canvas
Create	Screen/GDI/LargeTextWindow.cpp	/^LargeTextWindow::Create(ContainerWindow &parent, PixelRect rc,$/;"	f	class:LargeTextWindow
Create	Screen/GDI/Pen.cpp	/^Pen::Create(Style Style, unsigned width, const Color c)$/;"	f	class:Pen
Create	Screen/GDI/Pen.cpp	/^Pen::Create(unsigned width, const Color c)$/;"	f	class:Pen
Create	Screen/GDI/VirtualCanvas.cpp	/^VirtualCanvas::Create(PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	Screen/GDI/VirtualCanvas.cpp	/^VirtualCanvas::Create(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	Screen/Memory/Canvas.hpp	/^  void Create(WritableImageBuffer<ActivePixelTraits> _buffer) {$/;"	f	class:Canvas
Create	Screen/Memory/VirtualCanvas.cpp	/^VirtualCanvas::Create(PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	Screen/Memory/VirtualCanvas.cpp	/^VirtualCanvas::Create(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
Create	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::Create(PixelSize new_size)$/;"	f	class:BufferCanvas
Create	Screen/OpenGL/BufferCanvas.hpp	/^  void Create(const Canvas &canvas) {$/;"	f	class:DisplayOrientation
Create	Screen/OpenGL/BufferCanvas.hpp	/^  void Create(const Canvas &canvas, PixelSize new_size) {$/;"	f	class:DisplayOrientation
Create	Screen/OpenGL/Canvas.hpp	/^  void Create(PixelSize _size) {$/;"	f	class:Canvas
Create	Screen/SDL/TopCanvas.cpp	/^TopCanvas::Create(SDL_Window *_window, PixelSize new_size)$/;"	f	class:TopCanvas
Create	Screen/SolidContainerWindow.hpp	/^  void Create(ContainerWindow &parent, PixelRect rc, Color _color,$/;"	f	class:SolidContainerWindow
Create	Screen/VirtualCanvas.hpp	/^  void Create(const Canvas &canvas) {$/;"	f	class:VirtualCanvas
Create	Task/TaskFile.cpp	/^TaskFile::Create(Path path)$/;"	f	class:TaskFile
Create	Waypoint/Factory.hpp	/^  Waypoint Create(const GeoPoint &location) const {$/;"	f	class:WaypointFactory
CreateAATPoint	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateAATPoint(ObservationZonePoint* oz,$/;"	f	class:AbstractTaskFactory
CreateASTPoint	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateASTPoint(ObservationZonePoint* oz,$/;"	f	class:AbstractTaskFactory
CreateAirspaceConfigPanel	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^CreateAirspaceConfigPanel()$/;"	f
CreateAngle	Form/DigitEntry.cpp	/^DigitEntry::CreateAngle(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateAudioConfigPanel	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^CreateAudioConfigPanel()$/;"	f
CreateAudioPlayer	Audio/SLES/Engine.hpp	/^    SLresult CreateAudioPlayer(SLObjectItf *pPlayer,$/;"	f	class:SLES::Engine
CreateAudioVarioConfigPanel	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^CreateAudioVarioConfigPanel()$/;"	f
CreateBGAEnhancedOptionZone	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  static KeyholeZone *CreateBGAEnhancedOptionZone(const GeoPoint &reference) {$/;"	f	class:final
CreateBGAFixedCourseZone	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  static KeyholeZone *CreateBGAFixedCourseZone(const GeoPoint &reference) {$/;"	f	class:final
CreateBGAStartSectorZone	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  static SymmetricSectorZone *CreateBGAStartSectorZone(const GeoPoint &reference) {$/;"	f	class:SymmetricSectorZone
CreateBMP085Device	Android/BMP085Device.cpp	/^CreateBMP085Device(JNIEnv *env, jobject holder,$/;"	f	file:
CreateBorder	Look/ButtonLook.hpp	/^    void CreateBorder(Color light, Color dark) {$/;"	f	struct:ButtonLook::StateLook
CreateButtonLabels	Menu/ButtonLabel.cpp	/^ButtonLabel::CreateButtonLabels(ContainerWindow &parent, ButtonLook &look)$/;"	f	class:ButtonLabel
CreateButtons	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void CreateButtons(WidgetDialog &buttons) {$/;"	f	class:final
CreateButtons	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:DeviceListWidget
CreateButtons	Dialogs/Device/PortMonitor.cpp	/^PortMonitorWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:PortMonitorWidget
CreateButtons	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void CreateButtons() {$/;"	f	class:final
CreateButtons	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::CreateButtons()$/;"	f	class:DownloadFilePickerWidget
CreateButtons	Dialogs/FileManager.cpp	/^ManagedFileListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:ManagedFileListWidget
CreateButtons	Dialogs/KnobTextEntry.cpp	/^KnobTextEntryWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:KnobTextEntryWidget
CreateButtons	Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:MapItemListWidget
CreateButtons	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:PlaneListWidget
CreateButtons	Dialogs/Plane/PlanePolarDialog.cpp	/^  void CreateButtons(WidgetDialog &buttons) {$/;"	f	class:final
CreateButtons	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:ProfileListWidget
CreateButtons	Dialogs/ReplayDialog.cpp	/^  void CreateButtons(WidgetDialog &dialog) {$/;"	f	class:final
CreateButtons	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void CreateButtons(ButtonPanel &buttons) {$/;"	f	class:PageListWidget
CreateButtons	Dialogs/Task/AlternatesListDialog.cpp	/^AlternatesListWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:AlternatesListWidget
CreateButtons	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void CreateButtons(ButtonPanel &buttons) {$/;"	f	class:final
CreateButtons	Dialogs/Task/OptionalStartsDialog.cpp	/^  void CreateButtons(WidgetDialog &dialog) {$/;"	f	class:OptionStartsWidget
CreateButtons	Dialogs/Task/TaskPointDialog.cpp	/^  void CreateButtons() {$/;"	f	class:final
CreateButtons	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:FlarmTrafficDetailsWidget
CreateButtons	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:TeamCodeWidget
CreateButtons	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::CreateButtons(WidgetDialog &dialog)$/;"	f	class:WaypointManagerWidget
CreateButtons	Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::CreateButtons(ButtonPanel &buttons)$/;"	f	class:WeatherMapOverlayListWidget
CreateButtons	Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:NOAADetailsWidget
CreateButtons	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::CreateButtons(ButtonPanel &buttons)$/;"	f	class:NOAAListWidget
CreateButtons	Kobo/KoboMenu.cpp	/^KoboMenuWidget::CreateButtons(WidgetDialog &buttons)$/;"	f	class:KoboMenuWidget
CreateButtons	Kobo/WifiDialog.cpp	/^  void CreateButtons(WidgetDialog &dialog) {$/;"	f	class:final
CreateCalculationThread	Protection.cpp	/^CreateCalculationThread()$/;"	f
CreateCloudConfigPanel	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CreateCloudConfigPanel()$/;"	f
CreateComboList	Form/DataField/Angle.cpp	/^AngleDataField::CreateComboList(const TCHAR *reference) const$/;"	f	class:AngleDataField
CreateComboList	Form/DataField/Base.cpp	/^DataField::CreateComboList(const TCHAR *reference) const$/;"	f	class:DataField
CreateComboList	Form/DataField/Boolean.cpp	/^DataFieldBoolean::CreateComboList(const TCHAR *reference) const$/;"	f	class:DataFieldBoolean
CreateComboList	Form/DataField/Enum.cpp	/^DataFieldEnum::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldEnum
CreateComboList	Form/DataField/File.cpp	/^FileDataField::CreateComboList(const TCHAR *reference) const$/;"	f	class:FileDataField
CreateComboList	Form/DataField/Float.cpp	/^DataFieldFloat::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldFloat
CreateComboList	Form/DataField/Integer.cpp	/^DataFieldInteger::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldInteger
CreateComboList	Form/DataField/Time.cpp	/^DataFieldTime::CreateComboList(const TCHAR *reference_string) const$/;"	f	class:DataFieldTime
CreateCustomKeyholeZone	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  static KeyholeZone *CreateCustomKeyholeZone(const GeoPoint &reference,$/;"	f	class:final
CreateDAeCKeyholeZone	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  static KeyholeZone *CreateDAeCKeyholeZone(const GeoPoint &reference) {$/;"	f	class:final
CreateDataPath	LocalPath.cpp	/^CreateDataPath()$/;"	f
CreateDirectionDataField	Dialogs/Airspace/AirspaceList.cpp	/^CreateDirectionDataField(DataFieldListener *listener)$/;"	f	file:
CreateDirectionDataField	Dialogs/Waypoint/WaypointList.cpp	/^CreateDirectionDataField(DataFieldListener *listener, Angle last_heading)$/;"	f	file:
CreateDistanceDataField	Dialogs/Airspace/AirspaceList.cpp	/^CreateDistanceDataField(DataFieldListener *listener)$/;"	f	file:
CreateDistanceDataField	Dialogs/Waypoint/WaypointList.cpp	/^CreateDistanceDataField(DataFieldListener *listener)$/;"	f	file:
CreateEGL	Screen/EGL/TopCanvas.cpp	/^TopCanvas::CreateEGL(EGLNativeDisplayType native_display,$/;"	f	class:TopCanvas
CreateEdit	Widget/EditRowFormWidget.cpp	/^RowFormWidget::CreateEdit(const TCHAR *label, const TCHAR *help,$/;"	f	class:RowFormWidget
CreateEngine	Audio/SLES/Init.cpp	/^SLES::CreateEngine(SLObjectItf *pEngine, SLuint32 numOptions,$/;"	f	class:SLES
CreateExclusive	OS/FileUtil.cpp	/^File::CreateExclusive(Path path)$/;"	f	class:File
CreateFAISectorZone	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  static SymmetricSectorZone *CreateFAISectorZone(const GeoPoint loc,$/;"	f	class:SymmetricSectorZone
CreateFinish	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateFinish(ObservationZonePoint* oz,$/;"	f	class:AbstractTaskFactory
CreateFinish	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateFinish(WaypointPtr wp) const$/;"	f	class:AbstractTaskFactory
CreateFinish	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateFinish(const TaskPointFactoryType type,$/;"	f	class:AbstractTaskFactory
CreateFunction	Widget/CreateWindowWidget.hpp	/^                                 WindowStyle style)> CreateFunction;$/;"	t	class:final
CreateGLX	Screen/GLX/TopCanvas.cpp	/^TopCanvas::CreateGLX(_XDisplay *_x_display,$/;"	f	class:TopCanvas
CreateGaugesConfigPanel	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^CreateGaugesConfigPanel()$/;"	f
CreateGlideComputerConfigPanel	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^CreateGlideComputerConfigPanel()$/;"	f
CreateI2CbaroDevice	Android/I2CbaroDevice.cpp	/^CreateI2CbaroDevice(JNIEnv *env, jobject holder,$/;"	f	file:
CreateInfoBoxesConfigPanel	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^CreateInfoBoxesConfigPanel()$/;"	f
CreateInputEventMetatable	Lua/InputEvent.cpp	/^CreateInputEventMetatable(lua_State *L)$/;"	f	file:
CreateInstance	Audio/PCMPlayerFactory.hpp	/^inline PCMPlayer *CreateInstance()$/;"	f	namespace:PCMPlayerFactory
CreateInstanceForDirectAccess	Audio/PCMPlayerFactory.hpp	/^CreateInstanceForDirectAccess(boost::asio::io_context &io_context)$/;"	f	namespace:PCMPlayerFactory
CreateInterfaceConfigPanel	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^CreateInterfaceConfigPanel()$/;"	f
CreateIntermediate	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateIntermediate(WaypointPtr wp) const$/;"	f	class:AbstractTaskFactory
CreateIntermediate	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateIntermediate(const TaskPointFactoryType type,$/;"	f	class:AbstractTaskFactory
CreateLatitude	Form/DigitEntry.cpp	/^DigitEntry::CreateLatitude(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateLayoutConfigPanel	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^CreateLayoutConfigPanel()$/;"	f
CreateLeaf	Util/RadixTree.hpp	/^    Node *CreateLeaf(const TCHAR *label, const T &value) const {$/;"	f	struct:RadixTree::Node
CreateList	Widget/ListWidget.cpp	/^ListWidget::CreateList(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:ListWidget
CreateLoggerConfigPanel	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^CreateLoggerConfigPanel()$/;"	f
CreateLogoPage	Dialogs/dlgCredits.cpp	/^CreateLogoPage(ContainerWindow &parent, const PixelRect &rc,$/;"	f	file:
CreateLongitude	Form/DigitEntry.cpp	/^DigitEntry::CreateLongitude(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateMapDisplayConfigPanel	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^CreateMapDisplayConfigPanel()$/;"	f
CreateMatCylinderZone	Engine/Task/ObservationZones/CylinderZone.hpp	/^  static CylinderZone *CreateMatCylinderZone(const GeoPoint &loc) {$/;"	f	class:CylinderZone
CreateMutatedPoint	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateMutatedPoint(const OrderedTaskPoint &tp,$/;"	f	class:AbstractTaskFactory
CreateNOAAListWidget	Dialogs/Weather/NOAAList.cpp	/^CreateNOAAListWidget()$/;"	f
CreateNameDataField	Dialogs/Airspace/AirspaceList.cpp	/^CreateNameDataField(DataFieldListener *listener)$/;"	f	file:
CreateNameDataField	Dialogs/Waypoint/WaypointList.cpp	/^CreateNameDataField(DataFieldListener *listener)$/;"	f	file:
CreateNunchuckDevice	Android/NunchuckDevice.cpp	/^CreateNunchuckDevice(JNIEnv *env, jobject holder,$/;"	f	file:
CreateOZ	Task/TaskFileSeeYou.cpp	/^CreateOZ(const SeeYouTurnpointInformation &turnpoint_infos,$/;"	f	file:
CreateObservationZoneEditWidget	Dialogs/Task/TaskPointDialog.cpp	/^CreateObservationZoneEditWidget(ObservationZonePoint &oz, bool is_fai_general)$/;"	f	file:
CreateOnPort	Device/Driver.hpp	/^  Device *(*CreateOnPort)(const DeviceConfig &config, Port &com_port);$/;"	m	struct:DeviceRegister
CreateOutputMix	Audio/SLES/Engine.hpp	/^    SLresult CreateOutputMix(SLObjectItf *pMix,$/;"	f	class:SLES::Engine
CreatePCMetWidget	Dialogs/Weather/PCMetDialog.cpp	/^CreatePCMetWidget()$/;"	f
CreatePagesConfigPanel	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^CreatePagesConfigPanel()$/;"	f
CreatePoint	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreatePoint(const TaskPointFactoryType type,$/;"	f	class:AbstractTaskFactory
CreatePoint	Task/TaskFileSeeYou.cpp	/^CreatePoint(unsigned pos, unsigned n_waypoints, WaypointPtr &&wp,$/;"	f	file:
CreateRoot	XML/Node.cpp	/^XMLNode::CreateRoot(const TCHAR *name)$/;"	f	class:XMLNode
CreateRouteConfigPanel	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^CreateRouteConfigPanel()$/;"	f
CreateSafetyFactorsConfigPanel	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^CreateSafetyFactorsConfigPanel()$/;"	f
CreateScoringConfigPanel	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^CreateScoringConfigPanel()$/;"	f
CreateSigned	Form/DigitEntry.cpp	/^DigitEntry::CreateSigned(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateSiteConfigPanel	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^CreateSiteConfigPanel()$/;"	f
CreateStart	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateStart(ObservationZonePoint* oz,$/;"	f	class:AbstractTaskFactory
CreateStart	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateStart(WaypointPtr wp) const$/;"	f	class:AbstractTaskFactory
CreateStart	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::CreateStart(const TaskPointFactoryType type,$/;"	f	class:AbstractTaskFactory
CreateSymbolsConfigPanel	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^CreateSymbolsConfigPanel()$/;"	f
CreateTaskDefaultsConfigPanel	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^CreateTaskDefaultsConfigPanel()$/;"	f
CreateTaskEditPanel	Dialogs/Task/Manager/TaskEditPanel.cpp	/^CreateTaskEditPanel(TaskManagerDialog &dialog,$/;"	f
CreateTaskFactory	Engine/Task/Factory/Create.cpp	/^CreateTaskFactory(TaskFactoryType type, OrderedTask &task,$/;"	f
CreateTaskListPanel	Dialogs/Task/Manager/TaskListPanel.cpp	/^CreateTaskListPanel(TaskManagerDialog &dialog,$/;"	f
CreateTaskRulesConfigPanel	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^CreateTaskRulesConfigPanel()$/;"	f
CreateTerrainDisplayConfigPanel	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^CreateTerrainDisplayConfigPanel()$/;"	f
CreateTime	Form/DigitEntry.cpp	/^DigitEntry::CreateTime(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateTimeConfigPanel	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^CreateTimeConfigPanel()$/;"	f
CreateTimerMetatable	Lua/Timer.cpp	/^CreateTimerMetatable(lua_State *L)$/;"	f	file:
CreateTrackingConfigPanel	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^CreateTrackingConfigPanel()$/;"	f
CreateTypeDataField	Dialogs/Waypoint/WaypointList.cpp	/^CreateTypeDataField(DataFieldListener *listener)$/;"	f	file:
CreateUnitsConfigPanel	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^CreateUnitsConfigPanel()$/;"	f
CreateUnsigned	Form/DigitEntry.cpp	/^DigitEntry::CreateUnsigned(ContainerWindow &parent, const PixelRect &rc,$/;"	f	class:DigitEntry
CreateVarioConfigPanel	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^CreateVarioConfigPanel()$/;"	f
CreateVoltageDevice	Android/VoltageDevice.cpp	/^CreateVoltageDevice(JNIEnv *env, jobject holder,$/;"	f	file:
CreateWaypointDisplayConfigPanel	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^CreateWaypointDisplayConfigPanel()$/;"	f
CreateWaypointReader	Waypoint/WaypointReader.cpp	/^CreateWaypointReader(WaypointFileType type, WaypointFactory factory)$/;"	f	file:
CreateWeatherConfigPanel	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^CreateWeatherConfigPanel()$/;"	f
CreateWeatherMapOverlayWidget	Dialogs/Weather/MapOverlayWidget.cpp	/^CreateWeatherMapOverlayWidget()$/;"	f
CreateWindConfigPanel	Dialogs/Settings/Panels/WindConfigPanel.cpp	/^CreateWindConfigPanel()$/;"	f
CreateWindowWidget	Widget/CreateWindowWidget.hpp	/^  CreateWindowWidget(CreateFunction &&_create)$/;"	f	class:final
Credentials	Weather/PCMet/Settings.hpp	/^  struct Credentials {$/;"	s	struct:PCMetSettings
CriticalSection	Thread/CriticalSection.hxx	/^class CriticalSection {$/;"	c
CropIncompleteUTF8	Util/StaticString.hxx	/^	void CropIncompleteUTF8() {$/;"	f	class:NarrowString
CropIncompleteUTF8	Util/StaticString.hxx	/^	void CropIncompleteUTF8() {$/;"	f	class:StaticString
CrossProduct	Engine/Route/RouteLink.hpp	/^  constexpr int CrossProduct(const RouteLinkBase& o) const {$/;"	f	struct:RouteLinkBase
CrossProduct	Geo/Flat/FlatGeoPoint.hpp	/^  constexpr int CrossProduct(FlatGeoPoint other) const {$/;"	f	struct:FlatGeoPoint
CrossProduct	Geo/Flat/FlatPoint.hpp	/^  constexpr double CrossProduct(const FlatPoint &p2) const {$/;"	f	struct:FlatPoint
CrossProduct	Math/Line2D.hpp	/^  constexpr product_type CrossProduct() const {$/;"	f	struct:Line2D
CrossSectionLook	Look/CrossSectionLook.hpp	/^struct CrossSectionLook {$/;"	s
CrossSectionRenderer	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::CrossSectionRenderer(const CrossSectionLook &_look,$/;"	f	class:CrossSectionRenderer
CrossSectionRenderer	CrossSection/CrossSectionRenderer.hpp	/^class CrossSectionRenderer :$/;"	c
CrossSectionWidget	CrossSection/CrossSectionWidget.hpp	/^class CrossSectionWidget : public WindowWidget,$/;"	c
CrossSectionWindow	CrossSection/CrossSectionWindow.hpp	/^  CrossSectionWindow(const CrossSectionLook &look,$/;"	f	class:CrossSectionWindow
CrossSectionWindow	CrossSection/CrossSectionWindow.hpp	/^class CrossSectionWindow$/;"	c
Cruise	Replay/TaskAutoPilot.hpp	/^    Cruise,$/;"	e	enum:TaskAutoPilot::AcState
CruiseEfficiency	InfoBoxes/Content/Type.hpp	/^    CruiseEfficiency,$/;"	e	enum:InfoBoxFactory::Type
CruiseGR	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::CruiseGR(const MoreData &basic, DerivedInfo &calculated)$/;"	f	class:GlideComputerAirData
CruiseMapScale	Profile/ProfileKeys.cpp	/^const char CruiseMapScale[] = "CruiseMapScale";$/;"	m	namespace:ProfileKeys	file:
CtrlC	Device/Driver/CAI302/Protocol.hpp	37;"	d
CtrlC	Device/Driver/CaiGpsNav.cpp	/^static constexpr char CtrlC = '\\x03';$/;"	v	file:
CuComputer	Computer/CuComputer.hpp	/^class CuComputer {$/;"	c
CuSonde	Atmosphere/CuSonde.hpp	/^class CuSonde {$/;"	c
Cubic	Math/Util.hpp	/^Cubic(T a)$/;"	f
CurlEasy	Net/HTTP/Easy.hxx	/^	CurlEasy()$/;"	f	class:CurlEasy
CurlEasy	Net/HTTP/Easy.hxx	/^	explicit CurlEasy(const char *url)$/;"	f	class:CurlEasy
CurlEasy	Net/HTTP/Easy.hxx	/^class CurlEasy {$/;"	c
CurlMulti	Net/HTTP/Multi.cpp	/^Net::CurlMulti::CurlMulti()$/;"	f	class:Net::CurlMulti
CurlMulti	Net/HTTP/Multi.hpp	/^  class CurlMulti {$/;"	c	namespace:Net
CurlSlist	Net/HTTP/Slist.hxx	/^class CurlSlist {$/;"	c
CurrentThermal	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::CurrentThermal(const MoreData &basic,$/;"	f	class:GlideComputerAirData
CursorSize	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  CursorSize,$/;"	e	enum:ControlIndex	file:
CursorSize	Profile/ProfileKeys.cpp	/^const char CursorSize[] = "CursorSize";$/;"	m	namespace:ProfileKeys	file:
CustomDPI	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  CustomDPI,$/;"	e	enum:ControlIndex	file:
CustomDPI	Profile/ProfileKeys.cpp	/^const char CustomDPI[] = "CustomDPI";$/;"	m	namespace:ProfileKeys	file:
CylinderZone	Engine/Task/ObservationZones/CylinderZone.hpp	/^  CylinderZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:CylinderZone
CylinderZone	Engine/Task/ObservationZones/CylinderZone.hpp	/^  CylinderZone(const CylinderZone &other, const GeoPoint &reference)$/;"	f	class:CylinderZone
CylinderZone	Engine/Task/ObservationZones/CylinderZone.hpp	/^  CylinderZone(const GeoPoint &loc, const double _radius = 10000.0)$/;"	f	class:CylinderZone
CylinderZone	Engine/Task/ObservationZones/CylinderZone.hpp	/^class CylinderZone : public ObservationZonePoint$/;"	c
CylinderZoneEditWidget	Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^CylinderZoneEditWidget::CylinderZoneEditWidget(CylinderZone &_oz,$/;"	f	class:CylinderZoneEditWidget
CylinderZoneEditWidget	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^class CylinderZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
DAEC_KEYHOLE	Device/Declaration.hpp	/^      DAEC_KEYHOLE$/;"	e	enum:Declaration::TurnPoint::Shape
DAEC_KEYHOLE	Engine/Task/ObservationZones/ObservationZone.hpp	/^    DAEC_KEYHOLE,$/;"	m	class:ObservationZone::Shape
DALR	Atmosphere/CuSonde.cpp	40;"	d	file:
DANGER	Engine/Airspace/AirspaceClass.hpp	/^  DANGER,$/;"	e	enum:uint8_t
DASH1	Screen/Pen.hpp	/^    DASH1 = PS_DASH,$/;"	e	enum:Pen::Style
DASH2	Screen/Pen.hpp	/^    DASH2 = PS_DASH,$/;"	e	enum:Pen::Style
DASH3	Screen/Pen.hpp	/^    DASH3 = PS_DASH,$/;"	e	enum:Pen::Style
DATABASE	Device/Driver/Volkslogger/vlapi2.h	/^  struct DATABASE {$/;"	s	class:VLAPI_DATA
DATANODE_HPP	XML/DataNode.hpp	24;"	d
DATANODE_XML_HPP	XML/DataNodeXML.hpp	24;"	d
DATE	Device/Driver/LX/LXN.hpp	/^    DATE = 0xfb,$/;"	e	enum:LXN::Command
DBB	Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::DBB() {$/;"	f	class:DBB
DBB	Device/Driver/Volkslogger/dbbconv.h	/^class DBB {$/;"	c
DBBBeg	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t DBBBeg = 0x0000;$/;"	m	class:DBB
DBBCONV_H	Device/Driver/Volkslogger/dbbconv.h	19;"	d
DBBEnd	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t DBBEnd = DBBBeg + DBB_SIZE;$/;"	m	class:DBB
DBB_SIZE	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t DBB_SIZE = 0x3000;$/;"	m	class:DBB
DBFFieldType	Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	t	typeref:enum:__anon84
DBFHandle	Topography/shapelib/mapshape.h	/^  typedef DBFInfo * DBFHandle;$/;"	t
DBFInfo	Topography/shapelib/mapshape.h	/^  } DBFInfo;$/;"	t	typeref:struct:__anon83
DBFIsValueNULL	Topography/shapelib/mapxbase.c	/^static int DBFIsValueNULL( const char* pszValue, char type )$/;"	f	file:
DBG1	zzip/__debug.h	39;"	d
DBG2	zzip/__debug.h	40;"	d
DBG3	zzip/__debug.h	41;"	d
DBG4	zzip/__debug.h	42;"	d
DBG5	zzip/__debug.h	43;"	d
DBG6	zzip/__debug.h	44;"	d
DCLWPT	Device/Driver/Volkslogger/vlapi2.h	/^  struct DCLWPT : public WPT {$/;"	s	class:VLAPI_DATA
DDMMSS	Geo/CoordinateFormat.hpp	/^  DDMMSS = 0,$/;"	m	class:CoordinateFormat
DDMMSS_S	Geo/CoordinateFormat.hpp	/^  DDMMSS_S,$/;"	m	class:CoordinateFormat
DDMM_MMM	Geo/CoordinateFormat.hpp	/^  DDMM_MMM,$/;"	m	class:CoordinateFormat
DD_DDDDD	Geo/CoordinateFormat.hpp	/^  DD_DDDDD,$/;"	m	class:CoordinateFormat
DEAD_BAND_ENABLED	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  DEAD_BAND_ENABLED,$/;"	e	enum:ControlIndex	file:
DEAD_BAND_MAX	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  DEAD_BAND_MAX,$/;"	e	enum:ControlIndex	file:
DEAD_BAND_MIN	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  DEAD_BAND_MIN,$/;"	e	enum:ControlIndex	file:
DEBUG	Dialogs/Device/DeviceListDialog.cpp	/^    DEBUG,$/;"	e	enum:final::Buttons	file:
DECELWPNAMESIZE	Device/Driver/AltairPro.cpp	46;"	d	file:
DECELWPSIZE	Device/Driver/AltairPro.cpp	47;"	d	file:
DECIMAL_POINT	Form/DigitEntry.hpp	/^      DECIMAL_POINT,$/;"	m	class:CoordinateFormat::Column::Type
DECLARATION	Device/Driver/Volkslogger/vlapi2.h	/^  struct DECLARATION {$/;"	s	class:VLAPI_DATA
DECLARE	Device/Driver.hpp	/^    DECLARE = 0x2,$/;"	e	enum:DeviceRegister::__anon196
DECLARE	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    DECLARE,$/;"	e	enum:TaskActionsPanel::Controls
DEFAULT	DisplayOrientation.hpp	/^  DEFAULT,$/;"	m	class:DisplayOrientation
DEFAULT	Renderer/AirspaceRendererSettings.hpp	/^    DEFAULT,$/;"	m	class:AirspaceRendererSettings::FillMode
DEFAULT	UISettings.hpp	/^    DEFAULT,$/;"	m	class:UISettings::HapticFeedback
DEFAULT_ALSA_DEVICE	Audio/ALSAEnv.cpp	/^static constexpr char DEFAULT_ALSA_DEVICE[] = "default";$/;"	m	namespace:ALSAEnv	file:
DEFAULT_ALSA_LATENCY	Audio/ALSAEnv.cpp	/^static constexpr unsigned DEFAULT_ALSA_LATENCY = 100000;$/;"	m	namespace:ALSAEnv	file:
DEFAULT_DISPLAY_ORIENTATION	DisplayOrientation.hpp	/^static constexpr DisplayOrientation DEFAULT_DISPLAY_ORIENTATION =$/;"	v
DEFAULT_DRI_DEVICE	Screen/EGL/TopCanvas.cpp	/^constexpr const char * DEFAULT_DRI_DEVICE = "\/dev\/dri\/card0";$/;"	v
DEFAULT_DRI_DEVICE	Screen/EGL/TopCanvas.cpp	/^static constexpr const char *DEFAULT_DRI_DEVICE = "\/dev\/dri\/card1";$/;"	v	file:
DEFAULT_QUEUE_SIZE	Engine/Route/AStar.hpp	/^  static constexpr unsigned DEFAULT_QUEUE_SIZE = 1024;$/;"	m	class:AStar
DEFAULT_SHADING_ANGLE	Renderer/BackgroundRenderer.cpp	/^const Angle BackgroundRenderer::DEFAULT_SHADING_ANGLE = Angle::Degrees(-45);$/;"	m	class:BackgroundRenderer	file:
DEFAULT_SHADING_ANGLE	Renderer/BackgroundRenderer.hpp	/^  static const Angle DEFAULT_SHADING_ANGLE;$/;"	m	class:BackgroundRenderer
DEFAULT_TAKEOFF_SPEED	Computer/GlideComputerAirData.cpp	/^static constexpr double DEFAULT_TAKEOFF_SPEED = 10;$/;"	v	file:
DEFAULT_TASK_HPP	Task/DefaultTask.hpp	24;"	d
DEFAULT_UPDATE_TIME	Logger/LoggerFRecord.cpp	/^constexpr std::chrono::steady_clock::duration LoggerFRecord::DEFAULT_UPDATE_TIME;$/;"	m	class:LoggerFRecord	file:
DEFAULT_UPDATE_TIME	Logger/LoggerFRecord.hpp	/^  static constexpr std::chrono::steady_clock::duration DEFAULT_UPDATE_TIME = std::chrono::seconds(270);$/;"	m	class:LoggerFRecord
DEG	Units/Units.hpp	35;"	d
DEGREES	Form/DigitEntry.hpp	/^      DEGREES,$/;"	m	class:CoordinateFormat::Column::Type
DEGREES_CELCIUS	Units/Unit.hpp	/^  DEGREES_CELCIUS, \/\/ K = C° + 273,15$/;"	m	class:Unit
DEGREES_FAHRENHEIT	Units/Unit.hpp	/^  DEGREES_FAHRENHEIT, \/\/ K = (°F + 459,67) \/ 1,8$/;"	m	class:Unit
DEG_TO_RAD	Math/Constants.hpp	/^static constexpr double DEG_TO_RAD = .0174532925199432958;$/;"	v
DELETE	Dialogs/Plane/PlaneListDialog.cpp	/^    DELETE,$/;"	e	enum:final::Buttons	file:
DELETE	Dialogs/Plane/PlaneListDialog.cpp	51;"	d	file:
DELETE	Dialogs/ProfileListDialog.cpp	/^    DELETE,$/;"	e	enum:final::Buttons	file:
DELETE	Dialogs/ProfileListDialog.cpp	47;"	d	file:
DELETE	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    DELETE,$/;"	e	enum:PageListWidget::Buttons	file:
DELETE	Dialogs/Settings/Panels/PagesConfigPanel.cpp	45;"	d	file:
DELETE	Dialogs/Task/Manager/TaskListPanel.cpp	/^    DELETE,$/;"	e	enum:final::Buttons	file:
DELETE	Dialogs/Task/Manager/TaskListPanel.cpp	52;"	d	file:
DELETE	Dialogs/Waypoint/Manager.cpp	/^    DELETE,$/;"	e	enum:final::Buttons	file:
DELETE	Dialogs/Waypoint/Manager.cpp	47;"	d	file:
DELETE_DISPOSER_HXX	Util/DeleteDisposer.hxx	31;"	d
DELTA	Terrain/jasper/jpc/jpc_qmfb.c	1656;"	d	file:
DELTA_V_LIMIT	Gauge/GaugeVario.cpp	34;"	d	file:
DELTA_V_STEP	Gauge/GaugeVario.cpp	33;"	d	file:
DEMO	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    DEMO,$/;"	e	enum:final::Buttons	file:
DEMO_REPLAY_GLUE_HPP	Replay/DemoReplayGlue.hpp	25;"	d
DEMO_REPLAY_HPP	Replay/DemoReplay.hpp	25;"	d
DEPTH_ATTACHMENT	Screen/OpenGL/FBO.hpp	/^  static constexpr GLenum DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT_OES;$/;"	m	namespace:FBO
DEPTH_STENCIL	Screen/OpenGL/FBO.hpp	/^  static constexpr GLenum DEPTH_STENCIL = GL_DEPTH_STENCIL_OES;$/;"	m	namespace:FBO
DEREFERENCE_ITERATOR_HXX	Util/DereferenceIterator.hxx	31;"	d
DESCRIPTION	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
DESERIALISER_HPP	Task/Deserialiser.hpp	23;"	d
DETAILED	MapSettings.hpp	/^  DETAILED,$/;"	m	class:AircraftSymbol
DETAILS	Dialogs/Airspace/AirspaceList.cpp	/^  DETAILS,$/;"	e	enum:Buttons	file:
DETAILS	Dialogs/Task/TaskPointDialog.cpp	/^    DETAILS, REMOVE, RELOCATE,$/;"	e	enum:final::Buttons	file:
DETAILS	Dialogs/Traffic/TrafficList.cpp	/^  DETAILS,$/;"	e	enum:Buttons	file:
DETAILS	Dialogs/Weather/NOAAList.cpp	/^    DETAILS,$/;"	e	enum:final::Buttons	file:
DETAILS	Dialogs/dlgAnalysis.cpp	/^    DETAILS,$/;"	e	enum:final::Buttons	file:
DETAILS	Gauge/BigTrafficWidget.hpp	/^    DETAILS,$/;"	e	enum:TrafficWidget::Action
DEVICE_BLACKBOARD_H	Blackboard/DeviceBlackboard.hpp	25;"	d
DEVIMI_H	Device/Driver/IMI.hpp	8;"	d
DGPS	NMEA/GPSState.hpp	/^  DGPS,$/;"	m	class:FixQuality
DHV_XC	Engine/Contest/Settings.hpp	/^  DHV_XC,$/;"	m	class:Contest
DIALOGS_TEXT_ENTRY_HPP	Dialogs/TextEntry.hpp	25;"	d
DIALOG_TASK_HELPERS_HPP	Dialogs/Task/dlgTaskHelpers.hpp	25;"	d
DIFF_FILTER_HPP	Math/DiffFilter.hpp	24;"	d
DIGEST_LENGTH	Logger/GRecord.hpp	/^  static constexpr size_t DIGEST_LENGTH = N_MD5 * MD5::DIGEST_LENGTH;$/;"	m	class:GRecord
DIGEST_LENGTH	Util/MD5.hpp	/^  static constexpr size_t DIGEST_LENGTH = 32;$/;"	m	class:MD5
DIGIT	Form/DigitEntry.hpp	/^      DIGIT,$/;"	m	class:CoordinateFormat::Column::Type
DIGIT19	Form/DigitEntry.hpp	/^      DIGIT19,$/;"	m	class:CoordinateFormat::Column::Type
DIGIT36	Form/DigitEntry.hpp	/^      DIGIT36,$/;"	m	class:CoordinateFormat::Column::Type
DIGIT6	Form/DigitEntry.hpp	/^      DIGIT6,$/;"	m	class:CoordinateFormat::Column::Type
DIJKSTRA_HPP	Engine/PathSolvers/Dijkstra.hpp	25;"	d
DIJKSTRA_MINMAX_OFFSET	Engine/PathSolvers/Dijkstra.hpp	30;"	d
DIRECTION	Dialogs/Airspace/AirspaceList.cpp	/^  DIRECTION,$/;"	e	enum:Controls	file:
DIRECTION	Dialogs/Waypoint/WaypointList.cpp	/^  DIRECTION,$/;"	e	enum:Controls	file:
DIRENTRY	Device/Driver/Volkslogger/vlconv.h	/^struct DIRENTRY {$/;"	s
DIR_SEPARATOR	Compatibility/path.h	31;"	d
DIR_SEPARATOR	Compatibility/path.h	36;"	d
DIR_SEPARATOR_S	Compatibility/path.h	32;"	d
DIR_SEPARATOR_S	Compatibility/path.h	37;"	d
DISABLE	Dialogs/Device/DeviceListDialog.cpp	/^    DISABLE,$/;"	e	enum:final::Buttons	file:
DISABLE	Dialogs/Weather/MapOverlayWidget.cpp	/^    DISABLE,$/;"	e	enum:final::Buttons	file:
DISABLED	Device/Config.hpp	/^    DISABLED,$/;"	m	class:DeviceConfig::PortType
DISCONNECTED	Net/State.hpp	/^  DISCONNECTED,$/;"	m	class:NetState
DISMISS	Monitor/MatTaskMonitor.cpp	/^    DISMISS,$/;"	e	enum:final::Action	file:
DISMISS	Monitor/TaskAdvanceMonitor.cpp	/^    DISMISS,$/;"	e	enum:final::Action	file:
DISPLAY_TRACK_BEARING	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  DISPLAY_TRACK_BEARING,$/;"	e	enum:ControlIndex	file:
DISTANCE	Dialogs/Airspace/AirspaceList.cpp	/^  DISTANCE,$/;"	e	enum:Controls	file:
DISTANCE	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    DISTANCE,$/;"	e	enum:final::Controls	file:
DISTANCE	Dialogs/Waypoint/WaypointList.cpp	/^  DISTANCE,$/;"	e	enum:Controls	file:
DISTANCE	Units/Group.hpp	/^  DISTANCE,$/;"	m	class:UnitGroup
DISTANCE_MEMENTO_HPP	Geo/Memento/DistanceMemento.hpp	24;"	d
DISTANCE_STAT_HPP	Engine/Task/Stats/DistanceStat.hpp	23;"	d
DLE	Device/Driver/Volkslogger/Protocol.hpp	/^    DLE = 0x10,$/;"	e	enum:Volkslogger::__anon202
DLGINFOBOXACCESS_HPP	Dialogs/dlgInfoBoxAccess.hpp	25;"	d
DMS	Math/Angle.hpp	/^    constexpr DMS(unsigned d, unsigned m=0, unsigned s=0, bool n=false)$/;"	f	struct:Angle::DMS
DMS	Math/Angle.hpp	/^  struct DMS {$/;"	s	class:Angle
DMST	Engine/Contest/Settings.hpp	/^  DMST,$/;"	m	class:Contest
DMStQuad	Engine/Contest/Solvers/DMStQuad.hpp	/^class DMStQuad : public ContestDijkstra {$/;"	c
DOLLAR_EXPAND_HPP	Util/DollarExpand.hpp	25;"	d
DOWN	Dialogs/KnobTextEntry.cpp	/^  DOWN,$/;"	e	enum:Buttons	file:
DOWN	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  DOWN,$/;"	e	enum:Buttons	file:
DOWN	NMEA/SwitchState.hpp	/^    DOWN,$/;"	m	class:SwitchState::UserSwitch
DOWN	Renderer/SymbolRenderer.hpp	/^    DOWN,$/;"	e	enum:SymbolRenderer::Direction
DOWNLOAD	Device/Driver/CAI302/Internal.hpp	/^    DOWNLOAD,$/;"	m	class:CAI302Device::Mode
DOWNLOAD	Dialogs/DownloadFilePicker.cpp	/^    DOWNLOAD,$/;"	e	enum:final::Buttons	file:
DOWNLOAD	Dialogs/FileManager.cpp	/^    DOWNLOAD,$/;"	e	enum:ManagedFileListWidget::Buttons	file:
DOWNLOAD	Dialogs/Weather/RASPDialog.cpp	/^    DOWNLOAD,$/;"	e	enum:final::Controls	file:
DOWNLOAD	Form/DataField/ComboList.hpp	/^    static constexpr int DOWNLOAD = -800003;$/;"	m	struct:ComboList::Item
DPMSVersion	Hardware/VideoPower.h	/^  ULONG DPMSVersion;$/;"	m	struct:VIDEO_POWER_MANAGEMENT
DRAG_GESTURE	MapWindow/GlueMapWindow.hpp	/^    DRAG_GESTURE,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_MULTI_TOUCH_PAN	MapWindow/GlueMapWindow.hpp	/^    DRAG_MULTI_TOUCH_PAN,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_NONE	MapWindow/GlueMapWindow.hpp	/^    DRAG_NONE,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_NONE	MapWindow/TargetMapWindow.hpp	/^    DRAG_NONE,$/;"	e	enum:TargetMapWindow::DragMode
DRAG_OZ	MapWindow/TargetMapWindow.hpp	/^    DRAG_OZ,$/;"	e	enum:TargetMapWindow::DragMode
DRAG_PAN	MapWindow/GlueMapWindow.hpp	/^    DRAG_PAN,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_SIMULATOR	MapWindow/GlueMapWindow.hpp	/^    DRAG_SIMULATOR,$/;"	e	enum:GlueMapWindow::DragMode
DRAG_TARGET	MapWindow/TargetMapWindow.hpp	/^    DRAG_TARGET,$/;"	e	enum:TargetMapWindow::DragMode
DRAG_TARGET_OUTSIDE	MapWindow/TargetMapWindow.hpp	/^    DRAG_TARGET_OUTSIDE,$/;"	e	enum:TargetMapWindow::DragMode
DRAW_MOUSE_CURSOR	Screen/Memory/Features.hpp	32;"	d
DRAW_MOUSE_CURSOR	Screen/OpenGL/Features.hpp	53;"	d
DROIDSOAR_V2	Device/Config.hpp	/^    DROIDSOAR_V2,$/;"	m	class:DeviceConfig::PortType
DROP_PLANE	FLARM/Traffic.hpp	/^    DROP_PLANE = 5,       \/\/!< drop plane for parachutes$/;"	m	class:FlarmTraffic::AircraftType
DRY_MASS	Dialogs/Plane/PlanePolarDialog.cpp	/^    DRY_MASS,$/;"	e	enum:final::Controls	file:
DTE	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
DTM	Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
DT_CALCRECT	unix/winuser.h	/^  DT_CALCRECT = 0x400,$/;"	e	enum:__anon13
DT_CENTER	unix/winuser.h	/^  DT_CENTER = 0x20,$/;"	e	enum:__anon13
DT_LEFT	unix/winuser.h	/^  DT_LEFT = 0x2,$/;"	e	enum:__anon13
DT_RIGHT	unix/winuser.h	/^  DT_RIGHT = 0x100,$/;"	e	enum:__anon13
DT_UNDERLINE	unix/winuser.h	/^  DT_UNDERLINE = 0x800,$/;"	e	enum:__anon13
DT_VCENTER	unix/winuser.h	/^  DT_VCENTER = 0x80,$/;"	e	enum:__anon13
DUMMY	Widget/RowFormWidget.hpp	/^      DUMMY,$/;"	m	class:RowFormWidget::Row::Type
DUMP	Dialogs/Settings/dlgBasicSettings.cpp	/^  DUMP = 100,$/;"	e	enum:Actions	file:
DUMP_TIME	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    DUMP_TIME,$/;"	e	enum:final::Controls	file:
DYNAMIC_FIFO_BUFFER_HXX	Util/DynamicFifoBuffer.hxx	31;"	d
DarkColor	Screen/Color.hpp	/^DarkColor(Color c)$/;"	f
DarkColor	Screen/Color.hpp	/^DarkColor(uint8_t c)$/;"	f
Darken	Screen/PortableColor.hpp	/^  constexpr RGB8Color Darken() const {$/;"	f	class:RGB8Color
Data	Operation/ThreadedOperationEnvironment.hpp	/^    Data()$/;"	f	struct:ThreadedOperationEnvironment::Data
Data	Operation/ThreadedOperationEnvironment.hpp	/^  struct Data {$/;"	s	class:ThreadedOperationEnvironment
Data	ResourceLoader.hpp	/^  typedef ConstBuffer<void> Data;$/;"	t	namespace:ResourceLoader
Data	Screen/OpenGL/Buffer.hpp	/^  static void Data(GLsizeiptr size, const GLvoid *data) {$/;"	f	class:GLBuffer
Data	Tracking/SkyLines/Data.hpp	/^struct Data {$/;"	s	namespace:SkyLinesTracking
Data	XML/Node.hpp	/^    Data(const TCHAR *_name, bool _is_declaration)$/;"	f	struct:XMLNode::Data
Data	XML/Node.hpp	/^    Data(const TCHAR *_name, size_t name_length, bool _is_declaration)$/;"	f	struct:XMLNode::Data
Data	XML/Node.hpp	/^  struct Data : private NonCopyable {$/;"	s	class:XMLNode
DataField	Form/DataField/Base.cpp	/^DataField::DataField(Type _type, bool _supports_combolist,$/;"	f	class:DataField
DataField	Form/DataField/Base.hpp	/^class DataField$/;"	c
DataFieldBoolean	Form/DataField/Boolean.hpp	/^  DataFieldBoolean(bool _value,$/;"	f	class:final
DataFieldEnum	Form/DataField/Enum.hpp	/^  DataFieldEnum(DataFieldListener *listener=nullptr)$/;"	f	class:final
DataFieldFloat	Form/DataField/Float.hpp	/^  DataFieldFloat(const TCHAR *edit_format, const TCHAR *display_format,$/;"	f	class:final
DataFieldInteger	Form/DataField/Integer.hpp	/^  DataFieldInteger(const TCHAR *edit_format, const TCHAR *display_format,$/;"	f	class:final
DataFieldKeyUp	Form/DataField/Float.cpp	/^static bool DataFieldKeyUp = false;$/;"	v	file:
DataFieldListener	Form/DataField/Listener.hpp	/^class DataFieldListener {$/;"	c
DataFieldString	Form/DataField/String.hpp	/^  DataFieldString(Type _type, const TCHAR *_value,$/;"	f	class:DataFieldString
DataFieldString	Form/DataField/String.hpp	/^  DataFieldString(const TCHAR *_value, DataFieldListener *listener=nullptr)$/;"	f	class:DataFieldString
DataFieldString	Form/DataField/String.hpp	/^class DataFieldString: public DataField$/;"	c
DataFieldTime	Form/DataField/Time.hpp	/^  DataFieldTime(int _min, int _max, int _value, unsigned _step,$/;"	f	class:final
DataGlobals	DataGlobals.hpp	/^namespace DataGlobals {$/;"	n
DataHandler	IO/DataHandler.hpp	/^class DataHandler {$/;"	c
DataPath	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  DataPath,$/;"	e	enum:ControlIndex	file:
DataReceived	Device/Driver.cpp	/^AbstractDevice::DataReceived(const void *data, size_t length, NMEAInfo &info)$/;"	f	class:AbstractDevice
DataReceived	Device/Driver/ATR833.cpp	/^ATR833Device::DataReceived(const void *data, size_t length,$/;"	f	class:ATR833Device
DataReceived	Device/Driver/KRT2.cpp	/^KRT2Device::DataReceived(const void *_data, size_t length,$/;"	f	class:KRT2Device
Date	Device/Driver/LX/LXN.hpp	/^  struct Date {$/;"	s	namespace:LXN
DateTime	Device/Driver/CAI302/Protocol.hpp	/^  struct DateTime {$/;"	s	namespace:CAI302
Daylight	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  Daylight,$/;"	e	enum:Controls	file:
Days	Engine/Airspace/AirspaceActivity.hpp	/^  struct Days$/;"	s	class:AirspaceActivity
DaysSince	Time/BrokenDate.cpp	/^BrokenDate::DaysSince(const BrokenDate &other) const$/;"	f	class:BrokenDate
DebugCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::DebugCurrent()$/;"	f	class:DeviceListWidget
Dec	Form/DataField/Angle.cpp	/^AngleDataField::Dec()$/;"	f	class:AngleDataField
Dec	Form/DataField/Base.cpp	/^DataField::Dec()$/;"	f	class:DataField
Dec	Form/DataField/Boolean.cpp	/^DataFieldBoolean::Dec()$/;"	f	class:DataFieldBoolean
Dec	Form/DataField/Enum.cpp	/^DataFieldEnum::Dec()$/;"	f	class:DataFieldEnum
Dec	Form/DataField/File.cpp	/^FileDataField::Dec()$/;"	f	class:FileDataField
Dec	Form/DataField/Float.cpp	/^DataFieldFloat::Dec()$/;"	f	class:DataFieldFloat
Dec	Form/DataField/Integer.cpp	/^DataFieldInteger::Dec()$/;"	f	class:DataFieldInteger
Dec	Form/DataField/Prefix.cpp	/^PrefixDataField::Dec()$/;"	f	class:PrefixDataField
Dec	Form/DataField/RoughTime.cpp	/^RoughTimeDataField::Dec()$/;"	f	class:RoughTimeDataField
Dec	Form/DataField/Time.cpp	/^DataFieldTime::Dec()$/;"	f	class:DataFieldTime
Decay	Computer/WaveComputer.cpp	/^WaveComputer::Decay(double min_time)$/;"	f	class:WaveComputer
Decimate	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Decimate(bool update)$/;"	f	class:ThermalBand
Declaration	Device/Declaration.cpp	/^Declaration::Declaration(const LoggerSettings &logger_settings,$/;"	f	class:Declaration
Declaration	Device/Declaration.hpp	/^struct Declaration {$/;"	s
Declaration	Device/Driver/LX/Protocol.hpp	/^  struct Declaration {$/;"	s	namespace:LX
Declaration	Device/Driver/LXERA/Protocol.hpp	/^  struct Declaration {$/;"	s	namespace:LXEra
DeclarationWaypoint	Device/Driver/Volkslogger/Database.hpp	/^  struct DeclarationWaypoint : public Waypoint{$/;"	s	namespace:Volkslogger
DeclarationWrite	Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::DeclarationWrite(Port &port, const Declaration &decl,$/;"	f	class:IMI
Declare	Device/Descriptor.cpp	/^DeviceDescriptor::Declare(const struct Declaration &declaration,$/;"	f	class:DeviceDescriptor
Declare	Device/Driver.cpp	/^AbstractDevice::Declare(const Declaration &declaration, const Waypoint *home,$/;"	f	class:AbstractDevice
Declare	Device/Driver/AltairPro.cpp	/^AltairProDevice::Declare(const struct Declaration &declaration,$/;"	f	class:AltairProDevice
Declare	Device/Driver/CAI302/Declare.cpp	/^CAI302Device::Declare(const Declaration &declaration,$/;"	f	class:CAI302Device
Declare	Device/Driver/EW.cpp	/^EWDevice::Declare(const struct Declaration &declaration,$/;"	f	class:EWDevice
Declare	Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderDevice::Declare(const Declaration &declaration,$/;"	f	class:EWMicroRecorderDevice
Declare	Device/Driver/FLARM/Declare.cpp	/^FlarmDevice::Declare(const Declaration &declaration,$/;"	f	class:FlarmDevice
Declare	Device/Driver/IMI/Declare.cpp	/^IMIDevice::Declare(const Declaration &declaration,$/;"	f	class:IMIDevice
Declare	Device/Driver/LX/Declare.cpp	/^LXDevice::Declare(const Declaration &declaration,$/;"	f	class:LXDevice
Declare	Device/Driver/LX/NanoDeclare.cpp	/^Nano::Declare(Port &port, const Declaration &declaration,$/;"	f	class:Nano
Declare	Device/Driver/Volkslogger/Declare.cpp	/^VolksloggerDevice::Declare(const Declaration &declaration,$/;"	f	class:VolksloggerDevice
Declare	Logger/ExternalLogger.cpp	/^ExternalLogger::Declare(const Declaration &decl, const Waypoint *home)$/;"	f	class:ExternalLogger
DeclareInner	Device/Driver/CAI302/Declare.cpp	/^DeclareInner(Port &port, const Declaration &declaration,$/;"	f	file:
DeclareInner	Device/Driver/EW.cpp	/^EWDevice::DeclareInner(const struct Declaration &declaration,$/;"	f	class:EWDevice
DeclareInner	Device/Driver/EWMicroRecorder.cpp	/^DeclareInner(Port &port, const Declaration &declaration,$/;"	f	file:
DeclareInner	Device/Driver/LX/Declare.cpp	/^DeclareInner(Port &port, const Declaration &declaration,$/;"	f	file:
DeclareInner	Device/Driver/Volkslogger/Declare.cpp	/^DeclareInner(Port &port, const unsigned bulkrate,$/;"	f	file:
DeclareInternal	Device/Driver/AltairPro.cpp	/^AltairProDevice::DeclareInternal(const struct Declaration &declaration,$/;"	f	class:AltairProDevice
DeclareInternal	Device/Driver/FLARM/Declare.cpp	/^FlarmDevice::DeclareInternal(const Declaration &declaration,$/;"	f	class:FlarmDevice
DeclareJob	Logger/ExternalLogger.cpp	/^  DeclareJob(DeviceDescriptor &_device, const struct Declaration &_declaration,$/;"	f	class:DeclareJob
DeclareJob	Logger/ExternalLogger.cpp	/^class DeclareJob {$/;"	c	file:
DeclareSave	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DeclareSave(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
DeclareTP	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DeclareTP(Port &port, unsigned i, const GeoPoint &location,$/;"	f	class:CAI302
DeclareToFLARM	Device/Descriptor.cpp	/^DeclareToFLARM(const struct Declaration &declaration, Port &port,$/;"	f	file:
DeclareToFLARM	Device/Descriptor.cpp	/^DeclareToFLARM(const struct Declaration &declaration,$/;"	f	file:
DecompressImageFile	Screen/Custom/Bitmap.cpp	/^DecompressImageFile(Path path)$/;"	f	file:
DecrementColumn	Form/DigitEntry.cpp	/^DigitEntry::DecrementColumn(unsigned i)$/;"	f	class:DigitEntry
DecrementDay	Time/BrokenDate.cpp	/^BrokenDate::DecrementDay()$/;"	f	class:BrokenDate
DecrementLetter	Dialogs/KnobTextEntry.cpp	/^  void DecrementLetter() {$/;"	f	class:final	file:
Default	Dialogs/DialogSettings.hpp	/^    Default,$/;"	m	class:DialogSettings::TextInputStyle
Default	PageSettings.hpp	/^  static PageLayout Default() {$/;"	f	struct:PageLayout
DefaultWidgetDialog	Dialogs/WidgetDialog.cpp	/^DefaultWidgetDialog(SingleWindow &parent, const DialogLook &look,$/;"	f
Defaults	Engine/Waypoint/Waypoint.hpp	/^    static constexpr Flags Defaults() {$/;"	f	struct:Waypoint::Flags
DeferredRestore	PageActions.cpp	/^PageActions::DeferredRestore()$/;"	f	class:PageActions
DeferredRestorePage	MainWindow.cpp	/^MainWindow::DeferredRestorePage()$/;"	f	class:MainWindow
Defined	OS/OverlappedEvent.hpp	/^  bool Defined() const {$/;"	f	class:OverlappedEvent
Defined	Screen/Custom/Reference.hpp	/^  bool Defined() const {$/;"	f	class:WindowReference
Degrees	Math/Angle.hpp	/^  constexpr double Degrees() const {$/;"	f	class:Angle
Degrees	Math/Angle.hpp	/^  static Angle Degrees(double value) {$/;"	f	class:Angle
Degrees	Math/Angle.hpp	/^  static Angle Degrees(int value) {$/;"	f	class:Angle
Degrees	Math/Angle.hpp	/^  static Angle Degrees(unsigned value) {$/;"	f	class:Angle
Deinit	Apple/InternalSensors.cpp	/^void InternalSensors::Deinit()$/;"	f	class:InternalSensors
DeinitShaders	Screen/OpenGL/Shaders.cpp	/^OpenGL::DeinitShaders()$/;"	f	class:OpenGL
DeinitShapes	Screen/OpenGL/Shapes.cpp	/^OpenGL::DeinitShapes()$/;"	f	class:OpenGL
DeinitTrafficGlobals	FLARM/Glue.cpp	/^DeinitTrafficGlobals()$/;"	f
Deinitialise	Android/BMP085Device.cpp	/^BMP085Device::Deinitialise(JNIEnv *env)$/;"	f	class:BMP085Device
Deinitialise	Android/Bitmap.hpp	/^  static void Deinitialise(JNIEnv *env) {}$/;"	f	class:AndroidBitmap
Deinitialise	Android/BluetoothHelper.cpp	/^BluetoothHelper::Deinitialise(JNIEnv *env)$/;"	f	class:BluetoothHelper
Deinitialise	Android/DownloadManager.cpp	/^AndroidDownloadManager::Deinitialise(JNIEnv *env)$/;"	f	class:AndroidDownloadManager
Deinitialise	Android/Environment.cpp	/^Environment::Deinitialise(JNIEnv *env)$/;"	f	class:Environment
Deinitialise	Android/GliderLink.cpp	/^GliderLink::Deinitialise(JNIEnv *env)$/;"	f	class:GliderLink
Deinitialise	Android/I2CbaroDevice.cpp	/^I2CbaroDevice::Deinitialise(JNIEnv *env)$/;"	f	class:I2CbaroDevice
Deinitialise	Android/IOIOHelper.cpp	/^IOIOHelper::Deinitialise(JNIEnv *env)$/;"	f	class:IOIOHelper
Deinitialise	Android/InternalSensors.cpp	/^InternalSensors::Deinitialise(JNIEnv *env)$/;"	f	class:InternalSensors
Deinitialise	Android/NativeBMP085Listener.cpp	/^NativeBMP085Listener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeBMP085Listener
Deinitialise	Android/NativeI2CbaroListener.cpp	/^NativeI2CbaroListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeI2CbaroListener
Deinitialise	Android/NativeInputListener.cpp	/^NativeInputListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeInputListener
Deinitialise	Android/NativeLeScanCallback.cpp	/^NativeLeScanCallback::Deinitialise(JNIEnv *env)$/;"	f	class:NativeLeScanCallback
Deinitialise	Android/NativeNunchuckListener.cpp	/^NativeNunchuckListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeNunchuckListener
Deinitialise	Android/NativePortListener.cpp	/^NativePortListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativePortListener
Deinitialise	Android/NativeView.cpp	/^NativeView::Deinitialise(JNIEnv *env)$/;"	f	class:NativeView
Deinitialise	Android/NativeVoltageListener.cpp	/^NativeVoltageListener::Deinitialise(JNIEnv *env)$/;"	f	class:NativeVoltageListener
Deinitialise	Android/NunchuckDevice.cpp	/^NunchuckDevice::Deinitialise(JNIEnv *env)$/;"	f	class:NunchuckDevice
Deinitialise	Android/SoundUtil.cpp	/^SoundUtil::Deinitialise(JNIEnv *env)$/;"	f	class:SoundUtil
Deinitialise	Android/TextUtil.cpp	/^TextUtil::Deinitialise(JNIEnv *env)$/;"	f	class:TextUtil
Deinitialise	Android/VoltageDevice.cpp	/^VoltageDevice::Deinitialise(JNIEnv *env)$/;"	f	class:VoltageDevice
Deinitialise	Audio/VarioGlue.cpp	/^AudioVarioGlue::Deinitialise()$/;"	f	class:AudioVarioGlue
Deinitialise	Java/URL.cxx	/^Java::URL::Deinitialise(JNIEnv *env)$/;"	f	class:Java::URL
Deinitialise	MainWindow.cpp	/^MainWindow::Deinitialise()$/;"	f	class:MainWindow
Deinitialise	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::Deinitialise()$/;"	f	class:Net::DownloadManager
Deinitialise	Net/HTTP/Init.cpp	/^Net::Deinitialise()$/;"	f	class:Net
Deinitialise	Screen/FreeType/Font.cpp	/^Font::Deinitialise()$/;"	f	class:Font
Deinitialise	Screen/FreeType/Init.cpp	/^FreeType::Deinitialise()$/;"	f	class:FreeType
Deinitialise	Screen/OpenGL/Init.cpp	/^OpenGL::Deinitialise()$/;"	f	class:OpenGL
DeinitialiseAsioThread	IO/Async/GlobalAsioThread.cpp	/^DeinitialiseAsioThread()$/;"	f
DeinitialiseDataPath	LocalPath.cpp	/^DeinitialiseDataPath()$/;"	f
DeinitialisePCMMixer	Audio/GlobalPCMMixer.cpp	/^DeinitialisePCMMixer()$/;"	f
DeinitialisePCMMixer	Audio/GlobalPCMMixer.hpp	/^DeinitialisePCMMixer()$/;"	f
DeinitialisePCMResourcePlayer	Audio/GlobalPCMResourcePlayer.cpp	/^DeinitialisePCMResourcePlayer()$/;"	f
DeinitialisePCMResourcePlayer	Audio/GlobalPCMResourcePlayer.hpp	/^DeinitialisePCMResourcePlayer()$/;"	f
DeinitialiseTTY	Screen/TTY/TopCanvas.cpp	/^TopCanvas::DeinitialiseTTY()$/;"	f	class:TopCanvas
DeinitialiseVolumeController	Audio/GlobalVolumeController.cpp	/^DeinitialiseVolumeController()$/;"	f
DeinitialiseVolumeController	Audio/GlobalVolumeController.hpp	/^DeinitialiseVolumeController()$/;"	f
Deinitialize	Look/GlobalFonts.cpp	/^Fonts::Deinitialize()$/;"	f	class:Fonts
Delete	OS/FileUtil.hpp	/^  Delete(Path path)$/;"	f	namespace:File
Delete	Screen/OpenGL/FrameBuffer.hpp	/^  void Delete() {$/;"	f	class:GLFrameBuffer
Delete	Screen/OpenGL/RenderBuffer.hpp	/^  void Delete() {$/;"	f	class:GLRenderBuffer
Delete	Widget/RowFormWidget.hpp	/^    void Delete() {$/;"	f	struct:RowFormWidget::Row
DeleteAllFlights	Dialogs/Device/ManageCAI302Dialog.cpp	/^    DeleteAllFlights,$/;"	e	enum:final::Controls	file:
DeleteClicked	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::DeleteClicked()$/;"	f	class:PlaneListWidget
DeleteClicked	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::DeleteClicked()$/;"	f	class:ProfileListWidget
DeleteDisposer	Util/DeleteDisposer.hxx	/^class DeleteDisposer {$/;"	c
DeleteFramebuffers	Screen/OpenGL/FBO.cpp	/^FBO::DeleteFramebuffers(GLsizei n, GLuint *framebuffers)$/;"	f	class:FBO
DeleteOldestIGCFile	Logger/IGCFileCleanup.cpp	/^DeleteOldestIGCFile(unsigned current_year, Path pathname)$/;"	f	file:
DeleteRenderbuffers	Screen/OpenGL/FBO.cpp	/^FBO::DeleteRenderbuffers(GLsizei n, GLuint *renderbuffers)$/;"	f	class:FBO
DeleteTask	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::DeleteTask()$/;"	f	class:TaskListPanel
DeleteValue	Config/Registry.hpp	/^  bool DeleteValue(const TCHAR *name) {$/;"	f	class:RegistryKey
DeleteWidget	Widget/DockWindow.cpp	/^DockWindow::DeleteWidget()$/;"	f	class:DockWindow
DeleteWindow	Widget/WindowWidget.cpp	/^WindowWidget::DeleteWindow()$/;"	f	class:WindowWidget
DeltaList	Engine/Trace/Trace.hpp	/^                                     boost::intrusive::constant_time_size<false>> DeltaList;$/;"	t	class:Trace
DeltaRank	Engine/Trace/Trace.hpp	/^    static bool DeltaRank(const TraceDelta &x, const TraceDelta &y) {$/;"	f	struct:Trace::TraceDelta
DeltaRankOp	Engine/Trace/Trace.hpp	/^    struct DeltaRankOp {$/;"	s	struct:Trace::TraceDelta
DeltaTime	Engine/Trace/Point.hpp	/^  unsigned DeltaTime(const TracePoint &previous) const {$/;"	f	class:TracePoint
DeltaTime	Time/DeltaTime.hpp	/^class DeltaTime {$/;"	c
DemoReplay	Replay/DemoReplay.cpp	/^DemoReplay::DemoReplay():$/;"	f	class:DemoReplay
DemoReplay	Replay/DemoReplay.hpp	/^class DemoReplay$/;"	c
DemoReplayGlue	Replay/DemoReplayGlue.cpp	/^DemoReplayGlue::DemoReplayGlue(ProtectedTaskManager &_task_manager)$/;"	f	class:DemoReplayGlue
DemoReplayGlue	Replay/DemoReplayGlue.hpp	/^class DemoReplayGlue$/;"	c
DereferenceContainerAdapter	Util/DereferenceIterator.hxx	/^class DereferenceContainerAdapter {$/;"	c
DereferenceIterator	Util/DereferenceIterator.hxx	/^class DereferenceIterator {$/;"	c
DeriveAverage	Math/DifferentialWindowFilter.hpp	/^  double DeriveAverage() const {$/;"	f	class:DifferentialWindowFilter
DerivedInfo	NMEA/Derived.hpp	/^struct DerivedInfo: $/;"	s
Desaturate	Screen/Color.cpp	/^Color Desaturate(Color c) {$/;"	f
Deserialise	Task/Deserialiser.cpp	/^Deserialise(GeoPoint &data, const ConstDataNode &node)$/;"	f	file:
Deserialise	Task/Deserialiser.cpp	/^Deserialise(OrderedTaskSettings &data, const ConstDataNode &node)$/;"	f	file:
DeserialiseOZ	Task/Deserialiser.cpp	/^DeserialiseOZ(const Waypoint &wp, const ConstDataNode &node, bool is_turnpoint)$/;"	f	file:
DeserialiseTaskpoint	Task/Deserialiser.cpp	/^DeserialiseTaskpoint(OrderedTask &data, const ConstDataNode &node,$/;"	f	file:
DeserialiseWaypoint	Task/Deserialiser.cpp	/^DeserialiseWaypoint(const ConstDataNode &node, const Waypoints *waypoints)$/;"	f	file:
Deserialiser	Cloud/Serialiser.hpp	/^  explicit Deserialiser(Reader &_r):BufferedReader(_r) {}$/;"	f	class:Deserialiser
Deserialiser	Cloud/Serialiser.hpp	/^class Deserialiser : public BufferedReader {$/;"	c
Design	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::Design(const double cutoff_wavelength)$/;"	f	class:AircraftStateFilter
Design	Math/Filter.cpp	/^Filter::Design(const double cutoff_wavelength, const bool bessel)$/;"	f	class:Filter
DestinationAngleGround	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::DestinationAngleGround() const$/;"	f	class:GlideResult
Destroy	Audio/SLES/Object.hpp	/^    void Destroy() {$/;"	f	class:SLES::Object
Destroy	Engine/Airspace/Airspace.cpp	/^Airspace::Destroy()$/;"	f	class:Airspace
Destroy	IO/Async/SignalListener.cpp	/^SignalListener::Destroy()$/;"	f	class:SignalListener
Destroy	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Destroy()$/;"	f	class:InfoBoxManager
Destroy	MainWindow.cpp	/^MainWindow::Destroy()$/;"	f	class:MainWindow
Destroy	Menu/ButtonLabel.cpp	/^ButtonLabel::Destroy()$/;"	f	class:ButtonLabel
Destroy	Screen/Android/Font.cpp	/^Font::Destroy()$/;"	f	class:Font
Destroy	Screen/Brush.hpp	/^Brush::Destroy()$/;"	f	class:Brush
Destroy	Screen/EGL/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destroy	Screen/FB/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destroy	Screen/Font.hpp	/^  void Destroy() {}$/;"	f	class:Font
Destroy	Screen/FreeType/Font.cpp	/^Font::Destroy()$/;"	f	class:Font
Destroy	Screen/GDI/Brush.cpp	/^Brush::Destroy()$/;"	f	class:Brush
Destroy	Screen/GDI/BufferCanvas.cpp	/^BufferCanvas::Destroy()$/;"	f	class:BufferCanvas
Destroy	Screen/GDI/Canvas.hpp	/^  void Destroy() {$/;"	f	class:Canvas
Destroy	Screen/GDI/Font.cpp	/^Font::Destroy()$/;"	f	class:Font
Destroy	Screen/GDI/Pen.cpp	/^Pen::Destroy()$/;"	f	class:Pen
Destroy	Screen/GDI/VirtualCanvas.cpp	/^void VirtualCanvas::Destroy()$/;"	f	class:VirtualCanvas
Destroy	Screen/GLX/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destroy	Screen/Memory/VirtualCanvas.cpp	/^VirtualCanvas::Destroy()$/;"	f	class:VirtualCanvas
Destroy	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::Destroy()$/;"	f	class:BufferCanvas
Destroy	Screen/Pen.hpp	/^Pen::Destroy()$/;"	f	class:Pen
Destroy	Screen/SDL/TopCanvas.cpp	/^TopCanvas::Destroy()$/;"	f	class:TopCanvas
Destruct	Util/Cache.hxx	/^		void Destruct() {$/;"	f	class:Cache::Item
Destruct	Util/Manual.hxx	/^	void Destruct() {$/;"	f	class:Manual
DetachFramebuffer	Screen/OpenGL/RenderBuffer.hpp	/^  static void DetachFramebuffer(GLenum attachment) {$/;"	f	class:GLRenderBuffer
DetailsClicked	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::DetailsClicked()$/;"	f	class:NOAAListWidget
DetectAdditionalTemperaturesToken	Weather/METARParser.cpp	/^DetectAdditionalTemperaturesToken(const TCHAR *token)$/;"	f	file:
DetectCAVOK	Weather/METARParser.cpp	/^DetectCAVOK(const TCHAR *token)$/;"	f	file:
DetectFileType	Airspace/AirspaceParser.cpp	/^DetectFileType(const TCHAR *line)$/;"	f	file:
DetectGPS	Device/Port/ConfiguredPort.cpp	/^DetectGPS(TCHAR *path, size_t path_max_size)$/;"	f	file:
DetectICAOCodeToken	Weather/METARParser.cpp	/^DetectICAOCodeToken(const TCHAR *token)$/;"	f	file:
DetectKoboModel	Kobo/Model.cpp	/^DetectKoboModel()$/;"	f
DetectKoboModel	Kobo/Model.cpp	/^DetectKoboModel(const char *p)$/;"	f	file:
DetectLanguage	Language/LanguageGlue.cpp	/^DetectLanguage()$/;"	f	file:
DetectQNHToken	Weather/METARParser.cpp	/^DetectQNHToken(const TCHAR *token)$/;"	f	file:
DetectSerialPorts	Dialogs/Device/DeviceEditWidget.cpp	/^DetectSerialPorts(DataFieldEnum &df)$/;"	f	file:
DetectTemperaturesToken	Weather/METARParser.cpp	/^DetectTemperaturesToken(const TCHAR *token)$/;"	f	file:
DetectTimeCodeToken	Weather/METARParser.cpp	/^DetectTimeCodeToken(const TCHAR *token)$/;"	f	file:
DetectVisibilityToken	Weather/METARParser.cpp	/^DetectVisibilityToken(const TCHAR *token)$/;"	f	file:
DetectWindToken	Weather/METARParser.cpp	/^DetectWindToken(const TCHAR *token)$/;"	f	file:
DetermineTeamCodeRefLocation	Computer/GlideComputer.cpp	/^GlideComputer::DetermineTeamCodeRefLocation()$/;"	f	class:GlideComputer
DetermineWaypointFileType	Waypoint/WaypointFileType.cpp	/^DetermineWaypointFileType(Path path)$/;"	f
DetourCostMarker	Profile/ProfileKeys.cpp	/^const char DetourCostMarker[] = "DetourCostMarker";$/;"	m	namespace:ProfileKeys	file:
Device	Device/Driver.hpp	/^class Device {$/;"	c
DeviceBlackboard	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::DeviceBlackboard()$/;"	f	class:DeviceBlackboard
DeviceBlackboard	Blackboard/DeviceBlackboard.hpp	/^class DeviceBlackboard$/;"	c
DeviceConfig	Device/Config.hpp	/^struct DeviceConfig {$/;"	s
DeviceConfigOverlaps	Device/device.cpp	/^DeviceConfigOverlaps(const DeviceConfig &a, const DeviceConfig &b)$/;"	f	file:
DeviceConfigOverlaps	Device/device.cpp	/^DeviceConfigOverlaps(const DeviceConfig &config, I begin, I end)$/;"	f	file:
DeviceDeclare	Logger/ExternalLogger.cpp	/^DeviceDeclare(DeviceDescriptor &dev, const Declaration &declaration,$/;"	f	file:
DeviceDescriptor	Device/Descriptor.cpp	/^DeviceDescriptor::DeviceDescriptor(boost::asio::io_context &_io_context,$/;"	f	class:DeviceDescriptor
DeviceDispatcher	Device/Dispatcher.hpp	/^  DeviceDispatcher(MultipleDevices &_devices, unsigned _exclude)$/;"	f	class:final
DeviceEditWidget	Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::DeviceEditWidget(const DeviceConfig &_config)$/;"	f	class:DeviceEditWidget
DeviceEditWidget	Dialogs/Device/DeviceEditWidget.hpp	/^class DeviceEditWidget : public RowFormWidget, DataFieldListener {$/;"	c
DeviceInfo	NMEA/DeviceInfo.hpp	/^struct DeviceInfo {$/;"	s
DeviceListWidget	Dialogs/Device/DeviceListDialog.cpp	/^  DeviceListWidget(const DialogLook &_look)$/;"	f	class:final
DevicePortChanged	UtilsSettings.cpp	/^bool DevicePortChanged = false;$/;"	v
DeviceRegister	Device/Driver.hpp	/^struct DeviceRegister {$/;"	s
DeviceSettingsMap	Device/SettingsMap.hpp	/^class DeviceSettingsMap {$/;"	c
DialogCatchCallback	Lua/Dialogs.cpp	/^DialogCatchCallback(Lua::Error &&error)$/;"	f	file:
DialogEventLoop	Event/Windows/Loop.hpp	/^  DialogEventLoop(EventQueue &_loop, HWND _dialog)$/;"	f	class:DialogEventLoop
DialogEventLoop	Event/Windows/Loop.hpp	/^class DialogEventLoop : public EventLoop {$/;"	c
DialogFont	Profile/ProfileKeys.cpp	/^const char DialogFont[] = "DialogFont";$/;"	m	namespace:ProfileKeys	file:
DialogJobRunner	Dialogs/JobDialog.hpp	/^  DialogJobRunner(SingleWindow &_parent, const DialogLook &_dialog_look,$/;"	f	class:DialogJobRunner
DialogJobRunner	Dialogs/JobDialog.hpp	/^class DialogJobRunner : public JobRunner {$/;"	c
DialogJobThread	Dialogs/JobDialog.cpp	/^  DialogJobThread(OperationEnvironment &_env, Job &_job, WndForm &_form)$/;"	f	class:DialogJobThread
DialogJobThread	Dialogs/JobDialog.cpp	/^class DialogJobThread : public JobThread {$/;"	c	file:
DialogLook	Look/DialogLook.hpp	/^struct DialogLook {$/;"	s
DialogSettings	Dialogs/DialogSettings.hpp	/^struct DialogSettings {$/;"	s
DiffFilter	Math/DiffFilter.hpp	/^  DiffFilter(const double x_default)$/;"	f	class:DiffFilter
DiffFilter	Math/DiffFilter.hpp	/^class DiffFilter $/;"	c
DifferentialWindowFilter	Math/DifferentialWindowFilter.hpp	/^class DifferentialWindowFilter {$/;"	c
DigitEntry	Form/DigitEntry.cpp	/^DigitEntry::DigitEntry(const DialogLook &_look)$/;"	f	class:DigitEntry
Dijkstra	Engine/PathSolvers/Dijkstra.hpp	/^class Dijkstra$/;"	c
Dijkstra	Engine/PathSolvers/NavDijkstra.hpp	/^  typedef ::Dijkstra<ScanTaskPoint, DijkstraMap> Dijkstra;$/;"	t	class:NavDijkstra
DijkstraMap	Engine/PathSolvers/NavDijkstra.hpp	/^  struct DijkstraMap {$/;"	s	class:NavDijkstra
DirectArrival	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::DirectArrival(FlatGeoPoint dest,$/;"	f	class:FlatTriangleFanTree
Direction	Dialogs/Settings/WindSettingsPanel.hpp	/^    Direction,$/;"	e	enum:final::ControlIndex
Direction	Form/GridView.hpp	/^  enum class Direction$/;"	c	class:GridView
Direction	Geo/ConvexHull/GrahamScan.cpp	/^Direction(const GeoPoint &p0, const GeoPoint &p1, const GeoPoint &p2,$/;"	f	file:
Direction	Renderer/SymbolRenderer.hpp	/^  enum Direction {$/;"	g	namespace:SymbolRenderer
Directory	OS/FileUtil.hpp	/^namespace Directory$/;"	n
DirtyTaskListPanel	Dialogs/Task/Manager/TaskListPanel.cpp	/^DirtyTaskListPanel()$/;"	f
Disable	Device/Port/DumpPort.hpp	/^  void Disable() {$/;"	f	class:final
Disable	Terrain/RasterTile.hpp	/^  void Disable() {$/;"	f	class:RasterTile
DisableAll	Engine/Task/TaskBehaviour.cpp	/^TaskBehaviour::DisableAll()$/;"	f	class:TaskBehaviour
DisableAutoLogger	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  DisableAutoLogger,$/;"	e	enum:ControlIndex	file:
DisableAutoLogger	Profile/ProfileKeys.cpp	/^const char DisableAutoLogger[] = "DisableAutoLogger";$/;"	m	namespace:ProfileKeys	file:
DisableBulkMode	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::DisableBulkMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
DisableClicked	Dialogs/Weather/MapOverlayWidget.cpp	/^  void DisableClicked() {$/;"	f	class:final	file:
DisableDump	Device/Descriptor.cpp	/^DeviceDescriptor::DisableDump()$/;"	f	class:DeviceDescriptor
DisableGeoid	Device/Parser.hpp	/^  void DisableGeoid() {$/;"	f	class:NMEAParser
DisableNetwork	Kobo/WPASupplicant.cpp	/^WPASupplicant::DisableNetwork(unsigned id)$/;"	f	class:WPASupplicant
DisablePan	Pan.cpp	/^DisablePan()$/;"	f
DisallowLanguage	Language/Language.cpp	/^DisallowLanguage()$/;"	f
DisallowLanguage	Language/Language.hpp	/^static inline void DisallowLanguage() {}$/;"	f
DisassociatePointer	Lua/Associate.cpp	/^Lua::DisassociatePointer(lua_State *L, const char *table, void *p)$/;"	f	class:Lua
Disconnect	Device/Driver/IMI/Internal.cpp	/^IMIDevice::Disconnect(OperationEnvironment &env)$/;"	f	class:IMIDevice
Disconnect	Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::Disconnect(Port &port, OperationEnvironment &env)$/;"	f	class:IMI
Dispatch	Event/Android/Loop.cpp	/^EventLoop::Dispatch(const Event &event)$/;"	f	class:EventLoop
Dispatch	Event/Poll/Loop.cpp	/^EventLoop::Dispatch(const Event &event)$/;"	f	class:EventLoop
Dispatch	Event/SDL/Loop.cpp	/^EventLoop::Dispatch(const Event &_event)$/;"	f	class:EventLoop
Dispatch	Event/Windows/Loop.cpp	/^DialogEventLoop::Dispatch(Event &event)$/;"	f	class:DialogEventLoop
Dispatch	Event/Windows/Loop.cpp	/^EventLoop::Dispatch(const Event &event)$/;"	f	class:EventLoop
DispatchWait	IO/Async/AsioUtil.hpp	/^DispatchWait(boost::asio::io_service &io_service, F &&f)$/;"	f
Display	Event/Poll/X11Queue.cpp	32;"	d	file:
Display	Event/Poll/X11Queue.cpp	39;"	d	file:
Display	Event/Poll/X11Queue.hpp	33;"	d
Display	Event/Poll/X11Queue.hpp	39;"	d
Display	Hardware/DisplayDPI.cpp	38;"	d	file:
Display	Hardware/DisplayDPI.cpp	42;"	d	file:
Display	Hardware/DisplayDPI.hpp	/^namespace Display {$/;"	n
Display	Hardware/DisplayGlue.hpp	/^namespace Display$/;"	n
Display	Hardware/DisplaySize.cpp	35;"	d	file:
Display	Hardware/DisplaySize.cpp	39;"	d	file:
Display	Hardware/DisplaySize.hpp	/^namespace Display {$/;"	n
Display	Screen/Custom/TopCanvas.hpp	57;"	d
Display	Screen/Custom/TopCanvas.hpp	61;"	d
Display	Screen/EGL/System.hpp	35;"	d
Display	Screen/EGL/System.hpp	47;"	d
Display	Screen/GLX/System.hpp	30;"	d
Display	Screen/GLX/System.hpp	36;"	d
Display	Screen/OpenGL/Function.hpp	37;"	d
Display	Screen/OpenGL/Function.hpp	43;"	d
Display	Screen/TopWindow.hpp	63;"	d
Display	Screen/TopWindow.hpp	71;"	d
DisplayGroundTrack	MapSettings.hpp	/^enum class DisplayGroundTrack: uint8_t {$/;"	c
DisplayInfoBox	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::DisplayInfoBox()$/;"	f	class:InfoBoxManager
DisplayMode	DisplayMode.hpp	/^enum class DisplayMode: uint8_t {$/;"	c
DisplayOrientation	DisplayOrientation.hpp	/^enum class DisplayOrientation : uint8_t {$/;"	c
DisplayOrientation	Event/Poll/InputQueue.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Event/Poll/Queue.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Hardware/RotateDisplay.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Screen/Custom/TopCanvas.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Screen/OpenGL/BufferCanvas.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Screen/OpenGL/Globals.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Screen/OpenGL/Init.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplayOrientation	Screen/TopWindow.hpp	/^enum class DisplayOrientation : uint8_t;$/;"	c
DisplaySettings	DisplaySettings.hpp	/^struct DisplaySettings {$/;"	s
DisplaySkyLinesTrafficMapMode	MapSettings.hpp	/^enum class DisplaySkyLinesTrafficMapMode: uint8_t {$/;"	c
DisplayText	Profile/ProfileKeys.cpp	/^const char DisplayText[] = "DisplayText";$/;"	m	namespace:ProfileKeys	file:
DisplayTextType	Renderer/WaypointRendererSettings.hpp	/^  enum class DisplayTextType : uint8_t {$/;"	c	struct:WaypointRendererSettings
DisplayTrackBearing	Profile/ProfileKeys.cpp	/^const char DisplayTrackBearing[] = "DisplayTrackBearing";$/;"	m	namespace:ProfileKeys	file:
DisplayUpValue	Profile/ProfileKeys.cpp	/^const char DisplayUpValue[] = "DisplayUp";$/;"	m	namespace:ProfileKeys	file:
Disposer	Engine/Trace/Trace.hpp	/^  struct Disposer {$/;"	s	class:Trace
Distance	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Distance,$/;"	e	enum:Controls	file:
Distance	Engine/Route/RouteLink.hpp	/^  unsigned Distance() const {$/;"	f	struct:RouteLinkBase
Distance	Engine/Task/Points/TaskPoint.hpp	/^  double Distance(const GeoPoint &ref) const {$/;"	f	class:TaskPoint
Distance	Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::Distance(const FlatBoundingBox &f) const$/;"	f	class:FlatBoundingBox
Distance	Geo/Flat/FlatGeoPoint.cpp	/^FlatGeoPoint::Distance(const FlatGeoPoint &sp) const$/;"	f	class:FlatGeoPoint
Distance	Geo/Flat/FlatPoint.hpp	/^  double Distance(FlatPoint p) const {$/;"	f	struct:FlatPoint
Distance	Geo/GeoPoint.cpp	/^GeoPoint::Distance(const GeoPoint &other) const$/;"	f	class:GeoPoint
Distance	Geo/Math.cpp	/^Distance(const GeoPoint &loc1, const GeoPoint &loc2)$/;"	f
Distance	Geo/Memento/DistanceMemento.cpp	/^DistanceMemento::Distance(const GeoPoint& _origin,$/;"	f	class:DistanceMemento
Distance1D	Geo/Flat/FlatBoundingBox.cpp	/^Distance1D(int a1, int a2, int b1, int b2)$/;"	f	file:
DistanceBearing	Geo/GeoPoint.cpp	/^GeoPoint::DistanceBearing(const GeoPoint &other) const$/;"	f	class:GeoPoint
DistanceBearing	Geo/Math.cpp	/^DistanceBearing(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f
DistanceBearingS	Geo/GeoPoint.cpp	/^GeoPoint::DistanceBearingS(const GeoPoint &other) const$/;"	f	class:GeoPoint
DistanceBearingS	Geo/SimplifiedMath.cpp	/^DistanceBearingS(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f
DistanceIsSignificant	Engine/Task/Ordered/OrderedTask.cpp	/^DistanceIsSignificant(const SearchPoint &a1, const SearchPoint &a2,$/;"	f	file:
DistanceIsSignificant	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::DistanceIsSignificant(const GeoPoint &location,$/;"	f	class:OrderedTask
DistanceMemento	Geo/Memento/DistanceMemento.hpp	/^  DistanceMemento(): value(-1.0) {}$/;"	f	class:DistanceMemento
DistanceMemento	Geo/Memento/DistanceMemento.hpp	/^class DistanceMemento$/;"	c
DistanceMetersToPixels	Projection/Projection.hpp	/^  double DistanceMetersToPixels(const double distance) const {$/;"	f	class:Projection
DistanceMetric	Engine/Trace/Trace.hpp	/^    static unsigned DistanceMetric(const TracePoint &last,$/;"	f	struct:Trace::TraceDelta
DistancePixelsCoarse	Terrain/RasterProjection.hpp	/^  gcc_pure unsigned DistancePixelsCoarse(double distance) const {$/;"	f	class:RasterProjection
DistancePixelsFine	Terrain/RasterProjection.cpp	/^RasterProjection::DistancePixelsFine(double distance) const$/;"	f	class:RasterProjection
DistancePixelsToMeters	Projection/Projection.hpp	/^  double DistancePixelsToMeters(const int x) const {$/;"	f	class:Projection
DistanceS	Geo/GeoPoint.cpp	/^GeoPoint::DistanceS(const GeoPoint &other) const$/;"	f	class:GeoPoint
DistanceSquared	Geo/Flat/FlatGeoPoint.cpp	/^FlatGeoPoint::DistanceSquared(const FlatGeoPoint &sp) const$/;"	f	class:FlatGeoPoint
DistanceStat	Engine/Task/Stats/DistanceStat.hpp	/^class DistanceStat$/;"	c
DistanceStatComputer	Engine/Task/Computer/DistanceStatComputer.hpp	/^  DistanceStatComputer(const bool is_positive=true)$/;"	f	class:DistanceStatComputer
DistanceStatComputer	Engine/Task/Computer/DistanceStatComputer.hpp	/^class DistanceStatComputer {$/;"	c
DistanceTo	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  double DistanceTo(const GeoPoint &ref) const {$/;"	f	class:ObservationZonePoint
DistanceTo	Geo/SearchPoint.hpp	/^  double DistanceTo(const GeoPoint &ref) const {$/;"	f	class:SearchPoint
DistanceUnit	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    DistanceUnit,$/;"	e	enum:final::Controls
DistanceUnitsValue	Profile/ProfileKeys.cpp	/^const char DistanceUnitsValue[] = "DistanceUnit";$/;"	m	namespace:ProfileKeys	file:
DistinctIntersection	Geo/Flat/FlatRay.cpp	/^FlatRay::DistinctIntersection(const FlatRay& that) const$/;"	f	class:FlatRay
Dither	Screen/Memory/Dither.hpp	/^class Dither {$/;"	c
DitherGreyscale	Screen/Memory/Dither.cpp	/^Dither::DitherGreyscale(const uint8_t *gcc_restrict src,$/;"	f	class:Dither
Divert	Engine/Task/Unordered/AlternateTask.hpp	/^    Divert(WaypointPtr &&_waypoint, const GlideResult &_solution,$/;"	f	struct:final::Divert
Divert	Engine/Task/Unordered/AlternateTask.hpp	/^  struct Divert : public AlternatePoint {$/;"	s	class:final
DivertVector	Engine/Task/Unordered/AlternateTask.hpp	/^  typedef std::vector<Divert> DivertVector;$/;"	t	class:final
DoAbsolute	Event/Shared/RotatePointer.hpp	/^  PixelPoint DoAbsolute(PixelPoint p) const {$/;"	f	class:RotatePointer
DoAdvance	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::DoAdvance(TaskAccessor& task)$/;"	f	class:TaskAutoPilot
DoBackspace	Dialogs/TouchTextEntry.cpp	/^DoBackspace()$/;"	f	file:
DoCharacter	Dialogs/TouchTextEntry.cpp	/^DoCharacter(TCHAR character)$/;"	f	file:
DoDeclare	Device/Descriptor.cpp	/^DoDeclare(const struct Declaration &declaration,$/;"	f	file:
DoDeviceDeclare	Logger/ExternalLogger.cpp	/^DoDeviceDeclare(DeviceDescriptor &device, const Declaration &declaration,$/;"	f	file:
DoDownloadFlight	Logger/ExternalLogger.cpp	/^DoDownloadFlight(DeviceDescriptor &device,$/;"	f	file:
DoGoto	Engine/Task/TaskManager.cpp	/^TaskManager::DoGoto(WaypointPtr &&wp)$/;"	f	class:TaskManager
DoGoto	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::DoGoto(WaypointPtr &&wp)$/;"	f	class:GotoTask
DoGoto	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::DoGoto(WaypointPtr &&wp)$/;"	f	class:ProtectedTaskManager
DoGoto	Task/ProtectedTaskManager.hpp	/^  bool DoGoto(const WaypointPtr &wp) {$/;"	f	class:ProtectedTaskManager
DoLogging	Computer/StatsComputer.cpp	/^StatsComputer::DoLogging(const MoreData &basic,$/;"	f	class:StatsComputer
DoQueuedEvents	Input/InputQueue.cpp	/^InputEvents::DoQueuedEvents()$/;"	f	class:InputEvents
DoReadFlightList	Logger/ExternalLogger.cpp	/^DoReadFlightList(DeviceDescriptor &device, RecordedFlightList &flight_list)$/;"	f	file:
DoRelative	Event/Shared/RotatePointer.hpp	/^  PixelPoint DoRelative(PixelPoint p) const {$/;"	f	class:RotatePointer
DockWindow	Widget/DockWindow.hpp	/^  DockWindow():widget(nullptr) {}$/;"	f	class:DockWindow
DockWindow	Widget/DockWindow.hpp	/^class DockWindow : public ContainerWindow {$/;"	c
DoesRequireArm	Engine/Task/Ordered/Points/StartPoint.hpp	/^  bool DoesRequireArm() const {$/;"	f	class:final
DollarExpand	Util/DollarExpand.hpp	/^DollarExpand(const TCHAR *src, TCHAR *dest, size_t dest_size,$/;"	f
Donate	OS/Path.hpp	/^  static AllocatedPath Donate(pointer value) {$/;"	f	class:AllocatedPath
Donate	Util/LightString.hxx	/^	static LightString Donate(pointer allocation) {$/;"	f	class:LightString
DotProduct	Engine/Route/RouteLink.hpp	/^  constexpr int DotProduct(const RouteLinkBase& o) const {$/;"	f	struct:RouteLinkBase
DotProduct	Geo/Flat/FlatGeoPoint.hpp	/^  constexpr int DotProduct(FlatGeoPoint other) const {$/;"	f	struct:FlatGeoPoint
DotProduct	Geo/Flat/FlatPoint.hpp	/^  constexpr double DotProduct(FlatPoint other) const {$/;"	f	struct:FlatPoint
DotProduct	Math/Line2D.hpp	/^  constexpr product_type DotProduct(Line2D<P> other) const {$/;"	f	struct:Line2D
DoubleBufferWindow	Screen/DoubleBufferWindow.hpp	/^class DoubleBufferWindow : public PaintWindow {$/;"	c
DoubleClick	Screen/Custom/DoubleClick.hpp	/^class DoubleClick {$/;"	c
DoubleDistance	Geo/Math.cpp	/^DoubleDistance(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f
DoubleLegDistance	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::DoubleLegDistance(const GeoPoint &ref) const$/;"	f	class:OrderedTaskPoint
DoublePoint2D	Math/Point2D.hpp	/^struct DoublePoint2D : Point2D<double> {$/;"	s
Download	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::Download()$/;"	f	class:DownloadFilePickerWidget
Download	Dialogs/FileManager.cpp	/^ManagedFileListWidget::Download()$/;"	f	class:ManagedFileListWidget
DownloadCommand	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadCommand(Port &port, const char *command,$/;"	f	class:CAI302
DownloadFile	Dialogs/DownloadFilePicker.cpp	/^DownloadFile(const char *uri, const char *_base)$/;"	f	file:
DownloadFilePicker	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePicker(FileType file_type)$/;"	f
DownloadFilePickerWidget	Dialogs/DownloadFilePicker.cpp	/^  DownloadFilePickerWidget(WidgetDialog &_dialog, FileType _file_type)$/;"	f	class:final
DownloadFlight	Device/Descriptor.cpp	/^DeviceDescriptor::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:DeviceDescriptor
DownloadFlight	Device/Driver.cpp	/^AbstractDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:AbstractDevice
DownloadFlight	Device/Driver/CAI302/Logger.cpp	/^CAI302Device::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:CAI302Device
DownloadFlight	Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::DownloadFlight(Path path, OperationEnvironment &env)$/;"	f	class:FlarmDevice
DownloadFlight	Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:FlarmDevice
DownloadFlight	Device/Driver/Flytec/Logger.cpp	/^FlytecDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:FlytecDevice
DownloadFlight	Device/Driver/IMI/Logger.cpp	/^IMIDevice::DownloadFlight(const RecordedFlightInfo &flight, Path path,$/;"	f	class:IMIDevice
DownloadFlight	Device/Driver/LX/Logger.cpp	/^LXDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:LXDevice
DownloadFlight	Device/Driver/LX/NanoLogger.cpp	/^Nano::DownloadFlight(Port &port, const RecordedFlightInfo &flight,$/;"	f	class:Nano
DownloadFlight	Device/Driver/Volkslogger/Logger.cpp	/^VolksloggerDevice::DownloadFlight(const RecordedFlightInfo &flight,$/;"	f	class:VolksloggerDevice
DownloadFlightFrom	Logger/ExternalLogger.cpp	/^ExternalLogger::DownloadFlightFrom(DeviceDescriptor &device)$/;"	f	class:ExternalLogger
DownloadFlightFromCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::DownloadFlightFromCurrent()$/;"	f	class:DeviceListWidget
DownloadFlightInner	Device/Driver/CAI302/Logger.cpp	/^DownloadFlightInner(Port &port, const RecordedFlightInfo &flight,$/;"	f	file:
DownloadFlightInner	Device/Driver/LX/Logger.cpp	/^DownloadFlightInner(Port &port, const RecordedFlightInfo &flight,$/;"	f	file:
DownloadFlightInner	Device/Driver/LX/NanoLogger.cpp	/^DownloadFlightInner(Port &port, const char *filename, BufferedOutputStream &os,$/;"	f	file:
DownloadFlightInner	Device/Driver/Volkslogger/Logger.cpp	/^DownloadFlightInner(Port &port, unsigned bulkrate,$/;"	f	file:
DownloadFlightJob	Logger/ExternalLogger.cpp	/^  DownloadFlightJob(DeviceDescriptor &_device,$/;"	f	class:DownloadFlightJob
DownloadFlightJob	Logger/ExternalLogger.cpp	/^class DownloadFlightJob {$/;"	c	file:
DownloadLatestImage	Weather/PCMet/Images.cpp	/^PCMet::DownloadLatestImage(const char *type, const char *area,$/;"	f	class:PCMet
DownloadListener	Net/HTTP/DownloadManager.hpp	/^  class DownloadListener {$/;"	c	namespace:Net
DownloadMETAR	Weather/NOAADownloader.cpp	/^NOAADownloader::DownloadMETAR(const char *code, METAR &metar,$/;"	f	class:NOAADownloader
DownloadManager	Net/HTTP/DownloadManager.hpp	/^  namespace DownloadManager {$/;"	n	namespace:Net
DownloadManagerThread	Net/HTTP/DownloadManager.cpp	/^  DownloadManagerThread()$/;"	f	class:final
DownloadMode	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::DownloadMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
DownloadMode	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
DownloadNavpoint	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadNavpoint(Port &port, const GeoPoint &location,$/;"	f	class:CAI302
DownloadOverlay	Weather/PCMet/Overlays.cpp	/^PCMet::DownloadOverlay(const OverlayInfo &info, BrokenDateTime now_utc,$/;"	f	class:PCMet
DownloadPilot	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadPilot(Port &port, const Pilot &pilot, unsigned ordinal,$/;"	f	class:CAI302
DownloadPolar	Device/Driver/CAI302/Protocol.cpp	/^CAI302::DownloadPolar(Port &port, const Polar &polar,$/;"	f	class:CAI302
DownloadProgress	Dialogs/DownloadFilePicker.cpp	/^  DownloadProgress(ProgressDialog &_dialog,$/;"	f	class:final
DownloadStatus	Dialogs/FileManager.cpp	/^  struct DownloadStatus {$/;"	s	class:ManagedFileListWidget	file:
DownloadTAF	Weather/NOAADownloader.cpp	/^NOAADownloader::DownloadTAF(const char *code, TAF &taf,$/;"	f	class:NOAADownloader
DownloadToBuffer	Net/HTTP/ToBuffer.cpp	/^Net::DownloadToBuffer(Session &session, const char *url,$/;"	f	class:Net
DownloadToBuffer	Net/HTTP/ToBuffer.hpp	/^  static inline size_t DownloadToBuffer(Session &session, const char *url,$/;"	f	namespace:Net
DownloadToBufferHandler	Net/HTTP/ToBuffer.cpp	/^  DownloadToBufferHandler(void *_buffer, size_t _max_size,$/;"	f	class:final
DownloadToBufferJob	Net/HTTP/ToBuffer.hpp	/^    DownloadToBufferJob(Session &_session, const char *_url,$/;"	f	class:Net::DownloadToBufferJob
DownloadToBufferJob	Net/HTTP/ToBuffer.hpp	/^  class DownloadToBufferJob : public Job {$/;"	c	namespace:Net
DownloadToFile	Net/HTTP/ToFile.cpp	/^DownloadToFile(Net::Session &session, const char *url,$/;"	f	file:
DownloadToFile	Net/HTTP/ToFile.cpp	/^Net::DownloadToFile(Session &session, const char *url,$/;"	f	class:Net
DownloadToFile	Net/HTTP/ToFile.hpp	/^  DownloadToFile(Session &session, const char *url,$/;"	f	namespace:Net
DownloadToFileJob	Net/HTTP/ToFile.hpp	/^    DownloadToFileJob(Session &_session, const char *_url, Path _path)$/;"	f	class:Net::DownloadToFileJob
DownloadToFileJob	Net/HTTP/ToFile.hpp	/^  class DownloadToFileJob : public Job {$/;"	c	namespace:Net
DownloadToFileTransaction	Net/HTTP/DownloadManager.cpp	/^DownloadToFileTransaction(Net::Session &session,$/;"	f	file:
DragBegin	Form/ScrollBar.cpp	/^ScrollBar::DragBegin(PaintWindow *w, unsigned y)$/;"	f	class:ScrollBar
DragEnd	Form/ScrollBar.cpp	/^ScrollBar::DragEnd(PaintWindow *w)$/;"	f	class:ScrollBar
DragEnd	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::DragEnd()$/;"	f	class:TabMenuDisplay
DragMode	Form/List.hpp	/^  enum class DragMode {$/;"	c	class:ListControl
DragMode	MapWindow/GlueMapWindow.hpp	/^  enum DragMode {$/;"	g	class:GlueMapWindow
DragMode	MapWindow/TargetMapWindow.hpp	/^  enum DragMode {$/;"	g	class:TargetMapWindow
DragMove	Form/ScrollBar.cpp	/^ScrollBar::DragMove(unsigned size, unsigned view_size, int y) const$/;"	f	class:ScrollBar
Drain	Device/Port/AndroidPort.cpp	/^AndroidPort::Drain()$/;"	f	class:AndroidPort
Drain	Device/Port/DumpPort.cpp	/^DumpPort::Drain()$/;"	f	class:DumpPort
Drain	Device/Port/K6BtPort.cpp	/^K6BtPort::Drain()$/;"	f	class:K6BtPort
Drain	Device/Port/NullPort.cpp	/^NullPort::Drain()$/;"	f	class:NullPort
Drain	Device/Port/SerialPort.cpp	/^SerialPort::Drain()$/;"	f	class:SerialPort
Drain	Device/Port/TTYPort.cpp	/^TTYPort::Drain()$/;"	f	class:TTYPort
Draw	CrossSection/AirspaceXSRenderer.cpp	/^AirspaceXSRenderer::Draw(Canvas &canvas, const ChartRenderer &chart,$/;"	f	class:AirspaceXSRenderer
Draw	CrossSection/TerrainXSRenderer.cpp	/^TerrainXSRenderer::Draw(Canvas &canvas, const ChartRenderer &chart,$/;"	f	class:TerrainXSRenderer
Draw	Form/TabDisplay.hpp	/^  void Draw(Canvas &canvas, const DialogLook &look,$/;"	f	class:TabButton
Draw	Form/TabMenuDisplay.hpp	/^    void Draw(Canvas &canvas, const DialogLook &look,$/;"	f	struct:final::MainMenuButton
Draw	Form/TabMenuDisplay.hpp	/^    void Draw(Canvas &canvas, const DialogLook &look,$/;"	f	struct:final::SubMenuButton
Draw	Kobo/PowerOff.cpp	/^Draw(Canvas &canvas)$/;"	f	file:
Draw	Renderer/AircraftRenderer.cpp	/^AircraftRenderer::Draw(Canvas &canvas, const MapSettings &settings_map,$/;"	f	class:AircraftRenderer
Draw	Renderer/AirspaceLabelRenderer.cpp	/^AirspaceLabelRenderer::Draw(Canvas &canvas,$/;"	f	class:AirspaceLabelRenderer
Draw	Renderer/AirspaceListRenderer.cpp	/^AirspaceListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:AirspaceListRenderer
Draw	Renderer/AirspaceListRenderer.cpp	/^Draw(Canvas &canvas, PixelRect rc,$/;"	f	file:
Draw	Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::Draw(Canvas &canvas, const AbstractAirspace &airspace,$/;"	f	class:AirspacePreviewRenderer
Draw	Renderer/AirspaceRenderer.cpp	/^AirspaceRenderer::Draw(Canvas &canvas,$/;"	f	class:AirspaceRenderer
Draw	Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::Draw(Canvas& canvas,$/;"	f	class:BackgroundRenderer
Draw	Renderer/BestCruiseArrowRenderer.cpp	/^BestCruiseArrowRenderer::Draw(Canvas &canvas, const TaskLook &look,$/;"	f	class:BestCruiseArrowRenderer
Draw	Renderer/ClimbPercentRenderer.cpp	/^ClimbPercentRenderer::Draw(const CirclingInfo& stats, Canvas &canvas,$/;"	f	class:ClimbPercentRenderer
Draw	Renderer/CompassRenderer.cpp	/^CompassRenderer::Draw(Canvas &canvas, const Angle screen_angle,$/;"	f	class:CompassRenderer
Draw	Renderer/FinalGlideBarRenderer.cpp	/^FinalGlideBarRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:FinalGlideBarRenderer
Draw	Renderer/FlightListRenderer.cpp	/^FlightListRenderer::Draw(Canvas &canvas, PixelRect rc)$/;"	f	class:FlightListRenderer
Draw	Renderer/HorizonRenderer.cpp	/^HorizonRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:HorizonRenderer
Draw	Renderer/MapItemListRenderer.cpp	/^Draw(Canvas &canvas, PixelRect rc,$/;"	f	file:
Draw	Renderer/MapItemListRenderer.cpp	/^Draw(Canvas &canvas, const PixelRect rc,$/;"	f	file:
Draw	Renderer/MapItemListRenderer.cpp	/^MapItemListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:MapItemListRenderer
Draw	Renderer/NOAAListRenderer.cpp	/^NOAAListRenderer::Draw(Canvas &canvas, PixelRect rc,$/;"	f	class:NOAAListRenderer
Draw	Renderer/NOAAListRenderer.cpp	/^NOAAListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:NOAAListRenderer
Draw	Renderer/OZPreviewRenderer.cpp	/^OZPreviewRenderer::Draw(Canvas &canvas, const ObservationZonePoint &oz,$/;"	f	class:OZPreviewRenderer
Draw	Renderer/OZRenderer.cpp	/^OZRenderer::Draw(Canvas &canvas, Layer layer, const Projection &projection,$/;"	f	class:OZRenderer
Draw	Renderer/RotatedPolygonRenderer.hpp	/^  void Draw(Canvas &canvas, unsigned start, unsigned n) const {$/;"	f	class:RotatedPolygonRenderer
Draw	Renderer/TabRenderer.cpp	/^TabRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TabRenderer
Draw	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::Draw(const TaskPoint &tp, Layer layer)$/;"	f	class:TaskPointRenderer
Draw	Renderer/TaskProgressRenderer.cpp	/^TaskProgressRenderer::Draw(const TaskSummary& summary, Canvas &canvas,$/;"	f	class:TaskProgressRenderer
Draw	Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const AbortTask &task)$/;"	f	class:TaskRenderer
Draw	Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const GotoTask &task)$/;"	f	class:TaskRenderer
Draw	Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const OrderedTask &task)$/;"	f	class:TaskRenderer
Draw	Renderer/TaskRenderer.cpp	/^TaskRenderer::Draw(const TaskInterface &task)$/;"	f	class:TaskRenderer
Draw	Renderer/TextRenderer.cpp	/^TextRenderer::Draw(Canvas &canvas, PixelRect rc,$/;"	f	class:TextRenderer
Draw	Renderer/TrackLineRenderer.cpp	/^TrackLineRenderer::Draw(Canvas &canvas, const Angle screen_angle,$/;"	f	class:TrackLineRenderer
Draw	Renderer/TrackLineRenderer.cpp	/^TrackLineRenderer::Draw(Canvas &canvas,$/;"	f	class:TrackLineRenderer
Draw	Renderer/TrafficRenderer.cpp	/^TrafficRenderer::Draw(Canvas &canvas, const TrafficLook &traffic_look,$/;"	f	class:TrafficRenderer
Draw	Renderer/TrailRenderer.cpp	/^TrailRenderer::Draw(Canvas &canvas, const TraceComputer &trace_computer,$/;"	f	class:TrailRenderer
Draw	Renderer/TrailRenderer.cpp	/^TrailRenderer::Draw(Canvas &canvas, const WindowProjection &projection)$/;"	f	class:TrailRenderer
Draw	Renderer/VarioBarRenderer.cpp	/^VarioBarRenderer::Draw(Canvas &canvas, const PixelRect &rc,$/;"	f	class:VarioBarRenderer
Draw	Renderer/WaveRenderer.cpp	/^WaveRenderer::Draw(Canvas &canvas, const WindowProjection &projection,$/;"	f	class:WaveRenderer
Draw	Renderer/WaypointIconRenderer.cpp	/^WaypointIconRenderer::Draw(const Waypoint &waypoint, const PixelPoint &point,$/;"	f	class:WaypointIconRenderer
Draw	Renderer/WaypointListRenderer.cpp	/^Draw(Canvas &canvas, PixelRect rc,$/;"	f	file:
Draw	Renderer/WaypointListRenderer.cpp	/^WaypointListRenderer::Draw(Canvas &canvas, PixelRect rc,$/;"	f	class:WaypointListRenderer
Draw	Renderer/WaypointListRenderer.cpp	/^WaypointListRenderer::Draw(Canvas &canvas, const PixelRect rc,$/;"	f	class:WaypointListRenderer
Draw	Renderer/WaypointRenderer.cpp	/^  void Draw(Canvas &canvas) {$/;"	f	class:final
Draw	Renderer/WindArrowRenderer.cpp	/^WindArrowRenderer::Draw(Canvas &canvas, const Angle screen_angle,$/;"	f	class:WindArrowRenderer
Draw	Screen/Icon.cpp	/^MaskedIcon::Draw(Canvas &canvas, PixelPoint p) const$/;"	f	class:MaskedIcon
Draw	Screen/Icon.cpp	/^MaskedIcon::Draw(Canvas &canvas, const PixelRect &rc, bool inverse) const$/;"	f	class:MaskedIcon
Draw	Screen/OpenGL/Texture.cpp	/^GLTexture::Draw(PixelRect dest, PixelRect src) const$/;"	f	class:GLTexture
Draw	Screen/OpenGL/Texture.hpp	/^  void Draw(PixelPoint dest) const {$/;"	f	class:GLTexture
Draw	Terrain/RasterRenderer.cpp	/^RasterRenderer::Draw(Canvas &canvas,$/;"	f	class:RasterRenderer
Draw	Terrain/TerrainRenderer.hpp	/^  void Draw(Canvas &canvas, const WindowProjection &projection) const {$/;"	f	class:TerrainRenderer
Draw	Topography/CachedTopographyRenderer.cpp	/^CachedTopographyRenderer::Draw(Canvas &canvas,$/;"	f	class:CachedTopographyRenderer
Draw	Topography/CachedTopographyRenderer.hpp	/^  void Draw(Canvas &canvas, const WindowProjection &projection) {$/;"	f	class:CachedTopographyRenderer
Draw	Topography/TopographyRenderer.cpp	/^TopographyRenderer::Draw(Canvas &canvas,$/;"	f	class:TopographyRenderer
Draw	Weather/Rasp/RaspRenderer.hpp	/^  void Draw(Canvas &canvas, const WindowProjection &projection) const {$/;"	f	class:RaspRenderer
DrawAnnulus	Screen/GDI/Canvas.cpp	/^Canvas::DrawAnnulus(PixelPoint center,$/;"	f	class:Canvas
DrawAnnulus	Screen/Memory/Canvas.cpp	/^Canvas::DrawAnnulus(PixelPoint center,$/;"	f	class:Canvas
DrawAnnulus	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawAnnulus(PixelPoint center,$/;"	f	class:Canvas
DrawArc	Screen/GDI/Canvas.cpp	/^Canvas::DrawArc(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawArc	Screen/Memory/Canvas.cpp	/^Canvas::DrawArc(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawArc	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawArc(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawArrow	Renderer/NextArrowRenderer.cpp	/^NextArrowRenderer::DrawArrow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:NextArrowRenderer
DrawArrow	Renderer/SymbolRenderer.cpp	/^SymbolRenderer::DrawArrow(Canvas &canvas, PixelRect rc, Direction direction)$/;"	f	class:SymbolRenderer
DrawArrow	Renderer/WindArrowRenderer.cpp	/^WindArrowRenderer::DrawArrow(Canvas &canvas, PixelPoint pos, Angle angle,$/;"	f	class:WindArrowRenderer
DrawArrow	Renderer/WindChartRenderer.cpp	/^DrawArrow(Canvas &canvas, PixelPoint point, const double mag, const Angle angle)$/;"	f	file:
DrawBanner	Kobo/PowerOff.cpp	/^DrawBanner(Canvas &canvas, PixelRect &rc)$/;"	f	file:
DrawBarChart	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawBarChart(const XYDataStore &lsdata)$/;"	f	class:ChartRenderer
DrawBearing	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawBearing(const TaskPoint &tp)$/;"	f	class:TaskPointRenderer
DrawBestCruiseTrack	MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawBestCruiseTrack(Canvas &canvas, const PixelPoint aircraft_pos) const$/;"	f	class:MapWindow
DrawBlankRectangle	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawBlankRectangle(double x_min, double y_min,$/;"	f	class:ChartRenderer
DrawButton	Dialogs/Task/Manager/TaskMapButtonRenderer.cpp	/^TaskMapButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TaskMapButtonRenderer
DrawButton	Dialogs/dlgQuickMenu.cpp	/^QuickMenuButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:QuickMenuButtonRenderer
DrawButton	Menu/ShowMenuButton.cpp	/^ShowMenuButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:ShowMenuButtonRenderer
DrawButton	Renderer/BitmapButtonRenderer.cpp	/^BitmapButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:BitmapButtonRenderer
DrawButton	Renderer/ButtonRenderer.cpp	/^ButtonFrameRenderer::DrawButton(Canvas &canvas, PixelRect rc,$/;"	f	class:ButtonFrameRenderer
DrawButton	Renderer/ColorButtonRenderer.cpp	/^ColorButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:ColorButtonRenderer
DrawButton	Renderer/SymbolButtonRenderer.cpp	/^SymbolButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:SymbolButtonRenderer
DrawButton	Renderer/TextButtonRenderer.cpp	/^TextButtonRenderer::DrawButton(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextButtonRenderer
DrawCaption	Renderer/TextButtonRenderer.cpp	/^TextButtonRenderer::DrawCaption(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextButtonRenderer
DrawCircle	Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::DrawCircle(Canvas &canvas)$/;"	f	class:ThermalAssistantWindow
DrawCircle	MapWindow/MapCanvas.cpp	/^MapCanvas::DrawCircle(const GeoPoint &center, double radius)$/;"	f	class:MapCanvas
DrawCircle	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::DrawCircle(const PixelPoint &center, unsigned radius)$/;"	f	class:StencilMapCanvas
DrawCircle	Screen/GDI/Canvas.hpp	/^  void DrawCircle(int x, int y, unsigned radius) {$/;"	f	class:Canvas
DrawCircle	Screen/Memory/Canvas.cpp	/^Canvas::DrawCircle(int x, int y, unsigned radius)$/;"	f	class:Canvas
DrawCircle	Screen/Memory/RasterCanvas.hpp	/^  void DrawCircle(int x, int y, unsigned rad, color_type color) {$/;"	f	class:RasterCanvas
DrawCircle	Screen/Memory/RasterCanvas.hpp	/^  void DrawCircle(int x, int y, unsigned rad, color_type color,$/;"	f	class:RasterCanvas
DrawCircle	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawCircle(int x, int y, unsigned radius)$/;"	f	class:Canvas
DrawClippedText	Screen/GDI/Canvas.cpp	/^Canvas::DrawClippedText(int x, int y, const PixelRect &_rc,$/;"	f	class:Canvas
DrawClippedText	Screen/GDI/Canvas.cpp	/^Canvas::DrawClippedText(int x, int y, unsigned width,$/;"	f	class:Canvas
DrawClippedText	Screen/Memory/Canvas.cpp	/^Canvas::DrawClippedText(int x, int y, const PixelRect &rc, const TCHAR *text)$/;"	f	class:Canvas
DrawClippedText	Screen/Memory/Canvas.cpp	/^Canvas::DrawClippedText(int x, int y, unsigned width, const TCHAR *text)$/;"	f	class:Canvas
DrawClippedText	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawClippedText(int x, int y,$/;"	f	class:Canvas
DrawClippedText	Screen/OpenGL/Canvas.hpp	/^  void DrawClippedText(int x, int y, const PixelRect &rc,$/;"	f	class:Canvas
DrawClippedText	Screen/OpenGL/Canvas.hpp	/^  void DrawClippedText(int x, int y, unsigned width,$/;"	f	class:Canvas
DrawColumn	Renderer/TextRowRenderer.cpp	/^TextRowRenderer::DrawColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
DrawCompass	MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawCompass(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:MapWindow
DrawContest	MapWindow/MapWindowContest.cpp	/^MapWindow::DrawContest(Canvas &canvas)$/;"	f	class:MapWindow
DrawContestSolution	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::DrawContestSolution(Canvas &canvas,$/;"	f	class:FlightStatisticsRenderer
DrawContestTriangle	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::DrawContestTriangle(Canvas &canvas, const Projection &projection,$/;"	f	class:FlightStatisticsRenderer
DrawCrossHairs	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawCrossHairs(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawDetailedAircraft	Renderer/AircraftRenderer.cpp	/^DrawDetailedAircraft(Canvas &canvas, bool inverse,$/;"	f	file:
DrawDot	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawDot(const double x, const double y, const unsigned _width)$/;"	f	class:ChartRenderer
DrawExactLine	Screen/GDI/Canvas.hpp	/^  void DrawExactLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawExactLine	Screen/GDI/Canvas.hpp	/^  void DrawExactLine(int ax, int ay, int bx, int by) {$/;"	f	class:Canvas
DrawExactLine	Screen/Memory/Canvas.hpp	/^  void DrawExactLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawExactLine	Screen/Memory/Canvas.hpp	/^  void DrawExactLine(int ax, int ay, int bx, int by) {$/;"	f	class:Canvas
DrawExactLine	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawExactLine(int ax, int ay, int bx, int by)$/;"	f	class:Canvas
DrawExactLine	Screen/OpenGL/Canvas.hpp	/^  void DrawExactLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawFLARMTraffic	MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawFLARMTraffic(Canvas &canvas,$/;"	f	class:MapWindow
DrawFill	MapWindow/MapWindowGlideRange.cpp	/^  void DrawFill(Canvas &canvas) const {$/;"	f	struct:ProjectedFans
DrawFill	MapWindow/MapWindowGlideRange.cpp	/^  void DrawFill(Canvas &canvas, const BulkPixelPoint *points) const {$/;"	f	struct:ProjectedFan
DrawFill	MapWindow/MapWindowGlideRange.cpp	/^  void DrawFill(const BulkPixelPoint *points, unsigned start) const {$/;"	f	struct:ProjectedFan
DrawFill	Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawFill(Canvas &buffer_canvas, Canvas &stencil_canvas,$/;"	f	class:AirspaceRenderer
DrawFillCached	Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawFillCached(Canvas &canvas, Canvas &stencil_canvas,$/;"	f	class:AirspaceRenderer
DrawFilledLine	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawFilledLine(const double xmin, const double ymin,$/;"	f	class:ChartRenderer
DrawFilledLineGraph	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawFilledLineGraph(const XYDataStore &lsdata, bool swap)$/;"	f	class:ChartRenderer
DrawFilledRectangle	Screen/GDI/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &_rc, const Brush &brush) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/GDI/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &_rc, const HWColor color) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/GDI/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &rc, const Color color) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/GDI/Canvas.hpp	/^  void DrawFilledRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawFilledRectangle	Screen/Memory/Canvas.cpp	/^Canvas::DrawFilledRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawFilledRectangle	Screen/Memory/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &rc, const Brush &brush) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/Memory/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &rc, const Color color) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/Memory/Canvas.hpp	/^  void DrawFilledRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawFilledRectangle	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawFilledRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawFilledRectangle	Screen/OpenGL/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &rc, const Brush &brush) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/OpenGL/Canvas.hpp	/^  void DrawFilledRectangle(const PixelRect &rc, const Color color) {$/;"	f	class:Canvas
DrawFilledRectangle	Screen/OpenGL/Canvas.hpp	/^  void DrawFilledRectangle(int left, int top,$/;"	f	class:Canvas
DrawFilledY	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawFilledY(const std::vector<std::pair<double, double>> &vals,$/;"	f	class:ChartRenderer
DrawFinalGlide	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawFinalGlide(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawFirstRow	Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawFirstRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawFlightMode	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawFlightMode(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawFlights	Kobo/PowerOff.cpp	/^DrawFlights(Canvas &canvas, const PixelRect &rc)$/;"	f	file:
DrawFocusRectangle	Screen/GDI/Canvas.hpp	/^  void DrawFocusRectangle(const PixelRect &_rc) {$/;"	f	class:Canvas
DrawFocusRectangle	Screen/Memory/Canvas.hpp	/^  void DrawFocusRectangle(const PixelRect &rc) {$/;"	f	class:Canvas
DrawFocusRectangle	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawFocusRectangle(PixelRect rc)$/;"	f	class:Canvas
DrawFormattedText	Screen/Custom/MoreCanvas.cpp	/^Canvas::DrawFormattedText(const PixelRect r, const TCHAR *text,$/;"	f	class:Canvas
DrawFormattedText	Screen/GDI/Canvas.hpp	/^  unsigned DrawFormattedText(RECT rc, const TCHAR *text, unsigned format) {$/;"	f	class:Canvas
DrawGLinkTraffic	MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawGLinkTraffic(Canvas &canvas,$/;"	f	class:MapWindow
DrawGPSStatus	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawGPSStatus(Canvas &canvas, const PixelRect &rc,$/;"	f	class:GlueMapWindow
DrawGeoBitmap	Renderer/GeoBitmapRenderer.cpp	/^DrawGeoBitmap(const RawBitmap &bitmap, PixelSize bitmap_size,$/;"	f
DrawGesture	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawGesture(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawGlassBackground	Renderer/GlassRenderer.cpp	/^DrawGlassBackground(Canvas &canvas, const PixelRect &rc, Color color)$/;"	f
DrawGlideThroughTerrain	MapWindow/MapWindowGlideRange.cpp	/^MapWindow::DrawGlideThroughTerrain(Canvas &canvas) const$/;"	f	class:MapWindow
DrawHLine	Screen/Memory/Canvas.cpp	/^Canvas::DrawHLine(int x1, int x2, int y, Color color)$/;"	f	class:Canvas
DrawHLine	Screen/Memory/RasterCanvas.hpp	/^  void DrawHLine(int x1, int x2, int y, color_type c) {$/;"	f	class:RasterCanvas
DrawHLine	Screen/Memory/RasterCanvas.hpp	/^  void DrawHLine(int x1, int x2, int y, color_type c,$/;"	f	class:RasterCanvas
DrawHLine	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawHLine(int x1, int x2, int y, Color color)$/;"	f	class:Canvas
DrawHangGlider	Renderer/AircraftRenderer.cpp	/^DrawHangGlider(Canvas &canvas, const AircraftLook &look,$/;"	f	file:
DrawImpulseGraph	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawImpulseGraph(const XYDataStore &lsdata, const Pen &pen)$/;"	f	class:ChartRenderer
DrawImpulseGraph	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawImpulseGraph(const XYDataStore &lsdata,$/;"	f	class:ChartRenderer
DrawInfo	Gauge/GaugeVario.hpp	/^  struct DrawInfo {$/;"	s	class:GaugeVario
DrawInternal	Renderer/AirspaceLabelRenderer.cpp	/^AirspaceLabelRenderer::DrawInternal(Canvas &canvas,$/;"	f	class:AirspaceLabelRenderer
DrawInternal	Renderer/AirspaceRendererGL.cpp	/^AirspaceRenderer::DrawInternal(Canvas &canvas,$/;"	f	class:AirspaceRenderer
DrawInternal	Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawInternal(Canvas &canvas, Canvas &stencil_canvas,$/;"	f	class:AirspaceRenderer
DrawIntersections	Renderer/AirspaceRenderer.cpp	/^AirspaceRenderer::DrawIntersections(Canvas &canvas,$/;"	f	class:AirspaceRenderer
DrawIsoline	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawIsoline(const AATPoint &tp)$/;"	f	class:TaskPointRenderer
DrawKeyhole	Screen/GDI/Canvas.cpp	/^Canvas::DrawKeyhole(PixelPoint center,$/;"	f	class:Canvas
DrawKeyhole	Screen/Memory/Canvas.cpp	/^Canvas::DrawKeyhole(PixelPoint center,$/;"	f	class:Canvas
DrawKeyhole	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawKeyhole(PixelPoint center,$/;"	f	class:Canvas
DrawLabel	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawLabel(const TCHAR *text, const double xv, const double yv)$/;"	f	class:ChartRenderer
DrawLabels	Topography/CachedTopographyRenderer.hpp	/^  void DrawLabels(Canvas &canvas, const WindowProjection &projection,$/;"	f	class:CachedTopographyRenderer
DrawLabels	Topography/TopographyRenderer.cpp	/^TopographyRenderer::DrawLabels(Canvas &canvas,$/;"	f	class:TopographyRenderer
DrawLandable	Renderer/WaypointIconRenderer.cpp	/^WaypointIconRenderer::DrawLandable(const Waypoint &waypoint,$/;"	f	class:WaypointIconRenderer
DrawLandableBase	Renderer/WaypointIconRenderer.cpp	/^DrawLandableBase(Canvas &canvas, const PixelPoint &pt, bool airport,$/;"	f	file:
DrawLandableRunway	Renderer/WaypointIconRenderer.cpp	/^DrawLandableRunway(Canvas &canvas, const PixelPoint &pt,$/;"	f	file:
DrawLine	MapWindow/MapCanvas.cpp	/^MapCanvas::DrawLine(GeoPoint a, GeoPoint b)$/;"	f	class:MapCanvas
DrawLine	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawLine(const double xmin, const double ymin,$/;"	f	class:ChartRenderer
DrawLine	Screen/GDI/Canvas.cpp	/^Canvas::DrawLine(int ax, int ay, int bx, int by)$/;"	f	class:Canvas
DrawLine	Screen/GDI/Canvas.hpp	/^  void DrawLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLine	Screen/Memory/Canvas.cpp	/^Canvas::DrawLine(int ax, int ay, int bx, int by)$/;"	f	class:Canvas
DrawLine	Screen/Memory/Canvas.hpp	/^  void DrawLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLine	Screen/Memory/RasterCanvas.hpp	/^  void DrawLine(int x1, int y1, int x2, int y2, color_type c,$/;"	f	class:RasterCanvas
DrawLine	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawLine(int ax, int ay, int bx, int by)$/;"	f	class:Canvas
DrawLine	Screen/OpenGL/Canvas.hpp	/^  void DrawLine(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLineDirect	Screen/Memory/RasterCanvas.hpp	/^  void DrawLineDirect(const int x1, const int y1, const int x2, const int y2,$/;"	f	class:RasterCanvas
DrawLineGraph	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawLineGraph(const XYDataStore &lsdata, const Pen &pen, bool swap)$/;"	f	class:ChartRenderer
DrawLineGraph	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawLineGraph(const XYDataStore &lsdata,$/;"	f	class:ChartRenderer
DrawLinePiece	Screen/GDI/Canvas.hpp	/^  void DrawLinePiece(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLinePiece	Screen/Memory/Canvas.hpp	/^  void DrawLinePiece(const PixelPoint a, const PixelPoint b) {$/;"	f	class:Canvas
DrawLinePiece	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawLinePiece(const PixelPoint a, const PixelPoint b)$/;"	f	class:Canvas
DrawLineWithOffset	MapWindow/MapCanvas.cpp	/^MapCanvas::DrawLineWithOffset(GeoPoint a, GeoPoint b)$/;"	f	class:MapCanvas
DrawMapScale	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawMapScale(Canvas &canvas, const PixelRect &rc,$/;"	f	class:GlueMapWindow
DrawMirroredPolygon	Renderer/AircraftRenderer.cpp	/^DrawMirroredPolygon(const BulkPixelPoint *src, unsigned points,$/;"	f	file:
DrawNoData	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawNoData(const TCHAR *text)$/;"	f	class:ChartRenderer
DrawOES	Screen/OpenGL/Texture.cpp	/^GLTexture::DrawOES(PixelRect dest, PixelRect src) const$/;"	f	class:GLTexture
DrawOZBackground	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawOZBackground(Canvas &canvas, const OrderedTaskPoint &tp,$/;"	f	class:TaskPointRenderer
DrawOZForeground	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawOZForeground(const OrderedTaskPoint &tp, int offset)$/;"	f	class:TaskPointRenderer
DrawOpaqueText	Screen/Custom/MoreCanvas.cpp	/^Canvas::DrawOpaqueText(int x, int y, const PixelRect &rc,$/;"	f	class:Canvas
DrawOpaqueText	Screen/GDI/Canvas.cpp	/^Canvas::DrawOpaqueText(int x, int y, const PixelRect &_rc,$/;"	f	class:Canvas
DrawOrdered	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawOrdered(const OrderedTaskPoint &tp, Layer layer)$/;"	f	class:TaskPointRenderer
DrawOutline	MapWindow/MapWindowGlideRange.cpp	/^  void DrawOutline(Canvas &canvas) const {$/;"	f	struct:ProjectedFans
DrawOutline	MapWindow/MapWindowGlideRange.cpp	/^  void DrawOutline(Canvas &canvas, const BulkPixelPoint *points) const {$/;"	f	struct:ProjectedFan
DrawOutline	MapWindow/MapWindowGlideRange.cpp	/^  void DrawOutline(unsigned start) const {$/;"	f	struct:ProjectedFan
DrawOutline	Renderer/AirspaceRendererOther.cpp	/^AirspaceRenderer::DrawOutline(Canvas &canvas,$/;"	f	class:AirspaceRenderer
DrawOutlineRectangle	Screen/Memory/Canvas.cpp	/^Canvas::DrawOutlineRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawOutlineRectangle	Screen/OpenGL/Canvas.hpp	/^  void DrawOutlineRectangle(int left, int top, int right, int bottom) {$/;"	f	class:Canvas
DrawOutlineRectangle	Screen/OpenGL/Canvas.hpp	/^  void DrawOutlineRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawPanInfo	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawPanInfo(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawParaGlider	Renderer/AircraftRenderer.cpp	/^DrawParaGlider(Canvas &canvas, const AircraftLook &look,$/;"	f	file:
DrawPixel	Screen/Memory/RasterCanvas.hpp	/^  void DrawPixel(int x, int y, color_type c) {$/;"	f	class:RasterCanvas
DrawPixel	Screen/Memory/RasterCanvas.hpp	/^  void DrawPixel(int x, int y, color_type c, PixelOperations operations) {$/;"	f	class:RasterCanvas
DrawPolygon	CrossSection/TerrainXSRenderer.cpp	/^TerrainXSRenderer::DrawPolygon(Canvas &canvas, TerrainType type,$/;"	f	class:TerrainXSRenderer
DrawPolygon	MapWindow/MapCanvas.hpp	/^  void DrawPolygon(const SearchPointVector &points) {$/;"	f	class:MapCanvas
DrawPolygon	Screen/GDI/Canvas.hpp	/^  void DrawPolygon(const BulkPixelPoint *lppt, unsigned cPoints) {$/;"	f	class:Canvas
DrawPolygon	Screen/Memory/Canvas.cpp	/^Canvas::DrawPolygon(const BulkPixelPoint *lppt, unsigned cPoints)$/;"	f	class:Canvas
DrawPolygon	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawPolygon(const BulkPixelPoint *points, unsigned num_points)$/;"	f	class:Canvas
DrawPolyline	Screen/GDI/Canvas.hpp	/^  void DrawPolyline(const BulkPixelPoint *lppt, unsigned cPoints) {$/;"	f	class:Canvas
DrawPolyline	Screen/Memory/Canvas.cpp	/^Canvas::DrawPolyline(const BulkPixelPoint *p, unsigned cPoints)$/;"	f	class:Canvas
DrawPolyline	Screen/Memory/Canvas.cpp	/^DrawPolyline(Canvas &canvas, PixelOperations operations, const Pen &pen,$/;"	f	file:
DrawPolyline	Screen/Memory/RasterCanvas.hpp	/^  void DrawPolyline(const PixelPoint *points, unsigned n, bool loop,$/;"	f	class:RasterCanvas
DrawPolyline	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawPolyline(const BulkPixelPoint *points, unsigned num_points)$/;"	f	class:Canvas
DrawPrepared	MapWindow/MapCanvas.cpp	/^MapCanvas::DrawPrepared()$/;"	f	class:MapCanvas
DrawPreparedPolygon	Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawPreparedPolygon(Canvas &canvas, unsigned n)$/;"	f	class:TrailRenderer
DrawPreparedPolyline	Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawPreparedPolyline(Canvas &canvas, unsigned n)$/;"	f	class:TrailRenderer
DrawProjected	Renderer/TrackLineRenderer.cpp	/^TrackLineRenderer::DrawProjected(Canvas &canvas,$/;"	f	class:TrackLineRenderer
DrawRaisedEdge	Screen/GDI/Canvas.hpp	/^  void DrawRaisedEdge(PixelRect &_rc) {$/;"	f	class:Canvas
DrawRaisedEdge	Screen/Memory/Canvas.hpp	/^  void DrawRaisedEdge(PixelRect &rc) {$/;"	f	class:Canvas
DrawRaisedEdge	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawRaisedEdge(PixelRect &rc)$/;"	f	class:Canvas
DrawRectangle	Screen/Memory/RasterCanvas.hpp	/^  void DrawRectangle(int x1, int y1, int x2, int y2, color_type c) {$/;"	f	class:RasterCanvas
DrawRectangle	Screen/Memory/RasterCanvas.hpp	/^  void DrawRectangle(int x1, int y1, int x2, int y2, color_type c,$/;"	f	class:RasterCanvas
DrawRightColumn	Renderer/TextRowRenderer.cpp	/^TextRowRenderer::DrawRightColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
DrawRightFirstRow	Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawRightFirstRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawRightSecondRow	Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawRightSecondRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawRiskMC	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawRiskMC(const DerivedInfo& calculated,$/;"	f	class:ThermalBandRenderer
DrawRoundRectangle	Screen/GDI/Canvas.hpp	/^  void DrawRoundRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawRoundRectangle	Screen/Memory/Canvas.cpp	/^Canvas::DrawRoundRectangle(int left, int top,$/;"	f	class:Canvas
DrawRoundRectangle	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawRoundRectangle(int left, int top, int right, int bottom,$/;"	f	class:Canvas
DrawRoute	MapWindow/MapWindowTask.cpp	/^MapWindow::DrawRoute(Canvas &canvas)$/;"	f	class:MapWindow
DrawSearchPointVector	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::DrawSearchPointVector(const SearchPointVector &points)$/;"	f	class:StencilMapCanvas
DrawSecondRow	Renderer/TwoTextRowsRenderer.cpp	/^TwoTextRowsRenderer::DrawSecondRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TwoTextRowsRenderer
DrawSegment	Screen/GDI/Canvas.cpp	/^Canvas::DrawSegment(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawSegment	Screen/Memory/Canvas.cpp	/^Canvas::DrawSegment(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawSegment	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawSegment(PixelPoint center, unsigned radius,$/;"	f	class:Canvas
DrawShape	Renderer/AirspacePreviewRenderer.cpp	/^DrawShape(Canvas &canvas, AbstractAirspace::Shape shape, const PixelPoint pt,$/;"	f	file:
DrawSign	Renderer/SymbolRenderer.cpp	/^SymbolRenderer::DrawSign(Canvas &canvas, PixelRect rc, bool plus)$/;"	f	class:SymbolRenderer
DrawSimpleAircraft	Renderer/AircraftRenderer.cpp	/^DrawSimpleAircraft(Canvas &canvas, const AircraftLook &look,$/;"	f	file:
DrawSkyLinesTraffic	MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawSkyLinesTraffic(Canvas &canvas) const$/;"	f	class:MapWindow
DrawStallRatio	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawStallRatio(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawSymbol	Renderer/SymbolButtonRenderer.cpp	/^SymbolButtonRenderer::DrawSymbol(Canvas &canvas, PixelRect rc, bool enabled,$/;"	f	class:SymbolButtonRenderer
DrawSymbol	Renderer/WaypointRenderer.cpp	/^  void DrawSymbol(const struct WaypointRendererSettings &settings,$/;"	f	struct:VisibleWaypoint
DrawTarget	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawTarget(const TaskPoint &tp)$/;"	f	class:TaskPointRenderer
DrawTask	Dialogs/Task/Manager/TaskMapButtonRenderer.cpp	/^DrawTask(Canvas &canvas, const PixelRect rc,$/;"	f	file:
DrawTask	MapWindow/MapWindowTask.cpp	/^MapWindow::DrawTask(Canvas &canvas)$/;"	f	class:MapWindow
DrawTask	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::DrawTask(Canvas &canvas)$/;"	f	class:TargetMapWindow
DrawTaskLine	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::DrawTaskLine(const GeoPoint &start, const GeoPoint &end)$/;"	f	class:TaskPointRenderer
DrawTaskOffTrackIndicator	MapWindow/MapWindowTask.cpp	/^MapWindow::DrawTaskOffTrackIndicator(Canvas &canvas)$/;"	f	class:MapWindow
DrawTeammate	MapWindow/MapWindowTraffic.cpp	/^MapWindow::DrawTeammate(Canvas &canvas) const$/;"	f	class:MapWindow
DrawTerrain	Profile/ProfileKeys.cpp	/^const char DrawTerrain[] = "DrawTerrain";$/;"	m	namespace:ProfileKeys	file:
DrawTerrainAbove	MapWindow/MapWindowGlideRange.cpp	/^MapWindow::DrawTerrainAbove(Canvas &canvas)$/;"	f	class:MapWindow
DrawText	Screen/Custom/MoreCanvas.cpp	/^Canvas::DrawText(int x, int y,$/;"	f	class:Canvas
DrawText	Screen/GDI/Canvas.cpp	/^Canvas::DrawText(int x, int y, const TCHAR *text)$/;"	f	class:Canvas
DrawText	Screen/GDI/Canvas.cpp	/^Canvas::DrawText(int x, int y,$/;"	f	class:Canvas
DrawText	Screen/Memory/Canvas.cpp	/^Canvas::DrawText(int x, int y, const TCHAR *text)$/;"	f	class:Canvas
DrawText	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawText(int x, int y, const TCHAR *text)$/;"	f	class:Canvas
DrawTextRow	Renderer/TextRowRenderer.cpp	/^TextRowRenderer::DrawTextRow(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
DrawThermalBand	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawThermalBand(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawThermalBand	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawThermalBand(const MoreData &basic,$/;"	f	class:ThermalBandRenderer
DrawThermalBandSpark	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawThermalBandSpark(const MoreData &basic,$/;"	f	class:ThermalBandRenderer
DrawThermalEstimate	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawThermalEstimate(Canvas &canvas) const$/;"	f	class:GlueMapWindow
DrawThermalEstimate	MapWindow/MapWindowThermal.cpp	/^MapWindow::DrawThermalEstimate(Canvas &canvas) const$/;"	f	class:MapWindow
DrawThermalProfile	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawThermalProfile(const ThermalBand &thermal_band,$/;"	f	class:ThermalBandRenderer
DrawThermalSources	MapWindow/MapWindowThermal.cpp	/^DrawThermalSources(Canvas &canvas, const MaskedIcon &icon,$/;"	f	file:
DrawThickLine	Screen/Memory/RasterCanvas.hpp	/^  void DrawThickLine(int x1, int y1, int x2, int y2,$/;"	f	class:RasterCanvas
DrawThread	DrawThread.hpp	/^  DrawThread(GlueMapWindow &_map)$/;"	f	class:final
DrawTopography	Profile/ProfileKeys.cpp	/^const char DrawTopography[] = "DrawTopology";$/;"	m	namespace:ProfileKeys	file:
DrawTraceVector	Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawTraceVector(Canvas &canvas, const Projection &projection,$/;"	f	class:TrailRenderer
DrawTrackBearing	MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawTrackBearing(Canvas &canvas, const PixelPoint aircraft_pos, bool circling) const$/;"	f	class:MapWindow
DrawTrail	MapWindow/MapWindowTrail.cpp	/^MapWindow::DrawTrail(Canvas &canvas, const PixelPoint aircraft_pos,$/;"	f	class:MapWindow
DrawTransparentText	Screen/Memory/Canvas.cpp	/^Canvas::DrawTransparentText(int x, int y, const TCHAR *text)$/;"	f	class:Canvas
DrawTransparentText	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawTransparentText(int x, int y, const TCHAR *text)$/;"	f	class:Canvas
DrawTrend	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawTrend(const LeastSquares &lsdata, ChartLook::Style style)$/;"	f	class:ChartRenderer
DrawTrendN	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawTrendN(const LeastSquares &lsdata, ChartLook::Style style)$/;"	f	class:ChartRenderer
DrawTriangle	Renderer/TrailRenderer.cpp	/^TrailRenderer::DrawTriangle(Canvas &canvas, const Projection &projection,$/;"	f	class:TrailRenderer
DrawTriangleFan	Screen/GDI/Canvas.hpp	/^  void DrawTriangleFan(const BulkPixelPoint *points, unsigned num_points) {$/;"	f	class:Canvas
DrawTriangleFan	Screen/Memory/Canvas.hpp	/^  void DrawTriangleFan(const BulkPixelPoint *points, unsigned num_points) {$/;"	f	class:Canvas
DrawTriangleFan	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawTriangleFan(const BulkPixelPoint *points, unsigned num_points)$/;"	f	class:Canvas
DrawTwoLines	Screen/GDI/Canvas.cpp	/^Canvas::DrawTwoLines(int ax, int ay, int bx, int by, int cx, int cy)$/;"	f	class:Canvas
DrawTwoLines	Screen/GDI/Canvas.hpp	/^  void DrawTwoLines(const PixelPoint a, const PixelPoint b,$/;"	f	class:Canvas
DrawTwoLines	Screen/Memory/Canvas.hpp	/^  void DrawTwoLines(const PixelPoint a, const PixelPoint b,$/;"	f	class:Canvas
DrawTwoLines	Screen/Memory/Canvas.hpp	/^  void DrawTwoLines(int ax, int ay, int bx, int by, int cx, int cy)$/;"	f	class:Canvas
DrawTwoLines	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawTwoLines(int ax, int ay, int bx, int by, int cx, int cy)$/;"	f	class:Canvas
DrawTwoLines	Screen/OpenGL/Canvas.hpp	/^  void DrawTwoLines(const PixelPoint a, const PixelPoint b,$/;"	f	class:Canvas
DrawTwoLinesExact	Screen/GDI/Canvas.hpp	/^  void DrawTwoLinesExact(int ax, int ay, int bx, int by, int cx, int cy) {$/;"	f	class:Canvas
DrawTwoLinesExact	Screen/Memory/Canvas.hpp	/^  void DrawTwoLinesExact(int ax, int ay, int bx, int by, int cx, int cy) {$/;"	f	class:Canvas
DrawTwoLinesExact	Screen/OpenGL/Canvas.cpp	/^Canvas::DrawTwoLinesExact(int ax, int ay, int bx, int by, int cx, int cy)$/;"	f	class:Canvas
DrawVLine	Screen/Memory/RasterCanvas.hpp	/^  void DrawVLine(int x, int y1, int y2, color_type c,$/;"	f	class:RasterCanvas
DrawVario	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::DrawVario(Canvas &canvas, const PixelRect &rc) const$/;"	f	class:GlueMapWindow
DrawVerticalGradient	Renderer/GradientRenderer.cpp	/^DrawVerticalGradient(Canvas &canvas, const PixelRect &rc,$/;"	f
DrawWaves	MapWindow/MapWindowRender.cpp	/^MapWindow::DrawWaves(Canvas &canvas)$/;"	f	class:MapWindow
DrawWaypoint	Renderer/WaypointRenderer.cpp	/^  void DrawWaypoint(Canvas &canvas, const VisibleWaypoint &vwp) {$/;"	f	class:final
DrawWaypoints	MapWindow/MapWindowWaypoints.cpp	/^MapWindow::DrawWaypoints(Canvas &canvas)$/;"	f	class:MapWindow
DrawWaypoints	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::DrawWaypoints(Canvas &canvas)$/;"	f	class:TargetMapWindow
DrawWeightBarGraph	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawWeightBarGraph(const XYDataStore &lsdata)$/;"	f	class:ChartRenderer
DrawWind	MapWindow/MapWindowSymbols.cpp	/^MapWindow::DrawWind(Canvas &canvas, const PixelPoint &Start,$/;"	f	class:MapWindow
DrawWorkingBand	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::DrawWorkingBand(const DerivedInfo& calculated_info,$/;"	f	class:ThermalBandRenderer
DrawXGrid	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawXGrid(double tic_step, double unit_step, UnitFormat unit_format)$/;"	f	class:ChartRenderer
DrawXLabel	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawXLabel(const TCHAR *text)$/;"	f	class:ChartRenderer
DrawXLabel	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawXLabel(const TCHAR *text, const TCHAR *unit)$/;"	f	class:ChartRenderer
DrawYGrid	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawYGrid(double tic_step, double unit_step, UnitFormat unit_format)$/;"	f	class:ChartRenderer
DrawYLabel	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawYLabel(const TCHAR *text)$/;"	f	class:ChartRenderer
DrawYLabel	Renderer/ChartRenderer.cpp	/^ChartRenderer::DrawYLabel(const TCHAR *text, const TCHAR *unit)$/;"	f	class:ChartRenderer
Drift	Computer/ThermalLocator.cpp	/^ThermalLocator::Drift(const double t_0, const FlatProjection &projection,$/;"	f	class:ThermalLocator
Drift	Computer/ThermalLocator.cpp	/^ThermalLocator::Point::Drift(double t, const FlatProjection &projection,$/;"	f	class:ThermalLocator::Point
DriftedDistance	Engine/GlideSolvers/GlideState.cpp	/^GlideState::DriftedDistance(const double time) const$/;"	f	class:GlideState
Driver	Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
DryMass	Profile/ProfileKeys.cpp	/^const char DryMass[] = "DryMass";$/;"	m	namespace:ProfileKeys	file:
DummyLayout	Widget/TwoWidgets.cpp	/^DummyLayout(const PixelRect rc, bool vertical)$/;"	f	file:
DummyReach	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::DummyReach(const AFlatGeoPoint &ao)$/;"	f	class:FlatTriangleFanTree
DumpClients	Cloud/Data.cpp	/^CloudData::DumpClients()$/;"	f	class:CloudData
DumpPort	Device/Port/DumpPort.cpp	/^DumpPort::DumpPort(Port *_port)$/;"	f	class:DumpPort
Duplicate	Util/AllocatedString.hxx	/^	static AllocatedString Duplicate(string_view src) {$/;"	f	class:AllocatedString
Duration	FlightInfo.cpp	/^int FlightInfo::Duration() const {$/;"	f	class:FlightInfo
DynamicFifoBuffer	Util/DynamicFifoBuffer.hxx	/^class DynamicFifoBuffer : protected ForeignFifoBuffer<T> {$/;"	c
DynamicLibrary	OS/DynamicLibrary.hpp	/^  DynamicLibrary(const TCHAR *name)$/;"	f	class:DynamicLibrary
DynamicLibrary	OS/DynamicLibrary.hpp	/^class DynamicLibrary {$/;"	c
EAST_WEST	Form/DigitEntry.hpp	/^      EAST_WEST,$/;"	m	class:CoordinateFormat::Column::Type
EDGE_CHECK	Topography/shapelib/mapprimitive.c	45;"	d	file:
EDIT	Dialogs/Device/DeviceListDialog.cpp	/^    RECONNECT, FLIGHT, EDIT, MANAGE, MONITOR,$/;"	e	enum:final::Buttons	file:
EDIT	Dialogs/Plane/PlaneListDialog.cpp	/^    EDIT,$/;"	e	enum:final::Buttons	file:
EDIT	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  EDIT = 100,$/;"	e	enum:Buttons	file:
EDIT	Dialogs/Waypoint/Manager.cpp	/^    EDIT,$/;"	e	enum:final::Buttons	file:
EDIT	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  EDIT,$/;"	e	enum:Commands	file:
EDIT	Widget/RowFormWidget.hpp	/^      EDIT,$/;"	m	class:RowFormWidget::Row::Type
EDITSTRINGSIZE	Form/DataField/String.hpp	30;"	d
EFFECTIVE_MC	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  EFFECTIVE_MC,$/;"	e	enum:Controls	file:
EGM96	Geo/Geoid.hpp	/^namespace EGM96$/;"	n
EGM96SIZE	Geo/Geoid.cpp	36;"	d	file:
EKF	NMEA/Derived.hpp	/^    EKF,$/;"	m	class:DerivedInfo::WindSource
ELEMENT_STAT_HPP	Engine/Task/Stats/ElementStat.hpp	23;"	d
ELEVATION	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    ELEVATION,$/;"	e	enum:final::Rows	file:
ELOOP	zzip/conf.h	148;"	d
ELOOP	zzip/conf.h	150;"	d
EMPTY	Device/Driver/LX/LXN.hpp	/^    EMPTY = 0x00,$/;"	e	enum:LXN::Command
EMPTY_TASK	Engine/Task/Factory/ValidationError.hpp	/^  EMPTY_TASK,$/;"	m	class:TaskValidationErrorType
ENABLE	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^    ENABLE,$/;"	e	enum:final::Buttons	file:
ENABLED	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  ENABLED,$/;"	e	enum:ControlIndex	file:
ENABLE_DETOUR_COST_MARKERS	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  ENABLE_DETOUR_COST_MARKERS,$/;"	e	enum:ControlIndex	file:
ENABLE_FLARM_MAP	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  ENABLE_FLARM_MAP,$/;"	e	enum:ControlIndex	file:
END	Device/Driver/LX/LXN.hpp	/^    END = 0x40,$/;"	e	enum:LXN::Command
END_RADIAL	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  END_RADIAL,$/;"	e	enum:Controls	file:
ENQ	Device/Driver/Volkslogger/Protocol.hpp	/^    ENQ = 0x05,$/;"	e	enum:Volkslogger::__anon202
ENUM	Form/DataField/Base.hpp	/^    ENUM,$/;"	m	class:DataField::Type
ENUM_BIT_SET_HPP	Util/EnumBitSet.hpp	31;"	d
ENUM_CAST_HPP	Util/EnumCast.hpp	31;"	d
EOVERFLOW	zzip/file.c	1174;"	d	file:
EPDC_FLAG_ENABLE_INVERSION	Screen/FB/mxcfb.h	110;"	d
EPDC_FLAG_FORCE_MONOCHROME	Screen/FB/mxcfb.h	111;"	d
EPDC_FLAG_USE_ALT_BUFFER	Screen/FB/mxcfb.h	112;"	d
EQUAL	Topography/shapelib/mapserver.h	166;"	d
EQUAL	Topography/shapelib/mapserver.h	168;"	d
EQUALN	Topography/shapelib/mapserver.h	174;"	d
EQUALN	Topography/shapelib/mapserver.h	176;"	d
EQUATOR_RADIUS	Geo/WGS84.hpp	/^  static constexpr double EQUATOR_RADIUS = 6378137;$/;"	m	namespace:WGS84
EREMOTE	zzip/conf.h	143;"	d
ERROR	Dialogs/ProfilePasswordDialog.hpp	33;"	d
ERROR	Job/TriStateJob.hpp	/^  SUCCESS, ERROR, CANCELLED$/;"	m	class:TriStateJobResult
ERROR	Job/TriStateJob.hpp	32;"	d
ESCAPE	Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t ESCAPE = 0x78;$/;"	m	namespace:FLARM
ESCAPE	Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t ESCAPE = 0xa5;$/;"	m	class:K6BtPort
ESCAPE_ESCAPE	Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t ESCAPE_ESCAPE = 0x55;$/;"	m	namespace:FLARM
ESCAPE_START	Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t ESCAPE_START = 0x31;$/;"	m	namespace:FLARM
ESTIMATION	NMEA/GPSState.hpp	/^  ESTIMATION,$/;"	m	class:FixQuality
ETETime	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  ETETime,$/;"	e	enum:Controls	file:
ETX	Device/Driver/Volkslogger/Protocol.hpp	/^    ETX = 0x03,$/;"	e	enum:Volkslogger::__anon202
EVENT	Device/Driver/LX/LXN.hpp	/^    EVENT = 0xf4,$/;"	e	enum:LXN::Command
EVENT_CALLBACK	Event/SDL/Event.hpp	/^  EVENT_CALLBACK = SDL_USEREVENT,$/;"	e	enum:__anon3
EWCreateOnPort	Device/Driver/EW.cpp	/^EWCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
EWDevice	Device/Driver/EW.cpp	/^  EWDevice(Port &_port)$/;"	f	class:EWDevice
EWDevice	Device/Driver/EW.cpp	/^class EWDevice : public AbstractDevice {$/;"	c	file:
EWMicroRecorderCreateOnPort	Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
EWMicroRecorderDevice	Device/Driver/EWMicroRecorder.cpp	/^  EWMicroRecorderDevice(Port &_port)$/;"	f	class:EWMicroRecorderDevice
EWMicroRecorderDevice	Device/Driver/EWMicroRecorder.cpp	/^class EWMicroRecorderDevice : public AbstractDevice {$/;"	c	file:
EWMicroRecorderWriteWaypoint	Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderWriteWaypoint(Port &port, const char *type,$/;"	f	file:
EXCEEDS_MAX_TURNPOINTS	Engine/Task/Factory/ValidationError.hpp	/^  EXCEEDS_MAX_TURNPOINTS,$/;"	m	class:TaskValidationErrorType
EXCEPTION_HXX	Util/Exception.hxx	31;"	d
EXCLUDE_BMP_SUPPORT	Terrain/jasper/jas_config.h	92;"	d
EXCLUDE_JPG_SUPPORT	Terrain/jasper/jas_config.h	94;"	d
EXCLUDE_MIF_SUPPORT	Terrain/jasper/jas_config.h	90;"	d
EXCLUDE_PGX_SUPPORT	Terrain/jasper/jas_config.h	95;"	d
EXCLUDE_PNM_SUPPORT	Terrain/jasper/jas_config.h	91;"	d
EXCLUDE_RAS_SUPPORT	Terrain/jasper/jas_config.h	93;"	d
EXCLUDE_TIFF_SUPPORT	Terrain/jasper/jas_config.h	96;"	d
EXPERT	Dialogs/Settings/dlgConfiguration.cpp	/^    EXPERT,$/;"	e	enum:final::Buttons	file:
EXPOSE	Event/Shared/Event.hpp	/^    EXPOSE,$/;"	e	enum:Event::Type
EXTERNAL	Device/Driver/LX/LX1600.hpp	/^    EXTERNAL = 0,$/;"	m	class:LX1600::SCMode
EXTERNAL	Device/Driver/LXERA/LXERA.hpp	/^    EXTERNAL = 0,$/;"	m	class:LXEra::SCMode
EXTERNAL	NMEA/Derived.hpp	/^    EXTERNAL,$/;"	m	class:DerivedInfo::WindSource
EXTERNAL_WIND	Dialogs/Settings/WindSettingsPanel.hpp	/^    EXTERNAL_WIND,$/;"	e	enum:final::ControlIndex
EXTRACT_PARAMETERS_HPP	Util/ExtractParameters.hpp	25;"	d
EarthASin	Geo/Math.cpp	/^EarthASin(const double a)$/;"	f	file:
EarthDistance	Geo/Math.cpp	/^EarthDistance(const double a)$/;"	f	file:
EarthDistance	Geo/SimplifiedMath.cpp	/^EarthDistance(const double a)$/;"	f	file:
EarthDistanceToAngle	Geo/FAISphere.hpp	/^  EarthDistanceToAngle(double distance)$/;"	f	namespace:FAISphere
Edge	Engine/PathSolvers/Dijkstra.hpp	/^  struct Edge$/;"	s	class:Dijkstra
EdgeMap	Engine/PathSolvers/Dijkstra.hpp	/^  typedef typename MapTemplate::template Bind<Edge> EdgeMap;$/;"	t	class:Dijkstra
EditCallback	Form/Edit.hpp	/^  typedef bool (*EditCallback)(const TCHAR *caption, DataField &df,$/;"	t	class:WndProperty
EditClicked	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::EditClicked()$/;"	f	class:PlaneListWidget
EditCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::EditCurrent()$/;"	f	class:DeviceListWidget
EditDataFieldDialog	Dialogs/DataField.cpp	/^EditDataFieldDialog(const TCHAR *caption, DataField &df,$/;"	f
EditDataFieldDialog	Kobo/FakeSymbols.cpp	/^EditDataFieldDialog(const TCHAR *caption, DataField &df,$/;"	f
EditPortCallback	Dialogs/Device/DeviceEditWidget.cpp	/^EditPortCallback(const TCHAR *caption, DataField &_df,$/;"	f	file:
EditTaskPoint	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::EditTaskPoint(unsigned ItemIndex)$/;"	f	class:TaskEditPanel
EditUnits	Dialogs/Device/ManageCAI302Dialog.cpp	/^EditUnits(const DialogLook &look, CAI302Device &device)$/;"	f	file:
Elapsed	Time/PeriodClock.hpp	/^  auto Elapsed() const {$/;"	f	class:PeriodClock
Elapsed	Time/PeriodClock.hpp	/^  constexpr auto Elapsed(Stamp now) const {$/;"	f	class:PeriodClock
ElapsedUpdate	Time/PeriodClock.hpp	/^  auto ElapsedUpdate() {$/;"	f	class:PeriodClock
ElementStat	Engine/Task/Stats/ElementStat.hpp	/^struct ElementStat$/;"	s
ElementStatComputer	Engine/Task/Computer/ElementStatComputer.cpp	/^ElementStatComputer::ElementStatComputer()$/;"	f	class:ElementStatComputer
ElementStatComputer	Engine/Task/Computer/ElementStatComputer.hpp	/^class ElementStatComputer$/;"	c
EliminateRedundant	NMEA/ExternalSettings.cpp	/^ExternalSettings::EliminateRedundant(const ExternalSettings &other,$/;"	f	class:ExternalSettings
Empty	Screen/Memory/Buffer.hpp	/^  static constexpr WritableImageBuffer<PixelTraits> Empty() {$/;"	f	struct:ConstImageBuffer
Empty	Screen/Memory/Buffer.hpp	/^  static constexpr WritableImageBuffer<PixelTraits> Empty() {$/;"	f	struct:WritableImageBuffer
Empty	Util/AllocatedString.hxx	/^	static AllocatedString Empty() {$/;"	f	class:AllocatedString
Enable	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Enable()$/;"	f	class:AirspaceWarningListWidget
EnableArrivalAltitudeMapItem	Profile/ProfileKeys.cpp	/^const char EnableArrivalAltitudeMapItem[] = "EnableArrivalAltitudeMapItem";$/;"	m	namespace:ProfileKeys	file:
EnableBulkMode	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::EnableBulkMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
EnableCommandMode	Device/Driver/LX/Mode.cpp	/^LXDevice::EnableCommandMode(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableCursorSelection	Dialogs/WidgetDialog.hpp	/^  void EnableCursorSelection(unsigned _index=0) {$/;"	f	class:WidgetDialog
EnableCursorSelection	Form/ButtonPanel.hpp	/^  void EnableCursorSelection(unsigned _index=0) {$/;"	f	class:ButtonPanel
EnableDisableCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::EnableDisableCurrent()$/;"	f	class:DeviceListWidget
EnableExternalTriggerCruise	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  EnableExternalTriggerCruise,$/;"	e	enum:ControlIndex	file:
EnableExternalTriggerCruise	Profile/ProfileKeys.cpp	/^const char EnableExternalTriggerCruise[] = "EnableExternalTriggerCruise";$/;"	m	namespace:ProfileKeys	file:
EnableFLARMGauge	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableFLARMGauge,$/;"	e	enum:ControlIndex	file:
EnableFLARMGauge	Profile/ProfileKeys.cpp	/^const char EnableFLARMGauge[] = "EnableFLARMGauge";$/;"	m	namespace:ProfileKeys	file:
EnableFLARMMap	Profile/ProfileKeys.cpp	/^const char EnableFLARMMap[] = "EnableFLARMDisplay";$/;"	m	namespace:ProfileKeys	file:
EnableFinalGlideBarMC0	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableFinalGlideBarMC0,$/;"	e	enum:ControlIndex	file:
EnableFinalGlideBarMC0	Profile/ProfileKeys.cpp	/^const char EnableFinalGlideBarMC0[] = "EnableFinalGlideBarMC0";$/;"	m	namespace:ProfileKeys	file:
EnableFlightLogger	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  EnableFlightLogger,$/;"	e	enum:ControlIndex	file:
EnableFlightLogger	Profile/ProfileKeys.cpp	/^const char EnableFlightLogger[] = "EnableFlightLogger";$/;"	m	namespace:ProfileKeys	file:
EnableForever	Device/Port/DumpPort.hpp	/^  void EnableForever() {$/;"	f	class:final
EnableIfPoint2D	Math/Point2D.hpp	/^struct EnableIfPoint2D : std::enable_if<IsPoint2D<P>::value> {$/;"	s
EnableInterpolation	Screen/Bitmap.hpp	/^  void EnableInterpolation() {}$/;"	f	class:final
EnableInterpolation	Screen/OpenGL/Bitmap.cpp	/^Bitmap::EnableInterpolation()$/;"	f	class:Bitmap
EnableInterpolation	Screen/OpenGL/Texture.cpp	/^GLTexture::EnableInterpolation()$/;"	f	class:GLTexture
EnableItemHelp	Dialogs/ListPicker.cpp	/^  void EnableItemHelp(ItemHelpCallback_t _item_help_callback,$/;"	f	class:ListPickerWidget
EnableItemHelp	Form/DataField/Base.hpp	/^  virtual void EnableItemHelp(gcc_unused bool value) {};$/;"	f	class:DataField
EnableLocationMapItem	Profile/ProfileKeys.cpp	/^const char EnableLocationMapItem[] = "EnableLocationMapItem";$/;"	m	namespace:ProfileKeys	file:
EnableNMEA	Device/Descriptor.cpp	/^DeviceDescriptor::EnableNMEA(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
EnableNMEA	Device/Driver.cpp	/^AbstractDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:AbstractDevice
EnableNMEA	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::EnableNMEA(OperationEnvironment &env)$/;"	f	class:CAI302Device
EnableNMEA	Device/Driver/CaiGpsNav.cpp	/^CaiGpsNavDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:CaiGpsNavDevice
EnableNMEA	Device/Driver/FLARM/Mode.cpp	/^FlarmDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:FlarmDevice
EnableNMEA	Device/Driver/FlymasterF1.cpp	/^FlymasterF1Device::EnableNMEA(OperationEnvironment &env)$/;"	f	class:FlymasterF1Device
EnableNMEA	Device/Driver/LX/Mode.cpp	/^LXDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableNMEA	Device/Driver/LXERA/Mode.cpp	/^LXEraDevice::EnableNMEA(OperationEnvironment &env)$/;"	f	class:LXEraDevice
EnableNMEALogger	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  EnableNMEALogger,$/;"	e	enum:ControlIndex	file:
EnableNMEALogger	Profile/ProfileKeys.cpp	/^const char EnableNMEALogger[] = "EnableNMEALogger";$/;"	m	namespace:ProfileKeys	file:
EnableNanoNMEA	Device/Driver/LX/Mode.cpp	/^LXDevice::EnableNanoNMEA(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableNavBaroAltitude	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  EnableNavBaroAltitude,$/;"	e	enum:ControlIndex	file:
EnableNavBaroAltitude	Profile/ProfileKeys.cpp	/^const char EnableNavBaroAltitude[] = "EnableNavBaroAltitude";$/;"	m	namespace:ProfileKeys	file:
EnableNetwork	Kobo/WPASupplicant.cpp	/^WPASupplicant::EnableNetwork(unsigned id)$/;"	f	class:WPASupplicant
EnablePassThrough	Device/Driver.cpp	/^AbstractDevice::EnablePassThrough(OperationEnvironment &env)$/;"	f	class:AbstractDevice
EnablePassThrough	Device/Driver/LX/Mode.cpp	/^LXDevice::EnablePassThrough(OperationEnvironment &env)$/;"	f	class:LXDevice
EnableTAGauge	Profile/ProfileKeys.cpp	/^const char EnableTAGauge[] = "EnableTAGauge";$/;"	m	namespace:ProfileKeys	file:
EnableTerrain	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  EnableTerrain,$/;"	e	enum:ControlIndex	file:
EnableThermalProfile	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableThermalProfile,$/;"	e	enum:ControlIndex	file:
EnableThermalProfile	Profile/ProfileKeys.cpp	/^const char EnableThermalProfile[] = "EnableThermalProfile";$/;"	m	namespace:ProfileKeys	file:
EnableTopography	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  EnableTopography,$/;"	e	enum:ControlIndex	file:
EnableVarioBar	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  EnableVarioBar$/;"	e	enum:ControlIndex	file:
EnableVarioBar	Profile/ProfileKeys.cpp	/^const char EnableVarioBar[] = "EnableVarioBar";$/;"	m	namespace:ProfileKeys	file:
Enabled	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  Enabled,$/;"	e	enum:ControlIndex	file:
End	Device/Driver/LX/LXN.hpp	/^  struct End {$/;"	s	namespace:LXN
EndClose	Device/Port/BufferedPort.cpp	/^BufferedPort::EndClose()$/;"	f	class:BufferedPort
EndDeclaration	IGC/IGCWriter.cpp	/^IGCWriter::EndDeclaration()$/;"	f	class:IGCWriter
EndDrag	Form/TabDisplay.cpp	/^TabDisplay::EndDrag()$/;"	f	class:TabDisplay
EndElement	JSON/Writer.hpp	/^    void EndElement() {$/;"	f	class:JSON::ArrayWriter
EndElement	JSON/Writer.hpp	/^    void EndElement() {$/;"	f	class:JSON::ObjectWriter
EndOfLine	IO/CSVLine.cpp	/^EndOfLine(const char *line)$/;"	f	file:
EndPoint	Geo/GeoVector.cpp	/^GeoVector::EndPoint(const GeoPoint &source) const$/;"	f	class:GeoVector
EndTracking	Tracking/LiveTrack24.cpp	/^LiveTrack24::EndTracking(SessionID session, unsigned packet_id,$/;"	f	class:LiveTrack24
EnforceTimeWindow	Engine/Trace/Trace.cpp	/^Trace::EnforceTimeWindow(unsigned latest_time)$/;"	f	class:Trace
Engine	Audio/SLES/Engine.hpp	/^    explicit Engine(SLEngineItf _engine):engine(_engine) {}$/;"	f	class:SLES::Engine
Engine	Audio/SLES/Engine.hpp	/^  class Engine {$/;"	c	namespace:SLES
Enqueue	Android/DownloadManager.cpp	/^AndroidDownloadManager::Enqueue(JNIEnv *env, const char *uri,$/;"	f	class:AndroidDownloadManager
Enqueue	Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::Enqueue()$/;"	f	class:AndroidPCMPlayer
Enqueue	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult Enqueue(const void *pBuffer, SLuint32 size) {$/;"	f	class:SLES::AndroidSimpleBufferQueue
Enqueue	Net/HTTP/DownloadManager.cpp	/^  void Enqueue(const char *uri, Path path_relative) {$/;"	f	class:final
Enqueue	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::Enqueue(const char *uri, Path relative_path)$/;"	f	class:Net::DownloadManager
EnqueueRepositoryDownload	Repository/Glue.cpp	/^EnqueueRepositoryDownload(bool force)$/;"	f
EnsureConnected	Kobo/WifiDialog.cpp	/^WifiListWidget::EnsureConnected()$/;"	f	class:WifiListWidget
EnsureLoaded	Form/DataField/File.cpp	/^FileDataField::EnsureLoaded()$/;"	f	class:FileDataField
EnsureLoadedDeconst	Form/DataField/File.hpp	/^  void EnsureLoadedDeconst() const {$/;"	f	class:final
EnterDrawThread	Components.cpp	/^EnterDrawThread()$/;"	f
EnterDrawThread	Thread/Debug.hpp	/^EnterDrawThread()$/;"	f
EnterFastMode	Android/Nook.cpp	/^Nook::EnterFastMode()$/;"	f	class:Nook
EnterPan	Pan.cpp	/^EnterPan()$/;"	f
EnterTransition	Computer/GlideComputerInterface.cpp	/^GlideComputerTaskEvents::EnterTransition(const TaskWaypoint &tp)$/;"	f	class:GlideComputerTaskEvents
EnterTransition	Engine/Task/TaskEvents.hpp	/^  virtual void EnterTransition(gcc_unused const TaskWaypoint& tp) {}$/;"	f	class:TaskEvents
Entry	Form/DataField/Enum.hpp	/^    Entry():string(nullptr), display_string(nullptr), help(nullptr) {}$/;"	f	class:final::Entry
Entry	Form/DataField/Enum.hpp	/^    Entry(Entry &&other)$/;"	f	class:final::Entry
Entry	Form/DataField/Enum.hpp	/^  class Entry {$/;"	c	class:final
EntryLetters	Dialogs/KnobTextEntry.cpp	/^static constexpr TCHAR EntryLetters[] =$/;"	v	file:
EntryPrecondition	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::EntryPrecondition() const$/;"	f	class:FinishPoint
EntryPrecondition	Engine/Task/Points/ScoredTaskPoint.hpp	/^  virtual bool EntryPrecondition() const {$/;"	f	class:ScoredTaskPoint
EnumBitSet	Util/EnumBitSet.hpp	/^  constexpr EnumBitSet():mask(0) {}$/;"	f	class:EnumBitSet
EnumBitSet	Util/EnumBitSet.hpp	/^  constexpr EnumBitSet(E e, Args&&... args)$/;"	f	class:EnumBitSet
EnumBitSet	Util/EnumBitSet.hpp	/^  constexpr EnumBitSet(I _mask):mask(_mask) {}$/;"	f	class:EnumBitSet
EnumBitSet	Util/EnumBitSet.hpp	/^class EnumBitSet {$/;"	c
EnumCast	Util/EnumCast.hpp	/^struct EnumCast : public EnumCastInternal<T, sizeof(T)> {};$/;"	s
EnumCastHelper	Util/EnumCast.hpp	/^struct EnumCastHelper {$/;"	s
EnumCastInternal	Util/EnumCast.hpp	/^struct EnumCastInternal {};$/;"	s
EnumCastInternal	Util/EnumCast.hpp	/^struct EnumCastInternal<T, sizeof(int)>$/;"	s
EnumCastInternal	Util/EnumCast.hpp	/^struct EnumCastInternal<T, sizeof(uint16_t)>$/;"	s
EnumCastInternal	Util/EnumCast.hpp	/^struct EnumCastInternal<T, sizeof(uint8_t)>$/;"	s
EnumKey	Config/Registry.hpp	/^  bool EnumKey(DWORD idx, TCHAR *name, size_t _name_max_length) const {$/;"	f	class:RegistryKey
Enumerate	Android/DownloadManager.cpp	/^AndroidDownloadManager::Enumerate(JNIEnv *env, Net::DownloadListener &listener)$/;"	f	class:AndroidDownloadManager
Enumerate	Net/HTTP/DownloadManager.cpp	/^  void Enumerate(Net::DownloadListener &listener) {$/;"	f	class:final
Enumerate	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::Enumerate(DownloadListener &listener)$/;"	f	class:Net::DownloadManager
Environment	Android/Environment.cpp	/^namespace Environment {$/;"	n	file:
Environment	Android/Environment.hpp	/^namespace Environment {$/;"	n
Equal	Engine/PathSolvers/NavDijkstra.hpp	/^    struct Equal {$/;"	s	struct:NavDijkstra::DijkstraMap
Equals	Engine/Task/ObservationZones/AnnularSectorZone.cpp	/^AnnularSectorZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:AnnularSectorZone
Equals	Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:CylinderZone
Equals	Engine/Task/ObservationZones/ObservationZonePoint.cpp	/^ObservationZonePoint::Equals(const ObservationZonePoint &other) const$/;"	f	class:ObservationZonePoint
Equals	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:SectorZone
Equals	Engine/Task/ObservationZones/SymmetricSectorZone.cpp	/^SymmetricSectorZone::Equals(const ObservationZonePoint &other) const$/;"	f	class:SymmetricSectorZone
Equals	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::Equals(const OrderedTaskPoint &other) const$/;"	f	class:AATPoint
Equals	Engine/Task/Ordered/Points/ASTPoint.cpp	/^ASTPoint::Equals(const OrderedTaskPoint &_other) const$/;"	f	class:ASTPoint
Equals	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::Equals(const OrderedTaskPoint &other) const$/;"	f	class:OrderedTaskPoint
Equals	Geo/GeoPoint.hpp	/^  bool Equals(const GeoPoint other) const {$/;"	f	struct:GeoPoint
Equals	Geo/SearchPoint.hpp	/^  bool Equals(const SearchPoint& sp) const {$/;"	f	class:SearchPoint
EqualsPresetUnits	Units/UnitsStore.cpp	/^Units::Store::EqualsPresetUnits(const UnitSetting &config)$/;"	f	class:Units::Store
Erase	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Erase(WaypointPtr &&wp)$/;"	f	class:Waypoints
EraseDelta	Engine/Trace/Trace.cpp	/^Trace::EraseDelta(const unsigned target_size, const unsigned recent)$/;"	f	class:Trace
EraseEarlierThan	Engine/Trace/Trace.cpp	/^Trace::EraseEarlierThan(const unsigned p_time)$/;"	f	class:Trace
EraseEarlierThan	Engine/Trace/Trace.hpp	/^  void EraseEarlierThan(double time) {$/;"	f	class:Trace
EraseInside	Engine/Trace/Trace.cpp	/^Trace::EraseInside(DeltaList::iterator it)$/;"	f	class:Trace
EraseLaterThan	Engine/Trace/Trace.cpp	/^Trace::EraseLaterThan(const unsigned min_time)$/;"	f	class:Trace
EraseLaterThan	Engine/Trace/Trace.hpp	/^  void EraseLaterThan(double time) {$/;"	f	class:Trace
EraseOptionalStartPoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::EraseOptionalStartPoint(const unsigned index)$/;"	f	class:OrderedTask
ErasePoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ErasePoint(const unsigned index)$/;"	f	class:OrderedTask
EraseStart	Engine/Trace/Trace.cpp	/^Trace::EraseStart(TraceDelta &td)$/;"	f	class:Trace
EraseSuffix	Android/DownloadManager.cpp	/^EraseSuffix(Path p, const char *suffix)$/;"	f	file:
EraseUserMarkers	Engine/Waypoint/Waypoints.cpp	/^Waypoints::EraseUserMarkers()$/;"	f	class:Waypoints
Error	Device/Port/Port.cpp	/^Port::Error(const char *msg)$/;"	f	class:Port
Error	Lua/Error.hxx	/^  explicit Error(const char *_msg):std::runtime_error(_msg) {}$/;"	f	class:Lua::Error
Error	Lua/Error.hxx	/^class Error : public std::runtime_error {$/;"	c	namespace:Lua
Error	XML/Parser.hpp	/^  enum Error {$/;"	g	namespace:XML
ErrorDistType	Screen/Memory/Dither.hpp	/^  typedef int ErrorDistType; \/\/ must be wider than 8bits$/;"	t	class:Dither
ErrorEllipse	Math/LeastSquares.hpp	/^struct ErrorEllipse {$/;"	s
ErrorMessage	Device/Driver/LevilAHRS_G.cpp	/^ErrorMessage(gcc_unused unsigned code)$/;"	f	file:
EstimateThermalBase	Computer/ThermalBase.cpp	/^EstimateThermalBase(const RasterTerrain *terrain,$/;"	f
EstimateTimeStep	Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::EstimateTimeStep(const double time,$/;"	f	class:ThermalEncounterBand
EstimatedSpeed	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  EstimatedSpeed,$/;"	e	enum:Controls	file:
Event	Device/Driver/LX/LXN.hpp	/^  struct Event {$/;"	s	namespace:LXN
Event	Event/SDL/Event.hpp	/^struct Event {$/;"	s
Event	Event/Shared/Event.hpp	/^  Event(Callback _callback, void *_ptr)$/;"	f	struct:Event
Event	Event/Shared/Event.hpp	/^  Event(Type _type):type(_type) {}$/;"	f	struct:Event
Event	Event/Shared/Event.hpp	/^  Event(Type _type, PixelPoint _point)$/;"	f	struct:Event
Event	Event/Shared/Event.hpp	/^  Event(Type _type, unsigned _param):type(_type), param(_param) {}$/;"	f	struct:Event
Event	Event/Shared/Event.hpp	/^  Event(Type _type, unsigned _param, void *_ptr)$/;"	f	struct:Event
Event	Event/Shared/Event.hpp	/^  Event(Type _type, void *_ptr):type(_type), ptr(_ptr) {}$/;"	f	struct:Event
Event	Event/Shared/Event.hpp	/^struct Event {$/;"	s
Event	Event/Windows/Event.hpp	/^struct Event {$/;"	s
Event	Input/InputConfig.hpp	/^  struct Event {$/;"	s	struct:InputConfig
EventBuilder	Input/InputParser.cpp	/^struct EventBuilder {$/;"	s	file:
EventLoop	Event/Android/Loop.hpp	/^  EventLoop(EventQueue &_queue, TopWindow &_top_window)$/;"	f	class:EventLoop
EventLoop	Event/Android/Loop.hpp	/^class EventLoop {$/;"	c
EventLoop	Event/Poll/Loop.hpp	/^  EventLoop(EventQueue &_queue, TopWindow &_top_window)$/;"	f	class:EventLoop
EventLoop	Event/Poll/Loop.hpp	/^  explicit EventLoop(EventQueue &_queue)$/;"	f	class:EventLoop
EventLoop	Event/Poll/Loop.hpp	/^class EventLoop {$/;"	c
EventLoop	Event/SDL/Loop.hpp	/^  EventLoop(EventQueue &_queue, TopWindow &_top_window)$/;"	f	class:EventLoop
EventLoop	Event/SDL/Loop.hpp	/^  explicit EventLoop(EventQueue &_queue)$/;"	f	class:EventLoop
EventLoop	Event/SDL/Loop.hpp	/^class EventLoop {$/;"	c
EventLoop	Event/Windows/Loop.hpp	/^  explicit EventLoop(EventQueue &_queue):queue(_queue) {}$/;"	f	class:EventLoop
EventLoop	Event/Windows/Loop.hpp	/^class EventLoop {$/;"	c
EventPipe	OS/EventPipe.hpp	/^class EventPipe {$/;"	c
EventQueue	Event/Android/Queue.hpp	/^class EventQueue {$/;"	c
EventQueue	Event/Poll/Queue.cpp	/^EventQueue::EventQueue()$/;"	f	class:EventQueue
EventQueue	Event/SDL/Queue.cpp	/^EventQueue::EventQueue()$/;"	f	class:EventQueue
EventQueue	Event/SDL/Queue.hpp	/^class EventQueue {$/;"	c
EventQueue	Event/Windows/Queue.cpp	/^EventQueue::EventQueue()$/;"	f	class:EventQueue
EventQueue	Event/Windows/Queue.hpp	/^class EventQueue {$/;"	c
ExactPixelPoint	Screen/OpenGL/ExactPixelPoint.hpp	/^  constexpr ExactPixelPoint(GLexact _x, GLexact _y)$/;"	f	struct:ExactPixelPoint
ExactPixelPoint	Screen/OpenGL/ExactPixelPoint.hpp	/^  constexpr ExactPixelPoint(PixelPoint p)$/;"	f	struct:ExactPixelPoint
ExactPixelPoint	Screen/OpenGL/ExactPixelPoint.hpp	/^struct ExactPixelPoint : Point2D<GLexact> {$/;"	s
Exception	Java/Exception.hxx	/^	class Exception : public std::runtime_error {$/;"	c	namespace:Java
ExchangeBlackboard	ActionInterface.cpp	/^XCSoarInterface::ExchangeBlackboard()$/;"	f	class:XCSoarInterface
ExchangeBlackboard	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::ExchangeBlackboard()$/;"	f	class:GlueMapWindow
ExchangeDeviceBlackboard	ActionInterface.cpp	/^XCSoarInterface::ExchangeDeviceBlackboard()$/;"	f	class:XCSoarInterface
ExchangeRadioFrequencies	ActionInterface.cpp	/^void ActionInterface::ExchangeRadioFrequencies(bool to_devices)$/;"	f	class:ActionInterface
ExcludeAltitude	Engine/Airspace/AirspaceWarningManager.cpp	/^  bool ExcludeAltitude(const AbstractAirspace& airspace) {$/;"	f	class:final	file:
ExclusiveLease	Thread/Guard.hpp	/^  class ExclusiveLease {$/;"	c	class:Guard
Exists	Form/DataField/Enum.hpp	/^  bool Exists(const TCHAR *text) const {$/;"	f	class:final
Exists	IO/ZipArchive.cpp	/^ZipArchive::Exists(const char *name) const$/;"	f	class:ZipArchive
Exists	OS/FileUtil.cpp	/^Directory::Exists(Path path)$/;"	f	class:Directory
Exists	OS/FileUtil.cpp	/^File::Exists(Path path)$/;"	f	class:File
Exists	OS/FileUtil.cpp	/^File::Exists(const char *path)$/;"	f	class:File
Exists	Profile/Map.hpp	/^  bool Exists(const char *key) const {$/;"	f	class:ProfileMap
Exists	Profile/ProfileMap.cpp	/^Profile::Exists(const char *key)$/;"	f	class:Profile
ExistsAny	OS/FileUtil.cpp	/^File::ExistsAny(Path path)$/;"	f	class:File
ExistsIf	Util/Algorithm.hpp	/^ExistsIf(I first, I last, P predicate)$/;"	f
ExistsItem	Weather/Rasp/RaspStore.cpp	/^RaspStore::ExistsItem(const ZipArchive &archive, Path name, unsigned time_index)$/;"	f	class:RaspStore
ExitFastMode	Android/Nook.cpp	/^Nook::ExitFastMode()$/;"	f	class:Nook
ExitTransition	Engine/Task/TaskEvents.hpp	/^  virtual void ExitTransition(gcc_unused const TaskWaypoint &tp) {}$/;"	f	class:TaskEvents
Expand	Geo/Flat/FlatBoundingBox.hpp	/^  void Expand(const FlatGeoPoint& p) {$/;"	f	struct:FlatBoundingBox
Expand	Menu/ButtonLabel.cpp	/^ButtonLabel::Expand(const TCHAR *text, TCHAR *buffer, size_t size)$/;"	f	class:ButtonLabel
ExpandByOne	Geo/Flat/FlatBoundingBox.hpp	/^  void ExpandByOne() {$/;"	f	struct:FlatBoundingBox
ExpandLocalPath	LocalPath.cpp	/^ExpandLocalPath(Path src)$/;"	f
ExpandMacros	Menu/ExpandMacros.cpp	/^ButtonLabel::ExpandMacros(const TCHAR *In, TCHAR *OutBuffer, size_t Size)$/;"	f	class:ButtonLabel
ExpandTaskMacros	Menu/ExpandMacros.cpp	/^ExpandTaskMacros(const TCHAR *name,$/;"	f	file:
ExpandTrafficMacros	Menu/ExpandMacros.cpp	/^ExpandTrafficMacros(const TCHAR *name)$/;"	f	file:
Expanded	Menu/ButtonLabel.hpp	/^  struct Expanded {$/;"	s	namespace:ButtonLabel
ExpectACK	Device/Driver/LX/Protocol.hpp	/^  ExpectACK(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX
ExpectACK	Device/Driver/LXERA/Protocol.hpp	/^  ExpectACK(Port &port, OperationEnvironment &env,$/;"	f	namespace:LXEra
ExpectChecksum	Device/Driver/FLARM/Device.cpp	/^ExpectChecksum(Port &port, uint8_t checksum, OperationEnvironment &env)$/;"	f	file:
ExpectEnd	OS/Args.hpp	/^  void ExpectEnd() {$/;"	f	class:Args
ExpectLine	Device/Util/NMEAReader.cpp	/^PortNMEAReader::ExpectLine(const char *_prefix, TimeoutClock timeout)$/;"	f	class:PortNMEAReader
ExpectNext	OS/Args.hpp	/^  const char *ExpectNext() {$/;"	f	class:Args
ExpectNextDouble	OS/Args.hpp	/^  double ExpectNextDouble() {$/;"	f	class:Args
ExpectNextInt	OS/Args.hpp	/^  int ExpectNextInt() {$/;"	f	class:Args
ExpectNextPath	OS/Args.hpp	/^  AllocatedPath ExpectNextPath() {$/;"	f	class:Args
ExpectNextPath	OS/Args.hpp	/^  Path ExpectNextPath() {$/;"	f	class:Args
ExpectNextT	OS/Args.hpp	/^  tstring ExpectNextT() {$/;"	f	class:Args
ExpectOK	Kobo/WPASupplicant.hpp	/^  bool ExpectOK() {$/;"	f	class:WPASupplicant
ExpectResponse	Kobo/WPASupplicant.cpp	/^WPASupplicant::ExpectResponse(const char *expected)$/;"	f	class:WPASupplicant
ExpectString	Device/Port/Port.cpp	/^Port::ExpectString(const char *token, OperationEnvironment &env,$/;"	f	class:Port
ExpectXOff	Device/Driver/Flytec/Logger.cpp	/^ExpectXOff(Port &port, OperationEnvironment &env,$/;"	f	file:
ExpectedMsgLength	Device/Driver/KRT2.cpp	/^KRT2Device::ExpectedMsgLength(const uint8_t *data, size_t length)$/;"	f	class:KRT2Device
ExpectedMsgLengthSTX	Device/Driver/KRT2.cpp	/^KRT2Device::ExpectedMsgLengthSTX(uint8_t code)$/;"	f	class:KRT2Device
Expire	Cloud/Client.cpp	/^CloudClientContainer::Expire(std::chrono::steady_clock::time_point before)$/;"	f	class:CloudClientContainer
Expire	Cloud/Thermal.cpp	/^CloudThermalContainer::Expire(std::chrono::steady_clock::time_point before)$/;"	f	class:CloudThermalContainer
Expire	Computer/GlideComputer.hpp	/^  void Expire() {$/;"	f	class:GlideComputer
Expire	FLARM/Data.hpp	/^  void Expire(double clock) {$/;"	f	struct:FlarmData
Expire	FLARM/Error.hpp	/^  void Expire(gcc_unused double clock) {$/;"	f
Expire	FLARM/List.hpp	/^  void Expire(double clock) {$/;"	f	struct:TrafficList
Expire	FLARM/Status.hpp	/^  void Expire(double clock) {$/;"	f	struct:FlarmStatus
Expire	FLARM/Version.hpp	/^  void Expire(gcc_unused double clock) {$/;"	f	struct:FlarmVersion
Expire	GliderLink/GliderLinkData.hpp	/^  void Expire(double clock) {$/;"	f	struct:GliderLinkData
Expire	GliderLink/List.hpp	/^  void Expire(double clock) {$/;"	f	struct:GliderLinkTrafficList
Expire	NMEA/Attitude.cpp	/^AttitudeState::Expire(double now)$/;"	f	class:AttitudeState
Expire	NMEA/Derived.cpp	/^DerivedInfo::Expire(double Time)$/;"	f	class:DerivedInfo
Expire	NMEA/ExternalSettings.cpp	/^ExternalSettings::Expire(double time)$/;"	f	class:ExternalSettings
Expire	NMEA/GPSState.cpp	/^GPSState::Expire(double now)$/;"	f	class:GPSState
Expire	NMEA/Info.cpp	/^NMEAInfo::Expire()$/;"	f	class:NMEAInfo
ExpireWallClock	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ExpireWallClock()$/;"	f	class:DeviceBlackboard
ExpireWallClock	NMEA/Info.cpp	/^NMEAInfo::ExpireWallClock()$/;"	f	class:NMEAInfo
Expired	Computer/ClimbAverageCalculator.cpp	/^ClimbAverageCalculator::Expired(double now, double max_age) const$/;"	f	class:ClimbAverageCalculator
Export	Rough/RoughAngle.hpp	/^  static constexpr Angle Export(int16_t x) {$/;"	f	class:RoughAngle
Export	Rough/RoughSpeed.hpp	/^  static constexpr double Export(uint16_t x) {$/;"	f	class:RoughSpeed
Export	Rough/RoughVSpeed.hpp	/^  static double Export(int16_t x) {$/;"	f	class:RoughVSpeed
Export	Screen/OpenGL/Color.hpp	/^  static constexpr uint8_t Export(Component value) {$/;"	f	class:Color
ExportAngle	Tracking/SkyLines/Export.hpp	/^ExportAngle(Angle src)$/;"	f	namespace:SkyLinesTracking
ExportFloat	Screen/OpenGL/Color.hpp	/^  static constexpr GLfloat ExportFloat(Component value) {$/;"	f	class:Color
ExportGeoPoint	Tracking/SkyLines/Export.hpp	/^ExportGeoPoint(::GeoPoint src)$/;"	f	namespace:SkyLinesTracking
ExportOutputMode	Device/Driver/BlueFly/Internal.hpp	/^    static unsigned ExportOutputMode(unsigned value) {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
ExportOutputMode	Device/Driver/BlueFly/Internal.hpp	/^    unsigned ExportOutputMode() const {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
ExportPoint	Geo/GeoClip.hpp	/^  GeoPoint ExportPoint(GeoPoint pt) const {$/;"	f	class:GeoClip
ExportUSBStorage	Kobo/SystemDialog.cpp	/^SystemWidget::ExportUSBStorage()$/;"	f	class:SystemWidget
ExportVolume	Device/Driver/BlueFly/Internal.hpp	/^    static unsigned ExportVolume(double value) {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
ExportVolume	Device/Driver/BlueFly/Internal.hpp	/^    unsigned ExportVolume() const {$/;"	f	struct:BlueFlyDevice::BlueFlySettings
Expose	Screen/Custom/TopCanvas.hpp	62;"	d
Expose	Screen/EGL/System.hpp	50;"	d
Expose	Screen/GLX/System.hpp	39;"	d
Expose	Screen/TopWindow.hpp	72;"	d
ExtConfig	Device/Driver/LX/LXN.hpp	/^  struct ExtConfig {$/;"	s	namespace:LXN
Extend	Geo/GeoBounds.cpp	/^GeoBounds::Extend(const GeoPoint pt)$/;"	f	class:GeoBounds
Extend	Math/ARange.cpp	/^AngleRange::Extend(Angle value)$/;"	f	class:AngleRange
ExtensionConfig	Device/Driver/LX/LXN.hpp	/^  struct ExtensionConfig {$/;"	s	namespace:LXN
ExtensionDefinition	Device/Driver/LX/LXN.hpp	/^  struct ExtensionDefinition {$/;"	s	namespace:LXN
External	Android/Battery.cpp	/^  namespace External {$/;"	n	namespace:Power	file:
External	Hardware/Battery.cpp	/^  namespace External{$/;"	n	namespace:Power	file:
External	Hardware/Battery.hpp	/^  namespace External{$/;"	n	namespace:Power
ExternalLogger	Logger/ExternalLogger.hpp	/^namespace ExternalLogger {$/;"	n
ExternalSettings	NMEA/ExternalSettings.hpp	/^struct ExternalSettings {$/;"	s
ExternalWind	Profile/ProfileKeys.cpp	/^const char ExternalWind[] = "ExternalWind";$/;"	m	namespace:ProfileKeys	file:
ExtractParameters	Util/ExtractParameters.cpp	/^ExtractParameters(const TCHAR *src, TCHAR *dst,$/;"	f
EyeCreateOnPort	Device/Driver/Eye.cpp	/^EyeCreateOnPort(gcc_unused const DeviceConfig &config, gcc_unused Port &com_port)$/;"	f	file:
EyeDevice	Device/Driver/Eye.cpp	/^class EyeDevice : public AbstractDevice {$/;"	c	file:
FACTORY_TYPE_HPP	Engine/Task/Factory/TaskFactoryType.hpp	24;"	d
FAI	Engine/Task/Shapes/FAITriangleSettings.hpp	/^    FAI,$/;"	m	class:FAITriangleSettings::Threshold
FAIGoalTaskFactory	Engine/Task/Factory/FAIGoalTaskFactory.cpp	/^FAIGoalTaskFactory::FAIGoalTaskFactory(OrderedTask& _task,$/;"	f	class:FAIGoalTaskFactory
FAIGoalTaskFactory	Engine/Task/Factory/FAIGoalTaskFactory.hpp	/^class FAIGoalTaskFactory: $/;"	c
FAIL1	zzip/__debug.h	67;"	d
FAIL2	zzip/__debug.h	68;"	d
FAIL3	zzip/__debug.h	69;"	d
FAIL4	zzip/__debug.h	70;"	d
FAIL5	zzip/__debug.h	71;"	d
FAIL6	zzip/__debug.h	72;"	d
FAILED	Device/Port/Port.hpp	/^    FAILED,$/;"	m	class:Port::WaitResult
FAILED	Device/Port/State.hpp	/^  FAILED,$/;"	m	class:PortState
FAILED	Engine/PathSolvers/SolverResult.hpp	/^  FAILED,$/;"	m	class:SolverResult
FAIORTaskFactory	Engine/Task/Factory/FAIORTaskFactory.cpp	/^FAIORTaskFactory::FAIORTaskFactory(OrderedTask& _task,$/;"	f	class:FAIORTaskFactory
FAIORTaskFactory	Engine/Task/Factory/FAIORTaskFactory.hpp	/^class FAIORTaskFactory: $/;"	c
FAISphere	Geo/FAISphere.hpp	/^namespace FAISphere {$/;"	n
FAITaskFactory	Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::FAITaskFactory(OrderedTask& _task,$/;"	f	class:FAITaskFactory
FAITaskFactory	Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::FAITaskFactory(const TaskFactoryConstraints &_constraints,$/;"	f	class:FAITaskFactory
FAITaskFactory	Engine/Task/Factory/FAITaskFactory.hpp	/^class FAITaskFactory: $/;"	c
FAITrianglePointValidator	Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::FAITrianglePointValidator($/;"	f	class:FAITrianglePointValidator
FAITrianglePointValidator	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^class FAITrianglePointValidator$/;"	c
FAITriangleRules	Engine/Task/Shapes/FAITriangleRules.hpp	/^namespace FAITriangleRules {$/;"	n
FAITriangleSettings	Engine/Task/Shapes/FAITriangleSettings.hpp	/^struct FAITriangleSettings {$/;"	s
FAITriangleTaskFactory	Engine/Task/Factory/FAITriangleTaskFactory.cpp	/^FAITriangleTaskFactory::FAITriangleTaskFactory(OrderedTask& _task,$/;"	f	class:FAITriangleTaskFactory
FAITriangleTaskFactory	Engine/Task/Factory/FAITriangleTaskFactory.hpp	/^class FAITriangleTaskFactory: $/;"	c
FAITriangleThreshold	Profile/ProfileKeys.cpp	/^const char FAITriangleThreshold[] = "FAITriangleThreshold";$/;"	m	namespace:ProfileKeys	file:
FAITriangleValidator	Engine/Task/Shapes/FAITriangleTask.hpp	/^namespace FAITriangleValidator$/;"	n
FAI_FINISH_HEIGHT	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  FAI_FINISH_HEIGHT,$/;"	e	enum:Controls	file:
FAI_GENERAL	Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_GENERAL = 0,$/;"	m	class:TaskFactoryType
FAI_GOAL	Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_GOAL,$/;"	m	class:TaskFactoryType
FAI_GOAL_TASK_FACTORY_HPP	Engine/Task/Factory/FAIGoalTaskFactory.hpp	23;"	d
FAI_OR	Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_OR,$/;"	m	class:TaskFactoryType
FAI_OR_TASK_FACTORY_HPP	Engine/Task/Factory/FAIORTaskFactory.hpp	23;"	d
FAI_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FAI_SECTOR,$/;"	m	class:TaskPointFactoryType
FAI_SECTOR	Engine/Task/ObservationZones/ObservationZone.hpp	/^    FAI_SECTOR,$/;"	m	class:ObservationZone::Shape
FAI_TASK_FACTORY_HPP	Engine/Task/Factory/FAITaskFactory.hpp	23;"	d
FAI_TRIANGLE	Engine/Task/Factory/TaskFactoryType.hpp	/^  FAI_TRIANGLE,$/;"	m	class:TaskFactoryType
FAI_TRIANGLE_LEFT	Waypoint/WaypointFilter.hpp	/^  FAI_TRIANGLE_LEFT,$/;"	m	class:TypeFilter
FAI_TRIANGLE_RIGHT	Waypoint/WaypointFilter.hpp	/^  FAI_TRIANGLE_RIGHT,$/;"	m	class:TypeFilter
FAI_TRIANGLE_SECTOR_MAX	Engine/Task/Shapes/FAITriangleArea.hpp	/^static constexpr unsigned FAI_TRIANGLE_SECTOR_MAX = 8 * 3 * 10;$/;"	v
FAI_TRIANGLE_TASK_FACTORY_HPP	Engine/Task/Factory/FAITriangleTaskFactory.hpp	23;"	d
FAI_TRIANGLE_THRESHOLD	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  FAI_TRIANGLE_THRESHOLD,$/;"	e	enum:ControlIndex	file:
FALSE	Util/TriState.hpp	/^  FALSE, TRUE, UNKNOWN$/;"	m	class:TriState
FALSE	Util/TriState.hpp	47;"	d
FAST_FORWARD	Dialogs/ReplayDialog.cpp	/^  FAST_FORWARD,$/;"	e	enum:Buttons	file:
FATAL_PROBLEM	FLARM/Error.hpp	/^    FATAL_PROBLEM = 0x03,$/;"	m	struct:FlarmError	typeref:enum:FlarmError::
FBO	Screen/OpenGL/FBO.hpp	/^namespace FBO {$/;"	n
FB_POWERDOWN_DISABLE	Screen/FB/mxcfb.h	114;"	d
FB_SYNC_CLK_IDLE_EN	Screen/FB/mxcfb.h	33;"	d
FB_SYNC_CLK_LAT_FALL	Screen/FB/mxcfb.h	31;"	d
FB_SYNC_DATA_INVERT	Screen/FB/mxcfb.h	32;"	d
FB_SYNC_OE_LOW_ACT	Screen/FB/mxcfb.h	30;"	d
FB_SYNC_SHARP_MODE	Screen/FB/mxcfb.h	34;"	d
FB_SYNC_SWAP_RGB	Screen/FB/mxcfb.h	35;"	d
FB_TEMP_AUTO_UPDATE_DISABLE	Screen/FB/mxcfb.h	115;"	d
FDT	Device/Driver/Volkslogger/vlconv.cpp	/^  uint8_t FDT[3];$/;"	m	class:C_RECORD	file:
FEET	Units/Unit.hpp	/^  FEET,$/;"	m	class:Unit
FEET_PER_MINUTE	Units/Unit.hpp	/^  FEET_PER_MINUTE,$/;"	m	class:Unit
FIFTH	Engine/Contest/Solvers/ContestDijkstra.cpp	191;"	d	file:
FILE	Dialogs/ReplayDialog.cpp	/^    FILE,$/;"	e	enum:final::Controls	file:
FILE	Form/DataField/Base.hpp	/^    FILE,$/;"	m	class:DataField::Type
FILE_1	Waypoint/WaypointFilter.hpp	/^  FILE_1,$/;"	m	class:TypeFilter
FILE_2	Waypoint/WaypointFilter.hpp	/^  FILE_2,$/;"	m	class:TypeFilter
FILE_CACHE_MAGIC	IO/FileCache.cpp	/^static constexpr unsigned FILE_CACHE_MAGIC = 0xab352f8a;$/;"	v	file:
FILE_DESCRIPTOR_HXX	OS/FileDescriptor.hxx	31;"	d
FILE_OUTPUT_STREAM_HXX	IO/FileOutputStream.hxx	31;"	d
FILE_READER_HXX	IO/FileReader.hxx	31;"	d
FILLED	Renderer/LabelShape.hpp	/^  FILLED,$/;"	m	class:LabelShape
FILTER	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^    FILTER,$/;"	e	enum:final::Button	file:
FILTER_HPP	Math/Filter.hpp	24;"	d
FILTER_NODE_TYPE_BBOX	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_BBOX = 4,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_BOUNDARY	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_BOUNDARY = 6,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_COMPARISON	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_COMPARISON = 2,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_FEATUREID	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_FEATUREID = 10,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_GEOMETRY_LINE	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_GEOMETRY_LINE = 8,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_GEOMETRY_POINT	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_GEOMETRY_POINT = 7,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_GEOMETRY_POLYGON	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_GEOMETRY_POLYGON = 9,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_LITERAL	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_LITERAL = 5,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_LOGICAL	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_LOGICAL = 0,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_PROPERTYNAME	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_PROPERTYNAME = 3,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_SPATIAL	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_SPATIAL = 1,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_TEMPORAL	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_TEMPORAL = 11,$/;"	e	enum:__anon28
FILTER_NODE_TYPE_TIME_PERIOD	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_TIME_PERIOD = 12$/;"	e	enum:__anon28
FILTER_NODE_TYPE_UNDEFINED	Topography/shapelib/mapserver.h	/^    FILTER_NODE_TYPE_UNDEFINED = -1,$/;"	e	enum:__anon28
FIN	Device/Driver/Volkslogger/vlconv.cpp	/^  C2 FIN;$/;"	m	class:C_RECORD	file:
FINALGLIDE	Engine/Task/TaskBehaviour.hpp	/^    FINALGLIDE = 0,$/;"	m	class:TaskBehaviour::AutoMCMode
FINAL_GLIDE	DisplayMode.hpp	/^  FINAL_GLIDE,$/;"	m	class:DisplayMode
FINISH	Engine/Task/Points/Type.hpp	/^  FINISH,$/;"	m	class:TaskPointType
FINISH	Waypoint/WaypointFilter.hpp	/^  FINISH,$/;"	m	class:TypeFilter
FINISHED	OS/OverlappedEvent.hpp	/^    FINISHED,$/;"	e	enum:OverlappedEvent::WaitResult
FINISHPOINT_HPP	Engine/Task/Ordered/Points/FinishPoint.hpp	25;"	d
FINISH_CYLINDER	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FINISH_CYLINDER,$/;"	m	class:TaskPointFactoryType
FINISH_HEIGHT_REF	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  FINISH_HEIGHT_REF,$/;"	e	enum:Controls	file:
FINISH_LINE	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FINISH_LINE,$/;"	m	class:TaskPointFactoryType
FINISH_MIN_HEIGHT	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  FINISH_MIN_HEIGHT,$/;"	e	enum:Controls	file:
FINISH_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  FINISH_SECTOR,$/;"	m	class:TaskPointFactoryType
FIN_MC0_ALTD	InfoBoxes/Content/Type.hpp	/^    FIN_MC0_ALTD,$/;"	e	enum:InfoBoxFactory::Type
FIRMWARE_TIMEOUT	FLARM/Error.hpp	/^    FIRMWARE_TIMEOUT = 0x11,$/;"	e	enum:uint8_t
FIRST_FIVE	Renderer/WaypointRendererSettings.hpp	/^    FIRST_FIVE,$/;"	m	class:WaypointRendererSettings::DisplayTextType
FIRST_THREE	Renderer/WaypointRendererSettings.hpp	/^    FIRST_THREE,$/;"	m	class:WaypointRendererSettings::DisplayTextType
FIRST_WORD	Renderer/WaypointRendererSettings.hpp	/^    FIRST_WORD,$/;"	m	class:WaypointRendererSettings::DisplayTextType
FIX	Tracking/SkyLines/Protocol.hpp	/^  FIX = 3,$/;"	e	enum:SkyLinesTracking::Type
FIXED	Task/TaskFileSeeYou.cpp	/^    FIXED,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
FIXED	Terrain/TerrainSettings.hpp	/^  FIXED,$/;"	m	class:SlopeShading
FLAG_AIRSPEED	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_AIRSPEED = 0x8;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_ALTITUDE	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_ALTITUDE = 0x10;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_BAD_KEY	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_BAD_KEY = 0x1;$/;"	m	struct:SkyLinesTracking::ACKPacket
FLAG_CLUB	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_CLUB = 0x2;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
FLAG_ENL	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_ENL = 0x40;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_FOLLOWEES	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_FOLLOWEES = 0x1;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
FLAG_GROUND_SPEED	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_GROUND_SPEED = 0x4;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_LOCATION	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_LOCATION = 0x1;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_NEAR	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_NEAR = 0x4;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
FLAG_NOT_FOUND	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_NOT_FOUND = 0x1;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
FLAG_TRACK	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_TRACK = 0x2;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAG_VARIO	Tracking/SkyLines/Protocol.hpp	/^  static const uint32_t FLAG_VARIO = 0x20;$/;"	m	struct:SkyLinesTracking::FixPacket
FLAP_POSITION	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    FLAP_POSITION,$/;"	e	enum:SwitchesLeft::Controls	file:
FLARM	Device/Driver/FLARM/BinaryProtocol.hpp	/^namespace FLARM {$/;"	n
FLARM	Device/Driver/FLARM/CRC16.hpp	/^namespace FLARM {$/;"	n
FLARM	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  FLARM,$/;"	e	enum:Controls	file:
FLARMConfigWidget	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  FLARMConfigWidget(const DialogLook &look, FlarmDevice &_device)$/;"	f	class:final
FLARMNET	Repository/FileType.hpp	/^  FLARMNET,$/;"	m	class:FileType
FLARM_LOCK	Dialogs/Traffic/TeamCodeDialog.cpp	/^    FLARM_LOCK,$/;"	e	enum:final::Buttons	file:
FLARM_RADAR	PageSettings.hpp	/^    FLARM_RADAR,$/;"	m	class:PageLayout::Main
FLARM_TRAFFIC_WINDOW_H	Gauge/FlarmTrafficWindow.hpp	25;"	d
FLARM_TRAFFIC_WINDOW_LOOK_HPP	Look/FlarmTrafficLook.hpp	25;"	d
FLASH_MEMORY	FLARM/Error.hpp	/^    FLASH_MEMORY = 0x61,$/;"	e	enum:uint8_t
FLATBOUNDINGBOX_HPP	Geo/Flat/FlatBoundingBox.hpp	23;"	d
FLATELLIPSE_HPP	Geo/Flat/FlatEllipse.hpp	24;"	d
FLATLINE_HPP	Geo/Flat/FlatLine.hpp	24;"	d
FLATPOINT_HPP	Geo/Flat/FlatPoint.hpp	23;"	d
FLATRAY_HPP	Geo/Flat/FlatRay.hpp	23;"	d
FLATTENING	Geo/WGS84.hpp	/^  static constexpr double FLATTENING = 1 \/ 298.257223563;$/;"	m	namespace:WGS84
FLAT_TRIANGLE_FAN_HPP	Engine/Route/FlatTriangleFan.hpp	24;"	d
FLAT_TRIANGLE_FAN_TREE_HPP	Engine/Route/FlatTriangleFanTree.hpp	24;"	d
FLDCCL	Device/Driver/Volkslogger/vlconv.h	37;"	d
FLDCID	Device/Driver/Volkslogger/vlconv.h	36;"	d
FLDEPEV	Device/Driver/Volkslogger/vlconv.h	62;"	d
FLDETKF	Device/Driver/Volkslogger/vlconv.h	63;"	d
FLDFDT	Device/Driver/Volkslogger/vlconv.h	41;"	d
FLDFIN	Device/Driver/Volkslogger/vlconv.h	45;"	d
FLDGID	Device/Driver/Volkslogger/vlconv.h	35;"	d
FLDGTY	Device/Driver/Volkslogger/vlconv.h	34;"	d
FLDHDR	Device/Driver/Volkslogger/vlconv.h	61;"	d
FLDLDG	Device/Driver/Volkslogger/vlconv.h	46;"	d
FLDNTP	Device/Driver/Volkslogger/vlconv.h	40;"	d
FLDPLT	Device/Driver/Volkslogger/vlconv.h	29;"	d
FLDPLT1	Device/Driver/Volkslogger/vlconv.h	30;"	d
FLDPLT2	Device/Driver/Volkslogger/vlconv.h	31;"	d
FLDPLT3	Device/Driver/Volkslogger/vlconv.h	32;"	d
FLDPLT4	Device/Driver/Volkslogger/vlconv.h	33;"	d
FLDSTA	Device/Driver/Volkslogger/vlconv.h	44;"	d
FLDTID	Device/Driver/Volkslogger/vlconv.h	42;"	d
FLDTKF	Device/Driver/Volkslogger/vlconv.h	43;"	d
FLDTP1	Device/Driver/Volkslogger/vlconv.h	48;"	d
FLDTP10	Device/Driver/Volkslogger/vlconv.h	57;"	d
FLDTP11	Device/Driver/Volkslogger/vlconv.h	58;"	d
FLDTP12	Device/Driver/Volkslogger/vlconv.h	59;"	d
FLDTP2	Device/Driver/Volkslogger/vlconv.h	49;"	d
FLDTP3	Device/Driver/Volkslogger/vlconv.h	50;"	d
FLDTP4	Device/Driver/Volkslogger/vlconv.h	51;"	d
FLDTP5	Device/Driver/Volkslogger/vlconv.h	52;"	d
FLDTP6	Device/Driver/Volkslogger/vlconv.h	53;"	d
FLDTP7	Device/Driver/Volkslogger/vlconv.h	54;"	d
FLDTP8	Device/Driver/Volkslogger/vlconv.h	55;"	d
FLDTP9	Device/Driver/Volkslogger/vlconv.h	56;"	d
FLDTZN	Device/Driver/Volkslogger/vlconv.h	38;"	d
FLEX_WING_FAI1	Tracking/LiveTrack24.hpp	/^    FLEX_WING_FAI1 = 2,$/;"	m	class:LiveTrack24::VehicleType
FLIGHT	Dialogs/Device/DeviceListDialog.cpp	/^    RECONNECT, FLIGHT, EDIT, MANAGE, MONITOR,$/;"	e	enum:final::Buttons	file:
FLIGHTINFO	Device/Driver/Volkslogger/vlapi2.h	/^    struct FLIGHTINFO {$/;"	s	struct:VLAPI_DATA::DECLARATION
FLIGHT_INFO	Device/Driver/LX/LXN.hpp	/^    FLIGHT_INFO = 0xfc,$/;"	e	enum:LXN::Command
FLIGHT_LEVEL	Units/Unit.hpp	/^  FLIGHT_LEVEL,$/;"	m	class:Unit
FLIGHT_MODE	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    FLIGHT_MODE,$/;"	e	enum:SwitchesRight::Controls	file:
FLIGHT_RECORDER	FLARM/Error.hpp	/^    FLIGHT_RECORDER = 0x91,$/;"	e	enum:uint8_t
FLIGHT_STATISTICS_HPP	FlightStatistics.hpp	25;"	d
FLIGHT_STATISTICS_RENDERER_HPP	Renderer/FlightStatisticsRenderer.hpp	25;"	d
FLOAT_RTK	NMEA/GPSState.hpp	/^  FLOAT_RTK,$/;"	m	class:FixQuality
FLUSH_BUFFERS	Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t FLUSH_BUFFERS = 0x40;$/;"	m	class:K6BtPort
FLY	Dialogs/SimulatorPromptWindow.hpp	/^    FLY = 1000,$/;"	e	enum:final::Buttons
FLYING_SAUCER	FLARM/Traffic.hpp	/^    FLYING_SAUCER = 10,   \/\/!< flying saucer (UFO)$/;"	m	class:FlarmTraffic::AircraftType
FNday	Math/SunEphemeris.cpp	/^SunEphemeris::FNday(const BrokenDateTime &date_time)$/;"	f	class:SunEphemeris
FOCUS_TIMEOUT_MAX	InfoBoxes/InfoBoxWindow.cpp	/^static constexpr std::chrono::steady_clock::duration FOCUS_TIMEOUT_MAX = std::chrono::seconds(20);$/;"	v	file:
FOLLOW_PAN	MapWindow/MapWindow.hpp	/^    FOLLOW_PAN,$/;"	e	enum:MapWindow::FollowMode
FOLLOW_SELF	MapWindow/MapWindow.hpp	/^    FOLLOW_SELF,$/;"	e	enum:MapWindow::FollowMode
FOREIGN_FIFO_BUFFER_HXX	Util/ForeignFifoBuffer.hxx	31;"	d
FRAMEBUFFER	Screen/OpenGL/FBO.hpp	/^  static constexpr GLenum FRAMEBUFFER = GL_FRAMEBUFFER_OES;$/;"	m	namespace:FBO
FRM_SIZE	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t FRM_SIZE = 0x1000;$/;"	m	class:DBB
FRiskFunction	Engine/GlideSolvers/GlidePolar.cpp	/^FRiskFunction(const double x, const double k)$/;"	f	file:
FS	Waypoint/WaypointFileType.hpp	/^  FS,$/;"	m	class:WaypointFileType
FTDouble	Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon84
FTInteger	Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon84
FTInvalid	Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon84
FTP	Kobo/NetworkDialog.cpp	/^    FTP,$/;"	e	enum:final::Buttons	file:
FTString	Topography/shapelib/mapshape.h	/^  typedef enum {FTString, FTInteger, FTDouble, FTInvalid} DBFFieldType;$/;"	e	enum:__anon84
FTY	Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
FT_CEIL	Screen/FreeType/Font.cpp	/^FT_CEIL(FT_Long x)$/;"	f	file:
FT_FLOOR	Screen/FreeType/Font.cpp	/^FT_FLOOR(FT_Long x)$/;"	f	file:
FT_Face	Screen/Font.hpp	/^typedef struct FT_FaceRec_ *FT_Face;$/;"	t	typeref:struct:FT_FaceRec_
FT_Face	Screen/FreeType/Init.hpp	/^typedef struct FT_FaceRec_ *FT_Face;$/;"	t	typeref:struct:FT_FaceRec_
FULL	MapSettings.hpp	/^    FULL,$/;"	m	class:TrailSettings::Length
FULL_ARROW	MapSettings.hpp	/^  FULL_ARROW,$/;"	m	class:WindArrowStyle
FXA	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
FactoryReset	Device/Driver/LX/LX1600.hpp	/^  FactoryReset(Port &port, OperationEnvironment &env)$/;"	f	namespace:LX1600
FactoryReset	Device/Driver/LXERA/LXERA.hpp	/^  FactoryReset(Port &port, OperationEnvironment &env)$/;"	f	namespace:LXEra
FadeToWhite	Screen/OpenGL/Canvas.cpp	/^Canvas::FadeToWhite(GLubyte alpha)$/;"	f	class:Canvas
FadeToWhite	Screen/OpenGL/Canvas.cpp	/^Canvas::FadeToWhite(PixelRect rc, GLubyte alpha)$/;"	f	class:Canvas
FailQueue	Net/HTTP/DownloadManager.cpp	/^DownloadManagerThread::FailQueue()$/;"	f	class:DownloadManagerThread
FakeBufferWindow	Screen/FakeBufferWindow.hpp	/^class FakeBufferWindow : public PaintWindow {$/;"	c
FallbackElevation	Waypoint/Factory.cpp	/^WaypointFactory::FallbackElevation(Waypoint &waypoint) const$/;"	f	class:WaypointFactory
FastForward	Replay/Replay.hpp	/^  bool FastForward(double delta_s) {$/;"	f	class:final
FastIntegerRotation	Math/FastRotation.hpp	/^  FastIntegerRotation()$/;"	f	class:FastIntegerRotation
FastIntegerRotation	Math/FastRotation.hpp	/^  FastIntegerRotation(Angle _angle):angle(Angle::Radians(-9999)) { SetAngle(_angle); }$/;"	f	class:FastIntegerRotation
FastIntegerRotation	Math/FastRotation.hpp	/^class FastIntegerRotation {$/;"	c
FastRotation	Math/FastRotation.hpp	/^  FastRotation()$/;"	f	class:FastRotation
FastRotation	Math/FastRotation.hpp	/^  FastRotation(Angle _angle):angle(Angle::Radians(-9999)) { SetAngle(_angle); }$/;"	f	class:FastRotation
FastRotation	Math/FastRotation.hpp	/^class FastRotation {$/;"	c
FastRowRotation	Math/FastRotation.hpp	/^  FastRowRotation(const FastIntegerRotation &fir, int y)$/;"	f	class:FastRowRotation
FastRowRotation	Math/FastRotation.hpp	/^class FastRowRotation {$/;"	c
FastScale	Screen/Layout.hpp	/^  FastScale(int x)$/;"	f	namespace:Layout
FastScale	Screen/Layout.hpp	/^  FastScale(long x)$/;"	f	namespace:Layout
FastScale	Screen/Layout.hpp	/^  FastScale(unsigned x)$/;"	f	namespace:Layout
FatalError	MainWindow.cpp	/^FatalError(const TCHAR *msg)$/;"	f	file:
FdSet	Net/HTTP/Multi.hpp	/^    void FdSet(fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set,$/;"	f	class:Net::CurlMulti
FeaturesSettings	Computer/Settings.hpp	/^struct FeaturesSettings {$/;"	s
File	Java/File.hxx	/^	class File : public LocalObject {$/;"	c	namespace:Java
File	LocalPath.hpp	/^namespace File {$/;"	n
File	OS/FileUtil.hpp	/^namespace File$/;"	n
FileASCII	Device/Driver/CAI302/Protocol.hpp	/^  struct FileASCII {$/;"	s	namespace:CAI302
FileBinary	Device/Driver/CAI302/Protocol.hpp	/^  struct FileBinary {$/;"	s	namespace:CAI302
FileCache	IO/FileCache.cpp	/^FileCache::FileCache(AllocatedPath &&_cache_path)$/;"	f	class:FileCache
FileCache	IO/FileCache.hpp	/^class FileCache {$/;"	c
FileData	Device/Driver/CAI302/Protocol.hpp	/^  struct FileData {$/;"	s	namespace:CAI302
FileDataField	Form/DataField/File.cpp	/^FileDataField::FileDataField(DataFieldListener *listener)$/;"	f	class:FileDataField
FileDescriptor	Net/SocketDescriptor.hxx	/^		:FileDescriptor(_fd) {}$/;"	f	class:SocketDescriptor
FileDescriptor	OS/FileDescriptor.hxx	/^class FileDescriptor {$/;"	c
FileDescriptor	OS/UniqueFileDescriptor.hxx	/^		:FileDescriptor(_fd) {}$/;"	f	class:UniqueFileDescriptor
FileDescriptor	OS/UniqueFileDescriptor.hxx	/^		:FileDescriptor(other.Steal()) {}$/;"	f	class:UniqueFileDescriptor
FileHandle	IO/FileHandle.hpp	/^  FileHandle(FileHandle &&other):file(other.file) {$/;"	f	class:FileHandle
FileHandle	IO/FileHandle.hpp	/^  FileHandle(Path path, const TCHAR *mode) {$/;"	f	class:FileHandle
FileHandle	IO/FileHandle.hpp	/^class FileHandle {$/;"	c
FileInfo	Device/Driver/CAI302/Protocol.hpp	/^    struct FileInfo {$/;"	s	struct:CAI302::FileList
FileInfo	IO/FileCache.cpp	/^struct FileInfo {$/;"	s	file:
FileItem	Dialogs/FileManager.cpp	/^  struct FileItem {$/;"	s	class:ManagedFileListWidget	file:
FileLineReader	IO/FileLineReader.hpp	/^  FileLineReader(Path path, Charset cs=Charset::UTF8)$/;"	f	class:FileLineReader
FileLineReader	IO/FileLineReader.hpp	/^class FileLineReader : public ConvertLineReader {$/;"	c
FileLineReaderA	IO/FileLineReader.hpp	/^  explicit FileLineReaderA(Path path)$/;"	f	class:FileLineReaderA
FileLineReaderA	IO/FileLineReader.hpp	/^class FileLineReaderA : public NLineReader {$/;"	c
FileList	Device/Driver/CAI302/Protocol.hpp	/^  struct FileList {$/;"	s	namespace:CAI302
FileList	Repository/FileRepository.hpp	/^  typedef std::list<AvailableFile> FileList;$/;"	t	struct:FileRepository
FileMapping	OS/FileMapping.cpp	/^FileMapping::FileMapping(Path path)$/;"	f	class:FileMapping
FileMapping	OS/FileMapping.hpp	/^class FileMapping {$/;"	c
FileOutputStream	IO/FileOutputStream.cxx	/^FileOutputStream::FileOutputStream(Path _path, Mode _mode)$/;"	f	class:FileOutputStream
FilePicker	Dialogs/FilePicker.cpp	/^FilePicker(const TCHAR *caption, FileDataField &df,$/;"	f
FilePicker	Dialogs/FilePicker.cpp	/^FilePicker(const TCHAR *caption, const TCHAR *patterns)$/;"	f
FileReader	IO/FileReader.cxx	/^FileReader::FileReader(Path _path)$/;"	f	class:FileReader
FileRepository	Repository/FileRepository.hpp	/^struct FileRepository {$/;"	s
FileSignatureASCII	Device/Driver/CAI302/Protocol.hpp	/^  struct FileSignatureASCII {$/;"	s	namespace:CAI302
FileTimeToInteger	IO/FileCache.cpp	/^FileTimeToInteger(FILETIME ft)$/;"	f	file:
FileTimeToInteger	OS/FileUtil.cpp	/^FileTimeToInteger(FILETIME ft)$/;"	f	file:
FileTransaction	IO/FileTransaction.cpp	/^FileTransaction::FileTransaction(Path _path)$/;"	f	class:FileTransaction
FileTransaction	IO/FileTransaction.hpp	/^class FileTransaction {$/;"	c
FileType	Repository/FileType.hpp	/^enum class FileType : uint8_t {$/;"	c
FileVisitor	Form/DataField/File.cpp	/^  FileVisitor(FileDataField &_datafield) : datafield(_datafield) {}$/;"	f	class:FileVisitor
FileVisitor	Form/DataField/File.cpp	/^class FileVisitor: public File::Visitor$/;"	c	file:
Fill	Computer/BasicComputer.cpp	/^BasicComputer::Fill(MoreData &data, const AtmosphericPressure qnh,$/;"	f	class:BasicComputer
Fill	Computer/BasicComputer.cpp	/^BasicComputer::Fill(MoreData &data, const ComputerSettings &settings_computer)$/;"	f	class:BasicComputer
Fill	Device/Util/NMEAReader.cpp	/^PortNMEAReader::Fill(TimeoutClock timeout)$/;"	f	class:PortNMEAReader
Fill	IO/BufferedReader.cxx	/^BufferedReader::Fill(bool need_more)$/;"	f	class:BufferedReader
Fill	MapWindow/Items/AirspaceBuilder.cpp	/^  void Fill(const AirspaceWarningManager &awm) {$/;"	f	class:AirspaceWarningList
Fill	MapWindow/Items/AirspaceBuilder.cpp	/^  void Fill(const ProtectedAirspaceWarningManager &awm) {$/;"	f	class:AirspaceWarningList
Fill	Terrain/HeightMatrix.cpp	/^HeightMatrix::Fill(const RasterMap &map, const GeoBounds &bounds,$/;"	f	class:HeightMatrix
Fill	Terrain/HeightMatrix.cpp	/^HeightMatrix::Fill(const RasterMap &map, const WindowProjection &projection,$/;"	f	class:HeightMatrix
FillAndroidBluetoothPorts	Dialogs/Device/DeviceEditWidget.cpp	/^FillAndroidBluetoothPorts(DataFieldEnum &df, const DeviceConfig &config)$/;"	f	file:
FillAndroidIOIOPorts	Dialogs/Device/DeviceEditWidget.cpp	/^FillAndroidIOIOPorts(DataFieldEnum &df, const DeviceConfig &config)$/;"	f	file:
FillBaudRates	Dialogs/Device/DeviceEditWidget.cpp	/^FillBaudRates(DataFieldEnum &dfe)$/;"	f	file:
FillBrush	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    FillBrush,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
FillBuffer	IO/GunzipReader.cxx	/^GunzipReader::FillBuffer()$/;"	f	class:GunzipReader
FillCircle	Screen/Memory/RasterCanvas.hpp	/^  void FillCircle(int x, int y, unsigned rad, color_type color) {$/;"	f	class:RasterCanvas
FillCircle	Screen/Memory/RasterCanvas.hpp	/^  void FillCircle(int x, int y, unsigned rad, color_type color,$/;"	f	class:RasterCanvas
FillColor	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    FillColor,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
FillDefaultSerialPorts	Dialogs/Device/DeviceEditWidget.cpp	/^FillDefaultSerialPorts(DataFieldEnum &df)$/;"	f	file:
FillDepth	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::FillDepth(const AFlatGeoPoint &origin,$/;"	f	class:FlatTriangleFanTree
FillDirectionEnum	Dialogs/Airspace/AirspaceList.cpp	/^FillDirectionEnum(DataFieldEnum &df)$/;"	f	file:
FillDistanceEnum	Dialogs/Airspace/AirspaceList.cpp	/^FillDistanceEnum(DataFieldEnum &df)$/;"	f	file:
FillGaps	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::FillGaps(const AFlatGeoPoint &origin, ReachFanParms &parms)$/;"	f	class:FlatTriangleFanTree
FillI2CAddr	Dialogs/Device/DeviceEditWidget.cpp	/^FillI2CAddr(DataFieldEnum &dfe)$/;"	f	file:
FillI2CBus	Dialogs/Device/DeviceEditWidget.cpp	/^FillI2CBus(DataFieldEnum &dfe)$/;"	f	file:
FillLastUsedList	Dialogs/Waypoint/WaypointList.cpp	/^FillLastUsedList(WaypointList &list,$/;"	f	file:
FillList	Dialogs/Waypoint/WaypointList.cpp	/^FillList(WaypointList &list, const Waypoints &src,$/;"	f	file:
FillMode	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^    FillMode,$/;"	e	enum:AirspaceClassRendererSettingsPanel::ControlIndex
FillMode	Renderer/AirspaceRendererSettings.hpp	/^  enum class FillMode: uint8_t {$/;"	c	struct:AirspaceRendererSettings
FillMode	Renderer/AirspaceRendererSettings.hpp	/^  enum class FillMode: uint8_t$/;"	c	struct:AirspaceClassRendererSettings
FillPCMBuffer	Audio/PCMPlayer.cpp	/^PCMPlayer::FillPCMBuffer(int16_t *buffer, size_t n)$/;"	f	class:PCMPlayer
FillPager	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^FillPager(PagerWidget &pager)$/;"	f	file:
FillPixel	Screen/Memory/MMX.hpp	/^  static __m64 FillPixel(__m64 x, __m64 v_alpha, __m64 v_color) {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	Screen/Memory/MMX.hpp	/^  void FillPixels(BGRA8Color *p, unsigned n, BGRA8Color c) const {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	Screen/Memory/MMX.hpp	/^  void FillPixels(Luminosity8 *p, unsigned n, Luminosity8 c) const {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	Screen/Memory/MMX.hpp	/^  void FillPixels(__m64 *p, unsigned n, __m64 v_color) const {$/;"	f	class:MMXAlphaPixelOperations
FillPixels	Screen/Memory/NEON.hpp	/^  void FillPixels(Luminosity8 *p, unsigned n, Luminosity8 c) const {$/;"	f	class:NEONAlphaPixelOperations
FillPixels	Screen/Memory/NEON.hpp	/^  void FillPixels(uint8_t *p, unsigned n, uint8_t c) const {$/;"	f	class:NEONAlphaPixelOperations
FillPixels	Screen/Memory/Optimised.hpp	/^  void FillPixels(rpointer p, unsigned n, color_type c) const {$/;"	f	class:SelectOptimisedPixelOperations
FillPixels	Screen/Memory/PixelOperations.hpp	/^  void FillPixels(pointer p, unsigned n, source_color_type c) const {$/;"	f	struct:PerPixelOperations
FillPixels	Screen/Memory/PixelTraits.hpp	/^  static void FillPixels(pointer p, unsigned n, color_type c) {$/;"	f	struct:BGRAPixelTraits
FillPixels	Screen/Memory/PixelTraits.hpp	/^  static void FillPixels(pointer p, unsigned n, color_type c) {$/;"	f	struct:GreyscalePixelTraits
FillPointTypes	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^FillPointTypes(DataFieldEnum &df,$/;"	f	file:
FillPointTypes	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^FillPointTypes(WndProperty &wp,$/;"	f	file:
FillPolygon	Screen/Memory/RasterCanvas.hpp	/^  void FillPolygon(const PixelPoint *points, unsigned n, color_type color) {$/;"	f	class:RasterCanvas
FillPolygon	Screen/Memory/RasterCanvas.hpp	/^  void FillPolygon(const PixelPoint *points, unsigned n, color_type color,$/;"	f	class:RasterCanvas
FillPolygonFast	Screen/Memory/RasterCanvas.hpp	/^  void FillPolygonFast(const PixelPoint *points, unsigned n, color_type color,$/;"	f	class:RasterCanvas
FillPortTypes	Dialogs/Device/DeviceEditWidget.cpp	/^FillPortTypes(DataFieldEnum &df, const DeviceConfig &config)$/;"	f	file:
FillPorts	Dialogs/Device/DeviceEditWidget.cpp	/^FillPorts(DataFieldEnum &df, const DeviceConfig &config)$/;"	f	file:
FillPress	Dialogs/Device/DeviceEditWidget.cpp	/^FillPress(DataFieldEnum &dfe)$/;"	f	file:
FillReach	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::FillReach(const AFlatGeoPoint &origin, const int index_low,$/;"	f	class:FlatTriangleFanTree
FillReach	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::FillReach(const AFlatGeoPoint &origin,$/;"	f	class:FlatTriangleFanTree
FillReachable	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::FillReachable(const AircraftState &state,$/;"	f	class:AbortTask
FillRectangle	Screen/Memory/RasterCanvas.hpp	/^  void FillRectangle(int x1, int y1, int x2, int y2, color_type c) {$/;"	f	class:RasterCanvas
FillRectangle	Screen/Memory/RasterCanvas.hpp	/^  void FillRectangle(int x1, int y1, int x2, int y2, color_type c,$/;"	f	class:RasterCanvas
FillSerialPorts	Dialogs/Device/DeviceEditWidget.cpp	/^FillSerialPorts(DataFieldEnum &df, const DeviceConfig &config)$/;"	f	file:
FillTCPPorts	Dialogs/Device/DeviceEditWidget.cpp	/^FillTCPPorts(DataFieldEnum &dfe)$/;"	f	file:
FillVario	Computer/BasicComputer.cpp	/^FillVario(MoreData &data)$/;"	f	file:
Filter	Math/Filter.hpp	/^  Filter(const double cutoff_wavelength, const bool bessel = true) {$/;"	f	class:Filter
Filter	Math/Filter.hpp	/^class Filter {$/;"	c
FilterAirspaces	Engine/Airspace/AirspaceSorter.cpp	/^FilterAirspaces(const Airspaces &airspaces, const GeoPoint &location,$/;"	f
FilterEncodingNode	Topography/shapelib/mapserver.h	/^  } FilterEncodingNode;$/;"	t	typeref:struct:_FilterNode
FilterMode	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::FilterMode(bool direction)$/;"	f	class:AirspaceListWidget
FilterNodeType	Topography/shapelib/mapserver.h	/^  } FilterNodeType;$/;"	t	typeref:enum:__anon28
FinalGlide	Replay/TaskAutoPilot.hpp	/^    FinalGlide$/;"	e	enum:TaskAutoPilot::AcState
FinalGlideBarDisplayMode	MapSettings.hpp	/^enum class FinalGlideBarDisplayMode: uint8_t {$/;"	c
FinalGlideBarDisplayMode	Profile/ProfileKeys.cpp	/^const char FinalGlideBarDisplayMode[] = "FinalGlideBarDisplayMode";$/;"	m	namespace:ProfileKeys	file:
FinalGlideBarDisplayModeControl	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  FinalGlideBarDisplayModeControl,$/;"	e	enum:ControlIndex	file:
FinalGlideBarLook	Look/FinalGlideBarLook.hpp	/^struct FinalGlideBarLook {$/;"	s
FinalGlideBarRenderer	Renderer/FinalGlideBarRenderer.hpp	/^  FinalGlideBarRenderer(const FinalGlideBarLook &_look,$/;"	f	class:FinalGlideBarRenderer
FinalGlideBarRenderer	Renderer/FinalGlideBarRenderer.hpp	/^class FinalGlideBarRenderer {$/;"	c
FinalGlideTerrain	Computer/Settings.hpp	/^  enum class FinalGlideTerrain : uint8_t {$/;"	c	struct:FeaturesSettings
FinalGlideTerrain	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  FinalGlideTerrain,$/;"	e	enum:ControlIndex	file:
FinalGlideTerrain	Profile/ProfileKeys.cpp	/^const char FinalGlideTerrain[] = "FinalGlideTerrain";$/;"	m	namespace:ProfileKeys	file:
Finalize	Util/MD5.cpp	/^MD5::Finalize()$/;"	f	class:MD5
FinalizeBuffer	Logger/GRecord.cpp	/^GRecord::FinalizeBuffer()$/;"	f	class:GRecord
Find	Airspace/AirspaceWarningCopy.hpp	/^  bool Find(const AbstractAirspace& as,$/;"	f	class:AirspaceWarningCopy
Find	Cloud/Client.cpp	/^CloudClientContainer::Find(uint64_t key)$/;"	f	class:CloudClientContainer
Find	FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Find(FlarmId id) const$/;"	f	class:FlarmNameDatabase
Find	FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Find(const TCHAR *name) const$/;"	f	class:FlarmNameDatabase
Find	Form/DataField/Enum.cpp	/^DataFieldEnum::Find(const TCHAR *text) const$/;"	f	class:DataFieldEnum
Find	Form/DataField/Enum.cpp	/^DataFieldEnum::Find(unsigned id) const$/;"	f	class:DataFieldEnum
Find	Form/DataField/File.cpp	/^FileDataField::Find(Path path) const$/;"	f	class:FileDataField
Find	Kobo/WifiDialog.cpp	/^WifiListWidget::Find(const WifiConfiguredNetworkInfo &c)$/;"	f	class:WifiListWidget
FindActiveIndex	Dialogs/Weather/MapOverlayWidget.cpp	/^  int FindActiveIndex() const {$/;"	f	class:final	file:
FindAt	Screen/Custom/WList.cpp	/^WindowList::FindAt(PixelPoint p)$/;"	f	class:WindowList
FindButton	Widget/KeyboardWidget.cpp	/^KeyboardWidget::FindButton(unsigned ch)$/;"	f	class:KeyboardWidget
FindByBSSID	Kobo/WifiDialog.cpp	/^WifiListWidget::FindByBSSID(const char *bssid)$/;"	f	class:WifiListWidget
FindByEvent	Menu/MenuData.cpp	/^Menu::FindByEvent(unsigned event) const$/;"	f	class:Menu
FindByID	Kobo/WifiDialog.cpp	/^WifiListWidget::FindByID(int id)$/;"	f	class:WifiListWidget
FindByName	Repository/FileRepository.cpp	/^FileRepository::FindByName(const char *name) const$/;"	f	class:FileRepository
FindChild	Util/RadixTree.hpp	/^    struct Match FindChild(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node
FindClearingPair	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::FindClearingPair(const SearchPointVector &spv,$/;"	f	class:AirspaceRoute
FindCloudBase	Atmosphere/CuSonde.cpp	/^CuSonde::FindCloudBase(unsigned short level)$/;"	f	class:CuSonde
FindColumnAt	Form/DigitEntry.cpp	/^DigitEntry::FindColumnAt(unsigned x) const$/;"	f	class:DigitEntry
FindControl	Screen/Custom/WList.cpp	/^WindowList::FindControl(List::iterator i, WindowList::List::iterator end)$/;"	f	class:WindowList
FindControl	Screen/Custom/WList.cpp	/^WindowList::FindControl(WindowList::List::reverse_iterator i,$/;"	f	class:WindowList
FindDataPath	LocalPath.cpp	/^FindDataPath()$/;"	f	file:
FindDataPathAtModule	LocalPath.cpp	/^FindDataPathAtModule(HMODULE hModule)$/;"	f	file:
FindDecimalPoint	Form/DigitEntry.cpp	/^DigitEntry::FindDecimalPoint() const$/;"	f	class:DigitEntry
FindDefaultBoldFont	Screen/Custom/Files.cpp	/^FindDefaultBoldFont()$/;"	f
FindDefaultBoldItalicFont	Screen/Custom/Files.cpp	/^FindDefaultBoldItalicFont()$/;"	f
FindDefaultFont	Screen/Custom/Files.cpp	/^FindDefaultFont()$/;"	f
FindDefaultItalicFont	Screen/Custom/Files.cpp	/^FindDefaultItalicFont()$/;"	f
FindDefaultMonospaceFont	Screen/Custom/Files.cpp	/^FindDefaultMonospaceFont()$/;"	f
FindDriverByName	Device/Register.cpp	/^FindDriverByName(const TCHAR *name)$/;"	f
FindDriverDisplayName	Device/Register.cpp	/^FindDriverDisplayName(const TCHAR *name)$/;"	f
FindEditableLeft	Form/DigitEntry.cpp	/^DigitEntry::FindEditableLeft(int i) const$/;"	f	class:DigitEntry
FindEditableRight	Form/DigitEntry.cpp	/^DigitEntry::FindEditableRight(unsigned i) const$/;"	f	class:DigitEntry
FindEntryLetter	Dialogs/KnobTextEntry.cpp	/^FindEntryLetter(TCHAR ch)$/;"	f	file:
FindFile	Screen/Custom/Files.cpp	/^FindFile(const char *const*list)$/;"	f	file:
FindFirstControl	Screen/Custom/WList.cpp	/^WindowList::FindFirstControl()$/;"	f	class:WindowList
FindFirstRecordByCallSign	FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::FindFirstRecordByCallSign(const TCHAR *cn) const$/;"	f	class:FlarmNetDatabase
FindFlaggedHome	Waypoint/HomeGlue.cpp	/^WaypointGlue::FindFlaggedHome(Waypoints &waypoints,$/;"	f	class:WaypointGlue
FindFreeSpace	UtilsSystem.cpp	/^unsigned long FindFreeSpace(const TCHAR *path) {$/;"	f
FindHome	Engine/Waypoint/Waypoints.cpp	/^Waypoints::FindHome()$/;"	f	class:Waypoints
FindHomeId	Waypoint/HomeGlue.cpp	/^WaypointGlue::FindHomeId(Waypoints &waypoints,$/;"	f	class:WaypointGlue
FindHomeLocation	Waypoint/HomeGlue.cpp	/^WaypointGlue::FindHomeLocation(Waypoints &waypoints,$/;"	f	class:WaypointGlue
FindHorizontal	Airspace/NearestAirspace.cpp	/^FindHorizontal(const GeoPoint &location,$/;"	f	file:
FindHorizontal	Airspace/NearestAirspace.cpp	/^NearestAirspace::FindHorizontal(const MoreData &basic,$/;"	f	class:NearestAirspace
FindIdByName	FLARM/TrafficDatabases.cpp	/^TrafficDatabases::FindIdByName(const TCHAR *name) const$/;"	f	class:TrafficDatabases
FindIdsByCallSign	FLARM/FlarmDetails.cpp	/^FlarmDetails::FindIdsByCallSign(const TCHAR *cn, FlarmId array[],$/;"	f	class:FlarmDetails
FindIdsByCallSign	FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::FindIdsByCallSign(const TCHAR *cn, FlarmId array[],$/;"	f	class:FlarmNetDatabase
FindIdsByName	FLARM/TrafficDatabases.cpp	/^TrafficDatabases::FindIdsByName(const TCHAR *name,$/;"	f	class:TrafficDatabases
FindInSearchPaths	Screen/Custom/Files.cpp	/^FindInSearchPaths(Path suffix)$/;"	f	file:
FindItem	Dialogs/FileManager.cpp	/^ManagedFileListWidget::FindItem(const TCHAR *name) const$/;"	f	class:ManagedFileListWidget
FindItem	Dialogs/Traffic/TrafficList.cpp	/^  ItemList::iterator FindItem(FlarmId id) {$/;"	f	class:TrafficListWidget	file:
FindItemByName	Dialogs/Weather/MapOverlayWidget.cpp	/^  int FindItemByName(const TCHAR *name) const {$/;"	f	class:final	file:
FindLanguage	Language/LanguageGlue.cpp	/^FindLanguage(WORD language)$/;"	f	file:
FindLanguage	Language/LanguageGlue.cpp	/^FindLanguage(const TCHAR *resource)$/;"	f	file:
FindLanguage	Units/UnitsGlue.cpp	/^FindLanguage(LANGID lang)$/;"	f	file:
FindLanguage	Units/UnitsGlue.cpp	/^FindLanguage(const TCHAR* lang)$/;"	f	file:
FindLastControl	Screen/Custom/WList.cpp	/^WindowList::FindLastControl()$/;"	f	class:WindowList
FindLatestOverlay	Weather/PCMet/Overlays.cpp	/^FindLatestOverlay(PCMet::OverlayInfo &info)$/;"	f	file:
FindLatitudeLongitude	Geo/Math.cpp	/^FindLatitudeLongitude(const GeoPoint &loc, const Angle bearing,$/;"	f
FindLatitudeLongitudeS	Geo/SimplifiedMath.cpp	/^FindLatitudeLongitudeS(const GeoPoint &loc, const Angle bearing,$/;"	f
FindMapScale	Projection/MapWindowProjection.cpp	/^MapWindowProjection::FindMapScale(const double Value) const$/;"	f	class:MapWindowProjection
FindMarkerSegment	Terrain/RasterTileCache.cpp	/^RasterTileCache::FindMarkerSegment(uint32_t file_offset) const$/;"	f	class:RasterTileCache
FindMatTurnpoint	Monitor/MatTaskMonitor.cpp	/^FindMatTurnpoint()$/;"	f	file:
FindMaximumAlert	FLARM/List.cpp	/^TrafficList::FindMaximumAlert() const$/;"	f	class:TrafficList
FindMenuItemByEvent	Input/InputEvents.cpp	/^FindMenuItemByEvent(InputEvents::Mode mode, InputEvents::Mode overlay_mode,$/;"	f	file:
FindNameById	FLARM/TrafficDatabases.cpp	/^TrafficDatabases::FindNameById(FlarmId id) const$/;"	f	class:TrafficDatabases
FindNextChildControl	Screen/Custom/WList.cpp	/^WindowList::FindNextChildControl(Window *reference)$/;"	f	class:WindowList
FindNonWhiteSpace	XML/Parser.cpp	/^FindNonWhiteSpace(XML::Parser *pXML)$/;"	f	file:
FindNumberLeft	Form/DigitEntry.cpp	/^DigitEntry::FindNumberLeft(int i) const$/;"	f	class:DigitEntry
FindOne	Screen/OpenGL/Triangulate.cpp	/^FindOne(const unsigned *counts, unsigned max_value,$/;"	f	file:
FindPath	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::FindPath(Path path) const$/;"	f	class:ProfileListWidget
FindPenultimateFinished	Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::FindPenultimateFinished(const unsigned index, const double time)$/;"	f	class:ThermalEncounterBand
FindPositiveArrival	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::FindPositiveArrival(const FlatGeoPoint n,$/;"	f	class:FlatTriangleFanTree
FindPositiveArrival	Engine/Route/ReachFan.cpp	/^ReachFan::FindPositiveArrival(const AGeoPoint dest, const RoutePolars &rpolars,$/;"	f	class:ReachFan
FindPositiveArrival	Engine/Route/RoutePlanner.hpp	/^  bool FindPositiveArrival(const AGeoPoint &dest,$/;"	f	class:RoutePlanner
FindPositiveArrival	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::FindPositiveArrival(const AGeoPoint &dest,$/;"	f	class:RoutePlannerGlue
FindPreviousChildControl	Screen/Custom/WList.cpp	/^WindowList::FindPreviousChildControl(Window *reference)$/;"	f	class:WindowList
FindQNHFromPressure	Atmosphere/Pressure.cpp	/^AtmosphericPressure::FindQNHFromPressure(const AtmosphericPressure pressure,$/;"	f	class:AtmosphericPressure
FindRecordById	FLARM/FlarmNetDatabase.hpp	/^  const FlarmNetRecord *FindRecordById(FlarmId id) const {$/;"	f	class:FlarmNetDatabase
FindRecordsByCallSign	FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::FindRecordsByCallSign(const TCHAR *cn,$/;"	f	class:FlarmNetDatabase
FindRemoteFile	Dialogs/FileManager.cpp	/^FindRemoteFile(const FileRepository &repository, const TCHAR *name)$/;"	f	file:
FindRemoteFile	Dialogs/FileManager.cpp	/^FindRemoteFile(const FileRepository &repository, const char *name)$/;"	f	file:
FindRetrowNested	Util/Exception.hxx	/^FindRetrowNested(std::exception_ptr ep)$/;"	f
FindSharedEdge	Screen/OpenGL/Triangulate.cpp	/^FindSharedEdge(const unsigned idx1, const unsigned idx2,$/;"	f	file:
FindSolution	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::FindSolution(const RoutePoint &final_point,$/;"	f	class:RoutePlanner
FindSoonestAirspace	Engine/Airspace/SoonestAirspace.cpp	/^FindSoonestAirspace(const Airspaces &airspaces,$/;"	f
FindSpecial	Device/Driver/FLARM/BinaryProtocol.cpp	/^FindSpecial(const uint8_t *const begin, const uint8_t *const end)$/;"	f	file:
FindStatusMessage	StatusMessage.cpp	/^FindStatusMessage(const TCHAR *key)$/;"	f
FindThermalHeight	Atmosphere/CuSonde.cpp	/^CuSonde::FindThermalHeight(unsigned short level)$/;"	f	class:CuSonde
FindTraffic	FLARM/List.hpp	/^  FlarmTraffic *FindTraffic(FlarmId id) {$/;"	f	struct:TrafficList
FindTraffic	FLARM/List.hpp	/^  FlarmTraffic *FindTraffic(const TCHAR *name) {$/;"	f	struct:TrafficList
FindTraffic	FLARM/List.hpp	/^  const FlarmTraffic *FindTraffic(FlarmId id) const {$/;"	f	struct:TrafficList
FindTraffic	FLARM/List.hpp	/^  const FlarmTraffic *FindTraffic(const TCHAR *name) const {$/;"	f	struct:TrafficList
FindTraffic	GliderLink/List.hpp	/^  GliderLinkTraffic *FindTraffic(GliderLinkId id) {$/;"	f	struct:GliderLinkTrafficList
FindTraffic	GliderLink/List.hpp	/^  const GliderLinkTraffic *FindTraffic(GliderLinkId id) const {$/;"	f	struct:GliderLinkTrafficList
FindVertical	Airspace/NearestAirspace.cpp	/^NearestAirspace::FindVertical(const MoreData &basic,$/;"	f	class:NearestAirspace
FindVisibleBySSID	Kobo/WifiDialog.cpp	/^WifiListWidget::FindVisibleBySSID(const char *ssid)$/;"	f	class:WifiListWidget
FindWaypoint	Waypoint/WaypointDetailsReader.cpp	/^FindWaypoint(Waypoints &way_points, const TCHAR *name)$/;"	f	file:
FinePixelDistance	Terrain/RasterProjection.cpp	/^RasterProjection::FinePixelDistance(const GeoPoint &location,$/;"	f	class:RasterProjection
Finish	Computer/FlyingComputer.cpp	/^FlyingComputer::Finish(FlyingState &flying, double time)$/;"	f	class:FlyingComputer
Finish	Renderer/OZRenderer.cpp	/^OZRenderer::Finish(Canvas &canvas, Layer layer) const$/;"	f	class:OZRenderer
Finish	Screen/StopWatch.hpp	/^  void Finish() {$/;"	f	class:ScreenStopWatch
Finish	UIUtil/GestureManager.cpp	/^GestureManager::Finish()$/;"	f	class:GestureManager
Finish	UIUtil/TrackingGestureManager.cpp	/^TrackingGestureManager::Finish()$/;"	f	class:TrackingGestureManager
FinishAlt	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  FinishAlt,$/;"	e	enum:Controls	file:
FinishConstraints	Engine/Task/Ordered/FinishConstraints.hpp	/^struct FinishConstraints {$/;"	s
FinishHeightRef	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  FinishHeightRef,$/;"	e	enum:ControlIndex	file:
FinishHeightRef	Profile/ProfileKeys.cpp	/^const char FinishHeightRef[] = "FinishHeightRef";$/;"	m	namespace:ProfileKeys	file:
FinishIsCurrent	Monitor/MatTaskMonitor.cpp	/^FinishIsCurrent(const OrderedTask &task)$/;"	f	file:
FinishIsCurrent	Monitor/MatTaskMonitor.cpp	/^FinishIsCurrent(const ProtectedTaskManager &task_manager)$/;"	f	file:
FinishMinHeight	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  FinishMinHeight,$/;"	e	enum:ControlIndex	file:
FinishMinHeight	Profile/ProfileKeys.cpp	/^const char FinishMinHeight[] = "FinishMinHeight";$/;"	m	namespace:ProfileKeys	file:
FinishPoint	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::FinishPoint(ObservationZonePoint* _oz, WaypointPtr && wp,$/;"	f	class:FinishPoint
FinishPolygon	Topography/ShapeRenderer.hpp	/^  void FinishPolygon(Canvas &canvas) {$/;"	f	class:ShapeRenderer
FinishPolyline	Topography/ShapeRenderer.hpp	/^  void FinishPolyline(Canvas &canvas) {$/;"	f	class:ShapeRenderer
FinishPortField	Dialogs/Device/DeviceEditWidget.cpp	/^FinishPortField(DeviceConfig &config, const DataFieldEnum &df)$/;"	f	file:
FinishPreliminary	Dialogs/WidgetDialog.cpp	/^WidgetDialog::FinishPreliminary(Widget *_widget)$/;"	f	class:WidgetDialog
FinishRadius	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  FinishRadius,$/;"	e	enum:ControlIndex	file:
FinishRadius	Profile/ProfileKeys.cpp	/^const char FinishRadius[] = "FinishRadius";$/;"	m	namespace:ProfileKeys	file:
FinishStartup	MainWindow.cpp	/^MainWindow::FinishStartup()$/;"	f	class:MainWindow
FinishTileUpdate	Terrain/RasterTileCache.cpp	/^RasterTileCache::FinishTileUpdate()$/;"	f	class:RasterTileCache
FinishType	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  FinishType,$/;"	e	enum:ControlIndex	file:
FinishType	Profile/ProfileKeys.cpp	/^const char FinishType[] = "FinishType";$/;"	m	namespace:ProfileKeys	file:
Finish_Derived_Info	Computer/GlideComputerBlackboard.hpp	/^  DerivedInfo Finish_Derived_Info;$/;"	m	class:GlideComputerBlackboard
Fire	Lua/InputEvent.cpp	/^bool LuaEventRegistry<T>::Fire(T event) {$/;"	f	class:LuaEventRegistry
FireGesture	Lua/InputEvent.cpp	/^bool Lua::FireGesture(const TCHAR* gesture) {$/;"	f	class:Lua
FireGlideComputerEvent	Lua/InputEvent.cpp	/^bool Lua::FireGlideComputerEvent(unsigned event) {$/;"	f	class:Lua
FireKey	Lua/InputEvent.cpp	/^bool Lua::FireKey(unsigned key) {$/;"	f	class:Lua
FireNMEAEvent	Lua/InputEvent.cpp	/^bool Lua::FireNMEAEvent(unsigned event) {$/;"	f	class:Lua
FirstIntersecting	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::FirstIntersecting(const RouteLink &e) const$/;"	f	class:AirspaceRoute
FirstIntersection	Terrain/Intersection.cpp	/^RasterTileCache::FirstIntersection(const SignedRasterLocation origin,$/;"	f	class:RasterTileCache
FirstIntersection	Terrain/RasterMap.cpp	/^RasterMap::FirstIntersection(const GeoPoint &origin, const int h_origin,$/;"	f	class:RasterMap
FirstRun	MergeThread.hpp	/^  void FirstRun() {$/;"	f	class:final
FirstTraffic	FLARM/List.hpp	/^  const FlarmTraffic *FirstTraffic() const {$/;"	f	struct:TrafficList
FitButtonRow	Form/ButtonPanel.cpp	/^ButtonPanel::FitButtonRow(unsigned start, unsigned total_width) const$/;"	f	class:ButtonPanel
Fix	Device/Driver/IMI/Protocol/Types.hpp	/^  struct Fix$/;"	s	namespace:IMI
FixAngle	Screen/OpenGL/VertexArray.hpp	/^  static unsigned FixAngle(unsigned angle) {$/;"	f	struct:GLDonutVertices
FixB	Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixB$/;"	s	namespace:IMI
FixB2	Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixB2$/;"	s	namespace:IMI
FixChecksum	Device/Driver/IMI/Protocol/Checksum.cpp	/^IMI::IMIBYTE IMI::FixChecksum(const void *message, unsigned bytes)$/;"	f	class:IMI
FixE	Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixE$/;"	s	namespace:IMI
FixK	Device/Driver/IMI/Protocol/Types.hpp	/^  struct FixK$/;"	s	namespace:IMI
FixPacket	Tracking/SkyLines/Protocol.hpp	/^struct FixPacket {$/;"	s	namespace:SkyLinesTracking
FixQuality	NMEA/GPSState.hpp	/^enum class FixQuality: uint8_t {$/;"	c
FixedWindowWidget	Widget/FixedWindowWidget.hpp	/^  FixedWindowWidget(Window *window):WindowWidget(window) {}$/;"	f	class:FixedWindowWidget
FixedWindowWidget	Widget/FixedWindowWidget.hpp	/^class FixedWindowWidget : public WindowWidget {$/;"	c
Flags	Dialogs/Device/DeviceListDialog.cpp	/^  struct Flags {$/;"	s	class:final	file:
Flags	Engine/Waypoint/Waypoint.hpp	/^  struct Flags {$/;"	s	struct:Waypoint
FlapPosition	NMEA/SwitchState.hpp	/^  enum class FlapPosition : uint8_t {$/;"	c	struct:SwitchState
FlarmAutoZoom	Profile/ProfileKeys.cpp	/^const char FlarmAutoZoom[] = "FlarmRadarAutoZoom";$/;"	m	namespace:ProfileKeys	file:
FlarmCalculations	FLARM/FlarmCalculations.hpp	/^class FlarmCalculations$/;"	c
FlarmColor	FLARM/Color.hpp	/^enum class FlarmColor : uint8_t {$/;"	c
FlarmColorDatabase	FLARM/ColorDatabase.hpp	/^class FlarmColorDatabase {$/;"	c
FlarmColorPen	Gauge/FlarmTrafficWindow.cpp	/^FlarmColorPen(const FlarmTrafficLook &look, FlarmColor color)$/;"	f	file:
FlarmComputer	FLARM/FlarmComputer.hpp	/^class FlarmComputer {$/;"	c
FlarmCreateOnPort	Device/Driver/FLARM/Register.cpp	/^FlarmCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
FlarmData	FLARM/Data.hpp	/^struct FlarmData {$/;"	s
FlarmDetails	FLARM/FlarmDetails.hpp	/^namespace FlarmDetails$/;"	n
FlarmDevice	Device/Driver/FLARM/Device.hpp	/^  FlarmDevice(Port &_port)$/;"	f	class:FlarmDevice
FlarmDevice	Device/Driver/FLARM/Device.hpp	/^class FlarmDevice: public AbstractDevice$/;"	c
FlarmError	FLARM/Error.hpp	/^struct FlarmError {$/;"	s
FlarmFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  FlarmFile$/;"	e	enum:ControlIndex	file:
FlarmFile	Profile/ProfileKeys.cpp	/^const char FlarmFile[] = "FlarmFile";$/;"	m	namespace:ProfileKeys	file:
FlarmFileChanged	UtilsSettings.cpp	/^bool FlarmFileChanged = false;$/;"	v
FlarmFriends	FLARM/Friends.hpp	/^namespace FlarmFriends$/;"	n
FlarmId	FLARM/FlarmId.hpp	/^  FlarmId(uint32_t _value):value(_value) {}$/;"	f	class:FlarmId
FlarmId	FLARM/FlarmId.hpp	/^class FlarmId {$/;"	c
FlarmLocation	Profile/ProfileKeys.cpp	/^const char FlarmLocation[] = "FlarmLocation";$/;"	m	namespace:ProfileKeys	file:
FlarmNameDatabase	FLARM/NameDatabase.hpp	/^class FlarmNameDatabase {$/;"	c
FlarmNetDatabase	FLARM/FlarmNetDatabase.hpp	/^class FlarmNetDatabase {$/;"	c
FlarmNetReader	FLARM/FlarmNetReader.hpp	/^namespace FlarmNetReader$/;"	n
FlarmNetRecord	FLARM/FlarmNetRecord.hpp	/^struct FlarmNetRecord {$/;"	s
FlarmNorthUp	Profile/ProfileKeys.cpp	/^const char FlarmNorthUp[] = "FlarmRadarNorthUp";$/;"	m	namespace:ProfileKeys	file:
FlarmSideData	Profile/ProfileKeys.cpp	/^const char FlarmSideData[] = "FlarmRadarSideData";$/;"	m	namespace:ProfileKeys	file:
FlarmStatus	FLARM/Status.hpp	/^struct FlarmStatus {$/;"	s
FlarmTraffic	FLARM/Traffic.hpp	/^struct FlarmTraffic {$/;"	s
FlarmTrafficControl	Gauge/BigTrafficWidget.cpp	/^  FlarmTrafficControl(const FlarmTrafficLook &look)$/;"	f	class:FlarmTrafficControl
FlarmTrafficControl	Gauge/BigTrafficWidget.cpp	/^class FlarmTrafficControl : public FlarmTrafficWindow {$/;"	c	file:
FlarmTrafficDetailsWidget	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  FlarmTrafficDetailsWidget(WndForm &_dialog, FlarmId _target_id)$/;"	f	class:final
FlarmTrafficLook	Look/FlarmTrafficLook.hpp	/^struct FlarmTrafficLook {$/;"	s
FlarmTrafficWindow	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::FlarmTrafficWindow(const FlarmTrafficLook &_look,$/;"	f	class:FlarmTrafficWindow
FlarmTrafficWindow	Gauge/FlarmTrafficWindow.hpp	/^class FlarmTrafficWindow : public PaintWindow {$/;"	c
FlarmVersion	FLARM/Version.hpp	/^struct FlarmVersion {$/;"	s
FlashRead	Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::FlashRead(Port &port, void *buffer, unsigned address, unsigned size,$/;"	f	class:IMI
Flat	Engine/Route/RouteLink.cpp	/^RouteLink::Flat() const$/;"	f	class:RouteLink
FlatBoundingBox	Engine/Contest/Solvers/TriangleContest.hpp	/^       bounding_box(FlatBoundingBox(parent.GetPoint(min).GetFlatLocation()))$/;"	f	struct:TriangleContest::TurnPointRange
FlatBoundingBox	Geo/Flat/FlatBoundingBox.hpp	/^  FlatBoundingBox(const FlatGeoPoint ll, const FlatGeoPoint ur)$/;"	f	struct:FlatBoundingBox
FlatBoundingBox	Geo/Flat/FlatBoundingBox.hpp	/^  FlatBoundingBox(const FlatGeoPoint loc, const unsigned range = 0)$/;"	f	struct:FlatBoundingBox
FlatBoundingBox	Geo/Flat/FlatBoundingBox.hpp	/^struct FlatBoundingBox$/;"	s
FlatDistanceTo	Engine/Waypoint/Waypoint.hpp	/^  unsigned FlatDistanceTo(const FlatGeoPoint &f) const {$/;"	f	struct:Waypoint
FlatDistanceTo	Geo/SearchPoint.hpp	/^  unsigned FlatDistanceTo(const SearchPoint &sp) const {$/;"	f	class:SearchPoint
FlatEllipse	Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::FlatEllipse(const FlatPoint &_f1, const FlatPoint &_f2,$/;"	f	class:FlatEllipse
FlatEllipse	Geo/Flat/FlatEllipse.hpp	/^class FlatEllipse$/;"	c
FlatGeoPoint	Geo/Flat/FlatGeoPoint.hpp	/^  FlatGeoPoint(const int _x, const int _y):IntPoint2D(_x, _y) {}$/;"	f	struct:FlatGeoPoint
FlatGeoPoint	Geo/Flat/FlatGeoPoint.hpp	/^struct FlatGeoPoint : IntPoint2D {$/;"	s
FlatGeoPoint_HPP	Geo/Flat/FlatGeoPoint.hpp	24;"	d
FlatLine	Geo/Flat/FlatLine.hpp	/^  FlatLine(const FlatPoint _p1, const FlatPoint _p2):Base(_p1, _p2) {}$/;"	f	class:FlatLine
FlatLine	Geo/Flat/FlatLine.hpp	/^class FlatLine : public Line2D<FlatPoint>$/;"	c
FlatPoint	Geo/Flat/FlatPoint.hpp	/^  FlatPoint(const double _x, const double _y):DoublePoint2D(_x, _y) {}$/;"	f	struct:FlatPoint
FlatPoint	Geo/Flat/FlatPoint.hpp	/^struct FlatPoint : DoublePoint2D$/;"	s
FlatProjection	Geo/Flat/FlatProjection.hpp	/^  explicit FlatProjection(const GeoPoint &_center) {$/;"	f	class:FlatProjection
FlatProjection	Geo/Flat/FlatProjection.hpp	/^class FlatProjection {$/;"	c
FlatRay	Geo/Flat/FlatRay.hpp	/^  FlatRay(const FlatGeoPoint& from, const FlatGeoPoint& to)$/;"	f	class:FlatRay
FlatRay	Geo/Flat/FlatRay.hpp	/^class FlatRay {$/;"	c
FlatSquareDistanceTo	Geo/SearchPoint.hpp	/^  unsigned FlatSquareDistanceTo(const SearchPoint& sp) const {$/;"	f	class:SearchPoint
FlatTriangleFan	Engine/Route/FlatTriangleFan.hpp	/^class FlatTriangleFan {$/;"	c
FlatTriangleFanTree	Engine/Route/FlatTriangleFanTree.hpp	/^  FlatTriangleFanTree(const unsigned char _depth = 0)$/;"	f	class:FlatTriangleFanTree
FlatTriangleFanTree	Engine/Route/FlatTriangleFanTree.hpp	/^class FlatTriangleFanTree: public FlatTriangleFan$/;"	c
FlatTriangleFanVisitor	Engine/Route/FlatTriangleFanTree.hpp	/^class FlatTriangleFanVisitor {$/;"	c
Flight	Device/Driver/IMI/Protocol/Types.hpp	/^  struct Flight$/;"	s	namespace:IMI
FlightDownload	Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::FlightDownload(Port &port, const RecordedFlightInfo &flight_info,$/;"	f	class:IMI
FlightFinish	Device/Driver/IMI/Protocol/Types.hpp	/^  struct FlightFinish$/;"	s	namespace:IMI
FlightInfo	Device/Driver/IMI/Protocol/Types.hpp	/^  struct FlightInfo$/;"	s	namespace:IMI
FlightInfo	Device/Driver/LX/LXN.hpp	/^  struct FlightInfo {$/;"	s	namespace:LXN
FlightInfo	Device/Driver/LX/Protocol.hpp	/^  struct FlightInfo {$/;"	s	namespace:LX
FlightInfo	Device/Driver/LXERA/Protocol.hpp	/^  struct FlightInfo {$/;"	s	namespace:LXEra
FlightInfo	FlightInfo.hpp	/^struct FlightInfo {$/;"	s
FlightListRenderer	Renderer/FlightListRenderer.hpp	/^  FlightListRenderer(const Font &_font, const Font &_header_font)$/;"	f	class:FlightListRenderer
FlightListRenderer	Renderer/FlightListRenderer.hpp	/^class FlightListRenderer {$/;"	c
FlightLogger	Logger/FlightLogger.hpp	/^  FlightLogger() {$/;"	f	class:FlightLogger
FlightLogger	Logger/FlightLogger.hpp	/^class FlightLogger {$/;"	c
FlightMode	NMEA/SwitchState.hpp	/^  enum class FlightMode: uint8_t {$/;"	c	struct:SwitchState
FlightParser	Logger/FlightParser.hpp	/^  FlightParser(NLineReader &_reader):reader(_reader), last(nullptr) {}$/;"	f	class:FlightParser
FlightParser	Logger/FlightParser.hpp	/^class FlightParser {$/;"	c
FlightSetupPanel	Dialogs/Settings/dlgBasicSettings.cpp	/^  FlightSetupPanel()$/;"	f	class:final
FlightState	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::FlightState(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
FlightStatistics	FlightStatistics.hpp	/^class FlightStatistics {$/;"	c
FlightStatisticsRenderer	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::FlightStatisticsRenderer(const ChartLook &_chart_look,$/;"	f	class:FlightStatisticsRenderer
FlightStatisticsRenderer	Renderer/FlightStatisticsRenderer.hpp	/^class FlightStatisticsRenderer {$/;"	c
FlightStatusPanel	Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  FlightStatusPanel(const DialogLook &look, WaypointPtr &&_waypoint)$/;"	f	class:FlightStatusPanel
FlightStatusPanel	Dialogs/StatusPanels/FlightStatusPanel.hpp	/^class FlightStatusPanel : public StatusPanel {$/;"	c
FlightTime	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  FlightTime,$/;"	e	enum:Controls	file:
FlightTimes	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::FlightTimes(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
Flip	Math/Angle.hpp	/^  void Flip() {$/;"	f	class:Angle
Flip	Screen/Android/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	Screen/DoubleBufferWindow.cpp	/^DoubleBufferWindow::Flip()$/;"	f	class:DoubleBufferWindow
Flip	Screen/EGL/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	Screen/FB/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	Screen/GLX/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
Flip	Screen/SDL/TopCanvas.cpp	/^TopCanvas::Flip()$/;"	f	class:TopCanvas
FlipBallastTimer	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::FlipBallastTimer()$/;"	f	class:FlightSetupPanel
Flipped	Math/Angle.hpp	/^  Angle Flipped() const {$/;"	f	class:Angle
FloatPoint2D	Math/Point2D.hpp	/^struct FloatPoint2D : Point2D<float> {$/;"	s
Flush	Cloud/Sender.cpp	/^ThermalResponseSender::Flush()$/;"	f	class:ThermalResponseSender
Flush	Cloud/Sender.cpp	/^TrafficResponseSender::Flush()$/;"	f	class:TrafficResponseSender
Flush	Device/Driver/LX/Protocol.hpp	/^    bool Flush() {$/;"	f	class:LX::CRCWriter
Flush	Device/Driver/LXERA/Protocol.hpp	/^    bool Flush() {$/;"	f	class:LXEra::CRCWriter
Flush	Device/Port/BufferedPort.cpp	/^BufferedPort::Flush()$/;"	f	class:BufferedPort
Flush	Device/Port/DumpPort.cpp	/^DumpPort::Flush()$/;"	f	class:DumpPort
Flush	Device/Port/K6BtPort.cpp	/^K6BtPort::Flush()$/;"	f	class:K6BtPort
Flush	Device/Port/NullPort.cpp	/^NullPort::Flush()$/;"	f	class:NullPort
Flush	Device/Port/SerialPort.cpp	/^SerialPort::Flush()$/;"	f	class:SerialPort
Flush	Device/Port/TTYPort.cpp	/^TTYPort::Flush()$/;"	f	class:TTYPort
Flush	Device/Util/NMEAReader.cpp	/^PortNMEAReader::Flush()$/;"	f	class:PortNMEAReader
Flush	IGC/IGCWriter.hpp	/^  void Flush() {$/;"	f	class:IGCWriter
Flush	IO/BufferedOutputStream.cxx	/^BufferedOutputStream::Flush()$/;"	f	class:BufferedOutputStream
Flush	IO/FileCache.cpp	/^FileCache::Flush(const TCHAR *name)$/;"	f	class:FileCache
Flush	IO/FileHandle.hpp	/^  bool Flush() {$/;"	f	class:FileHandle
Flush	IO/TextWriter.hpp	/^  bool Flush() {$/;"	f	class:TextWriter
Flush	Renderer/AirspaceRenderer.hpp	/^  void Flush() {$/;"	f	class:AirspaceRenderer
Flush	Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::Flush()$/;"	f	class:BackgroundRenderer
Flush	Screen/Custom/Cache.cpp	/^TextCache::Flush()$/;"	f	class:TextCache
Flush	Terrain/TerrainRenderer.hpp	/^  void Flush() {$/;"	f	class:TerrainRenderer
Flush	Topography/CachedTopographyRenderer.hpp	/^  void Flush() {$/;"	f	class:CachedTopographyRenderer
Flush	Weather/Rasp/RaspRenderer.hpp	/^  void Flush() {$/;"	f	class:RaspRenderer
FlushCaches	MapWindow/MapWindow.cpp	/^MapWindow::FlushCaches()$/;"	f	class:MapWindow
FlushRendererCaches	MainWindow.cpp	/^MainWindow::FlushRendererCaches()$/;"	f	class:MainWindow
FlushScreen	Screen/StopWatch.hpp	/^  static void FlushScreen() {$/;"	f	class:ScreenStopWatch
FlyNetCreateOnPort	Device/Driver/FlyNet.cpp	/^FlyNetCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
FlyNetDevice	Device/Driver/FlyNet.cpp	/^class FlyNetDevice : public AbstractDevice {$/;"	c	file:
FlyingComputer	Computer/FlyingComputer.hpp	/^class FlyingComputer {$/;"	c
FlyingState	NMEA/FlyingState.hpp	/^struct FlyingState$/;"	s
FlymasterF1CreateOnPort	Device/Driver/FlymasterF1.cpp	/^FlymasterF1CreateOnPort(const DeviceConfig &config, Port &port)$/;"	f	file:
FlymasterF1Device	Device/Driver/FlymasterF1.cpp	/^  FlymasterF1Device(Port &_port):port(_port) {}$/;"	f	class:FlymasterF1Device
FlymasterF1Device	Device/Driver/FlymasterF1.cpp	/^class FlymasterF1Device : public AbstractDevice {$/;"	c	file:
FlytecCreateOnPort	Device/Driver/Flytec/Register.cpp	/^FlytecCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
FlytecDevice	Device/Driver/Flytec/Device.hpp	/^  FlytecDevice(Port &_port):port(_port), last_time(0) {}$/;"	f	class:FlytecDevice
FlytecDevice	Device/Driver/Flytec/Device.hpp	/^class FlytecDevice : public AbstractDevice$/;"	c
FlytecParseBRSF	Device/Driver/Flytec/Parser.cpp	/^FlytecParseBRSF(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
FlytecParseVMVABD	Device/Driver/Flytec/Parser.cpp	/^FlytecParseVMVABD(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
FocusFirstControl	Dialogs/Task/Manager/Internal.hpp	/^  void FocusFirstControl() {$/;"	f	class:final
FollowMode	MapWindow/MapWindow.hpp	/^  enum FollowMode {$/;"	g	class:MapWindow
Font	Event/Poll/X11Queue.cpp	30;"	d	file:
Font	Event/Poll/X11Queue.cpp	37;"	d	file:
Font	Event/Poll/X11Queue.hpp	31;"	d
Font	Event/Poll/X11Queue.hpp	37;"	d
Font	Hardware/DisplayDPI.cpp	36;"	d	file:
Font	Hardware/DisplayDPI.cpp	40;"	d	file:
Font	Hardware/DisplaySize.cpp	33;"	d	file:
Font	Hardware/DisplaySize.cpp	37;"	d	file:
Font	Screen/Custom/TopCanvas.hpp	55;"	d
Font	Screen/Custom/TopCanvas.hpp	59;"	d
Font	Screen/EGL/System.hpp	33;"	d
Font	Screen/EGL/System.hpp	45;"	d
Font	Screen/Font.hpp	/^class Font {$/;"	c
Font	Screen/GLX/System.hpp	28;"	d
Font	Screen/GLX/System.hpp	34;"	d
Font	Screen/OpenGL/Function.hpp	35;"	d
Font	Screen/OpenGL/Function.hpp	41;"	d
Font	Screen/TopWindow.hpp	61;"	d
Font	Screen/TopWindow.hpp	69;"	d
FontAirspaceColourDlgFont	Profile/ProfileKeys.cpp	/^const char FontAirspaceColourDlgFont[] = "AirspaceColourDlgFont";$/;"	m	namespace:ProfileKeys	file:
FontAirspacePressFont	Profile/ProfileKeys.cpp	/^const char FontAirspacePressFont[] = "AirspacePressFont";$/;"	m	namespace:ProfileKeys	file:
FontBugsBallastFont	Profile/ProfileKeys.cpp	/^const char FontBugsBallastFont[] = "BugsBallastFont";$/;"	m	namespace:ProfileKeys	file:
FontCDIWindowFont	Profile/ProfileKeys.cpp	/^const char FontCDIWindowFont[] = "CDIWindowFont";$/;"	m	namespace:ProfileKeys	file:
FontDescription	Look/FontDescription.cpp	/^FontDescription::FontDescription(unsigned height,$/;"	f	class:FontDescription
FontDescription	Look/FontDescription.hpp	/^  explicit constexpr FontDescription(unsigned _height,$/;"	f	class:FontDescription
FontDescription	Look/FontDescription.hpp	/^class FontDescription {$/;"	c
FontInfoWindowFont	Profile/ProfileKeys.cpp	/^const char FontInfoWindowFont[] = "InfoWindowFont";$/;"	m	namespace:ProfileKeys	file:
FontMapLabelFont	Profile/ProfileKeys.cpp	/^const char FontMapLabelFont[] = "MapLabelFont";$/;"	m	namespace:ProfileKeys	file:
FontMapLabelImportantFont	Profile/ProfileKeys.cpp	/^const char FontMapLabelImportantFont[] = "MapLabelImportantFont";$/;"	m	namespace:ProfileKeys	file:
FontMapWindowBoldFont	Profile/ProfileKeys.cpp	/^const char FontMapWindowBoldFont[] = "MapWindowBoldFont";$/;"	m	namespace:ProfileKeys	file:
FontMapWindowFont	Profile/ProfileKeys.cpp	/^const char FontMapWindowFont[] = "MapWindowFont";$/;"	m	namespace:ProfileKeys	file:
FontScale	Screen/Layout.hpp	/^  FontScale(unsigned spt)$/;"	f	namespace:Layout
FontSettings	Look/FontSettings.hpp	/^struct FontSettings {$/;"	s
FontStatisticsFont	Profile/ProfileKeys.cpp	/^const char FontStatisticsFont[] = "StatisticsFont";$/;"	m	namespace:ProfileKeys	file:
FontTeamCodeFont	Profile/ProfileKeys.cpp	/^const char FontTeamCodeFont[] = "TeamCodeFont";$/;"	m	namespace:ProfileKeys	file:
FontTitleWindowFont	Profile/ProfileKeys.cpp	/^const char FontTitleWindowFont[] = "TitleWindowFont";$/;"	m	namespace:ProfileKeys	file:
Fonts	Look/DefaultFonts.hpp	/^namespace Fonts$/;"	n
Fonts	Look/GlobalFonts.hpp	/^namespace Fonts$/;"	n
ForEachChar	Screen/FreeType/Font.cpp	/^ForEachChar(const TCHAR *text, F &&f)$/;"	f	file:
ForEachGlyph	Screen/FreeType/Font.cpp	/^ForEachGlyph(const FT_Face face, unsigned ascent_height, T &&text,$/;"	f	file:
ForEachTime	Weather/Rasp/RaspStore.hpp	/^  void ForEachTime(unsigned item_index, C &&c) {$/;"	f	class:RaspStore
ForHorizontal	Screen/Memory/PixelTraits.hpp	/^    static void ForHorizontal(pointer p,$/;"	f	struct:GreyscalePixelTraits::Mixed
ForHorizontal	Screen/Memory/PixelTraits.hpp	/^  static void ForHorizontal(pointer p, unsigned n, F f) {$/;"	f	struct:BGRAPixelTraits
ForHorizontal	Screen/Memory/PixelTraits.hpp	/^  static void ForHorizontal(pointer p, unsigned n, F f) {$/;"	f	struct:GreyscalePixelTraits
ForHorizontal	Screen/Memory/PixelTraits.hpp	/^  static void ForHorizontal(rpointer p, const_rpointer q,$/;"	f	struct:BGRAPixelTraits
ForHorizontal	Screen/Memory/PixelTraits.hpp	/^  static void ForHorizontal(rpointer p, const_rpointer q,$/;"	f	struct:GreyscalePixelTraits
ForVertical	Screen/Memory/PixelTraits.hpp	/^  static void ForVertical(pointer p, unsigned pitch, unsigned n, F f) {$/;"	f	struct:BGRAPixelTraits
ForVertical	Screen/Memory/PixelTraits.hpp	/^  static void ForVertical(pointer p, unsigned pitch, unsigned n, F f) {$/;"	f	struct:GreyscalePixelTraits
ForceCalculation	Protection.cpp	/^ForceCalculation()$/;"	f
ForceModify	Form/DataField/File.cpp	/^FileDataField::ForceModify(Path path)$/;"	f	class:FileDataField
ForceTrigger	CalculationThread.cpp	/^CalculationThread::ForceTrigger()$/;"	f	class:CalculationThread
ForeignFifoBuffer	Util/DynamicFifoBuffer.hxx	/^		:ForeignFifoBuffer<T>(n) {}$/;"	f	class:DynamicFifoBuffer
ForeignFifoBuffer	Util/DynamicFifoBuffer.hxx	/^		:ForeignFifoBuffer<T>(new T[_capacity], _capacity) {}$/;"	f	class:DynamicFifoBuffer
ForeignFifoBuffer	Util/ForeignFifoBuffer.hxx	/^class ForeignFifoBuffer {$/;"	c
ForkExec	OS/Process.cpp	/^ForkExec(const char *const*argv)$/;"	f	file:
FormCharacter	Dialogs/TouchTextEntry.cpp	/^FormCharacter(unsigned ch)$/;"	f	file:
FormKeyDown	Dialogs/TouchTextEntry.cpp	/^FormKeyDown(unsigned key_code)$/;"	f	file:
Format	FLARM/FlarmId.cpp	/^FlarmId::Format(TCHAR *buffer) const$/;"	f	class:FlarmId
Format	FLARM/FlarmId.cpp	/^FlarmId::Format(char *buffer) const$/;"	f	class:FlarmId
Format	IO/BufferedOutputStream.cxx	/^BufferedOutputStream::Format(const char *fmt, ...)$/;"	f	class:BufferedOutputStream
Format	IO/TextWriter.cpp	/^TextWriter::Format(const TCHAR *fmt, ...)$/;"	f	class:TextWriter
Format	IO/TextWriter.hpp	/^  void Format(const char *fmt, Args&&... args) {$/;"	f	class:TextWriter
Format	RadioFrequency.cpp	/^RadioFrequency::Format(TCHAR *buffer, size_t max_size) const$/;"	f	class:RadioFrequency
Format	Screen/Custom/UncompressedImage.hpp	/^  enum class Format {$/;"	c	class:UncompressedImage
Format	Util/StaticString.hxx	/^	void Format(const_pointer fmt, Args&&... args) {$/;"	f	class:StaticStringBase
Format	Weather/NOAAFormatter.cpp	/^NOAAFormatter::Format(const NOAAStore::Item &station, tstring &output)$/;"	f	class:NOAAFormatter
FormatAlternateUserAltitude	Formatter/UserUnits.cpp	/^FormatAlternateUserAltitude(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatAltitude	Formatter/AirspaceUserUnitsFormatter.cpp	/^AirspaceFormatter::FormatAltitude(TCHAR *buffer,$/;"	f	class:AirspaceFormatter
FormatAltitude	Formatter/Units.cpp	/^FormatAltitude(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatAltitudeShort	Formatter/AirspaceUserUnitsFormatter.cpp	/^AirspaceFormatter::FormatAltitudeShort(TCHAR *buffer,$/;"	f	class:AirspaceFormatter
FormatAngleDelta	Formatter/AngleFormatter.cpp	/^FormatAngleDelta(TCHAR *buffer, size_t size, Angle value)$/;"	f
FormatAngleDelta	Formatter/AngleFormatter.hpp	/^FormatAngleDelta(Angle value)$/;"	f
FormatBearing	Formatter/AngleFormatter.cpp	/^FormatBearing(TCHAR *buffer, size_t size, Angle value, const TCHAR *suffix)$/;"	f
FormatBearing	Formatter/AngleFormatter.cpp	/^FormatBearing(TCHAR *buffer, size_t size, unsigned value_degrees,$/;"	f
FormatBearing	Formatter/AngleFormatter.hpp	/^FormatBearing(Angle value)$/;"	f
FormatBearing	Formatter/AngleFormatter.hpp	/^FormatBearing(unsigned degrees_value)$/;"	f
FormatByteSize	Formatter/ByteSizeFormatter.cpp	/^FormatByteSize(TCHAR *buffer, size_t size, unsigned long bytes, bool simple)$/;"	f
FormatComment	InfoBoxes/Data.hpp	/^  void FormatComment(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
FormatCompetitionClass	Device/Driver/LX/LXN.cpp	/^LXN::FormatCompetitionClass(unsigned class_id)$/;"	f	class:LXN
FormatDecodedMETAR	Weather/NOAAFormatter.cpp	/^FormatDecodedMETAR(const METAR &metar, const ParsedMETAR &parsed,$/;"	f	file:
FormatDecodedMETARLine	Weather/NOAAFormatter.cpp	/^FormatDecodedMETARLine(const TCHAR *line, unsigned length,$/;"	f	file:
FormatDistance	Formatter/Units.cpp	/^FormatDistance(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatDistanceSmart	Formatter/Units.cpp	/^FormatDistanceSmart(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatGPRMB	Device/Driver/CaiLNav.cpp	/^FormatGPRMB(char *buffer, size_t buffer_size, const GeoPoint& here,$/;"	f	file:
FormatGPRMC	Device/Driver/CaiLNav.cpp	/^FormatGPRMC(char *buffer, size_t buffer_size, const MoreData &info)$/;"	f	file:
FormatGPSDate	Device/Driver/LX/LXN.cpp	/^LXN::FormatGPSDate(unsigned gps_date)$/;"	f	class:LXN
FormatGeoPoint	Device/Driver/CAI302/Protocol.cpp	/^FormatGeoPoint(char *buffer, const GeoPoint &location)$/;"	f	file:
FormatGeoPoint	Formatter/GeoPointFormatter.cpp	/^FormatGeoPoint(const GeoPoint &location, TCHAR *buffer, size_t size,$/;"	f
FormatGeoPoint	Formatter/GeoPointFormatter.hpp	/^FormatGeoPoint(const GeoPoint &location, CoordinateFormat format,$/;"	f
FormatGeoPoint	Formatter/UserGeoPointFormatter.cpp	/^FormatGeoPoint(const GeoPoint &location, TCHAR *buffer, size_t size,$/;"	f
FormatGeoPoint	Formatter/UserGeoPointFormatter.hpp	/^FormatGeoPoint(const GeoPoint &location, TCHAR separator = _T(' '))$/;"	f
FormatGlideRatio	Formatter/GlideRatioFormatter.cpp	/^FormatGlideRatio(TCHAR *buffer, size_t size, double gr)$/;"	f
FormatGlideResult	Dialogs/Waypoint/WaypointInfoWidget.cpp	/^FormatGlideResult(TCHAR *buffer, size_t size,$/;"	f	file:
FormatHexColor	Formatter/HexColor.cpp	/^FormatHexColor(char *buffer, size_t size, const RGB8Color color)$/;"	f
FormatIGCFilename	Formatter/IGCFilenameFormatter.cpp	/^FormatIGCFilename(TCHAR* buffer, const BrokenDate &date,$/;"	f
FormatIGCFilenameLong	Formatter/IGCFilenameFormatter.cpp	/^FormatIGCFilenameLong(TCHAR* buffer, const BrokenDate &date,$/;"	f
FormatIGCLocation	IGC/Generator.cpp	/^FormatIGCLocation(char *buffer, const GeoPoint &location)$/;"	f
FormatIGCTaskTimestamp	IGC/Generator.cpp	/^FormatIGCTaskTimestamp(char *buffer, const BrokenDateTime &date_time,$/;"	f
FormatIGCTaskTurnPoint	IGC/Generator.cpp	/^FormatIGCTaskTurnPoint(char *buffer, const GeoPoint &location,$/;"	f
FormatISO8601	Formatter/TimeFormatter.cpp	/^FormatISO8601(TCHAR *buffer, const BrokenDateTime &stamp)$/;"	f
FormatISO8601	Formatter/TimeFormatter.cpp	/^FormatISO8601(char *buffer, const BrokenDateTime &stamp)$/;"	f
FormatInteger	Formatter/Units.cpp	/^FormatInteger(TCHAR *buffer,$/;"	f	file:
FormatLabel	Renderer/WaypointRenderer.cpp	/^  void FormatLabel(TCHAR *buffer, size_t buffer_size,$/;"	f	class:final
FormatLatitude	Device/Driver/CaiLNav.cpp	/^FormatLatitude(char *buffer, size_t buffer_size, Angle latitude )$/;"	f	file:
FormatLatitude	Formatter/GeoPointFormatter.cpp	/^FormatLatitude(Angle latitude, TCHAR *buffer, size_t size,$/;"	f
FormatLatitude	Formatter/UserGeoPointFormatter.cpp	/^FormatLatitude(Angle latitude, TCHAR *buffer, size_t size)$/;"	f
FormatLine	IO/TextWriter.hpp	/^  bool FormatLine(const TCHAR *fmt, Args&&... args) {$/;"	f	class:TextWriter
FormatLine	IO/TextWriter.hpp	/^  void FormatLine(const char *fmt, Args&&... args) {$/;"	f	class:TextWriter
FormatLocalTimeHHMM	Formatter/LocalTimeFormatter.cpp	/^FormatLocalTimeHHMM(TCHAR *buffer, int time, RoughTimeDelta utc_offset)$/;"	f
FormatLocalTimeHHMM	Formatter/LocalTimeFormatter.hpp	/^FormatLocalTimeHHMM(int time, RoughTimeDelta utc_offset)$/;"	f
FormatLongitude	Device/Driver/CaiLNav.cpp	/^FormatLongitude(char *buffer, size_t buffer_size, Angle longitude)$/;"	f	file:
FormatLongitude	Formatter/GeoPointFormatter.cpp	/^FormatLongitude(Angle longitude, TCHAR *buffer, size_t size,$/;"	f
FormatLongitude	Formatter/UserGeoPointFormatter.cpp	/^FormatLongitude(Angle longitude, TCHAR *buffer, size_t size)$/;"	f
FormatMass	Formatter/Units.cpp	/^FormatMass(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatPCAIB	Device/Driver/CaiLNav.cpp	/^FormatPCAIB(char *buffer, size_t buffer_size, const AGeoPoint& destination)$/;"	f	file:
FormatPolar	Polar/Parser.cpp	/^FormatPolar(const PolarInfo &polar, char *buffer, size_t max_size,$/;"	f
FormatPolarShape	Polar/Parser.cpp	/^FormatPolarShape(const PolarShape &shape, char *buffer, size_t max_size)$/;"	f
FormatPressure	Formatter/Units.cpp	/^FormatPressure(TCHAR *buffer, AtmosphericPressure pressure,$/;"	f
FormatRelativeAltitude	Formatter/Units.cpp	/^FormatRelativeAltitude(TCHAR *buffer, double value,$/;"	f
FormatRelativeUserAltitude	Formatter/UserUnits.cpp	/^FormatRelativeUserAltitude(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatSettings	FormatSettings.hpp	/^struct FormatSettings {$/;"	s
FormatSignedTimeHHMM	Formatter/TimeFormatter.cpp	/^FormatSignedTimeHHMM(TCHAR* buffer, int _time)$/;"	f
FormatSignedTimeHHMM	Formatter/TimeFormatter.hpp	/^FormatSignedTimeHHMM(int time)$/;"	f
FormatSmallDistance	Formatter/Units.cpp	/^FormatSmallDistance(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatSmallUserDistance	Formatter/UserUnits.cpp	/^FormatSmallUserDistance(TCHAR *buffer, double value, bool include_unit,$/;"	f
FormatSpeed	Formatter/Units.cpp	/^FormatSpeed(TCHAR *buffer,$/;"	f
FormatTemperature	Formatter/Units.cpp	/^FormatTemperature(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatTicText	Renderer/ChartRenderer.cpp	/^ChartRenderer::FormatTicText(TCHAR *text, const double val, const double step,$/;"	f	class:ChartRenderer
FormatTime	Formatter/TimeFormatter.cpp	/^FormatTime(TCHAR* buffer, double _time)$/;"	f
FormatTimeLong	Formatter/TimeFormatter.cpp	/^FormatTimeLong(TCHAR* buffer, double _time)$/;"	f
FormatTimeTwoLines	Formatter/TimeFormatter.cpp	/^FormatTimeTwoLines(TCHAR *buffer1, TCHAR *buffer2, int _time)$/;"	f
FormatTimespanSmart	Formatter/TimeFormatter.cpp	/^FormatTimespanSmart(TCHAR *buffer, int timespan, unsigned max_tokens,$/;"	f
FormatTimespanSmart	Formatter/TimeFormatter.hpp	/^FormatTimespanSmart(int timespan, unsigned max_tokens = 1,$/;"	f
FormatTitle	InfoBoxes/Data.hpp	/^  void FormatTitle(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
FormatTitle	Renderer/WaypointRenderer.cpp	/^  void FormatTitle(TCHAR *buffer, size_t buffer_size,$/;"	f	class:final
FormatUTM	Formatter/GeoPointFormatter.cpp	/^FormatUTM(const GeoPoint &location, TCHAR *buffer, size_t size,$/;"	f	file:
FormatUserAltitude	Formatter/UserUnits.cpp	/^FormatUserAltitude(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserAltitude	Formatter/UserUnits.hpp	/^FormatUserAltitude(double value)$/;"	f
FormatUserDistance	Formatter/UserUnits.cpp	/^FormatUserDistance(double value, TCHAR *buffer, bool include_unit, int precision)$/;"	f
FormatUserDistanceSmart	Formatter/UserUnits.cpp	/^FormatUserDistanceSmart(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserDistanceSmart	Formatter/UserUnits.hpp	/^FormatUserDistanceSmart(double value)$/;"	f
FormatUserMapScale	Formatter/UserUnits.cpp	/^FormatUserMapScale(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserMass	Formatter/UserUnits.cpp	/^FormatUserMass(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserPressure	Formatter/UserUnits.cpp	/^FormatUserPressure(AtmosphericPressure pressure, TCHAR *buffer,$/;"	f
FormatUserSpeed	Formatter/UserUnits.cpp	/^FormatUserSpeed(double value, TCHAR *buffer, bool include_unit, bool precision)$/;"	f
FormatUserSpeed	Formatter/UserUnits.hpp	/^FormatUserSpeed(double value, bool precision=true)$/;"	f
FormatUserTaskSpeed	Formatter/UserUnits.cpp	/^FormatUserTaskSpeed(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserTaskSpeed	Formatter/UserUnits.hpp	/^FormatUserTaskSpeed(double value, bool precision=true)$/;"	f
FormatUserTemperature	Formatter/UserUnits.cpp	/^FormatUserTemperature(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatUserVerticalSpeed	Formatter/UserUnits.cpp	/^FormatUserVerticalSpeed(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserWindSpeed	Formatter/UserUnits.cpp	/^FormatUserWindSpeed(double value, TCHAR *buffer, bool include_unit,$/;"	f
FormatUserWingLoading	Formatter/UserUnits.cpp	/^FormatUserWingLoading(double value, TCHAR *buffer, bool include_unit)$/;"	f
FormatValue	InfoBoxes/Data.hpp	/^  void FormatValue(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
FormatVerticalAngleDelta	Formatter/AngleFormatter.cpp	/^FormatVerticalAngleDelta(TCHAR *buffer, size_t size, Angle value)$/;"	f
FormatVerticalSpeed	Formatter/Units.cpp	/^FormatVerticalSpeed(TCHAR *buffer, double value, Unit unit,$/;"	f
FormatWaypointDetails	Renderer/WaypointListRenderer.cpp	/^FormatWaypointDetails(Buffer &buffer, const Waypoint &waypoint)$/;"	f	file:
FormatWingLoading	Formatter/Units.cpp	/^FormatWingLoading(TCHAR *buffer, double value, Unit unit,$/;"	f
ForwardLine	Device/Descriptor.cpp	/^DeviceDescriptor::ForwardLine(const char *line)$/;"	f	class:DeviceDescriptor
Found	Engine/Airspace/AirspaceWarningManager.cpp	/^  bool Found() const {$/;"	f	class:final
FoundWave	Computer/WaveComputer.cpp	/^WaveComputer::FoundWave(const WaveInfo &new_wave)$/;"	f	class:WaveComputer
FourCorners	Projection/CompareProjection.cpp	/^CompareProjection::FourCorners::FourCorners(const WindowProjection &projection)$/;"	f	class:CompareProjection::FourCorners
FourCorners	Projection/CompareProjection.hpp	/^  struct FourCorners : GeoQuadrilateral {$/;"	s	class:CompareProjection
Fraction	Math/Angle.cpp	/^Angle::Fraction(const Angle end, const double fraction) const$/;"	f	class:Angle
FrameHeader	Device/Driver/FLARM/BinaryProtocol.hpp	/^  struct FrameHeader$/;"	s	namespace:FLARM
FramebufferRenderbuffer	Screen/OpenGL/FBO.cpp	/^FBO::FramebufferRenderbuffer(GLenum target, GLenum attachment,$/;"	f	class:FBO
FramebufferTexture2D	Screen/OpenGL/FBO.cpp	/^FBO::FramebufferTexture2D(GLenum target, GLenum attachment,$/;"	f	class:FBO
Free	Screen/Memory/Buffer.hpp	/^  void Free() {$/;"	f	struct:WritableImageBuffer
FreeType	Screen/FreeType/Init.hpp	/^namespace FreeType {$/;"	n
FrmBeg	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t FrmBeg = 0x3000;$/;"	m	class:DBB
FrmEnd	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t FrmEnd = FrmBeg + FRM_SIZE;$/;"	m	class:DBB
From2VW	Engine/GlideSolvers/PolarCoefficients.cpp	/^PolarCoefficients::From2VW(double v1, double v2, double w1, double w2)$/;"	f	class:PolarCoefficients
From3VW	Engine/GlideSolvers/PolarCoefficients.cpp	/^PolarCoefficients::From3VW(double v1, double v2, double v3,$/;"	f	class:PolarCoefficients
FromBE16	OS/ByteOrder.hpp	/^FromBE16(uint16_t value)$/;"	f
FromBE32	OS/ByteOrder.hpp	/^FromBE32(uint32_t value)$/;"	f
FromBE64	OS/ByteOrder.hpp	/^FromBE64(uint64_t value)$/;"	f
FromCelsius	Atmosphere/Temperature.hpp	/^  static constexpr Temperature FromCelsius(double celsius_value) {$/;"	f	class:Temperature
FromDMS	Math/Angle.hpp	/^  static constexpr Angle FromDMS(unsigned d, unsigned m=0, unsigned s=0,$/;"	f	class:Angle
FromGeoPoint	Geo/UTM.cpp	/^UTM::FromGeoPoint(GeoPoint p)$/;"	f	class:UTM
FromHours	Time/RoughTime.hpp	/^  static RoughTimeDelta FromHours(int _value) {$/;"	f	class:RoughTimeDelta
FromInteger	Screen/Memory/PixelTraits.hpp	/^  static constexpr color_type FromInteger(integer_type i) {$/;"	f	struct:BGRAPixelTraits
FromKelvin	Atmosphere/Temperature.hpp	/^  static constexpr Temperature FromKelvin(double kelvin_value) {$/;"	f	class:Temperature
FromLE16	OS/ByteOrder.hpp	/^FromLE16(uint16_t value)$/;"	f
FromLE32	OS/ByteOrder.hpp	/^FromLE32(uint32_t value)$/;"	f
FromLE64	OS/ByteOrder.hpp	/^FromLE64(uint64_t value)$/;"	f
FromMinuteOfDay	Time/BrokenTime.cpp	/^BrokenTime::FromMinuteOfDay(unsigned minute_of_day)$/;"	f	class:BrokenTime
FromMinuteOfDay	Time/RoughTime.hpp	/^  static RoughTime FromMinuteOfDay(unsigned mod) {$/;"	f	class:RoughTime
FromMinuteOfDayChecked	Time/BrokenTime.cpp	/^BrokenTime::FromMinuteOfDayChecked(unsigned minute_of_day)$/;"	f	class:BrokenTime
FromMinuteOfDayChecked	Time/RoughTime.hpp	/^  static RoughTime FromMinuteOfDayChecked(int mod) {$/;"	f	class:RoughTime
FromMinuteOfDayChecked	Time/RoughTime.hpp	/^  static RoughTime FromMinuteOfDayChecked(unsigned mod) {$/;"	f	class:RoughTime
FromMinutes	Time/RoughTime.hpp	/^  static RoughTimeDelta FromMinutes(int _value) {$/;"	f	class:RoughTimeDelta
FromNative	Atmosphere/Temperature.hpp	/^  static constexpr Temperature FromNative(double value) {$/;"	f	class:Temperature
FromProfile	Plane/PlaneGlue.cpp	/^PlaneGlue::FromProfile(Plane &plane, const ProfileMap &profile)$/;"	f	class:PlaneGlue
FromRGB	Screen/PortableColor.hpp	/^  static uint8_t FromRGB(uint8_t r, uint8_t g, uint8_t b) {$/;"	f	class:Luminosity8
FromSecondOfDay	Time/BrokenTime.cpp	/^BrokenTime::FromSecondOfDay(unsigned second_of_day)$/;"	f	class:BrokenTime
FromSecondOfDayChecked	Time/BrokenTime.cpp	/^BrokenTime::FromSecondOfDayChecked(unsigned second_of_day)$/;"	f	class:BrokenTime
FromSecondOfDayChecked	Time/RoughTime.hpp	/^  static RoughTime FromSecondOfDayChecked(unsigned sod) {$/;"	f	class:RoughTime
FromSeconds	Time/RoughTime.hpp	/^  static RoughTimeDelta FromSeconds(int _value) {$/;"	f	class:RoughTimeDelta
FromUnixTimeUTC	Time/BrokenDateTime.cpp	/^BrokenDateTime::FromUnixTimeUTC(int64_t _t)$/;"	f	class:BrokenDateTime
FromUser	Units/Temperature.cpp	/^Temperature::FromUser(double value)$/;"	f	class:Temperature
FromUserPressure	Units/Units.cpp	/^Units::FromUserPressure(double value)$/;"	f	class:Units
FromXMLString	XML/Parser.cpp	/^FromXMLString(const TCHAR *ss, size_t lo)$/;"	f	file:
FromXY	Math/Angle.hpp	/^  static Angle FromXY(const double x, const double y) {$/;"	f	class:Angle
Full	Dialogs/WidgetDialog.hpp	/^  struct Full {};$/;"	s	class:WidgetDialog
Full	Interface.hpp	/^  static inline const FullBlackboard &Full() {$/;"	f	namespace:CommonInterface
FullBlackboard	Blackboard/FullBlackboard.hpp	/^class FullBlackboard : public BaseBlackboard, public SettingsBlackboard {$/;"	c
FullCircle	Math/Angle.hpp	/^  static Angle FullCircle() {$/;"	f	class:Angle
FullFlush	Device/Port/Port.cpp	/^Port::FullFlush(OperationEnvironment &env,$/;"	f	class:Port
FullRead	Device/Port/Port.cpp	/^Port::FullRead(void *buffer, size_t length, OperationEnvironment &env,$/;"	f	class:Port
FullRead	OS/FileDescriptor.cxx	/^FileDescriptor::FullRead(void *_buffer, size_t length)$/;"	f	class:FileDescriptor
FullRedraw	MainWindow.cpp	/^MainWindow::FullRedraw()$/;"	f	class:MainWindow
FullRedraw	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::FullRedraw()$/;"	f	class:GlueMapWindow
FullScreen	MainWindow.hpp	/^  bool FullScreen = false;$/;"	m	class:MainWindow
FullScreen	PageSettings.hpp	/^  static PageLayout FullScreen() {$/;"	f	struct:PageLayout
FullScreen	Screen/TopWindow.hpp	/^  void FullScreen() {$/;"	f	class:DisplayOrientation
FullWrite	Device/Port/Port.cpp	/^Port::FullWrite(const void *buffer, size_t length,$/;"	f	class:Port
FullWriteString	Device/Port/Port.cpp	/^Port::FullWriteString(const char *s,$/;"	f	class:Port
Function	Blackboard/ScopeCalculatedListener.hpp	/^                             const DerivedInfo &calculated)> Function;$/;"	t	class:ScopeCalculatedListener
Function	Blackboard/ScopeGPSListener.hpp	/^  typedef std::function<void(const MoreData &basic)> Function;$/;"	t	class:ScopeGPSListener
Function	Screen/OpenGL/Function.hpp	/^  typedef void (*Function)();$/;"	t	namespace:OpenGL
FunctionListItemRenderer	Form/List.hpp	/^  FunctionListItemRenderer(ListItemRendererFunction _function)$/;"	f	class:FunctionListItemRenderer
FunctionListItemRenderer	Form/List.hpp	/^class FunctionListItemRenderer : public ListItemRenderer {$/;"	c
GAMMA	Terrain/jasper/jpc/jpc_qmfb.c	1655;"	d	file:
GAUGESCONFIGPANEL_HPP	Dialogs/Settings/Panels/GaugesConfigPanel.hpp	25;"	d
GAUGEVARIORANGE	Gauge/GaugeVario.hpp	/^  static constexpr int GAUGEVARIORANGE = 5;$/;"	m	class:GaugeVario
GAUGEVARIOSWEEP	Gauge/GaugeVario.hpp	/^  static constexpr int GAUGEVARIOSWEEP = 90;$/;"	m	class:GaugeVario
GAUGE_FLARM_HPP	Gauge/GaugeFLARM.hpp	25;"	d
GAUGE_THERMAL_ASSISTENT_HPP	Gauge/GaugeThermalAssistant.hpp	25;"	d
GAUGE_VARIO_H	Gauge/GaugeVario.hpp	25;"	d
GC2Event	Input/InputConfig.hpp	/^  unsigned short GC2Event[GCE_COUNT];$/;"	m	struct:InputConfig
GCC_CHECK_VERSION	Util/Compiler.h	45;"	d
GCC_MAKE_VERSION	Util/Compiler.h	27;"	d
GCC_OLDER_THAN	Util/Compiler.h	60;"	d
GCC_VERSION	Util/Compiler.h	30;"	d
GCC_VERSION	Util/Compiler.h	32;"	d
GCE_AIRSPACE_ENTER	Input/InputQueue.hpp	/^  GCE_AIRSPACE_ENTER,$/;"	e	enum:__anon208
GCE_AIRSPACE_LEAVE	Input/InputQueue.hpp	/^  GCE_AIRSPACE_LEAVE,$/;"	e	enum:__anon208
GCE_ALTERNATE_CHANGED	Input/InputQueue.hpp	/^  GCE_ALTERNATE_CHANGED,$/;"	e	enum:__anon208
GCE_ARM_READY	Input/InputQueue.hpp	/^  GCE_ARM_READY,$/;"	e	enum:__anon208
GCE_COMMPORT_RESTART	Input/InputQueue.hpp	/^  GCE_COMMPORT_RESTART,$/;"	e	enum:__anon208
GCE_COUNT	Input/InputQueue.hpp	/^  GCE_COUNT			\/\/ How many we have for arrays etc$/;"	e	enum:__anon208
GCE_FLARM_NEWTRAFFIC	Input/InputQueue.hpp	/^  GCE_FLARM_NEWTRAFFIC,$/;"	e	enum:__anon208
GCE_FLARM_NOTRAFFIC	Input/InputQueue.hpp	/^  GCE_FLARM_NOTRAFFIC,$/;"	e	enum:__anon208
GCE_FLARM_TRAFFIC	Input/InputQueue.hpp	/^  GCE_FLARM_TRAFFIC,$/;"	e	enum:__anon208
GCE_FLIGHTMODE_CLIMB	Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_CLIMB,$/;"	e	enum:__anon208
GCE_FLIGHTMODE_CRUISE	Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_CRUISE,$/;"	e	enum:__anon208
GCE_FLIGHTMODE_FINALGLIDE	Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE,$/;"	e	enum:__anon208
GCE_FLIGHTMODE_FINALGLIDE_ABOVE	Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE_ABOVE,$/;"	e	enum:__anon208
GCE_FLIGHTMODE_FINALGLIDE_BELOW	Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE_BELOW,$/;"	e	enum:__anon208
GCE_FLIGHTMODE_FINALGLIDE_TERRAIN	Input/InputQueue.hpp	/^  GCE_FLIGHTMODE_FINALGLIDE_TERRAIN,$/;"	e	enum:__anon208
GCE_GPS_CONNECTION_WAIT	Input/InputQueue.hpp	/^  GCE_GPS_CONNECTION_WAIT,$/;"	e	enum:__anon208
GCE_GPS_FIX_WAIT	Input/InputQueue.hpp	/^  GCE_GPS_FIX_WAIT,$/;"	e	enum:__anon208
GCE_HEIGHT_MAX	Input/InputQueue.hpp	/^  GCE_HEIGHT_MAX,$/;"	e	enum:__anon208
GCE_LANDABLE_UNREACHABLE	Input/InputQueue.hpp	/^  GCE_LANDABLE_UNREACHABLE,$/;"	e	enum:__anon208
GCE_LANDING	Input/InputQueue.hpp	/^  GCE_LANDING,$/;"	e	enum:__anon208
GCE_POLAR_CHANGED	Input/InputQueue.hpp	/^  GCE_POLAR_CHANGED,$/;"	e	enum:__anon208
GCE_Queue	Input/InputQueue.cpp	/^static int GCE_Queue[MAX_GCE_QUEUE];$/;"	v	file:
GCE_STARTUP_REAL	Input/InputQueue.hpp	/^  GCE_STARTUP_REAL,$/;"	e	enum:__anon208
GCE_STARTUP_SIMULATOR	Input/InputQueue.hpp	/^  GCE_STARTUP_SIMULATOR,$/;"	e	enum:__anon208
GCE_TAKEOFF	Input/InputQueue.hpp	/^  GCE_TAKEOFF,$/;"	e	enum:__anon208
GCE_TASK_FINISH	Input/InputQueue.hpp	/^  GCE_TASK_FINISH,$/;"	e	enum:__anon208
GCE_TASK_NEXTWAYPOINT	Input/InputQueue.hpp	/^  GCE_TASK_NEXTWAYPOINT,$/;"	e	enum:__anon208
GCE_TASK_START	Input/InputQueue.hpp	/^  GCE_TASK_START,$/;"	e	enum:__anon208
GCE_TEAM_POS_REACHED	Input/InputQueue.hpp	/^  GCE_TEAM_POS_REACHED,$/;"	e	enum:__anon208
GEAR_DOWN	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    GEAR_DOWN,$/;"	e	enum:SwitchesLeft::Controls	file:
GENERIC	Widget/RowFormWidget.hpp	/^      GENERIC,$/;"	m	class:RowFormWidget::Row::Type
GEOELLIPSE_HPP	Geo/GeoEllipse.hpp	24;"	d
GEOID_H	Geo/Geoid.hpp	25;"	d
GEOPOINT	Form/DataField/Base.hpp	/^    GEOPOINT,$/;"	m	class:DataField::Type
GEOVECTOR_MEMENTO_HPP	Geo/Memento/GeoVectorMemento.hpp	24;"	d
GEO_VECTOR_HPP	Geo/GeoVector.hpp	24;"	d
GERMANY_NORTH	Weather/PCMet/Overlays.hpp	/^    GERMANY_NORTH,$/;"	m	class:PCMet::OverlayInfo::Area
GERMANY_SOUTH	Weather/PCMet/Overlays.hpp	/^    GERMANY_SOUTH,$/;"	m	class:PCMet::OverlayInfo::Area
GESTURE_MANAGER_HPP	UIUtil/GestureManager.hpp	31;"	d
GETPOWERMANAGEMENT	Hardware/VideoPower.h	30;"	d
GET_CLASS	Topography/shapelib/mapserver.h	456;"	d
GET_LAYER	Topography/shapelib/mapserver.h	455;"	d
GGA	Device/Parser.cpp	/^NMEAParser::GGA(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
GID	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
GIT_SUFFIX	Version.cpp	54;"	d	file:
GIT_SUFFIX	Version.cpp	56;"	d	file:
GJAS_VERSION	Terrain/jasper/jas_version.h	88;"	d
GLASS	InfoBoxes/InfoBoxSettings.hpp	/^    GLASS,$/;"	m	class:InfoBoxSettings::BorderStyle
GLArrayBuffer	Screen/OpenGL/Buffer.hpp	/^class GLArrayBuffer : public GLBuffer<GL_ARRAY_BUFFER, GL_STATIC_DRAW> {$/;"	c
GLBlend	Screen/OpenGL/Scope.hpp	/^  GLBlend(GLclampf alpha) {$/;"	f	class:GLBlend
GLBlend	Screen/OpenGL/Scope.hpp	/^  GLBlend(GLenum sfactor, GLenum dfactor) {$/;"	f	class:GLBlend
GLBlend	Screen/OpenGL/Scope.hpp	/^class GLBlend : public GLEnable<GL_BLEND> {$/;"	c
GLBuffer	Screen/OpenGL/Buffer.hpp	/^  GLBuffer() {$/;"	f	class:GLBuffer
GLBuffer	Screen/OpenGL/Buffer.hpp	/^class GLBuffer {$/;"	c
GLCanvasScissor	Screen/OpenGL/Scissor.hpp	/^  GLCanvasScissor(const Canvas &canvas)$/;"	f	class:GLCanvasScissor
GLCanvasScissor	Screen/OpenGL/Scissor.hpp	/^  explicit GLCanvasScissor(PixelRect rc) {$/;"	f	class:GLCanvasScissor
GLCanvasScissor	Screen/OpenGL/Scissor.hpp	/^  explicit GLCanvasScissor(PixelRect rc)$/;"	f	class:GLCanvasScissor
GLCanvasScissor	Screen/OpenGL/Scissor.hpp	/^  explicit GLCanvasScissor(const Canvas &canvas) {$/;"	f	class:GLCanvasScissor
GLCanvasScissor	Screen/OpenGL/Scissor.hpp	/^class GLCanvasScissor : public GLEnable<GL_SCISSOR_TEST> {$/;"	c
GLCanvasScissor	Screen/OpenGL/Scissor.hpp	/^class GLCanvasScissor : public GLScissor {$/;"	c
GLDonutVertices	Screen/OpenGL/VertexArray.cpp	/^GLDonutVertices::GLDonutVertices(GLvalue center_x, GLvalue center_y,$/;"	f	class:GLDonutVertices
GLDonutVertices	Screen/OpenGL/VertexArray.hpp	/^struct GLDonutVertices : public GLVertexArray<66> {$/;"	s
GLEnable	Screen/OpenGL/Scope.hpp	/^  GLEnable() {$/;"	f	class:GLEnable
GLEnable	Screen/OpenGL/Scope.hpp	/^class GLEnable {$/;"	c
GLExt	Screen/OpenGL/Dynamic.cpp	/^namespace GLExt {$/;"	n	file:
GLExt	Screen/OpenGL/Dynamic.hpp	/^namespace GLExt {$/;"	n
GLFrameBuffer	Screen/OpenGL/FrameBuffer.hpp	/^  GLFrameBuffer() {$/;"	f	class:GLFrameBuffer
GLFrameBuffer	Screen/OpenGL/FrameBuffer.hpp	/^class GLFrameBuffer {$/;"	c
GLIDE	Renderer/WaypointRendererSettings.hpp	/^    GLIDE,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
GLIDECOMPUTERCONFIGPANEL_HPP	Dialogs/Settings/Panels/GlideComputerConfigPanel.hpp	25;"	d
GLIDECOMPUTER_BLACKBOARD_HPP	Computer/GlideComputerBlackboard.hpp	25;"	d
GLIDEPOLAR_HPP	Engine/GlideSolvers/GlidePolar.hpp	23;"	d
GLIDER	FLARM/Traffic.hpp	/^    GLIDER = 1,           \/\/!< glider \/ motor-glider$/;"	m	class:FlarmTraffic::AircraftType
GLIDER	Tracking/LiveTrack24.hpp	/^    GLIDER = 8,$/;"	m	class:LiveTrack24::VehicleType
GLIDER	Tracking/LiveTrack24/Settings.hpp	/^    GLIDER = 0,$/;"	m	class:LiveTrack24::Settings::VehicleType
GLIDERESULT_HPP	Engine/GlideSolvers/GlideResult.hpp	23;"	d
GLIDER_LINK	Device/Config.hpp	/^    GLIDER_LINK,$/;"	m	class:DeviceConfig::PortType
GLIDESTATE_HPP	Engine/GlideSolvers/GlideState.hpp	23;"	d
GLIDE_AND_TERRAIN	Renderer/WaypointRendererSettings.hpp	/^    GLIDE_AND_TERRAIN,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
GLIDE_COMPUTER_INTERFACE_HPP	Computer/GlideComputerInterface.hpp	2;"	d
GLL	Device/Parser.cpp	/^NMEAParser::GLL(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
GLO	Kobo/Model.hpp	/^  GLO,$/;"	m	class:KoboModel
GLOBAL_SLICE_ALLOCATOR_HXX	Util/GlobalSliceAllocator.hxx	31;"	d
GLO_HD	Kobo/Model.hpp	/^  GLO_HD,$/;"	m	class:KoboModel
GLProgram	Screen/OpenGL/Program.hpp	/^  GLProgram():id(glCreateProgram()) {}$/;"	f	class:GLProgram
GLProgram	Screen/OpenGL/Program.hpp	/^class GLProgram {$/;"	c
GLRenderBuffer	Screen/OpenGL/RenderBuffer.hpp	/^  GLRenderBuffer() {$/;"	f	class:GLRenderBuffer
GLRenderBuffer	Screen/OpenGL/RenderBuffer.hpp	/^class GLRenderBuffer {$/;"	c
GLSL_PRECISION	Screen/OpenGL/Shaders.cpp	51;"	d	file:
GLSL_VERSION	Screen/OpenGL/Shaders.cpp	50;"	d	file:
GLScissor	Screen/OpenGL/Scope.hpp	/^  GLScissor(GLint x, GLint y, GLsizei width, GLsizei height) {$/;"	f	class:GLScissor
GLScissor	Screen/OpenGL/Scope.hpp	/^class GLScissor : public GLEnable<GL_SCISSOR_TEST> {$/;"	c
GLShader	Screen/OpenGL/Program.hpp	/^  explicit GLShader(GLenum type):id(glCreateShader(type)) {}$/;"	f	class:GLShader
GLShader	Screen/OpenGL/Program.hpp	/^class GLShader {$/;"	c
GLSurfaceListener	Screen/OpenGL/Surface.hpp	/^struct GLSurfaceListener {$/;"	s
GLSurfaceListenerList	Screen/OpenGL/Surface.cpp	/^typedef std::list<GLSurfaceListener *> GLSurfaceListenerList;$/;"	t	file:
GLTexture	Screen/OpenGL/Texture.cpp	/^GLTexture::GLTexture(GLint internal_format, PixelSize _size,$/;"	f	class:GLTexture
GLTexture	Screen/OpenGL/Texture.cpp	/^GLTexture::GLTexture(PixelSize _size, bool _flipped)$/;"	f	class:GLTexture
GLTexture	Screen/OpenGL/Texture.hpp	/^  GLTexture(GLuint _id, PixelSize _size, PixelSize _allocated_size,$/;"	f	class:GLTexture
GLTexture	Screen/OpenGL/Texture.hpp	/^class GLTexture {$/;"	c
GLUE_GAUGE_VARIO_H	Gauge/GlueGaugeVario.hpp	25;"	d
GLVertexArray	Screen/OpenGL/VertexArray.hpp	/^struct GLVertexArray {$/;"	s
GL_EXACT	Screen/OpenGL/Types.hpp	/^static constexpr GLenum GL_EXACT = GL_FIXED;$/;"	v
GL_EXACT	Screen/OpenGL/Types.hpp	/^static constexpr GLenum GL_EXACT = GL_FLOAT;$/;"	v
GL_VALUE	Screen/OpenGL/Types.hpp	/^static constexpr GLenum GL_VALUE = GL_INT;$/;"	v
GL_VALUE	Screen/OpenGL/Types.hpp	/^static constexpr GLenum GL_VALUE = GL_SHORT;$/;"	v
GLexact	Screen/OpenGL/Types.hpp	/^typedef GLfixed GLexact;$/;"	t
GLexact	Screen/OpenGL/Types.hpp	/^typedef GLfloat GLexact;$/;"	t
GLuvalue	Screen/OpenGL/Types.hpp	/^typedef GLuint GLuvalue;$/;"	t
GLuvalue	Screen/OpenGL/Types.hpp	/^typedef GLushort GLuvalue;$/;"	t
GLvalue	Screen/OpenGL/Types.hpp	/^typedef GLint GLvalue;$/;"	t
GLvalue	Screen/OpenGL/Types.hpp	/^typedef GLshort GLvalue;$/;"	t
GOTO	Dialogs/MapItemListDialog.cpp	/^    GOTO,$/;"	e	enum:final::Buttons	file:
GOTO	Dialogs/Task/AlternatesListDialog.cpp	/^    GOTO,$/;"	e	enum:final::Buttons	file:
GOTO	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    GOTO,$/;"	e	enum:final::Buttons	file:
GOTO	Engine/Task/TaskType.hpp	/^  GOTO,$/;"	m	class:TaskType
GOTOTASK_H	Engine/Task/Unordered/GotoTask.hpp	24;"	d
GPS	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  GPS,$/;"	e	enum:Controls	file:
GPS	NMEA/GPSState.hpp	/^  GPS,$/;"	m	class:FixQuality
GPSClock	Time/GPSClock.hpp	/^  GPSClock():last(RESET_VALUE) {}$/;"	f	class:GPSClock
GPSClock	Time/GPSClock.hpp	/^class GPSClock {$/;"	c
GPSState	NMEA/GPSState.hpp	/^struct GPSState$/;"	s
GPSStatus	FLARM/Status.hpp	/^  enum class GPSStatus: uint8_t {$/;"	c	struct:FlarmStatus
GPS_2D	FLARM/Status.hpp	/^    GPS_2D = 1,$/;"	m	class:FlarmStatus::GPSStatus
GPS_3D	FLARM/Status.hpp	/^    GPS_3D = 2,$/;"	m	class:FlarmStatus::GPSStatus
GPS_COMMUNICATION	FLARM/Error.hpp	/^    GPS_COMMUNICATION = 0x31,$/;"	e	enum:uint8_t
GPS_CONFIGURATION	FLARM/Error.hpp	/^    GPS_CONFIGURATION = 0x32,$/;"	e	enum:uint8_t
GPWIN	Device/Driver/PosiGraph.cpp	/^GPWIN(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
GR	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::GR(const MoreData &basic, const FlyingState &flying,$/;"	f	class:GlideComputerAirData
GRADIENT	Units/Unit.hpp	/^  GRADIENT,$/;"	m	class:Unit
GRADIENT_HPP	Engine/Util/Gradient.hpp	23;"	d
GRAHAM_SCAN_HPP	Geo/ConvexHull/GrahamScan.hpp	24;"	d
GRAVITY	Geo/Gravity.hpp	/^static constexpr double GRAVITY = 9.81;$/;"	v
GRAY	Screen/Custom/UncompressedImage.hpp	/^    GRAY,$/;"	m	class:UncompressedImage::Format
GRAYSCALE_8BIT	Screen/FB/mxcfb.h	72;"	d
GRAYSCALE_8BIT_INVERTED	Screen/FB/mxcfb.h	73;"	d
GRECORD	Device/Driver/Volkslogger/grecord.cpp	/^GRECORD::GRECORD(FILE *ausgabedatei) {$/;"	f	class:GRECORD
GRECORD	Device/Driver/Volkslogger/grecord.h	/^class GRECORD {$/;"	c
GRECORD_H	Device/Driver/Volkslogger/grecord.h	19;"	d
GRECORD_HPP	Logger/GRecord.hpp	24;"	d
GREEN	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    GREEN,$/;"	e	enum:final::Buttons	file:
GREEN	FLARM/Color.hpp	/^  GREEN,$/;"	m	class:FlarmColor
GROUND	Terrain/Height.hpp	/^  UNKNOWN, GROUND, WATER$/;"	m	class:TerrainType
GRecord	Logger/GRecord.hpp	/^class GRecord$/;"	c
GSA	Device/Parser.cpp	/^NMEAParser::GSA(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
GTY	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
GUIStartLogger	Logger/Logger.cpp	/^Logger::GUIStartLogger(const NMEAInfo& gps_info,$/;"	f	class:Logger
GUIStopLogger	Logger/Logger.cpp	/^Logger::GUIStopLogger(const NMEAInfo &gps_info,$/;"	f	class:Logger
GUIToggleLogger	Logger/Logger.cpp	/^Logger::GUIToggleLogger(const NMEAInfo& gps_info,$/;"	f	class:Logger
GUNZIP_READER_HXX	IO/GunzipReader.hxx	31;"	d
GaugeFLARM	Gauge/GaugeFLARM.hpp	/^  GaugeFLARM(LiveBlackboard &_blackboard, const FlarmTrafficLook &_look)$/;"	f	class:final
GaugeLocation	Gauge/TrafficSettings.hpp	/^  enum class GaugeLocation : uint8_t {$/;"	c	struct:TrafficSettings
GaugeThermalAssistant	Gauge/GaugeThermalAssistant.hpp	/^  GaugeThermalAssistant(LiveBlackboard &_blackboard,$/;"	f	class:final
GaugeThermalAssistantWindow	Gauge/GaugeThermalAssistant.cpp	/^  GaugeThermalAssistantWindow(ContainerWindow &parent,$/;"	f	class:GaugeThermalAssistantWindow
GaugeThermalAssistantWindow	Gauge/GaugeThermalAssistant.cpp	/^class GaugeThermalAssistantWindow : public ThermalAssistantWindow {$/;"	c	file:
GaugeVario	Gauge/GaugeVario.hpp	/^class GaugeVario : public AntiFlickerWindow$/;"	c
GaugesConfigPanel	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  GaugesConfigPanel()$/;"	f	class:final
Gen	Screen/OpenGL/FrameBuffer.hpp	/^  void Gen() {$/;"	f	class:GLFrameBuffer
Gen	Screen/OpenGL/RenderBuffer.hpp	/^  void Gen() {$/;"	f	class:GLRenderBuffer
GenFramebuffers	Screen/OpenGL/FBO.cpp	/^FBO::GenFramebuffers(GLsizei n, GLuint *framebuffers)$/;"	f	class:FBO
GenRenderbuffers	Screen/OpenGL/FBO.cpp	/^FBO::GenRenderbuffers(GLsizei n, GLuint *renderbuffers)$/;"	f	class:FBO
GeneralInfo	Device/Driver/CAI302/Protocol.hpp	/^  struct GeneralInfo {$/;"	s	namespace:CAI302
Generate	Event/Android/Queue.cpp	/^EventQueue::Generate(Event &event)$/;"	f	class:EventQueue
Generate	Event/Poll/InputQueue.cpp	/^InputEventQueue::Generate(Event &event)$/;"	f	class:InputEventQueue
Generate	Event/Poll/Linux/MergeMouse.cpp	/^MergeMouse::Generate()$/;"	f	class:MergeMouse
Generate	Event/Poll/Queue.cpp	/^EventQueue::Generate(Event &event)$/;"	f	class:EventQueue
Generate	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::Generate(Event &event)$/;"	f	class:WaylandEventQueue
Generate	Event/Poll/X11Queue.hpp	/^  bool Generate(Event &event) {$/;"	f	class:X11EventQueue
Generate	Event/SDL/Queue.cpp	/^EventQueue::Generate(Event &event)$/;"	f	class:EventQueue
Generate	Terrain/TerrainRenderer.cpp	/^TerrainRenderer::Generate(const WindowProjection &map_projection,$/;"	f	class:TerrainRenderer
Generate	Weather/Rasp/RaspRenderer.cpp	/^RaspRenderer::Generate(const WindowProjection &projection,$/;"	f	class:RaspRenderer
GenerateArcExcluding	Engine/Task/ObservationZones/Boundary.cpp	/^OZBoundary::GenerateArcExcluding(const GeoPoint &center, double radius,$/;"	f	class:OZBoundary
GenerateFAITriangleArea	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleArea(GeoPoint *dest,$/;"	f
GenerateFAITriangleLargeBottom	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeBottom(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeBottomLeft	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeBottomLeft(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeBottomRight	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeBottomRight(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeLeft1	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeLeft1(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeLeft2	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeLeft2(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeRight1	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeRight1(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeRight2	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeRight2(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLargeTop	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLargeTop(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleLeft	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleLeft(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleRight	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleRight(GeoPoint *dest,$/;"	f	file:
GenerateFAITriangleTop	Engine/Task/Shapes/FAITriangleArea.cpp	/^GenerateFAITriangleTop(GeoPoint *dest,$/;"	f	file:
GenerateImage	Terrain/RasterRenderer.cpp	/^RasterRenderer::GenerateImage(bool do_shading,$/;"	f	class:RasterRenderer
GenerateIntermediate	Engine/Route/RoutePolars.cpp	/^RoutePolars::GenerateIntermediate(const RoutePoint& _dest,$/;"	f	class:RoutePolars
GenerateKey	Tracking/SkyLines/Key.cpp	/^SkyLinesTracking::GenerateKey()$/;"	f	class:SkyLinesTracking
GenerateSessionID	Tracking/LiveTrack24.cpp	/^LiveTrack24::GenerateSessionID()$/;"	f	class:LiveTrack24
GenerateSessionID	Tracking/LiveTrack24.cpp	/^LiveTrack24::GenerateSessionID(UserID user_id)$/;"	f	class:LiveTrack24
GenerateSlopeImage	Terrain/RasterRenderer.cpp	/^RasterRenderer::GenerateSlopeImage(unsigned height_scale,$/;"	f	class:RasterRenderer
GenerateTakeoffPoint	Engine/Waypoint/Waypoints.cpp	/^Waypoints::GenerateTakeoffPoint(const GeoPoint& location,$/;"	f	class:Waypoints
GenerateUnshadedImage	Terrain/RasterRenderer.cpp	/^RasterRenderer::GenerateUnshadedImage(unsigned height_scale,$/;"	f	class:RasterRenderer
GenericByteSwap16	OS/ByteOrder.hpp	/^GenericByteSwap16(uint16_t value)$/;"	f
GenericByteSwap32	OS/ByteOrder.hpp	/^GenericByteSwap32(uint32_t value)$/;"	f
GenericByteSwap64	OS/ByteOrder.hpp	/^GenericByteSwap64(uint64_t value)$/;"	f
GenericCreateOnPort	Device/Driver/Generic.cpp	/^GenericCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
GenericDevice	Device/Driver/Generic.cpp	/^class GenericDevice : public AbstractDevice {$/;"	c	file:
GeoAngle	Cloud/Dump.hpp	/^  constexpr GeoAngle(Angle _angle):Angle(_angle) {}$/;"	f	struct:GeoAngle
GeoAngle	Cloud/Dump.hpp	/^struct GeoAngle : Angle {$/;"	s
GeoBounds	Geo/GeoBounds.hpp	/^  GeoBounds(const GeoPoint north_west, const GeoPoint south_east)$/;"	f	class:GeoBounds
GeoBounds	Geo/GeoBounds.hpp	/^  GeoBounds(const GeoPoint pt)$/;"	f	class:GeoBounds
GeoBounds	Geo/GeoBounds.hpp	/^class GeoBounds {$/;"	c
GeoClip	Geo/GeoClip.hpp	/^  GeoClip(const GeoBounds &other)$/;"	f	class:GeoClip
GeoClip	Geo/GeoClip.hpp	/^class GeoClip : protected GeoBounds {$/;"	c
GeoEllipse	Geo/GeoEllipse.cpp	/^GeoEllipse::GeoEllipse(const GeoPoint &f1, const GeoPoint &f2,$/;"	f	class:GeoEllipse
GeoEllipse	Geo/GeoEllipse.hpp	/^class GeoEllipse$/;"	c
GeoFrom2D	MapWindow/OverlayBitmap.cpp	/^GeoFrom2D(DoublePoint2D p)$/;"	f	file:
GeoPoint	Geo/GeoPoint.hpp	/^  GeoPoint(const Angle _longitude, const Angle _latitude) :$/;"	f	struct:GeoPoint
GeoPoint	Geo/GeoPoint.hpp	/^struct GeoPoint {$/;"	s
GeoPoint	Tracking/SkyLines/Protocol.hpp	/^struct GeoPoint {$/;"	s	namespace:SkyLinesTracking
GeoPointDataField	Form/DataField/GeoPoint.hpp	/^  GeoPointDataField(GeoPoint _value, CoordinateFormat _format,$/;"	f	class:final
GeoPointEntryDialog	Dialogs/GeoPointEntry.cpp	/^GeoPointEntryDialog(const TCHAR *caption, GeoPoint &value,$/;"	f
GeoQuadrilateral	Geo/Quadrilateral.hpp	/^struct GeoQuadrilateral {$/;"	s
GeoTo2D	Geo/ConvexHull/PolygonInterior.cpp	/^GeoTo2D(GeoPoint p)$/;"	f	file:
GeoTo2D	MapWindow/OverlayBitmap.cpp	/^GeoTo2D(GeoPoint p)$/;"	f	file:
GeoToScreen	Projection/Projection.cpp	/^Projection::GeoToScreen(const GeoPoint &g) const$/;"	f	class:Projection
GeoToScreenDistance	Projection/Projection.hpp	/^  unsigned GeoToScreenDistance(const double x) const {$/;"	f	class:Projection
GeoToScreenIfVisible	Projection/WindowProjection.cpp	/^WindowProjection::GeoToScreenIfVisible(const GeoPoint &loc, PixelPoint &sc) const$/;"	f	class:WindowProjection
GeoVector	Geo/GeoVector.cpp	/^GeoVector::GeoVector(const GeoPoint &source, const GeoPoint &target)$/;"	f	class:GeoVector
GeoVector	Geo/GeoVector.hpp	/^  GeoVector(double _distance, Angle _bearing)$/;"	f	struct:GeoVector
GeoVector	Geo/GeoVector.hpp	/^struct GeoVector {$/;"	s
GeoVectorMemento	Geo/Memento/GeoVectorMemento.hpp	/^  GeoVectorMemento()$/;"	f	class:GeoVectorMemento
GeoVectorMemento	Geo/Memento/GeoVectorMemento.hpp	/^class GeoVectorMemento $/;"	c
GeoVisible	Projection/WindowProjection.cpp	/^WindowProjection::GeoVisible(const GeoPoint &loc) const$/;"	f	class:WindowProjection
Geometry	Gauge/GaugeVario.hpp	/^  struct Geometry {$/;"	s	class:GaugeVario
Geometry	InfoBoxes/InfoBoxSettings.hpp	/^  enum class Geometry : uint8_t {$/;"	c	struct:InfoBoxSettings
Gesture2Event	Input/InputConfig.hpp	/^  RadixTree<unsigned> Gesture2Event;$/;"	m	struct:InputConfig
GestureLook	Look/GestureLook.hpp	/^struct GestureLook$/;"	s
GestureManager	UIUtil/GestureManager.hpp	/^  GestureManager():$/;"	f	class:GestureManager
GestureManager	UIUtil/GestureManager.hpp	/^class GestureManager$/;"	c
Get	Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::Get(const TCHAR *name) const$/;"	f	class:Waypoints::WaypointNameTree
Get	Event/Android/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:EventLoop
Get	Event/Poll/LibInput/UdevContext.hpp	/^  struct udev *Get() {$/;"	f	class:UdevContext
Get	Event/Poll/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:EventLoop
Get	Event/SDL/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:EventLoop
Get	Event/Windows/Loop.cpp	/^EventLoop::Get(Event &event)$/;"	f	class:EventLoop
Get	FLARM/ColorDatabase.hpp	/^  FlarmColor Get(FlarmId id) const {$/;"	f	class:FlarmColorDatabase
Get	FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Get(FlarmId id) const$/;"	f	class:FlarmNameDatabase
Get	FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Get(const TCHAR *name) const$/;"	f	class:FlarmNameDatabase
Get	FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Get(const TCHAR *name, FlarmId *buffer, unsigned max) const$/;"	f	class:FlarmNameDatabase
Get	IO/Async/AsioThread.hpp	/^  auto &Get() {$/;"	f	class:final
Get	NMEA/ClimbHistory.hpp	/^  double Get(unsigned speed) const {$/;"	f	class:ClimbHistory
Get	Net/HTTP/FormData.hpp	/^    const struct curl_httppost *Get() const {$/;"	f	class:Net::MultiPartFormData
Get	Profile/Map.hpp	/^  bool Get(const char *key, BasicStringBuffer<TCHAR, max> &value) const {$/;"	f	class:ProfileMap
Get	Profile/Map.hpp	/^  const char *Get(const char *key, const char *default_value=nullptr) const {$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, bool &value) const$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, double &value) const$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, int &value) const$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, short &value) const$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, uint16_t &value) const$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, uint8_t &value) const$/;"	f	class:ProfileMap
Get	Profile/NumericValue.cpp	/^ProfileMap::Get(const char *key, unsigned &value) const$/;"	f	class:ProfileMap
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, TCHAR *value, std::size_t max_size)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, bool &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, const char *default_value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, double &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, int &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, short &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, uint16_t &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, uint8_t &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.cpp	/^Profile::Get(const char *key, unsigned &value)$/;"	f	class:Profile
Get	Profile/ProfileMap.hpp	/^  Get(const char *key, BasicStringBuffer<TCHAR, max> &value)$/;"	f	namespace:Profile
Get	Profile/StringValue.cpp	/^ProfileMap::Get(const char *key, TCHAR *value, size_t max_size) const$/;"	f	class:ProfileMap
Get	Screen/Custom/Cache.cpp	/^TextCache::Get(const Font &font, const char *text)$/;"	f	class:TextCache
Get	Screen/Custom/LibTiff.cpp	/^  TIFF *Get() {$/;"	f	class:TiffLoader
Get	Screen/Custom/Reference.hpp	/^  Window *Get(const ContainerWindow &root) const {$/;"	f	class:WindowReference
Get	Terrain/RasterBuffer.hpp	/^  TerrainHeight Get(unsigned x, unsigned y) const {$/;"	f	class:RasterBuffer
Get	Util/AllocatedGrid.hxx	/^	const_reference Get(unsigned x, unsigned y) const {$/;"	f	class:AllocatedGrid
Get	Util/AllocatedGrid.hxx	/^	reference Get(unsigned x, unsigned y) {$/;"	f	class:AllocatedGrid
Get	Util/Cache.hxx	/^	const Data *Get(K &&key) {$/;"	f	class:Cache
Get	Util/Manual.hxx	/^	T &Get() {$/;"	f	class:Manual
Get	Util/Manual.hxx	/^	const T &Get() const {$/;"	f	class:Manual
Get	Util/RadixTree.hpp	/^    T *Get(const TCHAR *key) {$/;"	f	struct:RadixTree::Node
Get	Util/RadixTree.hpp	/^    const T *Get(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node
Get	Util/RadixTree.hpp	/^  T &Get(const TCHAR *key, T &default_value) {$/;"	f	class:RadixTree
Get	Util/RadixTree.hpp	/^  const T &Get(const TCHAR *key, const T &default_value) const {$/;"	f	class:RadixTree
Get	Widget/ManagedWidget.hpp	/^  Widget *Get() {$/;"	f	class:ManagedWidget
GetAATTaskPoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetAATTaskPoint(unsigned TPindex) const$/;"	f	class:OrderedTask
GetALSADeviceName	Audio/ALSAEnv.cpp	/^const char *GetALSADeviceName()$/;"	f	namespace:ALSAEnv
GetALSALatency	Audio/ALSAEnv.cpp	/^unsigned GetALSALatency()$/;"	f	namespace:ALSAEnv
GetAWP	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetAWP(const TaskAccessor &task)$/;"	f	class:TaskAutoPilot
GetAbortRange	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::GetAbortRange(const AircraftState &state,$/;"	f	class:AbortTask
GetAccumulator	Math/Histogram.hpp	/^  unsigned GetAccumulator() const {$/;"	f	class:Histogram
GetAckDay	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::GetAckDay(const AbstractAirspace &airspace) const$/;"	f	class:ProtectedAirspaceWarningManager
GetAckDay	Engine/Airspace/AirspaceWarning.hpp	/^  bool GetAckDay() const {$/;"	f	class:AirspaceWarning
GetAckDay	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetAckDay(const AbstractAirspace &airspace) const$/;"	f	class:AirspaceWarningManager
GetAcknowledge	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetAcknowledge() const {$/;"	f	struct:VegaSwitchState
GetActiveIndex	Engine/Task/Ordered/OrderedTask.hpp	/^  unsigned GetActiveIndex() const {$/;"	f	class:final
GetActiveIndex	Engine/Task/Unordered/AbortTask.hpp	/^  unsigned GetActiveIndex() const {$/;"	f	class:AbortTask
GetActiveState	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  ActiveState GetActiveState() const {$/;"	f	class:OrderedTaskPoint
GetActiveTask	Engine/Task/TaskManager.hpp	/^  const AbstractTask *GetActiveTask() const {$/;"	f	class:TaskManager
GetActiveTaskPoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetActiveTaskPoint() const$/;"	f	class:OrderedTask
GetActiveTaskPoint	Engine/Task/TaskManager.cpp	/^TaskManager::GetActiveTaskPoint() const$/;"	f	class:TaskManager
GetActiveTaskPoint	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::GetActiveTaskPoint() const$/;"	f	class:AbortTask
GetActiveTaskPoint	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::GetActiveTaskPoint() const$/;"	f	class:GotoTask
GetActiveTaskPointIndex	Engine/Task/AbstractTask.hpp	/^  unsigned GetActiveTaskPointIndex() const {$/;"	f	class:AbstractTask
GetActiveTaskPointIndex	Engine/Task/TaskManager.cpp	/^TaskManager::GetActiveTaskPointIndex() const$/;"	f	class:TaskManager
GetActiveTaskPointIndex	Replay/TaskAccessor.hpp	/^  unsigned GetActiveTaskPointIndex() const {$/;"	f	class:TaskAccessor
GetActiveTaskPointLocation	Replay/TaskAccessor.hpp	/^  GeoPoint GetActiveTaskPointLocation() const {$/;"	f	class:TaskAccessor
GetActiveTrafficCount	FLARM/List.hpp	/^  unsigned GetActiveTrafficCount() const {$/;"	f	struct:TrafficList
GetActiveWaypoint	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::GetActiveWaypoint() const$/;"	f	class:ProtectedTaskManager
GetAirbrakeLocked	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetAirbrakeLocked() const {$/;"	f	struct:VegaSwitchState
GetAirbrakeNotLocked	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetAirbrakeNotLocked() const {$/;"	f	struct:VegaSwitchState
GetAirspace	Engine/Airspace/Airspace.hpp	/^  AbstractAirspace &GetAirspace() const {$/;"	f	class:final
GetAirspace	Engine/Airspace/AirspaceSorter.hpp	/^  const AbstractAirspace &GetAirspace() const {$/;"	f	class:AirspaceSelectInfo
GetAirspace	Engine/Airspace/AirspaceWarning.hpp	/^  const AbstractAirspace &GetAirspace() const {$/;"	f	class:AirspaceWarning
GetAirspaceColor	Profile/AirspaceConfig.cpp	/^GetAirspaceColor(const ProfileMap &map, unsigned i, RGB8Color &color)$/;"	f	file:
GetAirspaceWarnings	Components.cpp	/^GetAirspaceWarnings()$/;"	f
GetAirspaceWarnings	Computer/GlideComputer.hpp	/^  ProtectedAirspaceWarningManager &GetAirspaceWarnings() {$/;"	f	class:GlideComputer
GetAirspaceWarnings	Computer/GlideComputer.hpp	/^  const ProtectedAirspaceWarningManager &GetAirspaceWarnings() const {$/;"	f	class:GlideComputer
GetAirspaces	Renderer/AirspaceLabelRenderer.hpp	/^  const Airspaces *GetAirspaces() const {$/;"	f	class:AirspaceLabelRenderer
GetAirspaces	Renderer/AirspaceRenderer.hpp	/^  const Airspaces *GetAirspaces() const {$/;"	f	class:AirspaceRenderer
GetAllocatedSize	Screen/OpenGL/Texture.hpp	/^  const PixelSize &GetAllocatedSize() const {$/;"	f	class:GLTexture
GetAllowedCharacters	Form/DataField/Prefix.hpp	/^  const TCHAR *GetAllowedCharacters() const {$/;"	f	class:final
GetAllowedCharactersFunction	Form/DataField/Prefix.hpp	/^  const AllowedCharactersFunction &GetAllowedCharactersFunction() const {$/;"	f	class:final
GetAlternate	Engine/Task/Unordered/AbortTask.hpp	/^  const UnorderedTaskPoint &GetAlternate(unsigned i) const {$/;"	f	class:AbortTask
GetAlternateAltitudeUnit	Formatter/UserUnits.cpp	/^GetAlternateAltitudeUnit(Unit unit)$/;"	f	file:
GetAlternates	Engine/Task/TaskManager.cpp	/^TaskManager::GetAlternates() const$/;"	f	class:TaskManager
GetAlternates	Engine/Task/Unordered/AlternateTask.hpp	/^  const AlternateList &GetAlternates() const {$/;"	f	class:final
GetAltitude	Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::GetAltitude(const AltitudeState &state) const$/;"	f	class:AirspaceAltitude
GetAltitude	Engine/Trace/Point.hpp	/^  double GetAltitude() const {$/;"	f	class:TracePoint
GetAltitudeColor	Look/TrailLook.cpp	/^GetAltitudeColor(short ramp_h) {$/;"	f	file:
GetAltitudeColorIndex	Renderer/TrailRenderer.cpp	/^GetAltitudeColorIndex(double alt, double min_alt, double max_alt)$/;"	f	file:
GetAltitudeName	Units/Units.cpp	/^Units::GetAltitudeName()$/;"	f	class:Units
GetAltitudeUnit	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetAltitudeUnit() const {$/;"	f	struct:CAI302::Pilot
GetAltitudeUnit	Profile/UnitsConfig.cpp	/^GetAltitudeUnit(const ProfileMap &map, const char *key, const char *legacy_key,$/;"	f	file:
GetAngle	Geo/Flat/FlatLine.cpp	/^FlatLine::GetAngle() const$/;"	f	class:FlatLine
GetAngle	Math/FastRotation.hpp	/^  Angle GetAngle() const {$/;"	f	class:FastIntegerRotation
GetAngle	Math/FastRotation.hpp	/^  Angle GetAngle() const {$/;"	f	class:FastRotation
GetAngleValue	Form/DigitEntry.cpp	/^DigitEntry::GetAngleValue() const$/;"	f	class:DigitEntry
GetAnyAltitude	NMEA/Info.hpp	/^  std::pair<bool, double> GetAnyAltitude() const {$/;"	f	struct:NMEAInfo
GetAppendSerial	Engine/Trace/Trace.hpp	/^  const Serial &GetAppendSerial() const {$/;"	f	class:Trace
GetApproximateScale	Geo/Flat/FlatProjection.hpp	/^  double GetApproximateScale() const {$/;"	f	class:FlatProjection
GetArea	Repository/AvailableFile.hpp	/^  const char *GetArea() const {$/;"	f	struct:AvailableFile
GetArrivalAltitude	Engine/GlideSolvers/GlideResult.hpp	/^  double GetArrivalAltitude() const {$/;"	f	struct:GlideResult
GetArrivalAltitude	Engine/GlideSolvers/GlideResult.hpp	/^  double GetArrivalAltitude(double start_altitude) const {$/;"	f	struct:GlideResult
GetArrivalAltitudeWithDrift	Engine/GlideSolvers/GlideResult.hpp	/^  double GetArrivalAltitudeWithDrift(double start_altitude) const {$/;"	f	struct:GlideResult
GetAsBoolean	Form/DataField/Boolean.hpp	/^  bool GetAsBoolean() const {$/;"	f	class:final
GetAsDisplayString	Form/DataField/Angle.cpp	/^AngleDataField::GetAsDisplayString() const$/;"	f	class:AngleDataField
GetAsDisplayString	Form/DataField/Base.cpp	/^DataField::GetAsDisplayString() const$/;"	f	class:DataField
GetAsDisplayString	Form/DataField/Enum.cpp	/^DataFieldEnum::GetAsDisplayString() const$/;"	f	class:DataFieldEnum
GetAsDisplayString	Form/DataField/File.cpp	/^FileDataField::GetAsDisplayString() const$/;"	f	class:FileDataField
GetAsDisplayString	Form/DataField/Float.cpp	/^DataFieldFloat::GetAsDisplayString() const$/;"	f	class:DataFieldFloat
GetAsDisplayString	Form/DataField/Integer.cpp	/^DataFieldInteger::GetAsDisplayString() const$/;"	f	class:DataFieldInteger
GetAsDisplayString	Form/DataField/Password.cpp	/^PasswordDataField::GetAsDisplayString() const$/;"	f	class:PasswordDataField
GetAsDisplayString	Form/DataField/Prefix.cpp	/^PrefixDataField::GetAsDisplayString() const$/;"	f	class:PrefixDataField
GetAsDisplayString	Form/DataField/RoughTime.cpp	/^RoughTimeDataField::GetAsDisplayString() const$/;"	f	class:RoughTimeDataField
GetAsDisplayString	Form/DataField/Time.cpp	/^DataFieldTime::GetAsDisplayString() const$/;"	f	class:DataFieldTime
GetAsFixed	Form/DataField/Float.hpp	/^  double GetAsFixed() const {$/;"	f	class:final
GetAsInteger	Form/DataField/Angle.cpp	/^AngleDataField::GetAsInteger() const$/;"	f	class:AngleDataField
GetAsInteger	Form/DataField/Base.cpp	/^DataField::GetAsInteger() const$/;"	f	class:DataField
GetAsInteger	Form/DataField/Boolean.cpp	/^DataFieldBoolean::GetAsInteger() const$/;"	f	class:DataFieldBoolean
GetAsInteger	Form/DataField/Enum.cpp	/^DataFieldEnum::GetAsInteger() const$/;"	f	class:DataFieldEnum
GetAsInteger	Form/DataField/File.cpp	/^FileDataField::GetAsInteger() const$/;"	f	class:FileDataField
GetAsInteger	Form/DataField/Float.cpp	/^DataFieldFloat::GetAsInteger() const$/;"	f	class:DataFieldFloat
GetAsInteger	Form/DataField/Integer.cpp	/^DataFieldInteger::GetAsInteger() const$/;"	f	class:DataFieldInteger
GetAsInteger	Form/DataField/RoughTime.cpp	/^RoughTimeDataField::GetAsInteger() const$/;"	f	class:RoughTimeDataField
GetAsString	Form/DataField/Angle.cpp	/^AngleDataField::GetAsString() const$/;"	f	class:AngleDataField
GetAsString	Form/DataField/Base.cpp	/^DataField::GetAsString() const$/;"	f	class:DataField
GetAsString	Form/DataField/Boolean.cpp	/^DataFieldBoolean::GetAsString() const$/;"	f	class:DataFieldBoolean
GetAsString	Form/DataField/Enum.cpp	/^DataFieldEnum::GetAsString() const$/;"	f	class:DataFieldEnum
GetAsString	Form/DataField/File.cpp	/^FileDataField::GetAsString() const$/;"	f	class:FileDataField
GetAsString	Form/DataField/Float.cpp	/^DataFieldFloat::GetAsString() const$/;"	f	class:DataFieldFloat
GetAsString	Form/DataField/GeoPoint.cpp	/^GeoPointDataField::GetAsString() const$/;"	f	class:GeoPointDataField
GetAsString	Form/DataField/Integer.cpp	/^DataFieldInteger::GetAsString() const$/;"	f	class:DataFieldInteger
GetAsString	Form/DataField/RoughTime.cpp	/^RoughTimeDataField::GetAsString() const$/;"	f	class:RoughTimeDataField
GetAsString	Form/DataField/String.cpp	/^DataFieldString::GetAsString() const$/;"	f	class:DataFieldString
GetAsString	Form/DataField/Time.cpp	/^DataFieldTime::GetAsString() const$/;"	f	class:DataFieldTime
GetAscentHeight	Screen/Font.hpp	/^  unsigned GetAscentHeight() const {$/;"	f	class:Font
GetAttribLocation	Screen/OpenGL/Program.hpp	/^  GLint GetAttribLocation(const char *name) const {$/;"	f	class:GLProgram
GetAttribute	XML/DataNode.cpp	/^ConstDataNode::GetAttribute(const TCHAR *name, Angle &value) const$/;"	f	class:ConstDataNode
GetAttribute	XML/DataNode.cpp	/^ConstDataNode::GetAttribute(const TCHAR *name, bool &value) const$/;"	f	class:ConstDataNode
GetAttribute	XML/DataNode.cpp	/^ConstDataNode::GetAttribute(const TCHAR *name, double &value) const$/;"	f	class:ConstDataNode
GetAttribute	XML/DataNode.cpp	/^ConstDataNode::GetAttribute(const TCHAR *name, int &value) const$/;"	f	class:ConstDataNode
GetAttribute	XML/DataNode.cpp	/^ConstDataNode::GetAttribute(const TCHAR *name, unsigned &value) const$/;"	f	class:ConstDataNode
GetAttribute	XML/DataNodeXML.cpp	/^ConstDataNodeXML::GetAttribute(const TCHAR *name) const$/;"	f	class:ConstDataNodeXML
GetAttribute	XML/Node.cpp	/^XMLNode::GetAttribute(const TCHAR *name) const$/;"	f	class:XMLNode
GetAttributeRoughTime	XML/DataNode.cpp	/^ConstDataNode::GetAttributeRoughTime(const TCHAR *name) const$/;"	f	class:ConstDataNode
GetAttributeRoughTimeSpan	XML/DataNode.cpp	/^ConstDataNode::GetAttributeRoughTimeSpan(const TCHAR *start_name,$/;"	f	class:ConstDataNode
GetAutoZoom	Gauge/BigTrafficWidget.cpp	/^  bool GetAutoZoom() const {$/;"	f	class:FlarmTrafficControl
GetAutoZoom	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::GetAutoZoom() const$/;"	f	class:TrafficWidget
GetAverage	Computer/ClimbAverageCalculator.cpp	/^ClimbAverageCalculator::GetAverage(double time, double altitude,$/;"	f	class:ClimbAverageCalculator
GetAverage	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::LiftPoints::GetAverage() const$/;"	f	class:ThermalAssistantRenderer::LiftPoints
GetAverage	MapWindow/GlueMapWindowDisplayMode.cpp	/^OffsetHistory::GetAverage() const$/;"	f	class:OffsetHistory
GetAverageDeltaDistance	Engine/Trace/Trace.hpp	/^  unsigned GetAverageDeltaDistance() const {$/;"	f	class:Trace
GetAverageDeltaTime	Engine/Trace/Trace.hpp	/^  unsigned GetAverageDeltaTime() const {$/;"	f	class:Trace
GetAverageSpeed	Engine/GlideSolvers/GlidePolar.cpp	/^double GlidePolar::GetAverageSpeed() const$/;"	f	class:GlidePolar
GetAverageY	Math/LeastSquares.hpp	/^  double GetAverageY() const {$/;"	f	class:LeastSquares
GetBack	Engine/Trace/Trace.hpp	/^  TraceDelta &GetBack() {$/;"	f	class:Trace
GetBackgroundColor	Look/DialogLook.hpp	/^    Color GetBackgroundColor(bool is_selected, bool is_focused,$/;"	f	struct:DialogLook::__anon20
GetBackgroundColor	Screen/GDI/Canvas.hpp	/^  Color GetBackgroundColor() const {$/;"	f	class:Canvas
GetBackgroundColor	Screen/Memory/Canvas.hpp	/^  Color GetBackgroundColor() const {$/;"	f	class:Canvas
GetBackgroundColor	Screen/OpenGL/Canvas.hpp	/^  Color GetBackgroundColor() const {$/;"	f	class:Canvas
GetBackupPairs	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::GetBackupPairs(const SearchPointVector &spv,$/;"	f	class:AirspaceRoute
GetBallast	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBallast() const {$/;"	f	class:GlidePolar
GetBallastLitres	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetBallastLitres() const$/;"	f	class:GlidePolar
GetBallastRatio	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBallastRatio() const {$/;"	f	class:GlidePolar
GetBase	Engine/Airspace/AbstractAirspace.hpp	/^  const AirspaceAltitude &GetBase() const { return altitude_base; }$/;"	f	class:AbstractAirspace
GetBase	OS/Path.cpp	/^Path::GetBase() const$/;"	f	class:Path
GetBase	OS/Path.hpp	/^  Path GetBase() const {$/;"	f	class:AllocatedPath
GetBaseAltitude	Engine/Airspace/AbstractAirspace.hpp	/^  double GetBaseAltitude(const AltitudeState &state) const {$/;"	f	class:AbstractAirspace
GetBaseElevation	Engine/Task/Points/TaskWaypoint.hpp	/^  double GetBaseElevation() const {$/;"	f	class:TaskWaypoint
GetBaudRate	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetBaudRate(unsigned &baud_id, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetBaudRateIndex	Device/Driver/Volkslogger/Protocol.cpp	/^GetBaudRateIndex(unsigned baud_rate)$/;"	f	file:
GetBaudrate	Device/Port/AndroidPort.cpp	/^AndroidPort::GetBaudrate() const$/;"	f	class:AndroidPort
GetBaudrate	Device/Port/DumpPort.cpp	/^DumpPort::GetBaudrate() const$/;"	f	class:DumpPort
GetBaudrate	Device/Port/K6BtPort.cpp	/^K6BtPort::GetBaudrate() const$/;"	f	class:K6BtPort
GetBaudrate	Device/Port/NullPort.cpp	/^NullPort::GetBaudrate() const$/;"	f	class:NullPort
GetBaudrate	Device/Port/SerialPort.cpp	/^SerialPort::GetBaudrate() const$/;"	f	class:SerialPort
GetBaudrate	Device/Port/TTYPort.cpp	/^TTYPort::GetBaudrate() const$/;"	f	class:TTYPort
GetBearing	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::GetBearing() const$/;"	f	class:AircraftStateFilter
GetBearing	TeamCode/TeamCode.cpp	/^TeamCode::GetBearing() const$/;"	f	class:TeamCode
GetBestAlternateID	Input/TaskEventObserver.cpp	/^GetBestAlternateID(const TaskManager &tm)$/;"	f	file:
GetBestDistancePrecision	Formatter/Units.cpp	/^GetBestDistancePrecision(double value, Unit unit, double threshold = 100)$/;"	f	file:
GetBestDistanceUnit	Formatter/Units.cpp	/^GetBestDistanceUnit(double value, Unit unit, double threshold = 2500)$/;"	f	file:
GetBestGlideRatioSpeed	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetBestGlideRatioSpeed(double head_wind) const$/;"	f	class:GlidePolar
GetBestIndex	Engine/Contest/ContestStatistics.hpp	/^  int GetBestIndex(const int solution_index) const {$/;"	f	struct:ContestStatistics
GetBestLD	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBestLD() const$/;"	f	class:GlidePolar
GetBigIcon	Topography/TopographyFile.hpp	/^  ResourceId GetBigIcon() const {$/;"	f	class:TopographyFile
GetBindAPI	Screen/EGL/TopCanvas.cpp	/^GetBindAPI()$/;"	f	file:
GetBlock	Device/Driver/Volkslogger/dbbconv.h	/^  const void *GetBlock(size_t offset=0) const {$/;"	f	class:DBB
GetBlock	Device/Driver/Volkslogger/dbbconv.h	/^  void *GetBlock(size_t offset=0) {$/;"	f	class:DBB
GetBorder	InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::GetBorder(InfoBoxSettings::Geometry geometry, bool landscape,$/;"	f	class:InfoBoxLayout
GetBottom	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetBottom() const {$/;"	f	struct:FlatBoundingBox
GetBottomRight	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr FlatGeoPoint GetBottomRight() const {$/;"	f	struct:FlatBoundingBox
GetBottomWidgetRect	MainWindow.cpp	/^GetBottomWidgetRect(const PixelRect &rc, const Widget *bottom_widget)$/;"	f	file:
GetBoundary	Engine/Task/ObservationZones/AnnularSectorZone.cpp	/^AnnularSectorZone::GetBoundary() const$/;"	f	class:AnnularSectorZone
GetBoundary	Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::GetBoundary() const$/;"	f	class:CylinderZone
GetBoundary	Engine/Task/ObservationZones/KeyholeZone.cpp	/^KeyholeZone::GetBoundary() const$/;"	f	class:KeyholeZone
GetBoundary	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::GetBoundary() const$/;"	f	class:ObservationZoneClient
GetBoundary	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::GetBoundary() const$/;"	f	class:SectorZone
GetBoundaryPoints	Engine/Task/Points/SampledTaskPoint.hpp	/^  const SearchPointVector &GetBoundaryPoints() const {$/;"	f	class:SampledTaskPoint
GetBoundingBox	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::GetBoundingBox(const FlatProjection &projection)$/;"	f	class:AbstractAirspace
GetBounds	Geo/Quadrilateral.cpp	/^GeoQuadrilateral::GetBounds() const$/;"	f	class:GeoQuadrilateral
GetBounds	Terrain/RasterMap.hpp	/^  const GeoBounds &GetBounds() const {$/;"	f	class:RasterMap
GetBounds	Terrain/RasterRenderer.hpp	/^  const GeoBounds &GetBounds() const {$/;"	f	class:RasterRenderer
GetBounds	Terrain/RasterTileCache.hpp	/^  const GeoBounds &GetBounds() const {$/;"	f	class:RasterTileCache
GetBuffer	Screen/RawBitmap.hpp	/^  RawColor *GetBuffer() {$/;"	f	class:final
GetBuffer	Screen/RawBitmap.hpp	/^  const RawColor *GetBuffer() const {$/;"	f	class:final
GetBugs	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetBugs() const {$/;"	f	class:GlidePolar
GetButton	Dialogs/Settings/dlgConfiguration.cpp	/^  Button &GetButton(unsigned number) {$/;"	f	class:final
GetButtonCaption	Widget/TabWidget.cpp	/^TabWidget::GetButtonCaption(unsigned i) const$/;"	f	class:TabWidget
GetButtonIndexAt	Form/TabDisplay.cpp	/^TabDisplay::GetButtonIndexAt(PixelPoint p) const$/;"	f	class:TabDisplay
GetButtonLook	Dialogs/WidgetDialog.hpp	/^  const ButtonLook &GetButtonLook() const {$/;"	f	class:WidgetDialog
GetButtonPanel	Widget/ButtonPanelWidget.hpp	/^  ButtonPanel &GetButtonPanel() {$/;"	f	class:ButtonPanelWidget
GetButtonPosition	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::GetButtonPosition(MenuTabIndex i) const$/;"	f	class:TabMenuDisplay
GetButtonPosition	Menu/MenuBar.cpp	/^GetButtonPosition(unsigned i, PixelRect rc)$/;"	f	file:
GetButtonRect	Dialogs/StartupDialog.cpp	/^  PixelRect GetButtonRect(PixelRect rc) {$/;"	f	class:final	file:
GetByGroup	Units/Settings.cpp	/^UnitSetting::GetByGroup(UnitGroup group) const$/;"	f	class:UnitSetting
GetCanvas	Renderer/ChartRenderer.hpp	/^  Canvas& GetCanvas() { return canvas; }$/;"	f	class:ChartRenderer
GetCapitalHeight	Screen/Font.hpp	/^  unsigned GetCapitalHeight() const {$/;"	f	class:Font
GetCapitalHeight	Screen/FreeType/Font.cpp	/^GetCapitalHeight(FT_Face face)$/;"	f	file:
GetCaption	Form/Form.hpp	/^  const TCHAR *GetCaption() const {$/;"	f	class:WndForm
GetCaption	Form/TabDisplay.hpp	/^  const TCHAR *GetCaption(unsigned i) const {$/;"	f	class:final
GetCaption	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::GetCaption(TCHAR buffer[], size_t size) const$/;"	f	class:TabMenuDisplay
GetCaption	InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::GetCaption(Type type)$/;"	f	class:InfoBoxFactory
GetCaption	Renderer/SymbolButtonRenderer.hpp	/^  StaticString<64>::const_pointer GetCaption() const {$/;"	f	class:SymbolButtonRenderer
GetCaption	Renderer/TextButtonRenderer.hpp	/^  StaticString<64>::const_pointer GetCaption() const {$/;"	f	class:TextButtonRenderer
GetCatchCallback	Lua/Catch.cpp	/^GetCatchCallback(lua_State *L)$/;"	f	file:
GetCeiling	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetCeiling() const$/;"	f	class:ThermalBand
GetCenter	Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::GetCenter() const$/;"	f	class:AirspacePolygon
GetCenter	Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::GetCenter() const$/;"	f	class:FlatBoundingBox
GetCenter	Geo/Flat/FlatProjection.hpp	/^  const GeoPoint &GetCenter() const {$/;"	f	class:FlatProjection
GetCenter	Geo/GeoBounds.cpp	/^GeoBounds::GetCenter() const$/;"	f	class:GeoBounds
GetCenter	Topography/TopographyFile.hpp	/^  const GeoPoint &GetCenter() const {$/;"	f	class:TopographyFile
GetCentralMeridian	Geo/UTM.cpp	/^GetCentralMeridian(unsigned zone_number)$/;"	f	file:
GetChanged	Dialogs/WidgetDialog.hpp	/^  bool GetChanged() const {$/;"	f	class:WidgetDialog
GetChar	Device/Port/Port.cpp	/^Port::GetChar()$/;"	f	class:Port
GetCharacter	Event/SDL/Event.hpp	/^  unsigned GetCharacter(size_t characterIdx) const {$/;"	f	struct:Event
GetCharacter	Event/Shared/Event.hpp	/^  unsigned GetCharacter(size_t characterIdx) const {$/;"	f	struct:Event
GetCharacter	Event/Windows/Event.hpp	/^  unsigned GetCharacter(size_t characterIdx) const {$/;"	f	struct:Event
GetCharacter	Form/CharacterButton.hpp	/^  unsigned GetCharacter() const {$/;"	f	class:CharacterButton
GetCharacterCount	Event/SDL/Event.hpp	/^  size_t GetCharacterCount() const {$/;"	f	struct:Event
GetCharacterCount	Event/Shared/Event.hpp	/^  size_t GetCharacterCount() const {$/;"	f	struct:Event
GetCharacterCount	Event/Windows/Event.hpp	/^  size_t GetCharacterCount() const {$/;"	f	struct:Event
GetChartRect	Renderer/ChartRenderer.hpp	/^  const PixelRect GetChartRect() const {$/;"	f	class:ChartRenderer
GetChildNamed	XML/DataNodeXML.cpp	/^ConstDataNodeXML::GetChildNamed(const TCHAR *name) const$/;"	f	class:ConstDataNodeXML
GetChildNode	XML/Node.cpp	/^XMLNode::GetChildNode(const TCHAR *name) const$/;"	f	class:XMLNode
GetCircling	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetCircling() const {$/;"	f	struct:VegaSwitchState
GetClass	Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClass(AirspaceClass airspace_class)$/;"	f	class:AirspaceFormatter
GetClass	Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClass(const AbstractAirspace &airspace)$/;"	f	class:AirspaceFormatter
GetClassShort	Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClassShort(AirspaceClass airspace_class)$/;"	f	class:AirspaceFormatter
GetClassShort	Formatter/AirspaceFormatter.cpp	/^AirspaceFormatter::GetClassShort(const AbstractAirspace &airspace)$/;"	f	class:AirspaceFormatter
GetClearance	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::GetClearance(const FlatProjection &projection) const$/;"	f	class:AbstractAirspace
GetClientAreaWindow	Form/Form.hpp	/^  ContainerWindow &GetClientAreaWindow() {$/;"	f	class:WndForm
GetClimbRate	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetClimbRate() const {$/;"	f	class:AirspaceAircraftPerformance
GetClimbRate	Engine/Util/AircraftStateFilter.hpp	/^  inline double GetClimbRate() const {$/;"	f	class:AircraftStateFilter
GetCoPilot	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetCoPilot(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetCode	IO/ZlibError.hxx	/^	int GetCode() const {$/;"	f	class:final
GetCode	TeamCode/TeamCode.hpp	/^  const TCHAR *GetCode() const {$/;"	f	class:TeamCode
GetCodeString	FLARM/Error.hpp	/^  const TCHAR *GetCodeString() const {$/;"	f
GetCodeT	Weather/NOAAStore.cpp	/^NOAAStore::Item::GetCodeT() const$/;"	f	class:NOAAStore::Item
GetCodeT	Weather/NOAAStore.hpp	/^    const char *GetCodeT() const {$/;"	f	struct:NOAAStore::Item
GetCoefficients	Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients GetCoefficients() const {$/;"	f	class:GlidePolar
GetColor	FLARM/TrafficDatabases.hpp	/^  FlarmColor GetColor(FlarmId id) const$/;"	f	struct:TrafficDatabases
GetColor	Look/InfoBoxLook.hpp	/^  Color GetColor(int i, Color default_color) const {$/;"	f	struct:InfoBoxLook
GetColor	Look/TrailLook.cpp	/^GetColor(TrailSettings::Type type, short ramp_h)$/;"	f	file:
GetColor	Profile/Screen.cpp	/^ProfileMap::GetColor(const char *key, RGB8Color &color) const$/;"	f	class:ProfileMap
GetColor	Screen/Brush.hpp	/^  const Color GetColor() const { return color; }$/;"	f	class:Brush
GetColor	Screen/Pen.hpp	/^  GetColor() const$/;"	f	class:Pen
GetColor	Topography/TopographyFile.hpp	/^  Color GetColor() const {$/;"	f	class:TopographyFile
GetColumnWidth	Form/GridView.hpp	/^  unsigned GetColumnWidth() const {$/;"	f	class:GridView
GetCommentColor	Look/InfoBoxLook.hpp	/^  Color GetCommentColor(int i) const {$/;"	f	struct:InfoBoxLook
GetCommonStats	Engine/Task/TaskManager.hpp	/^  const CommonStats& GetCommonStats() const {$/;"	f	class:TaskManager
GetCompatibleDC	Screen/GDI/Canvas.hpp	/^  HDC GetCompatibleDC() {$/;"	f	class:Canvas
GetCompetitionClass	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetCompetitionClass(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetCompetitionId	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetCompetitionId(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetCompileStatus	Screen/OpenGL/Program.hpp	/^  GLint GetCompileStatus() const {$/;"	f	class:GLShader
GetCompositor	Event/Poll/Queue.hpp	/^  struct wl_compositor *GetCompositor() {$/;"	f	class:final
GetCompositor	Event/Poll/WaylandQueue.hpp	/^  struct wl_compositor *GetCompositor() {$/;"	f	class:final
GetComputerSettings	Blackboard/ComputerSettingsBlackboard.hpp	/^  const ComputerSettings& GetComputerSettings() const {$/;"	f	class:ComputerSettingsBlackboard
GetComputerSettings	Interface.hpp	/^  static inline const ComputerSettings& GetComputerSettings() {$/;"	f	namespace:CommonInterface
GetComputerSettings	MapWindow/MapWindowBlackboard.hpp	/^  const ComputerSettings &GetComputerSettings() const {$/;"	f	class:MapWindowBlackboard
GetComputerSettings	MapWindow/TargetMapWindow.cpp	/^GetComputerSettings()$/;"	f	file:
GetComputerSettings	Menu/ExpandMacros.cpp	/^GetComputerSettings()$/;"	f	file:
GetConfig	Device/Descriptor.hpp	/^  const DeviceConfig &GetConfig() const {$/;"	f	class:final
GetConfig	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetConfig(const char *setting, TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetConfig	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetConfig(const char *setting, char *buffer, size_t length,$/;"	f	class:FlarmDevice
GetConfig	Dialogs/Device/DeviceEditWidget.hpp	/^  const DeviceConfig &GetConfig() const {$/;"	f	class:DeviceEditWidget
GetConfig	Engine/Airspace/AirspaceWarningManager.hpp	/^  const AirspaceWarningConfig &GetConfig() const {$/;"	f	class:AirspaceWarningManager
GetConfiguredLayout	PageActions.cpp	/^PageActions::GetConfiguredLayout()$/;"	f	class:PageActions
GetConstraints	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskFactoryConstraints &GetConstraints() const {$/;"	f	class:AbstractTaskFactory
GetContainer	Widget/ContainerWidget.hpp	/^  ContainerWindow &GetContainer() {$/;"	f	class:ContainerWidget
GetContentLength	Net/HTTP/Easy.hxx	/^	int64_t GetContentLength() const {$/;"	f	class:CurlEasy
GetContents	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxFactory::Type GetContents(unsigned i) const {$/;"	f	class:final
GetContest	Computer/TraceComputer.hpp	/^  const Trace &GetContest() const {$/;"	f	class:TraceComputer
GetControl	Widget/RowFormWidget.hpp	/^    WndProperty &GetControl() {$/;"	f	struct:RowFormWidget::Row
GetControl	Widget/RowFormWidget.hpp	/^    const WndProperty &GetControl() const {$/;"	f	struct:RowFormWidget::Row
GetControl	Widget/RowFormWidget.hpp	/^  WndProperty &GetControl(unsigned i) {$/;"	f	class:RowFormWidget
GetControl	Widget/RowFormWidget.hpp	/^  const WndProperty &GetControl(unsigned i) const {$/;"	f	class:RowFormWidget
GetCorrectedWidth	Screen/RawBitmap.hpp	/^  unsigned GetCorrectedWidth() const {$/;"	f	class:final
GetCount	Math/XYDataStore.hpp	/^  unsigned GetCount() const {$/;"	f	class:XYDataStore
GetCovAbsAbs	Math/KalmanFilter1d.hpp	/^  double GetCovAbsAbs() const { return p_abs_abs_; }$/;"	f	class:KalmanFilter1d
GetCovAbsAbs	Math/SelfTimingKalmanFilter1d.hpp	/^  double GetCovAbsAbs() const { return filter_.GetCovAbsAbs(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetCovAbsVel	Math/KalmanFilter1d.hpp	/^  double GetCovAbsVel() const { return p_abs_vel_; }$/;"	f	class:KalmanFilter1d
GetCovAbsVel	Math/SelfTimingKalmanFilter1d.hpp	/^  double GetCovAbsVel() const { return filter_.GetCovAbsVel(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetCovVelVel	Math/KalmanFilter1d.hpp	/^  double GetCovVelVel() const { return p_vel_vel_; }$/;"	f	class:KalmanFilter1d
GetCovVelVel	Math/SelfTimingKalmanFilter1d.hpp	/^  double GetCovVelVel() const { return filter_.GetCovVelVel(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetCovXY	Math/LeastSquares.hpp	/^  double GetCovXY() const {$/;"	f	class:LeastSquares
GetCruiseDescent	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetCruiseDescent() const {$/;"	f	class:AirspaceAircraftPerformance
GetCruiseEfficiency	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetCruiseEfficiency() const {$/;"	f	class:GlidePolar
GetCruiseSpeed	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetCruiseSpeed() const {$/;"	f	class:AirspaceAircraftPerformance
GetCuSonde	Computer/CuComputer.hpp	/^  const CuSonde &GetCuSonde() const {$/;"	f	class:CuComputer
GetCuSonde	Computer/GlideComputer.hpp	/^  const CuSonde &GetCuSonde() const {$/;"	f	class:GlideComputer
GetCurrentCPU	Screen/StopWatch.hpp	/^  static cpu_stamp_t GetCurrentCPU() {$/;"	f	class:ScreenStopWatch
GetCurrentClock	Screen/StopWatch.hpp	/^  static clock_stamp_t GetCurrentClock() {$/;"	f	class:ScreenStopWatch
GetCurrentIndex	Widget/PagerWidget.hpp	/^  unsigned GetCurrentIndex() const {$/;"	f	class:PagerWidget
GetCurrentInfoBox	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  unsigned GetCurrentInfoBox() const {$/;"	f	class:final
GetCurrentLayout	PageActions.cpp	/^PageActions::GetCurrentLayout()$/;"	f	class:PageActions
GetCurrentPage	Form/GridView.hpp	/^  unsigned GetCurrentPage() const {$/;"	f	class:GridView
GetCurrentWidget	Widget/PagerWidget.hpp	/^  Widget &GetCurrentWidget() {$/;"	f	class:PagerWidget
GetCurrentWidget	Widget/PagerWidget.hpp	/^  const Widget &GetCurrentWidget() const {$/;"	f	class:PagerWidget
GetCursor	Form/TabMenuDisplay.hpp	/^  unsigned GetCursor() const {$/;"	f	class:final
GetCursorId	Dialogs/Traffic/TrafficList.cpp	/^  FlarmId GetCursorId() const {$/;"	f	class:TrafficListWidget
GetCursorIndex	Dialogs/MapItemListDialog.cpp	/^  unsigned GetCursorIndex() const {$/;"	f	class:final
GetCursorIndex	Dialogs/Task/AlternatesListDialog.cpp	/^  unsigned GetCursorIndex() const {$/;"	f	class:final
GetCursorIndex	Dialogs/Task/OptionalStartsDialog.cpp	/^  unsigned GetCursorIndex() const {$/;"	f	class:OptionStartsWidget
GetCursorObject	Dialogs/Waypoint/WaypointList.cpp	/^  WaypointPtr GetCursorObject() const {$/;"	f	class:final
GetCustom	InfoBoxes/Data.hpp	/^  bool GetCustom() const {$/;"	f	struct:InfoBoxData
GetCylinderRadiusOrMinusOne	Engine/Task/Ordered/OrderedTask.cpp	/^GetCylinderRadiusOrMinusOne(const ObservationZone &oz)$/;"	f	file:
GetCylinderRadiusOrMinusOne	Engine/Task/Ordered/OrderedTask.cpp	/^GetCylinderRadiusOrMinusOne(const ObservationZoneClient &p)$/;"	f	file:
GetDPI	Hardware/DisplayDPI.cpp	/^GetDPI()$/;"	f	file:
GetData	Audio/PCMBufferDataSource.cpp	/^PCMBufferDataSource::GetData(int16_t *buffer, size_t n)$/;"	f	class:PCMBufferDataSource
GetData	Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::GetData(int16_t *buffer, size_t n)$/;"	f	class:PCMMixerDataSource
GetData	Audio/PCMSynthesiser.hpp	/^  size_t GetData(int16_t *buffer, size_t n) {$/;"	f	class:PCMSynthesiser
GetData	Dialogs/Device/CAI302/UnitsEditor.hpp	/^  const CAI302::Pilot &GetData() const {$/;"	f	class:final
GetData	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxSettings::Panel &GetData() const {$/;"	f	class:final
GetData	Screen/Custom/UncompressedImage.hpp	/^  const void *GetData() const {$/;"	f	class:UncompressedImage
GetData	Terrain/HeightMatrix.hpp	/^  const TerrainHeight *GetData() const {$/;"	f	class:HeightMatrix
GetData	Terrain/RasterBuffer.hpp	/^  TerrainHeight *GetData() {$/;"	f	class:RasterBuffer
GetData	Terrain/RasterBuffer.hpp	/^  const TerrainHeight *GetData() const {$/;"	f	class:RasterBuffer
GetData	Util/Cache.hxx	/^		const Data &GetData() const {$/;"	f	class:Cache::Item
GetDataAt	Terrain/RasterBuffer.hpp	/^  const TerrainHeight *GetDataAt(unsigned x, unsigned y) const {$/;"	f	class:RasterBuffer
GetDataEnd	Terrain/HeightMatrix.hpp	/^  const TerrainHeight *GetDataEnd() const {$/;"	f	class:HeightMatrix
GetDataField	Widget/RowFormWidget.hpp	/^  DataField &GetDataField(unsigned i) {$/;"	f	class:RowFormWidget
GetDataField	Widget/RowFormWidget.hpp	/^  const DataField &GetDataField(unsigned i) const {$/;"	f	class:RowFormWidget
GetDataPending	Device/Port/SerialPort.cpp	/^SerialPort::GetDataPending() const$/;"	f	class:SerialPort
GetDataQueued	Device/Port/SerialPort.cpp	/^SerialPort::GetDataQueued() const$/;"	f	class:SerialPort
GetDateTimeAt	NMEA/Info.cpp	/^NMEAInfo::GetDateTimeAt(double other_time) const$/;"	f	class:NMEAInfo
GetDefault	Polar/PolarGlue.cpp	/^PolarGlue::GetDefault()$/;"	f	class:PolarGlue
GetDefaultFinishType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetDefaultFinishType() const$/;"	f	class:AbstractTaskFactory
GetDefaultIntermediateType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetDefaultIntermediateType() const$/;"	f	class:AbstractTaskFactory
GetDefaultPort	Tracking/SkyLines/Client.hpp	/^  static unsigned GetDefaultPort() {$/;"	f	class:SkyLinesTracking::Client
GetDefaultPort	Tracking/SkyLines/Server.hpp	/^  static unsigned GetDefaultPort() {$/;"	f	class:SkyLinesTracking::Server
GetDefaultPortString	Tracking/SkyLines/Client.hpp	/^  static const char *GetDefaultPortString() {$/;"	f	class:SkyLinesTracking::Client
GetDefaultPortString	Tracking/SkyLines/Server.hpp	/^  static const char *GetDefaultPortString() {$/;"	f	class:SkyLinesTracking::Server
GetDefaultStartType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetDefaultStartType() const$/;"	f	class:AbstractTaskFactory
GetDefaults	Look/DefaultFonts.cpp	/^Fonts::GetDefaults()$/;"	f	class:Fonts
GetDelta	Engine/Route/RouteLink.hpp	/^  constexpr FlatGeoPoint GetDelta() const {$/;"	f	struct:RouteLinkBase
GetDeltaX	Math/DifferentialWindowFilter.hpp	/^  double GetDeltaX() const {$/;"	f	class:DifferentialWindowFilter
GetDeltaXChecked	Math/DifferentialWindowFilter.hpp	/^  double GetDeltaXChecked() const {$/;"	f	class:DifferentialWindowFilter
GetDeltaY	Math/DifferentialWindowFilter.hpp	/^  double GetDeltaY() const {$/;"	f	class:DifferentialWindowFilter
GetDescentRate	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetDescentRate() const {$/;"	f	class:AirspaceAircraftPerformance
GetDescription	InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::GetDescription(Type type)$/;"	f	class:InfoBoxFactory
GetDevice	Device/Descriptor.hpp	/^  Device *GetDevice() {$/;"	f	class:final
GetDeviceConfig	Profile/DeviceConfig.cpp	/^Profile::GetDeviceConfig(const ProfileMap &map, unsigned n,$/;"	f	class:Profile
GetDeviceName	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::GetDeviceName(unsigned i)$/;"	f	class:IMI
GetDialogContent	InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateGR::GetDialogContent()$/;"	f	class:InfoBoxContentAlternateGR
GetDialogContent	InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateName::GetDialogContent()$/;"	f	class:InfoBoxContentAlternateName
GetDialogContent	InfoBoxes/Content/Altitude.cpp	/^InfoBoxContentAltitude::GetDialogContent() {$/;"	f	class:InfoBoxContentAltitude
GetDialogContent	InfoBoxes/Content/Base.cpp	/^InfoBoxContent::GetDialogContent()$/;"	f	class:InfoBoxContent
GetDialogContent	InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLC::GetDialogContent()$/;"	f	class:InfoBoxContentOLC
GetDialogContent	InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLCSpeed::GetDialogContent()$/;"	f	class:InfoBoxContentOLCSpeed
GetDialogContent	InfoBoxes/Content/MacCready.cpp	/^InfoBoxContentMacCready::GetDialogContent() {$/;"	f	class:InfoBoxContentMacCready
GetDialogContent	InfoBoxes/Content/Radio.cpp	/^InfoBoxContentActiveRadioFrequency::GetDialogContent() {$/;"	f	class:InfoBoxContentActiveRadioFrequency
GetDialogContent	InfoBoxes/Content/Radio.cpp	/^InfoBoxContentStandbyRadioFrequency::GetDialogContent() {$/;"	f	class:InfoBoxContentStandbyRadioFrequency
GetDialogContent	InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextWaypoint::GetDialogContent()$/;"	f	class:InfoBoxContentNextWaypoint
GetDialogContent	InfoBoxes/Content/Team.cpp	/^InfoBoxContentTeamCode::GetDialogContent()$/;"	f	class:InfoBoxContentTeamCode
GetDialogContent	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentBarogram::GetDialogContent()$/;"	f	class:InfoBoxContentBarogram
GetDialogContent	InfoBoxes/Content/Weather.cpp	/^InfoBoxContentWindArrow::GetDialogContent()$/;"	f	class:InfoBoxContentWindArrow
GetDialogContent	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::GetDialogContent() const$/;"	f	class:InfoBoxWindow
GetDialogLook	Kobo/KoboMenu.cpp	/^UIGlobals::GetDialogLook()$/;"	f	class:UIGlobals
GetDialogLook	UIGlobals.cpp	/^UIGlobals::GetDialogLook()$/;"	f	class:UIGlobals
GetDialogSettings	Kobo/KoboMenu.cpp	/^UIGlobals::GetDialogSettings()$/;"	f	class:UIGlobals
GetDialogSettings	UIGlobals.cpp	/^UIGlobals::GetDialogSettings()$/;"	f	class:UIGlobals
GetDialogStyle	Dialogs/WidgetDialog.cpp	/^GetDialogStyle()$/;"	f	file:
GetDigest	Logger/GRecord.cpp	/^GRecord::GetDigest(char *output) const$/;"	f	class:GRecord
GetDigest	Util/MD5.cpp	/^MD5::GetDigest(char *buffer) const$/;"	f	class:MD5
GetDirection	Engine/Waypoint/Runway.hpp	/^  Angle GetDirection() const {$/;"	f	class:Runway
GetDirectionData	Dialogs/Waypoint/WaypointList.cpp	/^GetDirectionData(TCHAR *buffer, size_t size, int direction_filter_index,$/;"	f	file:
GetDirectionDegrees	Engine/Waypoint/Runway.hpp	/^  unsigned GetDirectionDegrees() const {$/;"	f	class:Runway
GetDirectionName	Engine/Waypoint/Runway.hpp	/^  unsigned GetDirectionName() const {$/;"	f	class:Runway
GetDisplay	Event/Poll/Queue.hpp	/^  _XDisplay *GetDisplay() const {$/;"	f	class:final
GetDisplay	Event/Poll/Queue.hpp	/^  struct wl_display *GetDisplay() {$/;"	f	class:final
GetDisplay	Event/Poll/WaylandQueue.hpp	/^  struct wl_display *GetDisplay() {$/;"	f	class:final
GetDisplay	Event/Poll/X11Queue.hpp	/^  _XDisplay *GetDisplay() const {$/;"	f	class:X11EventQueue
GetDisplayMode	MapWindow/GlueMapWindow.hpp	/^  DisplayMode GetDisplayMode() const {$/;"	f	class:GlueMapWindow
GetDisplayName	Device/Descriptor.cpp	/^DeviceDescriptor::GetDisplayName() const$/;"	f	class:DeviceDescriptor
GetDisplaySettings	Interface.hpp	/^  static inline const DisplaySettings& GetDisplaySettings() {$/;"	f	namespace:CommonInterface
GetDisplayString	Form/DataField/Enum.hpp	/^    const TCHAR *GetDisplayString() const {$/;"	f	class:final::Entry
GetDistance	Engine/Task/Stats/DistanceStat.hpp	/^  double GetDistance() const {$/;"	f	class:DistanceStat
GetDistance	Geo/Flat/FlatLine.hpp	/^  double GetDistance() const {$/;"	f	class:FlatLine
GetDistance	Terrain/RasterTile.hpp	/^  int GetDistance() const {$/;"	f	class:RasterTile
GetDistanceName	Units/Units.cpp	/^Units::GetDistanceName()$/;"	f	class:Units
GetDistanceUnit	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetDistanceUnit() const {$/;"	f	struct:CAI302::Pilot
GetDistanceUnit	Profile/UnitsConfig.cpp	/^GetDistanceUnit(const ProfileMap &map, const char *key, const char *legacy_key,$/;"	f	file:
GetDoubleValue	Form/DigitEntry.cpp	/^DigitEntry::GetDoubleValue() const$/;"	f	class:DigitEntry
GetDrawingRect	Renderer/ButtonRenderer.cpp	/^ButtonFrameRenderer::GetDrawingRect(PixelRect rc, bool pressed) const$/;"	f	class:ButtonFrameRenderer
GetDriverByIndex	Device/Register.cpp	/^GetDriverByIndex(unsigned i)$/;"	f
GetDryMass	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetDryMass() const {$/;"	f	class:GlidePolar
GetEPE	Logger/LoggerEPE.cpp	/^IGCWriter::GetEPE(const GPSState &gps)$/;"	f	class:IGCWriter
GetEast	Geo/GeoBounds.hpp	/^  constexpr Angle GetEast() const {$/;"	f	class:GeoBounds
GetEclipticLongitude	Math/SunEphemeris.cpp	/^SunEphemeris::GetEclipticLongitude(double d, Angle L)$/;"	f	class:SunEphemeris
GetEffectiveExtraPosition	Widget/TabWidget.hpp	/^  const PixelRect &GetEffectiveExtraPosition() const {$/;"	f	class:TabWidget
GetElevation	Computer/ThermalBase.cpp	/^GetElevation(RasterTerrain::Lease &map, const GeoPoint loc)$/;"	f	file:
GetElevation	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::GetElevation() const$/;"	f	class:FinishPoint
GetElevation	Engine/Task/Ordered/Points/IntermediatePoint.cpp	/^IntermediateTaskPoint::GetElevation() const$/;"	f	class:IntermediateTaskPoint
GetElevation	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::GetElevation() const$/;"	f	class:StartPoint
GetElevation	Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::GetElevation() const$/;"	f	class:UnorderedTaskPoint
GetEmptySlot	PopupMessage.cpp	/^PopupMessage::GetEmptySlot()$/;"	f	class:PopupMessage
GetEnd	Time/RoughTime.hpp	/^  constexpr const RoughTime &GetEnd() const {$/;"	f	class:RoughTimeSpan
GetEndPoint	Replay/AircraftSim.cpp	/^AircraftSim::GetEndPoint(const Angle heading, const double timestep) const$/;"	f	class:AircraftSim
GetEndRadial	Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle GetEndRadial() const {$/;"	f	class:SectorZone
GetEngineNoiseLevel	Engine/Trace/Point.hpp	/^  unsigned GetEngineNoiseLevel() const {$/;"	f	class:TracePoint
GetEnteredState	Engine/Task/Points/ScoredTaskPoint.hpp	/^  const AircraftState &GetEnteredState() const {$/;"	f	class:ScoredTaskPoint
GetEnum	Profile/Map.hpp	/^  bool GetEnum(const char *key, T &value) const {$/;"	f	class:ProfileMap
GetEnum	Profile/ProfileMap.hpp	/^  static inline bool GetEnum(const char *key, T &value)$/;"	f	namespace:Profile
GetErrorEllipse	Math/LeastSquares.cpp	/^LeastSquares::GetErrorEllipse() const$/;"	f	class:LeastSquares
GetErrorMessage	Device/Descriptor.hpp	/^  tstring GetErrorMessage() const {$/;"	f	class:final
GetErrorMessage	XML/Parser.cpp	/^XML::GetErrorMessage(Error error)$/;"	f	class:XML
GetEstimatedTotalTime	Engine/Task/Stats/TaskStats.hpp	/^  double GetEstimatedTotalTime() const {$/;"	f	class:TaskStats
GetExtension	OS/Path.cpp	/^Path::GetExtension() const$/;"	f	class:Path
GetExtension	OS/Path.hpp	/^  const_pointer GetExtension() const {$/;"	f	class:AllocatedPath
GetExtra	Widget/ArrowPagerWidget.hpp	/^  Widget &GetExtra() {$/;"	f	class:ArrowPagerWidget
GetExtra	Widget/TabWidget.hpp	/^  Widget &GetExtra() {$/;"	f	class:TabWidget
GetFDF	Device/Driver/Volkslogger/dbbconv.h	/^  const void *GetFDF(size_t offset=0) const {$/;"	f	class:DBB
GetFDF	Device/Driver/Volkslogger/dbbconv.h	/^  void *GetFDF(size_t offset=0) {$/;"	f	class:DBB
GetFactory	Engine/Task/Ordered/OrderedTask.hpp	/^  AbstractTaskFactory& GetFactory() const {$/;"	f	class:final
GetFactory	Engine/Task/TaskManager.cpp	/^TaskManager::GetFactory() const$/;"	f	class:TaskManager
GetFactoryConstraints	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetFactoryConstraints() const$/;"	f	class:OrderedTask
GetFactoryType	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskFactoryType GetFactoryType() const {$/;"	f	class:final
GetFactoryTypes	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetFactoryTypes(gcc_unused bool all) const$/;"	f	class:OrderedTask
GetField	Screen/Custom/LibTiff.cpp	/^  void GetField(uint32 tag, int &value_r) {$/;"	f	class:TiffLoader
GetFieldDirect	Terrain/Intersection.cpp	/^RasterTileCache::GetFieldDirect(const unsigned px, const unsigned py) const$/;"	f	class:RasterTileCache
GetFileType	Form/DataField/File.hpp	/^  FileType GetFileType() const {$/;"	f	class:final
GetFilename	Replay/Replay.hpp	/^  Path GetFilename() const {$/;"	f	class:final
GetFineHeight	Terrain/RasterBuffer.hpp	/^  unsigned GetFineHeight() const {$/;"	f	class:RasterBuffer
GetFineHeight	Terrain/RasterTileCache.hpp	/^  unsigned GetFineHeight() const {$/;"	f	class:RasterTileCache
GetFineTileHeight	Terrain/RasterTileCache.hpp	/^  unsigned GetFineTileHeight() const {$/;"	f	class:RasterTileCache
GetFineTileWidth	Terrain/RasterTileCache.hpp	/^  unsigned GetFineTileWidth() const {$/;"	f	class:RasterTileCache
GetFineWidth	Terrain/RasterBuffer.hpp	/^  unsigned GetFineWidth() const {$/;"	f	class:RasterBuffer
GetFineWidth	Terrain/RasterTileCache.hpp	/^  unsigned GetFineWidth() const {$/;"	f	class:RasterTileCache
GetFinishTypes	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetFinishTypes() const {$/;"	f	class:AbstractTaskFactory
GetFirst	Widget/TwoWidgets.hpp	/^  Widget &GetFirst() {$/;"	f	class:TwoWidgets
GetFirst	Widget/TwoWidgets.hpp	/^  const Widget &GetFirst() const {$/;"	f	class:TwoWidgets
GetFirstChild	XML/Node.hpp	/^  XMLNode *GetFirstChild() {$/;"	f	class:XMLNode
GetFirstChild	XML/Node.hpp	/^  const XMLNode *GetFirstChild() const {$/;"	f	class:XMLNode
GetFirstFont	Renderer/TwoTextRowsRenderer.hpp	/^  const Font &GetFirstFont() const {$/;"	f	class:TwoTextRowsRenderer
GetFirstPointer	Util/RadixTree.hpp	/^    T *GetFirstPointer() {$/;"	f	struct:RadixTree::LeafList
GetFirstPointer	Util/RadixTree.hpp	/^    const T *GetFirstPointer() const {$/;"	f	struct:RadixTree::LeafList
GetFirstWaypoint	Device/Declaration.hpp	/^  const Waypoint &GetFirstWaypoint() const {$/;"	f	struct:Declaration
GetFirstX	Math/DifferentialWindowFilter.hpp	/^  double GetFirstX() const {$/;"	f	class:DifferentialWindowFilter
GetFirstY	Renderer/TwoTextRowsRenderer.hpp	/^  int GetFirstY() const {$/;"	f	class:TwoTextRowsRenderer
GetFlapLanding	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapLanding() const {$/;"	f	struct:VegaSwitchState
GetFlapNegative	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapNegative() const {$/;"	f	struct:VegaSwitchState
GetFlapPositive	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapPositive() const {$/;"	f	struct:VegaSwitchState
GetFlapZero	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetFlapZero() const {$/;"	f	struct:VegaSwitchState
GetFlatLocation	Geo/SearchPoint.hpp	/^  const FlatGeoPoint &GetFlatLocation() const {$/;"	f	class:SearchPoint
GetFlavourWidget	MainWindow.cpp	/^MainWindow::GetFlavourWidget(const TCHAR *flavour)$/;"	f	class:MainWindow
GetFlightNumber	Logger/ExternalLogger.cpp	/^GetFlightNumber(const RecordedFlightList &flight_list,$/;"	f	file:
GetFlightStats	Computer/GlideComputer.hpp	/^  const FlightStatistics &GetFlightStats() const {$/;"	f	class:GlideComputer
GetFlightStats	Computer/StatsComputer.hpp	/^  FlightStatistics &GetFlightStats() { return flightstats; }$/;"	f	class:StatsComputer
GetFlightStats	Computer/StatsComputer.hpp	/^  const FlightStatistics &GetFlightStats() const { return flightstats; }$/;"	f	class:StatsComputer
GetFloor	Engine/Route/RoutePolars.hpp	/^  int GetFloor() const {$/;"	f	class:RoutePolars
GetFloor	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetFloor() const$/;"	f	class:ThermalBand
GetFont	Screen/LargeTextWindow.hpp	/^  const Font &GetFont() const {$/;"	f	class:LargeTextWindow
GetFontHeight	Screen/GDI/Canvas.cpp	/^Canvas::GetFontHeight() const$/;"	f	class:Canvas
GetFontHeight	Screen/Memory/Canvas.hpp	/^  unsigned GetFontHeight() const {$/;"	f	class:Canvas
GetFontHeight	Screen/OpenGL/Canvas.hpp	/^  unsigned GetFontHeight() const {$/;"	f	class:Canvas
GetFormat	Form/DataField/GeoPoint.hpp	/^  CoordinateFormat GetFormat() const {$/;"	f	class:final
GetFormat	Screen/Custom/UncompressedImage.hpp	/^  Format GetFormat() const {$/;"	f	class:UncompressedImage
GetFormatSettings	UIGlobals.cpp	/^UIGlobals::GetFormatSettings()$/;"	f	class:UIGlobals
GetFriendColor	FLARM/Friends.cpp	/^FlarmFriends::GetFriendColor(FlarmId id)$/;"	f	class:FlarmFriends
GetFront	Engine/Trace/Trace.hpp	/^  TraceDelta &GetFront() {$/;"	f	class:Trace
GetFull	Computer/TraceComputer.hpp	/^  const Trace &GetFull() const {$/;"	f	class:TraceComputer
GetFullScreen	MainWindow.hpp	/^  bool GetFullScreen() const {$/;"	f	class:MainWindow
GetFullScreen	Screen/TopWindow.hpp	/^  bool GetFullScreen() const {$/;"	f	class:DisplayOrientation
GetGPSDeviceName	Logger/LoggerImpl.cpp	/^GetGPSDeviceName()$/;"	f	file:
GetGPSName	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::GetGPSName(unsigned i)$/;"	f	class:IMI
GetGPSStatus	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^GetGPSStatus(const NMEAInfo &basic)$/;"	f	file:
GetGPSStatus	InfoBoxes/Content/Other.cpp	/^GetGPSStatus(const NMEAInfo &basic)$/;"	f	file:
GetGearExtended	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetGearExtended() const {$/;"	f	struct:VegaSwitchState
GetGeneric	Widget/RowFormWidget.hpp	/^  Window &GetGeneric(unsigned i) {$/;"	f	class:RowFormWidget
GetGeoAngle	Form/DigitEntry.cpp	/^DigitEntry::GetGeoAngle(CoordinateFormat format) const$/;"	f	class:DigitEntry
GetGeoBounds	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::GetGeoBounds() const$/;"	f	class:AbstractAirspace
GetGeoHeight	Geo/GeoBounds.hpp	/^  double GetGeoHeight() const {$/;"	f	class:GeoBounds
GetGeoLocation	Projection/Projection.hpp	/^  const GeoPoint &GetGeoLocation() const {$/;"	f	class:Projection
GetGeoPoint	Profile/GeoValue.cpp	/^ProfileMap::GetGeoPoint(const char *key, GeoPoint &value) const$/;"	f	class:ProfileMap
GetGeoScreenCenter	Projection/WindowProjection.cpp	/^WindowProjection::GetGeoScreenCenter() const$/;"	f	class:WindowProjection
GetGeoWidth	Geo/GeoBounds.hpp	/^  double GetGeoWidth() const {$/;"	f	class:GeoBounds
GetGesture	UIUtil/GestureManager.cpp	/^GestureManager::GetGesture() const$/;"	f	class:GestureManager
GetGlidePolar	Engine/Task/TaskManager.hpp	/^  const GlidePolar &GetGlidePolar() const {$/;"	f	class:TaskManager
GetGlidePolar	Replay/TaskAccessor.hpp	/^  GlidePolar GetGlidePolar() const {$/;"	f	class:TaskAccessor
GetGradient	Math/LeastSquares.hpp	/^  double GetGradient() const {$/;"	f	class:LeastSquares
GetHFFXARecord	Logger/LoggerEPE.cpp	/^IGCWriter::GetHFFXARecord()$/;"	f	class:IGCWriter
GetHeader	Device/Driver/Volkslogger/dbbconv.h	/^  Volkslogger::TableHeader *GetHeader(unsigned i) {$/;"	f	class:DBB
GetHeader	Device/Driver/Volkslogger/dbbconv.h	/^  const Volkslogger::TableHeader *GetHeader(unsigned i) const {$/;"	f	class:DBB
GetHeadingDeviation	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetHeadingDeviation()$/;"	f	class:TaskAutoPilot
GetHeadingString	Dialogs/Airspace/AirspaceList.cpp	/^GetHeadingString(TCHAR *buffer)$/;"	f	file:
GetHectoPascal	Atmosphere/Pressure.hpp	/^  double GetHectoPascal() const {$/;"	f	class:AtmosphericPressure
GetHeight	Android/Bitmap.hpp	/^  static unsigned GetHeight(JNIEnv *env, jobject bitmap) {$/;"	f	class:AndroidBitmap
GetHeight	Engine/Route/FlatTriangleFan.hpp	/^  int GetHeight() const {$/;"	f	class:FlatTriangleFan
GetHeight	Event/Shared/RotatePointer.hpp	/^  constexpr unsigned GetHeight() const {$/;"	f	class:RotatePointer
GetHeight	Form/ScrollBar.hpp	/^  int GetHeight() const {$/;"	f	class:ScrollBar
GetHeight	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr unsigned GetHeight() const {$/;"	f	struct:FlatBoundingBox
GetHeight	Geo/GeoBounds.hpp	/^  Angle GetHeight() const {$/;"	f	class:GeoBounds
GetHeight	Look/FontDescription.hpp	/^  constexpr unsigned GetHeight() const {$/;"	f	class:FontDescription
GetHeight	Look/FontDescription.hpp	/^  unsigned GetHeight() const {$/;"	f	class:FontDescription
GetHeight	Renderer/TextRenderer.cpp	/^TextRenderer::GetHeight(Canvas &canvas, PixelRect rc,$/;"	f	class:TextRenderer
GetHeight	Renderer/TextRenderer.cpp	/^TextRenderer::GetHeight(Canvas &canvas, unsigned width,$/;"	f	class:TextRenderer
GetHeight	Renderer/TextRenderer.cpp	/^TextRenderer::GetHeight(const Font &font, unsigned width,$/;"	f	class:TextRenderer
GetHeight	Screen/Bitmap.hpp	/^  unsigned GetHeight() const {$/;"	f	class:final
GetHeight	Screen/Custom/UncompressedImage.hpp	/^  unsigned GetHeight() const {$/;"	f	class:UncompressedImage
GetHeight	Screen/FB/TopCanvas.cpp	/^GetHeight(const struct fb_var_screeninfo &vinfo)$/;"	f	file:
GetHeight	Screen/Font.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Font
GetHeight	Screen/GDI/Canvas.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Canvas
GetHeight	Screen/Memory/Canvas.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Canvas
GetHeight	Screen/OpenGL/Canvas.hpp	/^  unsigned GetHeight() const {$/;"	f	class:Canvas
GetHeight	Screen/OpenGL/Texture.hpp	/^  unsigned GetHeight() const {$/;"	f	class:GLTexture
GetHeight	Screen/RawBitmap.hpp	/^  unsigned GetHeight() const {$/;"	f	class:final
GetHeight	Terrain/HeightMatrix.hpp	/^  unsigned GetHeight() const {$/;"	f	class:HeightMatrix
GetHeight	Terrain/RasterBuffer.hpp	/^  unsigned GetHeight() const {$/;"	f	class:RasterBuffer
GetHeight	Terrain/RasterMap.cpp	/^RasterMap::GetHeight(const GeoPoint &location) const$/;"	f	class:RasterMap
GetHeight	Terrain/RasterRenderer.hpp	/^  unsigned GetHeight() const {$/;"	f	class:RasterRenderer
GetHeight	Terrain/RasterTile.cpp	/^RasterTile::GetHeight(unsigned x, unsigned y) const$/;"	f	class:RasterTile
GetHeight	Terrain/RasterTileCache.cpp	/^RasterTileCache::GetHeight(unsigned px, unsigned py) const$/;"	f	class:RasterTileCache
GetHeight	Terrain/RasterTileCache.hpp	/^  unsigned int GetHeight() const { return height; }$/;"	f	class:RasterTileCache
GetHeight	Util/AllocatedGrid.hxx	/^	constexpr unsigned GetHeight() const {$/;"	f	class:AllocatedGrid
GetHeightMatrix	Terrain/RasterRenderer.hpp	/^  const HeightMatrix &GetHeightMatrix() const {$/;"	f	class:RasterRenderer
GetHeightRef	Task/Deserialiser.cpp	/^GetHeightRef(const ConstDataNode &node, const TCHAR *nodename)$/;"	f	file:
GetHeightRef	Task/Serialiser.cpp	/^GetHeightRef(AltitudeReference height_ref)$/;"	f	file:
GetHelp	Form/DataField/Enum.cpp	/^DataFieldEnum::GetHelp() const$/;"	f	class:DataFieldEnum
GetHelp	Form/DataField/Enum.hpp	/^    const TCHAR *GetHelp() const {$/;"	f	class:final::Entry
GetHitRadius	Screen/Layout.hpp	/^  GetHitRadius()$/;"	f	namespace:Layout
GetHolder	Android/IOIOHelper.hpp	/^  jobject GetHolder() {$/;"	f	class:IOIOHelper
GetHome	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::GetHome() const$/;"	f	class:AbortTask
GetHome	Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr GetHome() const {$/;"	f	class:Waypoints
GetHomeDataPath	LocalPath.cpp	/^GetHomeDataPath(bool create=false)$/;"	f	file:
GetHomeVector	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::GetHomeVector(const AircraftState &state) const$/;"	f	class:AbortTask
GetHour	Time/RoughTime.hpp	/^  constexpr unsigned GetHour() const {$/;"	f	class:RoughTime
GetHourAngle	Math/SunEphemeris.cpp	/^SunEphemeris::GetHourAngle(Angle lat, Angle declin)$/;"	f	class:SunEphemeris
GetHourAngleTwilight	Math/SunEphemeris.cpp	/^SunEphemeris::GetHourAngleTwilight(Angle lat, Angle declin)$/;"	f	class:SunEphemeris
GetHull	Engine/Route/FlatTriangleFan.hpp	/^  ConstBuffer<FlatGeoPoint> GetHull(bool closed) const {$/;"	f	class:FlatTriangleFan
GetIBType	Profile/InfoBoxConfig.cpp	/^GetIBType(const ProfileMap &map, const char *key, InfoBoxFactory::Type &val)$/;"	f	file:
GetIRecord	Logger/LoggerEPE.cpp	/^IGCWriter::GetIRecord()$/;"	f	class:IGCWriter
GetIcon	Topography/TopographyFile.hpp	/^  ResourceId GetIcon() const {$/;"	f	class:TopographyFile
GetIconLook	UIGlobals.cpp	/^UIGlobals::GetIconLook()$/;"	f	class:UIGlobals
GetId	FLARM/FlarmNetRecord.cpp	/^FlarmNetRecord::GetId() const$/;"	f	class:FlarmNetRecord
GetId	Form/DataField/Enum.hpp	/^    unsigned GetId() const {$/;"	f	class:final::Entry
GetId	Screen/OpenGL/Program.hpp	/^  GLuint GetId() const {$/;"	f	class:GLProgram
GetId	Screen/OpenGL/Program.hpp	/^  GLuint GetId() const {$/;"	f	class:GLShader
GetIf	Util/RadixTree.hpp	/^    T *GetIf(const P &predicate) {$/;"	f	struct:RadixTree::LeafList
GetIf	Util/RadixTree.hpp	/^    T *GetIf(const TCHAR *key, const P &predicate) {$/;"	f	struct:RadixTree::Node
GetIf	Util/RadixTree.hpp	/^    const T *GetIf(const P &predicate) const {$/;"	f	struct:RadixTree::LeafList
GetIf	Util/RadixTree.hpp	/^    const T *GetIf(const TCHAR *key, const P &predicate) const {$/;"	f	struct:RadixTree::Node
GetIf	Util/RadixTree.hpp	/^  T &GetIf(const TCHAR *key, T &default_value, const P &predicate) {$/;"	f	class:RadixTree
GetIf	Util/RadixTree.hpp	/^  const T &GetIf(const TCHAR *key, const T &default_value,$/;"	f	class:RadixTree
GetImage	Terrain/RasterRenderer.hpp	/^  const RawBitmap &GetImage() const {$/;"	f	class:RasterRenderer
GetIndex	Device/Descriptor.hpp	/^  unsigned GetIndex() const {$/;"	f	class:final
GetIndexInTask	Task/MapTaskManager.cpp	/^GetIndexInTask(const OrderedTask &task, const Waypoint &waypoint)$/;"	f	file:
GetIndexInTask	Task/MapTaskManager.cpp	/^MapTaskManager::GetIndexInTask(const Waypoint &waypoint)$/;"	f	class:MapTaskManager
GetIndexOfItemInFocus	Form/GridView.cpp	/^GridView::GetIndexOfItemInFocus() const$/;"	f	class:GridView
GetIndices	Topography/XShape.cpp	/^XShape::GetIndices(int thinning_level, ShapeScalar min_distance,$/;"	f	class:XShape
GetInfo	Net/HTTP/Easy.hxx	/^	bool GetInfo(CURLINFO info, T value_r) const {$/;"	f	class:CurlEasy
GetInfoBoxLook	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxLook &GetInfoBoxLook() const {$/;"	f	class:final
GetInfoLog	Screen/OpenGL/Program.hpp	/^  void GetInfoLog(char *buffer, GLsizei max_size) {$/;"	f	class:GLProgram
GetInfoLog	Screen/OpenGL/Program.hpp	/^  void GetInfoLog(char *buffer, GLsizei max_size) {$/;"	f	class:GLShader
GetInfoLogLength	Screen/OpenGL/Program.hpp	/^  GLint GetInfoLogLength() const {$/;"	f	class:GLProgram
GetInfoLogLength	Screen/OpenGL/Program.hpp	/^  GLint GetInfoLogLength() const {$/;"	f	class:GLShader
GetInnerRadius	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  double GetInnerRadius() const {$/;"	f	class:AnnularSectorZone
GetInnerRadius	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  double GetInnerRadius() const {$/;"	f	class:final
GetIntegerAltitude	Engine/Trace/Point.hpp	/^  int GetIntegerAltitude() const {$/;"	f	class:TracePoint
GetIntegerValue	Form/DataField/Angle.hpp	/^  unsigned GetIntegerValue() const {$/;"	f	class:final
GetIntegerValue	Form/DigitEntry.cpp	/^DigitEntry::GetIntegerValue() const$/;"	f	class:DigitEntry
GetInterface	Audio/SLES/Object.hpp	/^    SLresult GetInterface(const SLInterfaceID iid, void *pInterface) {$/;"	f	class:SLES::Object
GetIntermediateTypes	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetIntermediateTypes() const {$/;"	f	class:AbstractTaskFactory
GetInterpolated	Terrain/RasterBuffer.cpp	/^RasterBuffer::GetInterpolated(unsigned lx, unsigned ly) const$/;"	f	class:RasterBuffer
GetInterpolated	Terrain/RasterBuffer.cpp	/^RasterBuffer::GetInterpolated(unsigned lx, unsigned ly,$/;"	f	class:RasterBuffer
GetInterpolatedHeight	Terrain/RasterMap.cpp	/^RasterMap::GetInterpolatedHeight(const GeoPoint &location) const$/;"	f	class:RasterMap
GetInterpolatedHeight	Terrain/RasterTile.cpp	/^RasterTile::GetInterpolatedHeight(unsigned lx, unsigned ly,$/;"	f	class:RasterTile
GetInterpolatedHeight	Terrain/RasterTileCache.cpp	/^RasterTileCache::GetInterpolatedHeight(unsigned int lx, unsigned int ly) const$/;"	f	class:RasterTileCache
GetInvMC	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetInvMC() const {$/;"	f	class:GlidePolar
GetItem	Form/DataField/File.cpp	/^FileDataField::GetItem(unsigned index) const$/;"	f	class:FileDataField
GetItem	Polar/PolarStore.cpp	/^PolarStore::GetItem(unsigned i)$/;"	f	class:PolarStore
GetItemCount	Weather/Rasp/RaspStore.hpp	/^  unsigned GetItemCount() const {$/;"	f	class:RaspStore
GetItemHelpEnabled	Form/DataField/Base.hpp	/^  bool GetItemHelpEnabled() {$/;"	f	class:DataField
GetItemInfo	Weather/Rasp/RaspStore.hpp	/^  const MapItem &GetItemInfo(unsigned i) const {$/;"	f	class:RaspStore
GetKey	Tracking/SkyLines/Client.hpp	/^  uint64_t GetKey() const {$/;"	f	class:SkyLinesTracking::Client
GetKey	Util/Cache.hxx	/^		const Key &GetKey() const {$/;"	f	class:Cache::Item
GetKeyCode	Event/SDL/Event.hpp	/^  unsigned GetKeyCode() const {$/;"	f	struct:Event
GetKeyCode	Event/Shared/Event.hpp	/^  unsigned GetKeyCode() const {$/;"	f	struct:Event
GetKeyCode	Event/Windows/Event.hpp	/^  unsigned GetKeyCode() const {$/;"	f	struct:Event
GetKeyEvent	Input/InputConfig.hpp	/^  unsigned GetKeyEvent(unsigned mode, unsigned key_code) const {$/;"	f	struct:InputConfig
GetKiloHertz	RadioFrequency.hpp	/^  unsigned GetKiloHertz() const {$/;"	f	class:RadioFrequency
GetLDOverGround	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetLDOverGround(Angle track, SpeedVector wind) const$/;"	f	class:GlidePolar
GetLDOverGround	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetLDOverGround(const AircraftState &state) const$/;"	f	class:GlidePolar
GetLabel	Topography/XShape.hpp	/^  const TCHAR *GetLabel() const {$/;"	f	class:XShape
GetLabel	Weather/Rasp/RaspRenderer.hpp	/^  const TCHAR *GetLabel() const {$/;"	f	class:RaspRenderer
GetLastIntermediateAchieved	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetLastIntermediateAchieved() const$/;"	f	class:OrderedTask
GetLastModification	OS/FileUtil.cpp	/^File::GetLastModification(Path path)$/;"	f	class:File
GetLastState	Replay/AircraftSim.hpp	/^  const AircraftState& GetLastState() const {$/;"	f	class:AircraftSim
GetLastWaypoint	Device/Declaration.hpp	/^  const Waypoint &GetLastWaypoint() const {$/;"	f	struct:Declaration
GetLastX	Math/DifferentialWindowFilter.hpp	/^  double GetLastX() const {$/;"	f	class:DifferentialWindowFilter
GetLastY	Math/ConvexFilter.cpp	/^double ConvexFilter::GetLastY() const {$/;"	f	class:ConvexFilter
GetLatitude	Form/DigitEntry.cpp	/^DigitEntry::GetLatitude(CoordinateFormat format) const$/;"	f	class:DigitEntry
GetLeft	Form/ScrollBar.hpp	/^  unsigned GetLeft(const PixelSize size) const {$/;"	f	class:ScrollBar
GetLeft	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetLeft() const {$/;"	f	struct:FlatBoundingBox
GetLegStats	Replay/TaskAccessor.hpp	/^  const ElementStat GetLegStats() const {$/;"	f	class:TaskAccessor
GetLegacyAltitudeUnit	Profile/UnitsConfig.cpp	/^GetLegacyAltitudeUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacyAutoWindMode	Computer/Wind/Settings.hpp	/^  unsigned GetLegacyAutoWindMode() const {$/;"	f	struct:WindSettings
GetLegacyDistanceUnit	Profile/UnitsConfig.cpp	/^GetLegacyDistanceUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacySpeedUnit	Profile/UnitsConfig.cpp	/^GetLegacySpeedUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacyTemperatureUnit	Profile/UnitsConfig.cpp	/^GetLegacyTemperatureUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLegacyVerticalSpeedUnit	Profile/UnitsConfig.cpp	/^GetLegacyVerticalSpeedUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetLength	Computer/WaveResult.hpp	/^  double GetLength() const {$/;"	f	struct:WaveInfo
GetLength	Engine/Task/ObservationZones/LineSectorZone.hpp	/^  double GetLength() const {$/;"	f	class:LineSectorZone
GetLength	Engine/Waypoint/Runway.hpp	/^  unsigned GetLength() const {$/;"	f	class:Runway
GetLength	Math/ARange.hpp	/^  Angle GetLength() const {$/;"	f	struct:AngleRange
GetLength	Net/HTTP/ToBuffer.hpp	/^    size_t GetLength() const {$/;"	f	class:Net::DownloadToBufferJob
GetLine	Device/Util/NMEAReader.cpp	/^PortNMEAReader::GetLine()$/;"	f	class:PortNMEAReader
GetLineMaskPosition	Screen/Memory/Murphy.hpp	/^  unsigned GetLineMaskPosition() const {$/;"	f	struct:MurphyIterator
GetLineSpacing	Android/TextUtil.hpp	/^  unsigned GetLineSpacing() const {$/;"	f	class:TextUtil
GetLineSpacing	Screen/Font.hpp	/^  unsigned GetLineSpacing() const {$/;"	f	class:Font
GetLinear	Util/AllocatedGrid.hxx	/^	const_reference GetLinear(unsigned i) const {$/;"	f	class:AllocatedGrid
GetLinear	Util/AllocatedGrid.hxx	/^	reference GetLinear(unsigned i) {$/;"	f	class:AllocatedGrid
GetLines	Topography/XShape.hpp	/^  ConstBuffer<uint16_t> GetLines() const {$/;"	f	class:XShape
GetLinkStatus	Screen/OpenGL/Program.hpp	/^  GLint GetLinkStatus() const {$/;"	f	class:GLProgram
GetList	Waypoint/LastUsed.cpp	/^LastUsedWaypoints::GetList()$/;"	f	class:LastUsedWaypoints
GetList	Widget/ListWidget.hpp	/^  ListControl &GetList() {$/;"	f	class:ListWidget
GetList	Widget/ListWidget.hpp	/^  const ListControl &GetList() const {$/;"	f	class:ListWidget
GetLiveBlackboard	Interface.hpp	/^  static inline LiveBlackboard &GetLiveBlackboard() {$/;"	f	namespace:CommonInterface
GetLocalValue	Form/DataField/RoughTime.hpp	/^  RoughTime GetLocalValue() const {$/;"	f	class:final
GetLocation	Device/Declaration.hpp	/^  const GeoPoint &GetLocation(const unsigned i) const {$/;"	f	struct:Declaration
GetLocation	Device/Driver/Volkslogger/Database.cpp	/^Volkslogger::Waypoint::GetLocation() const$/;"	f	class:Volkslogger::Waypoint
GetLocation	Engine/Task/Points/SampledTaskPoint.hpp	/^  const GeoPoint &GetLocation() const {$/;"	f	class:SampledTaskPoint
GetLocation	Engine/Task/Points/TaskPoint.hpp	/^  const GeoPoint &GetLocation() const {$/;"	f	class:TaskPoint
GetLocation	Geo/SearchPoint.hpp	/^  const GeoPoint &GetLocation() const {$/;"	f	class:SearchPoint
GetLocation	MapWindow/MapWindow.hpp	/^  GeoPoint GetLocation() const {$/;"	f	class:MapWindow
GetLocation	TeamCode/TeamCode.cpp	/^TeamCode::GetLocation(const GeoPoint ref) const$/;"	f	class:TeamCode
GetLocationMax	Engine/Task/Points/SampledTaskPoint.hpp	/^  const GeoPoint &GetLocationMax() const {$/;"	f	class:SampledTaskPoint
GetLocationMin	Engine/Task/Points/SampledTaskPoint.hpp	/^  const GeoPoint &GetLocationMin() const {$/;"	f	class:SampledTaskPoint
GetLocationRemaining	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::GetLocationRemaining() const$/;"	f	class:AATPoint
GetLocationRemaining	Engine/Task/Points/ScoredTaskPoint.hpp	/^  const GeoPoint &GetLocationRemaining() const {$/;"	f	class:ScoredTaskPoint
GetLocationRemaining	Engine/Task/Points/TaskPoint.hpp	/^  virtual const GeoPoint &GetLocationRemaining() const {$/;"	f	class:TaskPoint
GetLocationScored	Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::GetLocationScored() const$/;"	f	class:ScoredTaskPoint
GetLocationTarget	Engine/Task/TaskManager.cpp	/^TaskManager::GetLocationTarget(const unsigned index) const$/;"	f	class:TaskManager
GetLocationTravelled	Engine/Task/Points/ScoredTaskPoint.hpp	/^  const GeoPoint &GetLocationTravelled() const {$/;"	f	class:ScoredTaskPoint
GetLocations	Airspace/AirspaceWarningCopy.hpp	/^  const StaticArray<GeoPoint,32> &GetLocations() const {$/;"	f	class:AirspaceWarningCopy
GetLogbookContents	Device/Driver/LX/NanoLogger.cpp	/^GetLogbookContents(Port &port, PortNMEAReader &reader,$/;"	f	file:
GetLongitude	Form/DigitEntry.cpp	/^DigitEntry::GetLongitude(CoordinateFormat format) const$/;"	f	class:DigitEntry
GetLook	Dialogs/Task/Manager/Internal.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:final
GetLook	Form/ButtonPanel.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:ButtonPanel
GetLook	Form/Form.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:WndForm
GetLook	Form/TabDisplay.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:final
GetLook	Gauge/ThermalAssistantRenderer.hpp	/^  const ThermalAssistantLook &GetLook() {$/;"	f	class:ThermalAssistantRenderer
GetLook	InfoBoxes/InfoBoxWindow.hpp	/^  const InfoBoxLook &GetLook() const {$/;"	f	class:InfoBoxWindow
GetLook	MainWindow.hpp	/^  const Look &GetLook() const {$/;"	f	class:MainWindow
GetLook	Renderer/AirspaceLabelRenderer.hpp	/^  const AirspaceLook &GetLook() const {$/;"	f	class:AirspaceLabelRenderer
GetLook	Renderer/AirspaceRenderer.hpp	/^  const AirspaceLook &GetLook() const {$/;"	f	class:AirspaceRenderer
GetLook	Renderer/ButtonRenderer.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:ButtonFrameRenderer
GetLook	Renderer/ChartRenderer.hpp	/^  const ChartLook &GetLook() const {$/;"	f	class:ChartRenderer
GetLook	Renderer/FinalGlideBarRenderer.hpp	/^  const FinalGlideBarLook &GetLook() const {$/;"	f	class:FinalGlideBarRenderer
GetLook	Renderer/SymbolButtonRenderer.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:SymbolButtonRenderer
GetLook	Renderer/TextButtonRenderer.hpp	/^  const ButtonLook &GetLook() const {$/;"	f	class:TextButtonRenderer
GetLook	Renderer/VarioBarRenderer.hpp	/^  const VarioBarLook &GetLook() const {$/;"	f	class:VarioBarRenderer
GetLook	Renderer/WaypointRenderer.hpp	/^  const WaypointLook &GetLook() const {$/;"	f	class:WaypointRenderer
GetLook	UIGlobals.cpp	/^UIGlobals::GetLook()$/;"	f	class:UIGlobals
GetLook	Widget/RowFormWidget.hpp	/^  const DialogLook &GetLook() const {$/;"	f	class:RowFormWidget
GetLowerLeft	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr const FlatGeoPoint &GetLowerLeft() const {$/;"	f	struct:FlatBoundingBox
GetLuaState	Lua/Timer.cpp	/^  lua_State *GetLuaState() {$/;"	f	class:final
GetLuminosity	Screen/Memory/Color.hpp	/^  constexpr uint8_t GetLuminosity() const {$/;"	f	class:Color
GetLuminosity	Screen/PortableColor.hpp	/^  constexpr uint8_t GetLuminosity() const {$/;"	f	class:Luminosity8
GetMC	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetMC() const {$/;"	f	class:GlidePolar
GetMacAddress	Tracking/SkyLines/Key.cpp	/^GetMacAddress(MacAddress &address, const char *interface_name)$/;"	f	file:
GetMainMenuButton	Form/TabMenuDisplay.hpp	/^  const MainMenuButton &GetMainMenuButton(unsigned main_menu_index) const {$/;"	f	class:final
GetMainMenuButtonSize	Form/TabMenuDisplay.hpp	/^  const PixelRect &GetMainMenuButtonSize(unsigned i) const {$/;"	f	class:final
GetMainRect	MainWindow.hpp	/^  PixelRect GetMainRect() const {$/;"	f	class:MainWindow
GetMainRect	MainWindow.hpp	/^  const PixelRect &GetMainRect(const PixelRect &full_rc) const {$/;"	f	class:MainWindow
GetMainWindow	Form/Form.cpp	/^WndForm::GetMainWindow()$/;"	f	class:WndForm
GetMainWindow	Kobo/KoboMenu.cpp	/^UIGlobals::GetMainWindow()$/;"	f	class:UIGlobals
GetMainWindow	UIGlobals.cpp	/^UIGlobals::GetMainWindow()$/;"	f	class:UIGlobals
GetManager	Computer/WarningComputer.hpp	/^  ProtectedAirspaceWarningManager &GetManager() {$/;"	f	class:WarningComputer
GetManager	Computer/WarningComputer.hpp	/^  const ProtectedAirspaceWarningManager &GetManager() const {$/;"	f	class:WarningComputer
GetMap	MainWindow.hpp	/^  GlueMapWindow *GetMap() {$/;"	f	class:MainWindow
GetMap	UIGlobals.cpp	/^UIGlobals::GetMap()$/;"	f	class:UIGlobals
GetMap	Weather/Rasp/RaspCache.hpp	/^  const RasterMap *GetMap() const {$/;"	f	class:RaspCache
GetMapCenter	Terrain/RasterMap.hpp	/^  GeoPoint GetMapCenter() const {$/;"	f	class:RasterMap
GetMapIfActive	MainWindow.cpp	/^MainWindow::GetMapIfActive()$/;"	f	class:MainWindow
GetMapIfActive	UIGlobals.cpp	/^UIGlobals::GetMapIfActive()$/;"	f	class:UIGlobals
GetMapLabel	Weather/Rasp/RaspCache.cpp	/^RaspCache::GetMapLabel() const$/;"	f	class:RaspCache
GetMapLook	UIGlobals.cpp	/^UIGlobals::GetMapLook()$/;"	f	class:UIGlobals
GetMapName	Weather/Rasp/RaspCache.cpp	/^RaspCache::GetMapName() const$/;"	f	class:RaspCache
GetMapRectAbove	MainWindow.cpp	/^GetMapRectAbove(const PixelRect &rc, const PixelRect &bottom_rect)$/;"	f	file:
GetMapResolutionFactor	Projection/WindowProjection.hpp	/^  int GetMapResolutionFactor() const {$/;"	f	class:WindowProjection
GetMapScale	Projection/WindowProjection.cpp	/^WindowProjection::GetMapScale() const$/;"	f	class:WindowProjection
GetMapSettings	Blackboard/MapSettingsBlackboard.hpp	/^  const MapSettings& GetMapSettings() const {$/;"	f	class:MapSettingsBlackboard
GetMapSettings	Blackboard/SettingsBlackboard.hpp	/^  const MapSettings &GetMapSettings() const {$/;"	f	class:SettingsBlackboard
GetMapSettings	Interface.hpp	/^  static inline const MapSettings& GetMapSettings() {$/;"	f	namespace:CommonInterface
GetMapSettings	MapWindow/MapWindowBlackboard.hpp	/^  const MapSettings &GetMapSettings() const {$/;"	f	class:MapWindowBlackboard
GetMapSettings	MapWindow/TargetMapWindow.cpp	/^GetMapSettings()$/;"	f	file:
GetMapSettings	Menu/ExpandMacros.cpp	/^GetMapSettings()$/;"	f	file:
GetMargin	Renderer/ButtonRenderer.cpp	/^ButtonFrameRenderer::GetMargin()$/;"	f	class:ButtonFrameRenderer
GetMask	Screen/Pen.hpp	/^  constexpr unsigned GetMask() const {$/;"	f	class:Pen
GetMassUnit	Profile/UnitsConfig.cpp	/^GetMassUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetMaxDt	Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::GetMaxDt() const$/;"	f	class:SelfTimingKalmanFilter1d
GetMaxElevation	Terrain/RasterTileCache.hpp	/^  TerrainHeight GetMaxElevation() const {$/;"	f	class:RasterTileCache
GetMaxN	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetMaxN() const$/;"	f	class:ThermalBand
GetMaxNumber	Form/DigitEntry.hpp	/^    constexpr unsigned GetMaxNumber() const {$/;"	f	struct:CoordinateFormat::Column
GetMaxSafeVolume	Audio/PCMMixer.hpp	/^  static constexpr unsigned GetMaxSafeVolume() {$/;"	f	class:final
GetMaxSafeVolume	Audio/PCMMixerDataSource.hpp	/^  static constexpr unsigned GetMaxSafeVolume() {$/;"	f	class:PCMMixerDataSource
GetMaxSize	Engine/Trace/Trace.hpp	/^  unsigned GetMaxSize() const {$/;"	f	class:Trace
GetMaxSpeed	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double GetMaxSpeed() const {$/;"	f	class:AirspaceAircraftPerformance
GetMaxTime	Replay/CatmullRomInterpolator.hpp	/^  GetMaxTime() const$/;"	f	class:CatmullRomInterpolator
GetMaxValue	Audio/VolumeController.hpp	/^  static constexpr unsigned GetMaxValue() {$/;"	f	class:final
GetMaxW	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetMaxW() const$/;"	f	class:ThermalBand
GetMaxWorkingHeight	FlightStatistics.cpp	/^FlightStatistics::GetMaxWorkingHeight() const$/;"	f	class:FlightStatistics
GetMaxX	Math/XYDataStore.hpp	/^  double GetMaxX() const {$/;"	f	class:XYDataStore
GetMaxY	Math/XYDataStore.hpp	/^  double GetMaxY() const {$/;"	f	class:XYDataStore
GetMaximum	Terrain/RasterBuffer.cpp	/^RasterBuffer::GetMaximum() const$/;"	f	class:RasterBuffer
GetMaximumControlHeight	Screen/Layout.hpp	/^  GetMaximumControlHeight()$/;"	f	namespace:Layout
GetMaximumHeight	Widget/RowFormWidget.cpp	/^GetMaximumHeight(const WndProperty &control, const DialogLook &look,$/;"	f	file:
GetMaximumHeight	Widget/RowFormWidget.cpp	/^RowFormWidget::Row::GetMaximumHeight(const DialogLook &look,$/;"	f	class:RowFormWidget::Row
GetMaximumLegDistance	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetMaximumLegDistance() const$/;"	f	class:TaskLeg
GetMaximumSize	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::GetMaximumSize() const$/;"	f	class:PolarShapeEditWidget
GetMaximumSize	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::GetMaximumSize() const$/;"	f	class:ArrowPagerWidget
GetMaximumSize	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::GetMaximumSize() const$/;"	f	class:ButtonPanelWidget
GetMaximumSize	Widget/ButtonWidget.cpp	/^ButtonWidget::GetMaximumSize() const$/;"	f	class:ButtonWidget
GetMaximumSize	Widget/ListWidget.cpp	/^ListWidget::GetMaximumSize() const$/;"	f	class:ListWidget
GetMaximumSize	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::GetMaximumSize() const$/;"	f	class:OffsetButtonsWidget
GetMaximumSize	Widget/PagerWidget.cpp	/^PagerWidget::GetMaximumSize() const$/;"	f	class:PagerWidget
GetMaximumSize	Widget/RowFormWidget.cpp	/^RowFormWidget::GetMaximumSize() const$/;"	f	class:RowFormWidget
GetMaximumSize	Widget/SolidWidget.cpp	/^SolidWidget::GetMaximumSize() const$/;"	f	class:SolidWidget
GetMaximumSize	Widget/TabWidget.cpp	/^TabWidget::GetMaximumSize() const$/;"	f	class:TabWidget
GetMaximumSize	Widget/TextWidget.cpp	/^TextWidget::GetMaximumSize() const$/;"	f	class:TextWidget
GetMaximumSize	Widget/TwoWidgets.cpp	/^TwoWidgets::GetMaximumSize() const$/;"	f	class:TwoWidgets
GetMaximumSize	Widget/Widget.cpp	/^NullWidget::GetMaximumSize() const$/;"	f	class:NullWidget
GetMeanSunLongitude	Math/SunEphemeris.cpp	/^SunEphemeris::GetMeanSunLongitude(double d)$/;"	f	class:SunEphemeris
GetMeanX	Math/LeastSquares.hpp	/^  double GetMeanX() const {$/;"	f	class:LeastSquares
GetMeanY	Math/LeastSquares.hpp	/^  double GetMeanY() const {$/;"	f	class:LeastSquares
GetMenu	Input/InputEvents.cpp	/^InputEvents::GetMenu(const TCHAR *mode)$/;"	f	class:InputEvents
GetMenuItem	Input/InputConfig.hpp	/^  const MenuItem &GetMenuItem(unsigned mode, unsigned location) const {$/;"	f	struct:InputConfig
GetMessage	Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::GetMessage()$/;"	f	class:IMI::MessageParser
GetMiddle	Gauge/ThermalAssistantRenderer.hpp	/^  const PixelPoint &GetMiddle() const {$/;"	f	class:ThermalAssistantRenderer
GetMiddle	Math/ARange.hpp	/^  Angle GetMiddle() const {$/;"	f	struct:AngleRange
GetMiddle	Math/Line2D.hpp	/^  constexpr Point GetMiddle() const {$/;"	f	struct:Line2D
GetMiddleX	Math/XYDataStore.hpp	/^  double GetMiddleX() const {$/;"	f	class:XYDataStore
GetMinMax	Renderer/TrailRenderer.cpp	/^GetMinMax(TrailSettings::Type type, const TracePointVector &trace)$/;"	f	file:
GetMinPointsForShapeType	Topography/XShape.cpp	/^GetMinPointsForShapeType(int shapelib_type)$/;"	f	file:
GetMinScreenDistance	Projection/WindowProjection.hpp	/^  unsigned GetMinScreenDistance() const$/;"	f	class:WindowProjection
GetMinTime	Replay/CatmullRomInterpolator.hpp	/^  GetMinTime() const$/;"	f	class:CatmullRomInterpolator
GetMinWorkingHeight	FlightStatistics.cpp	/^FlightStatistics::GetMinWorkingHeight() const$/;"	f	class:FlightStatistics
GetMinX	Math/XYDataStore.hpp	/^  double GetMinX() const {$/;"	f	class:XYDataStore
GetMinY	Math/XYDataStore.hpp	/^  double GetMinY() const {$/;"	f	class:XYDataStore
GetMinimumButtonWidth	Dialogs/dlgQuickMenu.cpp	/^QuickMenuButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:QuickMenuButtonRenderer
GetMinimumButtonWidth	Renderer/BitmapButtonRenderer.cpp	/^BitmapButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:BitmapButtonRenderer
GetMinimumButtonWidth	Renderer/ButtonRenderer.cpp	/^ButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:ButtonRenderer
GetMinimumButtonWidth	Renderer/TextButtonRenderer.cpp	/^TextButtonRenderer::GetMinimumButtonWidth() const$/;"	f	class:TextButtonRenderer
GetMinimumControlHeight	Screen/Layout.hpp	/^  GetMinimumControlHeight()$/;"	f	namespace:Layout
GetMinimumHeight	Widget/RowFormWidget.cpp	/^GetMinimumHeight(const WndProperty &control, const DialogLook &look,$/;"	f	file:
GetMinimumHeight	Widget/RowFormWidget.cpp	/^RowFormWidget::Row::GetMinimumHeight(const DialogLook &look,$/;"	f	class:RowFormWidget::Row
GetMinimumLegDistance	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetMinimumLegDistance() const$/;"	f	class:TaskLeg
GetMinimumPointDistance	Topography/TopographyFile.cpp	/^TopographyFile::GetMinimumPointDistance(unsigned level) const$/;"	f	class:TopographyFile
GetMinimumSize	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::GetMinimumSize() const$/;"	f	class:PolarShapeEditWidget
GetMinimumSize	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::GetMinimumSize() const$/;"	f	class:ArrowPagerWidget
GetMinimumSize	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::GetMinimumSize() const$/;"	f	class:ButtonPanelWidget
GetMinimumSize	Widget/ButtonWidget.cpp	/^ButtonWidget::GetMinimumSize() const$/;"	f	class:ButtonWidget
GetMinimumSize	Widget/ListWidget.cpp	/^ListWidget::GetMinimumSize() const$/;"	f	class:ListWidget
GetMinimumSize	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::GetMinimumSize() const$/;"	f	class:OffsetButtonsWidget
GetMinimumSize	Widget/PagerWidget.cpp	/^PagerWidget::GetMinimumSize() const$/;"	f	class:PagerWidget
GetMinimumSize	Widget/RowFormWidget.cpp	/^RowFormWidget::GetMinimumSize() const$/;"	f	class:RowFormWidget
GetMinimumSize	Widget/SolidWidget.cpp	/^SolidWidget::GetMinimumSize() const$/;"	f	class:SolidWidget
GetMinimumSize	Widget/TabWidget.cpp	/^TabWidget::GetMinimumSize() const$/;"	f	class:TabWidget
GetMinimumSize	Widget/TextWidget.cpp	/^TextWidget::GetMinimumSize() const$/;"	f	class:TextWidget
GetMinimumSize	Widget/TwoWidgets.cpp	/^TwoWidgets::GetMinimumSize() const$/;"	f	class:TwoWidgets
GetMinimumSize	Widget/Widget.cpp	/^NullWidget::GetMinimumSize() const$/;"	f	class:NullWidget
GetMinimumWidth	Form/Button.cpp	/^Button::GetMinimumWidth() const$/;"	f	class:Button
GetMinute	Time/RoughTime.hpp	/^  constexpr unsigned GetMinute() const {$/;"	f	class:RoughTime
GetMinuteOfDay	Time/BrokenTime.hpp	/^  unsigned GetMinuteOfDay() const {$/;"	f	struct:BrokenTime
GetMinuteOfDay	Time/RoughTime.hpp	/^  constexpr unsigned GetMinuteOfDay() const {$/;"	f	class:RoughTime
GetMode	Engine/Task/TaskManager.hpp	/^  TaskType GetMode() const {$/;"	f	class:TaskManager
GetModifySerial	Engine/Trace/Trace.hpp	/^  const Serial &GetModifySerial() const {$/;"	f	class:Trace
GetMousePosition	Event/Poll/InputQueue.hpp	/^  PixelPoint GetMousePosition() const {$/;"	f	class:DisplayOrientation
GetMousePosition	Event/Poll/Queue.hpp	/^  PixelPoint GetMousePosition() const {$/;"	f	class:final
GetMutatedPointType	Engine/Task/Factory/AATTaskFactory.cpp	/^AATTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:AATTaskFactory
GetMutatedPointType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:AbstractTaskFactory
GetMutatedPointType	Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:FAITaskFactory
GetMutatedPointType	Engine/Task/Factory/MatTaskFactory.cpp	/^MatTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:MatTaskFactory
GetMutatedPointType	Engine/Task/Factory/RTTaskFactory.cpp	/^RTTaskFactory::GetMutatedPointType(const OrderedTaskPoint &tp) const$/;"	f	class:RTTaskFactory
GetName	Device/Declaration.hpp	/^  const TCHAR *GetName(const unsigned i) const {$/;"	f	struct:Declaration
GetName	Engine/Airspace/AbstractAirspace.hpp	/^  const TCHAR *GetName() const {$/;"	f	class:AbstractAirspace
GetName	Engine/Task/Ordered/OrderedTask.hpp	/^  const StaticString<64> &GetName() const {$/;"	f	class:final
GetName	InfoBoxes/Content/Factory.cpp	/^InfoBoxFactory::GetName(Type type)$/;"	f	class:InfoBoxFactory
GetName	Repository/AvailableFile.hpp	/^  const char *GetName() const {$/;"	f	struct:AvailableFile
GetName	Task/Serialiser.cpp	/^GetName(TaskPointType type, bool mode_optional_start)$/;"	f	file:
GetName	Task/Serialiser.cpp	/^GetName(const OrderedTaskPoint &tp, bool mode_optional_start)$/;"	f	file:
GetName	Task/TaskFile.cpp	/^TaskFile::GetName(unsigned index) const$/;"	f	class:TaskFile
GetName	Task/TaskStore.cpp	/^TaskStore::GetName(unsigned index) const$/;"	f	class:TaskStore
GetName	Task/TaskStore.hpp	/^    tstring::const_pointer GetName() const {$/;"	f	struct:TaskStore::Item
GetName	Units/UnitsStore.cpp	/^Units::Store::GetName(unsigned i)$/;"	f	class:Units::Store
GetName	XML/DataNodeXML.cpp	/^ConstDataNodeXML::GetName() const$/;"	f	class:ConstDataNodeXML
GetName	XML/Node.hpp	/^  const TCHAR *GetName() const {$/;"	f	class:XMLNode
GetNameFromAddress	Android/BluetoothHelper.cpp	/^BluetoothHelper::GetNameFromAddress(JNIEnv *env, const char *address)$/;"	f	class:BluetoothHelper
GetNanoSetting	Device/Driver/LX/Settings.cpp	/^LXDevice::GetNanoSetting(const char *name) const$/;"	f	class:LXDevice
GetNative	Screen/Bitmap.hpp	/^  ConstImageBuffer<BitmapPixelTraits> GetNative() const {$/;"	f	class:final
GetNative	Screen/Bitmap.hpp	/^  GLTexture *GetNative() const {$/;"	f	class:final
GetNative	Screen/Bitmap.hpp	/^  HBITMAP GetNative() const {$/;"	f	class:final
GetNative	Screen/GDI/Color.hpp	/^  constexpr COLORREF GetNative() const {$/;"	f	class:Color
GetNativeSize	Screen/EGL/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeSize	Screen/FB/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeSize	Screen/GLX/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeSize	Screen/SDL/TopCanvas.cpp	/^TopCanvas::GetNativeSize() const$/;"	f	class:TopCanvas
GetNativeValue	Screen/PortableColor.hpp	/^  constexpr uint16_t GetNativeValue() const {$/;"	f	class:RGB555Color
GetNativeValue	Screen/PortableColor.hpp	/^  constexpr uint16_t GetNativeValue() const {$/;"	f	class:RGB565Color
GetNearest	Engine/Route/AirspaceRoute.cpp	/^  AIVResult GetNearest() const {$/;"	f	class:final
GetNearest	Engine/Waypoint/Waypoints.cpp	/^Waypoints::GetNearest(const GeoPoint &loc, double range) const$/;"	f	class:Waypoints
GetNearestIf	Engine/Waypoint/Waypoints.cpp	/^Waypoints::GetNearestIf(const GeoPoint &loc, double range,$/;"	f	class:Waypoints
GetNearestLandable	Engine/Waypoint/Waypoints.cpp	/^Waypoints::GetNearestLandable(const GeoPoint &loc, double range) const$/;"	f	class:Waypoints
GetNearestTime	Weather/Rasp/RaspStore.cpp	/^RaspStore::GetNearestTime(unsigned item_index, unsigned time_index) const$/;"	f	class:RaspStore
GetNetState	Net/State.cpp	/^GetNetState()$/;"	f
GetNetState	Net/State.hpp	/^GetNetState()$/;"	f
GetNettoHeight	Form/ScrollBar.hpp	/^  int GetNettoHeight() const {$/;"	f	class:ScrollBar
GetNettoVarioAvailable	Computer/WaveComputer.cpp	/^GetNettoVarioAvailable(const NMEAInfo &basic)$/;"	f	file:
GetNewDisplayMode	DisplayMode.cpp	/^GetNewDisplayMode(const InfoBoxSettings &settings, const UIState &ui_state,$/;"	f
GetNewWarningPtr	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetNewWarningPtr(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
GetNext	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint *GetNext() {$/;"	f	class:OrderedTaskPoint
GetNext	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  const OrderedTaskPoint *GetNext() const {$/;"	f	class:OrderedTaskPoint
GetNext	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetNext() const$/;"	f	class:TaskLeg
GetNext	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetNext()$/;"	f	class:TaskLeg
GetNext	OS/Args.hpp	/^  const char *GetNext() {$/;"	f	class:Args
GetNextChar	XML/Parser.cpp	/^GetNextChar(XML::Parser *pXML)$/;"	f	file:
GetNextEnabledItemIndex	Form/GridView.cpp	/^GridView::GetNextEnabledItemIndex(signed currIndex, Direction direction) const$/;"	f	class:GridView
GetNextItemIndex	Form/GridView.cpp	/^GridView::GetNextItemIndex(unsigned currIndex, Direction direction) const$/;"	f	class:GridView
GetNextLegEqThermal	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetNextLegEqThermal(double current_wind, double next_wind) const$/;"	f	class:GlidePolar
GetNextLegVector	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::GetNextLegVector() const$/;"	f	class:OrderedTaskPoint
GetNextLegVector	Engine/Task/Points/TaskPoint.cpp	/^TaskPoint::GetNextLegVector() const$/;"	f	class:TaskPoint
GetNextRow	Screen/RawBitmap.hpp	/^  RawColor *GetNextRow(RawColor *row) {$/;"	f	class:final
GetNextScaleThreshold	Topography/TopographyFile.hpp	/^  double GetNextScaleThreshold(double map_scale) const {$/;"	f	class:TopographyFile
GetNextScaleThreshold	Topography/TopographyStore.cpp	/^TopographyStore::GetNextScaleThreshold(double map_scale) const$/;"	f	class:TopographyStore
GetNextToken	XML/Parser.cpp	/^XML::GetNextToken(Parser *pXML)$/;"	f	class:XML
GetNodeValue	Engine/Route/AStar.hpp	/^  AStarPriorityValue GetNodeValue(const Node &node) const {$/;"	f	class:AStar
GetNominalLegDistance	Engine/Task/Points/TaskLeg.hpp	/^  double GetNominalLegDistance() const {$/;"	f	class:TaskLeg
GetNominalLegVector	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetNominalLegVector() const$/;"	f	class:TaskLeg
GetNominalPoints	Engine/Task/Points/SampledTaskPoint.hpp	/^  const SearchPointVector &GetNominalPoints() const {$/;"	f	class:SampledTaskPoint
GetNorth	Geo/GeoBounds.hpp	/^  constexpr Angle GetNorth() const {$/;"	f	class:GeoBounds
GetNorthEast	Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetNorthEast() const {$/;"	f	class:GeoBounds
GetNorthUp	Gauge/BigTrafficWidget.cpp	/^  bool GetNorthUp() const {$/;"	f	class:FlarmTrafficControl
GetNorthUp	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::GetNorthUp() const$/;"	f	class:TrafficWidget
GetNorthWest	Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetNorthWest() const {$/;"	f	class:GeoBounds
GetNow	Time/PeriodClock.hpp	/^  static auto GetNow() {$/;"	f	class:PeriodClock
GetNumColumns	Form/GridView.hpp	/^  unsigned GetNumColumns() const {$/;"	f	class:GridView
GetNumFiles	Form/DataField/File.cpp	/^FileDataField::GetNumFiles() const$/;"	f	class:FileDataField
GetNumMainMenuItems	Form/TabMenuDisplay.hpp	/^  unsigned GetNumMainMenuItems() const {$/;"	f	class:final
GetNumPages	Form/TabMenuDisplay.hpp	/^  unsigned GetNumPages() const {$/;"	f	class:final
GetNumRows	Form/GridView.hpp	/^  unsigned GetNumRows() const {$/;"	f	class:GridView
GetNumberOfFlights	Device/Driver/LX/NanoLogger.cpp	/^GetNumberOfFlights(Port &port, PortNMEAReader &reader,$/;"	f	file:
GetOZSize	Engine/Task/Factory/AbstractTaskFactory.cpp	/^GetOZSize(const ObservationZonePoint &oz)$/;"	f	file:
GetObject	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  CylinderZone &GetObject() {$/;"	f	class:CylinderZoneEditWidget
GetObject	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  const CylinderZone &GetObject() const {$/;"	f	class:CylinderZoneEditWidget
GetObject	Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  KeyholeZone &GetObject() {$/;"	f	class:KeyholeZoneEditWidget
GetObject	Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  const KeyholeZone &GetObject() const {$/;"	f	class:KeyholeZoneEditWidget
GetObject	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  LineSectorZone &GetObject() {$/;"	f	class:LineSectorZoneEditWidget
GetObject	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  const LineSectorZone &GetObject() const {$/;"	f	class:LineSectorZoneEditWidget
GetObject	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  ObservationZone &GetObject() {$/;"	f	class:ObservationZoneEditWidget
GetObject	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  const ObservationZone &GetObject() const {$/;"	f	class:ObservationZoneEditWidget
GetObject	Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  SectorZone &GetObject() {$/;"	f	class:SectorZoneEditWidget
GetObject	Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  const SectorZone &GetObject() const {$/;"	f	class:SectorZoneEditWidget
GetObservationZone	Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  ObservationZonePoint &GetObservationZone() {$/;"	f	class:ObservationZoneClient
GetObservationZone	Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  const ObservationZonePoint &GetObservationZone() const {$/;"	f	class:ObservationZoneClient
GetOffset	Topography/XShape.hpp	/^  unsigned GetOffset() const {$/;"	f	class:XShape
GetOldest	Util/Cache.hxx	/^	Item &GetOldest() {$/;"	f	class:Cache
GetOldestIGCFile	Logger/IGCFileCleanup.cpp	/^  Path GetOldestIGCFile() const {$/;"	f	class:OldIGCFileFinder
GetOptionalStartPoint	Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskPoint &GetOptionalStartPoint(unsigned i) const {$/;"	f	class:final
GetOptionalStartPointCount	Engine/Task/Ordered/OrderedTask.hpp	/^  unsigned GetOptionalStartPointCount() const {$/;"	f	class:final
GetOptionalStartPoints	Engine/Task/Ordered/OrderedTask.hpp	/^  ConstTaskPointList GetOptionalStartPoints() const {$/;"	f	class:final
GetOrderedTask	Engine/Task/TaskManager.hpp	/^  const OrderedTask &GetOrderedTask() const {$/;"	f	class:TaskManager
GetOrderedTaskSettings	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetOrderedTaskSettings() const$/;"	f	class:AbstractTaskFactory
GetOrderedTaskSettings	Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskSettings &GetOrderedTaskSettings() const {$/;"	f	class:final
GetOrderedTaskSettings	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::GetOrderedTaskSettings() const$/;"	f	class:ProtectedTaskManager
GetOrigin	Engine/Route/FlatTriangleFan.hpp	/^  AFlatGeoPoint GetOrigin() const {$/;"	f	class:FlatTriangleFan
GetOrigin	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetOrigin() const$/;"	f	class:TaskLeg
GetOverlay	MapWindow/MapWindow.hpp	/^  const MapOverlay *GetOverlay() const {$/;"	f	class:MapWindow
GetPageMainIndex	Form/TabMenuDisplay.hpp	/^  unsigned GetPageMainIndex(unsigned page) const {$/;"	f	class:final
GetPageNum	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::GetPageNum(MenuTabIndex i) const$/;"	f	class:TabMenuDisplay
GetPageParentCaption	Form/TabMenuDisplay.hpp	/^  const TCHAR *GetPageParentCaption(unsigned page) const {$/;"	f	class:final
GetPaintCanvas	Screen/DoubleBufferWindow.hpp	/^  Canvas &GetPaintCanvas() {$/;"	f	class:DoubleBufferWindow
GetPairs	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::GetPairs(const SearchPointVector &spv,$/;"	f	class:AirspaceRoute
GetPanelIndex	ActionInterface.cpp	/^GetPanelIndex(const UIState &ui_state)$/;"	f	file:
GetParameter	Weather/Rasp/RaspCache.hpp	/^  unsigned GetParameter() const {$/;"	f	class:RaspCache
GetParameter	Weather/Rasp/RaspRenderer.hpp	/^  unsigned GetParameter() const {$/;"	f	class:RaspRenderer
GetParent	OS/Path.cpp	/^Path::GetParent() const$/;"	f	class:Path
GetParent	OS/Path.hpp	/^  AllocatedPath GetParent() const {$/;"	f	class:AllocatedPath
GetPascal	Atmosphere/Pressure.hpp	/^  double GetPascal() const {$/;"	f	class:AtmosphericPressure
GetPath	Dialogs/DownloadFilePicker.cpp	/^  AllocatedPath &&GetPath() {$/;"	f	class:final
GetPath	Profile/PathValue.cpp	/^ProfileMap::GetPath(const char *key) const$/;"	f	class:ProfileMap
GetPath	Profile/Profile.cpp	/^Profile::GetPath()$/;"	f	class:Profile
GetPath	Profile/Profile.cpp	/^Profile::GetPath(const char *key)$/;"	f	class:Profile
GetPath	Task/TaskStore.cpp	/^TaskStore::GetPath(unsigned index) const$/;"	f	class:TaskStore
GetPath	Task/TaskStore.hpp	/^    Path GetPath() const {$/;"	f	struct:TaskStore::Item
GetPathBase	Profile/PathValue.cpp	/^ProfileMap::GetPathBase(const char *key) const$/;"	f	class:ProfileMap
GetPathFile	Form/DataField/File.cpp	/^FileDataField::GetPathFile() const$/;"	f	class:FileDataField
GetPathIsEqual	Profile/PathValue.cpp	/^ProfileMap::GetPathIsEqual(const char *key, Path value) const$/;"	f	class:ProfileMap
GetPathIsEqual	Profile/Profile.cpp	/^Profile::GetPathIsEqual(const char *key, Path value)$/;"	f	class:Profile
GetPen	Look/ChartLook.hpp	/^  const Pen &GetPen(Style style) const {$/;"	f	struct:ChartLook
GetPenWidth	Topography/TopographyFile.hpp	/^  unsigned GetPenWidth() const {$/;"	f	class:TopographyFile
GetPercentScale	UISettings.hpp	/^  unsigned GetPercentScale() const {$/;"	f	struct:UISettings
GetPercentile	Math/Histogram.cpp	/^double Histogram::GetPercentile(const double p) const$/;"	f	class:Histogram
GetPersistentCallback	Lua/Persistent.cpp	/^GetPersistentCallback(lua_State *L)$/;"	f	file:
GetPilot	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetPilot(TCHAR *buffer, size_t length, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetPitch	Screen/Custom/UncompressedImage.hpp	/^  unsigned GetPitch() const {$/;"	f	class:UncompressedImage
GetPixel	Screen/GDI/Canvas.hpp	/^  HWColor GetPixel(int x, int y) const {$/;"	f	class:Canvas
GetPixelTraits	Screen/Memory/RasterCanvas.hpp	/^  PixelTraits &GetPixelTraits() {$/;"	f	class:RasterCanvas
GetPlaneRegistration	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetPlaneRegistration(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetPlaneType	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetPlaneType(TCHAR *buffer, size_t length,$/;"	f	class:FlarmDevice
GetPlannedVector	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetPlannedVector() const$/;"	f	class:TaskLeg
GetPoint	Engine/Route/RoutePolar.hpp	/^  const RoutePolarPoint& GetPoint(const int index) const {$/;"	f	class:RoutePolar
GetPoint	Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskPoint &GetPoint(const unsigned i) {$/;"	f	class:final
GetPoint	Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskPoint &GetPoint(const unsigned i) const {$/;"	f	class:final
GetPointDefaultSizes	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetPointDefaultSizes(const TaskPointFactoryType type,$/;"	f	class:AbstractTaskFactory
GetPointDefaultSizes	Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::GetPointDefaultSizes(const TaskPointFactoryType type,$/;"	f	class:FAITaskFactory
GetPointSearchPoints	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GetPointSearchPoints(unsigned tp) const$/;"	f	class:OrderedTask
GetPointer	OS/OverlappedEvent.hpp	/^  OVERLAPPED *GetPointer() {$/;"	f	class:OverlappedEvent
GetPointerAt	Util/AllocatedGrid.hxx	/^	const_iterator GetPointerAt(unsigned x, unsigned y) const {$/;"	f	class:AllocatedGrid
GetPointerAt	Util/AllocatedGrid.hxx	/^	iterator GetPointerAt(unsigned x, unsigned y) {$/;"	f	class:AllocatedGrid
GetPoints	Engine/Airspace/AbstractAirspace.hpp	/^  const SearchPointVector &GetPoints() const {$/;"	f	class:AbstractAirspace
GetPoints	Engine/Task/Ordered/OrderedTask.hpp	/^  ConstTaskPointList GetPoints() const {$/;"	f	class:final
GetPoints	Engine/Trace/Trace.cpp	/^Trace::GetPoints(TracePointVector &v, unsigned min_time,$/;"	f	class:Trace
GetPoints	Engine/Trace/Trace.cpp	/^Trace::GetPoints(TracePointVector& iov) const$/;"	f	class:Trace
GetPoints	Engine/Trace/Trace.cpp	/^Trace::GetPoints(TracePointerVector &v) const$/;"	f	class:Trace
GetPoints	Topography/XShape.hpp	/^  const ShapePoint *GetPoints() const {$/;"	f	class:XShape
GetPoints	UIUtil/TrackingGestureManager.hpp	/^  const PointVector &GetPoints() const {$/;"	f	class:TrackingGestureManager
GetPolarShape	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  const PolarShape &GetPolarShape() const {$/;"	f	class:PolarShapeEditWidget
GetPolygonPoints	Renderer/AirspacePreviewRenderer.cpp	/^GetPolygonPoints(std::vector<BulkPixelPoint> &pts,$/;"	f	file:
GetPortName	Device/Config.cpp	/^DeviceConfig::GetPortName(TCHAR *buffer, size_t max_size) const$/;"	f	class:DeviceConfig
GetPortType	Dialogs/Device/DeviceEditWidget.cpp	/^GetPortType(const DataField &df)$/;"	f	file:
GetPortableColor	Look/TrailLook.cpp	/^GetPortableColor(TrailSettings::Type type, short ramp_h)$/;"	f	file:
GetPosition	Event/Poll/Linux/MergeMouse.hpp	/^  PixelPoint GetPosition() const {$/;"	f	class:final
GetPosition	IO/ZipReader.cpp	/^ZipReader::GetPosition() const$/;"	f	class:ZipReader
GetPosition	UIUtil/KineticManager.cpp	/^KineticManager::GetPosition()$/;"	f	class:KineticManager
GetPosition	Widget/PagerWidget.hpp	/^  const PixelRect &GetPosition() const {$/;"	f	class:PagerWidget
GetPositiveFractional	Form/DigitEntry.cpp	/^DigitEntry::GetPositiveFractional() const$/;"	f	class:DigitEntry
GetPositiveInteger	Form/DigitEntry.cpp	/^DigitEntry::GetPositiveInteger() const$/;"	f	class:DigitEntry
GetPredecessor	Engine/Route/AStar.hpp	/^  Node GetPredecessor(const Node &node) const {$/;"	f	class:AStar
GetPredictedState	Engine/Navigation/Aircraft.cpp	/^AircraftState::GetPredictedState(double in_time) const$/;"	f	class:AircraftState
GetPredictedState	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::GetPredictedState(const double in_time) const$/;"	f	class:AircraftStateFilter
GetPressureFormat	Formatter/Units.cpp	/^GetPressureFormat(Unit unit, bool include_unit)$/;"	f
GetPressureName	Units/Units.cpp	/^Units::GetPressureName()$/;"	f	class:Units
GetPressureStep	Formatter/Units.cpp	/^GetPressureStep(Unit unit)$/;"	f
GetPressureUnit	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetPressureUnit() const {$/;"	f	struct:CAI302::Pilot
GetPressureUnit	Profile/UnitsConfig.cpp	/^GetPressureUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetPrevious	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint *GetPrevious() {$/;"	f	class:OrderedTaskPoint
GetPrevious	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  const OrderedTaskPoint *GetPrevious() const {$/;"	f	class:OrderedTaskPoint
GetPrimaryDataPath	LocalPath.cpp	/^GetPrimaryDataPath()$/;"	f
GetProcAddress	Screen/OpenGL/Function.hpp	/^  GetProcAddress(const char *name)$/;"	f	namespace:OpenGL
GetProduct	Android/NativeView.hpp	/^  const char *GetProduct() {$/;"	f	class:NativeView
GetProjection	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::GetProjection() const$/;"	f	class:ProtectedAirspaceWarningManager
GetProjection	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetProjection() const$/;"	f	class:AirspaceWarningManager
GetProjection	Engine/Airspace/Airspaces.hpp	/^  const FlatProjection &GetProjection() const {$/;"	f	class:Airspaces
GetProjection	Engine/Route/ReachFan.hpp	/^  const FlatProjection &GetProjection() const {$/;"	f	class:ReachFan
GetProjection	Engine/Trace/Trace.hpp	/^  const TaskProjection &GetProjection() const {$/;"	f	class:Trace
GetProjection	MainWindow.cpp	/^MainWindow::GetProjection() const$/;"	f	class:MainWindow
GetProjection	Terrain/RasterMap.hpp	/^  const RasterProjection &GetProjection() const {$/;"	f	class:RasterMap
GetProtectedRoutePlanner	Computer/GlideComputer.hpp	/^  const ProtectedRoutePlanner &GetProtectedRoutePlanner() const {$/;"	f	class:GlideComputer
GetProtectedRoutePlanner	Computer/RouteComputer.hpp	/^  const ProtectedRoutePlanner &GetProtectedRoutePlanner() const {$/;"	f	class:RouteComputer
GetProtectedRoutePlanner	Computer/TaskComputer.hpp	/^  const ProtectedRoutePlanner &GetProtectedRoutePlanner() const {$/;"	f	class:TaskComputer
GetProtectedTaskManager	Computer/GlideComputer.hpp	/^  const ProtectedTaskManager &GetProtectedTaskManager() const {$/;"	f	class:GlideComputer
GetProtectedTaskManager	Computer/TaskComputer.hpp	/^  const ProtectedTaskManager &GetProtectedTaskManager() const {$/;"	f	class:TaskComputer
GetPureGlideAltitudeDifference	Engine/GlideSolvers/GlideResult.hpp	/^  double GetPureGlideAltitudeDifference(double start_altitude) const {$/;"	f	struct:GlideResult
GetQuantisation	Terrain/RasterRenderer.cpp	/^GetQuantisation()$/;"	f	file:
GetRadioText	Engine/Airspace/AbstractAirspace.hpp	/^  const tstring &GetRadioText() const {$/;"	f	class:AbstractAirspace
GetRadius	Engine/Airspace/AirspaceCircle.hpp	/^  const double &GetRadius() const {$/;"	f	class:final
GetRadius	Engine/Task/ObservationZones/CylinderZone.hpp	/^  double GetRadius() const {$/;"	f	class:CylinderZone
GetRadius	Gauge/ThermalAssistantRenderer.hpp	/^  unsigned GetRadius() const{$/;"	f	class:ThermalAssistantRenderer
GetRadius	MapWindow/TargetMapWindow.cpp	/^GetRadius(const ObservationZonePoint &oz)$/;"	f	file:
GetRadius	MapWindow/TargetMapWindow.cpp	/^GetRadius(const OrderedTaskPoint &tp)$/;"	f	file:
GetRandomOZPoint	Replay/TaskAccessor.hpp	/^  GeoPoint GetRandomOZPoint(unsigned index, const double noise) const {$/;"	f	class:TaskAccessor
GetRandomPointInSector	Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::GetRandomPointInSector(const double mag) const$/;"	f	class:CylinderZone
GetRandomPointInSector	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::GetRandomPointInSector(const double mag) const$/;"	f	class:ObservationZoneClient
GetRange	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetRange(unsigned &range, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetRange	TeamCode/TeamCode.cpp	/^TeamCode::GetRange() const$/;"	f	class:TeamCode
GetRasp	DataGlobals.cpp	/^DataGlobals::GetRasp()$/;"	f	class:DataGlobals
GetRasp	MapWindow/MapWindow.hpp	/^  const std::shared_ptr<RaspStore> &GetRasp() const {$/;"	f	class:MapWindow
GetReachPolar	Engine/Task/TaskManager.hpp	/^  const GlidePolar &GetReachPolar() const {$/;"	f	class:TaskManager
GetReadFD	OS/EventPipe.hpp	/^  FileDescriptor GetReadFD() const {$/;"	f	class:EventPipe
GetRealCoefficients	Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients GetRealCoefficients() const {$/;"	f	class:GlidePolar
GetReceived	Net/HTTP/ToBuffer.cpp	/^  size_t GetReceived() const {$/;"	f	class:final
GetRecentTime	Engine/Trace/Trace.cpp	/^Trace::GetRecentTime(const unsigned t) const$/;"	f	class:Trace
GetRecommendedCaptionWidth	Widget/RowFormWidget.cpp	/^RowFormWidget::GetRecommendedCaptionWidth() const$/;"	f	class:RowFormWidget
GetRecommendedColumnWidth	Form/TabDisplay.cpp	/^TabDisplay::GetRecommendedColumnWidth() const$/;"	f	class:TabDisplay
GetRecommendedHeight	Form/TabDisplay.cpp	/^TabButton::GetRecommendedHeight(const DialogLook &look) const$/;"	f	class:TabButton
GetRecommendedRowHeight	Form/TabDisplay.cpp	/^TabDisplay::GetRecommendedRowHeight() const$/;"	f	class:TabDisplay
GetRecommendedSize	Form/DigitEntry.hpp	/^  PixelSize GetRecommendedSize() const {$/;"	f	class:CoordinateFormat
GetRecommendedWidth	Form/TabDisplay.cpp	/^TabButton::GetRecommendedWidth(const DialogLook &look) const$/;"	f	class:TabButton
GetRect	PopupMessage.cpp	/^PopupMessage::GetRect() const$/;"	f	class:PopupMessage
GetRect	PopupMessage.cpp	/^PopupMessage::GetRect(unsigned width, unsigned height) const$/;"	f	class:PopupMessage
GetRect	Screen/FB/TopCanvas.cpp	/^TopCanvas::GetRect() const$/;"	f	class:TopCanvas
GetRect	Screen/GDI/Canvas.hpp	/^  PixelRect GetRect() const {$/;"	f	class:Canvas
GetRect	Screen/Memory/Canvas.hpp	/^  PixelRect GetRect() const {$/;"	f	class:Canvas
GetRect	Screen/OpenGL/Canvas.hpp	/^  PixelRect GetRect() const {$/;"	f	class:Canvas
GetRect	Screen/OpenGL/Texture.hpp	/^  PixelRect GetRect() const {$/;"	f	class:GLTexture
GetRect	Screen/SDL/TopCanvas.cpp	/^TopCanvas::GetRect() const$/;"	f	class:TopCanvas
GetReference	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  const GeoPoint &GetReference() const {$/;"	f	class:ObservationZonePoint
GetReferenceLocation	Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::GetReferenceLocation() const$/;"	f	class:AirspacePolygon
GetReferenceMass	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetReferenceMass() const {$/;"	f	class:GlidePolar
GetRegularFileInfo	IO/FileCache.cpp	/^GetRegularFileInfo(Path path, FileInfo &info)$/;"	f	file:
GetRemaining	Dialogs/Task/TargetDialog.cpp	/^  const PixelRect &GetRemaining() const {$/;"	f	class:RowLayout
GetRemainingAltitudeDifference	Replay/TaskAccessor.hpp	/^  double GetRemainingAltitudeDifference() const {$/;"	f	class:TaskAccessor
GetRemainingOrZero	Time/TimeoutClock.hpp	/^  std::chrono::steady_clock::duration GetRemainingOrZero() const {$/;"	f	class:TimeoutClock
GetRemainingSigned	Time/TimeoutClock.hpp	/^  std::chrono::steady_clock::duration GetRemainingSigned() const {$/;"	f	class:TimeoutClock
GetRemainingSize	Util/StringBuilder.hxx	/^	constexpr size_type GetRemainingSize() const {$/;"	f	class:StringBuilder
GetRemainingVector	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetRemainingVector(const GeoPoint &ref) const$/;"	f	class:TaskLeg
GetRenderableType	Screen/EGL/TopCanvas.cpp	/^GetRenderableType()$/;"	f	file:
GetRenderer	Form/Button.hpp	/^  ButtonRenderer &GetRenderer() {$/;"	f	class:Button
GetRenderer	Widget/ButtonWidget.hpp	/^  ButtonRenderer &GetRenderer() {$/;"	f	class:ButtonWidget
GetRepeat	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetRepeat() const {$/;"	f	struct:VegaSwitchState
GetRequiredAltitude	Engine/GlideSolvers/GlideResult.hpp	/^  double GetRequiredAltitude() const {$/;"	f	struct:GlideResult
GetRequiredAltitudeWithDrift	Engine/GlideSolvers/GlideResult.hpp	/^  double GetRequiredAltitudeWithDrift() const {$/;"	f	struct:GlideResult
GetResizable	Screen/TopWindow.hpp	/^  bool GetResizable() const {$/;"	f	class:DisplayOrientation
GetResult	Engine/Contest/ContestStatistics.hpp	/^  const ContestResult &GetResult(const int solution_index = -1) const {$/;"	f	struct:ContestStatistics
GetResult	Job/TriStateJob.hpp	/^  TriStateJobResult GetResult() const {$/;"	f	class:final
GetRetrospective	Computer/GlideComputer.hpp	/^  const Retrospective &GetRetrospective() const {$/;"	f	class:GlideComputer
GetRight	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetRight() const {$/;"	f	struct:FlatBoundingBox
GetRight	Screen/Window.hpp	/^  int GetRight() const {$/;"	f	class:Window
GetRiskMC	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetRiskMC(double height_fraction, const double riskGamma) const$/;"	f	class:GlidePolar
GetRoutePlanner	Computer/RouteComputer.hpp	/^  const RoutePlannerGlue &GetRoutePlanner() const {$/;"	f	class:RouteComputer
GetRow	Terrain/HeightMatrix.hpp	/^  const TerrainHeight *GetRow(unsigned y) const {$/;"	f	class:HeightMatrix
GetRow	Widget/RowFormWidget.hpp	/^  Window &GetRow(unsigned i) {$/;"	f	class:RowFormWidget
GetRow	Widget/RowFormWidget.hpp	/^  const Window &GetRow(unsigned i) const {$/;"	f	class:RowFormWidget
GetRowCount	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::GetRowCount() const$/;"	f	class:LargeTextWindow
GetRowCount	Screen/LargeTextWindow.hpp	/^  unsigned GetRowCount() const {$/;"	f	class:LargeTextWindow
GetRowHeight	Form/GridView.hpp	/^  unsigned GetRowHeight() const {$/;"	f	class:GridView
GetRowWidget	Widget/RowFormWidget.hpp	/^  Widget &GetRowWidget(unsigned i) {$/;"	f	class:RowFormWidget
GetSBestLD	Engine/GlideSolvers/GlidePolar.hpp	/^  GetSBestLD() const$/;"	f	class:GlidePolar
GetSHA256	Net/HTTP/ToFile.hpp	/^    const auto &GetSHA256() const {$/;"	f	class:Net::DownloadToFileJob
GetSIU	Logger/LoggerEPE.cpp	/^IGCWriter::GetSIU(const GPSState &gps)$/;"	f	class:IGCWriter
GetSMax	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetSMax() const {$/;"	f	class:GlidePolar
GetSMin	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetSMin() const {$/;"	f	class:GlidePolar
GetSafetyHeight	Engine/Route/RoutePolars.hpp	/^  int GetSafetyHeight() const {$/;"	f	class:RoutePolars
GetSafetyPolar	Engine/Task/TaskManager.hpp	/^  const GlidePolar &GetSafetyPolar() const {$/;"	f	class:TaskManager
GetSampleRate	Audio/ToneSynthesiser.hpp	/^  unsigned GetSampleRate() const {$/;"	f	class:ToneSynthesiser
GetSampledPoints	Engine/Task/Points/SampledTaskPoint.hpp	/^  const SearchPointVector &GetSampledPoints() const {$/;"	f	class:SampledTaskPoint
GetScale	Projection/Projection.hpp	/^  double GetScale() const {$/;"	f	class:Projection
GetScoreExit	Engine/Task/Ordered/Points/ASTPoint.hpp	/^  bool GetScoreExit() const {$/;"	f	class:final
GetScoredDistance	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetScoredDistance(const GeoPoint &ref) const$/;"	f	class:TaskLeg
GetScreenAngle	Projection/Projection.hpp	/^  Angle GetScreenAngle() const {$/;"	f	class:Projection
GetScreenAngleRotation	Projection/Projection.hpp	/^  FastRowRotation GetScreenAngleRotation(int y) const {$/;"	f	class:Projection
GetScreenBounds	Projection/WindowProjection.hpp	/^  const GeoBounds &GetScreenBounds() const {$/;"	f	class:WindowProjection
GetScreenCenter	Projection/WindowProjection.hpp	/^  PixelPoint GetScreenCenter() const {$/;"	f	class:WindowProjection
GetScreenDistance	Projection/WindowProjection.hpp	/^  unsigned GetScreenDistance() const$/;"	f	class:WindowProjection
GetScreenDistanceMeters	Projection/WindowProjection.cpp	/^WindowProjection::GetScreenDistanceMeters() const$/;"	f	class:WindowProjection
GetScreenHeight	Projection/WindowProjection.hpp	/^  unsigned GetScreenHeight() const {$/;"	f	class:WindowProjection
GetScreenOrigin	Projection/Projection.hpp	/^  const PixelPoint &GetScreenOrigin() const {$/;"	f	class:Projection
GetScreenWidth	Projection/WindowProjection.hpp	/^  unsigned GetScreenWidth() const {$/;"	f	class:WindowProjection
GetScreenWidthMeters	Projection/WindowProjection.hpp	/^  double GetScreenWidthMeters() const {$/;"	f	class:WindowProjection
GetScrollHeight	Form/ScrollBar.hpp	/^  int GetScrollHeight() const {$/;"	f	class:ScrollBar
GetSearchPoints	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::GetSearchPoints() const$/;"	f	class:OrderedTaskPoint
GetSearchPoints	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::GetSearchPoints() const$/;"	f	class:SampledTaskPoint
GetSecond	Widget/TwoWidgets.hpp	/^  Widget &GetSecond() {$/;"	f	class:TwoWidgets
GetSecond	Widget/TwoWidgets.hpp	/^  const Widget &GetSecond() const {$/;"	f	class:TwoWidgets
GetSecondFont	Renderer/TwoTextRowsRenderer.hpp	/^  const Font &GetSecondFont() const {$/;"	f	class:TwoTextRowsRenderer
GetSecondOfDay	Time/BrokenTime.hpp	/^  unsigned GetSecondOfDay() const {$/;"	f	struct:BrokenTime
GetSecondY	Renderer/TwoTextRowsRenderer.hpp	/^  int GetSecondY() const {$/;"	f	class:TwoTextRowsRenderer
GetSectorAngle	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  Angle GetSectorAngle() const {$/;"	f	class:SymmetricSectorZone
GetSectorEnd	Engine/Task/ObservationZones/SectorZone.hpp	/^  const GeoPoint& GetSectorEnd() const {$/;"	f	class:SectorZone
GetSectorStart	Engine/Task/ObservationZones/SectorZone.hpp	/^  const GeoPoint& GetSectorStart() const {$/;"	f	class:SectorZone
GetSelectedAddress	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  const auto &GetSelectedAddress() const {$/;"	f	class:final
GetSelectedAirspace	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::GetSelectedAirspace() const$/;"	f	class:AirspaceWarningListWidget
GetSelectedPath	Dialogs/ProfileListDialog.cpp	/^  Path GetSelectedPath() const {$/;"	f	class:final
GetSensorName	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::GetSensorName(unsigned i)$/;"	f	class:IMI
GetSerial	Airspace/AirspaceWarningCopy.hpp	/^  unsigned GetSerial() const {$/;"	f	class:AirspaceWarningCopy
GetSerial	Engine/Airspace/AirspaceWarningManager.hpp	/^  unsigned GetSerial() const {$/;"	f	class:AirspaceWarningManager
GetSerial	Engine/Airspace/Airspaces.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:Airspaces
GetSerial	Engine/Waypoint/Waypoints.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:Waypoints
GetSerial	Terrain/RasterMap.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:RasterMap
GetSerial	Terrain/RasterTerrain.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:RasterTerrain
GetSerial	Terrain/RasterTileCache.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:RasterTileCache
GetSerial	Topography/TopographyFile.hpp	/^  const Serial &GetSerial() const {$/;"	f	class:TopographyFile
GetSerial	Topography/TopographyStore.hpp	/^  unsigned GetSerial() const {$/;"	f	class:TopographyStore
GetServer	Tracking/LiveTrack24.cpp	/^LiveTrack24::GetServer()$/;"	f	class:LiveTrack24
GetSetting	Device/Driver/FLARM/Settings.cpp	/^FlarmDevice::GetSetting(const char *name) const$/;"	f	class:FlarmDevice
GetSetting	Device/Driver/Vega/Settings.cpp	/^VegaDevice::GetSetting(const char *name) const$/;"	f	class:VegaDevice
GetSettings	Terrain/TerrainRenderer.hpp	/^  const TerrainRendererSettings &GetSettings() const {$/;"	f	class:TerrainRenderer
GetSeverityString	FLARM/Error.hpp	/^  const TCHAR *GetSeverityString() const {$/;"	f
GetShape	Engine/Airspace/AbstractAirspace.hpp	/^  Shape GetShape() const {$/;"	f	class:AbstractAirspace
GetShape	Engine/Task/ObservationZones/ObservationZone.hpp	/^  Shape GetShape() const {$/;"	f	class:ObservationZone
GetShapeEditor	Dialogs/Plane/PlanePolarDialog.cpp	/^  PolarShapeEditWidget &GetShapeEditor() {$/;"	f	class:final	file:
GetShell	Event/Poll/Queue.hpp	/^  struct wl_shell *GetShell() {$/;"	f	class:final
GetShell	Event/Poll/WaylandQueue.hpp	/^  struct wl_shell *GetShell() {$/;"	f	class:final
GetShowMenuButtonRect	MainWindow.cpp	/^GetShowMenuButtonRect(const PixelRect rc)$/;"	f	file:
GetSinkTone	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetSinkTone() const {$/;"	f	struct:CAI302::Pilot
GetSize	Android/NativeView.hpp	/^  PixelSize GetSize() const {$/;"	f	class:NativeView
GetSize	Engine/Airspace/Airspaces.cpp	/^Airspaces::GetSize() const$/;"	f	class:Airspaces
GetSize	Form/TabDisplay.hpp	/^  unsigned GetSize() const {$/;"	f	class:final
GetSize	Hardware/DisplaySize.cpp	/^Display::GetSize(PixelSize fallback)$/;"	f	class:Display
GetSize	IO/ConvertLineReader.cpp	/^ConvertLineReader::GetSize() const$/;"	f	class:ConvertLineReader
GetSize	IO/FileLineReader.cpp	/^FileLineReaderA::GetSize() const$/;"	f	class:FileLineReaderA
GetSize	IO/LineReader.hpp	/^  virtual long GetSize() const {$/;"	f	class:LineReader
GetSize	IO/ZipLineReader.cpp	/^ZipLineReaderA::GetSize() const$/;"	f	class:ZipLineReaderA
GetSize	IO/ZipReader.cpp	/^ZipReader::GetSize() const$/;"	f	class:ZipReader
GetSize	OS/FileUtil.cpp	/^File::GetSize(Path path)$/;"	f	class:File
GetSize	Screen/Bitmap.hpp	/^  PixelSize GetSize() const {$/;"	f	class:final
GetSize	Screen/Bitmap.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:final
GetSize	Screen/Custom/Cache.cpp	/^TextCache::GetSize(const Font &font, const char *text)$/;"	f	class:TextCache
GetSize	Screen/Custom/TopCanvas.hpp	/^  PixelSize GetSize() const {$/;"	f	class:DisplayOrientation
GetSize	Screen/Custom/UncompressedImage.hpp	/^  PixelSize GetSize() const {$/;"	f	class:UncompressedImage
GetSize	Screen/FB/TopCanvas.cpp	/^GetSize(const struct fb_var_screeninfo &vinfo)$/;"	f	file:
GetSize	Screen/GDI/Bitmap.cpp	/^Bitmap::GetSize() const$/;"	f	class:Bitmap
GetSize	Screen/GDI/Canvas.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:Canvas
GetSize	Screen/Icon.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:MaskedIcon
GetSize	Screen/Memory/Canvas.hpp	/^  PixelSize GetSize() const {$/;"	f	class:Canvas
GetSize	Screen/OpenGL/Canvas.hpp	/^  PixelSize GetSize() const {$/;"	f	class:Canvas
GetSize	Screen/OpenGL/Texture.hpp	/^  const PixelSize &GetSize() const {$/;"	f	class:GLTexture
GetSize	Util/AllocatedGrid.hxx	/^	constexpr unsigned GetSize() const {$/;"	f	class:AllocatedGrid
GetSize	Widget/PagerWidget.hpp	/^  unsigned GetSize() const {$/;"	f	class:PagerWidget
GetSkipSteps	Topography/TopographyFile.cpp	/^TopographyFile::GetSkipSteps(double map_scale) const$/;"	f	class:TopographyFile
GetSkyLinesData	Tracking/TrackingGlue.hpp	/^  const SkyLinesTracking::Data &GetSkyLinesData() const {$/;"	f	class:final
GetSlice	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetSlice(const unsigned index) const$/;"	f	class:ThermalBand
GetSliceCenter	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetSliceCenter(const unsigned index) const$/;"	f	class:ThermalBand
GetSliceHeight	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetSliceHeight(const unsigned index) const$/;"	f	class:ThermalBand
GetSliceIndex	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetSliceIndex(const double height) const$/;"	f	class:ThermalBand
GetSliderHeight	Form/ScrollBar.hpp	/^  int GetSliderHeight() const {$/;"	f	class:ScrollBar
GetSlots	Math/XYDataStore.hpp	/^  const TrivialArray<Slot, 1000> &GetSlots() const {$/;"	f	class:XYDataStore
GetSmallerDistanceUnit	Formatter/Units.cpp	/^GetSmallerDistanceUnit(Unit unit)$/;"	f	file:
GetSnailColorIndex	Renderer/TrailRenderer.cpp	/^GetSnailColorIndex(double vario, double min_vario, double max_vario)$/;"	f	file:
GetSocketError	Net/SocketError.hpp	/^GetSocketError()$/;"	f
GetSolution	Engine/Airspace/AirspaceWarning.hpp	/^  const AirspaceInterceptSolution &GetSolution() const {$/;"	f	class:AirspaceWarning
GetSolution	Engine/Contest/ContestStatistics.hpp	/^  const ContestTraceVector &GetSolution(const int solution_index = -1) const {$/;"	f	struct:ContestStatistics
GetSolution	Engine/Route/RoutePlanner.hpp	/^  const Route &GetSolution() const {$/;"	f	class:RoutePlanner
GetSolution	Task/RoutePlannerGlue.hpp	/^  const Route &GetSolution() const {$/;"	f	class:RoutePlannerGlue
GetSource	IO/ConvertLineReader.hpp	/^  LineReader<char> &GetSource() {$/;"	f	class:ConvertLineReader
GetSouth	Geo/GeoBounds.hpp	/^  constexpr Angle GetSouth() const {$/;"	f	class:GeoBounds
GetSouthEast	Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetSouthEast() const {$/;"	f	class:GeoBounds
GetSouthWest	Geo/GeoBounds.hpp	/^  constexpr GeoPoint GetSouthWest() const {$/;"	f	class:GeoBounds
GetSpacing	Engine/ThermalBand/ThermalBand.hpp	/^     double GetSpacing() const {$/;"	f	class:ThermalBand
GetSparkRect	InfoBoxes/Content/Trace.cpp	/^GetSparkRect(PixelRect rc)$/;"	f	file:
GetSpeed	Engine/Contest/ContestResult.hpp	/^  constexpr double GetSpeed() const {$/;"	f	struct:ContestResult
GetSpeed	Engine/Task/Stats/DistanceStat.hpp	/^  double GetSpeed() const {$/;"	f	class:DistanceStat
GetSpeed	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::GetSpeed() const$/;"	f	class:AircraftStateFilter
GetSpeedCommand	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetSpeedCommand() const {$/;"	f	struct:VegaSwitchState
GetSpeedIncremental	Engine/Task/Stats/DistanceStat.hpp	/^  double GetSpeedIncremental() const {$/;"	f	class:DistanceStat
GetSpeedName	Units/Units.cpp	/^Units::GetSpeedName()$/;"	f	class:Units
GetSpeedUnit	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetSpeedUnit() const {$/;"	f	struct:CAI302::Pilot
GetSpeedUnit	Profile/UnitsConfig.cpp	/^GetSpeedUnit(const ProfileMap &map, const char *key, const char *legacy_key,$/;"	f	file:
GetSprint	Computer/TraceComputer.hpp	/^  const Trace &GetSprint() const {$/;"	f	class:TraceComputer
GetSquaredDistance	Math/Line2D.hpp	/^  constexpr product_type GetSquaredDistance() const {$/;"	f	struct:Line2D
GetStandardFontFace	Look/StandardFonts.hpp	/^GetStandardFontFace()$/;"	f
GetStandardMonospaceFontFace	Look/StandardFonts.hpp	/^GetStandardMonospaceFontFace()$/;"	f
GetStart	Time/RoughTime.hpp	/^  constexpr const RoughTime &GetStart() const {$/;"	f	class:RoughTimeSpan
GetStartAltitude	Engine/GlideSolvers/GlideResult.hpp	/^  double GetStartAltitude() const {$/;"	f	struct:GlideResult
GetStartLocation	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetStartLocation(const TaskAccessor& task, bool previous)$/;"	f	class:TaskAutoPilot
GetStartRadial	Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle GetStartRadial() const {$/;"	f	class:SectorZone
GetStartTypes	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetStartTypes() const {$/;"	f	class:AbstractTaskFactory
GetState	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult GetState(SLAndroidSimpleBufferQueueState *pState) {$/;"	f	class:SLES::AndroidSimpleBufferQueue
GetState	Device/Descriptor.cpp	/^DeviceDescriptor::GetState() const$/;"	f	class:DeviceDescriptor
GetState	Device/Port/AndroidPort.cpp	/^AndroidPort::GetState() const$/;"	f	class:AndroidPort
GetState	Device/Port/DumpPort.cpp	/^DumpPort::GetState() const$/;"	f	class:DumpPort
GetState	Device/Port/K6BtPort.cpp	/^K6BtPort::GetState() const$/;"	f	class:K6BtPort
GetState	Device/Port/NullPort.cpp	/^NullPort::GetState() const$/;"	f	class:NullPort
GetState	Device/Port/SerialPort.cpp	/^SerialPort::GetState() const$/;"	f	class:SerialPort
GetState	Device/Port/TCPPort.cpp	/^TCPPort::GetState() const$/;"	f	class:TCPPort
GetState	Device/Port/TTYPort.cpp	/^TTYPort::GetState() const$/;"	f	class:TTYPort
GetState	Device/Port/UDPPort.cpp	/^UDPPort::GetState() const$/;"	f	class:UDPPort
GetState	Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::GetState() const$/;"	f	class:SmartTaskAdvance
GetState	Form/CheckBox.hpp	/^  bool GetState() const {$/;"	f	class:CheckBoxControl
GetState	Lua/Value.hxx	/^	lua_State *GetState() const {$/;"	f	class:Lua::Value
GetState	Replay/AircraftSim.hpp	/^  AircraftState& GetState() {$/;"	f	class:AircraftSim
GetState	Replay/AircraftSim.hpp	/^  const AircraftState& GetState() const {$/;"	f	class:AircraftSim
GetStationName	Device/Driver/KRT2.cpp	/^KRT2Device::GetStationName(char *station_name, const TCHAR *name)$/;"	f	class:KRT2Device
GetStats	Engine/Contest/ContestManager.hpp	/^  const ContestStatistics &GetStats() const {$/;"	f	class:ContestManager
GetStats	Engine/Task/AbstractTask.hpp	/^  const TaskStats &GetStats() const {$/;"	f	class:AbstractTask
GetStats	Engine/Task/TaskManager.cpp	/^TaskManager::GetStats() const$/;"	f	class:TaskManager
GetStealthMode	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::GetStealthMode(bool &enabled, OperationEnvironment &env)$/;"	f	class:FlarmDevice
GetStep	Form/DataField/Float.hpp	/^  double GetStep() const {$/;"	f	class:final
GetStore	Topography/TopographyRenderer.hpp	/^  const TopographyStore &GetStore() const {$/;"	f	class:TopographyRenderer
GetStore	Weather/Rasp/RaspCache.hpp	/^  const RaspStore &GetStore() const {$/;"	f	class:RaspCache
GetString	Form/DataField/Enum.hpp	/^    const TCHAR *GetString() const {$/;"	f	class:final::Entry
GetSubMenuButton	Form/TabMenuDisplay.hpp	/^  const SubMenuButton &GetSubMenuButton(unsigned page) const {$/;"	f	class:final
GetSubMenuButtonSize	Form/TabMenuDisplay.hpp	/^  const PixelRect &GetSubMenuButtonSize(unsigned i) const {$/;"	f	class:final
GetSystemService	Android/Context.cpp	/^Context::GetSystemService(JNIEnv *env, const char *name)$/;"	f	class:Context
GetSystemService	Android/Context.cpp	/^Context::GetSystemService(JNIEnv *env, jstring name)$/;"	f	class:Context
GetSystemSettings	Blackboard/SettingsBlackboard.hpp	/^  const SystemSettings &GetSystemSettings() const {$/;"	f	class:SettingsBlackboard
GetSystemSettings	Interface.hpp	/^  static inline const SystemSettings &GetSystemSettings() {$/;"	f	namespace:CommonInterface
GetSystemUTCOffset	OS/Clock.cpp	/^GetSystemUTCOffset()$/;"	f
GetTabLineHeight	Form/TabMenuDisplay.cpp	/^GetTabLineHeight()$/;"	f	file:
GetTarget	Engine/Task/Ordered/Points/AATPoint.hpp	/^  const GeoPoint &GetTarget() const {$/;"	f	class:final
GetTarget	Gauge/FlarmTrafficWindow.hpp	/^  const FlarmTraffic *GetTarget() const {$/;"	f	class:FlarmTrafficWindow
GetTarget	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetTarget(const TaskAccessor& task) const$/;"	f	class:TaskAutoPilot
GetTargetHeight	Replay/TaskAccessor.hpp	/^  double GetTargetHeight() const {$/;"	f	class:TaskAccessor
GetTargetHeight	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::GetTargetHeight(const TaskAccessor& task) const$/;"	f	class:TaskAutoPilot
GetTargetLocation	Engine/Task/Ordered/Points/AATPoint.hpp	/^  const GeoPoint &GetTargetLocation() const {$/;"	f	class:final
GetTargetRangeRadial	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::GetTargetRangeRadial(double oldrange) const$/;"	f	class:AATPoint
GetTask	Dialogs/Task/Manager/Internal.hpp	/^  const OrderedTask &GetTask() const {$/;"	f	class:final
GetTask	Task/TaskFile.cpp	/^TaskFile::GetTask(Path path, const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFile
GetTask	Task/TaskFileIGC.cpp	/^TaskFileIGC::GetTask(const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFileIGC
GetTask	Task/TaskFileSeeYou.cpp	/^TaskFileSeeYou::GetTask(const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFileSeeYou
GetTask	Task/TaskFileXCSoar.cpp	/^TaskFileXCSoar::GetTask(const TaskBehaviour &task_behaviour,$/;"	f	class:TaskFileXCSoar
GetTask	Task/TaskStore.cpp	/^TaskStore::GetTask(unsigned index, const TaskBehaviour &task_behaviour)$/;"	f	class:TaskStore
GetTask	Task/TaskStore.cpp	/^TaskStore::Item::GetTask(const TaskBehaviour &task_behaviour)$/;"	f	class:TaskStore::Item
GetTaskAdvance	Engine/Task/Ordered/OrderedTask.hpp	/^  const TaskAdvance &GetTaskAdvance() const {$/;"	f	class:final
GetTaskBehaviour	Engine/Task/TaskManager.hpp	/^  const TaskBehaviour &GetTaskBehaviour() const {$/;"	f	class:TaskManager
GetTaskBehaviour	Task/MapTaskManager.cpp	/^GetTaskBehaviour()$/;"	f	file:
GetTaskData	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::GetTaskData()$/;"	f	class:TargetWidget
GetTaskFactoryType	Task/Deserialiser.cpp	/^GetTaskFactoryType(const ConstDataNode &node)$/;"	f	file:
GetTaskFactoryType	Task/Serialiser.cpp	/^GetTaskFactoryType(TaskFactoryType type)$/;"	f	file:
GetTaskPoint	Engine/Task/Ordered/OrderedTask.hpp	/^  const OrderedTaskPoint &GetTaskPoint(const unsigned index) const {$/;"	f	class:final
GetTaskProjection	Engine/Task/Ordered/OrderedTask.hpp	/^  GetTaskProjection() const {$/;"	f	class:final
GetTaskSpeedName	Units/Units.cpp	/^Units::GetTaskSpeedName()$/;"	f	class:Units
GetTemperatureName	Units/Units.cpp	/^Units::GetTemperatureName()$/;"	f	class:Units
GetTemperatureUnit	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetTemperatureUnit() const {$/;"	f	struct:CAI302::Pilot
GetTemperatureUnit	Profile/UnitsConfig.cpp	/^GetTemperatureUnit(const ProfileMap &map, const char *key,$/;"	f	file:
GetTemporaryPath	IO/FileTransaction.hpp	/^  Path GetTemporaryPath() const {$/;"	f	class:FileTransaction
GetTerrainBase	Engine/Route/ReachFan.hpp	/^  int GetTerrainBase() const {$/;"	f	class:ReachFan
GetTerrainBase	Engine/Route/RoutePlanner.hpp	/^  int GetTerrainBase() const {$/;"	f	class:RoutePlanner
GetTerrainBase	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::GetTerrainBase() const$/;"	f	class:RoutePlannerGlue
GetTerrainBaseFallback	NMEA/Derived.hpp	/^  double GetTerrainBaseFallback() const {$/;"	f	struct:TerrainInfo
GetTerrainCenter	Terrain/RasterTerrain.hpp	/^  GeoPoint GetTerrainCenter() const {$/;"	f	class:RasterTerrain
GetTerrainHeight	Terrain/RasterTerrain.hpp	/^  TerrainHeight GetTerrainHeight(const GeoPoint location) const {$/;"	f	class:RasterTerrain
GetTerrainReachProjection	Engine/Route/RoutePlanner.hpp	/^  const FlatProjection &GetTerrainReachProjection() const {$/;"	f	class:RoutePlanner
GetTerrainReachProjection	Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::GetTerrainReachProjection() const$/;"	f	class:ProtectedRoutePlanner
GetTerrainReachProjection	Task/RoutePlannerGlue.hpp	/^  const FlatProjection &GetTerrainReachProjection() const {$/;"	f	class:RoutePlannerGlue
GetTextColor	Look/DialogLook.hpp	/^    Color GetTextColor(bool is_selected, bool is_focused,$/;"	f	struct:DialogLook::__anon20
GetTextColor	Screen/GDI/Canvas.hpp	/^  Color GetTextColor() const {$/;"	f	class:Canvas
GetTextColor	Screen/Memory/Canvas.hpp	/^  Color GetTextColor() const {$/;"	f	class:Canvas
GetTextColor	Screen/OpenGL/Canvas.hpp	/^  Color GetTextColor() const {$/;"	f	class:Canvas
GetTextN	Menu/ButtonLabel.cpp	/^GetTextN(const TCHAR *src, const TCHAR *src_end,$/;"	f	file:
GetTextPadding	Screen/Layout.hpp	/^  GetTextPadding()$/;"	f	namespace:Layout
GetThinningLevel	Topography/TopographyFile.cpp	/^TopographyFile::GetThinningLevel(double map_scale) const$/;"	f	class:TopographyFile
GetThreshold	Engine/Task/Shapes/FAITriangleSettings.cpp	/^FAITriangleSettings::GetThreshold() const$/;"	f	class:FAITriangleSettings
GetTileCache	Terrain/RasterMap.hpp	/^  RasterTileCache &GetTileCache() {$/;"	f	class:RasterMap
GetTime	Engine/Trace/Point.hpp	/^  unsigned GetTime() const {$/;"	f	class:TracePoint
GetTime	Replay/AircraftSim.hpp	/^  double GetTime() const {$/;"	f	class:AircraftSim
GetTime	Weather/Rasp/RaspCache.cpp	/^RaspCache::GetTime() const$/;"	f	class:RaspCache
GetTimeElapsed	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::GetTimeElapsed() const$/;"	f	class:ThermalBand
GetTimeFraction	Replay/CatmullRomInterpolator.hpp	/^  GetTimeFraction(const double time, bool limit_range = true) const$/;"	f	class:CatmullRomInterpolator
GetTimeScale	Replay/Replay.hpp	/^  double GetTimeScale() const {$/;"	f	class:final
GetTimeValue	Form/DigitEntry.cpp	/^DigitEntry::GetTimeValue() const$/;"	f	class:DigitEntry
GetTimeZone	Form/DataField/RoughTime.hpp	/^  RoughTimeDelta GetTimeZone() const {$/;"	f	class:final
GetTimeout	Net/HTTP/Multi.hpp	/^    long GetTimeout() const {$/;"	f	class:Net::CurlMulti
GetTitle	InfoBoxes/Data.hpp	/^  const TCHAR *GetTitle() const {$/;"	f	struct:InfoBoxData
GetTitle	InfoBoxes/InfoBoxWindow.hpp	/^  const TCHAR* GetTitle() {$/;"	f	class:InfoBoxWindow
GetTitleColor	Look/InfoBoxLook.hpp	/^  Color GetTitleColor(int i) const {$/;"	f	struct:InfoBoxLook
GetTitleHeight	Form/Form.hpp	/^  unsigned GetTitleHeight() const {$/;"	f	class:WndForm
GetTop	Engine/Airspace/AbstractAirspace.hpp	/^  const AirspaceAltitude &GetTop() const { return altitude_top; }$/;"	f	class:AbstractAirspace
GetTop	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr int GetTop() const {$/;"	f	struct:FlatBoundingBox
GetTopAltitude	Engine/Airspace/AbstractAirspace.hpp	/^  double GetTopAltitude(const AltitudeState &state) const {$/;"	f	class:AbstractAirspace
GetTopLeft	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr FlatGeoPoint GetTopLeft() const {$/;"	f	struct:FlatBoundingBox
GetTopRow	Screen/RawBitmap.hpp	/^  RawColor *GetTopRow() {$/;"	f	class:final
GetTotalMass	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetTotalMass() const$/;"	f	class:GlidePolar
GetTraceComputer	Computer/GlideComputer.hpp	/^  const TraceComputer &GetTraceComputer() const {$/;"	f	class:GlideComputer
GetTraceComputer	Computer/TaskComputer.hpp	/^  const TraceComputer &GetTraceComputer() const {$/;"	f	class:TaskComputer
GetTravelledVector	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::GetTravelledVector(const GeoPoint &ref) const$/;"	f	class:TaskLeg
GetType	Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceClass GetType() const {$/;"	f	class:AbstractAirspace
GetType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetType(const OrderedTaskPoint &point) const$/;"	f	class:AbstractTaskFactory
GetType	Engine/Task/Points/TaskPoint.hpp	/^  TaskPointType GetType() const {$/;"	f	class:TaskPoint
GetType	Engine/Task/TaskInterface.hpp	/^  TaskType GetType() const {$/;"	f	class:TaskInterface
GetType	Form/DataField/Base.hpp	/^  Type GetType() const {$/;"	f	class:DataField
GetType	Screen/OpenGL/Texture.hpp	/^  static GLenum GetType() {$/;"	f	class:GLTexture
GetType	Terrain/Height.hpp	/^  constexpr TerrainType GetType() const {$/;"	f	class:TerrainHeight
GetTypeString	FLARM/Traffic.cpp	/^FlarmTraffic::GetTypeString(AircraftType type)$/;"	f	class:FlarmTraffic
GetUISettings	Blackboard/SettingsBlackboard.hpp	/^  const UISettings &GetUISettings() const {$/;"	f	class:SettingsBlackboard
GetUISettings	Interface.hpp	/^  static inline const UISettings &GetUISettings() {$/;"	f	namespace:CommonInterface
GetUIState	Interface.hpp	/^  static inline const UIState &GetUIState() {$/;"	f	namespace:CommonInterface
GetUIState	MapWindow/MapWindowBlackboard.hpp	/^  const UIState &GetUIState() const {$/;"	f	class:MapWindowBlackboard
GetUIState	Menu/ExpandMacros.cpp	/^GetUIState()$/;"	f	file:
GetURI	Repository/AvailableFile.hpp	/^  const char *GetURI() const {$/;"	f	struct:AvailableFile
GetUniformLocation	Screen/OpenGL/Program.hpp	/^  GLint GetUniformLocation(const char *name) const {$/;"	f	class:GLProgram
GetUnitBits	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetUnitBits(unsigned bit, unsigned n) const {$/;"	f	struct:CAI302::Pilot
GetUnitName	Units/Descriptor.cpp	/^Units::GetUnitName(Unit unit)$/;"	f	class:Units
GetUnsignedValue	Dialogs/Device/FLARM/ConfigWidget.cpp	/^GetUnsignedValue(const FlarmDevice &device, const char *name,$/;"	f	file:
GetUnsignedValue	Form/DigitEntry.cpp	/^DigitEntry::GetUnsignedValue() const$/;"	f	class:DigitEntry
GetUpperCharacter	Form/CharacterButton.cpp	/^CharacterButton::GetUpperCharacter() const$/;"	f	class:CharacterButton
GetUpperRight	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr const FlatGeoPoint &GetUpperRight() const {$/;"	f	struct:FlatBoundingBox
GetUserAltitudeUnit	Units/Units.cpp	/^Units::GetUserAltitudeUnit()$/;"	f	class:Units
GetUserDistanceUnit	Units/Units.cpp	/^Units::GetUserDistanceUnit()$/;"	f	class:Units
GetUserID	Tracking/LiveTrack24.cpp	/^LiveTrack24::GetUserID(const TCHAR *username, const TCHAR *password,$/;"	f	class:LiveTrack24
GetUserMassUnit	Units/Units.cpp	/^Units::GetUserMassUnit()$/;"	f	class:Units
GetUserPressureFormat	Formatter/UserUnits.cpp	/^GetUserPressureFormat(bool include_unit)$/;"	f
GetUserPressureStep	Formatter/UserUnits.cpp	/^GetUserPressureStep()$/;"	f
GetUserPressureUnit	Units/Units.cpp	/^Units::GetUserPressureUnit()$/;"	f	class:Units
GetUserSpeedUnit	Units/Units.cpp	/^Units::GetUserSpeedUnit()$/;"	f	class:Units
GetUserSwitchDown	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetUserSwitchDown() const {$/;"	f	struct:VegaSwitchState
GetUserSwitchMiddle	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetUserSwitchMiddle() const {$/;"	f	struct:VegaSwitchState
GetUserSwitchUp	NMEA/VegaSwitchState.hpp	/^  constexpr bool GetUserSwitchUp() const {$/;"	f	struct:VegaSwitchState
GetUserTaskSpeedUnit	Units/Units.cpp	/^Units::GetUserTaskSpeedUnit()$/;"	f	class:Units
GetUserTemperatureUnit	Units/Units.cpp	/^Units::GetUserTemperatureUnit()$/;"	f	class:Units
GetUserUnitByGroup	Units/Units.cpp	/^Units::GetUserUnitByGroup(UnitGroup group)$/;"	f	class:Units
GetUserVerticalSpeedFormat	Formatter/UserUnits.cpp	/^GetUserVerticalSpeedFormat(bool include_unit, bool include_sign)$/;"	f
GetUserVerticalSpeedStep	Formatter/UserUnits.cpp	/^GetUserVerticalSpeedStep()$/;"	f
GetUserVerticalSpeedUnit	Units/Units.cpp	/^Units::GetUserVerticalSpeedUnit()$/;"	f	class:Units
GetUserWindSpeedUnit	Units/Units.cpp	/^Units::GetUserWindSpeedUnit()$/;"	f	class:Units
GetUserWingLoadingUnit	Units/Units.cpp	/^Units::GetUserWingLoadingUnit()$/;"	f	class:Units
GetV60InfoBoxManagerConfig	Profile/InfoBoxConfig.cpp	/^GetV60InfoBoxManagerConfig(const ProfileMap &map, InfoBoxSettings &settings)$/;"	f	file:
GetV7Setting	Device/Driver/LX/Settings.cpp	/^LXDevice::GetV7Setting(const char *name) const$/;"	f	class:LXDevice
GetVBestLD	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetVBestLD() const {$/;"	f	class:GlidePolar
GetVMax	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetVMax() const {$/;"	f	class:GlidePolar
GetVMin	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetVMin() const {$/;"	f	class:GlidePolar
GetVTakeoff	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetVTakeoff() const$/;"	f	class:GlidePolar
GetVTakeoffFallback	Computer/Wind/Computer.cpp	/^GetVTakeoffFallback(const GlidePolar &glide_polar)$/;"	f	file:
GetValidFinishTypes	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetValidFinishTypes() const {$/;"	f	class:AbstractTaskFactory
GetValidIntermediateTypes	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetValidIntermediateTypes(unsigned position) const$/;"	f	class:AbstractTaskFactory
GetValidIntermediateTypes	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetValidIntermediateTypes() const {$/;"	f	class:AbstractTaskFactory
GetValidStartTypes	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet &GetValidStartTypes() const {$/;"	f	class:AbstractTaskFactory
GetValidTypes	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::GetValidTypes(unsigned position) const$/;"	f	class:AbstractTaskFactory
GetValidationErrors	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskValidationErrorSet &GetValidationErrors() const {$/;"	f	class:AbstractTaskFactory
GetValue	Config/Registry.hpp	/^  bool GetValue(const TCHAR *name, DWORD &value_r) const {$/;"	f	class:RegistryKey
GetValue	Config/Registry.hpp	/^  bool GetValue(const TCHAR *name, LPDWORD type_r,$/;"	f	class:RegistryKey
GetValue	Config/Registry.hpp	/^  bool GetValue(const TCHAR *name, TCHAR *value, unsigned max_length) const {$/;"	f	class:RegistryKey
GetValue	Dialogs/KnobTextEntry.cpp	/^  TCHAR *GetValue() {$/;"	f	class:final
GetValue	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  const Plane &GetValue() const {$/;"	f	class:final
GetValue	Dialogs/Plane/PlanePolarDialog.cpp	/^  const Plane &GetValue() const {$/;"	f	class:final
GetValue	Dialogs/Plane/PolarShapeEditWidget.cpp	/^GetValue(WndProperty &e)$/;"	f	file:
GetValue	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  const Waypoint &GetValue() const {$/;"	f	class:final
GetValue	Form/DataField/Angle.hpp	/^  Angle GetValue() const {$/;"	f	class:final
GetValue	Form/DataField/Enum.cpp	/^DataFieldEnum::GetValue() const$/;"	f	class:DataFieldEnum
GetValue	Form/DataField/GeoPoint.hpp	/^  GeoPoint GetValue() const {$/;"	f	class:final
GetValue	Form/DataField/RoughTime.hpp	/^  RoughTime GetValue() const {$/;"	f	class:final
GetValue	Screen/ProgressBar.hpp	/^  unsigned GetValue() const {$/;"	f	class:ProgressBar
GetValue	Terrain/Height.hpp	/^  constexpr int16_t GetValue() const {$/;"	f	class:TerrainHeight
GetValueAndCommentRect	InfoBoxes/InfoBoxWindow.hpp	/^  const PixelRect GetValueAndCommentRect() const {$/;"	f	class:InfoBoxWindow
GetValueAngle	Widget/EditRowFormWidget.cpp	/^RowFormWidget::GetValueAngle(unsigned i) const$/;"	f	class:RowFormWidget
GetValueBoolean	Widget/EditRowFormWidget.cpp	/^RowFormWidget::GetValueBoolean(unsigned i) const$/;"	f	class:RowFormWidget
GetValueColor	Look/InfoBoxLook.hpp	/^  Color GetValueColor(int i) const {$/;"	f	struct:InfoBoxLook
GetValueFloat	Widget/EditRowFormWidget.cpp	/^RowFormWidget::GetValueFloat(unsigned i) const$/;"	f	class:RowFormWidget
GetValueFromTeamCode	TeamCode/TeamCode.cpp	/^GetValueFromTeamCode(const TCHAR *code, unsigned length)$/;"	f	file:
GetValueInteger	Widget/EditRowFormWidget.cpp	/^RowFormWidget::GetValueInteger(unsigned i) const$/;"	f	class:RowFormWidget
GetValueIntegerAngle	Widget/EditRowFormWidget.cpp	/^RowFormWidget::GetValueIntegerAngle(unsigned i) const$/;"	f	class:RowFormWidget
GetValueOr0	Terrain/Height.hpp	/^  constexpr int16_t GetValueOr0() const {$/;"	f	class:TerrainHeight
GetValueRect	InfoBoxes/InfoBoxWindow.hpp	/^  const PixelRect GetValueRect() const {$/;"	f	class:InfoBoxWindow
GetValueRoughTime	Widget/EditRowFormWidget.cpp	/^RowFormWidget::GetValueRoughTime(unsigned i) const$/;"	f	class:RowFormWidget
GetValueString	Widget/RowFormWidget.hpp	/^  const TCHAR *GetValueString(unsigned i) const {$/;"	f	class:RowFormWidget
GetVarX	Math/LeastSquares.hpp	/^  double GetVarX() const {$/;"	f	class:LeastSquares
GetVarY	Math/LeastSquares.hpp	/^  double GetVarY() const {$/;"	f	class:LeastSquares
GetVario	Engine/Trace/Point.hpp	/^  double GetVario() const {$/;"	f	class:TracePoint
GetVario1Color	Look/TrailLook.cpp	/^GetVario1Color(short ramp_h) {$/;"	f	file:
GetVario2Color	Look/TrailLook.cpp	/^GetVario2Color(short ramp_h) {$/;"	f	file:
GetVarioScaleNegative	FlightStatistics.cpp	/^FlightStatistics::GetVarioScaleNegative() const$/;"	f	class:FlightStatistics
GetVarioScalePositive	FlightStatistics.cpp	/^FlightStatistics::GetVarioScalePositive() const$/;"	f	class:FlightStatistics
GetVarioUnit	Device/Driver/CAI302/Protocol.hpp	/^    unsigned GetVarioUnit() const {$/;"	f	struct:CAI302::Pilot
GetVector	Engine/Airspace/AirspaceSorter.cpp	/^AirspaceSelectInfo::GetVector(const GeoPoint &location,$/;"	f	class:AirspaceSelectInfo
GetVector	Math/Line2D.hpp	/^  constexpr Point GetVector() const {$/;"	f	struct:Line2D
GetVector	Replay/CatmullRomInterpolator.hpp	/^  GetVector(double _time) const$/;"	f	class:CatmullRomInterpolator
GetVector	Waypoint/WaypointList.cpp	/^WaypointListItem::GetVector(const GeoPoint &location) const$/;"	f	class:WaypointListItem
GetVectorPlanned	Engine/Task/Points/TaskLeg.hpp	/^  const GeoVector &GetVectorPlanned() const {$/;"	f	class:TaskLeg
GetVectorRemaining	Engine/Task/Points/TaskLeg.hpp	/^  const GeoVector &GetVectorRemaining() const {$/;"	f	class:TaskLeg
GetVectorRemaining	Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::GetVectorRemaining(const GeoPoint &reference) const$/;"	f	class:UnorderedTaskPoint
GetVectorTravelled	Engine/Task/Points/TaskLeg.hpp	/^  const GeoVector &GetVectorTravelled() const {$/;"	f	class:TaskLeg
GetVegaDevice	Input/InputEventsVega.cpp	/^GetVegaDevice(DeviceDescriptor &device)$/;"	f	file:
GetVerticalSpeedFormat	Formatter/Units.cpp	/^GetVerticalSpeedFormat(Unit unit, bool include_unit, bool include_sign)$/;"	f
GetVerticalSpeedName	Units/Units.cpp	/^Units::GetVerticalSpeedName()$/;"	f	class:Units
GetVerticalSpeedStep	Formatter/Units.cpp	/^GetVerticalSpeedStep(Unit unit)$/;"	f
GetVerticalSpeedUnit	Profile/UnitsConfig.cpp	/^GetVerticalSpeedUnit(const ProfileMap &map, const char *key,$/;"	f	file:
GetVibrator	Android/Context.cpp	/^Context::GetVibrator(JNIEnv *env)$/;"	f	class:Context
GetVirtualTime	Replay/Replay.hpp	/^  double GetVirtualTime() const {$/;"	f	class:final
GetVisibleCanvas	Screen/DoubleBufferWindow.hpp	/^  const Canvas &GetVisibleCanvas() const {$/;"	f	class:DoubleBufferWindow
GetVisibleLocation	Input/InputEventsActions.cpp	/^GetVisibleLocation()$/;"	f	file:
GetVisibleRows	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::GetVisibleRows() const$/;"	f	class:LargeTextWindow
GetWarning	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetWarning(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
GetWarningManager	Renderer/AirspaceLabelRenderer.hpp	/^  const ProtectedAirspaceWarningManager *GetWarningManager() const {$/;"	f	class:AirspaceLabelRenderer
GetWarningManager	Renderer/AirspaceRenderer.hpp	/^  const ProtectedAirspaceWarningManager *GetWarningManager() const {$/;"	f	class:AirspaceRenderer
GetWarningPtr	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::GetWarningPtr(const AbstractAirspace &airspace)$/;"	f	class:AirspaceWarningManager
GetWarningPtr	Engine/Airspace/AirspaceWarningManager.hpp	/^  const AirspaceWarning *GetWarningPtr(const AbstractAirspace &airspace) const {$/;"	f	class:AirspaceWarningManager
GetWarningState	Engine/Airspace/AirspaceWarning.hpp	/^  State GetWarningState() const {$/;"	f	class:AirspaceWarning
GetWaveInfo	Computer/WaveComputer.cpp	/^GetWaveInfo(const LeastSquares &ls, const FlatProjection &projection,$/;"	f	file:
GetWaypoint	Device/Declaration.hpp	/^  const Waypoint &GetWaypoint(unsigned i) const {$/;"	f	struct:Declaration
GetWaypoint	Engine/Task/Points/TaskWaypoint.hpp	/^  const Waypoint &GetWaypoint() const {$/;"	f	class:TaskWaypoint
GetWaypointIcon	Renderer/WaypointIconRenderer.cpp	/^GetWaypointIcon(const WaypointLook &look, const Waypoint &wp,$/;"	f	file:
GetWaypointPtr	Engine/Task/Points/TaskWaypoint.hpp	/^  WaypointPtr GetWaypointPtr() const {$/;"	f	class:TaskWaypoint
GetWest	Geo/GeoBounds.hpp	/^  constexpr Angle GetWest() const {$/;"	f	class:GeoBounds
GetWidget	Dialogs/WidgetDialog.hpp	/^  Widget &GetWidget() {$/;"	f	class:WidgetDialog
GetWidget	Widget/ButtonPanelWidget.hpp	/^  Widget &GetWidget() {$/;"	f	class:ButtonPanelWidget
GetWidget	Widget/DockWindow.hpp	/^  Widget *GetWidget() {$/;"	f	class:DockWindow
GetWidget	Widget/DockWindow.hpp	/^  const Widget *GetWidget() const {$/;"	f	class:DockWindow
GetWidget	Widget/PagerWidget.hpp	/^  Widget &GetWidget(unsigned i) {$/;"	f	class:PagerWidget
GetWidget	Widget/PagerWidget.hpp	/^  const Widget &GetWidget(unsigned i) const {$/;"	f	class:PagerWidget
GetWidget	Widget/RowFormWidget.hpp	/^    Widget &GetWidget() {$/;"	f	struct:RowFormWidget::Row
GetWidget	Widget/RowFormWidget.hpp	/^    const Widget &GetWidget() const {$/;"	f	struct:RowFormWidget::Row
GetWidget	Widget/SolidWidget.hpp	/^  Widget &GetWidget() {$/;"	f	class:SolidWidget
GetWidth	Android/Bitmap.hpp	/^  static unsigned GetWidth(JNIEnv *env, jobject bitmap) {$/;"	f	class:AndroidBitmap
GetWidth	Event/Shared/RotatePointer.hpp	/^  constexpr unsigned GetWidth() const {$/;"	f	class:RotatePointer
GetWidth	Form/DigitEntry.hpp	/^    constexpr unsigned GetWidth() const {$/;"	f	struct:CoordinateFormat::Column
GetWidth	Form/ScrollBar.hpp	/^  int GetWidth() const {$/;"	f	class:ScrollBar
GetWidth	Geo/Flat/FlatBoundingBox.hpp	/^  constexpr unsigned GetWidth() const {$/;"	f	struct:FlatBoundingBox
GetWidth	Geo/GeoBounds.hpp	/^  Angle GetWidth() const {$/;"	f	class:GeoBounds
GetWidth	Screen/Bitmap.hpp	/^  unsigned GetWidth() const {$/;"	f	class:final
GetWidth	Screen/Custom/UncompressedImage.hpp	/^  unsigned GetWidth() const {$/;"	f	class:UncompressedImage
GetWidth	Screen/FB/TopCanvas.cpp	/^GetWidth(const struct fb_var_screeninfo &vinfo)$/;"	f	file:
GetWidth	Screen/GDI/Canvas.hpp	/^  unsigned GetWidth() const {$/;"	f	class:Canvas
GetWidth	Screen/Memory/Canvas.hpp	/^  unsigned GetWidth() const {$/;"	f	class:Canvas
GetWidth	Screen/OpenGL/Canvas.hpp	/^  unsigned GetWidth() const {$/;"	f	class:Canvas
GetWidth	Screen/OpenGL/Texture.hpp	/^  unsigned GetWidth() const {$/;"	f	class:GLTexture
GetWidth	Screen/Pen.hpp	/^  GetWidth() const$/;"	f	class:Pen
GetWidth	Screen/RawBitmap.hpp	/^  unsigned GetWidth() const {$/;"	f	class:final
GetWidth	Terrain/HeightMatrix.hpp	/^  unsigned GetWidth() const {$/;"	f	class:HeightMatrix
GetWidth	Terrain/RasterBuffer.hpp	/^  unsigned GetWidth() const {$/;"	f	class:RasterBuffer
GetWidth	Terrain/RasterRenderer.hpp	/^  unsigned GetWidth() const {$/;"	f	class:RasterRenderer
GetWidth	Terrain/RasterTileCache.hpp	/^  unsigned int GetWidth() const { return width; }$/;"	f	class:RasterTileCache
GetWidth	Util/AllocatedGrid.hxx	/^	constexpr unsigned GetWidth() const {$/;"	f	class:AllocatedGrid
GetWifiToggleCaption	Kobo/NetworkDialog.cpp	/^GetWifiToggleCaption()$/;"	f	file:
GetWind	Computer/Wind/Store.cpp	/^WindStore::GetWind(double Time, double h, bool &found) const$/;"	f	class:WindStore
GetWindOrZero	NMEA/Derived.hpp	/^  SpeedVector GetWindOrZero() const {$/;"	f	struct:DerivedInfo
GetWindSpeedName	Units/Units.cpp	/^Units::GetWindSpeedName()$/;"	f	class:Units
GetWindStore	Computer/GlideComputer.hpp	/^  const WindStore &GetWindStore() const {$/;"	f	class:GlideComputer
GetWindStore	Computer/GlideComputerAirData.hpp	/^  const WindStore &GetWindStore() const {$/;"	f	class:GlideComputerAirData
GetWindStore	Computer/Wind/Computer.hpp	/^  const WindStore &GetWindStore() const {$/;"	f	class:WindComputer
GetWindow	Widget/RowFormWidget.hpp	/^    Window &GetWindow() {$/;"	f	struct:RowFormWidget::Row
GetWindow	Widget/RowFormWidget.hpp	/^    const Window &GetWindow() const {$/;"	f	struct:RowFormWidget::Row
GetWindow	Widget/WindowWidget.hpp	/^  Window &GetWindow() {$/;"	f	class:WindowWidget
GetWindow	Widget/WindowWidget.hpp	/^  const Window &GetWindow() const {$/;"	f	class:WindowWidget
GetWingArea	Engine/GlideSolvers/GlidePolar.hpp	/^  double GetWingArea() const {$/;"	f	class:GlidePolar
GetWingLoading	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GetWingLoading() const$/;"	f	class:GlidePolar
GetWingLoadingUnit	Profile/UnitsConfig.cpp	/^GetWingLoadingUnit(const ProfileMap &map, const char *key, Unit &value)$/;"	f	file:
GetX	Engine/Waypoint/Waypoints.hpp	/^    int GetX(const WaypointPtr &wp) const {$/;"	f	struct:Waypoints::WaypointAccessor
GetX	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned GetX() const {$/;"	f	class:final
GetX	Renderer/TwoTextRowsRenderer.hpp	/^  int GetX() const {$/;"	f	class:TwoTextRowsRenderer
GetXAbs	Math/KalmanFilter1d.hpp	/^  double GetXAbs() const { return x_abs_; }$/;"	f	class:KalmanFilter1d
GetXAbs	Math/SelfTimingKalmanFilter1d.hpp	/^  double GetXAbs() const { return filter_.GetXAbs(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetXDPI	Hardware/DisplayDPI.cpp	/^Display::GetXDPI(unsigned custom_dpi)$/;"	f	class:Display
GetXMax	Renderer/ChartRenderer.hpp	/^  double GetXMax() const { return x.max; }$/;"	f	class:ChartRenderer
GetXMin	Renderer/ChartRenderer.hpp	/^  double GetXMin() const { return x.min; }$/;"	f	class:ChartRenderer
GetXVel	Math/KalmanFilter1d.hpp	/^  double GetXVel() const { return x_vel_; }$/;"	f	class:KalmanFilter1d
GetXVel	Math/SelfTimingKalmanFilter1d.hpp	/^  double GetXVel() const { return filter_.GetXVel(); }$/;"	f	class:SelfTimingKalmanFilter1d
GetY	Engine/Waypoint/Waypoints.hpp	/^    int GetY(const WaypointPtr &wp) const {$/;"	f	struct:Waypoints::WaypointAccessor
GetY	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned GetY() const {$/;"	f	class:final
GetYAt	Math/LeastSquares.hpp	/^  double GetYAt(double x) const {$/;"	f	class:LeastSquares
GetYAtMaxX	Math/LeastSquares.hpp	/^  double GetYAtMaxX() const {$/;"	f	class:LeastSquares
GetYAtMinX	Math/LeastSquares.hpp	/^  double GetYAtMinX() const {$/;"	f	class:LeastSquares
GetYDPI	Hardware/DisplayDPI.cpp	/^Display::GetYDPI(unsigned custom_dpi)$/;"	f	class:Display
GetYMax	Renderer/ChartRenderer.hpp	/^  double GetYMax() const { return y.max; }$/;"	f	class:ChartRenderer
GetYMin	Renderer/ChartRenderer.hpp	/^  double GetYMin() const { return y.min; }$/;"	f	class:ChartRenderer
GetZoomDistance	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::GetZoomDistance(unsigned zoom)$/;"	f	class:FlarmTrafficControl
GlideAngleGround	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::GlideAngleGround() const$/;"	f	class:GlideResult
GlideComputer	Computer/GlideComputer.cpp	/^GlideComputer::GlideComputer(const ComputerSettings &_settings,$/;"	f	class:GlideComputer
GlideComputer	Computer/GlideComputer.hpp	/^class GlideComputer : public GlideComputerBlackboard$/;"	c
GlideComputerAirData	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::GlideComputerAirData(const Waypoints &_way_points)$/;"	f	class:GlideComputerAirData
GlideComputerAirData	Computer/GlideComputerAirData.hpp	/^class GlideComputerAirData {$/;"	c
GlideComputerBlackboard	Computer/GlideComputerBlackboard.hpp	/^class GlideComputerBlackboard:$/;"	c
GlideComputerConfigPanel	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  GlideComputerConfigPanel()$/;"	f	class:final
GlideComputerEvents	Computer/Events.hpp	/^  GlideComputerEvents():enable_team(false) {}$/;"	f	class:final
GlidePolar	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::GlidePolar(const double _mc, const double _bugs, const double _ballast)$/;"	f	class:GlidePolar
GlidePolar	Engine/GlideSolvers/GlidePolar.hpp	/^class GlidePolar$/;"	c
GlidePolarCaption	Renderer/GlidePolarRenderer.cpp	/^GlidePolarCaption(TCHAR *sTmp, const GlidePolar &glide_polar)$/;"	f
GlidePolarSpeedToFly	Engine/GlideSolvers/GlidePolar.cpp	/^  GlidePolarSpeedToFly(const GlidePolar &_polar, const double net_sink_rate,$/;"	f	class:final
GlideRatioCalculator	Computer/GlideRatioCalculator.hpp	/^class GlideRatioCalculator {$/;"	c
GlideRatioComputer	Computer/GlideRatioComputer.hpp	/^class GlideRatioComputer {$/;"	c
GlideResult	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::GlideResult(const GlideState &task, const double V)$/;"	f	class:GlideResult
GlideResult	Engine/GlideSolvers/GlideResult.hpp	/^struct GlideResult {$/;"	s
GlideSettings	Engine/GlideSolvers/GlideSettings.hpp	/^struct GlideSettings {$/;"	s
GlideSolutionPlanned	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GlideSolutionPlanned(const AircraftState &aircraft,$/;"	f	class:OrderedTask
GlideSolutionPlanned	Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionPlanned(const OrderedTaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionPlanned	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::GlideSolutionPlanned(const AircraftState &state,$/;"	f	class:UnorderedTask
GlideSolutionRemaining	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GlideSolutionRemaining(const AircraftState &aircraft,$/;"	f	class:OrderedTask
GlideSolutionRemaining	Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionRemaining(const GeoPoint &location,$/;"	f	class:TaskSolution
GlideSolutionRemaining	Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionRemaining(const TaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionRemaining	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::GlideSolutionRemaining(const AircraftState &state,$/;"	f	class:UnorderedTask
GlideSolutionSink	Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionSink(const TaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionTravelled	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::GlideSolutionTravelled(const AircraftState &aircraft,$/;"	f	class:OrderedTask
GlideSolutionTravelled	Engine/Task/Solvers/TaskSolution.cpp	/^TaskSolution::GlideSolutionTravelled(const OrderedTaskPoint &taskpoint,$/;"	f	class:TaskSolution
GlideSolutionTravelled	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::GlideSolutionTravelled(const AircraftState &state,$/;"	f	class:UnorderedTask
GlideState	Engine/GlideSolvers/GlideState.cpp	/^GlideState::GlideState(const GeoVector &vector, const double htarget,$/;"	f	class:GlideState
GlideState	Engine/GlideSolvers/GlideState.hpp	/^struct GlideState {$/;"	s
GliderID	Device/Driver/LX/Protocol.hpp	/^    char GliderID[8];$/;"	m	struct:LX::Pilot
GliderID	Device/Driver/LXERA/Protocol.hpp	/^    char GliderID[8];$/;"	m	struct:LXEra::Pilot
GliderLink	Android/GliderLink.cpp	/^GliderLink::GliderLink(JNIEnv* env, jobject obj)$/;"	f	class:GliderLink
GliderLink	Android/GliderLink.hpp	/^class GliderLink {$/;"	c
GliderLinkData	GliderLink/GliderLinkData.hpp	/^struct GliderLinkData {$/;"	s
GliderLinkId	GliderLink/GliderLinkId.hpp	/^  GliderLinkId(uint32_t _value):value(_value) {}$/;"	f	class:GliderLinkId
GliderLinkId	GliderLink/GliderLinkId.hpp	/^class GliderLinkId {$/;"	c
GliderLinkTraffic	GliderLink/Traffic.hpp	/^struct GliderLinkTraffic {$/;"	s
GliderLinkTrafficList	GliderLink/List.hpp	/^struct GliderLinkTrafficList {$/;"	s
GliderScreenPosition	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  GliderScreenPosition,$/;"	e	enum:ControlIndex	file:
GliderScreenPosition	Profile/ProfileKeys.cpp	/^const char GliderScreenPosition[] = "GliderScreenPosition";$/;"	m	namespace:ProfileKeys	file:
GliderType	Device/Driver/LX/Protocol.hpp	/^    char GliderType[12];$/;"	m	struct:LX::Pilot
GliderType	Device/Driver/LXERA/Protocol.hpp	/^    char GliderType[12];$/;"	m	struct:LXEra::Pilot
GlobalObject	Java/Object.hxx	/^		GlobalObject(JNIEnv *env, jobject obj)$/;"	f	class:Java::GlobalObject
GlobalObject	Java/Object.hxx	/^	class GlobalObject : public GlobalRef<jobject> {$/;"	c	namespace:Java
GlobalRef	Java/Ref.hxx	/^	class GlobalRef {$/;"	c	namespace:Java
GlobalSliceAllocator	Util/SliceAllocator.hxx	/^	GlobalSliceAllocator(const GlobalSliceAllocator<U, size> &) {}$/;"	f	class:GlobalSliceAllocator
GlobalSliceAllocator	Util/SliceAllocator.hxx	/^class GlobalSliceAllocator {$/;"	c
Glue	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::Glue(boost::asio::io_context &io_context,$/;"	f	class:SkyLinesTracking::Glue
Glue	Tracking/SkyLines/Glue.hpp	/^class Glue {$/;"	c	namespace:SkyLinesTracking
GlueFlightLogger	Logger/GlueFlightLogger.cpp	/^GlueFlightLogger::GlueFlightLogger(LiveBlackboard &_blackboard)$/;"	f	class:GlueFlightLogger
GlueFlightLogger	Logger/GlueFlightLogger.hpp	/^class GlueFlightLogger : public FlightLogger, private NullBlackboardListener {$/;"	c
GlueGaugeVario	Gauge/GlueGaugeVario.hpp	/^  GlueGaugeVario(LiveBlackboard &_blackboard, const VarioLook &_look)$/;"	f	class:final
GlueMapWindow	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::GlueMapWindow(const Look &look)$/;"	f	class:GlueMapWindow
GlueMapWindow	MapWindow/GlueMapWindow.hpp	/^class GlueMapWindow : public MapWindow {$/;"	c
GotoTask	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::GotoTask(const TaskBehaviour &tb,$/;"	f	class:GotoTask
GradientValid	Engine/Util/Gradient.cpp	/^GradientValid(const double d)$/;"	f
GrahamScan	Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::GrahamScan(SearchPointVector& sps, const double sign_tolerance):$/;"	f	class:GrahamScan
GrahamScan	Geo/ConvexHull/GrahamScan.hpp	/^class GrahamScan: private NonCopyable$/;"	c
GrayPixelReader	Screen/Memory/UncompressedImage.hpp	/^struct GrayPixelReader {$/;"	s
Green	Screen/GDI/Color.hpp	/^  uint8_t Green() const$/;"	f	class:Color
Green	Screen/Memory/Color.hpp	/^  uint8_t Green() const$/;"	f	class:Color
Green	Screen/OpenGL/Color.hpp	/^  Green() const$/;"	f	class:Color
Green	Screen/PortableColor.hpp	/^  constexpr uint8_t Green() const {$/;"	f	class:BGR8Color
Green	Screen/PortableColor.hpp	/^  constexpr uint8_t Green() const {$/;"	f	class:BGRA8Color
Green	Screen/PortableColor.hpp	/^  constexpr uint8_t Green() const {$/;"	f	class:RGB8Color
GreyscalePixelTraits	Screen/Memory/PixelTraits.hpp	/^struct GreyscalePixelTraits {$/;"	s
GreyscaleToRGB565	Screen/Memory/Export.hpp	/^GreyscaleToRGB565(Luminosity8 luminosity)$/;"	f
GreyscaleToRGB8	Screen/Memory/Export.hpp	/^GreyscaleToRGB8(Luminosity8 luminosity)$/;"	f
GridLocation	Terrain/ScanLine.cpp	/^  GridLocation(const RasterLocation &other,$/;"	f	struct:GridLocation
GridLocation	Terrain/ScanLine.cpp	/^struct GridLocation : public RasterLocation {$/;"	s	file:
GridRay	Terrain/ScanLine.cpp	/^  GridRay(unsigned _tile_width, unsigned _tile_height,$/;"	f	struct:GridRay
GridRay	Terrain/ScanLine.cpp	/^struct GridRay {$/;"	s	file:
GridView	Form/GridView.hpp	/^class GridView : public PanelControl {$/;"	c
GroundSpeedComputer	Computer/GroundSpeedComputer.hpp	/^  GroundSpeedComputer() {$/;"	f	class:GroundSpeedComputer
GroundSpeedComputer	Computer/GroundSpeedComputer.hpp	/^class GroundSpeedComputer {$/;"	c
Grow	Geo/Flat/FlatBoundingBox.hpp	/^  FlatBoundingBox &Grow(int delta) {$/;"	f	struct:FlatBoundingBox
Grow	Screen/BufferCanvas.cpp	/^BufferCanvas::Grow(PixelSize new_size)$/;"	f	class:BufferCanvas
GrowDiscard	Util/AllocatedGrid.hxx	/^	void GrowDiscard(unsigned _width, unsigned _height) {$/;"	f	class:AllocatedGrid
GrowPreserveFill	Util/AllocatedGrid.hxx	/^	void GrowPreserveFill(unsigned _width, unsigned _height,$/;"	f	class:AllocatedGrid
Guard	Thread/Guard.hpp	/^class Guard {$/;"	c
GunzipReader	IO/GunzipReader.cxx	/^GunzipReader::GunzipReader(Reader &_next)$/;"	f	class:GunzipReader
HANDICAP	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    HANDICAP,$/;"	e	enum:final::Controls	file:
HANGGLIDER	MapSettings.hpp	/^  HANGGLIDER,$/;"	m	class:AircraftSymbol
HANGGLIDER_FLEX	Tracking/LiveTrack24/Settings.hpp	/^    HANGGLIDER_FLEX = 4,$/;"	m	class:LiveTrack24::Settings::VehicleType
HANGGLIDER_RIGID	Tracking/LiveTrack24/Settings.hpp	/^    HANGGLIDER_RIGID = 5,$/;"	m	class:LiveTrack24::Settings::VehicleType
HANG_GLIDER	FLARM/Traffic.hpp	/^    HANG_GLIDER = 6,      \/\/!< hang-glider (hard)$/;"	m	class:FlarmTraffic::AircraftType
HASH_SIZE	Topography/shapelib/mapstring.c	1437;"	d	file:
HAVE_ALPHA_BLEND	Screen/GDI/Features.hpp	37;"	d
HAVE_ALPHA_BLEND	Screen/Memory/Features.hpp	29;"	d
HAVE_BATTERY	Hardware/Battery.hpp	28;"	d
HAVE_BUILTIN_LANGUAGES	Language/LanguageGlue.hpp	45;"	d
HAVE_CLIPPING	Screen/GDI/Features.hpp	31;"	d
HAVE_CMDLINE_FULLSCREEN	CommandLine.hpp	35;"	d
HAVE_CMDLINE_REPLAY	CommandLine.hpp	42;"	d
HAVE_CPU_FREQUENCY	Hardware/CPU.hpp	28;"	d
HAVE_DOWNLOAD_MANAGER	Net/HTTP/Features.hpp	30;"	d
HAVE_DPI_DETECTION	Hardware/DisplayDPI.hpp	30;"	d
HAVE_DYNAMIC_MAPBUFFER	Screen/OpenGL/Features.hpp	49;"	d
HAVE_DYNAMIC_MULTI_DRAW_ARRAYS	Screen/OpenGL/Dynamic.hpp	31;"	d
HAVE_EXT_VOLUME_CONTROLLER	Audio/Features.hpp	53;"	d
HAVE_HATCHED_BRUSH	Screen/GDI/Features.hpp	33;"	d
HAVE_HIGHDPI_SUPPORT	Screen/SDL/Features.hpp	30;"	d
HAVE_HTTP	Net/HTTP/Features.hpp	27;"	d
HAVE_INTERNAL_GPS	Device/Features.hpp	34;"	d
HAVE_LIVETRACK24	Tracking/Features.hpp	32;"	d
HAVE_LRINT	Topography/shapelib/mapserver-config.h	23;"	d
HAVE_LRINTF	Topography/shapelib/mapserver-config.h	22;"	d
HAVE_MULTI_TOUCH	Screen/Android/Features.hpp	27;"	d
HAVE_MULTI_TOUCH	Screen/SDL/Features.hpp	27;"	d
HAVE_NATIVE_GETTEXT	Language/LanguageGlue.hpp	41;"	d
HAVE_NET_STATE	Net/State.hpp	28;"	d
HAVE_NET_STATE_ROAMING	Net/State.hpp	29;"	d
HAVE_NOAA	Weather/Features.hpp	30;"	d
HAVE_OES_DRAW_TEXTURE	Screen/OpenGL/Features.hpp	39;"	d
HAVE_OES_MAPBUFFER	Screen/OpenGL/Features.hpp	45;"	d
HAVE_PCMET	Weather/Features.hpp	31;"	d
HAVE_PCM_MIXER	Audio/Features.hpp	38;"	d
HAVE_PCM_PLAYER	Audio/Features.hpp	34;"	d
HAVE_PTHREAD_SETNAME_NP	Thread/Name.hpp	30;"	d
HAVE_PTHREAD_SETNAME_NP	Thread/Name.hpp	35;"	d
HAVE_RUN_FILE	OS/RunFile.hpp	31;"	d
HAVE_SHOW_MENU_BUTTON	MainWindow.hpp	38;"	d
HAVE_SKYLINES_TRACKING	Tracking/SkyLines/Features.hpp	27;"	d
HAVE_STRCASECMP	Topography/shapelib/mapserver-config.h	9;"	d
HAVE_STRCASESTR	Topography/shapelib/mapserver-config.h	10;"	d
HAVE_STRDUP	Topography/shapelib/mapserver-config.h	11;"	d
HAVE_STRLCAT	Topography/shapelib/mapserver-config.h	14;"	d
HAVE_STRLCPY	Topography/shapelib/mapserver-config.h	15;"	d
HAVE_STRLEN	Topography/shapelib/mapserver-config.h	18;"	d
HAVE_STRNCASECMP	Topography/shapelib/mapserver-config.h	19;"	d
HAVE_STRRSTR	Topography/shapelib/mapserver-config.h	8;"	d
HAVE_SYNC_FETCH_AND_ADD	Topography/shapelib/mapserver-config.h	24;"	d
HAVE_TCP	Net/Features.hxx	27;"	d
HAVE_TEXT_CACHE	Screen/Memory/Features.hpp	27;"	d
HAVE_TEXT_CACHE	Screen/OpenGL/Features.hpp	31;"	d
HAVE_TRACKING	Tracking/Features.hpp	36;"	d
HAVE_UN	Net/Features.hxx	30;"	d
HAVE_VIBRATOR	Hardware/Vibrator.hpp	36;"	d
HAVE_VOLUME_CONTROLLER	Audio/Features.hpp	44;"	d
HAVE_VSNPRINTF	Topography/shapelib/mapserver-config.h	20;"	d
HDM	Device/Parser.cpp	/^NMEAParser::HDM(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
HEADER	Device/Driver/Volkslogger/dbbconv.h	/^  struct HEADER {$/;"	s	class:DBB
HEADING_UP	MapSettings.hpp	/^  HEADING_UP,$/;"	m	class:MapOrientation
HECTOPASCAL	Units/Unit.hpp	/^  HECTOPASCAL,$/;"	m	class:Unit
HEIGHT_STEP	Atmosphere/CuSonde.hpp	/^  static constexpr unsigned HEIGHT_STEP = 100;$/;"	m	class:CuSonde
HELICOPTER	FLARM/Traffic.hpp	/^    HELICOPTER = 3,       \/\/!< helicopter \/ rotorcraft$/;"	m	class:FlarmTraffic::AircraftType
HELP	Dialogs/ListPicker.cpp	/^static constexpr int HELP = 100;$/;"	v	file:
HEX_STRING_HPP	Util/HexString.hpp	25;"	d
HGAIN	Terrain/jasper/jpc/jpc_qmfb.c	1658;"	d	file:
HIGH	Hardware/Battery.hpp	/^      HIGH,$/;"	e	enum:Power::Battery::batterystatus
HIKE	Tracking/LiveTrack24.hpp	/^    HIKE = 16400,$/;"	m	class:LiveTrack24::VehicleType
HINT1	zzip/__debug.h	46;"	d
HINT2	zzip/__debug.h	47;"	d
HINT3	zzip/__debug.h	48;"	d
HINT4	zzip/__debug.h	49;"	d
HINT5	zzip/__debug.h	50;"	d
HINT6	zzip/__debug.h	51;"	d
HLine	Form/HLine.hpp	/^  HLine(const DialogLook &_look) {}$/;"	f	class:HLine
HLine	Form/HLine.hpp	/^  HLine(const DialogLook &_look):look(_look) {}$/;"	f	class:HLine
HLine	Form/HLine.hpp	/^class HLine : public PaintWindow {$/;"	c
HOME	Engine/Task/TaskBehaviour.hpp	/^  HOME,$/;"	m	class:AbortTaskMode
HORIZON	PageSettings.hpp	/^    HORIZON,$/;"	m	class:PageLayout::Main
HORIZONTAL	Widget/TabWidget.hpp	/^    HORIZONTAL,$/;"	m	class:TabWidget::Orientation
HORIZONTAL_SPEED	Units/Group.hpp	/^  HORIZONTAL_SPEED,$/;"	m	class:UnitGroup
HORIZON_LOOK_HPP	Look/HorizonLook.hpp	25;"	d
HORIZON_RENDERER_HPP	Renderer/HorizonRenderer.hpp	25;"	d
HOT_AIR_BALLOON	Tracking/LiveTrack24.hpp	/^    HOT_AIR_BALLOON = 128,$/;"	m	class:LiveTrack24::VehicleType
HOT_AIR_BALLOON	Tracking/LiveTrack24/Settings.hpp	/^    HOT_AIR_BALLOON = 3,$/;"	m	class:LiveTrack24::Settings::VehicleType
HOUR	Form/DigitEntry.hpp	/^      HOUR, \/\/ i.e. DIGIT24$/;"	m	class:CoordinateFormat::Column::Type
HWColor	Screen/GDI/Color.hpp	/^  constexpr HWColor():value(0) {}$/;"	f	class:HWColor
HWColor	Screen/GDI/Color.hpp	/^  explicit constexpr HWColor(COLORREF c):value(c) {}$/;"	f	class:HWColor
HWColor	Screen/GDI/Color.hpp	/^class HWColor {$/;"	c
Half	Geo/Flat/FlatPoint.hpp	/^  FlatPoint Half() const {$/;"	f	struct:FlatPoint
Half	Math/Angle.hpp	/^  Angle Half() const {$/;"	f	class:Angle
HalfAngle	Math/Angle.cpp	/^Angle::HalfAngle(const Angle end) const$/;"	f	class:Angle
HalfCircle	Math/Angle.hpp	/^  static Angle HalfCircle() {$/;"	f	class:Angle
Handicap	Profile/ProfileKeys.cpp	/^const char Handicap[] = "Handicap";$/;"	m	namespace:ProfileKeys	file:
HandleEvent	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::HandleEvent(struct libinput_event *li_event)$/;"	f	class:LibInputHandler
HandleEvent	Event/Poll/X11Queue.cpp	/^X11EventQueue::HandleEvent(_XEvent &event)$/;"	f	class:X11EventQueue
HandleExtConfig	Device/Driver/LX/Convert.cpp	/^HandleExtConfig(BufferedOutputStream &os, const struct LXN::ExtConfig &packet,$/;"	f	file:
HandleFlightLine	Device/Driver/LX/NanoLogger.cpp	/^HandleFlightLine(const char *_line, BufferedOutputStream &os,$/;"	f	file:
HandleKey	InfoBoxes/Content/Base.cpp	/^InfoBoxContent::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContent
HandleKey	InfoBoxes/Content/Direction.cpp	/^InfoBoxContentTrack::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentTrack
HandleKey	InfoBoxes/Content/Speed.cpp	/^InfoBoxContentSpeedGround::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentSpeedGround
HandleKey	InfoBoxes/Content/Team.cpp	/^InfoBoxContentTeamCode::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentTeamCode
HandleKey	InfoBoxes/Content/Weather.cpp	/^InfoBoxContentTemperatureForecast::HandleKey(const InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxContentTemperatureForecast
HandleKey	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::HandleKey(InfoBoxContent::InfoBoxKeyCodes keycode)$/;"	f	class:InfoBoxWindow
HandleMessages	Event/Windows/Queue.cpp	/^HandleMessages(UINT wMsgFilterMin, UINT wMsgFilterMax)$/;"	f	file:
HandlePaintMessages	Event/Windows/Queue.cpp	/^EventQueue::HandlePaintMessages()$/;"	f	class:EventQueue
HandlePendingEvents	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::HandlePendingEvents()$/;"	f	class:LibInputHandler
HandlePosition	Device/Driver/LX/Convert.cpp	/^HandlePosition(BufferedOutputStream &os, Context &context,$/;"	f	file:
HandleSTXCommand	Device/Driver/KRT2.cpp	/^KRT2Device::HandleSTXCommand(const struct stx_msg * msg, struct NMEAInfo & info)$/;"	f	class:KRT2Device
Handler	Tracking/SkyLines/Handler.hpp	/^class Handler {$/;"	c	namespace:SkyLinesTracking
Handshake	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::Handshake(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
HapticFeedback	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  HapticFeedback$/;"	e	enum:ControlIndex	file:
HapticFeedback	Profile/ProfileKeys.cpp	/^const char HapticFeedback[] = "HapticFeedback";$/;"	m	namespace:ProfileKeys	file:
HapticFeedback	UISettings.hpp	/^  enum class HapticFeedback : uint8_t {$/;"	c	struct:UISettings
HasAlarm	FLARM/Traffic.hpp	/^  bool HasAlarm() const {$/;"	f	class:FlarmTraffic::AircraftType
HasBallast	Engine/GlideSolvers/GlidePolar.hpp	/^  bool HasBallast() const {$/;"	f	class:GlidePolar
HasBegun	Time/RoughTime.hpp	/^  constexpr bool HasBegun(RoughTime now) const {$/;"	f	class:RoughTimeSpan
HasChildren	XML/Node.hpp	/^    bool HasChildren() const {$/;"	f	struct:XMLNode::Data
HasColors	Asset.hpp	/^HasColors()$/;"	f
HasCursorKeys	Asset.hpp	/^HasCursorKeys()$/;"	f
HasDetails	Dialogs/MapItemListDialog.cpp	/^HasDetails(const MapItem &item)$/;"	f	file:
HasEPaper	Asset.hpp	/^HasEPaper()$/;"	f
HasElevation	MapWindow/Items/MapItem.hpp	/^  bool HasElevation() const {$/;"	f	struct:ArrivalAltitudeMapItem
HasElevation	MapWindow/Items/MapItem.hpp	/^  bool HasElevation() const {$/;"	f	struct:LocationMapItem
HasEnded	Time/RoughTime.hpp	/^  constexpr bool HasEnded(RoughTime now) const {$/;"	f	class:RoughTimeSpan
HasEnoughData	Math/DifferentialWindowFilter.hpp	/^  bool HasEnoughData(double min_delta_x) const {$/;"	f	class:DifferentialWindowFilter
HasEntered	Engine/Task/Points/ScoredTaskPoint.hpp	/^  bool HasEntered() const {$/;"	f	class:ScoredTaskPoint
HasEntered	Replay/TaskAccessor.hpp	/^  bool HasEntered(unsigned index) const {$/;"	f	class:TaskAccessor
HasExited	Engine/Task/Points/ScoredTaskPoint.hpp	/^  bool HasExited() const {$/;"	f	class:ScoredTaskPoint
HasExpired	Time/TimeoutClock.hpp	/^  bool HasExpired() const {$/;"	f	class:TimeoutClock
HasFailed	Device/Port/TTYEnumerator.hpp	/^  bool HasFailed() const {$/;"	f	class:TTYEnumerator
HasFailed	Dialogs/FileManager.cpp	/^  bool HasFailed(const AvailableFile &file) const {$/;"	f	class:ManagedFileListWidget
HasFailed	Dialogs/FileManager.cpp	/^  bool HasFailed(const char *name) const {$/;"	f	class:ManagedFileListWidget
HasFinish	Engine/Task/Ordered/OrderedTask.hpp	/^  bool HasFinish() const {$/;"	f	class:final
HasFinished	Job/Async.hpp	/^  bool HasFinished() const {$/;"	f	class:final
HasFinished	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::HasFinished(const TaskAccessor &task) const$/;"	f	class:TaskAutoPilot
HasHandler	Lua/InputEvent.cpp	/^bool LuaEventRegistry<T>::HasHandler(T event) const {$/;"	f	class:LuaEventRegistry
HasHash	Repository/AvailableFile.hpp	/^  bool HasHash() const {$/;"	f	struct:AvailableFile
HasIOIOLib	Asset.hpp	/^HasIOIOLib()$/;"	f
HasKeyboard	Asset.cpp	/^HasKeyboard()$/;"	f
HasKeyboard	Asset.hpp	/^HasKeyboard()$/;"	f
HasKeyboard	Event/Poll/InputQueue.hpp	/^  bool HasKeyboard() const {$/;"	f	class:DisplayOrientation
HasKeyboard	Event/Poll/LibInput/LibInputHandler.hpp	/^  bool HasKeyboard() const {$/;"	f	class:final
HasKeyboard	Event/Poll/Queue.hpp	/^  bool HasKeyboard() const {$/;"	f	class:final
HasLe	Android/BluetoothHelper.cpp	/^BluetoothHelper::HasLe(JNIEnv *env)$/;"	f	class:BluetoothHelper
HasLittleMemory	Asset.hpp	/^HasLittleMemory()$/;"	f
HasName	FLARM/Traffic.hpp	/^  bool HasName() const {$/;"	f	class:FlarmTraffic::AircraftType
HasName	GliderLink/Traffic.hpp	/^  bool HasName() const {$/;"	f	struct:GliderLinkTraffic
HasNext	Weather/NOAAFormatter.cpp	/^  bool HasNext() const {$/;"	f	class:NOAALineSplitter
HasOptionalStarts	Engine/Task/Ordered/OrderedTask.hpp	/^  bool HasOptionalStarts() const {$/;"	f	class:final
HasPassThrough	Device/Driver.hpp	/^  bool HasPassThrough() const {$/;"	f	struct:DeviceRegister
HasPointer	Asset.cpp	/^HasPointer()$/;"	f
HasPointer	Asset.hpp	/^HasPointer()$/;"	f
HasPointer	Event/Poll/InputQueue.hpp	/^  bool HasPointer() const {$/;"	f	class:DisplayOrientation
HasPointer	Event/Poll/LibInput/LibInputHandler.hpp	/^  bool HasPointer() const {$/;"	f	class:final
HasPointer	Event/Poll/Linux/MergeMouse.hpp	/^  bool HasPointer() const {$/;"	f	class:final
HasPointer	Event/Poll/Queue.hpp	/^  bool HasPointer() const {$/;"	f	class:final
HasPointerAssociations	Lua/Associate.cpp	/^Lua::HasPointerAssociations(lua_State *L, const char *table,$/;"	f	class:Lua
HasPoints	UIUtil/TrackingGestureManager.hpp	/^  bool HasPoints() const {$/;"	f	class:TrackingGestureManager
HasPortFailed	Device/Descriptor.hpp	/^  bool HasPortFailed() const {$/;"	f	class:final
HasReachableLandable	Engine/Task/Unordered/AbortTask.hpp	/^  bool HasReachableLandable() const {$/;"	f	class:AbortTask
HasResult	Math/XYDataStore.hpp	/^  bool HasResult() const {$/;"	f	class:XYDataStore
HasSampled	Engine/Task/Points/SampledTaskPoint.hpp	/^  bool HasSampled() const {$/;"	f	class:SampledTaskPoint
HasSession	Tracking/TrackingGlue.hpp	/^    bool HasSession() {$/;"	f	struct:final::LiveTrack24State
HasStart	Engine/Task/Ordered/OrderedTask.hpp	/^  bool HasStart() const {$/;"	f	class:final
HasTarget	Engine/Task/Points/TaskPoint.hpp	/^  bool HasTarget() const {$/;"	f	class:TaskPoint
HasTarget	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::HasTarget(const TaskAccessor& task) const$/;"	f	class:TaskAutoPilot
HasTargets	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::HasTargets() const$/;"	f	class:OrderedTask
HasTimeout	Device/Driver.hpp	/^  bool HasTimeout() const {$/;"	f	struct:DeviceRegister
HasTouchScreen	Asset.cpp	/^HasTouchScreen()$/;"	f
HasTouchScreen	Asset.hpp	/^HasTouchScreen()$/;"	f
HasTouchScreen	Event/Poll/InputQueue.hpp	/^  bool HasTouchScreen() const {$/;"	f	class:DisplayOrientation
HasTouchScreen	Event/Poll/LibInput/LibInputHandler.hpp	/^  bool HasTouchScreen() const {$/;"	f	class:final
HasTouchScreen	Event/Poll/Queue.hpp	/^  bool HasTouchScreen() const {$/;"	f	class:final
HasVario	InfoBoxes/InfoBoxLayout.hpp	/^    bool HasVario() const {$/;"	f	struct:InfoBoxLayout::Layout
HasWarning	Airspace/AirspaceWarningCopy.hpp	/^  bool HasWarning(const AbstractAirspace &as) const {$/;"	f	class:AirspaceWarningCopy
HasWarning	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::HasWarning() const$/;"	f	class:AirspaceWarningListWidget
Hash	Engine/PathSolvers/NavDijkstra.hpp	/^    struct Hash {$/;"	s	struct:NavDijkstra::DijkstraMap
Hash	Screen/Custom/Cache.cpp	/^  struct Hash {$/;"	s	struct:TextCacheKey	file:
HaveAudioVario	Audio/VarioGlue.cpp	/^AudioVarioGlue::HaveAudioVario()$/;"	f	class:AudioVarioGlue
HaveBottomWidget	MainWindow.hpp	/^  bool HaveBottomWidget() const {$/;"	f	class:MainWindow
HaveClipping	Screen/Features.hpp	/^HaveClipping()$/;"	f
HaveExtVolumeController	Audio/Features.hpp	/^HaveExtVolumeController()$/;"	f
HaveGLES	Screen/OpenGL/Features.hpp	/^HaveGLES()$/;"	f
HaveGLES2	Screen/OpenGL/Features.hpp	/^HaveGLES2()$/;"	f
HaveMultiDrawElements	Screen/OpenGL/Dynamic.hpp	/^  static inline bool HaveMultiDrawElements() {$/;"	f	namespace:GLExt
HavePCMMixer	Audio/Features.hpp	/^HavePCMMixer()$/;"	f
HavePCMPlayer	Audio/Features.hpp	/^HavePCMPlayer()$/;"	f
HaveScaleList	Projection/MapWindowProjection.hpp	/^  bool HaveScaleList() const {$/;"	f	class:MapWindowProjection
HaveVibrator	Hardware/Vibrator.cpp	/^HaveVibrator()$/;"	f
HaveVibrator	Hardware/Vibrator.hpp	/^HaveVibrator()$/;"	f
HaveVolumeController	Audio/Features.hpp	/^HaveVolumeController()$/;"	f
HeadWindSimplified	InfoBoxes/Content/Type.hpp	/^    HeadWindSimplified,$/;"	e	enum:InfoBoxFactory::Type
Header	Tracking/SkyLines/Protocol.hpp	/^struct Header {$/;"	s	namespace:SkyLinesTracking
HectoPascal	Atmosphere/Pressure.hpp	/^  AtmosphericPressure HectoPascal(double value) {$/;"	f	class:AtmosphericPressure
HeightMatrix	Terrain/HeightMatrix.hpp	/^  HeightMatrix():width(0), height(0) {}$/;"	f	class:HeightMatrix
HeightMatrix	Terrain/HeightMatrix.hpp	/^class HeightMatrix {$/;"	c
HeightToAngle	Terrain/RasterProjection.hpp	/^  constexpr Angle HeightToAngle(double pixels) const {$/;"	f	class:RasterProjection
HelpDialog	Dialogs/HelpDialog.cpp	/^HelpDialog(const TCHAR *Caption, const TCHAR *HelpText)$/;"	f
HexDump	HexDump.hpp	/^HexDump(const char *prefix, const void *_data, size_t length)$/;"	f
HexDump	HexDump.hpp	/^HexDump(const void *data, size_t length)$/;"	f
HexDumpLine	HexDump.hpp	/^HexDumpLine(const char *prefix, unsigned offset,$/;"	f
Hide	CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::Hide()$/;"	f	class:CrossSectionWidget
Hide	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Hide()$/;"	f	class:AirspaceWarningListWidget
Hide	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^Hide()$/;"	f	file:
Hide	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::Hide()$/;"	f	class:AirspaceConfigPanel
Hide	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::Hide()$/;"	f	class:WindSettingsPanel
Hide	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^SystemStatusPanel::Hide()$/;"	f	class:SystemStatusPanel
Hide	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::Hide()$/;"	f	class:TaskClosePanel
Hide	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::Hide()$/;"	f	class:TaskListPanel
Hide	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::Hide()$/;"	f	class:FlarmTrafficDetailsWidget
Hide	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::Hide()$/;"	f	class:TeamCodeWidget
Hide	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::Hide()$/;"	f	class:BigThermalAssistantWidget
Hide	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::Hide()$/;"	f	class:TrafficWidget
Hide	Gauge/GaugeFLARM.cpp	/^GaugeFLARM::Hide()$/;"	f	class:GaugeFLARM
Hide	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::Hide()$/;"	f	class:GaugeThermalAssistant
Hide	Gauge/GlueGaugeVario.cpp	/^GlueGaugeVario::Hide()$/;"	f	class:GlueGaugeVario
Hide	HorizonWidget.cpp	/^HorizonWidget::Hide()$/;"	f	class:HorizonWidget
Hide	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Hide()$/;"	f	class:InfoBoxManager
Hide	InfoBoxes/Panel/AltitudeInfo.cpp	/^AltitudeInfoPanel::Hide()$/;"	f	class:AltitudeInfoPanel
Hide	Operation/VerboseOperationEnvironment.cpp	/^VerboseOperationEnvironment::Hide()$/;"	f	class:VerboseOperationEnvironment
Hide	Widget/ActionWidget.cpp	/^ActionWidget::Hide()$/;"	f	class:ActionWidget
Hide	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::Hide()$/;"	f	class:ArrowPagerWidget
Hide	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Hide()$/;"	f	class:ButtonPanelWidget
Hide	Widget/CallbackWidget.cpp	/^CallbackWidget::Hide()$/;"	f	class:CallbackWidget
Hide	Widget/KeyboardWidget.cpp	/^KeyboardWidget::Hide()$/;"	f	class:KeyboardWidget
Hide	Widget/ManagedWidget.cpp	/^ManagedWidget::Hide()$/;"	f	class:ManagedWidget
Hide	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::Hide()$/;"	f	class:OffsetButtonsWidget
Hide	Widget/OverlappedWidget.cpp	/^OverlappedWidget::Hide()$/;"	f	class:OverlappedWidget
Hide	Widget/PagerWidget.cpp	/^PagerWidget::Hide()$/;"	f	class:PagerWidget
Hide	Widget/RowFormWidget.cpp	/^RowFormWidget::Row::Hide()$/;"	f	class:RowFormWidget::Row
Hide	Widget/SolidWidget.cpp	/^SolidWidget::Hide()$/;"	f	class:SolidWidget
Hide	Widget/TabWidget.cpp	/^TabWidget::Hide()$/;"	f	class:TabWidget
Hide	Widget/TwoWidgets.cpp	/^TwoWidgets::Hide()$/;"	f	class:TwoWidgets
Hide	Widget/WindowWidget.cpp	/^WindowWidget::Hide()$/;"	f	class:WindowWidget
HideAll	Form/ButtonPanel.cpp	/^ButtonPanel::HideAll()$/;"	f	class:ButtonPanel
HideButton	Menu/MenuBar.cpp	/^MenuBar::HideButton(unsigned i)$/;"	f	class:MenuBar
HideMenu	Input/InputEvents.cpp	/^InputEvents::HideMenu()$/;"	f	class:InputEvents
HideRow	Widget/RowFormWidget.hpp	/^  void HideRow(unsigned i) {$/;"	f	class:RowFormWidget
HideWidget	Monitor/AirspaceWarningMonitor.cpp	/^AirspaceWarningMonitor::HideWidget()$/;"	f	class:AirspaceWarningMonitor
HighScore	Dialogs/DialogSettings.hpp	/^    HighScore,$/;"	m	class:DialogSettings::TextInputStyle
Highlight	Screen/GDI/Color.hpp	/^  Highlight() const$/;"	f	class:Color
Highlight	Screen/Memory/Color.hpp	/^  Highlight() const$/;"	f	class:Color
Highlight	Screen/OpenGL/Color.hpp	/^  Highlight() const$/;"	f	class:Color
HighlightNext	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::HighlightNext()$/;"	f	class:TabMenuDisplay
HighlightPrevious	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::HighlightPrevious()$/;"	f	class:TabMenuDisplay
Histogram	Math/Histogram.hpp	/^class Histogram: public XYDataStore$/;"	c
HistoryItem	Computer/ClimbAverageCalculator.hpp	/^    constexpr HistoryItem(double _time, double _altitude)$/;"	f	struct:ClimbAverageCalculator::HistoryItem
HistoryItem	Computer/ClimbAverageCalculator.hpp	/^  struct HistoryItem$/;"	s	class:ClimbAverageCalculator
HomeLocation	Profile/ProfileKeys.cpp	/^const char HomeLocation[] = "HomeLocation";$/;"	m	namespace:ProfileKeys	file:
HomeWaypoint	Profile/ProfileKeys.cpp	/^const char HomeWaypoint[] = "HomeWaypoint";$/;"	m	namespace:ProfileKeys	file:
HorizonLook	Look/HorizonLook.hpp	/^struct HorizonLook {$/;"	s
HorizonRenderer	Renderer/HorizonRenderer.hpp	/^namespace HorizonRenderer$/;"	n
HorizonWindow	HorizonWidget.cpp	/^  HorizonWindow(const HorizonLook &_look, const bool &_inverse):look(_look),inverse(_inverse) {$/;"	f	class:HorizonWindow
HorizonWindow	HorizonWidget.cpp	/^class HorizonWindow : public AntiFlickerWindow {$/;"	c	file:
HorizontalRange	Form/ButtonPanel.cpp	/^ButtonPanel::HorizontalRange(PixelRect rc, unsigned start, unsigned end)$/;"	f	class:ButtonPanel
Hours	Math/Angle.hpp	/^  constexpr double Hours() const {$/;"	f	class:Angle
I	Util/EnumBitSet.hpp	/^  typedef uint32_t I;$/;"	t	class:EnumBitSet
I2CAddr	Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
I2CBus	Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
I2CPRESSURESENSOR	Device/Config.hpp	/^    I2CPRESSURESENSOR,$/;"	m	class:DeviceConfig::PortType
I2CbaroDevice	Android/I2CbaroDevice.cpp	/^I2CbaroDevice::I2CbaroDevice(unsigned _index,$/;"	f	class:I2CbaroDevice
I2CbaroListener	Android/I2CbaroListener.hpp	/^class I2CbaroListener {$/;"	c
IBFHelper	InfoBoxes/Content/Factory.cpp	/^struct IBFHelper {$/;"	s	file:
IBFHelperInt	InfoBoxes/Content/Factory.cpp	/^struct IBFHelperInt {$/;"	s	file:
IBP_AUTO	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  static constexpr unsigned IBP_AUTO = 0x7001;$/;"	m	class:final	file:
IBP_NONE	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  static constexpr unsigned IBP_NONE = 0x7000;$/;"	m	class:final	file:
ICC_CS_GRAY	Terrain/jasper/jp2/jp2_cod.h	303;"	d
ICC_CS_RGB	Terrain/jasper/jp2/jp2_cod.h	301;"	d
ICC_CS_YCBCR	Terrain/jasper/jp2/jp2_cod.h	302;"	d
IDABORT	Dialogs/Message.hpp	/^  IDABORT,$/;"	e	enum:__anon11
IDB_XCSOARLSWIFT	resource-launch.h	2;"	d
IDB_XCSOARLSWIFTSIM	resource-launch.h	3;"	d
IDCANCEL	Dialogs/Message.hpp	/^  IDCANCEL = 3,$/;"	e	enum:__anon11
IDD_DIALOG_TOOLTIP	resource-launch.h	1;"	d
IDIGNORE	Dialogs/Message.hpp	/^  IDIGNORE,$/;"	e	enum:__anon11
IDNO	Dialogs/Message.hpp	/^  IDNO,$/;"	e	enum:__anon11
IDOK	Dialogs/Message.hpp	/^  IDOK,$/;"	e	enum:__anon11
IDRETRY	Dialogs/Message.hpp	/^  IDRETRY,$/;"	e	enum:__anon11
IDYES	Dialogs/Message.hpp	/^  IDYES,$/;"	e	enum:__anon11
IGCCharToNum	Logger/IGCFileCleanup.cpp	/^IGCCharToNum(TCHAR c)$/;"	f	file:
IGCDeclarationHeader	IGC/IGCDeclaration.hpp	/^struct IGCDeclarationHeader {$/;"	s
IGCDeclarationTurnpoint	IGC/IGCDeclaration.hpp	/^struct IGCDeclarationTurnpoint {$/;"	s
IGCExtension	IGC/IGCExtensions.hpp	/^struct IGCExtension {$/;"	s
IGCExtensions	IGC/IGCExtensions.hpp	/^struct IGCExtensions : public TrivialArray<IGCExtension, 16> {$/;"	s
IGCFileCleanup	Logger/IGCFileCleanup.cpp	/^IGCFileCleanup(unsigned current_year)$/;"	f
IGCFix	IGC/IGCFix.hpp	/^struct IGCFix$/;"	s
IGCHEADER	Device/Driver/Volkslogger/vlconv.cpp	/^  IGCHEADER(void)$/;"	f	struct:IGCHEADER
IGCHEADER	Device/Driver/Volkslogger/vlconv.cpp	/^struct IGCHEADER$/;"	s	file:
IGCHeader	IGC/IGCHeader.hpp	/^struct IGCHeader {$/;"	s
IGCMakeTaskLanding	IGC/Generator.hpp	/^IGCMakeTaskLanding()$/;"	f
IGCMakeTaskTakeoff	IGC/Generator.hpp	/^IGCMakeTaskTakeoff()$/;"	f
IGCParseDate	IGC/IGCParser.cpp	/^IGCParseDate(const char *buffer, BrokenDate &date)$/;"	f	file:
IGCParseDateRecord	IGC/IGCParser.cpp	/^IGCParseDateRecord(const char *line, BrokenDate &date)$/;"	f
IGCParseDeclarationHeader	IGC/IGCParser.cpp	/^IGCParseDeclarationHeader(const char *line, IGCDeclarationHeader &header)$/;"	f
IGCParseDeclarationTurnpoint	IGC/IGCParser.cpp	/^IGCParseDeclarationTurnpoint(const char *line, IGCDeclarationTurnpoint &tp)$/;"	f
IGCParseExtensions	IGC/IGCParser.cpp	/^IGCParseExtensions(const char *buffer, IGCExtensions &extensions)$/;"	f
IGCParseFix	IGC/IGCParser.cpp	/^IGCParseFix(const char *buffer, const IGCExtensions &extensions, IGCFix &fix)$/;"	f
IGCParseHeader	IGC/IGCParser.cpp	/^IGCParseHeader(const char *line, IGCHeader &header)$/;"	f
IGCParseLocation	IGC/IGCParser.cpp	/^IGCParseLocation(const char *buffer, GeoPoint &location)$/;"	f
IGCParseTime	IGC/IGCParser.cpp	/^IGCParseTime(const char *buffer, BrokenTime &time)$/;"	f
IGCWriter	IGC/IGCWriter.cpp	/^IGCWriter::IGCWriter(Path path)$/;"	f	class:IGCWriter
IGCWriter	IGC/IGCWriter.hpp	/^class IGCWriter {$/;"	c
IGC_REPLAY_HPP	Replay/IgcReplay.hpp	25;"	d
IGUR_sizet	Topography/shapelib/mapxbase.c	/^static inline void IGUR_sizet(size_t ignored) { (void)ignored; }  \/* Ignore GCC Unused Result *\/$/;"	f	file:
IID_ANDROIDSIMPLEBUFFERQUEUE	Audio/SLES/Init.cpp	/^    *IID_ANDROIDSIMPLEBUFFERQUEUE;$/;"	m	namespace:SLES	file:
IID_ENGINE	Audio/SLES/Init.cpp	/^  const SLInterfaceID *IID_ENGINE, *IID_PLAY,$/;"	m	namespace:SLES	file:
IID_PLAY	Audio/SLES/Init.cpp	/^  const SLInterfaceID *IID_ENGINE, *IID_PLAY,$/;"	m	namespace:SLES	file:
ILECCreateOnPort	Device/Driver/ILEC.cpp	/^ILECCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ILECDevice	Device/Driver/ILEC.cpp	/^class ILECDevice : public AbstractDevice {$/;"	c	file:
IMI	Device/Driver/IMI/Protocol/Checksum.hpp	/^namespace IMI$/;"	n
IMI	Device/Driver/IMI/Protocol/Communication.cpp	/^namespace IMI$/;"	n	file:
IMI	Device/Driver/IMI/Protocol/Communication.hpp	/^namespace IMI$/;"	n
IMI	Device/Driver/IMI/Protocol/Conversion.hpp	/^namespace IMI$/;"	n
IMI	Device/Driver/IMI/Protocol/IGC.cpp	/^namespace IMI$/;"	n	file:
IMI	Device/Driver/IMI/Protocol/IGC.hpp	/^namespace IMI$/;"	n
IMI	Device/Driver/IMI/Protocol/MessageParser.cpp	/^namespace IMI {$/;"	n	file:
IMI	Device/Driver/IMI/Protocol/MessageParser.hpp	/^namespace IMI$/;"	n
IMI	Device/Driver/IMI/Protocol/Protocol.cpp	/^namespace IMI$/;"	n	file:
IMI	Device/Driver/IMI/Protocol/Protocol.hpp	/^namespace IMI$/;"	n
IMI	Device/Driver/IMI/Protocol/Types.hpp	/^namespace IMI$/;"	n
IMIBYTE	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint8_t IMIBYTE;$/;"	t	namespace:IMI
IMICHAR	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef char IMICHAR;$/;"	t	namespace:IMI
IMICOMM_BIGPARAM1	Device/Driver/IMI/Protocol/Types.hpp	393;"	d
IMICOMM_BIGPARAM2	Device/Driver/IMI/Protocol/Types.hpp	394;"	d
IMICOMM_CRC_LEN	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMICOMM_CRC_LEN   = 2;$/;"	m	namespace:IMI
IMICOMM_MAKEBIGPARAM	Device/Driver/IMI/Protocol/Types.hpp	392;"	d
IMICOMM_MAX_MSG_SIZE	Device/Driver/IMI/Protocol/MessageParser.cpp	27;"	d	file:
IMICOMM_MSG_HEADER_SIZE	Device/Driver/IMI/Protocol/Types.hpp	391;"	d
IMICOMM_SYNC_CHAR1	Device/Driver/IMI/Protocol/Types.hpp	/^  const IMIBYTE IMICOMM_SYNC_CHAR1 = 'E';$/;"	m	namespace:IMI
IMICOMM_SYNC_CHAR2	Device/Driver/IMI/Protocol/Types.hpp	/^  const IMIBYTE IMICOMM_SYNC_CHAR2 = 'X';$/;"	m	namespace:IMI
IMICOMM_SYNC_LEN	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMICOMM_SYNC_LEN  = 2;$/;"	m	namespace:IMI
IMICreateOnPort	Device/Driver/IMI/Register.cpp	/^IMICreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
IMIDATETIMESEC	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint32_t IMIDATETIMESEC;$/;"	t	namespace:IMI
IMIDDWORD	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint64_t IMIDDWORD;$/;"	t	namespace:IMI
IMIDECL_CCL_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CCL_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_CID_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CID_LENGTH = 4;$/;"	m	namespace:IMI
IMIDECL_CLB_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CLB_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_CM2_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_CM2_LENGTH = 30;$/;"	m	namespace:IMI
IMIDECL_GID_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_GID_LENGTH = 12;$/;"	m	namespace:IMI
IMIDECL_GTY_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_GTY_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_MAX_WAYPOINTS	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_MAX_WAYPOINTS    = 15;$/;"	m	namespace:IMI
IMIDECL_PLT_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_PLT_LENGTH = 30;$/;"	m	namespace:IMI
IMIDECL_SIT_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_SIT_LENGTH = 20;$/;"	m	namespace:IMI
IMIDECL_TASK_NAME_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_TASK_NAME_LENGTH = 30;$/;"	m	namespace:IMI
IMIDECL_WP_NAME_LENGTH	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIDECL_WP_NAME_LENGTH   = 12;$/;"	m	namespace:IMI
IMIDWORD	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint32_t IMIDWORD;$/;"	t	namespace:IMI
IMIDevice	Device/Driver/IMI/Internal.hpp	/^  IMIDevice(Port &_port):port(_port) {}$/;"	f	class:IMIDevice
IMIDevice	Device/Driver/IMI/Internal.hpp	/^class IMIDevice : public AbstractDevice {$/;"	c
IMIFIX_E_TYPE_COMMENT	Device/Driver/IMI/Protocol/Types.hpp	356;"	d
IMIFIX_E_TYPE_PEV	Device/Driver/IMI/Protocol/Types.hpp	357;"	d
IMIFIX_E_TYPE_SATELLITES	Device/Driver/IMI/Protocol/Types.hpp	355;"	d
IMIFIX_E_TYPE_TASK	Device/Driver/IMI/Protocol/Types.hpp	358;"	d
IMIFIX_ID_B2_RECORD	Device/Driver/IMI/Protocol/Types.hpp	299;"	d
IMIFIX_ID_B_RECORD	Device/Driver/IMI/Protocol/Types.hpp	298;"	d
IMIFIX_ID_DELETED	Device/Driver/IMI/Protocol/Types.hpp	296;"	d
IMIFIX_ID_E_RECORD	Device/Driver/IMI/Protocol/Types.hpp	300;"	d
IMIFIX_ID_FREE	Device/Driver/IMI/Protocol/Types.hpp	303;"	d
IMIFIX_ID_IMIDECLARATION	Device/Driver/IMI/Protocol/Types.hpp	297;"	d
IMIFIX_ID_K_RECORD	Device/Driver/IMI/Protocol/Types.hpp	301;"	d
IMIFIX_ID_X_RECORD	Device/Driver/IMI/Protocol/Types.hpp	302;"	d
IMIIS_FIX	Device/Driver/IMI/Protocol/Types.hpp	305;"	d
IMINO_ENL_MASK	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMINO_ENL_MASK = 0x80;$/;"	m	namespace:IMI
IMIRSA_MAX_BITS	Device/Driver/IMI/Protocol/Types.hpp	/^  const unsigned IMIRSA_MAX_BITS = 1024;$/;"	m	namespace:IMI
IMISDWORD	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef int32_t IMISDWORD;$/;"	t	namespace:IMI
IMISWORD	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef int16_t IMISWORD;$/;"	t	namespace:IMI
IMIWORD	Device/Driver/IMI/Protocol/Types.hpp	/^  typedef uint16_t IMIWORD;$/;"	t	namespace:IMI
IMI_DAYS_IN_MONTH	Device/Driver/IMI/Protocol/Conversion.cpp	/^static constexpr IMI::IMIBYTE IMI_DAYS_IN_MONTH[12] =$/;"	v	file:
IMI_DAYS_IN_YEAR	Device/Driver/IMI/Protocol/Conversion.cpp	37;"	d	file:
IMI_ISLEAP	Device/Driver/IMI/Protocol/Conversion.cpp	36;"	d	file:
IMI_SECONDS_IN_DAY	Device/Driver/IMI/Protocol/Conversion.cpp	35;"	d	file:
IMI_SECONDS_IN_HOUR	Device/Driver/IMI/Protocol/Conversion.cpp	34;"	d	file:
IMI_SECONDS_IN_MINUTE	Device/Driver/IMI/Protocol/Conversion.cpp	33;"	d	file:
IMPORT	Dialogs/Plane/PlanePolarDialog.cpp	/^    IMPORT,$/;"	e	enum:final::Actions	file:
IMPORT	Dialogs/Waypoint/Manager.cpp	/^    IMPORT,$/;"	e	enum:final::Buttons	file:
IMPORTANT	FLARM/Traffic.hpp	/^    IMPORTANT = 2,$/;"	m	class:FlarmTraffic::AlarmType
INCH_MERCURY	Units/Unit.hpp	/^  INCH_MERCURY,$/;"	m	class:Unit
INCOMPLETE	Engine/PathSolvers/SolverResult.hpp	/^  INCOMPLETE,$/;"	m	class:SolverResult
INCORRECT_NUMBER_TURNPOINTS	Engine/Task/Factory/ValidationError.hpp	/^  INCORRECT_NUMBER_TURNPOINTS,$/;"	m	class:TaskValidationErrorType
INDENTCHAR	XML/Writer.cpp	33;"	d	file:
INFINITE	Net/HTTP/Request.hpp	/^    static constexpr unsigned INFINITE = (unsigned)-1;$/;"	m	class:Net::Request
INFINITY	Terrain/jasper/jas_types.h	135;"	d
INFINITY	Topography/shapelib/mapprimitive.c	48;"	d	file:
INFLATE_HPP	Dialogs/Inflate.hpp	25;"	d
INFOBOX	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
INFOBOXESCONFIGPANEL_HPP	Dialogs/Settings/Panels/InfoBoxesConfigPanel.hpp	25;"	d
INFOBOXES_CONFIG_DIALOG_HPP	Dialogs/Settings/dlgConfigInfoboxes.hpp	25;"	d
INFORMATION_ONLY	FLARM/Error.hpp	/^    INFORMATION_ONLY = 0x01,$/;"	m	struct:FlarmError	typeref:enum:FlarmError::
INFO_ALERT	FLARM/Traffic.hpp	/^    INFO_ALERT = 4,$/;"	m	class:FlarmTraffic::AlarmType
INFO_BOX_PANEL	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    INFO_BOX_PANEL,$/;"	e	enum:final::Controls	file:
INIT_LABEL_STYLE	Topography/shapelib/mapserver.h	3124;"	d
INIT_STROKE_STYLE	Topography/shapelib/mapserver.h	3066;"	d
INIT_SYMBOL_STYLE	Topography/shapelib/mapserver.h	3097;"	d
INNER_RADIUS	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  INNER_RADIUS,$/;"	e	enum:Controls	file:
INNER_RADIUS	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  INNER_RADIUS,$/;"	e	enum:Controls	file:
INPUT_ACKNOWLEDGE	NMEA/VegaSwitchState.hpp	/^    INPUT_ACKNOWLEDGE = 8,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_AIRBRAKE_LOCKED	NMEA/VegaSwitchState.hpp	/^    INPUT_AIRBRAKE_LOCKED = 21,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_AIRBRAKE_NOT_LOCKED	NMEA/VegaSwitchState.hpp	/^    INPUT_AIRBRAKE_NOT_LOCKED = 6,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_FLAP_NEGATIVE	NMEA/VegaSwitchState.hpp	/^    INPUT_FLAP_NEGATIVE = 2,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_FLAP_POSITIVE	NMEA/VegaSwitchState.hpp	/^    INPUT_FLAP_POSITIVE = 0,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_FLAP_ZERO	NMEA/VegaSwitchState.hpp	/^    INPUT_FLAP_ZERO = 1,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_GEAR_EXTENDED	NMEA/VegaSwitchState.hpp	/^    INPUT_GEAR_EXTENDED = 5,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_MASK_ACK	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_ACK = 1 << INPUT_ACKNOWLEDGE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_AIRBRAKE_LOCKED	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_AIRBRAKE_LOCKED = 1 << INPUT_AIRBRAKE_LOCKED;$/;"	m	struct:VegaSwitchState
INPUT_MASK_AIRBRAKE_NOT_LOCKED	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_AIRBRAKE_NOT_LOCKED = 1 << INPUT_AIRBRAKE_NOT_LOCKED;$/;"	m	struct:VegaSwitchState
INPUT_MASK_FLAP_NEGATIVE	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_FLAP_NEGATIVE = 1 << INPUT_FLAP_NEGATIVE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_FLAP_POSITIVE	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_FLAP_POSITIVE = 1 << INPUT_FLAP_POSITIVE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_FLAP_ZERO	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_FLAP_ZERO = 1 << INPUT_FLAP_ZERO;$/;"	m	struct:VegaSwitchState
INPUT_MASK_GEAR_EXTENDED	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_GEAR_EXTENDED = 1 << INPUT_GEAR_EXTENDED;$/;"	m	struct:VegaSwitchState
INPUT_MASK_REP	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_REP = 1 << INPUT_REPEAT;$/;"	m	struct:VegaSwitchState
INPUT_MASK_SC	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_SC = 1 << INPUT_SPEED_COMMAND;$/;"	m	struct:VegaSwitchState
INPUT_MASK_USER_SWITCH_DOWN	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_USER_SWITCH_DOWN = 1 << INPUT_USER_SWITCH_DOWN;$/;"	m	struct:VegaSwitchState
INPUT_MASK_USER_SWITCH_MIDDLE	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_USER_SWITCH_MIDDLE = 1 << INPUT_USER_SWITCH_MIDDLE;$/;"	m	struct:VegaSwitchState
INPUT_MASK_USER_SWITCH_UP	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INPUT_MASK_USER_SWITCH_UP = 1 << INPUT_USER_SWITCH_UP;$/;"	m	struct:VegaSwitchState
INPUT_REPEAT	NMEA/VegaSwitchState.hpp	/^    INPUT_REPEAT = 9,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_SPEED_COMMAND	NMEA/VegaSwitchState.hpp	/^    INPUT_SPEED_COMMAND = 3,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_STALL	NMEA/VegaSwitchState.hpp	/^    INPUT_STALL = 20,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_USER_SWITCH_DOWN	NMEA/VegaSwitchState.hpp	/^    INPUT_USER_SWITCH_DOWN = 25,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_USER_SWITCH_MIDDLE	NMEA/VegaSwitchState.hpp	/^    INPUT_USER_SWITCH_MIDDLE = 24,$/;"	e	enum:VegaSwitchState::InputBits
INPUT_USER_SWITCH_UP	NMEA/VegaSwitchState.hpp	/^    INPUT_USER_SWITCH_UP = 23,$/;"	e	enum:VegaSwitchState::InputBits
INSERT_IN_TASK	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  INSERT_IN_TASK,$/;"	e	enum:Commands	file:
INSIDE	Renderer/AirspaceRendererSettings.hpp	/^  INSIDE,$/;"	m	class:AirspaceDisplayMode
INTEGER	Form/DataField/Base.hpp	/^    INTEGER,$/;"	m	class:DataField::Type
INTERFACECONFIGPANEL_HPP	Dialogs/Settings/Panels/InterfaceConfigPanel.hpp	25;"	d
INTERFACE_BLACKBOARD_H	Blackboard/InterfaceBlackboard.hpp	25;"	d
INTERMEDIATEPOINT_H	Engine/Task/Ordered/Points/IntermediatePoint.hpp	24;"	d
INTERNAL	Device/Config.hpp	/^    INTERNAL,$/;"	m	class:DeviceConfig::PortType
INTERSECT_BITS	Terrain/RasterTileCache.hpp	/^  static constexpr unsigned INTERSECT_BITS = 7;$/;"	m	class:RasterTileCache
INTERVAL	Screen/Custom/DoubleClick.cpp	/^constexpr std::chrono::milliseconds DoubleClick::INTERVAL;$/;"	m	class:DoubleClick	file:
INTERVAL	Screen/Custom/DoubleClick.hpp	/^  static constexpr auto INTERVAL = std::chrono::milliseconds(IsKobo() ? 750 : 500);$/;"	m	class:DoubleClick
INT_ANGLE_MASK	Math/FastTrig.hpp	/^static constexpr unsigned INT_ANGLE_MASK = INT_ANGLE_RANGE - 1;$/;"	v
INT_ANGLE_MULT	Math/FastTrig.hpp	/^static constexpr double INT_ANGLE_MULT = INT_ANGLE_RANGE \/ M_2PI;$/;"	v
INT_ANGLE_RANGE	Math/FastTrig.hpp	/^static constexpr unsigned INT_ANGLE_RANGE = 4096;$/;"	v
INT_QUARTER_CIRCLE	Math/FastTrig.hpp	/^static constexpr unsigned INT_QUARTER_CIRCLE = INT_ANGLE_RANGE \/ 4;$/;"	v
INVALID	Dialogs/Plane/PlanePolarDialog.cpp	/^    INVALID,$/;"	e	enum:final::Controls	file:
INVALID	Engine/Route/ReachResult.hpp	/^    INVALID,$/;"	m	class:ReachResult::Validity
INVALID	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned INVALID = -1;$/;"	m	struct:VegaSwitchState
INVALID	Screen/Custom/UncompressedImage.hpp	/^    INVALID,$/;"	m	class:UncompressedImage::Format
INVALID	Task/MapTaskManager.hpp	/^    INVALID,$/;"	e	enum:MapTaskManager::TaskEditResult
INVALID	Terrain/Height.hpp	/^  static constexpr int16_t INVALID = -32768;$/;"	m	class:TerrainHeight
INVALID	Time/RoughTime.hpp	/^  static constexpr uint16_t INVALID = -1;$/;"	m	class:RoughTime
INVALID_GR	Computer/GlideRatioCalculator.hpp	/^static constexpr double INVALID_GR = 999;$/;"	v
INVERSE_2G	Computer/BasicComputer.cpp	/^static constexpr double INVERSE_2G = INVERSE_G \/ 2.;$/;"	v	file:
INVERSE_G	Computer/BasicComputer.cpp	/^static constexpr double INVERSE_G = 1. \/ GRAVITY;$/;"	v	file:
INVERTED	Device/Driver/LX/LX1600.hpp	/^    INVERTED = 1,$/;"	m	class:LX1600::SCControlMode
INVERTED	Device/Driver/LXERA/LXERA.hpp	/^    INVERTED = 1,$/;"	m	class:LXEra::SCControlMode
IOIOHelper	Android/IOIOHelper.cpp	/^IOIOHelper::IOIOHelper(JNIEnv *env)$/;"	f	class:IOIOHelper
IOIOHelper	Android/IOIOHelper.hpp	/^class IOIOHelper : protected Java::GlobalObject {$/;"	c
IOIOUART	Device/Config.hpp	/^    IOIOUART,$/;"	m	class:DeviceConfig::PortType
IOIOVOLTAGE	Device/Config.hpp	/^    IOIOVOLTAGE,$/;"	m	class:DeviceConfig::PortType
IPV4_ADDRESS_HXX	Net/IPv4Address.hxx	31;"	d
IPV6_ADDRESS_HXX	Net/IPv6Address.hxx	31;"	d
IP_ADDRESS	Dialogs/Device/DeviceEditWidget.cpp	/^  IP_ADDRESS,$/;"	e	enum:ControlIndex	file:
IPv4Address	Net/IPv4Address.hxx	/^class IPv4Address {$/;"	c
IPv6Address	Net/IPv6Address.hxx	/^		:IPv6Address(IN6ADDR_ANY_INIT, port, scope_id) {}$/;"	f	class:IPv6Address
IPv6Address	Net/IPv6Address.hxx	/^class IPv6Address {$/;"	c
ISOLINECROSSINGFINDER_HPP	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	24;"	d
ISO_LATIN_1	IO/Charset.hpp	/^  ISO_LATIN_1,$/;"	m	class:Charset
IS_BIG_ENDIAN	OS/ByteOrder.hpp	41;"	d
IS_BIG_ENDIAN	OS/ByteOrder.hpp	45;"	d
IS_BIG_ENDIAN	OS/ByteOrder.hpp	51;"	d
IS_BIG_ENDIAN	OS/ByteOrder.hpp	54;"	d
IS_BIG_ENDIAN	OS/ByteOrder.hpp	61;"	d
IS_BIG_ENDIAN	OS/ByteOrder.hpp	64;"	d
IS_LITTLE_ENDIAN	OS/ByteOrder.hpp	40;"	d
IS_LITTLE_ENDIAN	OS/ByteOrder.hpp	44;"	d
IS_LITTLE_ENDIAN	OS/ByteOrder.hpp	50;"	d
IS_LITTLE_ENDIAN	OS/ByteOrder.hpp	53;"	d
IS_LITTLE_ENDIAN	OS/ByteOrder.hpp	60;"	d
IS_LITTLE_ENDIAN	OS/ByteOrder.hpp	63;"	d
IS_PARALLEL_OFFSET	Topography/shapelib/mapserver.h	1051;"	d
IS_PERPENDICULAR_OFFSET	Topography/shapelib/mapserver.h	1188;"	d
IS_THIRDPARTY_LAYER_CONNECTIONTYPE	Topography/shapelib/mapserver.h	519;"	d
ITEM	Dialogs/Weather/RASPDialog.cpp	/^    ITEM,$/;"	e	enum:final::Controls	file:
ITERABLE_SPLIT_STRING_HXX	Util/IterableSplitString.hxx	31;"	d
Icon	Dialogs/DialogSettings.hpp	/^    Icon,$/;"	m	class:DialogSettings::TabStyle
IconLook	Look/IconLook.hpp	/^struct IconLook {$/;"	s
IconStretchFixed10	Screen/Icon.cpp	/^IconStretchFixed10(unsigned source_dpi)$/;"	f	file:
IconStretchInteger	Screen/Icon.cpp	/^IconStretchInteger(unsigned source_dpi)$/;"	f	file:
IdCompare	Cloud/Client.hpp	/^  struct IdCompare {$/;"	s	struct:CloudClient
IdSet	Cloud/Client.hpp	/^                                boost::intrusive::constant_time_size<false>> IdSet;$/;"	t	class:CloudClientContainer
IgcReplay	Replay/IgcReplay.cpp	/^IgcReplay::IgcReplay(std::unique_ptr<NLineReader> &&_reader)$/;"	f	class:IgcReplay
IgcReplay	Replay/IgcReplay.hpp	/^class IgcReplay: public AbstractReplay$/;"	c
IgnoreBitmapAlpha	MapWindow/OverlayBitmap.hpp	/^  void IgnoreBitmapAlpha() {$/;"	f	class:final
IgnoreNMEAChecksum	Profile/ProfileKeys.cpp	/^const char IgnoreNMEAChecksum[] = "IgnoreNMEAChecksum";$/;"	m	namespace:ProfileKeys	file:
ImageArea	Weather/PCMet/Images.hpp	/^  struct ImageArea {$/;"	s	namespace:PCMet
ImageType	Weather/PCMet/Images.hpp	/^  struct ImageType {$/;"	s	namespace:PCMet
ImageTypeListWidget	Dialogs/Weather/PCMetDialog.cpp	/^  explicit ImageTypeListWidget(ImageAreaListWidget &_area_list)$/;"	f	class:final
Import	Form/DataField/Angle.cpp	/^AngleDataField::Import(int value)$/;"	f	class:AngleDataField
Import	Form/DataField/Angle.hpp	/^  static unsigned Import(Angle value) {$/;"	f	class:final
Import	Form/DataField/Angle.hpp	/^  static unsigned Import(unsigned value) {$/;"	f	class:final
Import	NMEA/Validity.hpp	/^    :last(Import(_last)) {}$/;"	f	class:Validity
Import	Rough/RoughAngle.hpp	/^  static constexpr int16_t Import(Angle x) {$/;"	f	class:RoughAngle
Import	Rough/RoughSpeed.hpp	/^  static constexpr uint16_t Import(double x) {$/;"	f	class:RoughSpeed
Import	Rough/RoughVSpeed.hpp	/^  static int16_t Import(double x) {$/;"	f	class:RoughVSpeed
Import	Screen/Memory/Canvas.cpp	/^  static constexpr ActivePixelTraits::color_type Import(Color color) {$/;"	f	class:SDLRasterCanvas
Import	Screen/OpenGL/Color.hpp	/^  static constexpr Component Import(uint8_t value) {$/;"	f	class:Color
ImportAlphaTexture	Screen/OpenGL/UncompressedImage.cpp	/^ImportAlphaTexture(const UncompressedImage &image)$/;"	f
ImportAltitudeUnit	Profile/UnitsConfig.cpp	/^ImportAltitudeUnit(unsigned tmp)$/;"	f	file:
ImportAngle	Screen/OpenGL/VertexArray.hpp	/^  static unsigned ImportAngle(unsigned other_angle, unsigned other_max) {$/;"	f	struct:GLDonutVertices
ImportAngle	Tracking/SkyLines/Import.hpp	/^ImportAngle(int32_t src)$/;"	f	namespace:SkyLinesTracking
ImportClicked	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::ImportClicked()$/;"	f	class:PlanePolarWidget
ImportDeprecatedLoggerSerial	IGC/IGCParser.cpp	/^ImportDeprecatedLoggerSerial(char id[4], unsigned serial)$/;"	f	file:
ImportDistanceUnit	Profile/UnitsConfig.cpp	/^ImportDistanceUnit(unsigned tmp)$/;"	f	file:
ImportGeoPoint	Tracking/SkyLines/Import.hpp	/^ImportGeoPoint(SkyLinesTracking::GeoPoint src)$/;"	f	namespace:SkyLinesTracking
ImportLabel	Topography/XShape.cpp	/^ImportLabel(const char *src)$/;"	f	file:
ImportLongitude	Geo/GeoClip.hpp	/^  Angle ImportLongitude(Angle l) const {$/;"	f	class:GeoClip
ImportPoint	Geo/GeoClip.hpp	/^  GeoPoint ImportPoint(GeoPoint pt) const {$/;"	f	class:GeoClip
ImportRect	Topography/Convert.hpp	/^ImportRect(const rectObj r)$/;"	f
ImportSpeedUnit	Profile/UnitsConfig.cpp	/^ImportSpeedUnit(unsigned tmp)$/;"	f	file:
ImportSurface	Screen/Memory/UncompressedImage.hpp	/^ImportSurface(WritableImageBuffer<PixelTraits> &buffer,$/;"	f
ImportTemperatureUnit	Profile/UnitsConfig.cpp	/^ImportTemperatureUnit(unsigned tmp)$/;"	f	file:
ImportTexture	Screen/OpenGL/UncompressedImage.cpp	/^ImportTexture(const UncompressedImage &image)$/;"	f
ImportTimeMs	Tracking/SkyLines/Import.hpp	/^ImportTimeMs(uint32_t src_be)$/;"	f	namespace:SkyLinesTracking
ImportVerticalSpeedUnit	Profile/UnitsConfig.cpp	/^ImportVerticalSpeedUnit(unsigned tmp)$/;"	f	file:
InBlackout	Computer/Wind/WindEKFGlue.hpp	/^  bool InBlackout(const unsigned time) const {$/;"	f	class:WindEKFGlue
InCirclingMode	MapWindow/GlueMapWindow.hpp	/^  bool InCirclingMode() const {$/;"	f	class:GlueMapWindow
InDeadBand	Audio/VarioSynthesiser.hpp	/^  bool InDeadBand(int ivario) {$/;"	f	class:final
InDrawThread	Components.cpp	/^InDrawThread()$/;"	f
InInHeightLimit	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::InInHeightLimit(const AircraftState &state) const$/;"	f	class:FinishPoint
InMainThread	Thread/Debug.cpp	/^InMainThread()$/;"	f
InStartSector	Monitor/TaskConstraintsMonitor.cpp	/^InStartSector()$/;"	f	file:
Inc	Form/DataField/Angle.cpp	/^AngleDataField::Inc()$/;"	f	class:AngleDataField
Inc	Form/DataField/Base.cpp	/^DataField::Inc()$/;"	f	class:DataField
Inc	Form/DataField/Boolean.cpp	/^DataFieldBoolean::Inc()$/;"	f	class:DataFieldBoolean
Inc	Form/DataField/Enum.cpp	/^DataFieldEnum::Inc()$/;"	f	class:DataFieldEnum
Inc	Form/DataField/File.cpp	/^FileDataField::Inc()$/;"	f	class:FileDataField
Inc	Form/DataField/Float.cpp	/^DataFieldFloat::Inc()$/;"	f	class:DataFieldFloat
Inc	Form/DataField/Integer.cpp	/^DataFieldInteger::Inc()$/;"	f	class:DataFieldInteger
Inc	Form/DataField/Prefix.cpp	/^PrefixDataField::Inc()$/;"	f	class:PrefixDataField
Inc	Form/DataField/RoughTime.cpp	/^RoughTimeDataField::Inc()$/;"	f	class:RoughTimeDataField
Inc	Form/DataField/Time.cpp	/^DataFieldTime::Inc()$/;"	f	class:DataFieldTime
IncludeRecordInGCalc	Logger/GRecord.cpp	/^GRecord::IncludeRecordInGCalc(const char *in)$/;"	f	class:GRecord
IncrementActiveTaskPoint	Engine/Task/TaskManager.cpp	/^TaskManager::IncrementActiveTaskPoint(int offset)$/;"	f	class:TaskManager
IncrementActiveTaskPoint	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::IncrementActiveTaskPoint(int offset)$/;"	f	class:ProtectedTaskManager
IncrementActiveTaskPointArm	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::IncrementActiveTaskPointArm(int offset)$/;"	f	class:ProtectedTaskManager
IncrementColumn	Form/DigitEntry.cpp	/^DigitEntry::IncrementColumn(unsigned i)$/;"	f	class:DigitEntry
IncrementDay	Time/BrokenDate.cpp	/^BrokenDate::IncrementDay()$/;"	f	class:BrokenDate
IncrementLetter	Dialogs/KnobTextEntry.cpp	/^  void IncrementLetter() {$/;"	f	class:final	file:
IncrementSlot	Math/Histogram.cpp	/^Histogram::IncrementSlot(const unsigned i, const double mag)$/;"	f	class:Histogram
IncrementalSpeedComputer	Engine/Task/Computer/IncrementalSpeedComputer.cpp	/^IncrementalSpeedComputer::IncrementalSpeedComputer(const bool _is_positive)$/;"	f	class:IncrementalSpeedComputer
IncrementalSpeedComputer	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^class IncrementalSpeedComputer {$/;"	c
IndexAtX	Terrain/ScanLine.cpp	/^IndexAtX(const GridRay &ray, int x)$/;"	f	file:
IndexAtY	Terrain/ScanLine.cpp	/^IndexAtY(const GridRay &ray, int y)$/;"	f	file:
IndexToDXDY	Engine/Route/RoutePolar.cpp	/^RoutePolar::IndexToDXDY(const int index)$/;"	f	class:RoutePolar
IndexToTime	Weather/Rasp/RaspStore.cpp	/^RaspStore::IndexToTime(unsigned index)$/;"	f	class:RaspStore
InflateToString	Dialogs/Inflate.cpp	/^InflateToString(const void *compressed, size_t length)$/;"	f
InfoBoxConfig	PageSettings.hpp	/^    constexpr InfoBoxConfig(bool _auto_switch, unsigned _panel)$/;"	f	struct:PageLayout::InfoBoxConfig
InfoBoxConfig	PageSettings.hpp	/^  struct InfoBoxConfig {$/;"	s	struct:PageLayout
InfoBoxContent	InfoBoxes/Content/Base.hpp	/^class InfoBoxContent$/;"	c
InfoBoxContentActiveRadioFrequency	InfoBoxes/Content/Radio.hpp	/^class InfoBoxContentActiveRadioFrequency : public InfoBoxContent$/;"	c
InfoBoxContentAlternateGR	InfoBoxes/Content/Alternate.hpp	/^  InfoBoxContentAlternateGR(const unsigned _index):$/;"	f	class:InfoBoxContentAlternateGR
InfoBoxContentAlternateGR	InfoBoxes/Content/Alternate.hpp	/^class InfoBoxContentAlternateGR : public InfoBoxContent$/;"	c
InfoBoxContentAlternateName	InfoBoxes/Content/Alternate.hpp	/^  InfoBoxContentAlternateName(const unsigned _index):$/;"	f	class:InfoBoxContentAlternateName
InfoBoxContentAlternateName	InfoBoxes/Content/Alternate.hpp	/^class InfoBoxContentAlternateName : public InfoBoxContent$/;"	c
InfoBoxContentAltitude	InfoBoxes/Content/Altitude.hpp	/^class InfoBoxContentAltitude : public InfoBoxContent$/;"	c
InfoBoxContentAltitudeGPS	InfoBoxes/Content/Altitude.hpp	/^class InfoBoxContentAltitudeGPS : public InfoBoxContentAltitude$/;"	c
InfoBoxContentBarogram	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentBarogram : public InfoBoxContentAltitude$/;"	c
InfoBoxContentCallback	InfoBoxes/Content/Factory.cpp	/^  InfoBoxContentCallback(void (*_update)(InfoBoxData &data),$/;"	f	class:InfoBoxContentCallback
InfoBoxContentCallback	InfoBoxes/Content/Factory.cpp	/^class InfoBoxContentCallback : public InfoBoxContent {$/;"	c	file:
InfoBoxContentCirclingAverageSpark	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentCirclingAverageSpark : public InfoBoxContentSpark$/;"	c
InfoBoxContentClimbPercent	InfoBoxes/Content/Thermal.hpp	/^class InfoBoxContentClimbPercent : public InfoBoxContent$/;"	c
InfoBoxContentHorizon	InfoBoxes/Content/Other.hpp	/^class InfoBoxContentHorizon : public InfoBoxContent$/;"	c
InfoBoxContentMacCready	InfoBoxes/Content/MacCready.hpp	/^class InfoBoxContentMacCready : public InfoBoxContent$/;"	c
InfoBoxContentNettoVarioSpark	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentNettoVarioSpark : public InfoBoxContentSpark$/;"	c
InfoBoxContentNextArrow	InfoBoxes/Content/Task.hpp	/^class InfoBoxContentNextArrow: public InfoBoxContent$/;"	c
InfoBoxContentNextWaypoint	InfoBoxes/Content/Task.hpp	/^class InfoBoxContentNextWaypoint : public InfoBoxContent$/;"	c
InfoBoxContentOLC	InfoBoxes/Content/Contest.hpp	/^class InfoBoxContentOLC: public InfoBoxContent$/;"	c
InfoBoxContentOLCSpeed	InfoBoxes/Content/Contest.hpp	/^class InfoBoxContentOLCSpeed: public InfoBoxContent$/;"	c
InfoBoxContentSpark	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentSpark: public InfoBoxContent$/;"	c
InfoBoxContentSpeedGround	InfoBoxes/Content/Speed.hpp	/^class InfoBoxContentSpeedGround : public InfoBoxContent$/;"	c
InfoBoxContentStandbyRadioFrequency	InfoBoxes/Content/Radio.hpp	/^class InfoBoxContentStandbyRadioFrequency : public InfoBoxContent$/;"	c
InfoBoxContentTaskProgress	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentTaskProgress : public InfoBoxContent$/;"	c
InfoBoxContentTeamCode	InfoBoxes/Content/Team.hpp	/^class InfoBoxContentTeamCode : public InfoBoxContent$/;"	c
InfoBoxContentTemperatureForecast	InfoBoxes/Content/Weather.hpp	/^class InfoBoxContentTemperatureForecast : public InfoBoxContent$/;"	c
InfoBoxContentThermalAssistant	InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentThermalAssistant::InfoBoxContentThermalAssistant()$/;"	f	class:InfoBoxContentThermalAssistant
InfoBoxContentThermalAssistant	InfoBoxes/Content/Thermal.hpp	/^class InfoBoxContentThermalAssistant: public InfoBoxContent$/;"	c
InfoBoxContentThermalBand	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentThermalBand : public InfoBoxContent$/;"	c
InfoBoxContentTrack	InfoBoxes/Content/Direction.hpp	/^class InfoBoxContentTrack : public InfoBoxContent$/;"	c
InfoBoxContentVarioSpark	InfoBoxes/Content/Trace.hpp	/^class InfoBoxContentVarioSpark : public InfoBoxContentSpark$/;"	c
InfoBoxContentWindArrow	InfoBoxes/Content/Weather.hpp	/^class InfoBoxContentWindArrow: public InfoBoxContent$/;"	c
InfoBoxData	InfoBoxes/Data.hpp	/^struct InfoBoxData {$/;"	s
InfoBoxDrawIfDirty	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::InfoBoxDrawIfDirty()$/;"	f	class:InfoBoxManager
InfoBoxFactory	InfoBoxes/Content/Factory.hpp	/^namespace InfoBoxFactory$/;"	n
InfoBoxFactory	InfoBoxes/Content/Type.hpp	/^namespace InfoBoxFactory$/;"	n
InfoBoxGeometry	Profile/ProfileKeys.cpp	/^const char InfoBoxGeometry[] = "InfoBoxGeometry";$/;"	m	namespace:ProfileKeys	file:
InfoBoxKeyCodes	InfoBoxes/Content/Base.hpp	/^  enum InfoBoxKeyCodes {$/;"	g	class:InfoBoxContent
InfoBoxLayout	InfoBoxes/InfoBoxLayout.cpp	/^namespace InfoBoxLayout$/;"	n	file:
InfoBoxLayout	InfoBoxes/InfoBoxLayout.hpp	/^namespace InfoBoxLayout$/;"	n
InfoBoxLayout	InfoBoxes/InfoBoxManager.hpp	/^namespace InfoBoxLayout {$/;"	n
InfoBoxLayout	MainWindow.hpp	/^namespace InfoBoxLayout { struct Layout; }$/;"	n
InfoBoxLook	Look/InfoBoxLook.hpp	/^struct InfoBoxLook {$/;"	s
InfoBoxManager	InfoBoxes/InfoBoxManager.cpp	/^namespace InfoBoxManager$/;"	n	file:
InfoBoxManager	InfoBoxes/InfoBoxManager.hpp	/^namespace InfoBoxManager$/;"	n
InfoBoxPanel	InfoBoxes/Panel/Panel.hpp	/^  InfoBoxPanel(const TCHAR *_name, Widget *(*_load)(unsigned id))$/;"	f	struct:InfoBoxPanel
InfoBoxPanel	InfoBoxes/Panel/Panel.hpp	/^struct InfoBoxPanel {$/;"	s
InfoBoxPreview	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^class InfoBoxPreview : public PaintWindow {$/;"	c	file:
InfoBoxSettings	InfoBoxes/InfoBoxSettings.hpp	/^struct InfoBoxSettings {$/;"	s
InfoBoxWindow	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::InfoBoxWindow(ContainerWindow &parent, PixelRect rc,$/;"	f	class:InfoBoxWindow
InfoBoxWindow	InfoBoxes/InfoBoxWindow.hpp	/^class InfoBoxWindow : public LazyPaintWindow$/;"	c
InfoBoxesConfigPanel	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  InfoBoxesConfigPanel()$/;"	f	class:final
InfoBoxesConfigWidget	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxesConfigWidget(ActionListener &_dialog,$/;"	f	class:final
InfoRead	Net/HTTP/Multi.cpp	/^Net::CurlMulti::InfoRead(const CURL *easy)$/;"	f	class:Net::CurlMulti
InfoRead	Net/HTTP/Session.hpp	/^    CURLcode InfoRead(const CURL *easy) {$/;"	f	class:Net::Session
InformUnavailable	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::InformUnavailable(const char *obj, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
Init	Apple/InternalSensors.cpp	/^void InternalSensors::Init()$/;"	f	class:InternalSensors
Init	Computer/Wind/WindEKF.cpp	/^WindEKF::Init()$/;"	f	class:WindEKF
Init	Device/Simulator.cpp	/^Simulator::Init(NMEAInfo &basic)$/;"	f	class:Simulator
Init	Look/FontDescription.cpp	/^FontDescription::Init(const TCHAR *face,$/;"	f	class:FontDescription
Init	ResourceLoader.cpp	/^ResourceLoader::Init(HINSTANCE hInstance)$/;"	f	class:ResourceLoader
InitALSADeviceName	Audio/ALSAEnv.cpp	/^static const char *InitALSADeviceName()$/;"	f	namespace:ALSAEnv
InitALSALatency	Audio/ALSAEnv.cpp	/^static unsigned InitALSALatency()$/;"	f	namespace:ALSAEnv
InitAirspace	Lua/Airspace.cpp	/^Lua::InitAirspace(lua_State *L)$/;"	f	class:Lua
InitAssociatePointer	Lua/Associate.cpp	/^Lua::InitAssociatePointer(lua_State *L, const char *table)$/;"	f	class:Lua
InitBlackboard	Lua/Blackboard.cpp	/^Lua::InitBlackboard(lua_State *L)$/;"	f	class:Lua
InitDialogs	Lua/Dialogs.cpp	/^Lua::InitDialogs(lua_State *L)$/;"	f	class:Lua
InitExternalVolumeControl	Audio/VolumeController.cpp	/^VolumeController::InitExternalVolumeControl(unsigned initial_vol_percent)$/;"	f	class:VolumeController
InitInputEvent	Lua/InputEvent.cpp	/^Lua::InitInputEvent(lua_State *L)$/;"	f	class:Lua
InitLanguage	Language/LanguageGlue.cpp	/^InitLanguage()$/;"	f
InitLegacy	Lua/Legacy.cpp	/^Lua::InitLegacy(lua_State *L)$/;"	f	class:Lua
InitLog	Lua/Log.cpp	/^Lua::InitLog(lua_State *L)$/;"	f	class:Lua
InitLogger	Lua/Logger.cpp	/^Lua::InitLogger(lua_State *L)$/;"	f	class:Lua
InitMap	Lua/Map.cpp	/^Lua::InitMap(lua_State *L)$/;"	f	class:Lua
InitMenu	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::InitMenu(const TabMenuGroup groups[], unsigned n_groups)$/;"	f	class:TabMenuDisplay
InitPersistent	Lua/Persistent.cpp	/^Lua::InitPersistent(lua_State *L)$/;"	f	class:Lua
InitReplay	Lua/Replay.cpp	/^Lua::InitReplay(lua_State *L)$/;"	f	class:Lua
InitSettings	Lua/Settings.cpp	/^Lua::InitSettings(lua_State *L)$/;"	f	class:Lua
InitShaders	Screen/OpenGL/Shaders.cpp	/^OpenGL::InitShaders()$/;"	f	class:OpenGL
InitShapes	Screen/OpenGL/Shapes.cpp	/^OpenGL::InitShapes()$/;"	f	class:OpenGL
InitTargetPoints	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::InitTargetPoints(int _target_point)$/;"	f	class:TargetWidget
InitTask	Lua/Task.cpp	/^Lua::InitTask(lua_State *L)$/;"	f	class:Lua
InitThreadDebug	Thread/Debug.cpp	/^InitThreadDebug()$/;"	f
InitThreadDebug	Thread/Debug.hpp	/^InitThreadDebug()$/;"	f
InitTimer	Lua/Timer.cpp	/^Lua::InitTimer(lua_State *L)$/;"	f	class:Lua
InitTracking	Lua/Tracking.cpp	/^Lua::InitTracking(lua_State *L)$/;"	f	class:Lua
InitUsb	Android/Nook.cpp	/^Nook::InitUsb()$/;"	f	class:Nook
InitWind	Lua/Wind.cpp	/^Lua::InitWind(lua_State *L)$/;"	f	class:Lua
InitialControlRect	Widget/RowFormWidget.hpp	/^  PixelRect InitialControlRect(unsigned height) {$/;"	f	class:RowFormWidget
Initialise	Android/BMP085Device.cpp	/^BMP085Device::Initialise(JNIEnv *env)$/;"	f	class:BMP085Device
Initialise	Android/Bitmap.cpp	/^AndroidBitmap::Initialise(JNIEnv *env)$/;"	f	class:AndroidBitmap
Initialise	Android/BluetoothHelper.cpp	/^BluetoothHelper::Initialise(JNIEnv *env)$/;"	f	class:BluetoothHelper
Initialise	Android/DownloadManager.cpp	/^AndroidDownloadManager::Initialise(JNIEnv *env)$/;"	f	class:AndroidDownloadManager
Initialise	Android/Environment.cpp	/^Environment::Initialise(JNIEnv *env)$/;"	f	class:Environment
Initialise	Android/GliderLink.cpp	/^GliderLink::Initialise(JNIEnv *env)$/;"	f	class:GliderLink
Initialise	Android/I2CbaroDevice.cpp	/^I2CbaroDevice::Initialise(JNIEnv *env)$/;"	f	class:I2CbaroDevice
Initialise	Android/IOIOHelper.cpp	/^IOIOHelper::Initialise(JNIEnv *env)$/;"	f	class:IOIOHelper
Initialise	Android/InternalSensors.cpp	/^InternalSensors::Initialise(JNIEnv *env)$/;"	f	class:InternalSensors
Initialise	Android/NativeBMP085Listener.cpp	/^NativeBMP085Listener::Initialise(JNIEnv *env)$/;"	f	class:NativeBMP085Listener
Initialise	Android/NativeI2CbaroListener.cpp	/^NativeI2CbaroListener::Initialise(JNIEnv *env)$/;"	f	class:NativeI2CbaroListener
Initialise	Android/NativeInputListener.cpp	/^NativeInputListener::Initialise(JNIEnv *env)$/;"	f	class:NativeInputListener
Initialise	Android/NativeLeScanCallback.cpp	/^NativeLeScanCallback::Initialise(JNIEnv *env)$/;"	f	class:NativeLeScanCallback
Initialise	Android/NativeNunchuckListener.cpp	/^NativeNunchuckListener::Initialise(JNIEnv *env)$/;"	f	class:NativeNunchuckListener
Initialise	Android/NativePortListener.cpp	/^NativePortListener::Initialise(JNIEnv *env)$/;"	f	class:NativePortListener
Initialise	Android/NativeView.cpp	/^NativeView::Initialise(JNIEnv *env)$/;"	f	class:NativeView
Initialise	Android/NativeVoltageListener.cpp	/^NativeVoltageListener::Initialise(JNIEnv *env)$/;"	f	class:NativeVoltageListener
Initialise	Android/NunchuckDevice.cpp	/^NunchuckDevice::Initialise(JNIEnv *env)$/;"	f	class:NunchuckDevice
Initialise	Android/PortBridge.cpp	/^PortBridge::Initialise(JNIEnv *env)$/;"	f	class:PortBridge
Initialise	Android/SoundUtil.cpp	/^SoundUtil::Initialise(JNIEnv *env)$/;"	f	class:SoundUtil
Initialise	Android/TextUtil.cpp	/^TextUtil::Initialise(JNIEnv *_env)$/;"	f	class:TextUtil
Initialise	Android/Vibrator.cpp	/^Vibrator::Initialise(JNIEnv *env)$/;"	f	class:Vibrator
Initialise	Android/VoltageDevice.cpp	/^VoltageDevice::Initialise(JNIEnv *env)$/;"	f	class:VoltageDevice
Initialise	Audio/SLES/Init.cpp	/^SLES::Initialise()$/;"	f	class:SLES
Initialise	Audio/VarioGlue.cpp	/^AudioVarioGlue::Initialise()$/;"	f	class:AudioVarioGlue
Initialise	Computer/GlideComputer.cpp	/^GlideComputer::Initialise()$/;"	f	class:GlideComputer
Initialise	Computer/WaveComputer.cpp	/^WaveComputer::Initialise()$/;"	f	class:WaveComputer
Initialise	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageListWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:PageListWidget
Initialise	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskManagerDialog
Initialise	Engine/Route/RoutePolar.cpp	/^RoutePolar::Initialise(const GlideSettings &settings, const GlidePolar& polar,$/;"	f	class:RoutePolar
Initialise	Engine/Route/RoutePolars.cpp	/^RoutePolars::Initialise(const GlideSettings &settings, const GlidePolar &polar,$/;"	f	class:RoutePolars
Initialise	InfoBoxes/Panel/AltitudeInfo.cpp	/^AltitudeInfoPanel::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AltitudeInfoPanel
Initialise	Java/InputStream.cxx	/^Java::InputStream::Initialise(JNIEnv *env)$/;"	f	class:Java::InputStream
Initialise	Java/Object.cxx	/^Java::Object::Initialise(JNIEnv *env)$/;"	f	class:Java::Object
Initialise	Java/URL.cxx	/^Java::URL::Initialise(JNIEnv *env)$/;"	f	class:Java::URL
Initialise	Java/URL.cxx	/^Java::URLConnection::Initialise(JNIEnv *env)$/;"	f	class:Java::URLConnection
Initialise	Look/AircraftLook.cpp	/^AircraftLook::Initialise()$/;"	f	class:AircraftLook
Initialise	Look/AirspaceLook.cpp	/^AirspaceClassLook::Initialise(const AirspaceClassRendererSettings &settings)$/;"	f	class:AirspaceClassLook
Initialise	Look/AirspaceLook.cpp	/^AirspaceLook::Initialise(const AirspaceRendererSettings &settings,$/;"	f	class:AirspaceLook
Initialise	Look/ButtonLook.cpp	/^ButtonLook::Initialise(const Font &_font)$/;"	f	class:ButtonLook
Initialise	Look/ChartLook.cpp	/^ChartLook::Initialise()$/;"	f	class:ChartLook
Initialise	Look/CheckBoxLook.cpp	/^CheckBoxLook::Initialise(const Font &_font)$/;"	f	class:CheckBoxLook
Initialise	Look/ClimbPercentLook.cpp	/^ClimbPercentLook::Initialise()$/;"	f	class:ClimbPercentLook
Initialise	Look/CrossSectionLook.cpp	/^CrossSectionLook::Initialise(const Font &_grid_font)$/;"	f	class:CrossSectionLook
Initialise	Look/DialogLook.cpp	/^DialogLook::Initialise()$/;"	f	class:DialogLook
Initialise	Look/FinalGlideBarLook.cpp	/^FinalGlideBarLook::Initialise(const Font &_font)$/;"	f	class:FinalGlideBarLook
Initialise	Look/FlarmTrafficLook.cpp	/^FlarmTrafficLook::Initialise(const TrafficLook &other, bool small, bool inverse)$/;"	f	class:FlarmTrafficLook
Initialise	Look/GestureLook.cpp	/^GestureLook::Initialise()$/;"	f	class:GestureLook
Initialise	Look/HorizonLook.cpp	/^HorizonLook::Initialise()$/;"	f	class:HorizonLook
Initialise	Look/IconLook.cpp	/^IconLook::Initialise()$/;"	f	class:IconLook
Initialise	Look/InfoBoxLook.cpp	/^InfoBoxLook::Initialise(bool _inverse, bool use_colors,$/;"	f	class:InfoBoxLook
Initialise	Look/Look.cpp	/^Look::Initialise(const Font &map_font)$/;"	f	class:Look
Initialise	Look/MapLook.cpp	/^MapLook::Initialise(const MapSettings &settings,$/;"	f	class:MapLook
Initialise	Look/NOAALook.cpp	/^NOAALook::Initialise()$/;"	f	class:NOAALook
Initialise	Look/OverlayLook.cpp	/^OverlayLook::Initialise(const Font &font, const Font &bold_font)$/;"	f	class:OverlayLook
Initialise	Look/TaskLook.cpp	/^TaskLook::Initialise()$/;"	f	class:TaskLook
Initialise	Look/TerminalLook.cpp	/^TerminalLook::Initialise()$/;"	f	class:TerminalLook
Initialise	Look/ThermalAssistantLook.cpp	/^ThermalAssistantLook::Initialise(bool small, bool inverse)$/;"	f	class:ThermalAssistantLook
Initialise	Look/ThermalBandLook.cpp	/^ThermalBandLook::Initialise(bool _inverse, Color sky_color)$/;"	f	class:ThermalBandLook
Initialise	Look/TopographyLook.cpp	/^TopographyLook::Initialise()$/;"	f	class:TopographyLook
Initialise	Look/TraceHistoryLook.cpp	/^TraceHistoryLook::Initialise(bool _inverse)$/;"	f	class:TraceHistoryLook
Initialise	Look/TrafficLook.cpp	/^TrafficLook::Initialise(const Font &_font)$/;"	f	class:TrafficLook
Initialise	Look/TrailLook.cpp	/^TrailLook::Initialise(const TrailSettings &settings)$/;"	f	class:TrailLook
Initialise	Look/VarioBarLook.cpp	/^VarioBarLook::Initialise(const Font &_font)$/;"	f	class:VarioBarLook
Initialise	Look/VarioLook.cpp	/^VarioLook::Initialise(bool _inverse, bool _colors,$/;"	f	class:VarioLook
Initialise	Look/WaveLook.cpp	/^WaveLook::Initialise()$/;"	f	class:WaveLook
Initialise	Look/WaypointLook.cpp	/^WaypointLook::Initialise(const WaypointRendererSettings &settings,$/;"	f	class:WaypointLook
Initialise	Look/WindArrowLook.cpp	/^WindArrowLook::Initialise(const Font &_font, bool inverse)$/;"	f	class:WindArrowLook
Initialise	MainWindow.cpp	/^MainWindow::Initialise()$/;"	f	class:MainWindow
Initialise	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::Initialise()$/;"	f	class:Net::DownloadManager
Initialise	Net/HTTP/Init.cpp	/^Net::Initialise()$/;"	f	class:Net
Initialise	Screen/FreeType/Font.cpp	/^Font::Initialise()$/;"	f	class:Font
Initialise	Screen/FreeType/Init.cpp	/^FreeType::Initialise()$/;"	f	class:FreeType
Initialise	Screen/OpenGL/FBO.cpp	/^FBO::Initialise()$/;"	f	class:FBO
Initialise	Screen/OpenGL/Init.cpp	/^OpenGL::Initialise()$/;"	f	class:OpenGL
Initialise	Screen/OpenGL/Texture.cpp	/^GLTexture::Initialise()$/;"	f	class:GLTexture
Initialise	Util/MD5.cpp	/^MD5::Initialise()$/;"	f	class:MD5
Initialise	Util/MD5.hpp	/^  void Initialise(const State &_state) {$/;"	f	class:MD5
Initialise	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::Initialise(ContainerWindow &parent,$/;"	f	class:ArrowPagerWidget
Initialise	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ButtonPanelWidget
Initialise	Widget/ButtonWidget.cpp	/^ButtonWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ButtonWidget
Initialise	Widget/PagerWidget.cpp	/^PagerWidget::Initialise(ContainerWindow &_parent, const PixelRect &rc)$/;"	f	class:PagerWidget
Initialise	Widget/RowFormWidget.cpp	/^RowFormWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:RowFormWidget
Initialise	Widget/SolidWidget.cpp	/^SolidWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SolidWidget
Initialise	Widget/TabWidget.cpp	/^TabWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TabWidget
Initialise	Widget/TwoWidgets.cpp	/^TwoWidgets::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TwoWidgets
Initialise	Widget/Widget.cpp	/^NullWidget::Initialise(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:NullWidget
InitialiseAsioThread	IO/Async/GlobalAsioThread.cpp	/^InitialiseAsioThread()$/;"	f
InitialiseConfigured	Look/Look.cpp	/^Look::InitialiseConfigured(const UISettings &settings,$/;"	f	class:Look
InitialiseConfigured	MainWindow.cpp	/^MainWindow::InitialiseConfigured()$/;"	f	class:MainWindow
InitialiseDataPath	LocalPath.cpp	/^InitialiseDataPath()$/;"	f
InitialiseLogFonts	Look/DefaultFonts.cpp	/^InitialiseLogFonts(FontSettings &settings)$/;"	f	file:
InitialisePCMMixer	Audio/GlobalPCMMixer.cpp	/^InitialisePCMMixer()$/;"	f
InitialisePCMMixer	Audio/GlobalPCMMixer.hpp	/^InitialisePCMMixer()$/;"	f
InitialisePCMResourcePlayer	Audio/GlobalPCMResourcePlayer.cpp	/^InitialisePCMResourcePlayer()$/;"	f
InitialisePCMResourcePlayer	Audio/GlobalPCMResourcePlayer.hpp	/^InitialisePCMResourcePlayer()$/;"	f
InitialiseTTY	Screen/TTY/TopCanvas.cpp	/^TopCanvas::InitialiseTTY()$/;"	f	class:TopCanvas
InitialiseVolumeController	Audio/GlobalVolumeController.cpp	/^InitialiseVolumeController()$/;"	f
InitialiseVolumeController	Audio/GlobalVolumeController.hpp	/^InitialiseVolumeController()$/;"	f
Initialize	Computer/GlideRatioCalculator.cpp	/^GlideRatioCalculator::Initialize(const ComputerSettings &settings)$/;"	f	class:GlideRatioCalculator
Initialize	Logger/GRecord.cpp	/^GRecord::Initialize()$/;"	f	class:GRecord
Initialize	Look/DefaultFonts.cpp	/^Fonts::Initialize()$/;"	f	class:Fonts
Initialize	Screen/Layout.cpp	/^Layout::Initialize(PixelSize new_size, unsigned ui_scale, unsigned custom_dpi)$/;"	f	class:Layout
InputBits	NMEA/VegaSwitchState.hpp	/^  enum InputBits {$/;"	g	struct:VegaSwitchState
InputConfig	Input/InputConfig.hpp	/^struct InputConfig {$/;"	s
InputEventQueue	Event/Poll/InputQueue.cpp	/^InputEventQueue::InputEventQueue(boost::asio::io_context &io_context,$/;"	f	class:InputEventQueue
InputEvents	Input/InputEvents.cpp	/^namespace InputEvents$/;"	n	file:
InputEvents	Input/InputEvents.hpp	/^namespace InputEvents$/;"	n
InputEvents	Input/InputLookup.hpp	/^namespace InputEvents$/;"	n
InputEvents	Input/InputQueue.hpp	/^namespace InputEvents$/;"	n
InputFile	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  InputFile,$/;"	e	enum:ControlIndex	file:
InputFile	Profile/ProfileKeys.cpp	/^const char InputFile[] = "InputFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
InputFileChanged	UtilsSettings.cpp	/^bool InputFileChanged = false;$/;"	v
InputStream	Java/InputStream.hxx	/^	class InputStream {$/;"	c	namespace:Java
InsMod	Kobo/System.cpp	/^InsMod(const char *path, Args... args)$/;"	f	file:
Insert	Cloud/Client.cpp	/^CloudClientContainer::Insert(CloudClient &client)$/;"	f	class:CloudClientContainer
Insert	Cloud/Thermal.cpp	/^CloudThermalContainer::Insert(CloudThermal &thermal)$/;"	f	class:CloudThermalContainer
Insert	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Insert(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
Insert	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Insert(const OrderedTaskPoint &new_tp, const unsigned position)$/;"	f	class:OrderedTask
Insert	FLARM/FlarmNetDatabase.cpp	/^FlarmNetDatabase::Insert(const FlarmNetRecord &record)$/;"	f	class:FlarmNetDatabase
Insert	Lua/InputEvent.cpp	/^  bool Insert(T code, LuaInputEvent* event) {$/;"	f	class:LuaEventRegistry
InsertInTask	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^InsertInTask(ProtectedTaskManager &task_manager,$/;"	f	file:
InsertInTask	Task/MapTaskManager.cpp	/^InsertInTask(OrderedTask *task, WaypointPtr &&waypoint)$/;"	f	file:
InsertInTask	Task/MapTaskManager.cpp	/^MapTaskManager::InsertInTask(WaypointPtr &&waypoint)$/;"	f	class:MapTaskManager
Inside	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Inside(const AircraftState &state) const$/;"	f	class:AbstractAirspace
Inside	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Inside(const AltitudeState &state) const$/;"	f	class:AbstractAirspace
Inside	Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::Inside(const GeoPoint &loc) const$/;"	f	class:AirspaceCircle
Inside	Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::Inside(const GeoPoint &loc) const$/;"	f	class:AirspacePolygon
InsideOthers	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::InsideOthers(const AGeoPoint &origin) const$/;"	f	class:AirspaceRoute
InsideTriangle	Screen/OpenGL/Triangulate.cpp	/^InsideTriangle(const PT &p, const PT &a, const PT &b, const PT &c)$/;"	f	file:
InstantSpeed	Engine/GlideSolvers/InstantSpeed.cpp	/^GlideResult::InstantSpeed(const AircraftState& aircraft,$/;"	f	class:GlideResult
IntAngleForCos	Math/FastTrig.hpp	/^IntAngleForCos(unsigned angle)$/;"	f
IntAngleToRadians	Math/FastTrig.hpp	/^IntAngleToRadians(unsigned angle)$/;"	f
IntPoint2D	Math/Point2D.hpp	/^struct IntPoint2D : Point2D<int> {$/;"	s
Integrate	Replay/AircraftSim.cpp	/^AircraftSim::Integrate(const Angle heading, const double timestep)$/;"	f	class:AircraftSim
Intercept	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Intercept(const AircraftState &state,$/;"	f	class:AbstractAirspace
Intercept	Engine/Airspace/AirspaceIntersectionVisitor.cpp	/^AirspaceIntersectionVisitor::Intercept(const AbstractAirspace &as,$/;"	f	class:AirspaceIntersectionVisitor
Intercept	Engine/Task/Ordered/AATIsolineIntercept.cpp	/^AATIsolineIntercept::Intercept(const AATPoint &ap, const AircraftState &state,$/;"	f	class:AATIsolineIntercept
InterceptHorizontal	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::InterceptHorizontal(const AircraftState &state,$/;"	f	class:AbstractAirspace
InterceptVertical	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::InterceptVertical(const AircraftState &state,$/;"	f	class:AbstractAirspace
InterfaceBlackboard	Blackboard/InterfaceBlackboard.hpp	/^class InterfaceBlackboard : public LiveBlackboard$/;"	c
InterfaceConfigPanel	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  InterfaceConfigPanel()$/;"	f	class:final
IntermediatePoint	Geo/GeoPoint.cpp	/^GeoPoint::IntermediatePoint(const GeoPoint &destination, $/;"	f	class:GeoPoint
IntermediatePoint	Geo/Math.cpp	/^IntermediatePoint(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f
IntermediatePoint	Geo/Math.cpp	/^IntermediatePoint(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f	file:
IntermediateTaskPoint	Engine/Task/Ordered/Points/IntermediatePoint.cpp	/^IntermediateTaskPoint::IntermediateTaskPoint(TaskPointType _type,$/;"	f	class:IntermediateTaskPoint
IntermediateTaskPoint	Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^class IntermediateTaskPoint: $/;"	c
Internal	Screen/OpenGL/Color.hpp	/^  struct Internal {};$/;"	s	class:Color
InternalCreate	IO/Async/SignalListener.cpp	/^SignalListener::InternalCreate(const sigset_t &mask)$/;"	f	class:SignalListener
InternalCreate	IO/Async/SignalListener.hpp	/^  bool InternalCreate(sigset_t &mask, unsigned signo,$/;"	f	class:SignalListener
InternalSensors	Android/InternalSensors.cpp	/^InternalSensors::InternalSensors(JNIEnv *env, jobject gps_obj,$/;"	f	class:InternalSensors
InternalSensors	Android/InternalSensors.hpp	/^class InternalSensors {$/;"	c
InternalSensors	Apple/InternalSensors.cpp	/^InternalSensors::InternalSensors(unsigned int _index)$/;"	f	class:InternalSensors
InternalSensors	Apple/InternalSensors.hpp	/^class InternalSensors {$/;"	c
Interpolate	Geo/GeoPoint.cpp	/^GeoPoint::Interpolate(const GeoPoint &end, const double t) const$/;"	f	class:GeoPoint
Interpolate	Math/Line2D.hpp	/^  constexpr Point Interpolate(double ratio) const {$/;"	f	struct:Line2D
Interpolate	Replay/CatmullRomInterpolator.hpp	/^  Interpolate(double _time) const$/;"	f	class:CatmullRomInterpolator
Interpolate	Screen/Ramp.cpp	/^Interpolate(RGB8Color c1, RGB8Color c2,$/;"	f	file:
Interpolate	Screen/Ramp.cpp	/^Interpolate(int h, const ColorRamp *c1, const ColorRamp *c2,$/;"	f	file:
InterpolateClip	Computer/WaveComputer.cpp	/^InterpolateClip(const FlatLine line, double ratio)$/;"	f	file:
InterpolateLocationMinMax	Engine/Task/Points/SampledTaskPoint.hpp	/^  GeoPoint InterpolateLocationMinMax(double p) const {$/;"	f	class:SampledTaskPoint
Intersect	Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::Intersect(const FlatLine &line, FlatPoint &i1, FlatPoint &i2) const$/;"	f	class:FlatEllipse
IntersectCircle	Geo/Flat/FlatLine.cpp	/^FlatLine::IntersectCircle(const double r, const FlatPoint c,$/;"	f	class:FlatLine
IntersectExtended	Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::IntersectExtended(const FlatPoint &pe, FlatPoint &i1,$/;"	f	class:FlatEllipse
IntersectExtended	Geo/GeoEllipse.cpp	/^GeoEllipse::IntersectExtended(const GeoPoint &p, GeoPoint &i1,$/;"	f	class:GeoEllipse
IntersectOriginCircle	Geo/Flat/FlatLine.cpp	/^FlatLine::IntersectOriginCircle(const double r,$/;"	f	class:FlatLine
IntersectWith	Geo/GeoBounds.cpp	/^GeoBounds::IntersectWith(const GeoBounds &other)$/;"	f	class:GeoBounds
IntersectWith	Math/ARange.cpp	/^AngleRange:: IntersectWith(const AngleRange &other) {$/;"	f	class:AngleRange
Intersection	Engine/Airspace/AirspaceIntersectSort.hpp	/^  typedef std::pair<double, GeoPoint> Intersection;$/;"	t	class:AirspaceIntersectSort
Intersection	Engine/Airspace/AirspaceWarningManager.cpp	/^  void Intersection(const AbstractAirspace& airspace) {$/;"	f	class:final
Intersection	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::Intersection(const AGeoPoint& origin,$/;"	f	class:RoutePlanner
Intersection	Engine/Route/RoutePolars.cpp	/^RoutePolars::Intersection(const AGeoPoint &origin,$/;"	f	class:RoutePolars
Intersection	Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::Intersection(const AGeoPoint &origin,$/;"	f	class:ProtectedRoutePlanner
Intersection	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::Intersection(const AGeoPoint &origin,$/;"	f	class:RoutePlannerGlue
Intersection	Terrain/Intersection.cpp	/^RasterTileCache::Intersection(const SignedRasterLocation origin,$/;"	f	class:RasterTileCache
Intersection	Terrain/RasterMap.cpp	/^RasterMap::Intersection(const GeoPoint& origin,$/;"	f	class:RasterMap
Intersects	Engine/Airspace/Airspace.cpp	/^Airspace::Intersects(const GeoPoint &g1, const GeoPoint &end,$/;"	f	class:Airspace
Intersects	Engine/Airspace/AirspaceCircle.cpp	/^AirspaceCircle::Intersects(const GeoPoint &start, const GeoPoint &end,$/;"	f	class:AirspaceCircle
Intersects	Engine/Airspace/AirspacePolygon.cpp	/^AirspacePolygon::Intersects(const GeoPoint &start, const GeoPoint &end,$/;"	f	class:AirspacePolygon
Intersects	Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::Intersects(const FlatRay& ray) const$/;"	f	class:FlatBoundingBox
Intersects	Geo/Flat/FlatRay.cpp	/^FlatRay::Intersects(const FlatRay &that) const$/;"	f	class:FlatRay
Intersects	Task/ProtectedTaskManager.cpp	/^ReachIntersectionTest::Intersects(const AGeoPoint& destination)$/;"	f	class:ReachIntersectionTest
IntersectsDistinct	Geo/Flat/FlatRay.cpp	/^FlatRay::IntersectsDistinct(const FlatRay& that) const$/;"	f	class:FlatRay
IntersectsRatio	Geo/Flat/FlatRay.cpp	/^FlatRay::IntersectsRatio(const FlatRay &that) const$/;"	f	class:FlatRay
IntersectsWith	Geo/SearchPointVector.cpp	/^SearchPointVector::IntersectsWith(const FlatRay &ray) const$/;"	f	class:SearchPointVector
Interval_Check	Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double Interval_Check;$/;"	m	class:ConditionMonitor
Interval_Notification	Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double Interval_Notification;$/;"	m	class:ConditionMonitor
Invalid	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  static AirspaceInterceptSolution Invalid() {$/;"	f	struct:AirspaceInterceptSolution
Invalid	Engine/Contest/Solvers/TraceManager.cpp	/^   predicted(TracePoint::Invalid())$/;"	f
Invalid	Engine/GlideSolvers/GlidePolar.hpp	/^  static GlidePolar Invalid() {$/;"	f	class:GlidePolar
Invalid	Engine/GlideSolvers/PolarCoefficients.hpp	/^  static PolarCoefficients Invalid() {$/;"	f	struct:PolarCoefficients
Invalid	Engine/Trace/Point.hpp	/^  static TracePoint Invalid() {$/;"	f	class:TracePoint
Invalid	Geo/GeoBounds.hpp	/^  static GeoBounds Invalid() {$/;"	f	class:GeoBounds
Invalid	Geo/GeoPoint.hpp	/^  static GeoPoint Invalid() {$/;"	f	struct:GeoPoint
Invalid	Geo/GeoVector.hpp	/^  static GeoVector Invalid() {$/;"	f	struct:GeoVector
Invalid	Geo/SearchPoint.hpp	/^  static SearchPoint Invalid() {$/;"	f	class:SearchPoint
Invalid	Renderer/WaypointIconRenderer.hpp	/^    Invalid,$/;"	e	enum:WaypointIconRenderer::Reachability
Invalid	Renderer/WaypointRenderer.hpp	/^    Invalid,$/;"	e	enum:WaypointRenderer::Reachability
Invalid	Terrain/Height.hpp	/^  static constexpr TerrainHeight Invalid() {$/;"	f	class:TerrainHeight
Invalid	Time/BrokenDate.hpp	/^  static BrokenDate Invalid() {$/;"	f	struct:BrokenDate
Invalid	Time/BrokenDateTime.hpp	/^  static BrokenDateTime Invalid() {$/;"	f	struct:BrokenDateTime
Invalid	Time/BrokenTime.hpp	/^  static BrokenTime Invalid() {$/;"	f	struct:BrokenTime
Invalid	Time/RoughTime.hpp	/^  static constexpr RoughTime Invalid() {$/;"	f	class:RoughTime
Invalid	Time/RoughTime.hpp	/^  static constexpr RoughTimeSpan Invalid() {$/;"	f	class:RoughTimeSpan
Invalidate	Renderer/TransparentRendererCache.hpp	/^  void Invalidate() {$/;"	f	class:TransparentRendererCache
Invalidate	Terrain/RasterRenderer.hpp	/^  void Invalidate() {$/;"	f	class:RasterRenderer
Invalidate	Widget/ButtonWidget.cpp	/^ButtonWidget::Invalidate()$/;"	f	class:ButtonWidget
InvalidateBuffer	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  void InvalidateBuffer() {$/;"	f	class:TaskMapButtonRenderer
InvalidateButton	Form/TabMenuDisplay.hpp	/^  void InvalidateButton(MenuTabIndex i) {$/;"	f	class:final
InvalidateLayout	Form/TabDisplay.hpp	/^  void InvalidateLayout() {$/;"	f	class:TabButton
InvalidateLayout	Renderer/TabRenderer.hpp	/^  void InvalidateLayout() {$/;"	f	class:TabRenderer
InvalidateLayout	Renderer/TextRenderer.hpp	/^  void InvalidateLayout() {}$/;"	f	class:TextRenderer
InvalidateTaskView	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::InvalidateTaskView()$/;"	f	class:TaskManagerDialog
Invert	Screen/PortableColor.hpp	/^  constexpr RGB8Color Invert() const {$/;"	f	class:RGB8Color
InvertRectangle	Screen/GDI/Canvas.hpp	/^  void InvertRectangle(const PixelRect &rc) {$/;"	f	class:Canvas
InvertRectangle	Screen/GDI/Canvas.hpp	/^  void InvertRectangle(const RECT r) {$/;"	f	class:Canvas
InvertRectangle	Screen/Memory/Canvas.cpp	/^Canvas::InvertRectangle(PixelRect r)$/;"	f	class:Canvas
InvertRectangle	Screen/OpenGL/Canvas.cpp	/^Canvas::InvertRectangle(PixelRect r)$/;"	f	class:Canvas
Invoke	Event/Poll/Timer.cpp	/^Timer::Invoke(const boost::system::error_code &ec)$/;"	f	class:Timer
Invoke	Event/Shared/Timer.cpp	/^Timer::Invoke()$/;"	f	class:Timer
InvokeTimer	Event/SDL/Queue.cpp	/^InvokeTimer(void *ctx)$/;"	f	file:
IsAATStateReady	Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::IsAATStateReady(const bool has_entered,$/;"	f	class:TaskAdvance
IsAbove	Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::IsAbove(const AltitudeState &state, const double margin) const$/;"	f	class:AirspaceAltitude
IsAboveSlider	Form/ScrollBar.hpp	/^  bool IsAboveSlider(int y) const {$/;"	f	class:ScrollBar
IsAbsolute	OS/Path.cpp	/^Path::IsAbsolute() const$/;"	f	class:Path
IsAbsolute	OS/Path.hpp	/^  bool IsAbsolute() const {$/;"	f	class:AllocatedPath
IsAchievable	Engine/GlideSolvers/GlideResult.hpp	/^  bool IsAchievable() const {$/;"	f	struct:GlideResult
IsAchievable	Engine/Route/RoutePolars.cpp	/^RoutePolars::IsAchievable(const RouteLink& link, const bool check_ceiling) const$/;"	f	class:RoutePolars
IsAchievable	Engine/Task/Stats/ElementStat.hpp	/^  bool IsAchievable() const {$/;"	f	struct:ElementStat
IsAckExpired	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::IsAckExpired() const$/;"	f	class:AirspaceWarning
IsAcked	Airspace/AirspaceWarningCopy.hpp	/^  bool IsAcked(const AbstractAirspace &as) const {$/;"	f	class:AirspaceWarningCopy
IsActive	Engine/Airspace/AbstractAirspace.hpp	/^  bool IsActive() const {$/;"	f	class:AbstractAirspace
IsActive	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::IsActive(const AbstractAirspace &airspace) const$/;"	f	class:AirspaceWarningManager
IsActive	Event/PeriodicTimer.hpp	/^  bool IsActive() const {$/;"	f	class:final
IsActive	Logger/LoggerImpl.hpp	/^  bool IsActive() const {$/;"	f	class:LoggerImpl
IsActive	Replay/Replay.hpp	/^  bool IsActive() const {$/;"	f	class:final
IsAirport	Engine/Waypoint/Waypoint.hpp	/^  IsAirport() const$/;"	f	struct:Waypoint
IsAirspaceAltitudeVisible	Airspace/AirspaceVisibility.cpp	/^IsAirspaceAltitudeVisible(const AbstractAirspace &airspace,$/;"	f
IsAirspaceEnabled	Engine/Route/Config.hpp	/^  bool IsAirspaceEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsAirspaceEnabled	Engine/Route/RoutePolars.hpp	/^  bool IsAirspaceEnabled() const {$/;"	f	class:RoutePolars
IsAirspaceTypeVisible	Airspace/AirspaceVisibility.cpp	/^IsAirspaceTypeVisible(const AbstractAirspace &airspace,$/;"	f
IsAlive	Device/Descriptor.cpp	/^DeviceDescriptor::IsAlive() const$/;"	f	class:DeviceDescriptor
IsAllowedIGCChar	Device/Driver/Volkslogger/vlapihlp.cpp	/^IsAllowedIGCChar(char ch)$/;"	f	file:
IsAncientHardware	Asset.hpp	/^IsAncientHardware()$/;"	f
IsAndroid	Asset.hpp	/^IsAndroid()$/;"	f
IsAndroidInternalGPS	Device/Config.hpp	/^  bool IsAndroidInternalGPS() const {$/;"	f	struct:DeviceConfig
IsAngleInSector	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::IsAngleInSector(const Angle b) const$/;"	f	class:SectorZone
IsApple	Asset.hpp	/^IsApple()$/;"	f
IsArmed	Engine/Task/Ordered/TaskAdvance.hpp	/^  bool IsArmed() const {$/;"	f	class:TaskAdvance
IsAt	Screen/Custom/WList.cpp	/^IsAt(Window &w, PixelPoint p)$/;"	f	file:
IsAutoMCCruiseEnabled	Engine/Task/TaskBehaviour.hpp	/^  bool IsAutoMCCruiseEnabled() const {$/;"	f	struct:TaskBehaviour
IsAutoMCFinalGlideEnabled	Engine/Task/TaskBehaviour.hpp	/^  bool IsAutoMCFinalGlideEnabled() const {$/;"	f	struct:TaskBehaviour
IsAutoWindEnabled	Computer/Wind/Settings.hpp	/^  bool IsAutoWindEnabled() const {$/;"	f	struct:WindSettings
IsAvailable	Android/DownloadManager.cpp	/^AndroidDownloadManager::IsAvailable()$/;"	f	class:AndroidDownloadManager
IsAvailable	Device/Config.cpp	/^DeviceConfig::IsAvailable() const$/;"	f	class:DeviceConfig
IsAvailable	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::IsAvailable()$/;"	f	class:Net::DownloadManager
IsAvailable	Widget/RowFormWidget.hpp	/^    bool IsAvailable(bool expert_mode) const {$/;"	f	struct:RowFormWidget::Row
IsBadSignal	Logger/LoggerFRecord.hpp	/^  static bool IsBadSignal(const GPSState &gps) {$/;"	f	class:LoggerFRecord
IsBallastable	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::IsBallastable() const$/;"	f	class:GlidePolar
IsBankAngleUseable	NMEA/Attitude.hpp	/^  bool IsBankAngleUseable() const {$/;"	f	struct:AttitudeState
IsBase	OS/Path.cpp	/^Path::IsBase() const$/;"	f	class:Path
IsBase	OS/Path.hpp	/^  bool IsBase() const {$/;"	f	class:AllocatedPath
IsBaseTerrain	Engine/Airspace/AbstractAirspace.hpp	/^  bool IsBaseTerrain() const {$/;"	f	class:AbstractAirspace
IsBelow	Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::IsBelow(const AltitudeState &state, const double margin) const$/;"	f	class:AirspaceAltitude
IsBelowSlider	Form/ScrollBar.hpp	/^  bool IsBelowSlider(int y) const {$/;"	f	class:ScrollBar
IsBigEndian	Audio/PCMSynthesiser.hpp	/^  bool IsBigEndian() const {$/;"	f	class:PCMSynthesiser
IsBigEndian	OS/ByteOrder.hpp	/^IsBigEndian()$/;"	f
IsBlack	Screen/Memory/PixelTraits.hpp	/^  static constexpr bool IsBlack(color_type c) {$/;"	f	struct:BGRAPixelTraits
IsBlack	Screen/Memory/PixelTraits.hpp	/^  static constexpr bool IsBlack(color_type c) {$/;"	f	struct:GreyscalePixelTraits
IsBold	Look/FontDescription.hpp	/^  constexpr bool IsBold() const {$/;"	f	class:FontDescription
IsBorrowed	Device/Descriptor.hpp	/^  bool IsBorrowed() const {$/;"	f	class:final
IsBoundaryScored	Engine/Task/Points/SampledTaskPoint.hpp	/^  bool IsBoundaryScored() const {$/;"	f	class:SampledTaskPoint
IsBufferValid	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  bool IsBufferValid(PixelSize new_size) const {$/;"	f	class:TaskMapButtonRenderer
IsBusy	Job/Async.hpp	/^  bool IsBusy() const {$/;"	f	class:final
IsBusy	Thread/StandbyThread.hpp	/^  bool IsBusy() const {$/;"	f	class:StandbyThread
IsButtonEnabled	Menu/MenuBar.hpp	/^  bool IsButtonEnabled(unsigned i) const {$/;"	f	class:MenuBar
IsCancelled	Operation/NoCancelOperationEnvironment.cpp	/^NoCancelOperationEnvironment::IsCancelled() const$/;"	f	class:NoCancelOperationEnvironment
IsCancelled	Operation/Operation.cpp	/^NullOperationEnvironment::IsCancelled() const$/;"	f	class:NullOperationEnvironment
IsCancelled	Operation/ProxyOperationEnvironment.cpp	/^ProxyOperationEnvironment::IsCancelled() const$/;"	f	class:ProxyOperationEnvironment
IsCancelled	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::IsCancelled() const$/;"	f	class:ThreadedOperationEnvironment
IsCharDev	Device/Port/TTYPort.cpp	/^IsCharDev(const char *path)$/;"	f	file:
IsClassEnabled	Engine/Airspace/AirspaceWarningConfig.hpp	/^  bool IsClassEnabled(AirspaceClass cls) const {$/;"	f	struct:AirspaceWarningConfig
IsCloseTo	Engine/Waypoint/Waypoint.cpp	/^Waypoint::IsCloseTo(const GeoPoint &_location, const double range) const$/;"	f	class:Waypoint
IsCloseToTarget	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::IsCloseToTarget(const AircraftState& state, const double threshold) const$/;"	f	class:AATPoint
IsClosed	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsClosed() const$/;"	f	class:AbstractTaskFactory
IsCondor	Device/Descriptor.hpp	/^  bool IsCondor() const {$/;"	f	class:final
IsConfigured	Device/Descriptor.hpp	/^  bool IsConfigured() const {$/;"	f	class:final
IsConnected	Kobo/WPASupplicant.hpp	/^  bool IsConnected() const {$/;"	f	class:WPASupplicant
IsConnected	Tracking/SkyLines/Client.hpp	/^  bool IsConnected() const {$/;"	f	class:SkyLinesTracking::Client
IsConnected	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::IsConnected() const$/;"	f	class:SkyLinesTracking::Glue
IsCovered	Screen/Custom/WList.cpp	/^WindowList::IsCovered(const Window &w) const$/;"	f	class:WindowList
IsCtrlKeyPressed	MapWindow/GlueMapWindowEvents.cpp	/^IsCtrlKeyPressed()$/;"	f	file:
IsCurrent	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsCurrent() const {$/;"	f	class:OrderedTaskPoint
IsCursorKey	Android/EventBridge.cpp	/^IsCursorKey(unsigned key_code)$/;"	f	file:
IsDataField	Widget/RowFormWidget.hpp	/^  bool IsDataField(unsigned i, const DataField &df) const {$/;"	f	class:RowFormWidget
IsDataPending	Device/Port/SerialPort.hpp	/^  bool IsDataPending() const {$/;"	f	class:SerialPort
IsDatePlausible	Time/BrokenDateTime.hpp	/^  bool IsDatePlausible() const {$/;"	f	struct:BrokenDateTime
IsDebug	Asset.hpp	/^IsDebug()$/;"	f
IsDeclaration	XML/Node.hpp	/^  bool IsDeclaration() const {$/;"	f	class:XMLNode
IsDefault	Input/InputEvents.cpp	/^InputEvents::IsDefault()$/;"	f	class:InputEvents
IsDefined	Airspace/NearestAirspace.hpp	/^  bool IsDefined() const {$/;"	f	class:NearestAirspace
IsDefined	Computer/ClimbAverageCalculator.hpp	/^    bool IsDefined() const {$/;"	f	struct:ClimbAverageCalculator::HistoryItem
IsDefined	Computer/StateClock.hpp	/^  bool IsDefined() const {$/;"	f	class:StateClock
IsDefined	Computer/WaveResult.hpp	/^  bool IsDefined() const {$/;"	f	struct:WaveInfo
IsDefined	Device/Driver/CAI302/Protocol.hpp	/^      bool IsDefined() const {$/;"	f	struct:CAI302::FileList::FileInfo
IsDefined	Device/Driver/CAI302/Protocol.hpp	/^    bool IsDefined() const {$/;"	f	struct:CAI302::DateTime
IsDefined	Dialogs/Waypoint/WaypointList.cpp	/^  bool IsDefined() const {$/;"	f	struct:WaypointListDialogState
IsDefined	Engine/Airspace/SoonestAirspace.cpp	/^  bool IsDefined() const {$/;"	f	struct:SoonestAirspace
IsDefined	Engine/Contest/ContestResult.hpp	/^  constexpr bool IsDefined() const {$/;"	f	struct:ContestResult
IsDefined	Engine/GlideSolvers/GlideResult.hpp	/^  bool IsDefined() const {$/;"	f	struct:GlideResult
IsDefined	Engine/Task/Stats/DistanceStat.hpp	/^  bool IsDefined() const {$/;"	f	class:DistanceStat
IsDefined	Engine/Trace/Point.hpp	/^  bool IsDefined() const {$/;"	f	class:TracePoint
IsDefined	FLARM/FlarmId.hpp	/^  bool IsDefined() const {$/;"	f	class:FlarmId
IsDefined	FLARM/Traffic.hpp	/^  bool IsDefined() const {$/;"	f	class:FlarmTraffic::AircraftType
IsDefined	Form/ScrollBar.hpp	/^  bool IsDefined() const {$/;"	f	class:ScrollBar
IsDefined	Geo/Quadrilateral.hpp	/^  constexpr bool IsDefined() const {$/;"	f	struct:GeoQuadrilateral
IsDefined	GliderLink/Traffic.hpp	/^  bool IsDefined() const {$/;"	f	struct:GliderLinkTraffic
IsDefined	IGC/IGCFix.hpp	/^  bool IsDefined() const {$/;"	f	struct:IGCFix
IsDefined	Menu/MenuData.hpp	/^  bool IsDefined() const {$/;"	f	class:MenuItem
IsDefined	NMEA/ClimbInfo.hpp	/^  bool IsDefined() const {$/;"	f	struct:OneClimbInfo
IsDefined	NMEA/VegaSwitchState.hpp	/^  constexpr bool IsDefined() const {$/;"	f	struct:VegaSwitchState
IsDefined	Net/HTTP/Multi.hpp	/^    bool IsDefined() const {$/;"	f	class:Net::CurlMulti
IsDefined	OS/ConvertPathName.hpp	/^  bool IsDefined() const {$/;"	f	class:NarrowPathName
IsDefined	OS/ConvertPathName.hpp	/^  bool IsDefined() const {$/;"	f	class:PathName
IsDefined	OS/DynamicLibrary.hpp	/^  bool IsDefined() const {$/;"	f	class:DynamicLibrary
IsDefined	OS/EventPipe.hpp	/^  bool IsDefined() const {$/;"	f	class:EventPipe
IsDefined	PageSettings.hpp	/^  bool IsDefined() const {$/;"	f	struct:PageLayout
IsDefined	Projection/CompareProjection.hpp	/^  bool IsDefined() const {$/;"	f	class:CompareProjection
IsDefined	RadioFrequency.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:RadioFrequency
IsDefined	ResourceId.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:ResourceId
IsDefined	Screen/Bitmap.hpp	/^  bool IsDefined() const {$/;"	f	class:final
IsDefined	Screen/Brush.hpp	/^  IsDefined() const$/;"	f	class:Brush
IsDefined	Screen/Custom/TopCanvas.hpp	/^  bool IsDefined() const {$/;"	f	class:DisplayOrientation
IsDefined	Screen/Custom/UncompressedImage.hpp	/^  bool IsDefined() const {$/;"	f	class:UncompressedImage
IsDefined	Screen/Font.hpp	/^  IsDefined() const {$/;"	f	class:Font
IsDefined	Screen/GDI/Canvas.hpp	/^  bool IsDefined() const {$/;"	f	class:Canvas
IsDefined	Screen/Icon.hpp	/^  bool IsDefined() const {$/;"	f	class:MaskedIcon
IsDefined	Screen/Memory/Canvas.hpp	/^  bool IsDefined() const {$/;"	f	class:Canvas
IsDefined	Screen/OpenGL/BufferCanvas.hpp	/^  bool IsDefined() const {$/;"	f	class:DisplayOrientation
IsDefined	Screen/OpenGL/Canvas.hpp	/^  bool IsDefined() const {$/;"	f	class:Canvas
IsDefined	Screen/Pen.hpp	/^  IsDefined() const$/;"	f	class:Pen
IsDefined	TeamCode/TeamCode.hpp	/^  bool IsDefined() const {$/;"	f	class:TeamCode
IsDefined	Terrain/RasterBuffer.hpp	/^  bool IsDefined() const {$/;"	f	class:RasterBuffer
IsDefined	Terrain/RasterMap.hpp	/^  bool IsDefined() const {$/;"	f	class:RasterMap
IsDefined	Terrain/RasterTile.hpp	/^  bool IsDefined() const {$/;"	f	class:RasterTile
IsDefined	Time/DeltaTime.hpp	/^  bool IsDefined() const {$/;"	f	class:DeltaTime
IsDefined	Time/PeriodClock.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:PeriodClock
IsDefined	Time/RoughTime.hpp	/^  constexpr bool IsDefined() const {$/;"	f	class:RoughTimeSpan
IsDefined	Tracking/SkyLines/Client.hpp	/^  bool IsDefined() const {$/;"	f	class:SkyLinesTracking::Client
IsDefined	Util/AllocatedGrid.hxx	/^	constexpr bool IsDefined() const {$/;"	f	class:AllocatedGrid
IsDefined	Weather/PCMet/Overlays.hpp	/^  bool IsDefined() const {$/;"	f	struct:PCMet::Overlay
IsDefined	Weather/PCMet/Settings.hpp	/^    bool IsDefined() const {$/;"	f	struct:PCMetSettings::Credentials
IsDefined	Widget/ManagedWidget.hpp	/^  bool IsDefined() const {$/;"	f	class:ManagedWidget
IsDefined	Widget/WindowWidget.hpp	/^  bool IsDefined() const {$/;"	f	class:WindowWidget
IsDeltaConsiderable	Engine/Route/ReachResult.hpp	/^  bool IsDeltaConsiderable() const {$/;"	f	struct:ReachResult
IsDetected	FLARM/Data.hpp	/^  bool IsDetected() const {$/;"	f	struct:FlarmData
IsDirSeparator	Compatibility/path.h	/^IsDirSeparator(TCHAR ch)$/;"	f
IsDirectionDefined	Engine/Waypoint/Runway.hpp	/^  bool IsDirectionDefined() const {$/;"	f	class:Runway
IsDirty	Terrain/RasterMap.hpp	/^  bool IsDirty() const {$/;"	f	class:RasterMap
IsDirty	Terrain/RasterTileCache.hpp	/^  bool IsDirty() const {$/;"	f	class:RasterTileCache
IsDisabled	Device/Config.hpp	/^  bool IsDisabled() const {$/;"	f	struct:DeviceConfig
IsDisabled	Terrain/RasterTile.hpp	/^  bool IsDisabled() const {$/;"	f	class:RasterTile
IsDithered	Asset.hpp	/^IsDithered()$/;"	f
IsDots	OS/FileUtil.cpp	/^IsDots(const TCHAR* str)$/;"	f	file:
IsDownloading	Dialogs/FileManager.cpp	/^  bool IsDownloading(const AvailableFile &file) const {$/;"	f	class:ManagedFileListWidget
IsDownloading	Dialogs/FileManager.cpp	/^  bool IsDownloading(const AvailableFile &file,$/;"	f	class:ManagedFileListWidget
IsDownloading	Dialogs/FileManager.cpp	/^  bool IsDownloading(const char *name) const {$/;"	f	class:ManagedFileListWidget
IsDownloading	Dialogs/FileManager.cpp	/^  bool IsDownloading(const char *name, DownloadStatus &status_r) const {$/;"	f	class:ManagedFileListWidget
IsDragging	Form/ScrollBar.hpp	/^  bool IsDragging() const {$/;"	f	class:ScrollBar
IsDrive	OS/Path.cpp	/^IsDrive(Path::const_pointer p)$/;"	f	file:
IsDriver	Device/Config.hpp	/^  bool IsDriver(const TCHAR *name) const {$/;"	f	struct:DeviceConfig
IsDriver	Device/Descriptor.cpp	/^DeviceDescriptor::IsDriver(const TCHAR *name) const$/;"	f	class:DeviceDescriptor
IsDummy	Engine/Route/FlatTriangleFanTree.hpp	/^  bool IsDummy() const {$/;"	f	class:FlatTriangleFanTree
IsDumpEnabled	Device/Descriptor.cpp	/^DeviceDescriptor::IsDumpEnabled() const$/;"	f	class:DeviceDescriptor
IsDynamic	Menu/MenuData.hpp	/^  bool IsDynamic() const {$/;"	f	class:MenuItem
IsEarlierThan	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  bool IsEarlierThan(const AirspaceInterceptSolution &other) const {$/;"	f	struct:AirspaceInterceptSolution
IsEdge	Engine/Trace/Trace.hpp	/^    bool IsEdge() const {$/;"	f	struct:Trace::TraceDelta
IsEditable	Form/DigitEntry.hpp	/^    constexpr bool IsEditable() const {$/;"	f	struct:CoordinateFormat::Column
IsElastic	Widget/RowFormWidget.hpp	/^    bool IsElastic(const DialogLook &look, bool vertical) const {$/;"	f	struct:RowFormWidget::Row
IsEmbedded	Asset.hpp	/^IsEmbedded()$/;"	f
IsEmpty	Airspace/ProtectedAirspaceWarningManager.cpp	/^ProtectedAirspaceWarningManager::IsEmpty() const$/;"	f	class:ProtectedAirspaceWarningManager
IsEmpty	Engine/Airspace/Airspaces.cpp	/^Airspaces::IsEmpty() const$/;"	f	class:Airspaces
IsEmpty	Engine/Route/AStar.hpp	/^  bool IsEmpty() const {$/;"	f	class:AStar
IsEmpty	Engine/Route/FlatTriangleFan.hpp	/^  bool IsEmpty() const {$/;"	f	class:FlatTriangleFan
IsEmpty	Engine/Route/ReachFan.hpp	/^  bool IsEmpty() const {$/;"	f	class:ReachFan
IsEmpty	Engine/Waypoint/Waypoints.hpp	/^  bool IsEmpty() const {$/;"	f	class:Waypoints
IsEmpty	FLARM/FlarmNetDatabase.hpp	/^  bool IsEmpty() const {$/;"	f	class:FlarmNetDatabase
IsEmpty	FLARM/List.hpp	/^  bool IsEmpty() const {$/;"	f	struct:TrafficList
IsEmpty	Geo/GeoBounds.hpp	/^  constexpr bool IsEmpty() const {$/;"	f	class:GeoBounds
IsEmpty	GliderLink/List.hpp	/^  bool IsEmpty() const {$/;"	f	struct:GliderLinkTrafficList
IsEmpty	IO/CSVLine.hpp	/^  bool IsEmpty() const {$/;"	f	class:CSVLine
IsEmpty	InfoBoxes/InfoBoxSettings.cpp	/^InfoBoxSettings::Panel::IsEmpty() const$/;"	f	class:InfoBoxSettings::Panel
IsEmpty	Math/ARange.hpp	/^  constexpr bool IsEmpty() const {$/;"	f	struct:AngleRange
IsEmpty	Math/DifferentialWindowFilter.hpp	/^  bool IsEmpty() const {$/;"	f	class:DifferentialWindowFilter
IsEmpty	Math/XYDataStore.hpp	/^  bool IsEmpty() const {$/;"	f	class:XYDataStore
IsEmpty	OS/Args.hpp	/^  bool IsEmpty() const {$/;"	f	class:Args
IsEmpty	OS/Path.hpp	/^  bool IsEmpty() const {$/;"	f	class:AllocatedPath
IsEmpty	OS/Path.hpp	/^  bool IsEmpty() const {$/;"	f	class:Path
IsEmpty	Replay/TaskAccessor.hpp	/^  virtual bool IsEmpty() const {$/;"	f	class:TaskAccessor
IsEmpty	Repository/AvailableFile.hpp	/^  bool IsEmpty() const {$/;"	f	struct:AvailableFile
IsEmpty	Topography/TopographyFile.hpp	/^  bool IsEmpty() const {$/;"	f	class:TopographyFile
IsEmpty	Tracking/SkyLines/Queue.hpp	/^  bool IsEmpty() const {$/;"	f	class:SkyLinesTracking::Queue
IsEmpty	Util/Cache.hxx	/^	bool IsEmpty() const {$/;"	f	class:Cache
IsEmpty	Util/EnumBitSet.hpp	/^  constexpr bool IsEmpty() const {$/;"	f	class:EnumBitSet
IsEmpty	Util/StringParser.hxx	/^	bool IsEmpty() const {$/;"	f	class:StringParser
IsEnabled	Device/Port/DumpPort.hpp	/^  bool IsEnabled() const {$/;"	f	class:final
IsEnabled	Menu/ButtonLabel.cpp	/^ButtonLabel::IsEnabled(unsigned i)$/;"	f	class:ButtonLabel
IsEnabled	Terrain/RasterTile.hpp	/^  bool IsEnabled() const {$/;"	f	class:RasterTile
IsEnabled	Tracking/SkyLines/Client.hpp	/^  bool IsEnabled() const {$/;"	f	class:SkyLinesTracking::Client
IsEqual	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::IsEqual(const PolarCoefficients &p1, const PolarCoefficients &p2)$/;"	f	class:OpenVarioDevice
IsError	FLARM/Error.hpp	/^  bool IsError() const {$/;"	f
IsExtensionSupported	Screen/OpenGL/Extension.cpp	/^OpenGL::IsExtensionSupported(const char *extension)$/;"	f	class:OpenGL
IsFAIAngle	Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::IsFAIAngle(const GeoPoint &p0, const GeoPoint &p1,$/;"	f	class:FAITrianglePointValidator
IsFAITriangleApplicable	Gauge/TaskView.cpp	/^IsFAITriangleApplicable(TaskFactoryType factory)$/;"	f	file:
IsFAITriangleApplicable	Gauge/TaskView.cpp	/^IsFAITriangleApplicable(const OrderedTask &task)$/;"	f	file:
IsFAITrianglePoint	Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::IsFAITrianglePoint(const Waypoint& wp,$/;"	f	class:FAITrianglePointValidator
IsFLARM	Blackboard/DeviceBlackboard.hpp	/^  bool IsFLARM(unsigned i) const {$/;"	f	class:DeviceBlackboard
IsFai	Engine/Task/Factory/TaskFactoryType.hpp	/^IsFai(TaskFactoryType ftype)$/;"	f
IsFarFromTarget	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::IsFarFromTarget(const TaskAccessor& task,$/;"	f	class:TaskAutoPilot
IsFinalGlide	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::IsFinalGlide() const$/;"	f	class:GlideResult
IsFinished	Computer/AutoQNH.hpp	/^  bool IsFinished() const {$/;"	f	class:AutoQNH
IsFinished	Replay/TaskAccessor.hpp	/^  bool IsFinished() const {$/;"	f	class:TaskAccessor
IsFinishpoint	Engine/Waypoint/Waypoint.hpp	/^  IsFinishpoint() const$/;"	f	struct:Waypoint
IsFixedSize	Engine/Task/Factory/Constraints.hpp	/^  bool IsFixedSize() const {$/;"	f	struct:TaskFactoryConstraints
IsFlarm	Dialogs/Traffic/TrafficList.cpp	/^    bool IsFlarm() const {$/;"	f	struct:TrafficListWidget::Item
IsFlavour	Input/InputEvents.cpp	/^InputEvents::IsFlavour(const TCHAR *_flavour)$/;"	f	class:InputEvents
IsFlipped	Screen/Bitmap.hpp	/^  bool IsFlipped() const {$/;"	f	class:final
IsFlipped	Screen/Custom/UncompressedImage.hpp	/^  bool IsFlipped() const {$/;"	f	class:UncompressedImage
IsFlipped	Screen/OpenGL/Texture.hpp	/^  bool IsFlipped() const {$/;"	f	class:GLTexture
IsForbiddenFlarmChar	Device/Driver/FLARM/TextProtocol.cpp	/^IsForbiddenFlarmChar(unsigned char ch)$/;"	f	file:
IsFull	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::IsFull() const$/;"	f	class:OrderedTask
IsFull	Util/Cache.hxx	/^	bool IsFull() const {$/;"	f	class:Cache
IsFull	Util/StringBuilder.hxx	/^	constexpr bool IsFull() const {$/;"	f	class:StringBuilder
IsFullMatch	Util/RadixTree.hpp	/^      bool IsFullMatch(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node::Match
IsFullWindow	Screen/Custom/WList.cpp	/^IsFullWindow(const Window &w, int width, int height)$/;"	f	file:
IsFuture	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsFuture() const {$/;"	f	class:OrderedTaskPoint
IsFuture	IO/FileCache.cpp	/^  bool IsFuture() const {$/;"	f	struct:FileInfo
IsGesture	Input/InputEvents.cpp	/^InputEvents::IsGesture(const TCHAR *data)$/;"	f	class:InputEvents
IsGesture	Lua/InputEvent.cpp	/^bool Lua::IsGesture(const TCHAR* gesture) {$/;"	f	class:Lua
IsGlidePossible	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::IsGlidePossible(const GlideState &task) const$/;"	f	class:GlidePolar
IsGliding	NMEA/FlyingState.hpp	/^  bool IsGliding() const {$/;"	f	struct:FlyingState
IsHeadingUseable	NMEA/Attitude.hpp	/^  bool IsHeadingUseable() const {$/;"	f	struct:AttitudeState
IsHollow	Screen/Brush.hpp	/^  constexpr bool IsHollow() const {$/;"	f	class:Brush
IsHomogeneous	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsHomogeneous() const$/;"	f	class:AbstractTaskFactory
IsHugeTopographyFile	Topography/TopographyStore.cpp	/^IsHugeTopographyFile(const char *name)$/;"	f	file:
IsHullExtended	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::IsHullExtended(const RoutePoint &p)$/;"	f	class:RoutePlanner
IsIOS	Asset.hpp	/^IsIOS()$/;"	f
IsInOrderedTask	Monitor/MatTaskMonitor.cpp	/^IsInOrderedTask(const ProtectedTaskManager &task_manager, const Waypoint &wp)$/;"	f	file:
IsInSector	Engine/Task/ObservationZones/AnnularSectorZone.cpp	/^AnnularSectorZone::IsInSector(const GeoPoint &location) const$/;"	f	class:AnnularSectorZone
IsInSector	Engine/Task/ObservationZones/KeyholeZone.cpp	/^KeyholeZone::IsInSector(const GeoPoint &location) const$/;"	f	class:KeyholeZone
IsInSector	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::IsInSector(const GeoPoint &location) const$/;"	f	class:ObservationZoneClient
IsInSector	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::IsInSector(const GeoPoint &location) const$/;"	f	class:SectorZone
IsInSector	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::IsInSector(const AircraftState &state) const$/;"	f	class:FinishPoint
IsInSector	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::IsInSector(const AircraftState &ref) const$/;"	f	class:OrderedTaskPoint
IsInSector	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::IsInSector(const AircraftState &state) const$/;"	f	class:StartPoint
IsInTask	Monitor/MatTaskMonitor.cpp	/^IsInTask(const OrderedTask &task, const Waypoint &wp)$/;"	f	file:
IsInsaneChar	Device/Util/LineSplitter.cpp	/^IsInsaneChar(char ch)$/;"	f	file:
IsInside	Airspace/AirspaceWarningCopy.hpp	/^  bool IsInside(const AbstractAirspace &as) const {$/;"	f	class:AirspaceWarningCopy
IsInside	Engine/Airspace/Airspace.cpp	/^Airspace::IsInside(const AircraftState &loc) const$/;"	f	class:Airspace
IsInside	Engine/Airspace/Airspace.cpp	/^Airspace::IsInside(const GeoPoint &loc) const$/;"	f	class:Airspace
IsInside	Engine/Route/FlatTriangleFan.cpp	/^FlatTriangleFan::IsInside(FlatGeoPoint p, bool closed) const$/;"	f	class:FlatTriangleFan
IsInside	Engine/Route/FlatTriangleFanTree.hpp	/^  bool IsInside(FlatGeoPoint p) const {$/;"	f	class:FlatTriangleFanTree
IsInside	Form/ScrollBar.hpp	/^  bool IsInside(const PixelPoint &pt) const {$/;"	f	class:ScrollBar
IsInside	Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::IsInside(const FlatGeoPoint& loc) const$/;"	f	class:FlatBoundingBox
IsInside	Geo/GeoBounds.hpp	/^  bool IsInside(Angle _longitude, Angle _latitude) const {$/;"	f	class:GeoBounds
IsInside	Geo/GeoBounds.hpp	/^  bool IsInside(const GeoBounds &interior) const {$/;"	f	class:GeoBounds
IsInside	Geo/GeoBounds.hpp	/^  bool IsInside(const GeoPoint pt) const {$/;"	f	class:GeoBounds
IsInside	Geo/SearchPointVector.cpp	/^SearchPointVector::IsInside(const FlatGeoPoint &pt) const$/;"	f	class:SearchPointVector
IsInside	Geo/SearchPointVector.cpp	/^SearchPointVector::IsInside(const GeoPoint &pt) const$/;"	f	class:SearchPointVector
IsInside	MapWindow/OverlayBitmap.cpp	/^MapOverlayBitmap::IsInside(GeoPoint p) const$/;"	f	class:MapOverlayBitmap
IsInside	Math/ARange.hpp	/^  bool IsInside(const Angle value) const {$/;"	f	struct:AngleRange
IsInside	Math/ARange.hpp	/^  bool IsInside(const AngleRange &interior) const {$/;"	f	struct:AngleRange
IsInside	Terrain/RasterMap.hpp	/^  bool IsInside(const GeoPoint &pt) const {$/;"	f	class:RasterMap
IsInside	Terrain/RasterTileCache.hpp	/^  bool IsInside(RasterLocation p) const {$/;"	f	class:RasterTileCache
IsInside	Time/RoughTime.hpp	/^  constexpr bool IsInside(RoughTime now) const {$/;"	f	class:RoughTimeSpan
IsInside	Weather/Rasp/RaspCache.cpp	/^RaspCache::IsInside(GeoPoint p) const$/;"	f	class:RaspCache
IsInside	Weather/Rasp/RaspRenderer.hpp	/^  bool IsInside(GeoPoint p) const {$/;"	f	class:RaspRenderer
IsInsideDownArrow	Form/ScrollBar.hpp	/^  bool IsInsideDownArrow(int y) const {$/;"	f	class:ScrollBar
IsInsideSlider	Form/ScrollBar.hpp	/^  bool IsInsideSlider(const PixelPoint pt) const {$/;"	f	class:ScrollBar
IsInsideUpArrow	Form/ScrollBar.hpp	/^  bool IsInsideUpArrow(int y) const {$/;"	f	class:ScrollBar
IsIntermediatePoint	Engine/Task/Points/TaskPoint.hpp	/^  bool IsIntermediatePoint() const {$/;"	f	class:TaskPoint
IsInternalFile	Form/DataField/File.cpp	/^IsInternalFile(const TCHAR* str)$/;"	f	file:
IsInvalid	Terrain/Height.hpp	/^  constexpr bool IsInvalid() const {$/;"	f	class:TerrainHeight
IsItalic	Look/FontDescription.hpp	/^  constexpr bool IsItalic() const {$/;"	f	class:FontDescription
IsKey	Event/SDL/Event.hpp	/^  bool IsKey() const {$/;"	f	struct:Event
IsKey	Event/Shared/Event.hpp	/^  bool IsKey() const {$/;"	f	struct:Event
IsKey	Event/Windows/Event.hpp	/^  bool IsKey() const {$/;"	f	struct:Event
IsKeyDown	Event/SDL/Event.hpp	/^  bool IsKeyDown() const {$/;"	f	struct:Event
IsKeyDown	Event/Shared/Event.hpp	/^  bool IsKeyDown() const {$/;"	f	struct:Event
IsKeyDown	Event/Windows/Event.hpp	/^  bool IsKeyDown() const {$/;"	f	struct:Event
IsKobo	Asset.hpp	/^IsKobo()$/;"	f
IsKoboOTGKernel	Kobo/Kernel.cpp	/^IsKoboOTGKernel()$/;"	f
IsKoboWifiOn	Kobo/System.cpp	/^IsKoboWifiOn()$/;"	f
IsLX16xx	Device/Driver/LX/Internal.hpp	/^  bool IsLX16xx() const {$/;"	f	class:LXDevice
IsLX16xx	Device/Driver/LXERA/Internal.hpp	/^  bool IsLX16xx() const {$/;"	f	class:LXEraDevice
IsLabelImportant	Topography/TopographyFile.hpp	/^  bool IsLabelImportant(double map_scale) const {$/;"	f	class:TopographyFile
IsLabelVisible	Topography/TopographyFile.hpp	/^  bool IsLabelVisible(double map_scale) const {$/;"	f	class:TopographyFile
IsLandable	Engine/Waypoint/Waypoint.hpp	/^  IsLandable() const$/;"	f	struct:Waypoint
IsLandable	Engine/Waypoint/Waypoints.cpp	/^IsLandable(const Waypoint &wp)$/;"	f	file:
IsLandscape	Widget/KeyboardWidget.hpp	/^  static bool IsLandscape(const PixelRect &rc) {$/;"	f	class:KeyboardWidget
IsLargeSizeDifference	Terrain/TerrainRenderer.cpp	/^IsLargeSizeDifference(const GeoBounds &a, const GeoBounds &b)$/;"	f	file:
IsLengthDefined	Engine/Waypoint/Runway.hpp	/^  bool IsLengthDefined() const {$/;"	f	class:Runway
IsLittleEndian	OS/ByteOrder.hpp	/^IsLittleEndian()$/;"	f
IsLogger	Device/Descriptor.cpp	/^DeviceDescriptor::IsLogger() const$/;"	f	class:DeviceDescriptor
IsLogger	Device/Driver.hpp	/^  bool IsLogger() const {$/;"	f	struct:DeviceRegister
IsLoggerActive	Logger/Logger.cpp	/^Logger::IsLoggerActive() const$/;"	f	class:Logger
IsMacOSX	Asset.hpp	/^IsMacOSX()$/;"	f
IsMain	Form/TabMenuDisplay.hpp	/^    bool IsMain() const {$/;"	f	struct:final::MenuTabIndex
IsManageable	Device/Descriptor.cpp	/^DeviceDescriptor::IsManageable() const$/;"	f	class:DeviceDescriptor
IsManageable	Device/Driver.hpp	/^  bool IsManageable() const {$/;"	f	struct:DeviceRegister
IsMapActive	MainWindow.hpp	/^  bool IsMapActive() const {$/;"	f	class:MainWindow
IsMidnightWraparound	Device/Parser.cpp	/^IsMidnightWraparound(double this_time, double last_time)$/;"	f	file:
IsMode	Engine/Task/TaskManager.hpp	/^  bool IsMode(const TaskType _mode) const {$/;"	f	class:TaskManager
IsModified	Dialogs/Airspace/dlgAirspace.cpp	/^  bool IsModified() const {$/;"	f	class:AirspaceSettingsListWidget
IsModified	Dialogs/Task/OptionalStartsDialog.cpp	/^  bool IsModified() const {$/;"	f	class:OptionStartsWidget
IsModified	Dialogs/Task/TaskPointDialog.cpp	/^  bool IsModified() const {$/;"	f	class:final
IsModified	Dialogs/Waypoint/Manager.cpp	/^  bool IsModified() const {$/;"	f	class:final
IsModified	Profile/Map.hpp	/^  bool IsModified() const {$/;"	f	class:ProfileMap
IsModified	Profile/ProfileMap.cpp	/^Profile::IsModified()$/;"	f	class:Profile
IsMono	Screen/FreeType/Font.cpp	/^IsMono()$/;"	f	file:
IsMonospace	Look/FontDescription.hpp	/^  constexpr bool IsMonospace() const {$/;"	f	class:FontDescription
IsMouse	Event/SDL/Event.hpp	/^  bool IsMouse() const {$/;"	f	struct:Event
IsMouse	Event/Shared/Event.hpp	/^  bool IsMouse() const {$/;"	f	struct:Event
IsMouse	Event/Windows/Event.hpp	/^  bool IsMouse() const {$/;"	f	struct:Event
IsMouseDown	Event/SDL/Event.hpp	/^  bool IsMouseDown() const {$/;"	f	struct:Event
IsMouseDown	Event/Shared/Event.hpp	/^  bool IsMouseDown() const {$/;"	f	struct:Event
IsMouseDown	Event/Windows/Event.hpp	/^  bool IsMouseDown() const {$/;"	f	struct:Event
IsNMEAOut	Device/Descriptor.cpp	/^DeviceDescriptor::IsNMEAOut() const$/;"	f	class:DeviceDescriptor
IsNMEAOut	Device/Driver.hpp	/^  bool IsNMEAOut() const {$/;"	f	struct:DeviceRegister
IsNano	Device/Driver/LX/Internal.hpp	/^  bool IsNano() const {$/;"	f	class:LXDevice
IsNearSelf	MapWindow/MapWindow.hpp	/^  bool IsNearSelf() const {$/;"	f	class:MapWindow
IsNearZero	Terrain/WorldFile.cpp	/^IsNearZero(double value)$/;"	f	file:
IsNegative	Form/DigitEntry.hpp	/^    constexpr bool IsNegative() const {$/;"	f	struct:CoordinateFormat::Column
IsNegative	Form/DigitEntry.hpp	/^  bool IsNegative() const {$/;"	f	class:CoordinateFormat
IsNegative	Math/Angle.hpp	/^  bool IsNegative() const {$/;"	f	class:Angle
IsNegative	Rough/RoughAltitude.hpp	/^  bool IsNegative() const {$/;"	f	class:RoughAltitude
IsNew	PopupMessage.hpp	/^    bool IsNew() const {$/;"	f	struct:PopupMessage::Message
IsNewerThan	Engine/Trace/Point.hpp	/^  bool IsNewerThan(const TracePoint &other) const {$/;"	f	class:TracePoint
IsNewlyExpired	PopupMessage.hpp	/^    bool IsNewlyExpired(std::chrono::steady_clock::time_point now) const {$/;"	f	struct:PopupMessage::Message
IsNonZero	Geo/SpeedVector.hpp	/^  constexpr bool IsNonZero() const {$/;"	f	struct:SpeedVector
IsNone	Form/TabMenuDisplay.hpp	/^    bool IsNone() const {$/;"	f	struct:final::MenuTabIndex
IsNookSimpleTouch	Android/Product.hpp	/^IsNookSimpleTouch()$/;"	f
IsNull	OS/Path.hpp	/^  bool IsNull() const {$/;"	f	class:AllocatedPath
IsNull	OS/Path.hpp	/^  constexpr bool IsNull() const {$/;"	f	class:Path
IsNumber	Form/DigitEntry.hpp	/^    constexpr bool IsNumber() const {$/;"	f	struct:CoordinateFormat::Column
IsOSHapticFeedbackEnabled	Android/Vibrator.cpp	/^bool Vibrator::IsOSHapticFeedbackEnabled()$/;"	f	class:Vibrator
IsOccupied	Device/Descriptor.hpp	/^  bool IsOccupied() const {$/;"	f	class:final
IsOk	Engine/GlideSolvers/GlideResult.hpp	/^  IsOk() const$/;"	f	struct:GlideResult
IsOlderThan	Engine/Trace/Point.hpp	/^  bool IsOlderThan(const TracePoint &other) const {$/;"	f	class:TracePoint
IsOpaque	Screen/Memory/Color.hpp	/^  constexpr bool IsOpaque() const {$/;"	f	class:Color
IsOpaque	Screen/OpenGL/Color.hpp	/^  constexpr bool IsOpaque() const {$/;"	f	class:Color
IsOpen	Event/Poll/Linux/Input.hpp	/^  bool IsOpen() const {$/;"	f	class:final
IsOpen	IO/FileHandle.hpp	/^  bool IsOpen() const {$/;"	f	class:FileHandle
IsOpen	IO/TextWriter.hpp	/^  bool IsOpen() const {$/;"	f	class:TextWriter
IsOrdered	Replay/TaskAccessor.hpp	/^  bool IsOrdered() const {$/;"	f	class:TaskAccessor
IsPanning	MapWindow/MapWindow.hpp	/^  bool IsPanning() const {$/;"	f	class:MapWindow
IsPanning	Pan.cpp	/^IsPanning()$/;"	f
IsPassive	FLARM/Traffic.hpp	/^  bool IsPassive() const {$/;"	f	class:FlarmTraffic::AircraftType
IsPast	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsPast() const {$/;"	f	class:OrderedTaskPoint
IsPenOverBrush	Screen/Memory/Canvas.hpp	/^  bool IsPenOverBrush() const {$/;"	f	class:Canvas
IsPenOverBrush	Screen/OpenGL/Canvas.hpp	/^  bool IsPenOverBrush() const {$/;"	f	class:Canvas
IsPersistent	Lua/Persistent.cpp	/^Lua::IsPersistent(lua_State *L)$/;"	f	class:Lua
IsPersistent	Screen/FakeBufferWindow.hpp	/^  static constexpr bool IsPersistent() {$/;"	f	class:FakeBufferWindow
IsPitchAngleUseable	NMEA/Attitude.hpp	/^  bool IsPitchAngleUseable() const {$/;"	f	struct:AttitudeState
IsPlausible	Atmosphere/Pressure.hpp	/^  bool IsPlausible() const {$/;"	f	class:AtmosphericPressure
IsPlausible	Time/BrokenDate.hpp	/^  bool IsPlausible() const {$/;"	f	struct:BrokenDate
IsPlausible	Time/BrokenDateTime.hpp	/^  bool IsPlausible() const {$/;"	f	struct:BrokenDateTime
IsPlausible	Time/BrokenTime.hpp	/^  bool IsPlausible() const {$/;"	f	struct:BrokenTime
IsPoint2D	Math/Point2D.hpp	/^struct IsPoint2D : std::is_base_of<Point2D<typename P::scalar_type,$/;"	s
IsPointOverButton	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::IsPointOverButton(PixelPoint Pos, unsigned mainIndex) const$/;"	f	class:TabMenuDisplay
IsPointerDevice	Event/Poll/Linux/Input.cpp	/^IsPointerDevice(int fd)$/;"	f	file:
IsPositionFinish	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsPositionFinish(const unsigned position) const$/;"	f	class:AbstractTaskFactory
IsPositionIntermediate	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsPositionIntermediate(const unsigned position) const$/;"	f	class:AbstractTaskFactory
IsPositionStart	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsPositionStart(const unsigned position) const {$/;"	f	class:AbstractTaskFactory
IsPositive	Math/Angle.hpp	/^  bool IsPositive() const {$/;"	f	class:Angle
IsPositive	Rough/RoughAltitude.hpp	/^  bool IsPositive() const {$/;"	f	class:RoughAltitude
IsPowered	FLARM/Traffic.hpp	/^  bool IsPowered() const {$/;"	f	class:FlarmTraffic::AircraftType
IsPredecessorAllowed	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsPredecessorAllowed() const {$/;"	f	class:OrderedTaskPoint
IsPrepared	Widget/ManagedWidget.hpp	/^  bool IsPrepared() const {$/;"	f	class:ManagedWidget
IsPressureSensor	Device/Config.hpp	/^  bool IsPressureSensor() const {$/;"	f	struct:DeviceConfig
IsPressureSensor	Device/Config.hpp	/^  static bool IsPressureSensor(PortType port_type) {$/;"	f	struct:DeviceConfig
IsPrintable	HexDump.hpp	/^IsPrintable(uint8_t ch)$/;"	f
IsQuit	Event/Android/Queue.hpp	/^  bool IsQuit() const {$/;"	f	class:EventQueue
IsQuit	Event/Poll/Queue.hpp	/^  bool IsQuit() const {$/;"	f	class:final
IsQuit	Event/SDL/Queue.hpp	/^  bool IsQuit() const {$/;"	f	class:EventQueue
IsRatioInRange	Computer/WaveComputer.cpp	/^IsRatioInRange(double ratio)$/;"	f	file:
IsReachEnabled	Engine/Route/Config.hpp	/^  bool IsReachEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsReachRelevant	Engine/Route/ReachResult.hpp	/^  bool IsReachRelevant() const {$/;"	f	struct:ReachResult
IsReachable	Engine/Task/Unordered/AbortTask.cpp	/^IsReachable(const GlideResult &result, bool final_glide)$/;"	f	file:
IsReachable	Renderer/WaypointRenderer.cpp	/^  bool IsReachable() const {$/;"	f	struct:VisibleWaypoint
IsReachableDirect	Engine/Route/ReachResult.hpp	/^  bool IsReachableDirect() const {$/;"	f	struct:ReachResult
IsReachableTerrain	Engine/Route/ReachResult.hpp	/^  bool IsReachableTerrain() const {$/;"	f	struct:ReachResult
IsRequested	Terrain/RasterTile.hpp	/^  bool IsRequested() const {$/;"	f	class:RasterTile
IsReservedIGCChar	IGC/IGCString.hpp	/^IsReservedIGCChar(char ch)$/;"	f
IsRoot	Engine/Route/FlatTriangleFanTree.hpp	/^  bool IsRoot() const {$/;"	f	class:FlatTriangleFanTree
IsRotated	Terrain/WorldFile.cpp	/^  constexpr bool IsRotated() const {$/;"	f	struct:WorldFileData
IsRunning	MainWindow.hpp	/^  bool IsRunning() {$/;"	f	class:MainWindow
IsScored	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::IsScored() const$/;"	f	class:OrderedTask
IsScreenInitialized	Screen/Debug.cpp	/^IsScreenInitialized()$/;"	f
IsSetUnique	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::IsSetUnique(const RouteLinkBase &e)$/;"	f	class:RoutePlanner
IsShort	Engine/Route/RouteLink.cpp	/^RouteLinkBase::IsShort() const$/;"	f	class:RouteLinkBase
IsSign	Form/DigitEntry.hpp	/^    constexpr bool IsSign() const {$/;"	f	struct:CoordinateFormat::Column
IsSigned	Form/DigitEntry.hpp	/^  bool IsSigned() const {$/;"	f	class:CoordinateFormat
IsSkyLines	Dialogs/Traffic/TrafficList.cpp	/^    bool IsSkyLines() const {$/;"	f	struct:TrafficListWidget::Item
IsSmallScreen	Screen/Layout.cpp	/^IsSmallScreen(PixelSize size,$/;"	f	file:
IsSmallScreen	Screen/Layout.cpp	/^IsSmallScreen(unsigned size, unsigned dpi)$/;"	f	file:
IsSmallScreen	Screen/Layout.cpp	/^IsSmallScreen(unsigned width, unsigned height,$/;"	f	file:
IsSocketBlockingError	Net/SocketError.hpp	/^IsSocketBlockingError()$/;"	f
IsSocketBlockingError	Net/SocketError.hpp	/^IsSocketBlockingError(int e)$/;"	f
IsSpecial	Terrain/Height.hpp	/^  constexpr bool IsSpecial() const {$/;"	f	class:TerrainHeight
IsSpike	Engine/Route/FlatTriangleFan.cpp	/^IsSpike(FlatGeoPoint a, FlatGeoPoint b, FlatGeoPoint c)$/;"	f	file:
IsStarted	Replay/TaskAccessor.hpp	/^  bool IsStarted() const {$/;"	f	class:TaskAccessor
IsStartpoint	Engine/Waypoint/Waypoint.hpp	/^  IsStartpoint() const$/;"	f	struct:Waypoint
IsStateAccepted	Engine/Airspace/AirspaceWarning.hpp	/^  bool IsStateAccepted(const State _state) const {$/;"	f	class:AirspaceWarning
IsStateReady	Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::IsStateReady(const TaskPoint &tp,$/;"	f	class:TaskAdvance
IsSteady	UIUtil/KineticManager.cpp	/^KineticManager::IsSteady()$/;"	f	class:KineticManager
IsStopped	Thread/StandbyThread.hpp	/^  bool IsStopped() const {$/;"	f	class:StandbyThread
IsSub	Form/TabMenuDisplay.hpp	/^    bool IsSub() const {$/;"	f	struct:final::MenuTabIndex
IsSuccessorAllowed	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  bool IsSuccessorAllowed() const {$/;"	f	class:OrderedTaskPoint
IsTargetLocked	Engine/Task/Ordered/Points/AATPoint.hpp	/^  bool IsTargetLocked() const {$/;"	f	class:final
IsTargetVisible	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::IsTargetVisible(const TaskPoint &tp) const$/;"	f	class:TaskPointRenderer
IsTaskFull	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::IsTaskFull() const$/;"	f	class:AbortTask
IsTaskLegVisible	Renderer/TaskLegRenderer.cpp	/^IsTaskLegVisible(const OrderedTaskPoint &tp)$/;"	f	file:
IsTerrain	Engine/Airspace/AirspaceAltitude.hpp	/^  bool IsTerrain() const {$/;"	f	struct:AirspaceAltitude
IsTerrainEnabled	Engine/Route/Config.hpp	/^  bool IsTerrainEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsTerrainEnabled	Engine/Route/RoutePolars.hpp	/^  bool IsTerrainEnabled() const {$/;"	f	class:RoutePolars
IsTerrainReachEmpty	Engine/Route/RoutePlanner.hpp	/^  bool IsTerrainReachEmpty() const {$/;"	f	class:RoutePlanner
IsTerrainReachEmpty	Task/ProtectedRoutePlanner.hpp	/^  bool IsTerrainReachEmpty() const {$/;"	f	class:ProtectedRoutePlanner
IsTerrainReachEmpty	Task/RoutePlannerGlue.hpp	/^  bool IsTerrainReachEmpty() const {$/;"	f	class:RoutePlannerGlue
IsTileSegment	Terrain/Loader.cpp	/^IsTileSegment(unsigned id)$/;"	f	file:
IsTileSegment	Terrain/RasterTileCache.hpp	/^    bool IsTileSegment() const {$/;"	f	struct:RasterTileCache::MarkerSegmentInfo
IsTimeAvailable	Weather/Rasp/RaspStore.hpp	/^  bool IsTimeAvailable(unsigned item_index, unsigned time_index) const {$/;"	f	class:RaspStore
IsTimePlausible	Time/BrokenDateTime.hpp	/^  bool IsTimePlausible() const {$/;"	f	struct:BrokenDateTime
IsTowing	NMEA/FlyingState.hpp	/^  bool IsTowing() const {$/;"	f	struct:FlyingState
IsTransparent	Screen/Memory/Color.hpp	/^  constexpr bool IsTransparent() const {$/;"	f	class:Color
IsTransparent	Screen/OpenGL/Color.hpp	/^  constexpr bool IsTransparent() const {$/;"	f	class:Color
IsTrivial	Engine/Route/RoutePlanner.hpp	/^  virtual bool IsTrivial() const {$/;"	f	class:RoutePlanner
IsTurningReachEnabled	Engine/Route/Config.hpp	/^  bool IsTurningReachEnabled() const {$/;"	f	struct:RoutePlannerConfig
IsTurningReachEnabled	Engine/Route/RoutePolars.hpp	/^  bool IsTurningReachEnabled() const {$/;"	f	class:RoutePolars
IsTurnpoint	Engine/Waypoint/Waypoint.hpp	/^  IsTurnpoint() const$/;"	f	struct:Waypoint
IsUnique	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsUnique() const$/;"	f	class:AbstractTaskFactory
IsUnknown	PopupMessage.hpp	/^    bool IsUnknown() const {$/;"	f	struct:PopupMessage::Message
IsUserIdle	Event/Idle.cpp	/^IsUserIdle(unsigned duration_ms)$/;"	f
IsUserInput	Event/SDL/Event.hpp	/^  bool IsUserInput() const {$/;"	f	struct:Event
IsUserInput	Event/Shared/Event.hpp	/^  bool IsUserInput() const {$/;"	f	struct:Event
IsUserInput	Event/Windows/Event.hpp	/^  bool IsUserInput() const {$/;"	f	struct:Event
IsUserKnown	Tracking/SkyLines/Data.hpp	/^  bool IsUserKnown(uint32_t id) const {$/;"	f	struct:SkyLinesTracking::Data
IsV7	Device/Driver/LX/Internal.hpp	/^  bool IsV7() const {$/;"	f	class:LXDevice
IsV7	Device/Driver/LXERA/Internal.hpp	/^  bool IsV7() const {$/;"	f	class:LXEraDevice
IsValid	Computer/Wind/CirclingWind.hpp	/^    bool IsValid() const {$/;"	f	struct:CirclingWind::Result
IsValid	Device/Driver/LX/Protocol.hpp	/^    bool IsValid() const {$/;"	f	struct:LX::FlightInfo
IsValid	Device/Driver/LXERA/Protocol.hpp	/^    bool IsValid() const {$/;"	f	struct:LXEra::FlightInfo
IsValid	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  bool IsValid() const {$/;"	f	struct:AirspaceInterceptSolution
IsValid	Engine/GlideSolvers/GlidePolar.hpp	/^  bool IsValid() const {$/;"	f	class:GlidePolar
IsValid	Engine/GlideSolvers/PolarCoefficients.cpp	/^PolarCoefficients::IsValid() const$/;"	f	class:PolarCoefficients
IsValid	Engine/Task/Ordered/AATIsolineSegment.cpp	/^AATIsolineSegment::IsValid() const$/;"	f	class:AATIsolineSegment
IsValid	Geo/Flat/FlatProjection.hpp	/^  bool IsValid() const {$/;"	f	class:FlatProjection
IsValid	Geo/GeoBounds.hpp	/^  bool IsValid() const {$/;"	f	class:GeoBounds
IsValid	Geo/GeoPoint.hpp	/^  bool IsValid() const {$/;"	f	struct:GeoPoint
IsValid	Geo/GeoVector.hpp	/^  inline bool IsValid() const {$/;"	f	struct:GeoVector
IsValid	Geo/SearchPoint.hpp	/^  bool IsValid() const {$/;"	f	class:SearchPoint
IsValid	Math/Filter.hpp	/^  bool IsValid() const {$/;"	f	class:Filter
IsValid	NMEA/Validity.hpp	/^  constexpr bool IsValid() const {$/;"	f	class:Validity
IsValid	Polar/Polar.hpp	/^  bool IsValid() const {$/;"	f	struct:PolarInfo
IsValid	Polar/Shape.cpp	/^PolarShape::IsValid() const$/;"	f	class:PolarShape
IsValid	Projection/Projection.hpp	/^  bool IsValid() const {$/;"	f	class:Projection
IsValid	Repository/AvailableFile.hpp	/^  bool IsValid() const {$/;"	f	struct:AvailableFile
IsValid	Terrain/RasterTileCache.hpp	/^  bool IsValid() const {$/;"	f	class:RasterTileCache
IsValid	Time/RoughTime.hpp	/^  constexpr bool IsValid() const {$/;"	f	class:RoughTime
IsValid	Util/ConvertString.hpp	/^  bool IsValid() const {$/;"	f	class:UTF8ToWideConverter
IsValid	Util/ConvertString.hpp	/^  bool IsValid() const {$/;"	f	class:WideToACPConverter
IsValid	Util/ConvertString.hpp	/^  bool IsValid() const {$/;"	f	class:WideToUTF8Converter
IsValidCode	Weather/NOAAStore.cpp	/^NOAAStore::IsValidCode(const TCHAR* code)$/;"	f	class:NOAAStore
IsValidCode	Weather/NOAAStore.cpp	/^NOAAStore::IsValidCode(const char *code)$/;"	f	class:NOAAStore
IsValidEWChar	Device/Driver/EWMicroRecorder.cpp	/^IsValidEWChar(char ch)$/;"	f	file:
IsValidFinishType	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsValidFinishType(TaskPointFactoryType type) const {$/;"	f	class:AbstractTaskFactory
IsValidIGCChar	IGC/IGCString.hpp	/^IsValidIGCChar(TCHAR ch)$/;"	f
IsValidIGCChar	IGC/IGCString.hpp	/^IsValidIGCChar(char ch)$/;"	f
IsValidIndex	Engine/Task/Ordered/OrderedTask.hpp	/^  bool IsValidIndex(unsigned i) const {$/;"	f	class:final
IsValidIntermediateType	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsValidIntermediateType(TaskPointFactoryType type) const {$/;"	f	class:AbstractTaskFactory
IsValidMapOrientation	Profile/MapProfile.cpp	/^IsValidMapOrientation(unsigned value)$/;"	f	file:
IsValidStartType	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  bool IsValidStartType(TaskPointFactoryType type) const {$/;"	f	class:AbstractTaskFactory
IsValidTaskPoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::IsValidTaskPoint(const int index_offset) const$/;"	f	class:OrderedTask
IsValidTaskPoint	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::IsValidTaskPoint(int index_offset) const$/;"	f	class:AbortTask
IsValidTaskPoint	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::IsValidTaskPoint(const int index_offset) const$/;"	f	class:GotoTask
IsValidType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::IsValidType(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
IsVega	Device/Config.hpp	/^  bool IsVega() const {$/;"	f	struct:DeviceConfig
IsVega	Device/Descriptor.hpp	/^  bool IsVega() const {$/;"	f	class:final
IsVertical	Form/TabDisplay.hpp	/^  bool IsVertical() const {$/;"	f	class:final
IsVertical	Widget/TabWidget.hpp	/^    static bool IsVertical(Orientation orientation, PixelRect rc) {$/;"	f	struct:TabWidget::Layout
IsVisible	Event/Poll/Queue.hpp	/^  bool IsVisible() const {$/;"	f	class:final
IsVisible	Event/Poll/WaylandQueue.hpp	/^  bool IsVisible() const {$/;"	f	class:final
IsVisible	Event/Poll/X11Queue.hpp	/^  bool IsVisible() const {$/;"	f	class:X11EventQueue
IsVisible	Topography/TopographyFile.hpp	/^  bool IsVisible(double map_scale) const {$/;"	f	class:TopographyFile
IsVisible	Widget/ManagedWidget.hpp	/^  bool IsVisible() const {$/;"	f	class:ManagedWidget
IsWarning	FLARM/Error.hpp	/^  bool IsWarning() const {$/;"	f
IsWater	Terrain/Height.hpp	/^  constexpr bool IsWater() const {$/;"	f	class:TerrainHeight
IsWaypointInAlternates	Engine/Task/Unordered/AlternateTask.cpp	/^AlternateTask::IsWaypointInAlternates(const Waypoint& waypoint) const$/;"	f	class:AlternateTask
IsWhite	Screen/Memory/PixelTraits.hpp	/^  static constexpr bool IsWhite(color_type c) {$/;"	f	struct:BGRAPixelTraits
IsWhite	Screen/Memory/PixelTraits.hpp	/^  static constexpr bool IsWhite(color_type c) {$/;"	f	struct:GreyscalePixelTraits
IsWrappedSpike	Engine/Route/FlatTriangleFan.cpp	/^IsWrappedSpike(ConstBuffer<FlatGeoPoint> hull)$/;"	f	file:
IsZero	Geo/SpeedVector.hpp	/^  constexpr bool IsZero() const {$/;"	f	struct:SpeedVector
IsZero	Rough/RoughDistance.hpp	/^  bool IsZero() const {$/;"	f	class:RoughDistance
Item	Device/SettingsMap.hpp	/^    explicit Item(const V &_value):value(_value) {}$/;"	f	struct:DeviceSettingsMap::Item
Item	Device/SettingsMap.hpp	/^  struct Item {$/;"	s	class:DeviceSettingsMap
Item	Dialogs/Device/DeviceListDialog.cpp	/^  union Item {$/;"	u	class:final	file:
Item	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^    Item(const char *_address, const char *_name)$/;"	f	struct:final::Item
Item	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  struct Item {$/;"	s	class:final	file:
Item	Dialogs/Traffic/TrafficList.cpp	/^    explicit Item(FlarmId _id)$/;"	f	struct:TrafficListWidget::Item
Item	Dialogs/Traffic/TrafficList.cpp	/^    explicit Item(uint32_t _id, uint32_t _time_of_day_ms,$/;"	f	struct:TrafficListWidget::Item
Item	Dialogs/Traffic/TrafficList.cpp	/^  struct Item {$/;"	s	class:TrafficListWidget	file:
Item	Dialogs/Weather/MapOverlayWidget.cpp	/^    Item(const TCHAR *_name, Path _path)$/;"	f	struct:final::Item
Item	Dialogs/Weather/MapOverlayWidget.cpp	/^    explicit Item(PCMet::OverlayInfo &&_pc_met)$/;"	f	struct:final::Item
Item	Dialogs/Weather/MapOverlayWidget.cpp	/^  struct Item {$/;"	s	class:final	file:
Item	Form/DataField/ComboList.cpp	/^ComboList::Item::Item(int _int_value,$/;"	f	class:ComboList::Item
Item	Form/DataField/ComboList.hpp	/^  struct Item {$/;"	s	class:ComboList
Item	Form/DataField/File.hpp	/^    Item():filename(nullptr), path(nullptr) {}$/;"	f	struct:final::Item
Item	Form/DataField/File.hpp	/^    Item(Item &&src):filename(src.filename), path(std::move(src.path)) {$/;"	f	struct:final::Item
Item	Form/DataField/File.hpp	/^  struct Item {$/;"	s	class:final
Item	Net/HTTP/DownloadManager.cpp	/^    Item(Item &&other)$/;"	f	struct:final::Item
Item	Net/HTTP/DownloadManager.cpp	/^    Item(const char *_uri, Path _path_relative)$/;"	f	struct:final::Item
Item	Net/HTTP/DownloadManager.cpp	/^  struct Item {$/;"	s	class:final	file:
Item	Polar/PolarStore.hpp	/^  struct Item$/;"	s	namespace:PolarStore
Item	Task/TaskStore.hpp	/^    Item(Path the_filename,$/;"	f	struct:TaskStore::Item
Item	Task/TaskStore.hpp	/^  struct Item$/;"	s	class:TaskStore
Item	Util/Cache.hxx	/^	class Item$/;"	c	class:Cache
Item	Util/SliceAllocator.hxx	/^	struct Item {$/;"	s	class:SliceAllocator
Item	Weather/NOAAStore.hpp	/^  struct Item$/;"	s	class:NOAAStore
ItemEqual	Util/Cache.hxx	/^	struct ItemEqual : Equal {$/;"	s	class:Cache
ItemHash	Util/Cache.hxx	/^	struct ItemHash : Hash {$/;"	s	class:Cache
ItemHelpCallback_t	Dialogs/ListPicker.hpp	/^typedef const TCHAR* (*ItemHelpCallback_t)(unsigned item);$/;"	t
ItemList	Dialogs/Traffic/TrafficList.cpp	/^  typedef std::vector<Item> ItemList;$/;"	t	class:TrafficListWidget	file:
ItemList	Util/Cache.hxx	/^				       boost::intrusive::constant_time_size<false>> ItemList;$/;"	t	class:Cache
ItemVector	Task/TaskStore.hpp	/^  typedef std::vector<TaskStore::Item> ItemVector;$/;"	t	class:TaskStore
Iteration	Screen/Memory/Murphy.hpp	/^  void Iteration(uint8_t miter,$/;"	f	struct:MurphyIterator
Iterator	Util/IterableSplitString.hxx	/^		Iterator(StringView _s, value_type _separator)$/;"	f	class:BasicIterableSplitString::final
Iterator	Util/IterableSplitString.hxx	/^		constexpr Iterator(std::nullptr_t n)$/;"	f	class:BasicIterableSplitString::final
JAS_ABS	Terrain/jasper/jas_math.h	100;"	d
JAS_ATTRIBUTE_DISABLE_USAN	Terrain/jasper/jas_config.h	81;"	d
JAS_CAST	Terrain/jasper/jas_types.h	147;"	d
JAS_CLRSPC_CHANIND_GRAY_Y	Terrain/jasper/jas_cm.h	137;"	d
JAS_CLRSPC_CHANIND_RGB_B	Terrain/jasper/jas_cm.h	135;"	d
JAS_CLRSPC_CHANIND_RGB_G	Terrain/jasper/jas_cm.h	134;"	d
JAS_CLRSPC_CHANIND_RGB_R	Terrain/jasper/jas_cm.h	133;"	d
JAS_CLRSPC_CHANIND_YCBCR_CB	Terrain/jasper/jas_cm.h	130;"	d
JAS_CLRSPC_CHANIND_YCBCR_CR	Terrain/jasper/jas_cm.h	131;"	d
JAS_CLRSPC_CHANIND_YCBCR_Y	Terrain/jasper/jas_cm.h	129;"	d
JAS_CLRSPC_CIELAB	Terrain/jasper/jas_cm.h	119;"	d
JAS_CLRSPC_CIEXYZ	Terrain/jasper/jas_cm.h	118;"	d
JAS_CLRSPC_FAM_GRAY	Terrain/jasper/jas_cm.h	112;"	d
JAS_CLRSPC_FAM_LAB	Terrain/jasper/jas_cm.h	111;"	d
JAS_CLRSPC_FAM_RGB	Terrain/jasper/jas_cm.h	113;"	d
JAS_CLRSPC_FAM_UNKNOWN	Terrain/jasper/jas_cm.h	109;"	d
JAS_CLRSPC_FAM_XYZ	Terrain/jasper/jas_cm.h	110;"	d
JAS_CLRSPC_FAM_YCBCR	Terrain/jasper/jas_cm.h	114;"	d
JAS_CLRSPC_GENGRAY	Terrain/jasper/jas_cm.h	126;"	d
JAS_CLRSPC_GENRGB	Terrain/jasper/jas_cm.h	125;"	d
JAS_CLRSPC_GENYCBCR	Terrain/jasper/jas_cm.h	127;"	d
JAS_CLRSPC_SGRAY	Terrain/jasper/jas_cm.h	120;"	d
JAS_CLRSPC_SRGB	Terrain/jasper/jas_cm.h	121;"	d
JAS_CLRSPC_SYCBCR	Terrain/jasper/jas_cm.h	122;"	d
JAS_CLRSPC_UNKNOWN	Terrain/jasper/jas_cm.h	117;"	d
JAS_CLRSPC_UNKNOWNMASK	Terrain/jasper/jas_cm.h	106;"	d
JAS_CMPROF_NUMPXFORMSEQS	Terrain/jasper/jas_cm.h	215;"	d
JAS_CMPROF_TYPE_CLRSPC	Terrain/jasper/jas_cm.h	213;"	d
JAS_CMPROF_TYPE_DEV	Terrain/jasper/jas_cm.h	212;"	d
JAS_CMXFORM_INTENT_ABSCLR	Terrain/jasper/jas_cm.h	91;"	d
JAS_CMXFORM_INTENT_PER	Terrain/jasper/jas_cm.h	89;"	d
JAS_CMXFORM_INTENT_RELCLR	Terrain/jasper/jas_cm.h	90;"	d
JAS_CMXFORM_INTENT_SAT	Terrain/jasper/jas_cm.h	92;"	d
JAS_CMXFORM_NUMINTENTS	Terrain/jasper/jas_cm.h	93;"	d
JAS_CMXFORM_OPTM_ACC	Terrain/jasper/jas_cm.h	97;"	d
JAS_CMXFORM_OPTM_SIZE	Terrain/jasper/jas_cm.h	96;"	d
JAS_CMXFORM_OPTM_SPEED	Terrain/jasper/jas_cm.h	95;"	d
JAS_CMXFORM_OP_FWD	Terrain/jasper/jas_cm.h	83;"	d
JAS_CMXFORM_OP_GAMUT	Terrain/jasper/jas_cm.h	86;"	d
JAS_CMXFORM_OP_PROOF	Terrain/jasper/jas_cm.h	85;"	d
JAS_CMXFORM_OP_REV	Terrain/jasper/jas_cm.h	84;"	d
JAS_CM_H	Terrain/jasper/jas_cm.h	69;"	d
JAS_CONFIGURE	Terrain/jasper/jas_config.h	4;"	d
JAS_CONFIGURE	Terrain/jasper/jas_config.h	7;"	d
JAS_CONFIG_H	Terrain/jasper/jas_config.h	2;"	d
JAS_COPYRIGHT	Terrain/jasper/jas_version.h	90;"	d
JAS_DBGLOG	Terrain/jasper/jas_debug.h	93;"	d
JAS_DBGLOG	Terrain/jasper/jas_debug.h	96;"	d
JAS_DBLTOFIX	Terrain/jasper/jas_fix.h	119;"	d
JAS_DEBUG_H	Terrain/jasper/jas_debug.h	69;"	d
JAS_DEC_DEFAULT_MAX_SAMPLES	Terrain/jasper/jas_config.h	77;"	d
JAS_DLLEXPORT	Terrain/jasper/jas_config.h	24;"	d
JAS_DLLLOCAL	Terrain/jasper/jas_config.h	25;"	d
JAS_FIXTODBL	Terrain/jasper/jas_fix.h	115;"	d
JAS_FIXTOINT	Terrain/jasper/jas_fix.h	111;"	d
JAS_FIX_ABS	Terrain/jasper/jas_fix.h	282;"	d
JAS_FIX_ADD	Terrain/jasper/jas_fix.h	134;"	d
JAS_FIX_ADD	Terrain/jasper/jas_fix.h	136;"	d
JAS_FIX_ADD_FAST	Terrain/jasper/jas_fix.h	140;"	d
JAS_FIX_ADD_OFLOW	Terrain/jasper/jas_fix.h	143;"	d
JAS_FIX_ASL	Terrain/jasper/jas_fix.h	225;"	d
JAS_FIX_ASL	Terrain/jasper/jas_fix.h	227;"	d
JAS_FIX_ASL_FAST	Terrain/jasper/jas_fix.h	232;"	d
JAS_FIX_ASL_OFLOW	Terrain/jasper/jas_fix.h	237;"	d
JAS_FIX_ASR	Terrain/jasper/jas_fix.h	242;"	d
JAS_FIX_ASR	Terrain/jasper/jas_fix.h	244;"	d
JAS_FIX_ASR_FAST	Terrain/jasper/jas_fix.h	249;"	d
JAS_FIX_ASR_UFLOW	Terrain/jasper/jas_fix.h	254;"	d
JAS_FIX_CMP	Terrain/jasper/jas_fix.h	298;"	d
JAS_FIX_DIV	Terrain/jasper/jas_fix.h	191;"	d
JAS_FIX_DIV	Terrain/jasper/jas_fix.h	193;"	d
JAS_FIX_DIV_FAST	Terrain/jasper/jas_fix.h	198;"	d
JAS_FIX_DIV_UFLOW	Terrain/jasper/jas_fix.h	203;"	d
JAS_FIX_FLOOR	Terrain/jasper/jas_fix.h	330;"	d
JAS_FIX_GT	Terrain/jasper/jas_fix.h	310;"	d
JAS_FIX_GTE	Terrain/jasper/jas_fix.h	314;"	d
JAS_FIX_H	Terrain/jasper/jas_fix.h	71;"	d
JAS_FIX_HALF	Terrain/jasper/jas_fix.h	99;"	d
JAS_FIX_ISINT	Terrain/jasper/jas_fix.h	286;"	d
JAS_FIX_LT	Terrain/jasper/jas_fix.h	302;"	d
JAS_FIX_LTE	Terrain/jasper/jas_fix.h	306;"	d
JAS_FIX_MINUSEQ	Terrain/jasper/jas_fix.h	270;"	d
JAS_FIX_MUL	Terrain/jasper/jas_fix.h	152;"	d
JAS_FIX_MUL	Terrain/jasper/jas_fix.h	154;"	d
JAS_FIX_MULBYINT	Terrain/jasper/jas_fix.h	174;"	d
JAS_FIX_MULBYINT	Terrain/jasper/jas_fix.h	176;"	d
JAS_FIX_MULBYINT_FAST	Terrain/jasper/jas_fix.h	181;"	d
JAS_FIX_MULBYINT_OFLOW	Terrain/jasper/jas_fix.h	186;"	d
JAS_FIX_MULEQ	Terrain/jasper/jas_fix.h	274;"	d
JAS_FIX_MUL_FAST	Terrain/jasper/jas_fix.h	159;"	d
JAS_FIX_MUL_OFLOW	Terrain/jasper/jas_fix.h	165;"	d
JAS_FIX_NEG	Terrain/jasper/jas_fix.h	208;"	d
JAS_FIX_NEG	Terrain/jasper/jas_fix.h	210;"	d
JAS_FIX_NEG_FAST	Terrain/jasper/jas_fix.h	214;"	d
JAS_FIX_NEG_OFLOW	Terrain/jasper/jas_fix.h	220;"	d
JAS_FIX_OFLOW	Terrain/jasper/jas_fix.h	345;"	d
JAS_FIX_ONE	Terrain/jasper/jas_fix.h	95;"	d
JAS_FIX_PLUSEQ	Terrain/jasper/jas_fix.h	266;"	d
JAS_FIX_ROUND	Terrain/jasper/jas_fix.h	322;"	d
JAS_FIX_SGN	Terrain/jasper/jas_fix.h	290;"	d
JAS_FIX_SUB	Terrain/jasper/jas_fix.h	262;"	d
JAS_FIX_TRUNC	Terrain/jasper/jas_fix.h	335;"	d
JAS_FIX_UFLOW	Terrain/jasper/jas_fix.h	349;"	d
JAS_FIX_ZERO	Terrain/jasper/jas_fix.h	91;"	d
JAS_HAVE_FCNTL_H	Terrain/jasper/jas_config.h	13;"	d
JAS_HAVE_GETRUSAGE	Terrain/jasper/jas_config.h	20;"	d
JAS_HAVE_GETTIMEOFDAY	Terrain/jasper/jas_config.h	19;"	d
JAS_HAVE_IO_H	Terrain/jasper/jas_config.h	14;"	d
JAS_HAVE_SNPRINTF	Terrain/jasper/jas_config.h	22;"	d
JAS_HAVE_SNPRINTF	Terrain/jasper/jas_config.h	44;"	d
JAS_HAVE_SYS_TIME_H	Terrain/jasper/jas_config.h	17;"	d
JAS_HAVE_SYS_TYPES_H	Terrain/jasper/jas_config.h	18;"	d
JAS_HAVE_UNISTD_H	Terrain/jasper/jas_config.h	15;"	d
JAS_HAVE_WINDOWS_H	Terrain/jasper/jas_config.h	16;"	d
JAS_ICC_ATTR_MATTE	Terrain/jasper/jas_icc.h	135;"	d
JAS_ICC_ATTR_TRANS	Terrain/jasper/jas_icc.h	134;"	d
JAS_ICC_CLAS_ABS	Terrain/jasper/jas_icc.h	88;"	d
JAS_ICC_CLAS_CNV	Terrain/jasper/jas_icc.h	87;"	d
JAS_ICC_CLAS_DPY	Terrain/jasper/jas_icc.h	84;"	d
JAS_ICC_CLAS_IN	Terrain/jasper/jas_icc.h	83;"	d
JAS_ICC_CLAS_LNK	Terrain/jasper/jas_icc.h	86;"	d
JAS_ICC_CLAS_NAM	Terrain/jasper/jas_icc.h	89;"	d
JAS_ICC_CLAS_OUT	Terrain/jasper/jas_icc.h	85;"	d
JAS_ICC_COLORSPC_10	Terrain/jasper/jas_icc.h	111;"	d
JAS_ICC_COLORSPC_11	Terrain/jasper/jas_icc.h	112;"	d
JAS_ICC_COLORSPC_12	Terrain/jasper/jas_icc.h	113;"	d
JAS_ICC_COLORSPC_13	Terrain/jasper/jas_icc.h	114;"	d
JAS_ICC_COLORSPC_14	Terrain/jasper/jas_icc.h	115;"	d
JAS_ICC_COLORSPC_15	Terrain/jasper/jas_icc.h	116;"	d
JAS_ICC_COLORSPC_2	Terrain/jasper/jas_icc.h	103;"	d
JAS_ICC_COLORSPC_3	Terrain/jasper/jas_icc.h	104;"	d
JAS_ICC_COLORSPC_4	Terrain/jasper/jas_icc.h	105;"	d
JAS_ICC_COLORSPC_5	Terrain/jasper/jas_icc.h	106;"	d
JAS_ICC_COLORSPC_6	Terrain/jasper/jas_icc.h	107;"	d
JAS_ICC_COLORSPC_7	Terrain/jasper/jas_icc.h	108;"	d
JAS_ICC_COLORSPC_8	Terrain/jasper/jas_icc.h	109;"	d
JAS_ICC_COLORSPC_9	Terrain/jasper/jas_icc.h	110;"	d
JAS_ICC_COLORSPC_CMY	Terrain/jasper/jas_icc.h	102;"	d
JAS_ICC_COLORSPC_CMYK	Terrain/jasper/jas_icc.h	101;"	d
JAS_ICC_COLORSPC_GRAY	Terrain/jasper/jas_icc.h	98;"	d
JAS_ICC_COLORSPC_HLS	Terrain/jasper/jas_icc.h	100;"	d
JAS_ICC_COLORSPC_HSV	Terrain/jasper/jas_icc.h	99;"	d
JAS_ICC_COLORSPC_LAB	Terrain/jasper/jas_icc.h	93;"	d
JAS_ICC_COLORSPC_LUV	Terrain/jasper/jas_icc.h	94;"	d
JAS_ICC_COLORSPC_RGB	Terrain/jasper/jas_icc.h	97;"	d
JAS_ICC_COLORSPC_XYZ	Terrain/jasper/jas_icc.h	92;"	d
JAS_ICC_COLORSPC_YCBCR	Terrain/jasper/jas_icc.h	95;"	d
JAS_ICC_COLORSPC_YXY	Terrain/jasper/jas_icc.h	96;"	d
JAS_ICC_FLAGS_EMBED	Terrain/jasper/jas_icc.h	130;"	d
JAS_ICC_FLAGS_NOSEP	Terrain/jasper/jas_icc.h	131;"	d
JAS_ICC_H	Terrain/jasper/jas_icc.h	63;"	d
JAS_ICC_HDRLEN	Terrain/jasper/jas_icc.h	80;"	d
JAS_ICC_INTENT_ABS	Terrain/jasper/jas_icc.h	141;"	d
JAS_ICC_INTENT_PER	Terrain/jasper/jas_icc.h	138;"	d
JAS_ICC_INTENT_REL	Terrain/jasper/jas_icc.h	139;"	d
JAS_ICC_INTENT_SAT	Terrain/jasper/jas_icc.h	140;"	d
JAS_ICC_MAGIC	Terrain/jasper/jas_icc.h	78;"	d
JAS_ICC_PLATFORM_APPL	Terrain/jasper/jas_icc.h	123;"	d
JAS_ICC_PLATFORM_MSFT	Terrain/jasper/jas_icc.h	124;"	d
JAS_ICC_PLATFORM_SGI	Terrain/jasper/jas_icc.h	125;"	d
JAS_ICC_PLATFORM_SUNW	Terrain/jasper/jas_icc.h	126;"	d
JAS_ICC_PLATFORM_TGNT	Terrain/jasper/jas_icc.h	127;"	d
JAS_ICC_REFCOLORSPC_LAB	Terrain/jasper/jas_icc.h	120;"	d
JAS_ICC_REFCOLORSPC_XYZ	Terrain/jasper/jas_icc.h	119;"	d
JAS_ICC_TAG_ATOB0	Terrain/jasper/jas_icc.h	144;"	d
JAS_ICC_TAG_ATOB1	Terrain/jasper/jas_icc.h	145;"	d
JAS_ICC_TAG_ATOB2	Terrain/jasper/jas_icc.h	146;"	d
JAS_ICC_TAG_BLUMATCOL	Terrain/jasper/jas_icc.h	147;"	d
JAS_ICC_TAG_BLUTRC	Terrain/jasper/jas_icc.h	148;"	d
JAS_ICC_TAG_BTOA0	Terrain/jasper/jas_icc.h	149;"	d
JAS_ICC_TAG_BTOA1	Terrain/jasper/jas_icc.h	150;"	d
JAS_ICC_TAG_BTOA2	Terrain/jasper/jas_icc.h	151;"	d
JAS_ICC_TAG_CALTIME	Terrain/jasper/jas_icc.h	152;"	d
JAS_ICC_TAG_CHARTARGET	Terrain/jasper/jas_icc.h	153;"	d
JAS_ICC_TAG_CPYRT	Terrain/jasper/jas_icc.h	154;"	d
JAS_ICC_TAG_CRDINFO	Terrain/jasper/jas_icc.h	155;"	d
JAS_ICC_TAG_DEVMAKERDESC	Terrain/jasper/jas_icc.h	156;"	d
JAS_ICC_TAG_DEVMODELDESC	Terrain/jasper/jas_icc.h	157;"	d
JAS_ICC_TAG_DEVSET	Terrain/jasper/jas_icc.h	158;"	d
JAS_ICC_TAG_GAMUT	Terrain/jasper/jas_icc.h	159;"	d
JAS_ICC_TAG_GRNMATCOL	Terrain/jasper/jas_icc.h	161;"	d
JAS_ICC_TAG_GRNTRC	Terrain/jasper/jas_icc.h	162;"	d
JAS_ICC_TAG_GRYTRC	Terrain/jasper/jas_icc.h	160;"	d
JAS_ICC_TAG_LUM	Terrain/jasper/jas_icc.h	163;"	d
JAS_ICC_TAG_MEASURE	Terrain/jasper/jas_icc.h	164;"	d
JAS_ICC_TAG_MEDIABLKPT	Terrain/jasper/jas_icc.h	165;"	d
JAS_ICC_TAG_MEDIAWHIPT	Terrain/jasper/jas_icc.h	166;"	d
JAS_ICC_TAG_NAMCOLR	Terrain/jasper/jas_icc.h	167;"	d
JAS_ICC_TAG_NAMCOLR2	Terrain/jasper/jas_icc.h	168;"	d
JAS_ICC_TAG_OUTRESP	Terrain/jasper/jas_icc.h	169;"	d
JAS_ICC_TAG_PREVIEW0	Terrain/jasper/jas_icc.h	170;"	d
JAS_ICC_TAG_PREVIEW1	Terrain/jasper/jas_icc.h	171;"	d
JAS_ICC_TAG_PREVIEW2	Terrain/jasper/jas_icc.h	172;"	d
JAS_ICC_TAG_PROFDESC	Terrain/jasper/jas_icc.h	173;"	d
JAS_ICC_TAG_PROFSEQDESC	Terrain/jasper/jas_icc.h	174;"	d
JAS_ICC_TAG_PS2CSA	Terrain/jasper/jas_icc.h	179;"	d
JAS_ICC_TAG_PS2RENINTENT	Terrain/jasper/jas_icc.h	180;"	d
JAS_ICC_TAG_PSCRDD1	Terrain/jasper/jas_icc.h	176;"	d
JAS_ICC_TAG_PSCRDD2	Terrain/jasper/jas_icc.h	177;"	d
JAS_ICC_TAG_PSCRDD3	Terrain/jasper/jas_icc.h	178;"	d
JAS_ICC_TAG_PSDCRD0	Terrain/jasper/jas_icc.h	175;"	d
JAS_ICC_TAG_REDMATCOL	Terrain/jasper/jas_icc.h	181;"	d
JAS_ICC_TAG_REDTRC	Terrain/jasper/jas_icc.h	182;"	d
JAS_ICC_TAG_SCRNG	Terrain/jasper/jas_icc.h	184;"	d
JAS_ICC_TAG_SCRNGDES	Terrain/jasper/jas_icc.h	183;"	d
JAS_ICC_TAG_TECH	Terrain/jasper/jas_icc.h	185;"	d
JAS_ICC_TAG_UCRBG	Terrain/jasper/jas_icc.h	186;"	d
JAS_ICC_TAG_VIEWCOND	Terrain/jasper/jas_icc.h	188;"	d
JAS_ICC_TAG_VIEWCONDDESC	Terrain/jasper/jas_icc.h	187;"	d
JAS_ICC_TYPE_CRDINFO	Terrain/jasper/jas_icc.h	191;"	d
JAS_ICC_TYPE_CURV	Terrain/jasper/jas_icc.h	192;"	d
JAS_ICC_TYPE_DATA	Terrain/jasper/jas_icc.h	193;"	d
JAS_ICC_TYPE_DEVSET	Terrain/jasper/jas_icc.h	195;"	d
JAS_ICC_TYPE_LUT16	Terrain/jasper/jas_icc.h	196;"	d
JAS_ICC_TYPE_LUT8	Terrain/jasper/jas_icc.h	197;"	d
JAS_ICC_TYPE_MEASURE	Terrain/jasper/jas_icc.h	198;"	d
JAS_ICC_TYPE_NAMCOLR	Terrain/jasper/jas_icc.h	199;"	d
JAS_ICC_TYPE_NAMCOLR2	Terrain/jasper/jas_icc.h	200;"	d
JAS_ICC_TYPE_PROFSEQDESC	Terrain/jasper/jas_icc.h	201;"	d
JAS_ICC_TYPE_RESPCURVSET16	Terrain/jasper/jas_icc.h	202;"	d
JAS_ICC_TYPE_SCRNG	Terrain/jasper/jas_icc.h	204;"	d
JAS_ICC_TYPE_SF32	Terrain/jasper/jas_icc.h	203;"	d
JAS_ICC_TYPE_SIG	Terrain/jasper/jas_icc.h	205;"	d
JAS_ICC_TYPE_TIME	Terrain/jasper/jas_icc.h	194;"	d
JAS_ICC_TYPE_TXT	Terrain/jasper/jas_icc.h	207;"	d
JAS_ICC_TYPE_TXTDESC	Terrain/jasper/jas_icc.h	206;"	d
JAS_ICC_TYPE_UCRBG	Terrain/jasper/jas_icc.h	209;"	d
JAS_ICC_TYPE_UF32	Terrain/jasper/jas_icc.h	208;"	d
JAS_ICC_TYPE_UI16	Terrain/jasper/jas_icc.h	210;"	d
JAS_ICC_TYPE_UI32	Terrain/jasper/jas_icc.h	211;"	d
JAS_ICC_TYPE_UI64	Terrain/jasper/jas_icc.h	213;"	d
JAS_ICC_TYPE_UI8	Terrain/jasper/jas_icc.h	212;"	d
JAS_ICC_TYPE_VIEWCOND	Terrain/jasper/jas_icc.h	214;"	d
JAS_ICC_TYPE_XYZ	Terrain/jasper/jas_icc.h	215;"	d
JAS_IMAGE_CDT_GETPREC	Terrain/jasper/jas_image.h	450;"	d
JAS_IMAGE_CDT_GETSGND	Terrain/jasper/jas_image.h	448;"	d
JAS_IMAGE_CDT_SETPREC	Terrain/jasper/jas_image.h	451;"	d
JAS_IMAGE_CDT_SETSGND	Terrain/jasper/jas_image.h	449;"	d
JAS_IMAGE_COORD_MAX	Terrain/jasper/jas_image.h	129;"	d
JAS_IMAGE_COORD_MIN	Terrain/jasper/jas_image.h	130;"	d
JAS_IMAGE_CT_COLOR	Terrain/jasper/jas_image.h	110;"	d
JAS_IMAGE_CT_GRAY_Y	Terrain/jasper/jas_image.h	121;"	d
JAS_IMAGE_CT_OPACITY	Terrain/jasper/jas_image.h	111;"	d
JAS_IMAGE_CT_RGB_B	Terrain/jasper/jas_image.h	115;"	d
JAS_IMAGE_CT_RGB_G	Terrain/jasper/jas_image.h	114;"	d
JAS_IMAGE_CT_RGB_R	Terrain/jasper/jas_image.h	113;"	d
JAS_IMAGE_CT_UNKNOWN	Terrain/jasper/jas_image.h	109;"	d
JAS_IMAGE_CT_YCBCR_CB	Terrain/jasper/jas_image.h	118;"	d
JAS_IMAGE_CT_YCBCR_CR	Terrain/jasper/jas_image.h	119;"	d
JAS_IMAGE_CT_YCBCR_Y	Terrain/jasper/jas_image.h	117;"	d
JAS_IMAGE_H	Terrain/jasper/jas_image.h	71;"	d
JAS_IMAGE_INMEMTHRESH	Terrain/jasper/jas_image.h	103;"	d
JAS_IMAGE_KIBI	Terrain/jasper/jas_image.h	99;"	d
JAS_IMAGE_MAXFMTS	Terrain/jasper/jas_image.h	266;"	d
JAS_IMAGE_MEBI	Terrain/jasper/jas_image.h	100;"	d
JAS_INIT_H	Terrain/jasper/jas_init.h	63;"	d
JAS_INTTOFIX	Terrain/jasper/jas_fix.h	107;"	d
JAS_KIBI	Terrain/jasper/jas_math.h	96;"	d
JAS_MALLOC_H	Terrain/jasper/jas_malloc.h	71;"	d
JAS_MATH_H	Terrain/jasper/jas_math.h	71;"	d
JAS_MATRIX_REF	Terrain/jasper/jas_seq.h	95;"	d
JAS_MAX	Terrain/jasper/jas_math.h	108;"	d
JAS_MB_ADJUST	Terrain/jasper/base/jas_malloc.c	97;"	d	file:
JAS_MB_SIZE	Terrain/jasper/base/jas_malloc.c	99;"	d	file:
JAS_MEBI	Terrain/jasper/jas_math.h	97;"	d
JAS_MIN	Terrain/jasper/jas_math.h	104;"	d
JAS_MOD	Terrain/jasper/jas_math.h	113;"	d
JAS_NOTES	Terrain/jasper/jas_version.h	96;"	d
JAS_ONES	Terrain/jasper/jas_math.h	118;"	d
JAS_SEQ_H	Terrain/jasper/jas_seq.h	71;"	d
JAS_STREAM_APPEND	Terrain/jasper/jas_stream.h	110;"	d
JAS_STREAM_BINARY	Terrain/jasper/jas_stream.h	112;"	d
JAS_STREAM_BUFMODEMASK	Terrain/jasper/jas_stream.h	128;"	d
JAS_STREAM_BUFSIZE	Terrain/jasper/jas_stream.h	157;"	d
JAS_STREAM_CREATE	Terrain/jasper/jas_stream.h	114;"	d
JAS_STREAM_EOF	Terrain/jasper/jas_stream.h	143;"	d
JAS_STREAM_ERR	Terrain/jasper/jas_stream.h	145;"	d
JAS_STREAM_ERRMASK	Terrain/jasper/jas_stream.h	149;"	d
JAS_STREAM_FILEOBJ_DELONCLOSE	Terrain/jasper/jas_stream.h	256;"	d
JAS_STREAM_FILEOBJ_NOCLOSE	Terrain/jasper/jas_stream.h	257;"	d
JAS_STREAM_FREEBUF	Terrain/jasper/jas_stream.h	132;"	d
JAS_STREAM_FULLBUF	Terrain/jasper/jas_stream.h	126;"	d
JAS_STREAM_H	Terrain/jasper/jas_stream.h	71;"	d
JAS_STREAM_LINEBUF	Terrain/jasper/jas_stream.h	124;"	d
JAS_STREAM_MAXPUTBACK	Terrain/jasper/jas_stream.h	162;"	d
JAS_STREAM_PERMS	Terrain/jasper/jas_stream.h	159;"	d
JAS_STREAM_RDBUF	Terrain/jasper/jas_stream.h	134;"	d
JAS_STREAM_READ	Terrain/jasper/jas_stream.h	106;"	d
JAS_STREAM_RWLIMIT	Terrain/jasper/jas_stream.h	147;"	d
JAS_STREAM_UNBUF	Terrain/jasper/jas_stream.h	122;"	d
JAS_STREAM_WRBUF	Terrain/jasper/jas_stream.h	136;"	d
JAS_STREAM_WRITE	Terrain/jasper/jas_stream.h	108;"	d
JAS_STRINGIFY	Terrain/jasper/jas_debug.h	123;"	d
JAS_STRINGIFYX	Terrain/jasper/jas_debug.h	126;"	d
JAS_STRING_H	Terrain/jasper/jas_string.h	71;"	d
JAS_TVP_H	Terrain/jasper/jas_tvp.h	69;"	d
JAS_TVP_ISTAG	Terrain/jasper/base/jas_tvp.c	84;"	d	file:
JAS_TYPES_H	Terrain/jasper/jas_types.h	71;"	d
JAS_UINTFAST32_NUMBITS	Terrain/jasper/jas_types.h	152;"	d
JAS_VERSION	Terrain/jasper/jas_config.h	12;"	d
JAS_VERSION	Terrain/jasper/jas_config.h	32;"	d
JAS_VERSION	Terrain/jasper/jas_version.h	85;"	d
JAS_VERSION_H	Terrain/jasper/jas_version.h	69;"	d
JAVA_CLASS_HXX	Java/Class.hxx	31;"	d
JAVA_EXCEPTION_HXX	Java/Exception.hxx	31;"	d
JAVA_FILE_HXX	Java/File.hxx	31;"	d
JAVA_GLOBAL_HXX	Java/Global.hxx	31;"	d
JAVA_INPUT_STREAM_HXX	Java/InputStream.hxx	31;"	d
JAVA_OBJECT_HXX	Java/Object.hxx	31;"	d
JAVA_REF_HXX	Java/Ref.hxx	31;"	d
JAVA_STRING_HXX	Java/String.hxx	31;"	d
JAVA_URL_HXX	Java/URL.hxx	31;"	d
JET_AIRCRAFT	FLARM/Traffic.hpp	/^    JET_AIRCRAFT = 9,     \/\/!< jet aircraft$/;"	m	class:FlarmTraffic::AircraftType
JP2_BOX_BPCC	Terrain/jasper/jp2/jp2_cod.h	100;"	d
JP2_BOX_CDEF	Terrain/jasper/jp2/jp2_cod.h	104;"	d
JP2_BOX_CMAP	Terrain/jasper/jp2/jp2_cod.h	103;"	d
JP2_BOX_COLR	Terrain/jasper/jp2/jp2_cod.h	101;"	d
JP2_BOX_FTYP	Terrain/jasper/jp2/jp2_cod.h	97;"	d
JP2_BOX_HDRLEN	Terrain/jasper/jp2/jp2_cod.h	93;"	d
JP2_BOX_IHDR	Terrain/jasper/jp2/jp2_cod.h	99;"	d
JP2_BOX_JP	Terrain/jasper/jp2/jp2_cod.h	96;"	d
JP2_BOX_JP2C	Terrain/jasper/jp2/jp2_cod.h	108;"	d
JP2_BOX_JP2H	Terrain/jasper/jp2/jp2_cod.h	98;"	d
JP2_BOX_JP2I	Terrain/jasper/jp2/jp2_cod.h	109;"	d
JP2_BOX_NODATA	Terrain/jasper/jp2/jp2_cod.h	117;"	d
JP2_BOX_PCLR	Terrain/jasper/jp2/jp2_cod.h	102;"	d
JP2_BOX_RES	Terrain/jasper/jp2/jp2_cod.h	105;"	d
JP2_BOX_RESC	Terrain/jasper/jp2/jp2_cod.h	106;"	d
JP2_BOX_RESD	Terrain/jasper/jp2/jp2_cod.h	107;"	d
JP2_BOX_SUPER	Terrain/jasper/jp2/jp2_cod.h	116;"	d
JP2_BOX_UINF	Terrain/jasper/jp2/jp2_cod.h	112;"	d
JP2_BOX_ULST	Terrain/jasper/jp2/jp2_cod.h	113;"	d
JP2_BOX_URL	Terrain/jasper/jp2/jp2_cod.h	114;"	d
JP2_BOX_UUID	Terrain/jasper/jp2/jp2_cod.h	111;"	d
JP2_BOX_XML	Terrain/jasper/jp2/jp2_cod.h	110;"	d
JP2_BPCTODTYPE	Terrain/jasper/jp2/jp2_cod.h	298;"	d
JP2_CDEF_ASOC_ALL	Terrain/jasper/jp2/jp2_cod.h	208;"	d
JP2_CDEF_ASOC_NONE	Terrain/jasper/jp2/jp2_cod.h	209;"	d
JP2_CDEF_GRAY_Y	Terrain/jasper/jp2/jp2_cod.h	203;"	d
JP2_CDEF_RGB_B	Terrain/jasper/jp2/jp2_cod.h	197;"	d
JP2_CDEF_RGB_G	Terrain/jasper/jp2/jp2_cod.h	196;"	d
JP2_CDEF_RGB_R	Terrain/jasper/jp2/jp2_cod.h	195;"	d
JP2_CDEF_TYPE_COLOR	Terrain/jasper/jp2/jp2_cod.h	205;"	d
JP2_CDEF_TYPE_OPACITY	Terrain/jasper/jp2/jp2_cod.h	206;"	d
JP2_CDEF_TYPE_UNSPEC	Terrain/jasper/jp2/jp2_cod.h	207;"	d
JP2_CDEF_YCBCR_CB	Terrain/jasper/jp2/jp2_cod.h	200;"	d
JP2_CDEF_YCBCR_CR	Terrain/jasper/jp2/jp2_cod.h	201;"	d
JP2_CDEF_YCBCR_Y	Terrain/jasper/jp2/jp2_cod.h	199;"	d
JP2_CMAP_DIRECT	Terrain/jasper/jp2/jp2_cod.h	235;"	d
JP2_CMAP_PALETTE	Terrain/jasper/jp2/jp2_cod.h	236;"	d
JP2_COD_H	Terrain/jasper/jp2/jp2_cod.h	71;"	d
JP2_COLR_ENUM	Terrain/jasper/jp2/jp2_cod.h	166;"	d
JP2_COLR_ICC	Terrain/jasper/jp2/jp2_cod.h	167;"	d
JP2_COLR_PRI	Terrain/jasper/jp2/jp2_cod.h	168;"	d
JP2_COLR_SGRAY	Terrain/jasper/jp2/jp2_cod.h	171;"	d
JP2_COLR_SRGB	Terrain/jasper/jp2/jp2_cod.h	170;"	d
JP2_COLR_SYCC	Terrain/jasper/jp2/jp2_cod.h	172;"	d
JP2_DTYPETOBPC	Terrain/jasper/jp2/jp2_cod.h	296;"	d
JP2_FTYP_COMPATCODE	Terrain/jasper/jp2/jp2_cod.h	133;"	d
JP2_FTYP_MAJVER	Terrain/jasper/jp2/jp2_cod.h	131;"	d
JP2_FTYP_MAXCOMPATCODES	Terrain/jasper/jp2/jp2_cod.h	130;"	d
JP2_FTYP_MINVER	Terrain/jasper/jp2/jp2_cod.h	132;"	d
JP2_IHDR_BPCNULL	Terrain/jasper/jp2/jp2_cod.h	145;"	d
JP2_IHDR_COMPTYPE	Terrain/jasper/jp2/jp2_cod.h	144;"	d
JP2_JP_LEN	Terrain/jasper/jp2/jp2_cod.h	122;"	d
JP2_JP_MAGIC	Terrain/jasper/jp2/jp2_cod.h	121;"	d
JP2_SPTOBPC	Terrain/jasper/jp2/jp2_cod.h	86;"	d
JPC_AGGCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	161;"	d
JPC_ASR	Terrain/jasper/jpc/jpc_t1cod.h	233;"	d
JPC_BITSTREAM_EOF	Terrain/jasper/jpc/jpc_bs.h	105;"	d
JPC_BITSTREAM_ERR	Terrain/jasper/jpc/jpc_bs.h	107;"	d
JPC_BITSTREAM_NOCLOSE	Terrain/jasper/jpc/jpc_bs.h	103;"	d
JPC_BITSTREAM_READ	Terrain/jasper/jpc/jpc_bs.h	94;"	d
JPC_BITSTREAM_WRITE	Terrain/jasper/jpc/jpc_bs.h	96;"	d
JPC_BS_H	Terrain/jasper/jpc/jpc_bs.h	71;"	d
JPC_CEILDIV	Terrain/jasper/jpc/jpc_math.h	81;"	d
JPC_CEILDIVPOW2	Terrain/jasper/jpc/jpc_math.h	87;"	d
JPC_CLNPASS	Terrain/jasper/jpc/jpc_t1cod.h	103;"	d
JPC_COC	Terrain/jasper/jpc/jpc_dec.c	134;"	d	file:
JPC_COD_CPRLPRG	Terrain/jasper/jpc/jpc_cs.h	250;"	d
JPC_COD_EPH	Terrain/jasper/jpc/jpc_cs.h	233;"	d
JPC_COD_H	Terrain/jasper/jpc/jpc_cod.h	69;"	d
JPC_COD_LRCPPRG	Terrain/jasper/jpc/jpc_cs.h	241;"	d
JPC_COD_MCT	Terrain/jasper/jpc/jpc_cs.h	269;"	d
JPC_COD_NOMCT	Terrain/jasper/jpc/jpc_cs.h	268;"	d
JPC_COD_PCRLPRG	Terrain/jasper/jpc/jpc_cs.h	248;"	d
JPC_COD_RLCPPRG	Terrain/jasper/jpc/jpc_cs.h	244;"	d
JPC_COD_RPCLPRG	Terrain/jasper/jpc/jpc_cs.h	246;"	d
JPC_COD_SOP	Terrain/jasper/jpc/jpc_cs.h	231;"	d
JPC_COM_BIN	Terrain/jasper/jpc/jpc_cs.h	519;"	d
JPC_COM_LATIN	Terrain/jasper/jpc/jpc_cs.h	520;"	d
JPC_COX_CBLKSIZEEXPN	Terrain/jasper/jpc/jpc_cs.h	272;"	d
JPC_COX_GETCBLKSIZEEXPN	Terrain/jasper/jpc/jpc_cs.h	274;"	d
JPC_COX_INS	Terrain/jasper/jpc/jpc_cs.h	264;"	d
JPC_COX_LAZY	Terrain/jasper/jpc/jpc_cs.h	256;"	d
JPC_COX_PRT	Terrain/jasper/jpc/jpc_cs.h	229;"	d
JPC_COX_PTERM	Terrain/jasper/jpc/jpc_cs.h	260;"	d
JPC_COX_RESET	Terrain/jasper/jpc/jpc_cs.h	257;"	d
JPC_COX_RFT	Terrain/jasper/jpc/jpc_cs.h	265;"	d
JPC_COX_SEGSYM	Terrain/jasper/jpc/jpc_cs.h	261;"	d
JPC_COX_TERMALL	Terrain/jasper/jpc/jpc_cs.h	258;"	d
JPC_COX_VSC	Terrain/jasper/jpc/jpc_cs.h	259;"	d
JPC_CSET	Terrain/jasper/jpc/jpc_dec.c	130;"	d	file:
JPC_CS_H	Terrain/jasper/jpc/jpc_cs.h	71;"	d
JPC_CS_INIT	Terrain/jasper/jpc/jpc_cs.h	103;"	d
JPC_CS_MHDR	Terrain/jasper/jpc/jpc_cs.h	105;"	d
JPC_CS_MTLR	Terrain/jasper/jpc/jpc_cs.h	109;"	d
JPC_CS_TDATA	Terrain/jasper/jpc/jpc_cs.h	111;"	d
JPC_CS_THDR	Terrain/jasper/jpc/jpc_cs.h	107;"	d
JPC_DEC_H	Terrain/jasper/jpc/jpc_dec.h	71;"	d
JPC_ESGN	Terrain/jasper/jpc/jpc_t1cod.h	134;"	d
JPC_ESIG	Terrain/jasper/jpc/jpc_t1cod.h	120;"	d
JPC_FIX_FRACBITS	Terrain/jasper/jpc/jpc_fix.h	95;"	d
JPC_FIX_H	Terrain/jasper/jpc/jpc_fix.h	71;"	d
JPC_FIX_HALF	Terrain/jasper/jpc/jpc_fix.h	106;"	d
JPC_FIX_ONE	Terrain/jasper/jpc/jpc_fix.h	105;"	d
JPC_FIX_ZERO	Terrain/jasper/jpc/jpc_fix.h	104;"	d
JPC_FLOORDIV	Terrain/jasper/jpc/jpc_math.h	78;"	d
JPC_FLOORDIVPOW2	Terrain/jasper/jpc/jpc_math.h	84;"	d
JPC_FLT_H	Terrain/jasper/jpc/jpc_flt.h	71;"	d
JPC_GETMAGCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	215;"	d
JPC_GETREFNMSEDEC	Terrain/jasper/jpc/jpc_t1cod.h	226;"	d
JPC_GETSCCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	210;"	d
JPC_GETSIGNMSEDEC	Terrain/jasper/jpc/jpc_t1cod.h	219;"	d
JPC_GETSPB	Terrain/jasper/jpc/jpc_t1cod.h	205;"	d
JPC_GETZCCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	200;"	d
JPC_ISTERMINATED	Terrain/jasper/jpc/jpc_t1cod.c	/^int JPC_ISTERMINATED(int passno, int firstpassno, int numpasses, int termall,$/;"	f
JPC_MAGCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	165;"	d
JPC_MATH_H	Terrain/jasper/jpc/jpc_math.h	63;"	d
JPC_MAXBANDS	Terrain/jasper/jpc/jpc_cs.h	89;"	d
JPC_MAXLYRS	Terrain/jasper/jpc/jpc_cs.h	92;"	d
JPC_MAXRLVLS	Terrain/jasper/jpc/jpc_cs.h	86;"	d
JPC_MCT_H	Terrain/jasper/jpc/jpc_mct.h	71;"	d
JPC_MCT_ICT	Terrain/jasper/jpc/jpc_mct.h	92;"	d
JPC_MCT_NONE	Terrain/jasper/jpc/jpc_mct.h	91;"	d
JPC_MCT_RCT	Terrain/jasper/jpc/jpc_mct.h	93;"	d
JPC_MH	Terrain/jasper/jpc/jpc_dec.c	102;"	d	file:
JPC_MHSIZ	Terrain/jasper/jpc/jpc_dec.c	100;"	d	file:
JPC_MHSOC	Terrain/jasper/jpc/jpc_dec.c	98;"	d	file:
JPC_MQCOD_H	Terrain/jasper/jpc/jpc_mqcod.h	71;"	d
JPC_MQDEC_H	Terrain/jasper/jpc/jpc_mqdec.h	71;"	d
JPC_MS_COC	Terrain/jasper/jpc/jpc_cs.h	643;"	d
JPC_MS_COD	Terrain/jasper/jpc/jpc_cs.h	642;"	d
JPC_MS_COM	Terrain/jasper/jpc/jpc_cs.h	662;"	d
JPC_MS_CRG	Terrain/jasper/jpc/jpc_cs.h	661;"	d
JPC_MS_EOC	Terrain/jasper/jpc/jpc_cs.h	636;"	d
JPC_MS_EPH	Terrain/jasper/jpc/jpc_cs.h	658;"	d
JPC_MS_HASPARMS	Terrain/jasper/jpc/jpc_cs.h	722;"	d
JPC_MS_INMAX	Terrain/jasper/jpc/jpc_cs.h	630;"	d
JPC_MS_INMIN	Terrain/jasper/jpc/jpc_cs.h	628;"	d
JPC_MS_MAX	Terrain/jasper/jpc/jpc_cs.h	625;"	d
JPC_MS_MIN	Terrain/jasper/jpc/jpc_cs.h	622;"	d
JPC_MS_PLM	Terrain/jasper/jpc/jpc_cs.h	651;"	d
JPC_MS_PLT	Terrain/jasper/jpc/jpc_cs.h	652;"	d
JPC_MS_POC	Terrain/jasper/jpc/jpc_cs.h	647;"	d
JPC_MS_PPM	Terrain/jasper/jpc/jpc_cs.h	653;"	d
JPC_MS_PPT	Terrain/jasper/jpc/jpc_cs.h	654;"	d
JPC_MS_QCC	Terrain/jasper/jpc/jpc_cs.h	646;"	d
JPC_MS_QCD	Terrain/jasper/jpc/jpc_cs.h	645;"	d
JPC_MS_RGN	Terrain/jasper/jpc/jpc_cs.h	644;"	d
JPC_MS_SIZ	Terrain/jasper/jpc/jpc_cs.h	639;"	d
JPC_MS_SOC	Terrain/jasper/jpc/jpc_cs.h	633;"	d
JPC_MS_SOD	Terrain/jasper/jpc/jpc_cs.h	635;"	d
JPC_MS_SOP	Terrain/jasper/jpc/jpc_cs.h	657;"	d
JPC_MS_SOT	Terrain/jasper/jpc/jpc_cs.h	634;"	d
JPC_MS_TLM	Terrain/jasper/jpc/jpc_cs.h	650;"	d
JPC_MT	Terrain/jasper/jpc/jpc_dec.c	108;"	d	file:
JPC_NESIG	Terrain/jasper/jpc/jpc_t1cod.h	110;"	d
JPC_NMSEDEC_BITS	Terrain/jasper/jpc/jpc_t1cod.h	83;"	d
JPC_NMSEDEC_FRACBITS	Terrain/jasper/jpc/jpc_t1cod.h	84;"	d
JPC_NOMINALGAIN	Terrain/jasper/jpc/jpc_t1cod.c	/^int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient)$/;"	f
JPC_NSGN	Terrain/jasper/jpc/jpc_t1cod.h	132;"	d
JPC_NSIG	Terrain/jasper/jpc/jpc_t1cod.h	118;"	d
JPC_NUMAGGCTXS	Terrain/jasper/jpc/jpc_t1cod.h	150;"	d
JPC_NUMCTXS	Terrain/jasper/jpc/jpc_t1cod.h	171;"	d
JPC_NUMMAGCTXS	Terrain/jasper/jpc/jpc_t1cod.h	154;"	d
JPC_NUMSCCTXS	Terrain/jasper/jpc/jpc_t1cod.h	156;"	d
JPC_NUMUCTXS	Terrain/jasper/jpc/jpc_t1cod.h	158;"	d
JPC_NUMZCCTXS	Terrain/jasper/jpc/jpc_t1cod.h	152;"	d
JPC_NWSIG	Terrain/jasper/jpc/jpc_t1cod.h	116;"	d
JPC_OTHSIGMSK	Terrain/jasper/jpc/jpc_t1cod.h	126;"	d
JPC_PASSTYPE	Terrain/jasper/jpc/jpc_t1cod.c	/^int JPC_PASSTYPE(int passno)$/;"	f
JPC_PREC	Terrain/jasper/jpc/jpc_cod.h	76;"	d
JPC_PREC	Terrain/jasper/jpc/jpc_t1cod.h	98;"	d
JPC_PRIMSIGMSK	Terrain/jasper/jpc/jpc_t1cod.h	129;"	d
JPC_QCC	Terrain/jasper/jpc/jpc_dec.c	136;"	d	file:
JPC_QCX_EXPN	Terrain/jasper/jpc/jpc_cs.h	389;"	d
JPC_QCX_GETEXPN	Terrain/jasper/jpc/jpc_cs.h	387;"	d
JPC_QCX_GETMANT	Terrain/jasper/jpc/jpc_cs.h	388;"	d
JPC_QCX_MANT	Terrain/jasper/jpc/jpc_cs.h	390;"	d
JPC_QCX_NOQNT	Terrain/jasper/jpc/jpc_cs.h	379;"	d
JPC_QCX_SEQNT	Terrain/jasper/jpc/jpc_cs.h	381;"	d
JPC_QCX_SIQNT	Terrain/jasper/jpc/jpc_cs.h	380;"	d
JPC_QMFB1D_FT	Terrain/jasper/jpc/jpc_qmfb.h	84;"	d
JPC_QMFB1D_NS	Terrain/jasper/jpc/jpc_qmfb.h	85;"	d
JPC_QMFB_COLGRPSIZE	Terrain/jasper/jpc/jpc_qmfb.h	100;"	d
JPC_QMFB_H	Terrain/jasper/jpc/jpc_qmfb.h	71;"	d
JPC_QSET	Terrain/jasper/jpc/jpc_dec.c	132;"	d	file:
JPC_REFINE	Terrain/jasper/jpc/jpc_t1cod.h	145;"	d
JPC_REFPASS	Terrain/jasper/jpc/jpc_t1cod.h	102;"	d
JPC_RGN_MAXSHIFT	Terrain/jasper/jpc/jpc_cs.h	356;"	d
JPC_RTC_H	Terrain/jasper/jpc_rtc.h	2;"	d
JPC_SCCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	167;"	d
JPC_SEGPASSCNT	Terrain/jasper/jpc/jpc_t1cod.c	/^int JPC_SEGPASSCNT(int passno, int firstpassno, int numpasses, int bypass, int termall)$/;"	f
JPC_SEGTYPE	Terrain/jasper/jpc/jpc_t1cod.c	/^int JPC_SEGTYPE(int passno, int firstpassno, int bypass)$/;"	f
JPC_SEG_INVALID	Terrain/jasper/jpc/jpc_t1cod.h	91;"	d
JPC_SEG_MQ	Terrain/jasper/jpc/jpc_t1cod.h	93;"	d
JPC_SEG_RAW	Terrain/jasper/jpc/jpc_t1cod.h	95;"	d
JPC_SESIG	Terrain/jasper/jpc/jpc_t1cod.h	112;"	d
JPC_SGNMSK	Terrain/jasper/jpc/jpc_t1cod.h	140;"	d
JPC_SIG	Terrain/jasper/jpc/jpc_t1cod.h	143;"	d
JPC_SIGPASS	Terrain/jasper/jpc/jpc_t1cod.h	101;"	d
JPC_SSGN	Terrain/jasper/jpc/jpc_t1cod.h	136;"	d
JPC_SSIG	Terrain/jasper/jpc/jpc_t1cod.h	122;"	d
JPC_SWSIG	Terrain/jasper/jpc/jpc_t1cod.h	114;"	d
JPC_T1COD_H	Terrain/jasper/jpc/jpc_t1cod.h	69;"	d
JPC_T1DEC_H	Terrain/jasper/jpc/jpc_t1dec.h	71;"	d
JPC_T1D_GETBIT	Terrain/jasper/jpc/jpc_t1dec.c	108;"	d	file:
JPC_T1D_GETBIT	Terrain/jasper/jpc/jpc_t1dec.c	111;"	d	file:
JPC_T1D_GETBITNOSKEW	Terrain/jasper/jpc/jpc_t1dec.c	120;"	d	file:
JPC_T1D_RAWGETBIT	Terrain/jasper/jpc/jpc_t1dec.c	124;"	d	file:
JPC_T1D_RAWGETBIT	Terrain/jasper/jpc/jpc_t1dec.c	127;"	d	file:
JPC_T2COD_H	Terrain/jasper/jpc/jpc_t2cod.h	71;"	d
JPC_T2DEC_H	Terrain/jasper/jpc/jpc_t2dec.h	71;"	d
JPC_TAGTREE_H	Terrain/jasper/jpc/jpc_tagtree.h	71;"	d
JPC_TAGTREE_MAXDEPTH	Terrain/jasper/jpc/jpc_tagtree.h	86;"	d
JPC_TILE_ACTIVE	Terrain/jasper/jpc/jpc_dec.h	485;"	d
JPC_TILE_ACTIVELAST	Terrain/jasper/jpc/jpc_dec.h	486;"	d
JPC_TILE_DONE	Terrain/jasper/jpc/jpc_dec.h	487;"	d
JPC_TILE_INIT	Terrain/jasper/jpc/jpc_dec.h	484;"	d
JPC_TPH	Terrain/jasper/jpc/jpc_dec.c	106;"	d	file:
JPC_TPHSOT	Terrain/jasper/jpc/jpc_dec.c	104;"	d	file:
JPC_TSFB_H	Terrain/jasper/jpc/jpc_tsfb.h	71;"	d
JPC_TSFB_HH	Terrain/jasper/jpc/jpc_tsfb.h	96;"	d
JPC_TSFB_HL	Terrain/jasper/jpc/jpc_tsfb.h	95;"	d
JPC_TSFB_LH	Terrain/jasper/jpc/jpc_tsfb.h	94;"	d
JPC_TSFB_LL	Terrain/jasper/jpc/jpc_tsfb.h	93;"	d
JPC_TSFB_MAXBANDS	Terrain/jasper/jpc/jpc_tsfb.h	89;"	d
JPC_TSFB_MAXDEPTH	Terrain/jasper/jpc/jpc_tsfb.h	90;"	d
JPC_TSFB_RITIMODE	Terrain/jasper/jpc/jpc_tsfb.h	91;"	d
JPC_UCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	169;"	d
JPC_UPDATEFLAGS4	Terrain/jasper/jpc/jpc_t1cod.h	237;"	d
JPC_VISIT	Terrain/jasper/jpc/jpc_t1cod.h	147;"	d
JPC_WSGN	Terrain/jasper/jpc/jpc_t1cod.h	138;"	d
JPC_WSIG	Terrain/jasper/jpc/jpc_t1cod.h	124;"	d
JPC_ZCCTXNO	Terrain/jasper/jpc/jpc_t1cod.h	163;"	d
JSON	JSON/GeoWriter.hpp	/^namespace JSON {$/;"	n
JSON	JSON/Writer.hpp	/^namespace JSON {$/;"	n
Java	Java/Class.hxx	/^namespace Java {$/;"	n
Java	Java/Exception.hxx	/^namespace Java {$/;"	n
Java	Java/File.hxx	/^namespace Java {$/;"	n
Java	Java/Global.cxx	/^namespace Java {$/;"	n	file:
Java	Java/Global.hxx	/^namespace Java {$/;"	n
Java	Java/InputStream.hxx	/^namespace Java {$/;"	n
Java	Java/Object.hxx	/^namespace Java {$/;"	n
Java	Java/Ref.hxx	/^namespace Java {$/;"	n
Java	Java/String.hxx	/^namespace Java {$/;"	n
Java	Java/URL.hxx	/^namespace Java {$/;"	n
Java_org_xcsoar_BatteryReceiver_setBatteryPercent	Android/Battery.cpp	/^Java_org_xcsoar_BatteryReceiver_setBatteryPercent(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_DownloadUtil_onDownloadAdded	Android/DownloadManager.cpp	/^Java_org_xcsoar_DownloadUtil_onDownloadAdded(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_DownloadUtil_onDownloadComplete	Android/DownloadManager.cpp	/^Java_org_xcsoar_DownloadUtil_onDownloadComplete(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onKeyDown	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onKeyDown(JNIEnv *env, jclass cls, jint key_code)$/;"	f
Java_org_xcsoar_EventBridge_onKeyUp	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onKeyUp(JNIEnv *env, jclass cls, jint key_code)$/;"	f
Java_org_xcsoar_EventBridge_onMouseDown	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onMouseDown(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onMouseMove	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onMouseMove(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onMouseUp	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onMouseUp(JNIEnv *env, jclass cls,$/;"	f
Java_org_xcsoar_EventBridge_onPointerDown	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onPointerDown(JNIEnv *env, jclass cls)$/;"	f
Java_org_xcsoar_EventBridge_onPointerUp	Android/EventBridge.cpp	/^Java_org_xcsoar_EventBridge_onPointerUp(JNIEnv *env, jclass cls)$/;"	f
Java_org_xcsoar_GliderLinkReceiver_setGliderLinkInfo	Android/GliderLink.cpp	/^Java_org_xcsoar_GliderLinkReceiver_setGliderLinkInfo($/;"	f
Java_org_xcsoar_InternalGPS_setConnected	Android/InternalSensors.cpp	/^Java_org_xcsoar_InternalGPS_setConnected(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_InternalGPS_setLocation	Android/InternalSensors.cpp	/^Java_org_xcsoar_InternalGPS_setLocation(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeBMP085Listener_onBMP085Error	Android/NativeBMP085Listener.cpp	/^Java_org_xcsoar_NativeBMP085Listener_onBMP085Error(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeBMP085Listener_onBMP085Values	Android/NativeBMP085Listener.cpp	/^Java_org_xcsoar_NativeBMP085Listener_onBMP085Values(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroError	Android/NativeI2CbaroListener.cpp	/^Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroError(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroValues	Android/NativeI2CbaroListener.cpp	/^Java_org_xcsoar_NativeI2CbaroListener_onI2CbaroValues(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeInputListener_dataReceived	Android/NativeInputListener.cpp	/^Java_org_xcsoar_NativeInputListener_dataReceived(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeLeScanCallback_onLeScan	Android/NativeLeScanCallback.cpp	/^Java_org_xcsoar_NativeLeScanCallback_onLeScan(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeNunchuckListener_onNunchuckError	Android/NativeNunchuckListener.cpp	/^Java_org_xcsoar_NativeNunchuckListener_onNunchuckError(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeNunchuckListener_onNunchuckValues	Android/NativeNunchuckListener.cpp	/^Java_org_xcsoar_NativeNunchuckListener_onNunchuckValues(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativePortListener_portError	Android/NativePortListener.cpp	/^Java_org_xcsoar_NativePortListener_portError(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativePortListener_portStateChanged	Android/NativePortListener.cpp	/^Java_org_xcsoar_NativePortListener_portStateChanged(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_deinitializeNative	Android/Main.cpp	/^Java_org_xcsoar_NativeView_deinitializeNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_getEglContextClientVersion	Android/Main.cpp	/^Java_org_xcsoar_NativeView_getEglContextClientVersion(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_initializeNative	Android/Main.cpp	/^Java_org_xcsoar_NativeView_initializeNative(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeView_pauseNative	Android/Main.cpp	/^Java_org_xcsoar_NativeView_pauseNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_resizedNative	Android/Main.cpp	/^Java_org_xcsoar_NativeView_resizedNative(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeView_resumeNative	Android/Main.cpp	/^Java_org_xcsoar_NativeView_resumeNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_runNative	Android/Main.cpp	/^Java_org_xcsoar_NativeView_runNative(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeView_setHapticFeedback	Android/Main.cpp	/^Java_org_xcsoar_NativeView_setHapticFeedback(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NativeVoltageListener_onVoltageError	Android/NativeVoltageListener.cpp	/^Java_org_xcsoar_NativeVoltageListener_onVoltageError(JNIEnv *env, jobject obj)$/;"	f
Java_org_xcsoar_NativeVoltageListener_onVoltageValues	Android/NativeVoltageListener.cpp	/^Java_org_xcsoar_NativeVoltageListener_onVoltageValues(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setAcceleration	Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setAcceleration(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setBarometricPressure	Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setBarometricPressure(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setMagneticField	Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setMagneticField(JNIEnv *env, jobject obj,$/;"	f
Java_org_xcsoar_NonGPSSensors_setRotation	Android/InternalSensors.cpp	/^Java_org_xcsoar_NonGPSSensors_setRotation(JNIEnv *env, jobject obj,$/;"	f
Job	Job/Job.hpp	/^class Job {$/;"	c
JobDialog	Dialogs/JobDialog.cpp	/^JobDialog(SingleWindow &parent, const DialogLook &dialog_look,$/;"	f
JobRunner	Job/Runner.hpp	/^class JobRunner {$/;"	c
JobThread	Job/Thread.hpp	/^  JobThread(OperationEnvironment &_env, Job &_job)$/;"	f	class:JobThread
JobThread	Job/Thread.hpp	/^class JobThread : protected Thread, protected ThreadedOperationEnvironment {$/;"	c
Join	Job/Thread.cpp	/^JobThread::Join()$/;"	f	class:JobThread
JpegErrorExit	Screen/Custom/LibJPEG.cpp	/^JpegErrorExit(j_common_ptr cinfo)$/;"	f	file:
K6Bt	Dialogs/Device/DeviceEditWidget.cpp	/^  K6Bt,$/;"	e	enum:ControlIndex	file:
K6BtPort	Device/Port/K6BtPort.cpp	/^K6BtPort::K6BtPort(Port *_port, unsigned _baud_rate,$/;"	f	class:K6BtPort
K6BtPort	Device/Port/K6BtPort.hpp	/^class K6BtPort : public Port {$/;"	c
KELVIN	Units/Unit.hpp	/^  KELVIN,$/;"	m	class:Unit
KEYCODE_0	Android/EventBridge.cpp	/^  KEYCODE_0 = 0x07,$/;"	e	enum:__anon15	file:
KEYCODE_9	Android/EventBridge.cpp	/^  KEYCODE_9 = 0x10,$/;"	e	enum:__anon15	file:
KEYCODE_A	Android/EventBridge.cpp	/^  KEYCODE_A = 0x1d,$/;"	e	enum:__anon15	file:
KEYCODE_BACK	Android/EventBridge.cpp	/^  KEYCODE_BACK = 0x04,$/;"	e	enum:__anon15	file:
KEYCODE_BUTTON_A	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_A = 0x60,$/;"	e	enum:__anon4
KEYCODE_BUTTON_B	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_B = 0x61,$/;"	e	enum:__anon4
KEYCODE_BUTTON_C	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_C = 0x62,$/;"	e	enum:__anon4
KEYCODE_BUTTON_L1	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_L1 = 0x66,$/;"	e	enum:__anon4
KEYCODE_BUTTON_L2	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_L2 = 0x68,$/;"	e	enum:__anon4
KEYCODE_BUTTON_R1	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_R1 = 0x67,$/;"	e	enum:__anon4
KEYCODE_BUTTON_R2	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_R2 = 0x69,$/;"	e	enum:__anon4
KEYCODE_BUTTON_X	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_X = 0x63,$/;"	e	enum:__anon4
KEYCODE_BUTTON_Y	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_Y = 0x64,$/;"	e	enum:__anon4
KEYCODE_BUTTON_Z	Event/Android/KeyCode.hpp	/^  KEYCODE_BUTTON_Z = 0x65,$/;"	e	enum:__anon4
KEYCODE_DPAD_DOWN	Android/EventBridge.cpp	/^static constexpr unsigned KEYCODE_DPAD_DOWN = 0x14;$/;"	v	file:
KEYCODE_DPAD_UP	Android/EventBridge.cpp	/^static constexpr unsigned KEYCODE_DPAD_UP = 0x13;$/;"	v	file:
KEYCODE_ESCAPE	Android/EventBridge.cpp	/^  KEYCODE_ESCAPE = 0x6f,$/;"	e	enum:__anon15	file:
KEYCODE_MEDIA_NEXT	Event/Android/KeyCode.hpp	/^  KEYCODE_MEDIA_NEXT = 0x57,$/;"	e	enum:__anon4
KEYCODE_MEDIA_PLAY_PAUSE	Event/Android/KeyCode.hpp	/^  KEYCODE_MEDIA_PLAY_PAUSE = 0x55,$/;"	e	enum:__anon4
KEYCODE_MEDIA_PREVIOUS	Event/Android/KeyCode.hpp	/^  KEYCODE_MEDIA_PREVIOUS = 0x58,$/;"	e	enum:__anon4
KEYCODE_Z	Android/EventBridge.cpp	/^  KEYCODE_Z = 0x36,$/;"	e	enum:__anon15	file:
KEYHOLEZONE_HPP	Engine/Task/ObservationZones/KeyholeZone.hpp	25;"	d
KEYHOLE_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  KEYHOLE_SECTOR,$/;"	m	class:TaskPointFactoryType
KEY_APP1	Event/Android/KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon4
KEY_APP1	Event/Poll/Linux/KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon6
KEY_APP1	Event/Poll/X11KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon5
KEY_APP1	Event/SDL/KeyCode.hpp	/^  KEY_APP1,$/;"	e	enum:__anon2
KEY_APP1	Event/Windows/KeyCode.hpp	/^  KEY_APP1 = '1',$/;"	e	enum:__anon8
KEY_APP2	Event/Android/KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon4
KEY_APP2	Event/Poll/Linux/KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon6
KEY_APP2	Event/Poll/X11KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon5
KEY_APP2	Event/SDL/KeyCode.hpp	/^  KEY_APP2,$/;"	e	enum:__anon2
KEY_APP2	Event/Windows/KeyCode.hpp	/^  KEY_APP2 = '2',$/;"	e	enum:__anon8
KEY_APP3	Event/Android/KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon4
KEY_APP3	Event/Poll/Linux/KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon6
KEY_APP3	Event/Poll/X11KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon5
KEY_APP3	Event/SDL/KeyCode.hpp	/^  KEY_APP3,$/;"	e	enum:__anon2
KEY_APP3	Event/Windows/KeyCode.hpp	/^  KEY_APP3 = '3',$/;"	e	enum:__anon8
KEY_APP4	Event/Android/KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon4
KEY_APP4	Event/Poll/Linux/KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon6
KEY_APP4	Event/Poll/X11KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon5
KEY_APP4	Event/SDL/KeyCode.hpp	/^  KEY_APP4,$/;"	e	enum:__anon2
KEY_APP4	Event/Windows/KeyCode.hpp	/^  KEY_APP4 = '4',$/;"	e	enum:__anon8
KEY_APP5	Event/Android/KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon4
KEY_APP5	Event/Poll/Linux/KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon6
KEY_APP5	Event/Poll/X11KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon5
KEY_APP5	Event/SDL/KeyCode.hpp	/^  KEY_APP5,$/;"	e	enum:__anon2
KEY_APP5	Event/Windows/KeyCode.hpp	/^  KEY_APP5 = '5',$/;"	e	enum:__anon8
KEY_APP6	Event/Android/KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon4
KEY_APP6	Event/Poll/Linux/KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon6
KEY_APP6	Event/Poll/X11KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon5
KEY_APP6	Event/SDL/KeyCode.hpp	/^  KEY_APP6,$/;"	e	enum:__anon2
KEY_APP6	Event/Windows/KeyCode.hpp	/^  KEY_APP6 = '6',$/;"	e	enum:__anon8
KEY_BACK	Event/Android/KeyCode.hpp	/^  KEY_BACK,$/;"	e	enum:__anon4
KEY_BACK	Event/Poll/Linux/KeyCode.hpp	/^  KEY_BACK = KEY_BACKSPACE,$/;"	e	enum:__anon6
KEY_BACK	Event/Poll/Linux/KeyCode.hpp	36;"	d
KEY_BACK	Event/Poll/X11KeyCode.hpp	/^  KEY_BACK = XK_BackSpace,$/;"	e	enum:__anon5
KEY_BACK	Event/SDL/KeyCode.hpp	/^  KEY_BACK = SDLK_BACKSPACE,$/;"	e	enum:__anon2
KEY_BACK	Event/Windows/KeyCode.hpp	/^  KEY_BACK = VK_BACK,$/;"	e	enum:__anon8
KEY_DOWN	Event/Android/KeyCode.hpp	/^  KEY_DOWN = 0x14,$/;"	e	enum:__anon4
KEY_DOWN	Event/Poll/Linux/KeyCode.hpp	/^  KEY_DOWN = 108,$/;"	e	enum:__anon6
KEY_DOWN	Event/Poll/Linux/KeyCode.hpp	32;"	d
KEY_DOWN	Event/Poll/Linux/Translate.hpp	100;"	d
KEY_DOWN	Event/Poll/X11KeyCode.hpp	/^  KEY_DOWN = XK_Down,$/;"	e	enum:__anon5
KEY_DOWN	Event/SDL/KeyCode.hpp	/^  KEY_DOWN = SDLK_DOWN,$/;"	e	enum:__anon2
KEY_DOWN	Event/Shared/Event.hpp	/^    KEY_DOWN,$/;"	e	enum:Event::Type
KEY_DOWN	Event/Windows/KeyCode.hpp	/^  KEY_DOWN = VK_DOWN,$/;"	e	enum:__anon8
KEY_DUMMY	Event/Android/KeyCode.hpp	/^  KEY_DUMMY = 0x80,$/;"	e	enum:__anon4
KEY_END	Event/Android/KeyCode.hpp	/^  KEY_END,$/;"	e	enum:__anon4
KEY_END	Event/Poll/X11KeyCode.hpp	/^  KEY_END = XK_End,$/;"	e	enum:__anon5
KEY_END	Event/SDL/KeyCode.hpp	/^  KEY_END = SDLK_END,$/;"	e	enum:__anon2
KEY_END	Event/Windows/KeyCode.hpp	/^  KEY_END = VK_END,$/;"	e	enum:__anon8
KEY_ESCAPE	Event/Android/KeyCode.hpp	/^  KEY_ESCAPE = 0x6f,$/;"	e	enum:__anon4
KEY_ESCAPE	Event/Poll/Linux/KeyCode.hpp	/^  KEY_ESCAPE = KEY_ESC,$/;"	e	enum:__anon6
KEY_ESCAPE	Event/Poll/X11KeyCode.hpp	/^  KEY_ESCAPE = XK_Escape,$/;"	e	enum:__anon5
KEY_ESCAPE	Event/SDL/KeyCode.hpp	/^  KEY_ESCAPE = SDLK_ESCAPE,$/;"	e	enum:__anon2
KEY_ESCAPE	Event/Windows/KeyCode.hpp	/^  KEY_ESCAPE = VK_ESCAPE,$/;"	e	enum:__anon8
KEY_F1	Event/Android/KeyCode.hpp	/^  KEY_F1 = 0x83,$/;"	e	enum:__anon4
KEY_F1	Event/Poll/X11KeyCode.hpp	/^  KEY_F1 = XK_F1,$/;"	e	enum:__anon5
KEY_F1	Event/SDL/KeyCode.hpp	/^  KEY_F1 = SDLK_F1,$/;"	e	enum:__anon2
KEY_F1	Event/Windows/KeyCode.hpp	/^  KEY_F1 = VK_F1,$/;"	e	enum:__anon8
KEY_F10	Event/Android/KeyCode.hpp	/^  KEY_F10 = 0x8c,$/;"	e	enum:__anon4
KEY_F10	Event/Poll/X11KeyCode.hpp	/^  KEY_F10 = XK_F10,$/;"	e	enum:__anon5
KEY_F10	Event/SDL/KeyCode.hpp	/^  KEY_F10 = SDLK_F10,$/;"	e	enum:__anon2
KEY_F10	Event/Windows/KeyCode.hpp	/^  KEY_F10 = VK_F10,$/;"	e	enum:__anon8
KEY_F11	Event/Android/KeyCode.hpp	/^  KEY_F11 = 0x8d,$/;"	e	enum:__anon4
KEY_F11	Event/Poll/X11KeyCode.hpp	/^  KEY_F11 = XK_F11,$/;"	e	enum:__anon5
KEY_F11	Event/SDL/KeyCode.hpp	/^  KEY_F11 = SDLK_F11,$/;"	e	enum:__anon2
KEY_F11	Event/Windows/KeyCode.hpp	/^  KEY_F11 = VK_F11,$/;"	e	enum:__anon8
KEY_F12	Event/Android/KeyCode.hpp	/^  KEY_F12 = 0x8e,$/;"	e	enum:__anon4
KEY_F12	Event/Poll/X11KeyCode.hpp	/^  KEY_F12 = XK_F12,$/;"	e	enum:__anon5
KEY_F12	Event/SDL/KeyCode.hpp	/^  KEY_F12 = SDLK_F12,$/;"	e	enum:__anon2
KEY_F12	Event/Windows/KeyCode.hpp	/^  KEY_F12 = VK_F12,$/;"	e	enum:__anon8
KEY_F13	Event/Windows/KeyCode.hpp	/^  KEY_F13 = VK_F13,$/;"	e	enum:__anon8
KEY_F14	Event/Windows/KeyCode.hpp	/^  KEY_F14 = VK_F14,$/;"	e	enum:__anon8
KEY_F15	Event/Windows/KeyCode.hpp	/^  KEY_F15 = VK_F15,$/;"	e	enum:__anon8
KEY_F16	Event/Windows/KeyCode.hpp	/^  KEY_F16 = VK_F16,$/;"	e	enum:__anon8
KEY_F17	Event/Windows/KeyCode.hpp	/^  KEY_F17 = VK_F17,$/;"	e	enum:__anon8
KEY_F18	Event/Windows/KeyCode.hpp	/^  KEY_F18 = VK_F18,$/;"	e	enum:__anon8
KEY_F19	Event/Windows/KeyCode.hpp	/^  KEY_F19 = VK_F19,$/;"	e	enum:__anon8
KEY_F2	Event/Android/KeyCode.hpp	/^  KEY_F2 = 0x84,$/;"	e	enum:__anon4
KEY_F2	Event/Poll/X11KeyCode.hpp	/^  KEY_F2 = XK_F2,$/;"	e	enum:__anon5
KEY_F2	Event/SDL/KeyCode.hpp	/^  KEY_F2 = SDLK_F2,$/;"	e	enum:__anon2
KEY_F2	Event/Windows/KeyCode.hpp	/^  KEY_F2 = VK_F2,$/;"	e	enum:__anon8
KEY_F20	Event/Windows/KeyCode.hpp	/^  KEY_F20 = VK_F20,$/;"	e	enum:__anon8
KEY_F3	Event/Android/KeyCode.hpp	/^  KEY_F3 = 0x85,$/;"	e	enum:__anon4
KEY_F3	Event/Poll/X11KeyCode.hpp	/^  KEY_F3 = XK_F3,$/;"	e	enum:__anon5
KEY_F3	Event/SDL/KeyCode.hpp	/^  KEY_F3 = SDLK_F3,$/;"	e	enum:__anon2
KEY_F3	Event/Windows/KeyCode.hpp	/^  KEY_F3 = VK_F3,$/;"	e	enum:__anon8
KEY_F4	Event/Android/KeyCode.hpp	/^  KEY_F4 = 0x86,$/;"	e	enum:__anon4
KEY_F4	Event/Poll/X11KeyCode.hpp	/^  KEY_F4 = XK_F4,$/;"	e	enum:__anon5
KEY_F4	Event/SDL/KeyCode.hpp	/^  KEY_F4 = SDLK_F4,$/;"	e	enum:__anon2
KEY_F4	Event/Windows/KeyCode.hpp	/^  KEY_F4 = VK_F4,$/;"	e	enum:__anon8
KEY_F5	Event/Android/KeyCode.hpp	/^  KEY_F5 = 0x87,$/;"	e	enum:__anon4
KEY_F5	Event/Poll/X11KeyCode.hpp	/^  KEY_F5 = XK_F5,$/;"	e	enum:__anon5
KEY_F5	Event/SDL/KeyCode.hpp	/^  KEY_F5 = SDLK_F5,$/;"	e	enum:__anon2
KEY_F5	Event/Windows/KeyCode.hpp	/^  KEY_F5 = VK_F5,$/;"	e	enum:__anon8
KEY_F6	Event/Android/KeyCode.hpp	/^  KEY_F6 = 0x88,$/;"	e	enum:__anon4
KEY_F6	Event/Poll/X11KeyCode.hpp	/^  KEY_F6 = XK_F6,$/;"	e	enum:__anon5
KEY_F6	Event/SDL/KeyCode.hpp	/^  KEY_F6 = SDLK_F6,$/;"	e	enum:__anon2
KEY_F6	Event/Windows/KeyCode.hpp	/^  KEY_F6 = VK_F6,$/;"	e	enum:__anon8
KEY_F7	Event/Android/KeyCode.hpp	/^  KEY_F7 = 0x89,$/;"	e	enum:__anon4
KEY_F7	Event/Poll/X11KeyCode.hpp	/^  KEY_F7 = XK_F7,$/;"	e	enum:__anon5
KEY_F7	Event/SDL/KeyCode.hpp	/^  KEY_F7 = SDLK_F7,$/;"	e	enum:__anon2
KEY_F7	Event/Windows/KeyCode.hpp	/^  KEY_F7 = VK_F7,$/;"	e	enum:__anon8
KEY_F8	Event/Android/KeyCode.hpp	/^  KEY_F8 = 0x8a,$/;"	e	enum:__anon4
KEY_F8	Event/Poll/X11KeyCode.hpp	/^  KEY_F8 = XK_F8,$/;"	e	enum:__anon5
KEY_F8	Event/SDL/KeyCode.hpp	/^  KEY_F8 = SDLK_F8,$/;"	e	enum:__anon2
KEY_F8	Event/Windows/KeyCode.hpp	/^  KEY_F8 = VK_F8,$/;"	e	enum:__anon8
KEY_F9	Event/Android/KeyCode.hpp	/^  KEY_F9 = 0x8b,$/;"	e	enum:__anon4
KEY_F9	Event/Poll/X11KeyCode.hpp	/^  KEY_F9 = XK_F9,$/;"	e	enum:__anon5
KEY_F9	Event/SDL/KeyCode.hpp	/^  KEY_F9 = SDLK_F9,$/;"	e	enum:__anon2
KEY_F9	Event/Windows/KeyCode.hpp	/^  KEY_F9 = VK_F9,$/;"	e	enum:__anon8
KEY_HOME	Event/Android/KeyCode.hpp	/^  KEY_HOME,$/;"	e	enum:__anon4
KEY_HOME	Event/Poll/X11KeyCode.hpp	/^  KEY_HOME = XK_Home,$/;"	e	enum:__anon5
KEY_HOME	Event/SDL/KeyCode.hpp	/^  KEY_HOME = SDLK_HOME,$/;"	e	enum:__anon2
KEY_HOME	Event/Windows/KeyCode.hpp	/^  KEY_HOME = VK_HOME,$/;"	e	enum:__anon8
KEY_LEFT	Event/Android/KeyCode.hpp	/^  KEY_LEFT = 0x15,$/;"	e	enum:__anon4
KEY_LEFT	Event/Poll/X11KeyCode.hpp	/^  KEY_LEFT = XK_Left,$/;"	e	enum:__anon5
KEY_LEFT	Event/SDL/KeyCode.hpp	/^  KEY_LEFT = SDLK_LEFT,$/;"	e	enum:__anon2
KEY_LEFT	Event/Windows/KeyCode.hpp	/^  KEY_LEFT = VK_LEFT,$/;"	e	enum:__anon8
KEY_MENU	Event/Android/KeyCode.hpp	/^  KEY_MENU = 0x52,$/;"	e	enum:__anon4
KEY_MENU	Event/Poll/X11KeyCode.hpp	/^  KEY_MENU = XK_Menu,$/;"	e	enum:__anon5
KEY_MENU	Event/SDL/KeyCode.hpp	/^  KEY_MENU = SDLK_MENU,$/;"	e	enum:__anon2
KEY_MENU	Event/Windows/KeyCode.hpp	/^  KEY_MENU = VK_MENU,$/;"	e	enum:__anon8
KEY_NEXT	Event/Android/KeyCode.hpp	/^  KEY_NEXT,$/;"	e	enum:__anon4
KEY_NEXT	Event/Poll/Linux/KeyCode.hpp	/^  KEY_NEXT = KEY_PAGEDOWN,$/;"	e	enum:__anon6
KEY_NEXT	Event/Poll/Linux/KeyCode.hpp	35;"	d
KEY_NEXT	Event/Poll/Linux/Translate.hpp	103;"	d
KEY_NEXT	Event/Poll/X11KeyCode.hpp	/^  KEY_NEXT = XK_Page_Down,$/;"	e	enum:__anon5
KEY_NEXT	Event/SDL/KeyCode.hpp	/^  KEY_NEXT = SDLK_PAGEDOWN,$/;"	e	enum:__anon2
KEY_NEXT	Event/Windows/KeyCode.hpp	/^  KEY_NEXT = VK_NEXT,$/;"	e	enum:__anon8
KEY_PRIOR	Event/Android/KeyCode.hpp	/^  KEY_PRIOR,$/;"	e	enum:__anon4
KEY_PRIOR	Event/Poll/Linux/KeyCode.hpp	/^  KEY_PRIOR = KEY_PAGEUP,$/;"	e	enum:__anon6
KEY_PRIOR	Event/Poll/X11KeyCode.hpp	/^  KEY_PRIOR = XK_Page_Up,$/;"	e	enum:__anon5
KEY_PRIOR	Event/SDL/KeyCode.hpp	/^  KEY_PRIOR = SDLK_PAGEUP,$/;"	e	enum:__anon2
KEY_PRIOR	Event/Windows/KeyCode.hpp	/^  KEY_PRIOR = VK_PRIOR,$/;"	e	enum:__anon8
KEY_RETURN	Event/Android/KeyCode.hpp	/^  KEY_RETURN = 0x42,$/;"	e	enum:__anon4
KEY_RETURN	Event/Poll/Linux/KeyCode.hpp	/^  KEY_RETURN = KEY_ENTER,$/;"	e	enum:__anon6
KEY_RETURN	Event/Poll/X11KeyCode.hpp	/^  KEY_RETURN = XK_Return,$/;"	e	enum:__anon5
KEY_RETURN	Event/SDL/KeyCode.hpp	/^  KEY_RETURN = SDLK_RETURN,$/;"	e	enum:__anon2
KEY_RETURN	Event/Windows/KeyCode.hpp	/^  KEY_RETURN = VK_RETURN,$/;"	e	enum:__anon8
KEY_RIGHT	Event/Android/KeyCode.hpp	/^  KEY_RIGHT = 0x16,$/;"	e	enum:__anon4
KEY_RIGHT	Event/Poll/X11KeyCode.hpp	/^  KEY_RIGHT = XK_Right,$/;"	e	enum:__anon5
KEY_RIGHT	Event/SDL/KeyCode.hpp	/^  KEY_RIGHT = SDLK_RIGHT,$/;"	e	enum:__anon2
KEY_RIGHT	Event/Windows/KeyCode.hpp	/^  KEY_RIGHT = VK_RIGHT,$/;"	e	enum:__anon8
KEY_SPACE	Event/Android/KeyCode.hpp	/^  KEY_SPACE = 0x3e,$/;"	e	enum:__anon4
KEY_SPACE	Event/Poll/X11KeyCode.hpp	/^  KEY_SPACE = XK_space,$/;"	e	enum:__anon5
KEY_SPACE	Event/SDL/KeyCode.hpp	/^  KEY_SPACE = SDLK_SPACE,$/;"	e	enum:__anon2
KEY_SPACE	Event/Windows/KeyCode.hpp	/^  KEY_SPACE = VK_SPACE,$/;"	e	enum:__anon8
KEY_TAB	Event/Android/KeyCode.hpp	/^  KEY_TAB = 0x3d,$/;"	e	enum:__anon4
KEY_TAB	Event/Poll/X11KeyCode.hpp	/^  KEY_TAB = XK_Tab,$/;"	e	enum:__anon5
KEY_TAB	Event/SDL/KeyCode.hpp	/^  KEY_TAB = SDLK_TAB,$/;"	e	enum:__anon2
KEY_TAB	Event/Windows/KeyCode.hpp	/^  KEY_TAB = VK_TAB,$/;"	e	enum:__anon8
KEY_UP	Event/Android/KeyCode.hpp	/^  KEY_UP = 0x13,$/;"	e	enum:__anon4
KEY_UP	Event/Poll/Linux/KeyCode.hpp	/^  KEY_UP = 103,$/;"	e	enum:__anon6
KEY_UP	Event/Poll/Linux/KeyCode.hpp	31;"	d
KEY_UP	Event/Poll/Linux/Translate.hpp	99;"	d
KEY_UP	Event/Poll/X11KeyCode.hpp	/^  KEY_UP = XK_Up,$/;"	e	enum:__anon5
KEY_UP	Event/SDL/KeyCode.hpp	/^  KEY_UP = SDLK_UP,$/;"	e	enum:__anon2
KEY_UP	Event/Shared/Event.hpp	/^    KEY_UP,$/;"	e	enum:Event::Type
KEY_UP	Event/Windows/KeyCode.hpp	/^  KEY_UP = VK_UP,$/;"	e	enum:__anon8
KExt	Device/Driver/LX/LXN.hpp	/^  struct KExt {$/;"	s	namespace:LXN
KG	Units/Unit.hpp	/^  KG,$/;"	m	class:Unit
KG_PER_M2	Units/Unit.hpp	/^  KG_PER_M2,$/;"	m	class:Unit
KILOMETER	Units/Unit.hpp	/^  KILOMETER,$/;"	m	class:Unit
KILOMETER_PER_HOUR	Units/Unit.hpp	/^  KILOMETER_PER_HOUR,$/;"	m	class:Unit
KINETIC_MANAGER_HPP	UIUtil/KineticManager.hpp	31;"	d
KITESURF	Tracking/LiveTrack24.hpp	/^    KITESURF = 16501,$/;"	m	class:LiveTrack24::VehicleType
KM500	Engine/Task/Shapes/FAITriangleSettings.hpp	/^    KM500,$/;"	m	class:FAITriangleSettings::Threshold
KNOTS	Units/Unit.hpp	/^  KNOTS,$/;"	m	class:Unit
KOBO_USER_DATA	LocalPath.cpp	81;"	d	file:
KOORD	Device/Driver/Volkslogger/vlconv.cpp	/^  KOORD()$/;"	f	class:KOORD
KOORD	Device/Driver/Volkslogger/vlconv.cpp	/^class KOORD$/;"	c	file:
KRT2CreateOnPort	Device/Driver/KRT2.cpp	/^KRT2CreateOnPort(const DeviceConfig &config, Port &comPort)$/;"	f	file:
KRT2Device	Device/Driver/KRT2.cpp	/^KRT2Device::KRT2Device(Port &_port)$/;"	f	class:KRT2Device
K_EXT	Device/Driver/LX/LXN.hpp	/^    K_EXT = 0xfa,$/;"	e	enum:LXN::Command
K_EXT_CONFIG	Device/Driver/LX/LXN.hpp	/^    K_EXT_CONFIG = 0xfe, \/* 'J': extensions in the 'K' record *\/$/;"	e	enum:LXN::Command
KalmanFilter1d	Math/KalmanFilter1d.cpp	/^KalmanFilter1d::KalmanFilter1d()$/;"	f	class:KalmanFilter1d
KalmanFilter1d	Math/KalmanFilter1d.cpp	/^KalmanFilter1d::KalmanFilter1d(const double var_x_accel)$/;"	f	class:KalmanFilter1d
KalmanFilter1d	Math/KalmanFilter1d.hpp	/^class KalmanFilter1d {$/;"	c
KelvinToCelsius	Atmosphere/Temperature.hpp	/^KelvinToCelsius(double kelvin)$/;"	f
Key2Event	Input/InputConfig.hpp	/^  unsigned short Key2Event[MAX_MODE][MAX_KEY];		\/\/ Points to Events location$/;"	m	struct:InputConfig
Key2EventFF00	Input/InputConfig.hpp	/^  unsigned short Key2EventFF00[MAX_MODE][MAX_KEY];$/;"	m	struct:InputConfig
Key2EventNonChar	Input/InputConfig.hpp	/^  unsigned short Key2EventNonChar[MAX_MODE][MAX_KEY];$/;"	m	struct:InputConfig
KeyDownFunction	Form/Form.hpp	/^  typedef std::function<bool(unsigned)> KeyDownFunction;$/;"	t	class:WndForm
KeyEqual	Cloud/Client.hpp	/^  struct KeyEqual {$/;"	s	struct:CloudClient
KeyHash	Cloud/Client.hpp	/^  struct KeyHash {$/;"	s	struct:CloudClient
KeyMap	Util/Cache.hxx	/^						boost::intrusive::constant_time_size<false>> KeyMap;$/;"	t	class:Cache
KeyPress	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::KeyPress(unsigned key_code)$/;"	f	class:TaskManagerDialog
KeyPress	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::KeyPress(unsigned key_code)$/;"	f	class:TargetWidget
KeyPress	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::KeyPress(unsigned key_code)$/;"	f	class:WaypointDetailsWidget
KeyPress	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::KeyPress(unsigned key_code)$/;"	f	class:AnalysisWidget
KeyPress	Dialogs/dlgQuickMenu.cpp	/^QuickMenu::KeyPress(unsigned key_code)$/;"	f	class:QuickMenu
KeyPress	Form/ButtonPanel.cpp	/^ButtonPanel::KeyPress(unsigned key_code)$/;"	f	class:ButtonPanel
KeyPress	Kobo/KoboMenu.cpp	/^KoboMenuWidget::KeyPress(unsigned key_code)$/;"	f	class:KoboMenuWidget
KeyPress	Screen/Custom/TopCanvas.hpp	63;"	d
KeyPress	Screen/TopWindow.hpp	73;"	d
KeyPress	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::KeyPress(unsigned key_code)$/;"	f	class:ArrowPagerWidget
KeyPress	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::KeyPress(unsigned key_code)$/;"	f	class:ButtonPanelWidget
KeyPress	Widget/LargeTextWidget.cpp	/^LargeTextWidget::KeyPress(unsigned key_code)$/;"	f	class:LargeTextWidget
KeyPress	Widget/ManagedWidget.cpp	/^ManagedWidget::KeyPress(unsigned key_code)$/;"	f	class:ManagedWidget
KeyPress	Widget/PagerWidget.cpp	/^PagerWidget::KeyPress(unsigned key_code)$/;"	f	class:PagerWidget
KeyPress	Widget/SolidWidget.cpp	/^SolidWidget::KeyPress(unsigned key_code)$/;"	f	class:SolidWidget
KeyPress	Widget/TabWidget.cpp	/^TabWidget::KeyPress(unsigned key_code)$/;"	f	class:TabWidget
KeyPress	Widget/TwoWidgets.cpp	/^TwoWidgets::KeyPress(unsigned key_code)$/;"	f	class:TwoWidgets
KeyPress	Widget/Widget.cpp	/^NullWidget::KeyPress(unsigned key_code)$/;"	f	class:NullWidget
KeySet	Cloud/Client.hpp	/^                                          boost::intrusive::constant_time_size<false>> KeySet;$/;"	t	class:CloudClientContainer
KeyValueFileReader	IO/KeyValueFileReader.hpp	/^  KeyValueFileReader(NLineReader &_reader):reader(_reader) {}$/;"	f	class:KeyValueFileReader
KeyValueFileReader	IO/KeyValueFileReader.hpp	/^class KeyValueFileReader$/;"	c
KeyValueFileWriter	IO/KeyValueFileWriter.hpp	/^  explicit KeyValueFileWriter(BufferedOutputStream &_os):os(_os) {}$/;"	f	class:KeyValueFileWriter
KeyValueFileWriter	IO/KeyValueFileWriter.hpp	/^class KeyValueFileWriter {$/;"	c
KeyValuePair	IO/KeyValueFileReader.hpp	/^struct KeyValuePair$/;"	s
KeyVisitorAdapter	Util/RadixTree.hpp	/^    KeyVisitorAdapter(V &_visitor, const TCHAR *_key)$/;"	f	struct:RadixTree::KeyVisitorAdapter
KeyVisitorAdapter	Util/RadixTree.hpp	/^  struct KeyVisitorAdapter {$/;"	s	class:RadixTree
Keyboard	Dialogs/DialogSettings.hpp	/^    Keyboard,$/;"	m	class:DialogSettings::TextInputStyle
KeyboardWidget	Widget/KeyboardWidget.hpp	/^  KeyboardWidget(const ButtonLook &_look,$/;"	f	class:KeyboardWidget
KeyboardWidget	Widget/KeyboardWidget.hpp	/^class KeyboardWidget : public NullWidget, ActionListener {$/;"	c
KeyholeZone	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  KeyholeZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:final
KeyholeZone	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  KeyholeZone(const KeyholeZone &other, const GeoPoint &reference)$/;"	f	class:final
KeyholeZoneEditWidget	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^KeyholeZoneEditWidget::KeyholeZoneEditWidget(KeyholeZone &_oz)$/;"	f	class:KeyholeZoneEditWidget
KeyholeZoneEditWidget	Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^class KeyholeZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
KillBottomWidget	MainWindow.cpp	/^MainWindow::KillBottomWidget()$/;"	f	class:MainWindow
KillWidget	MainWindow.cpp	/^MainWindow::KillWidget()$/;"	f	class:MainWindow
KineticManager	UIUtil/KineticManager.hpp	/^  KineticManager(int _stopping_time = 1000)$/;"	f	class:KineticManager
KineticManager	UIUtil/KineticManager.hpp	/^class KineticManager$/;"	c
KnobTextEntry	Dialogs/KnobTextEntry.cpp	/^KnobTextEntry(TCHAR *text, size_t width,$/;"	f
KnobTextEntryWidget	Dialogs/KnobTextEntry.cpp	/^  KnobTextEntryWidget(const TCHAR *text, size_t width)$/;"	f	class:final
KnobTextEntryWindow	Dialogs/KnobTextEntry.cpp	/^  KnobTextEntryWindow(const TCHAR *text, size_t width)$/;"	f	class:final
KoboExecNickel	Kobo/System.cpp	/^KoboExecNickel()$/;"	f
KoboExportUSBStorage	Kobo/System.cpp	/^KoboExportUSBStorage()$/;"	f
KoboInstallKernel	Kobo/Kernel.cpp	/^KoboInstallKernel(const char *uimage_path)$/;"	f
KoboMenuWidget	Kobo/KoboMenu.cpp	/^  KoboMenuWidget(const DialogLook &_look,$/;"	f	class:final
KoboModel	Kobo/Model.hpp	/^enum class KoboModel {$/;"	c
KoboMountData	Kobo/System.cpp	/^KoboMountData()$/;"	f
KoboPowerOff	Kobo/System.cpp	/^KoboPowerOff()$/;"	f
KoboReboot	Kobo/System.cpp	/^KoboReboot()$/;"	f
KoboRunFtpd	Kobo/System.cpp	/^KoboRunFtpd()$/;"	f
KoboRunTelnetd	Kobo/System.cpp	/^KoboRunTelnetd()$/;"	f
KoboRunXCSoar	Kobo/System.cpp	/^KoboRunXCSoar(const char *mode)$/;"	f
KoboUmountData	Kobo/System.cpp	/^KoboUmountData()$/;"	f
KoboUnexportUSBStorage	Kobo/System.cpp	/^KoboUnexportUSBStorage()$/;"	f
KoboWifiOff	Kobo/System.cpp	/^KoboWifiOff()$/;"	f
KoboWifiOn	Kobo/System.cpp	/^KoboWifiOn()$/;"	f
L	Lua/Assert.hxx	/^	lua_State *const L;$/;"	m	class:Lua::ScopeCheckStack
L	Lua/InputEvent.cpp	/^  lua_State *const L;$/;"	m	class:final	file:
L	Lua/Value.hxx	/^	lua_State *const L;$/;"	m	class:Lua::Value
LANDABLE	Waypoint/WaypointFilter.hpp	/^  LANDABLE,$/;"	m	class:TypeFilter
LANDING	NMEA/SwitchState.hpp	/^    LANDING,$/;"	m	class:SwitchState::FlapPosition
LANDSCAPE	Android/NativeView.hpp	/^    LANDSCAPE = 0,$/;"	m	class:NativeView::ScreenOrientation
LANDSCAPE	DisplayOrientation.hpp	/^  LANDSCAPE,$/;"	m	class:DisplayOrientation
LANG_CHINESE	Language/LanguageGlue.cpp	/^  LANG_CHINESE,$/;"	e	enum:__anon17	file:
LANG_CHINESE_TRADITIONAL	Language/LanguageGlue.cpp	/^  LANG_CHINESE_TRADITIONAL,$/;"	e	enum:__anon17	file:
LANG_CROATIAN	Language/LanguageGlue.cpp	/^  LANG_CROATIAN,$/;"	e	enum:__anon17	file:
LANG_CZECH	Language/LanguageGlue.cpp	/^  LANG_CZECH,$/;"	e	enum:__anon17	file:
LANG_DANISH	Language/LanguageGlue.cpp	/^  LANG_DANISH,$/;"	e	enum:__anon17	file:
LANG_DUTCH	Language/LanguageGlue.cpp	/^  LANG_DUTCH,$/;"	e	enum:__anon17	file:
LANG_ENGLISH	Units/UnitsGlue.cpp	/^  LANG_ENGLISH,$/;"	e	enum:__anon206	file:
LANG_FINNISH	Language/LanguageGlue.cpp	/^  LANG_FINNISH,$/;"	e	enum:__anon17	file:
LANG_FRENCH	Language/LanguageGlue.cpp	/^  LANG_FRENCH,$/;"	e	enum:__anon17	file:
LANG_GERMAN	Language/LanguageGlue.cpp	/^  LANG_GERMAN,$/;"	e	enum:__anon17	file:
LANG_GREEK	Language/LanguageGlue.cpp	/^  LANG_GREEK,$/;"	e	enum:__anon17	file:
LANG_HEBREW	Language/LanguageGlue.cpp	/^  LANG_HEBREW,$/;"	e	enum:__anon17	file:
LANG_HUNGARIAN	Language/LanguageGlue.cpp	/^  LANG_HUNGARIAN,$/;"	e	enum:__anon17	file:
LANG_ITALIAN	Language/LanguageGlue.cpp	/^  LANG_ITALIAN,$/;"	e	enum:__anon17	file:
LANG_JAPANESE	Language/LanguageGlue.cpp	/^  LANG_JAPANESE,$/;"	e	enum:__anon17	file:
LANG_KOREAN	Language/LanguageGlue.cpp	/^  LANG_KOREAN,$/;"	e	enum:__anon17	file:
LANG_LITHUANIAN	Language/LanguageGlue.cpp	/^  LANG_LITHUANIAN,$/;"	e	enum:__anon17	file:
LANG_NORWEGIAN	Language/LanguageGlue.cpp	/^  LANG_NORWEGIAN,$/;"	e	enum:__anon17	file:
LANG_NULL	Language/LanguageGlue.cpp	/^  LANG_NULL,$/;"	e	enum:__anon17	file:
LANG_POLISH	Language/LanguageGlue.cpp	/^  LANG_POLISH,$/;"	e	enum:__anon17	file:
LANG_PORTUGUESE	Language/LanguageGlue.cpp	/^  LANG_PORTUGUESE,$/;"	e	enum:__anon17	file:
LANG_ROMANIAN	Language/LanguageGlue.cpp	/^  LANG_ROMANIAN,$/;"	e	enum:__anon17	file:
LANG_RUSSIAN	Language/LanguageGlue.cpp	/^  LANG_RUSSIAN,$/;"	e	enum:__anon17	file:
LANG_SERBIAN	Language/LanguageGlue.cpp	/^  LANG_SERBIAN,$/;"	e	enum:__anon17	file:
LANG_SLOVAK	Language/LanguageGlue.cpp	/^  LANG_SLOVAK,$/;"	e	enum:__anon17	file:
LANG_SLOVENIAN	Language/LanguageGlue.cpp	/^  LANG_SLOVENIAN,$/;"	e	enum:__anon17	file:
LANG_SPANISH	Language/LanguageGlue.cpp	/^  LANG_SPANISH,$/;"	e	enum:__anon17	file:
LANG_SWEDISH	Language/LanguageGlue.cpp	/^  LANG_SWEDISH,$/;"	e	enum:__anon17	file:
LANG_TURKISH	Language/LanguageGlue.cpp	/^  LANG_TURKISH,$/;"	e	enum:__anon17	file:
LANG_UKRAINIAN	Language/LanguageGlue.cpp	/^  LANG_UKRAINIAN,$/;"	e	enum:__anon17	file:
LANG_VIETNAMESE	Language/LanguageGlue.cpp	/^  LANG_VIETNAMESE,$/;"	e	enum:__anon17	file:
LASTVERT	Topography/shapelib/mapsearch.c	41;"	d	file:
LAST_USED	Waypoint/WaypointFilter.hpp	/^  LAST_USED,$/;"	m	class:TypeFilter
LAUNCH_NICKEL	Kobo/KoboMenu.cpp	/^  LAUNCH_NICKEL = 100,$/;"	e	enum:Buttons	file:
LAYER_ACTIVE	Renderer/OZRenderer.hpp	/^    LAYER_ACTIVE,$/;"	e	enum:OZRenderer::Layer
LAYER_INACTIVE	Renderer/OZRenderer.hpp	/^    LAYER_INACTIVE,$/;"	e	enum:OZRenderer::Layer
LAYER_LEG	Renderer/TaskPointRenderer.hpp	/^    LAYER_LEG,$/;"	e	enum:TaskPointRenderer::Layer
LAYER_OZ_OUTLINE	Renderer/TaskPointRenderer.hpp	/^    LAYER_OZ_OUTLINE,$/;"	e	enum:TaskPointRenderer::Layer
LAYER_OZ_SHADE	Renderer/TaskPointRenderer.hpp	/^    LAYER_OZ_SHADE,$/;"	e	enum:TaskPointRenderer::Layer
LAYER_SHADE	Renderer/OZRenderer.hpp	/^    LAYER_SHADE,$/;"	e	enum:OZRenderer::Layer
LAYER_SYMBOLS	Renderer/TaskPointRenderer.hpp	/^    LAYER_SYMBOLS,$/;"	e	enum:TaskPointRenderer::Layer
LAYOUTCONFIGPANEL_HPP	Dialogs/Settings/Panels/LayoutConfigPanel.hpp	25;"	d
LB	Units/Unit.hpp	/^  LB,$/;"	m	class:Unit
LB_PER_FT2	Units/Unit.hpp	/^  LB_PER_FT2,$/;"	m	class:Unit
LDG	Device/Driver/Volkslogger/vlconv.cpp	/^  C2 LDG;$/;"	m	class:C_RECORD	file:
LEASTSQS_WEIGHT_STORE	Math/XYDataStore.hpp	34;"	d
LEFT	Dialogs/KnobTextEntry.cpp	/^  LEFT,$/;"	e	enum:Buttons	file:
LEFT	Form/GridView.hpp	/^    LEFT,$/;"	m	class:GridView::Direction
LEFT	Renderer/SymbolRenderer.hpp	/^    LEFT,$/;"	e	enum:SymbolRenderer::Direction
LEFT_12_RIGHT_3_VARIO	InfoBoxes/InfoBoxSettings.hpp	/^    LEFT_12_RIGHT_3_VARIO = 20,$/;"	m	class:InfoBoxSettings::Geometry
LEFT_6_RIGHT_3_VARIO	InfoBoxes/InfoBoxSettings.hpp	/^    LEFT_6_RIGHT_3_VARIO = 12,$/;"	m	class:InfoBoxSettings::Geometry
LENGTH	Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^  LENGTH,$/;"	e	enum:Controls	file:
LGAIN	Terrain/jasper/jpc/jpc_qmfb.c	1657;"	d	file:
LIGHT_STRING_HXX	Util/LightString.hxx	31;"	d
LIKELY	Topography/shapelib/mapserver.h	75;"	d
LIKELY	Topography/shapelib/mapserver.h	79;"	d
LIMBO	Device/Port/State.hpp	/^  LIMBO,$/;"	m	class:PortState
LINE	Device/Declaration.hpp	/^      LINE,$/;"	e	enum:Declaration::TurnPoint::Shape
LINE	Engine/Task/ObservationZones/ObservationZone.hpp	/^    LINE,$/;"	m	class:ObservationZone::Shape
LINESECTORZONE_HPP	Engine/Task/ObservationZones/LineSectorZone.hpp	25;"	d
LIST	Dialogs/Plane/PlanePolarDialog.cpp	/^    LIST,$/;"	e	enum:final::Actions	file:
LIVETRACK24_HPP	Tracking/LiveTrack24.hpp	25;"	d
LOAD	Dialogs/Plane/PlaneListDialog.cpp	/^    LOAD,$/;"	e	enum:final::Buttons	file:
LOAD	Dialogs/Task/Manager/TaskListPanel.cpp	/^    LOAD = 100,$/;"	e	enum:final::Buttons	file:
LOCALTIME_H	Time/LocalTime.hpp	24;"	d
LOCATION	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    LOCATION,$/;"	e	enum:final::Rows	file:
LOCATION	InfoBoxes/Panel/ATCReference.cpp	/^  LOCATION,$/;"	e	enum:Controls	file:
LOCATION	MapWindow/Items/MapItem.hpp	/^    LOCATION,$/;"	e	enum:TaskPointType::Type
LOCKED	NMEA/SwitchState.hpp	/^    LOCKED,$/;"	m	class:SwitchState::AirbrakeState
LOGGER	Device/Driver.hpp	/^    LOGGER = 0x4,$/;"	e	enum:DeviceRegister::__anon196
LOGGERCONFIGPANEL_HPP	Dialogs/Settings/Panels/LoggerConfigPanel.hpp	25;"	d
LOGGER_MINFREESTORAGE	Logger/IGCFileCleanup.cpp	37;"	d	file:
LONG	MapSettings.hpp	/^    LONG,$/;"	m	class:TrailSettings::Length
LOOKUP_ICON	Topography/TopographyStore.cpp	/^} LOOKUP_ICON;$/;"	t	typeref:struct:__anon90	file:
LOW	FLARM/Traffic.hpp	/^    LOW = 1,$/;"	m	class:FlarmTraffic::AlarmType
LOW	Hardware/Battery.hpp	/^      LOW,$/;"	e	enum:Power::Battery::batterystatus
LOW_PASS_FILTER_HPP	Math/LowPassFilter.hpp	25;"	d
LOW_PASS_FILTER_THERMAL_AVERAGE_ALPHA	Computer/GlideComputerAirData.cpp	/^static constexpr double LOW_PASS_FILTER_THERMAL_AVERAGE_ALPHA = 0.3;$/;"	v	file:
LOW_PASS_FILTER_VARIO_LD_ALPHA	Computer/GlideComputerAirData.cpp	/^static constexpr double LOW_PASS_FILTER_VARIO_LD_ALPHA = 0.3;$/;"	v	file:
LSB_order	Topography/shapelib/maptree.h	/^    char  LSB_order;$/;"	m	struct:__anon88
LT24_ENABLED	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_ENABLED,$/;"	e	enum:ControlIndex	file:
LT24_INVERVAL	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_INVERVAL,$/;"	e	enum:ControlIndex	file:
LT24_PASSWORD	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_PASSWORD$/;"	e	enum:ControlIndex	file:
LT24_SERVER	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_SERVER,$/;"	e	enum:ControlIndex	file:
LT24_USERNAME	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_USERNAME,$/;"	e	enum:ControlIndex	file:
LT24_VEHICLE_NAME	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_VEHICLE_NAME,$/;"	e	enum:ControlIndex	file:
LT24_VEHICLE_TYPE	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  LT24_VEHICLE_TYPE,$/;"	e	enum:ControlIndex	file:
LUA_ASSERT_HXX	Lua/Assert.hxx	31;"	d
LUA_ERROR_HXX	Lua/Error.hxx	31;"	d
LUA_OBJECT_HXX	Lua/Class.hxx	31;"	d
LUA_RUN_FILE_HXX	Lua/RunFile.hxx	31;"	d
LUA_UTIL_HXX	Lua/Util.hxx	31;"	d
LUA_VALUE_HXX	Lua/Value.hxx	31;"	d
LX	Device/Driver/LX/Convert.hpp	/^namespace LX {$/;"	n
LX	Device/Driver/LX/Protocol.hpp	/^namespace LX {$/;"	n
LX	Device/Driver/LXERA/Convert.hpp	/^namespace LX {$/;"	n
LX1600	Device/Driver/LX/LX1600.hpp	/^namespace LX1600 {$/;"	n
LXBC	Device/Driver/LXERA/Parser.cpp	/^LXBC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXCreateOnPort	Device/Driver/LX/Register.cpp	/^LXCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LXDevice	Device/Driver/LX/Internal.hpp	/^  LXDevice(Port &_port, unsigned baud_rate, unsigned _bulk_baud_rate,$/;"	f	class:LXDevice
LXDevice	Device/Driver/LX/Internal.hpp	/^class LXDevice: public AbstractDevice$/;"	c
LXEra	Device/Driver/LXERA/LXERA.hpp	/^namespace LXEra {$/;"	n
LXEra	Device/Driver/LXERA/LXEra.hpp	/^namespace LXEra {$/;"	n
LXEra	Device/Driver/LXERA/Protocol.hpp	/^namespace LXEra {$/;"	n
LXEraCreateOnPort	Device/Driver/LXERA/Register.cpp	/^LXEraCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LXEraDevice	Device/Driver/LXERA/Internal.hpp	/^  LXEraDevice(Port &_port, unsigned baud_rate)$/;"	f	class:LXEraDevice
LXEraDevice	Device/Driver/LXERA/Internal.hpp	/^class LXEraDevice: public AbstractDevice$/;"	c
LXN	Device/Driver/LX/LXN.hpp	/^namespace LXN {$/;"	n
LXWP0	Device/Driver/LX/Parser.cpp	/^LXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP0	Device/Driver/LXERA/Parser.cpp	/^LXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP0	Device/Driver/XCTracer/Parser.cpp	/^XCTracerDevice::LXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:XCTracerDevice
LXWP1	Device/Driver/LX/Parser.cpp	/^LXWP1(NMEAInputLine &line, DeviceInfo &device)$/;"	f	file:
LXWP1	Device/Driver/LXERA/Parser.cpp	/^LXWP1(NMEAInputLine &line, DeviceInfo &device)$/;"	f	file:
LXWP2	Device/Driver/LX/Parser.cpp	/^LXWP2(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP2	Device/Driver/LXERA/Parser.cpp	/^LXWP2(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP3	Device/Driver/LX/Parser.cpp	/^LXWP3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LXWP3	Device/Driver/LXERA/Parser.cpp	/^LXWP3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
Label	Renderer/AirspaceLabelList.hpp	/^  struct Label {$/;"	s	class:AirspaceLabelList
Label	Renderer/WaypointLabelList.hpp	/^  struct Label{$/;"	s	class:WaypointLabelList
LabelBlock	Renderer/LabelBlock.hpp	/^class LabelBlock {$/;"	c
LabelSelection	Renderer/AirspaceRendererSettings.hpp	/^  enum class LabelSelection : uint8_t {$/;"	c	struct:AirspaceRendererSettings
LabelSelection	Renderer/WaypointRendererSettings.hpp	/^  enum class LabelSelection : uint8_t {$/;"	c	struct:WaypointRendererSettings
LabelShape	Renderer/LabelShape.hpp	/^enum class LabelShape : uint8_t {$/;"	c
LabelValueDrawInfo	Gauge/GaugeVario.hpp	/^  struct LabelValueDrawInfo {$/;"	s	class:GaugeVario
LabelValueGeometry	Gauge/GaugeVario.hpp	/^  struct LabelValueGeometry {$/;"	s	class:GaugeVario
LacksAlphaASCII	Menu/ButtonLabel.cpp	/^LacksAlphaASCII(const TCHAR *s)$/;"	f	file:
Lambda	Lua/Util.hxx	/^Lambda(T &&t)$/;"	f	struct:Lua::StackIndex::LightUserData
LambdaActionListener	Form/LambdaActionListener.hpp	/^  LambdaActionListener(C &&c):C(std::move(c)) {}$/;"	f	class:LambdaActionListener
LambdaActionListener	Form/LambdaActionListener.hpp	/^class LambdaActionListener : public ActionListener, private C {$/;"	c
LambdaListItemRenderer	Form/List.hpp	/^  LambdaListItemRenderer(C &&c):C(std::move(c)) {}$/;"	f	class:LambdaListItemRenderer
LambdaListItemRenderer	Form/List.hpp	/^class LambdaListItemRenderer : public ListItemRenderer, private C {$/;"	c
LandableStyle	Renderer/WaypointRendererSettings.hpp	/^  enum class LandableStyle : uint8_t {$/;"	c	struct:WaypointRendererSettings
LandingTime	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  LandingTime,$/;"	e	enum:Controls	file:
LanguageChanged	UtilsSettings.cpp	/^bool LanguageChanged = false;$/;"	v
LanguageFile	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  LanguageFile,$/;"	e	enum:ControlIndex	file:
LanguageFile	Profile/ProfileKeys.cpp	/^const char LanguageFile[] = "LanguageFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
LanguageFileVisitor	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  LanguageFileVisitor(DataFieldEnum &_df): df(_df) {}$/;"	f	class:LanguageFileVisitor
LanguageFileVisitor	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^class LanguageFileVisitor: public File::Visitor$/;"	c	file:
LargeExtra	Widget/TabWidget.cpp	/^TabWidget::LargeExtra()$/;"	f	class:TabWidget
LargeTextWidget	Widget/LargeTextWidget.hpp	/^  LargeTextWidget(const DialogLook &_look, const TCHAR *_text=nullptr)$/;"	f	class:LargeTextWidget
LargeTextWidget	Widget/LargeTextWidget.hpp	/^class LargeTextWidget : public WindowWidget {$/;"	c
LargeTextWindow	Screen/LargeTextWindow.hpp	/^class LargeTextWindow : public NativeWindow {$/;"	c
LargeTextWindowStyle	Screen/LargeTextWindow.hpp	/^  LargeTextWindowStyle() {$/;"	f	class:LargeTextWindowStyle
LargeTextWindowStyle	Screen/LargeTextWindow.hpp	/^  LargeTextWindowStyle(const WindowStyle other):WindowStyle(other) {$/;"	f	class:LargeTextWindowStyle
LargeTextWindowStyle	Screen/LargeTextWindow.hpp	/^class LargeTextWindowStyle : public WindowStyle {$/;"	c
LastSeparator	OS/Path.cpp	/^LastSeparator(Path::const_pointer path)$/;"	f	file:
LastSeparator	OS/PathName.cpp	/^LastSeparator(TCHAR *path)$/;"	f	file:
LastSeparator	OS/PathName.cpp	/^LastSeparator(const TCHAR *path)$/;"	f	file:
LastThermalStats	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::LastThermalStats(const MoreData &basic,$/;"	f	class:GlideComputerAirData
LastTime_Check	Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double LastTime_Check;$/;"	m	class:ConditionMonitor
LastTime_Notification	Computer/ConditionMonitor/ConditionMonitor.hpp	/^  double LastTime_Notification;$/;"	m	class:ConditionMonitor
LastTraffic	FLARM/List.hpp	/^  const FlarmTraffic *LastTraffic() const {$/;"	f	struct:TrafficList
LastUsedWaypoints	Waypoint/LastUsed.cpp	/^namespace LastUsedWaypoints$/;"	n	file:
LastUsedWaypoints	Waypoint/LastUsed.hpp	/^namespace LastUsedWaypoints$/;"	n
LatLonUnits	Profile/ProfileKeys.cpp	/^const char LatLonUnits[] = "LatLonUnits";$/;"	m	namespace:ProfileKeys	file:
LatinBufferSize	FLARM/FlarmNetRecord.hpp	/^LatinBufferSize(size_t size)$/;"	f
Latitudes	Device/Driver/LX/Protocol.hpp	/^    int32_t Latitudes[NUMTPS];$/;"	m	struct:LX::Declaration
Latitudes	Device/Driver/LXERA/Protocol.hpp	/^    int32_t Latitudes[NUMTPS];$/;"	m	struct:LXEra::Declaration
Layer	Renderer/OZRenderer.hpp	/^  enum Layer {$/;"	g	class:OZRenderer
Layer	Renderer/TaskPointRenderer.hpp	/^  enum Layer {$/;"	g	class:TaskPointRenderer
LayerApplyFilterToLayer	Topography/shapelib/mapserver.h	/^    int (*LayerApplyFilterToLayer)(FilterEncodingNode *psNode, mapObj *map, int iLayerIndex);$/;"	m	struct:layerVTable
LayerClose	Topography/shapelib/mapserver.h	/^    int (*LayerClose)(layerObj *layer);$/;"	m	struct:layerVTable
LayerCloseConnection	Topography/shapelib/mapserver.h	/^    int (*LayerCloseConnection)(layerObj *layer);$/;"	m	struct:layerVTable
LayerCompositer	Topography/shapelib/mapserver.h	/^  } LayerCompositer;$/;"	t	typeref:struct:_LayerCompositer
LayerCreateItems	Topography/shapelib/mapserver.h	/^    int (*LayerCreateItems)(layerObj *layer, int nt);$/;"	m	struct:layerVTable
LayerEnablePaging	Topography/shapelib/mapserver.h	/^    void (*LayerEnablePaging)(layerObj *layer, int value);$/;"	m	struct:layerVTable
LayerEscapePropertyName	Topography/shapelib/mapserver.h	/^    char* (*LayerEscapePropertyName)(layerObj *layer, const char* pszString);$/;"	m	struct:layerVTable
LayerEscapeSQLParam	Topography/shapelib/mapserver.h	/^    char* (*LayerEscapeSQLParam)(layerObj *layer, const char* pszString);$/;"	m	struct:layerVTable
LayerFreeItemInfo	Topography/shapelib/mapserver.h	/^    void (*LayerFreeItemInfo)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetAutoProjection	Topography/shapelib/mapserver.h	/^    int (*LayerGetAutoProjection)(layerObj *layer, projectionObj *projection);$/;"	m	struct:layerVTable
LayerGetAutoStyle	Topography/shapelib/mapserver.h	/^    int (*LayerGetAutoStyle)(mapObj *map, layerObj *layer, classObj *c, shapeObj *shape);$/;"	m	struct:layerVTable
LayerGetExtent	Topography/shapelib/mapserver.h	/^    int (*LayerGetExtent)(layerObj *layer, rectObj *extent);$/;"	m	struct:layerVTable
LayerGetItems	Topography/shapelib/mapserver.h	/^    int (*LayerGetItems)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetNumFeatures	Topography/shapelib/mapserver.h	/^    int (*LayerGetNumFeatures)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetPaging	Topography/shapelib/mapserver.h	/^    int (*LayerGetPaging)(layerObj *layer);$/;"	m	struct:layerVTable
LayerGetShape	Topography/shapelib/mapserver.h	/^    int (*LayerGetShape)(layerObj *layer, shapeObj *shape, resultObj *record);$/;"	m	struct:layerVTable
LayerGetShapeCount	Topography/shapelib/mapserver.h	/^    int (*LayerGetShapeCount)(layerObj *layer, rectObj rect, projectionObj *rectProjection);$/;"	m	struct:layerVTable
LayerInitItemInfo	Topography/shapelib/mapserver.h	/^    int (*LayerInitItemInfo)(layerObj *layer);$/;"	m	struct:layerVTable
LayerIsOpen	Topography/shapelib/mapserver.h	/^    int (*LayerIsOpen)(layerObj *layer);$/;"	m	struct:layerVTable
LayerNextShape	Topography/shapelib/mapserver.h	/^    int (*LayerNextShape)(layerObj *layer, shapeObj *shape);$/;"	m	struct:layerVTable
LayerOpen	Topography/shapelib/mapserver.h	/^    int (*LayerOpen)(layerObj *layer);$/;"	m	struct:layerVTable
LayerSetTimeFilter	Topography/shapelib/mapserver.h	/^    int (*LayerSetTimeFilter)(layerObj *layer, const char *timestring, const char *timefield);$/;"	m	struct:layerVTable
LayerSupportsCommonFilters	Topography/shapelib/mapserver.h	/^    int (*LayerSupportsCommonFilters)(layerObj *layer);$/;"	m	struct:layerVTable
LayerTranslateFilter	Topography/shapelib/mapserver.h	/^    int (*LayerTranslateFilter)(layerObj *layer, expressionObj *filter, char *filteritem);$/;"	m	struct:layerVTable
LayerWhichShapes	Topography/shapelib/mapserver.h	/^    int (*LayerWhichShapes)(layerObj *layer, rectObj rect, int isQuery);$/;"	m	struct:layerVTable
Layout	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    Layout(const PixelRect &rc):demo(rc), save(rc) {$/;"	f	struct:final::Layout
Layout	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::Layout::Layout(PixelRect rc,$/;"	f	class:InfoBoxesConfigWidget::Layout
Layout	Dialogs/Settings/dlgConfiguration.cpp	/^    Layout(const PixelRect &rc):expert(rc), button2(rc), button1(rc) {$/;"	f	struct:final::Layout
Layout	Dialogs/Settings/dlgConfiguration.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::Layout::Layout(PixelRect rc, const DialogLook &look)$/;"	f	class:TaskClosePanel::Layout
Layout	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  struct Layout {$/;"	s	class:final
Layout	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/Task/TargetDialog.cpp	/^  struct Layout {$/;"	s	class:TargetWidget	file:
Layout	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::Layout::Layout(PixelRect rc)$/;"	f	class:TargetWidget::Layout
Layout	Dialogs/Task/TaskPointDialog.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::Layout::Layout(PixelRect rc, const DialogLook &look)$/;"	f	class:TaskPointWidget::Layout
Layout	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::Layout::Layout(const PixelRect &rc,$/;"	f	class:WaypointDetailsWidget::Layout
Layout	Dialogs/dlgAnalysis.cpp	/^  struct Layout {$/;"	s	class:final	file:
Layout	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::Layout::Layout(const PixelRect rc)$/;"	f	class:AnalysisWidget::Layout
Layout	InfoBoxes/InfoBoxLayout.hpp	/^  struct Layout {$/;"	s	namespace:InfoBoxLayout
Layout	Screen/Layout.cpp	/^namespace Layout$/;"	n	file:
Layout	Screen/Layout.hpp	/^namespace Layout$/;"	n
Layout	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::Layout::Layout(PixelRect rc, const Widget *extra_widget)$/;"	f	class:ArrowPagerWidget::Layout
Layout	Widget/ArrowPagerWidget.hpp	/^  struct Layout {$/;"	s	class:ArrowPagerWidget
Layout	Widget/TabWidget.cpp	/^TabWidget::Layout::Layout(Orientation orientation, PixelRect rc,$/;"	f	class:TabWidget::Layout
Layout	Widget/TabWidget.hpp	/^  struct Layout {$/;"	s	class:TabWidget
LayoutConfigPanel	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  LayoutConfigPanel()$/;"	f	class:final
LayoutOffsetButtons	Widget/OffsetButtonsWidget.cpp	/^LayoutOffsetButtons(const PixelRect &total_rc, PixelRect buttons[4])$/;"	f	file:
LazyPaintWindow	Screen/LazyPaintWindow.hpp	/^class LazyPaintWindow : public BufferWindow {$/;"	c
LazyPaintWindow	Screen/LazyPaintWindow.hpp	/^class LazyPaintWindow : public FakeBufferWindow {$/;"	c
LeScanCallback	Android/LeScanCallback.hpp	/^class LeScanCallback {$/;"	c
Leaf	Util/QuadTree.hxx	/^	struct Leaf {$/;"	s	class:QuadTree
Leaf	Util/RadixTree.hpp	/^    Leaf(Leaf *_next, const T &_value)$/;"	f	struct:RadixTree::Leaf
Leaf	Util/RadixTree.hpp	/^  struct Leaf {$/;"	s	class:RadixTree
LeafList	Util/QuadTree.hxx	/^	struct LeafList {$/;"	s
LeafList	Util/RadixTree.hpp	/^    LeafList():head(nullptr) {}$/;"	f	struct:RadixTree::LeafList
LeafList	Util/RadixTree.hpp	/^  struct LeafList {$/;"	s	class:RadixTree
LeafVector	Engine/Route/FlatTriangleFanTree.hpp	/^                    GlobalSliceAllocator<FlatTriangleFanTree, 128u> > LeafVector;$/;"	t	class:FlatTriangleFanTree
Lease	Thread/Guard.hpp	/^  class Lease {$/;"	c	class:Guard
LeastSquares	Math/LeastSquares.hpp	/^class LeastSquares: public XYDataStore$/;"	c
Leave	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::Leave()$/;"	f	class:TaskPropertiesPanel
Leave	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Leave()$/;"	f	class:ButtonPanelWidget
Leave	Widget/PagerWidget.cpp	/^PagerWidget::Leave()$/;"	f	class:PagerWidget
Leave	Widget/SolidWidget.cpp	/^SolidWidget::Leave()$/;"	f	class:SolidWidget
Leave	Widget/TwoWidgets.cpp	/^TwoWidgets::Leave()$/;"	f	class:TwoWidgets
Leave	Widget/Widget.cpp	/^NullWidget::Leave()$/;"	f	class:NullWidget
LeaveDrawThread	Components.cpp	/^LeaveDrawThread()$/;"	f
LeaveDrawThread	Thread/Debug.hpp	/^LeaveDrawThread()$/;"	f
LeavePage	PageActions.cpp	/^PageActions::LeavePage()$/;"	f	class:PageActions
LeavePan	Pan.cpp	/^LeavePan()$/;"	f
LeftBend	Screen/OpenGL/Triangulate.cpp	/^LeftBend(const PT &a, const PT &b, const PT &c)$/;"	f	file:
LeftLayout	Form/ButtonPanel.cpp	/^ButtonPanel::LeftLayout()$/;"	f	class:ButtonPanel
LeftLayout	Form/ButtonPanel.cpp	/^ButtonPanel::LeftLayout(PixelRect rc)$/;"	f	class:ButtonPanel
LegActive	Renderer/TaskPointRenderer.hpp	/^  bool LegActive() const {$/;"	f	class:TaskPointRenderer
LegalPointSet	Engine/Task/Factory/LegalPointSet.hpp	/^typedef EnumBitSet<TaskPointFactoryType> LegalPointSet;$/;"	t
Length	Hardware/VideoPower.h	/^  ULONG Length;$/;"	m	struct:VIDEO_POWER_MANAGEMENT
Length	MapSettings.hpp	/^  enum class Length: uint8_t {$/;"	c	struct:TrailSettings
LeonardoCreateOnPort	Device/Driver/Leonardo.cpp	/^LeonardoCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LeonardoDevice	Device/Driver/Leonardo.cpp	/^class LeonardoDevice : public AbstractDevice {$/;"	c	file:
LeonardoParseC	Device/Driver/Leonardo.cpp	/^LeonardoParseC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
LeonardoParseD	Device/Driver/Leonardo.cpp	/^LeonardoParseD(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
Level	Atmosphere/CuSonde.hpp	/^  struct Level {$/;"	s	class:CuSonde
LevilCreateOnPort	Device/Driver/LevilAHRS_G.cpp	/^LevilCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
LevilDevice	Device/Driver/LevilAHRS_G.cpp	/^class LevilDevice : public AbstractDevice {$/;"	c	file:
LibInputHandler	Event/Poll/LibInput/LibInputHandler.hpp	/^  explicit LibInputHandler(boost::asio::io_context &io_context,$/;"	f	class:final
LiftDatabase	NMEA/LiftDatabase.hpp	/^class LiftDatabase : public std::array<double, 36> {$/;"	c
LiftDatabaseComputer	Computer/LiftDatabaseComputer.hpp	/^class LiftDatabaseComputer {$/;"	c
LiftPoints	Gauge/ThermalAssistantRenderer.hpp	/^  class LiftPoints: public std::array<BulkPixelPoint,$/;"	c	class:ThermalAssistantRenderer
LiftUnitsValue	Profile/ProfileKeys.cpp	/^const char LiftUnitsValue[] = "LiftUnit";$/;"	m	namespace:ProfileKeys	file:
LightColor	Screen/Color.hpp	/^LightColor(Color c)$/;"	f
LightColor	Screen/Color.hpp	/^LightColor(uint8_t c)$/;"	f
LightString	Util/LightString.hxx	/^	LightString(LightString &&src)$/;"	f	class:LightString
LightString	Util/LightString.hxx	/^	LightString(std::nullptr_t n)$/;"	f	class:LightString
LightString	Util/LightString.hxx	/^	explicit LightString(const_pointer _value)$/;"	f	class:LightString
LightString	Util/LightString.hxx	/^	explicit LightString(pointer _allocation)$/;"	f	class:LightString
LightString	Util/LightString.hxx	/^class LightString : public StringPointer<T> {$/;"	c
LightUserData	Lua/Util.hxx	/^struct LightUserData {$/;"	s	struct:Lua::StackIndex
Lighten	Screen/PortableColor.hpp	/^  constexpr RGB8Color Lighten() const {$/;"	f	class:RGB8Color
LimitDelta	Computer/StateClock.hpp	/^  static double LimitDelta(double delta) {$/;"	f	class:StateClock
LimitGR	Computer/GlideRatioCalculator.cpp	/^LimitGR(double gr)$/;"	f	file:
LimitMapScale	Projection/MapWindowProjection.cpp	/^MapWindowProjection::LimitMapScale(const double value) const$/;"	f	class:MapWindowProjection
Line2D	Math/Line2D.hpp	/^  constexpr Line2D(Point _a, Point _b):a(_a), b(_b) {}$/;"	f	struct:Line2D
Line2D	Math/Line2D.hpp	/^struct Line2D {$/;"	s
LineReader	IO/LineReader.hpp	/^class LineReader {$/;"	c
LineSectorZone	Engine/Task/ObservationZones/LineSectorZone.hpp	/^  LineSectorZone(const GeoPoint loc, const double length = 1000.0)$/;"	f	class:LineSectorZone
LineSectorZone	Engine/Task/ObservationZones/LineSectorZone.hpp	/^  LineSectorZone(const LineSectorZone &other, const GeoPoint &reference)$/;"	f	class:LineSectorZone
LineSectorZone	Engine/Task/ObservationZones/LineSectorZone.hpp	/^class LineSectorZone: public SymmetricSectorZone$/;"	c
LineSectorZoneEditWidget	Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^LineSectorZoneEditWidget::LineSectorZoneEditWidget(LineSectorZone &_oz,$/;"	f	class:LineSectorZoneEditWidget
LineSectorZoneEditWidget	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^class LineSectorZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
LineToTriangles	Screen/OpenGL/Triangulate.cpp	/^LineToTriangles(const BulkPixelPoint *points, unsigned num_points,$/;"	f
Link	Engine/Route/AStar.hpp	/^  void Link(const Node &node, const Node &parent,$/;"	f	class:AStar
Link	Screen/OpenGL/Program.hpp	/^  void Link() {$/;"	f	class:GLProgram
LinkCleared	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::LinkCleared(const RouteLink &e)$/;"	f	class:RoutePlanner
LinkProgram	Screen/OpenGL/Shaders.cpp	/^LinkProgram(GLProgram &program)$/;"	f	file:
LinkTimeout	Device/Driver.cpp	/^AbstractDevice::LinkTimeout()$/;"	f	class:AbstractDevice
LinkTimeout	Device/Driver/BlueFly/Misc.cpp	/^BlueFlyDevice::LinkTimeout()$/;"	f	class:BlueFlyDevice
LinkTimeout	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::LinkTimeout()$/;"	f	class:CAI302Device
LinkTimeout	Device/Driver/EW.cpp	/^EWDevice::LinkTimeout()$/;"	f	class:EWDevice
LinkTimeout	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::LinkTimeout()$/;"	f	class:FlarmDevice
LinkTimeout	Device/Driver/LX/Mode.cpp	/^LXDevice::LinkTimeout()$/;"	f	class:LXDevice
LinkTimeout	Device/Driver/LXERA/Mode.cpp	/^LXEraDevice::LinkTimeout()$/;"	f	class:LXEraDevice
LinkTimeout	Device/Driver/Vega/Misc.cpp	/^VegaDevice::LinkTimeout()$/;"	f	class:VegaDevice
LinuxInputDevice	Event/Poll/Linux/Input.hpp	/^  explicit LinuxInputDevice(boost::asio::io_context &io_context,$/;"	f	class:final
List	Cloud/Client.hpp	/^                                 boost::intrusive::constant_time_size<false>> List;$/;"	t	class:CloudClientContainer
List	Cloud/Thermal.hpp	/^                                 boost::intrusive::constant_time_size<false>> List;$/;"	t	class:CloudThermalContainer
List	Screen/Custom/WList.hpp	/^                                 boost::intrusive::constant_time_size<false>> List;$/;"	t	class:WindowList
List	XML/DataNode.hpp	/^  typedef std::list<ConstDataNode *> List;$/;"	t	class:ConstDataNode
ListChildren	XML/DataNodeXML.cpp	/^ConstDataNodeXML::ListChildren() const$/;"	f	class:ConstDataNodeXML
ListChildrenNamed	XML/DataNodeXML.cpp	/^ConstDataNodeXML::ListChildrenNamed(const TCHAR *name) const$/;"	f	class:ConstDataNodeXML
ListClicked	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::ListClicked()$/;"	f	class:PlanePolarWidget
ListControl	Form/List.cpp	/^  :ListControl(_look)$/;"	f
ListControl	Form/List.hpp	/^class ListControl : public PaintWindow {$/;"	c
ListCursorHandler	Form/List.hpp	/^class ListCursorHandler {$/;"	c
ListItem	Dialogs/Plane/PlaneListDialog.cpp	/^    ListItem(const TCHAR *_name, Path _path)$/;"	f	struct:final::ListItem
ListItem	Dialogs/Plane/PlaneListDialog.cpp	/^  struct ListItem {$/;"	s	class:final	file:
ListItem	Dialogs/ProfileListDialog.cpp	/^    ListItem(const TCHAR *_name, Path _path)$/;"	f	struct:final::ListItem
ListItem	Dialogs/ProfileListDialog.cpp	/^  struct ListItem {$/;"	s	class:final	file:
ListItem	Dialogs/Weather/NOAAList.cpp	/^  struct ListItem {$/;"	s	class:final	file:
ListItem	Kobo/ToolsDialog.cpp	/^  ListItem(const TCHAR *_name, Path _path)$/;"	f	struct:ListItem
ListItem	Kobo/ToolsDialog.cpp	/^struct ListItem$/;"	s	file:
ListItemRenderer	Form/List.hpp	/^class ListItemRenderer {$/;"	c
ListItemRendererFunction	Form/List.hpp	/^typedef void (*ListItemRendererFunction)(Canvas &canvas, const PixelRect rc,$/;"	t
ListNetworks	Kobo/WPASupplicant.cpp	/^WPASupplicant::ListNetworks(WifiConfiguredNetworkInfo *dest, unsigned max)$/;"	f	class:WPASupplicant
ListPicker	Dialogs/ListPicker.cpp	/^ListPicker(const TCHAR *caption,$/;"	f
ListPickerWidget	Dialogs/ListPicker.cpp	/^  ListPickerWidget(unsigned _num_items, unsigned _initial_value,$/;"	f	class:ListPickerWidget
ListPickerWidget	Dialogs/ListPicker.cpp	/^class ListPickerWidget : public ListWidget, public ActionListener {$/;"	c	file:
ListWidget	Widget/ListWidget.hpp	/^class ListWidget$/;"	c
Listener	Dialogs/Device/DeviceEditWidget.hpp	/^  struct Listener {$/;"	s	class:DeviceEditWidget
Listener	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  class Listener {$/;"	c	class:final	file:
Listener	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  struct Listener {$/;"	s	class:ObservationZoneEditWidget
LiveBlackboard	Blackboard/LiveBlackboard.hpp	/^  LiveBlackboard():calling_listeners(false) {}$/;"	f	class:LiveBlackboard
LiveBlackboard	Blackboard/LiveBlackboard.hpp	/^class LiveBlackboard : public FullBlackboard {$/;"	c
LiveTrack24	Tracking/LiveTrack24.cpp	/^namespace LiveTrack24$/;"	n	file:
LiveTrack24	Tracking/LiveTrack24.hpp	/^namespace LiveTrack24$/;"	n
LiveTrack24	Tracking/LiveTrack24/Settings.hpp	/^namespace LiveTrack24 {$/;"	n
LiveTrack24Enabled	Profile/ProfileKeys.cpp	/^const char LiveTrack24Enabled[] = "LiveTrack24Enabled";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24Password	Profile/ProfileKeys.cpp	/^const char LiveTrack24Password[] = "LiveTrack24Password";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24Server	Profile/ProfileKeys.cpp	/^const char LiveTrack24Server[] = "LiveTrack24Server";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24State	Tracking/TrackingGlue.hpp	/^  struct LiveTrack24State$/;"	s	class:final
LiveTrack24TrackingInterval	Profile/ProfileKeys.cpp	/^const char LiveTrack24TrackingInterval[] = "TrackingInterval";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24TrackingVehicleName	Profile/ProfileKeys.cpp	/^const char LiveTrack24TrackingVehicleName[] = "TrackingVehicleName";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24TrackingVehicleType	Profile/ProfileKeys.cpp	/^const char LiveTrack24TrackingVehicleType[] = "TrackingVehicleType";$/;"	m	namespace:ProfileKeys	file:
LiveTrack24Username	Profile/ProfileKeys.cpp	/^const char LiveTrack24Username[] = "LiveTrack24Username";$/;"	m	namespace:ProfileKeys	file:
Load	Cloud/Client.cpp	/^CloudClient::Load(Deserialiser &s)$/;"	f	class:CloudClient
Load	Cloud/Client.cpp	/^CloudClientContainer::Load(Deserialiser &s)$/;"	f	class:CloudClientContainer
Load	Cloud/Data.cpp	/^CloudData::Load(Deserialiser &s)$/;"	f	class:CloudData
Load	Cloud/Main.cpp	/^CloudServer::Load()$/;"	f	class:CloudServer
Load	Cloud/Thermal.cpp	/^CloudThermal::Load(Deserialiser &s)$/;"	f	class:CloudThermal
Load	Cloud/Thermal.cpp	/^CloudThermalContainer::Load(Deserialiser &s)$/;"	f	class:CloudThermalContainer
Load	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::Load(unsigned i)$/;"	f	class:PlaneListWidget
Load	Dialogs/Traffic/TrafficList.cpp	/^    void Load() {$/;"	f	struct:TrafficListWidget::Item
Load	Form/TabMenuData.hpp	/^  Widget *(*Load)();$/;"	m	struct:TabMenuPage
Load	IO/FileCache.cpp	/^FileCache::Load(const TCHAR *name, Path original_path)$/;"	f	class:FileCache
Load	Look/GlobalFonts.cpp	/^Fonts::Load(const FontSettings &settings)$/;"	f	class:Fonts
Load	Profile/AirspaceConfig.cpp	/^Profile::Load(const ProfileMap &map, AirspaceComputerSettings &settings)$/;"	f	class:Profile
Load	Profile/AirspaceConfig.cpp	/^Profile::Load(const ProfileMap &map, AirspaceRendererSettings &settings)$/;"	f	class:Profile
Load	Profile/AirspaceConfig.cpp	/^Profile::Load(const ProfileMap &map,$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, CirclingSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, ComputerSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, FeaturesSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, LoggerSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, PlacesOfInterestSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, PolarSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, TeamCodeSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, WaveSettings &settings)$/;"	f	class:Profile
Load	Profile/ComputerProfile.cpp	/^Profile::Load(const ProfileMap &map, WindSettings &settings)$/;"	f	class:Profile
Load	Profile/ContestProfile.cpp	/^Profile::Load(const ProfileMap &map, ContestSettings &settings)$/;"	f	class:Profile
Load	Profile/FlarmProfile.cpp	/^Profile::Load(const ProfileMap &map, FlarmColorDatabase &db)$/;"	f	class:Profile
Load	Profile/InfoBoxConfig.cpp	/^Profile::Load(const ProfileMap &map, InfoBoxSettings &settings)$/;"	f	class:Profile
Load	Profile/MapProfile.cpp	/^Load(const ProfileMap &map, FAITriangleSettings &settings)$/;"	f	file:
Load	Profile/MapProfile.cpp	/^Profile::Load(const ProfileMap &map, MapItemListSettings &settings)$/;"	f	class:Profile
Load	Profile/MapProfile.cpp	/^Profile::Load(const ProfileMap &map, MapSettings &settings)$/;"	f	class:Profile
Load	Profile/MapProfile.cpp	/^Profile::Load(const ProfileMap &map, TrailSettings &settings)$/;"	f	class:Profile
Load	Profile/PageProfile.cpp	/^Load(const ProfileMap &map, PageLayout &_pl, const unsigned page)$/;"	f	file:
Load	Profile/PageProfile.cpp	/^Profile::Load(const ProfileMap &map, PageSettings &settings)$/;"	f	class:Profile
Load	Profile/Profile.cpp	/^Profile::Load()$/;"	f	class:Profile
Load	Profile/RouteProfile.cpp	/^Profile::Load(const ProfileMap &map, RoutePlannerConfig &settings)$/;"	f	class:Profile
Load	Profile/SystemProfile.cpp	/^Profile::Load(const ProfileMap &map, SystemSettings &settings)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, FinishConstraints &constraints)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, GlideSettings &settings)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, OrderedTaskSettings &settings)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, SectorDefaults &settings)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, StartConstraints &constraints)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, TaskBehaviour &settings)$/;"	f	class:Profile
Load	Profile/TaskProfile.cpp	/^Profile::Load(const ProfileMap &map, TaskStartMargins &settings)$/;"	f	class:Profile
Load	Profile/TrackingProfile.cpp	/^Profile::Load(const ProfileMap &map, TrackingSettings &settings)$/;"	f	class:Profile
Load	Profile/TrackingProfile.cpp	/^static void Load(const ProfileMap &map,$/;"	f	namespace:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, DialogSettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, DisplaySettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, FormatSettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, SoundSettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, TrafficSettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, UISettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, VarioSettings &settings)$/;"	f	class:Profile
Load	Profile/UIProfile.cpp	/^Profile::Load(const ProfileMap &map, VarioSoundSettings &settings)$/;"	f	class:Profile
Load	Profile/WeatherProfile.cpp	/^  static void Load(const ProfileMap &map, PCMetSettings &settings) {$/;"	f	namespace:Profile
Load	Profile/WeatherProfile.cpp	/^Profile::Load(const ProfileMap &map, WeatherSettings &settings)$/;"	f	class:Profile
Load	ResourceLoader.cpp	/^ResourceLoader::Load(ResourceId id)$/;"	f	class:ResourceLoader
Load	ResourceLoader.cpp	/^ResourceLoader::Load(const TCHAR *name, const TCHAR *type)$/;"	f	class:ResourceLoader
Load	Screen/Android/Bitmap.cpp	/^Bitmap::Load(ResourceId id, Type _type)$/;"	f	class:Bitmap
Load	Screen/Android/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	Screen/Apple/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	Screen/Custom/Bitmap.cpp	/^Bitmap::Load(ConstBuffer<void> buffer, Type type)$/;"	f	class:Bitmap
Load	Screen/Custom/ResourceBitmap.cpp	/^Bitmap::Load(ResourceId id, Type type)$/;"	f	class:Bitmap
Load	Screen/FreeType/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	Screen/FreeType/Init.cpp	/^FreeType::Load(const char *path)$/;"	f	class:FreeType
Load	Screen/GDI/Font.cpp	/^Font::Load(const FontDescription &d)$/;"	f	class:Font
Load	Screen/GDI/ResourceBitmap.cpp	/^Bitmap::Load(ResourceId id, Type type)$/;"	f	class:Bitmap
Load	Screen/Memory/Bitmap.cpp	/^Bitmap::Load(UncompressedImage &&uncompressed, gcc_unused Type type)$/;"	f	class:Bitmap
Load	Screen/OpenGL/Bitmap.cpp	/^Bitmap::Load(UncompressedImage &&_uncompressed, Type _type)$/;"	f	class:Bitmap
Load	Screen/OpenGL/Buffer.hpp	/^  void Load(GLsizeiptr size, const GLvoid *data) {$/;"	f	class:GLBuffer
Load	Terrain/RasterTerrain.cpp	/^RasterTerrain::Load(Path path, FileCache *cache,$/;"	f	class:RasterTerrain
Load	Topography/TopographyStore.cpp	/^TopographyStore::Load(OperationEnvironment &operation, NLineReader &reader,$/;"	f	class:TopographyStore
LoadATCReferencePanel	InfoBoxes/Panel/ATCReference.cpp	/^LoadATCReferencePanel(unsigned id)$/;"	f
LoadActiveRadioFrequencyEditPanel	InfoBoxes/Panel/RadioEdit.cpp	/^LoadActiveRadioFrequencyEditPanel(unsigned id)$/;"	f
LoadAll	Topography/TopographyFile.cpp	/^TopographyFile::LoadAll()$/;"	f	class:TopographyFile
LoadAll	Topography/TopographyStore.cpp	/^TopographyStore::LoadAll()$/;"	f	class:TopographyStore
LoadAlternatesPanel	InfoBoxes/Content/Alternate.cpp	/^LoadAlternatesPanel(unsigned id)$/;"	f	file:
LoadAltitudeInfoPanel	InfoBoxes/Panel/AltitudeInfo.cpp	/^LoadAltitudeInfoPanel(unsigned id)$/;"	f
LoadAltitudeSetupPanel	InfoBoxes/Panel/AltitudeSetup.cpp	/^LoadAltitudeSetupPanel(unsigned id)$/;"	f
LoadAltitudeSimulatorPanel	InfoBoxes/Panel/AltitudeSimulator.cpp	/^LoadAltitudeSimulatorPanel(unsigned id)$/;"	f
LoadAnalysis8Panel	InfoBoxes/Content/Contest.cpp	/^LoadAnalysis8Panel(unsigned id)$/;"	f	file:
LoadAnalysisBarographPanel	InfoBoxes/Content/Trace.cpp	/^LoadAnalysisBarographPanel(unsigned id)$/;"	f	file:
LoadAudioModeScheme	Dialogs/Device/Vega/AudioModeParameters.hpp	/^LoadAudioModeScheme(VegaParametersWidget &widget, const VEGA_SCHEME &scheme)$/;"	f
LoadBitmap2	ResourceLoader.cpp	/^ResourceLoader::LoadBitmap2(ResourceId id)$/;"	f	class:ResourceLoader
LoadBottom	PageActions.cpp	/^LoadBottom(PageLayout::Bottom bottom)$/;"	f	file:
LoadCache	Terrain/RasterMap.cpp	/^RasterMap::LoadCache(FILE *file)$/;"	f	class:RasterMap
LoadCache	Terrain/RasterTerrain.cpp	/^RasterTerrain::LoadCache(FileCache &cache, Path path)$/;"	f	class:RasterTerrain
LoadCache	Terrain/RasterTerrain.hpp	/^  bool LoadCache(FileCache *cache, Path path) {$/;"	f	class:RasterTerrain
LoadCache	Terrain/RasterTile.cpp	/^RasterTile::LoadCache(FILE *file)$/;"	f	class:RasterTile
LoadCache	Terrain/RasterTileCache.cpp	/^RasterTileCache::LoadCache(FILE *file)$/;"	f	class:RasterTileCache
LoadChecklist	Dialogs/dlgChecklist.cpp	/^LoadChecklist()$/;"	f	file:
LoadClicked	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::LoadClicked()$/;"	f	class:PlaneListWidget
LoadColor	Profile/FlarmProfile.cpp	/^LoadColor(const ProfileMap &map,FlarmColorDatabase &db,$/;"	f	file:
LoadConfiguredTopography	Topography/TopographyGlue.cpp	/^LoadConfiguredTopography(TopographyStore &store,$/;"	f
LoadConfiguredTopographyZip	Topography/TopographyGlue.cpp	/^LoadConfiguredTopographyZip(TopographyStore &store,$/;"	f	file:
LoadContestClass	Device/Driver/LX/Declare.cpp	/^LoadContestClass(LX::ContestClass &lx_driver_ContestClass,$/;"	f	file:
LoadDefaultTask	Task/DefaultTask.cpp	/^LoadDefaultTask(const TaskBehaviour &task_behaviour,$/;"	f
LoadDefaults	Input/InputDefaults.cpp	/^InputEvents::LoadDefaults(InputConfig &input_config)$/;"	f	class:InputEvents
LoadFLARMnet	FLARM/Glue.cpp	/^LoadFLARMnet(FlarmNetDatabase &db)$/;"	f	file:
LoadFile	Dialogs/Plane/PlaneListDialog.cpp	/^LoadFile(Path path)$/;"	f	file:
LoadFile	FLARM/FlarmNetReader.cpp	/^FlarmNetReader::LoadFile(NLineReader &reader, FlarmNetDatabase &database)$/;"	f	class:FlarmNetReader
LoadFile	FLARM/FlarmNetReader.cpp	/^FlarmNetReader::LoadFile(Path path, FlarmNetDatabase &database)$/;"	f	class:FlarmNetReader
LoadFile	Profile/File.cpp	/^Profile::LoadFile(ProfileMap &map, Path path)$/;"	f	class:Profile
LoadFile	Profile/Profile.cpp	/^Profile::LoadFile(Path path)$/;"	f	class:Profile
LoadFile	Screen/Android/Bitmap.cpp	/^Bitmap::LoadFile(Path path)$/;"	f	class:Bitmap
LoadFile	Screen/Custom/Bitmap.cpp	/^Bitmap::LoadFile(Path path)$/;"	f	class:Bitmap
LoadFile	Screen/FreeType/Font.cpp	/^Font::LoadFile(const char *file, unsigned ptsize, bool bold, bool italic)$/;"	f	class:Font
LoadFile	Screen/GDI/Bitmap.cpp	/^Bitmap::LoadFile(Path path)$/;"	f	class:Bitmap
LoadFileToBuffer	Logger/GRecord.cpp	/^GRecord::LoadFileToBuffer(Path path)$/;"	f	class:GRecord
LoadFlarmDatabases	FLARM/Glue.cpp	/^LoadFlarmDatabases()$/;"	f
LoadFlarmNameFile	FLARM/NameFile.cpp	/^LoadFlarmNameFile(TLineReader &reader, FlarmNameDatabase &db)$/;"	f
LoadFromFile	Polar/PolarFileGlue.cpp	/^PolarGlue::LoadFromFile(PolarInfo &polar, NLineReader &reader)$/;"	f	class:PolarGlue
LoadFromFile	Polar/PolarFileGlue.cpp	/^PolarGlue::LoadFromFile(PolarInfo &polar, Path path)$/;"	f	class:PolarGlue
LoadFromOSLanguage	Units/UnitsGlue.cpp	/^Units::LoadFromOSLanguage()$/;"	f	class:Units
LoadFromOldProfile	Polar/PolarGlue.cpp	/^PolarGlue::LoadFromOldProfile(PolarInfo &polar)$/;"	f	class:PolarGlue
LoadFromProfile	Polar/PolarGlue.cpp	/^PolarGlue::LoadFromProfile()$/;"	f	class:PolarGlue
LoadFromProfile	Polar/PolarGlue.cpp	/^PolarGlue::LoadFromProfile(PolarInfo &polar)$/;"	f	class:PolarGlue
LoadFromProfile	Renderer/WaypointRendererSettings.cpp	/^WaypointRendererSettings::LoadFromProfile()$/;"	f	class:WaypointRendererSettings
LoadFromProfile	Weather/NOAAGlue.cpp	/^NOAAStore::LoadFromProfile()$/;"	f	class:NOAAStore
LoadFromString	Weather/NOAAGlue.cpp	/^NOAAStore::LoadFromString(const char *string)$/;"	f	class:NOAAStore
LoadGeoFile	Screen/Custom/GeoBitmap.cpp	/^Bitmap::LoadGeoFile(Path path)$/;"	f	class:Bitmap
LoadGeoTiff	Screen/Custom/LibTiff.cpp	/^LoadGeoTiff(Path path)$/;"	f
LoadInfoBoxes	PageActions.cpp	/^LoadInfoBoxes(const PageLayout::InfoBoxConfig &config)$/;"	f	file:
LoadJPEGFile	Screen/Apple/ImageDecoder.cpp	/^LoadJPEGFile(Path path)$/;"	f
LoadJPEGFile	Screen/Custom/LibJPEG.cpp	/^LoadJPEGFile(Path path)$/;"	f
LoadJPG2000	Terrain/Loader.cpp	/^LoadJPG2000(jas_stream_t *in, void *loader)$/;"	f	file:
LoadJPG2000	Terrain/Loader.cpp	/^TerrainLoader::LoadJPG2000(struct zzip_dir *dir, const char *path)$/;"	f	class:TerrainLoader
LoadLanguageFile	Language/LanguageGlue.cpp	/^LoadLanguageFile(Path path)$/;"	f	file:
LoadLayout	PageActions.cpp	/^PageActions::LoadLayout(const PageLayout &layout)$/;"	f	class:PageActions
LoadMacCreadyEditPanel	InfoBoxes/Panel/MacCreadyEdit.cpp	/^LoadMacCreadyEditPanel(unsigned id)$/;"	f
LoadMacCreadySetupPanel	InfoBoxes/Panel/MacCreadySetup.cpp	/^LoadMacCreadySetupPanel(unsigned id)$/;"	f
LoadMain	PageActions.cpp	/^LoadMain(PageLayout::Main main)$/;"	f	file:
LoadNextWaypointDetailsPanel	InfoBoxes/Content/Task.cpp	/^LoadNextWaypointDetailsPanel(unsigned id)$/;"	f	file:
LoadOrientation	Hardware/DisplayGlue.cpp	/^Display::LoadOrientation(VerboseOperationEnvironment &env)$/;"	f	class:Display
LoadOverview	Terrain/Loader.cpp	/^TerrainLoader::LoadOverview(struct zzip_dir *dir,$/;"	f	class:TerrainLoader
LoadPNG	Screen/Apple/ImageDecoder.cpp	/^LoadPNG(Path path)$/;"	f
LoadPNG	Screen/Apple/ImageDecoder.cpp	/^LoadPNG(const void *data, size_t size)$/;"	f
LoadPNG	Screen/Custom/LibPNG.cpp	/^LoadPNG(Path path)$/;"	f
LoadPNG	Screen/Custom/LibPNG.cpp	/^LoadPNG(const void *data, size_t size)$/;"	f
LoadPNG	Screen/Custom/LibPNG.cpp	/^LoadPNG(png_structp png_ptr, png_infop info_ptr,$/;"	f	file:
LoadPath	Profile/DeviceConfig.cpp	/^LoadPath(const ProfileMap &map, DeviceConfig &config, unsigned n)$/;"	f	file:
LoadPilotInfo	Device/Driver/LX/Declare.cpp	/^LoadPilotInfo(LX::Pilot &lx_driver_Pilot, const Declaration &declaration)$/;"	f	file:
LoadPoint	Dialogs/Plane/PolarShapeEditWidget.cpp	/^LoadPoint(PolarShapeEditWidget::PointEditor &pe, const PolarPoint &point)$/;"	f	file:
LoadPolarShape	Dialogs/Plane/PlanePolarDialog.cpp	/^  void LoadPolarShape(const PolarShape &shape) {$/;"	f	class:final	file:
LoadPortIndex	Profile/DeviceConfig.cpp	/^LoadPortIndex(const ProfileMap &map, DeviceConfig &config, unsigned n)$/;"	f	file:
LoadProfile	Startup.cpp	/^LoadProfile()$/;"	f	file:
LoadRadial	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::LoadRadial()$/;"	f	class:TargetWidget
LoadRange	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::LoadRange()$/;"	f	class:TargetWidget
LoadRangeAndRadial	Dialogs/Task/TargetDialog.cpp	/^  void LoadRangeAndRadial() {$/;"	f	class:TargetWidget
LoadRecord	FLARM/FlarmNetReader.cpp	/^LoadRecord(FlarmNetRecord &record, const char *line)$/;"	f	file:
LoadRepositoryFile	Dialogs/FileManager.cpp	/^ManagedFileListWidget::LoadRepositoryFile()$/;"	f	class:ManagedFileListWidget
LoadResource	Screen/Icon.cpp	/^MaskedIcon::LoadResource(ResourceId id, ResourceId big_id, bool center)$/;"	f	class:MaskedIcon
LoadResourceBitmap	Screen/Android/Bitmap.cpp	/^LoadResourceBitmap(ResourceId id)$/;"	f	file:
LoadScheme	Dialogs/Device/Vega/AudioParameters.hpp	/^  void LoadScheme(const VEGA_SCHEME::Audio &scheme) {$/;"	f	class:VegaAudioParametersWidget
LoadSecondary	FLARM/Glue.cpp	/^LoadSecondary(FlarmNameDatabase &db)$/;"	f	file:
LoadShape	Topography/TopographyFile.cpp	/^LoadShape(shapefileObj *file, const GeoPoint &center, int i,$/;"	f	file:
LoadStandbyRadioFrequencyEditPanel	InfoBoxes/Panel/RadioEdit.cpp	/^LoadStandbyRadioFrequencyEditPanel(unsigned id)$/;"	f
LoadStretch	Screen/Custom/ResourceBitmap.cpp	/^Bitmap::LoadStretch(ResourceId id, unsigned zoom)$/;"	f	class:Bitmap
LoadStretch	Screen/GDI/ResourceBitmap.cpp	/^Bitmap::LoadStretch(ResourceId id, unsigned zoom)$/;"	f	class:Bitmap
LoadString	FLARM/FlarmNetReader.cpp	/^LoadString(const char *bytes, size_t length, StaticString<size> &dest)$/;"	f	file:
LoadString	FLARM/FlarmNetReader.cpp	/^LoadString(const char *bytes, size_t length, TCHAR *res, size_t res_size)$/;"	f	file:
LoadTask	Device/Driver/LX/Declare.cpp	/^LoadTask(LX::Declaration &lx_driver_Declaration, const Declaration &declaration)$/;"	f	file:
LoadTask	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::LoadTask()$/;"	f	class:TaskListPanel
LoadTask	Task/Deserialiser.cpp	/^LoadTask(OrderedTask &task, const ConstDataNode &node,$/;"	f
LoadTask	Task/LoadFile.cpp	/^LoadTask(Path path, const TaskBehaviour &task_behaviour,$/;"	f
LoadTeamCodeDialog	InfoBoxes/Content/Team.cpp	/^LoadTeamCodeDialog(unsigned id)$/;"	f	file:
LoadTerrainOverview	Terrain/Loader.cpp	/^LoadTerrainOverview(struct zzip_dir *dir,$/;"	f
LoadTerrainOverview	Terrain/Loader.hpp	/^LoadTerrainOverview(struct zzip_dir *dir,$/;"	f
LoadTerrainRendererSettings	Profile/TerrainConfig.cpp	/^Profile::LoadTerrainRendererSettings(const ProfileMap &map,$/;"	f	class:Profile
LoadTextureAutoAlign	Screen/OpenGL/Texture.cpp	/^LoadTextureAutoAlign(GLint internal_format, PixelSize size,$/;"	f	file:
LoadTiff	Screen/Custom/LibTiff.cpp	/^LoadTiff(Path path)$/;"	f
LoadTiff	Screen/Custom/LibTiff.cpp	/^LoadTiff(TIFFRGBAImage &img)$/;"	f	file:
LoadTiff	Screen/Custom/LibTiff.cpp	/^LoadTiff(TiffLoader &tiff)$/;"	f	file:
LoadTrace	Renderer/TrailRenderer.cpp	/^TrailRenderer::LoadTrace(const TraceComputer &trace_computer)$/;"	f	class:TrailRenderer
LoadTrace	Renderer/TrailRenderer.cpp	/^TrailRenderer::LoadTrace(const TraceComputer &trace_computer,$/;"	f	class:TrailRenderer
LoadUTCOffset	Profile/ComputerProfile.cpp	/^LoadUTCOffset(const ProfileMap &map, RoughTimeDelta &value_r)$/;"	f	file:
LoadUnits	Profile/UnitsConfig.cpp	/^Profile::LoadUnits(const ProfileMap &map, UnitSetting &config)$/;"	f	class:Profile
LoadValue	Dialogs/Plane/PolarShapeEditWidget.cpp	/^LoadValue(WndProperty &e, double value, UnitGroup unit_group)$/;"	f	file:
LoadValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, Angle value)$/;"	f	class:RowFormWidget
LoadValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, RoughTime value)$/;"	f	class:RowFormWidget
LoadValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, bool value)$/;"	f	class:RowFormWidget
LoadValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, const TCHAR *value)$/;"	f	class:RowFormWidget
LoadValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, double value)$/;"	f	class:RowFormWidget
LoadValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, int value)$/;"	f	class:RowFormWidget
LoadValue	Widget/UnitRowFormWidget.cpp	/^RowFormWidget::LoadValue(unsigned i, double value, UnitGroup unit_group)$/;"	f	class:RowFormWidget
LoadValueEnum	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValueEnum(unsigned i, unsigned value)$/;"	f	class:RowFormWidget
LoadValueEnum	Widget/RowFormWidget.hpp	/^  void LoadValueEnum(unsigned i, T value) {$/;"	f	class:RowFormWidget
LoadValueTime	Widget/EditRowFormWidget.cpp	/^RowFormWidget::LoadValueTime(unsigned i, int value)$/;"	f	class:RowFormWidget
LoadWaypointFile	Waypoint/WaypointGlue.cpp	/^LoadWaypointFile(Waypoints &waypoints, Path path,$/;"	f	file:
LoadWaypointFile	Waypoint/WaypointGlue.cpp	/^LoadWaypointFile(Waypoints &waypoints, struct zzip_dir *dir, const char *path,$/;"	f	file:
LoadWaypoints	Waypoint/WaypointGlue.cpp	/^WaypointGlue::LoadWaypoints(Waypoints &way_points,$/;"	f	class:WaypointGlue
LoadWindEditPanel	InfoBoxes/Panel/WindEdit.cpp	/^LoadWindEditPanel(unsigned id)$/;"	f
LoadWithDialog	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::LoadWithDialog(unsigned i)$/;"	f	class:PlaneListWidget
LoadWorldFile	Terrain/Loader.cpp	/^LoadWorldFile(RasterTileCache &tile_cache,$/;"	f	file:
LoadWorldFile	Terrain/WorldFile.cpp	/^LoadWorldFile(struct zzip_dir *dir, const char *path,$/;"	f
LocalObject	Java/Object.hxx	/^	typedef LocalRef<jobject> LocalObject;$/;"	t	namespace:Java
LocalPath	Dialogs/FileManager.cpp	/^LocalPath(const AvailableFile &file)$/;"	f	file:
LocalPath	LocalPath.cpp	/^LocalPath(Path file)$/;"	f
LocalPath	LocalPath.cpp	/^LocalPath(const TCHAR *file)$/;"	f
LocalRef	Java/Class.hxx	/^			:LocalRef<jclass>(env, cls) {}$/;"	f	class:Java::Class
LocalRef	Java/Class.hxx	/^			:LocalRef<jclass>(env, env->FindClass(name)) {}$/;"	f	class:Java::Class
LocalRef	Java/Ref.hxx	/^	class LocalRef {$/;"	c	namespace:Java
LocalRef	Java/String.hxx	/^			:LocalRef<jstring>(_env, _env->NewStringUTF(_value)) {}$/;"	f	class:Java::String
LocalRef	Java/String.hxx	/^			:LocalRef<jstring>(env, value) {}$/;"	f	class:Java::String
LocalTime	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  LocalTime,$/;"	e	enum:ControlIndex	file:
LocalTime	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  LocalTime,$/;"	e	enum:Controls	file:
LocatePoint	Math/Line2D.hpp	/^  constexpr product_type LocatePoint(Point p) const {$/;"	f	struct:Line2D
Location	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Location,$/;"	e	enum:Controls	file:
LocationMapItem	MapWindow/Items/MapItem.hpp	/^  LocationMapItem(const GeoVector &_vector, double _elevation)$/;"	f	struct:LocationMapItem
LocationMapItem	MapWindow/Items/MapItem.hpp	/^struct LocationMapItem: public MapItem$/;"	s
Lock	Screen/FB/TopCanvas.cpp	/^TopCanvas::Lock()$/;"	f	class:TopCanvas
Lock	Screen/SDL/TopCanvas.cpp	/^TopCanvas::Lock()$/;"	f	class:TopCanvas
LockCPU	Hardware/CPU.cpp	/^LockCPU()$/;"	f
LockCalculatorUI	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::LockCalculatorUI()$/;"	f	class:TargetWidget
LockReceiveData	Operation/ThreadedOperationEnvironment.hpp	/^  Data LockReceiveData() {$/;"	f	class:ThreadedOperationEnvironment
LockSetProgressPosition	Operation/ThreadedOperationEnvironment.hpp	/^  bool LockSetProgressPosition(unsigned position) {$/;"	f	class:ThreadedOperationEnvironment
LockSetProgressRange	Operation/ThreadedOperationEnvironment.hpp	/^  bool LockSetProgressRange(unsigned range) {$/;"	f	class:ThreadedOperationEnvironment
LockStop	Thread/StandbyThread.hpp	/^  void LockStop() {$/;"	f	class:StandbyThread
LockTarget	Engine/Task/Ordered/Points/AATPoint.hpp	/^  void LockTarget(bool do_lock) {$/;"	f	class:final
LockTrigger	Thread/StandbyThread.hpp	/^  void LockTrigger() {$/;"	f	class:StandbyThread
LockWaitDone	Thread/StandbyThread.hpp	/^  void LockWaitDone() {$/;"	f	class:StandbyThread
LockedCopyTo	Computer/TraceComputer.cpp	/^TraceComputer::LockedCopyTo(TracePointVector &v) const$/;"	f	class:TraceComputer
LockedCopyTo	Computer/TraceComputer.cpp	/^TraceComputer::LockedCopyTo(TracePointVector &v, unsigned min_time,$/;"	f	class:TraceComputer
LockedCopyTraceTo	Computer/TaskComputer.hpp	/^  void LockedCopyTraceTo(TracePointVector &v) const {$/;"	f	class:TaskComputer
LockedCopyTraceTo	Computer/TaskComputer.hpp	/^  void LockedCopyTraceTo(TracePointVector &v, unsigned min_time,$/;"	f	class:TaskComputer
Log	Logger/NMEALogger.cpp	/^NMEALogger::Log(const char *text)$/;"	f	class:NMEALogger
LogComputer	Computer/LogComputer.cpp	/^LogComputer::LogComputer()$/;"	f	class:LogComputer
LogComputer	Computer/LogComputer.hpp	/^class LogComputer {$/;"	c
LogDebug	LogFile.hpp	52;"	d
LogDebug	LogFile.hpp	58;"	d
LogEmptyFRecord	IGC/IGCWriter.cpp	/^IGCWriter::LogEmptyFRecord(const BrokenTime &time)$/;"	f	class:IGCWriter
LogEvent	IGC/IGCWriter.cpp	/^IGCWriter::LogEvent(const BrokenTime &time, const char *event)$/;"	f	class:IGCWriter
LogEvent	IGC/IGCWriter.cpp	/^IGCWriter::LogEvent(const IGCFix &fix, int epe, int satellites,$/;"	f	class:IGCWriter
LogEvent	IGC/IGCWriter.cpp	/^IGCWriter::LogEvent(const NMEAInfo &gps_info, const char *event)$/;"	f	class:IGCWriter
LogEvent	Logger/FlightLogger.cpp	/^FlightLogger::LogEvent(const BrokenDateTime &date_time, const char *type)$/;"	f	class:FlightLogger
LogEvent	Logger/Logger.cpp	/^Logger::LogEvent(const NMEAInfo &gps_info, const char* event)$/;"	f	class:Logger
LogEvent	Logger/LoggerImpl.cpp	/^LoggerImpl::LogEvent(const NMEAInfo &gps_info, const char *event)$/;"	f	class:LoggerImpl
LogFRecord	IGC/IGCWriter.cpp	/^IGCWriter::LogFRecord(const BrokenTime &time, const int *satellite_ids)$/;"	f	class:IGCWriter
LogFileDate	Logger/IGCFileCleanup.cpp	/^LogFileDate(unsigned current_year, const TCHAR *filename)$/;"	f	file:
LogFinishEvent	Logger/Logger.cpp	/^Logger::LogFinishEvent(const NMEAInfo &gps_info)$/;"	f	class:Logger
LogInt	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    LogInt,$/;"	e	enum:final::Controls
LogLastError	OS/LogError.cpp	/^LogLastError(const TCHAR *fmt, ...)$/;"	f
LogMode	Device/Driver/CAI302/Protocol.cpp	/^CAI302::LogMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
LogModeQuick	Device/Driver/CAI302/Protocol.cpp	/^CAI302::LogModeQuick(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
LogPoint	IGC/IGCWriter.cpp	/^IGCWriter::LogPoint(const IGCFix &fix, int epe, int satellites)$/;"	f	class:IGCWriter
LogPoint	IGC/IGCWriter.cpp	/^IGCWriter::LogPoint(const NMEAInfo& gps_info)$/;"	f	class:IGCWriter
LogPoint	Logger/Logger.cpp	/^Logger::LogPoint(const NMEAInfo &gps_info)$/;"	f	class:Logger
LogPoint	Logger/LoggerImpl.cpp	/^LoggerImpl::LogPoint(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
LogPointToBuffer	Logger/LoggerImpl.cpp	/^LoggerImpl::LogPointToBuffer(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
LogStartEvent	Logger/Logger.cpp	/^Logger::LogStartEvent(const NMEAInfo &gps_info)$/;"	f	class:Logger
Logger	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Logger,$/;"	e	enum:Controls	file:
Logger	Logger/Logger.hpp	/^class Logger {$/;"	c
LoggerClearFreeSpace	Logger/Logger.cpp	/^Logger::LoggerClearFreeSpace(unsigned current_year)$/;"	f	class:Logger
LoggerConfigPanel	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerConfigPanel()$/;"	f	class:final
LoggerFRecord	Logger/LoggerFRecord.hpp	/^class LoggerFRecord$/;"	c
LoggerID	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerID,$/;"	e	enum:ControlIndex	file:
LoggerID	Profile/ProfileKeys.cpp	/^const char LoggerID[] = "LoggerID";$/;"	m	namespace:ProfileKeys	file:
LoggerImpl	Logger/LoggerImpl.cpp	/^LoggerImpl::LoggerImpl()$/;"	f	class:LoggerImpl
LoggerImpl	Logger/LoggerImpl.hpp	/^class LoggerImpl$/;"	c
LoggerNote	IGC/IGCWriter.cpp	/^IGCWriter::LoggerNote(const TCHAR *text)$/;"	f	class:IGCWriter
LoggerNote	Logger/Logger.cpp	/^Logger::LoggerNote(const TCHAR *text)$/;"	f	class:Logger
LoggerNote	Logger/LoggerImpl.cpp	/^LoggerImpl::LoggerNote(const TCHAR *text)$/;"	f	class:LoggerImpl
LoggerSettings	Logger/Settings.hpp	/^struct LoggerSettings {$/;"	s
LoggerShort	Profile/ProfileKeys.cpp	/^const char LoggerShort[] = "LoggerShortName";$/;"	m	namespace:ProfileKeys	file:
LoggerTimeStepCircling	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerTimeStepCircling,$/;"	e	enum:ControlIndex	file:
LoggerTimeStepCircling	Profile/ProfileKeys.cpp	/^const char LoggerTimeStepCircling[] = "LoggerTimeStepCircling";$/;"	m	namespace:ProfileKeys	file:
LoggerTimeStepCruise	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  LoggerTimeStepCruise,$/;"	e	enum:ControlIndex	file:
LoggerTimeStepCruise	Profile/ProfileKeys.cpp	/^const char LoggerTimeStepCruise[] = "LoggerTimeStepCruise";$/;"	m	namespace:ProfileKeys	file:
LogoQuitWidget	Dialogs/StartupDialog.cpp	/^  LogoQuitWidget(const ButtonLook &_look, ActionListener &_action_listener)$/;"	f	class:final
LogoView	Gauge/LogoView.cpp	/^LogoView::LogoView()$/;"	f	class:LogoView
LogoView	Gauge/LogoView.hpp	/^class LogoView {$/;"	c
Longitudes	Device/Driver/LX/Protocol.hpp	/^    int32_t Longitudes[NUMTPS];$/;"	m	struct:LX::Declaration
Longitudes	Device/Driver/LXERA/Protocol.hpp	/^    int32_t Longitudes[NUMTPS];$/;"	m	struct:LXEra::Declaration
Look	Look/Look.hpp	/^struct Look {$/;"	s
LookUp	Form/DataField/ComboList.cpp	/^ComboList::LookUp(int int_value)$/;"	f	class:ComboList
Lookup	Form/DataField/File.cpp	/^FileDataField::Lookup(Path text)$/;"	f	class:FileDataField
Lookup	OS/DynamicLibrary.hpp	/^  FARPROC WINAPI Lookup(const TCHAR *name) const {$/;"	f	class:DynamicLibrary
LookupCallsign	FLARM/FlarmDetails.cpp	/^FlarmDetails::LookupCallsign(FlarmId id)$/;"	f	class:FlarmDetails
LookupId	Engine/Waypoint/Waypoints.cpp	/^Waypoints::LookupId(const unsigned id) const$/;"	f	class:Waypoints
LookupId	FLARM/FlarmDetails.cpp	/^FlarmDetails::LookupId(const TCHAR *cn)$/;"	f	class:FlarmDetails
LookupLocation	Engine/Waypoint/Waypoints.cpp	/^Waypoints::LookupLocation(const GeoPoint &loc, const double range) const$/;"	f	class:Waypoints
LookupMacro	Menu/ExpandMacros.cpp	/^LookupMacro(const TCHAR *name, bool &invalid)$/;"	f	file:
LookupName	Engine/Waypoint/Waypoints.cpp	/^Waypoints::LookupName(const TCHAR *name) const$/;"	f	class:Waypoints
LookupName	Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr LookupName(const tstring &name) const {$/;"	f	class:Waypoints
LookupPointer	Lua/Associate.cpp	/^Lua::LookupPointer(lua_State *L, const char *table, void *p)$/;"	f	class:Lua
LookupRecord	FLARM/FlarmDetails.cpp	/^FlarmDetails::LookupRecord(FlarmId id)$/;"	f	class:FlarmDetails
LookupSeparation	Geo/Geoid.cpp	/^EGM96::LookupSeparation(const GeoPoint &pt)$/;"	f	class:EGM96
LookupSize	Screen/Custom/Cache.cpp	/^TextCache::LookupSize(const Font &font, const char *text)$/;"	f	class:TextCache
LookupWeatherTerrainStyle	Weather/Rasp/RaspRenderer.cpp	/^LookupWeatherTerrainStyle(const TCHAR *name)$/;"	f	file:
LowPassFilter	Math/LowPassFilter.hpp	/^LowPassFilter(double y_last, double x_in, double fact)$/;"	f
LowerFloor	Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::LowerFloor(const double new_floor)$/;"	f	class:ThermalEncounterCollection
LowerVolume	Audio/AudioAlgorithms.hpp	/^inline void LowerVolume(int16_t *buffer, size_t num_frames,$/;"	f
Lua	Lua/Airspace.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Assert.hxx	/^namespace Lua {$/;"	n
Lua	Lua/Associate.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Background.cpp	/^namespace Lua {$/;"	n	file:
Lua	Lua/Background.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Basic.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Blackboard.cpp	/^namespace Lua {$/;"	n	file:
Lua	Lua/Blackboard.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Catch.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Class.hxx	/^namespace Lua {$/;"	n
Lua	Lua/Dialogs.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Error.cxx	/^namespace Lua {$/;"	n	file:
Lua	Lua/Error.hxx	/^namespace Lua {$/;"	n
Lua	Lua/Full.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Geo.cpp	/^namespace Lua {$/;"	n	file:
Lua	Lua/Geo.hpp	/^namespace Lua {$/;"	n
Lua	Lua/InputEvent.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Legacy.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Log.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Logger.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Map.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Persistent.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Ptr.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Replay.hpp	/^namespace Lua {$/;"	n
Lua	Lua/RunFile.hxx	/^namespace Lua {$/;"	n
Lua	Lua/Settings.hpp	/^namespace Lua {$/;"	n
Lua	Lua/StartFile.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Task.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Timer.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Tracking.hpp	/^namespace Lua {$/;"	n
Lua	Lua/Util.hxx	/^namespace Lua {$/;"	n
Lua	Lua/Value.hxx	/^namespace Lua {$/;"	n
Lua	Lua/Wind.hpp	/^namespace Lua {$/;"	n
LuaEventRegistry	Lua/InputEvent.cpp	/^class LuaEventRegistry {$/;"	c	file:
LuaInputEvent	Lua/InputEvent.cpp	/^  explicit LuaInputEvent(lua_State *_l, int callback_idx):L(_l), callback(L, Lua::StackIndex(callback_idx)) {$/;"	f	class:final
LuaTimer	Lua/Timer.cpp	/^  explicit LuaTimer(lua_State *L, int callback_idx)$/;"	f	class:final
Luminosity8	Screen/PortableColor.hpp	/^  constexpr Luminosity8(uint8_t _value)$/;"	f	class:Luminosity8
Luminosity8	Screen/PortableColor.hpp	/^  constexpr Luminosity8(uint8_t r, uint8_t g, uint8_t b)$/;"	f	class:Luminosity8
Luminosity8	Screen/PortableColor.hpp	/^  explicit constexpr Luminosity8(RGB8Color color)$/;"	f	class:Luminosity8
Luminosity8	Screen/PortableColor.hpp	/^class Luminosity8 {$/;"	c
MACCREADY	Dialogs/dlgAnalysis.hpp	/^  MACCREADY,$/;"	m	class:AnalysisPage
MACCREADY_HPP	Engine/GlideSolvers/MacCready.hpp	23;"	d
MACCREADY_INSUFFICIENT	Engine/GlideSolvers/GlideResult.hpp	/^    MACCREADY_INSUFFICIENT,$/;"	m	class:GlideResult::Validity
MACROS_HPP	Util/Macros.hpp	31;"	d
MAGENTA	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    MAGENTA,$/;"	e	enum:final::Buttons	file:
MAGENTA	FLARM/Color.hpp	/^  MAGENTA,$/;"	m	class:FlarmColor
MAGIC	Tracking/SkyLines/Protocol.hpp	/^static const uint32_t MAGIC = 0x5df4b67b;$/;"	m	namespace:SkyLinesTracking
MAGNIFY	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    MAGNIFY, SHRINK,$/;"	e	enum:final::Buttons	file:
MAIN	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    MAIN,$/;"	e	enum:final::Controls	file:
MAKELANGID	Units/UnitsGlue.cpp	62;"	d	file:
MAKE_RESOURCE	Resources.hpp	157;"	d
MAKE_RESOURCE	Resources.hpp	15;"	d
MAKE_RESOURCE	Resources.hpp	5;"	d
MANAGE	Device/Driver.hpp	/^    MANAGE = 0x10,$/;"	e	enum:DeviceRegister::__anon196
MANAGE	Dialogs/Device/DeviceListDialog.cpp	/^    RECONNECT, FLIGHT, EDIT, MANAGE, MONITOR,$/;"	e	enum:final::Buttons	file:
MANUAL	Engine/Task/Ordered/TaskAdvance.hpp	/^    MANUAL = 0,$/;"	e	enum:TaskAdvance::State
MANUAL	NMEA/Derived.hpp	/^    MANUAL,$/;"	m	class:DerivedInfo::WindSource
MANUAL_HXX	Util/Manual.hxx	31;"	d
MANUAL_INPUT	NMEA/GPSState.hpp	/^  MANUAL_INPUT,$/;"	m	class:FixQuality
MAP	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^  MAP = 100,$/;"	e	enum:Buttons	file:
MAP	Dialogs/Traffic/TrafficList.cpp	/^  MAP,$/;"	e	enum:Buttons	file:
MAP	Engine/Waypoint/Origin.hpp	/^  MAP,$/;"	m	class:WaypointOrigin
MAP	PageSettings.hpp	/^    MAP,$/;"	m	class:PageLayout::Main
MAP	Repository/FileType.hpp	/^  MAP,$/;"	m	class:FileType
MAP	Waypoint/WaypointFilter.hpp	/^  MAP,$/;"	m	class:TypeFilter
MAPDISPLAYCONFIGPANEL_HPP	Dialogs/Settings/Panels/MapDisplayConfigPanel.hpp	25;"	d
MAPERROR_H	Topography/shapelib/maperror.h	31;"	d
MAPPRIMITIVE_H	Topography/shapelib/mapprimitive.h	31;"	d
MAPSCALE_RENDERER_HPP	Renderer/MapScaleRenderer.hpp	25;"	d
MAPSHAPE_H	Topography/shapelib/mapshape.h	31;"	d
MAPTASKMANAGER_H	Task/MapTaskManager.hpp	24;"	d
MAPTREE_H	Topography/shapelib/maptree.h	31;"	d
MAP_DRAW_HELPER_HPP	MapWindow/StencilMapCanvas.hpp	25;"	d
MAP_FAILED	zzip/__mmap.h	39;"	d
MAP_FAILED	zzip/__mmap.h	45;"	d
MAP_FAILED	zzip/__mmap.h	90;"	d
MAP_H	Topography/shapelib/mapserver.h	30;"	d
MAP_SETTINGS_BLACKBOARD_HPP	Blackboard/MapSettingsBlackboard.hpp	25;"	d
MAP_SHIFT_BIAS	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  MAP_SHIFT_BIAS,$/;"	e	enum:ControlIndex	file:
MAP_WINDOW_BLACKBOARD_H	MapWindow/MapWindowBlackboard.hpp	25;"	d
MARKER	Engine/Waypoint/Waypoint.hpp	/^    MARKER,$/;"	m	class:Waypoint::Type
MASS	Units/Group.hpp	/^  MASS,$/;"	m	class:UnitGroup
MAT	Engine/Task/Factory/TaskFactoryType.hpp	/^  MAT,$/;"	m	class:TaskFactoryType
MATCH	Dialogs/ProfilePasswordDialog.hpp	/^  MATCH,$/;"	m	class:ProfilePasswordResult
MATE_CODE	Dialogs/Traffic/TeamCodeDialog.cpp	/^    MATE_CODE,$/;"	e	enum:final::Buttons	file:
MATZ	Engine/Airspace/AirspaceClass.hpp	/^  MATZ,$/;"	e	enum:uint8_t
MAT_CYLINDER	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  MAT_CYLINDER,$/;"	m	class:TaskPointFactoryType
MAT_CYLINDER	Engine/Task/ObservationZones/ObservationZone.hpp	/^    MAT_CYLINDER,$/;"	m	class:ObservationZone::Shape
MAT_RADIUS	Engine/Task/ObservationZones/CylinderZone.hpp	/^  static constexpr double MAT_RADIUS = 1609.344;$/;"	m	class:CylinderZone
MAX	Form/DataField/Angle.hpp	/^  static constexpr unsigned MAX = 360u;$/;"	m	class:final
MAX	Screen/OpenGL/Color.hpp	/^  static constexpr Component MAX = 1u << 16u;$/;"	m	class:Color
MAX	Time/RoughTime.hpp	/^  static constexpr uint16_t MAX = 24 * 60;$/;"	m	class:RoughTime
MAXDETAILS	Dialogs/dlgChecklist.cpp	39;"	d	file:
MAXEFFICIENCYSHOW	Computer/GlideRatioCalculator.cpp	/^static constexpr double MAXEFFICIENCYSHOW = 200;$/;"	v	file:
MAXENTRYLETTERS	Dialogs/KnobTextEntry.cpp	/^static constexpr unsigned MAXENTRYLETTERS = ARRAY_SIZE(EntryLetters) - 1;$/;"	v	file:
MAXLISTS	Dialogs/dlgChecklist.cpp	41;"	d	file:
MAXMESSAGES	PopupMessage.hpp	/^  static constexpr unsigned MAXMESSAGES = 20;$/;"	m	class:PopupMessage
MAXSATELLITES	NMEA/GPSState.hpp	/^  static constexpr unsigned MAXSATELLITES = 12;$/;"	m	struct:GPSState
MAXTITLE	Dialogs/dlgChecklist.cpp	38;"	d	file:
MAXTOPOGRAPHY	Topography/TopographyStore.hpp	/^  static constexpr unsigned MAXTOPOGRAPHY = 30;$/;"	m	class:TopographyStore
MAX_ACTIVE_TILES	Terrain/RasterTileCache.hpp	/^  static constexpr unsigned MAX_ACTIVE_TILES = 128;$/;"	m	class:RasterTileCache
MAX_ACTIVE_TILES	Terrain/RasterTileCache.hpp	/^  static constexpr unsigned MAX_ACTIVE_TILES = 512;$/;"	m	class:RasterTileCache
MAX_ANGLE	Screen/OpenGL/VertexArray.hpp	/^  static constexpr unsigned MAX_ANGLE = CIRCLE_SIZE * 2u;$/;"	m	struct:GLDonutVertices
MAX_BALLAST	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    MAX_BALLAST,$/;"	e	enum:final::Controls	file:
MAX_BUTTONS	Menu/MenuBar.hpp	/^  static constexpr unsigned MAX_BUTTONS = 32;$/;"	m	class:MenuBar
MAX_BUTTONS	Widget/KeyboardWidget.hpp	/^  static constexpr unsigned MAX_BUTTONS = 40;$/;"	m	class:KeyboardWidget
MAX_CONTENTS	InfoBoxes/InfoBoxSettings.hpp	/^    static constexpr unsigned MAX_CONTENTS = 24;$/;"	m	struct:InfoBoxSettings::Panel
MAX_COUNT	FLARM/List.hpp	/^  static constexpr size_t MAX_COUNT = 25;$/;"	m	struct:TrafficList
MAX_COUNT	GliderLink/List.hpp	/^  static constexpr size_t MAX_COUNT = 25;$/;"	m	struct:GliderLinkTrafficList
MAX_DISTANCE_PX	Screen/Custom/DoubleClick.hpp	/^  static constexpr unsigned MAX_DISTANCE_PX = IsKobo()? 70 : 50;$/;"	m	class:DoubleClick
MAX_EVENTS	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_EVENTS = 2048;$/;"	m	struct:InputConfig
MAX_FILES	Form/DataField/File.hpp	/^  static constexpr unsigned MAX_FILES = 512;$/;"	m	class:final
MAX_FREQUENCY	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  MAX_FREQUENCY,$/;"	e	enum:ControlIndex	file:
MAX_GCE_QUEUE	Input/InputQueue.cpp	36;"	d	file:
MAX_HISTORY	Computer/ClimbAverageCalculator.hpp	/^  static constexpr int MAX_HISTORY = 40;$/;"	m	class:ClimbAverageCalculator
MAX_IGC_BUFF	IGC/IGCWriter.hpp	/^    MAX_IGC_BUFF = 255,$/;"	e	enum:IGCWriter::__anon210
MAX_ITEMS	Form/GridView.hpp	/^  static constexpr unsigned MAX_ITEMS = 32;$/;"	m	class:GridView
MAX_ITEMS	Menu/MenuData.hpp	/^    MAX_ITEMS = 32,$/;"	e	enum:Menu::__anon16
MAX_KEY	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 0600;$/;"	m	struct:InputConfig
MAX_KEY	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 0x100;$/;"	m	struct:InputConfig
MAX_KEY	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 255;$/;"	m	struct:InputConfig
MAX_KEY	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_KEY = 400;$/;"	m	struct:InputConfig
MAX_KHZ	RadioFrequency.hpp	/^  static constexpr unsigned MAX_KHZ = BASE_KHZ + 37000;$/;"	m	class:RadioFrequency
MAX_LENGTH	Form/DigitEntry.hpp	/^  static constexpr unsigned MAX_LENGTH = 16;$/;"	m	class:CoordinateFormat
MAX_LINES	Topography/XShape.hpp	/^  static constexpr unsigned MAX_LINES = 32;$/;"	m	class:XShape
MAX_MACCREADY	Renderer/MacCreadyRenderer.cpp	35;"	d	file:
MAX_MAIN_MENU_ITEMS	Form/TabMenuDisplay.hpp	/^  static constexpr unsigned MAX_MAIN_MENU_ITEMS = 7;$/;"	m	class:final
MAX_MIXER_SOURCES_COUNT	Audio/PCMMixerDataSource.hpp	/^  static constexpr unsigned MAX_MIXER_SOURCES_COUNT = 2;$/;"	m	class:PCMMixerDataSource
MAX_MODE	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_MODE = 32;$/;"	m	struct:InputConfig
MAX_MODE_STRING	Input/InputConfig.hpp	/^  static constexpr unsigned MAX_MODE_STRING = 24;$/;"	m	struct:InputConfig
MAX_NAME_LENGTH	Device/Driver/KRT2.cpp	/^  static constexpr size_t MAX_NAME_LENGTH = 8; \/\/!< Max. radio station name length.$/;"	m	class:final	file:
MAX_NMEA_QUEUE	Input/InputQueue.cpp	38;"	d	file:
MAX_PAGES	PageSettings.hpp	/^  static constexpr unsigned MAX_PAGES = 8;$/;"	m	struct:PageSettings
MAX_PAGES	PageState.hpp	/^  static constexpr unsigned MAX_PAGES = PageSettings::MAX_PAGES;$/;"	m	struct:PagesState
MAX_PANELS	InfoBoxes/InfoBoxSettings.hpp	/^  static constexpr unsigned MAX_PANELS = 8;$/;"	m	struct:InfoBoxSettings
MAX_PATH	unix/windef.h	28;"	d
MAX_RTC_TILES	Terrain/RasterTileCache.hpp	/^  static constexpr unsigned MAX_RTC_TILES = 4096;$/;"	m	class:RasterTileCache
MAX_SCRIPTS	Kobo/ToolsDialog.cpp	/^  const unsigned MAX_SCRIPTS = 12;$/;"	m	class:final	file:
MAX_SIZE	Engine/Task/Solvers/TaskMacCready.hpp	/^  static constexpr unsigned MAX_SIZE = 32;$/;"	m	class:TaskMacCready
MAX_SIZE	Form/DataField/ComboList.hpp	/^  static constexpr unsigned MAX_SIZE = 512;$/;"	m	class:ComboList
MAX_SIZE	IO/BufferedReader.hxx	/^	static constexpr size_t MAX_SIZE = 512 * 1024;$/;"	m	class:BufferedReader
MAX_SOURCES	NMEA/ThermalLocator.hpp	/^  static constexpr unsigned MAX_SOURCES = 20;$/;"	m	struct:ThermalLocatorInfo
MAX_SPEED	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    MAX_SPEED,$/;"	e	enum:final::Controls	file:
MAX_STAGES	Engine/PathSolvers/NavDijkstra.hpp	/^  static constexpr unsigned MAX_STAGES = 32;$/;"	m	class:NavDijkstra
MAX_STR_LEN	Topography/shapelib/mapstring.c	59;"	d	file:
MAX_SUBNODES	Topography/shapelib/maptree.h	43;"	d
MAX_TEXTENTRY	Dialogs/KnobTextEntry.cpp	/^static constexpr size_t MAX_TEXTENTRY = 40;$/;"	v	file:
MAX_TEXTENTRY	Dialogs/TouchTextEntry.cpp	/^static constexpr size_t MAX_TEXTENTRY = 40;$/;"	v	file:
MAX_THERMAL	Cloud/Sender.hpp	/^  static constexpr size_t MAX_THERMAL =$/;"	m	class:ThermalResponseSender
MAX_THERMAL_AGE	Cloud/Main.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_THERMAL_AGE = std::chrono::minutes(30);$/;"	v	file:
MAX_THERMAL_AGE	Cloud/ToKML.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_THERMAL_AGE = std::chrono::hours(12);$/;"	v	file:
MAX_THERMAL_SIZE	Cloud/Sender.hpp	/^  static constexpr size_t MAX_THERMAL_SIZE = 1024;$/;"	m	class:ThermalResponseSender
MAX_TRAFFIC	Cloud/Sender.hpp	/^  static constexpr size_t MAX_TRAFFIC =$/;"	m	class:TrafficResponseSender
MAX_TRAFFIC_AGE	Cloud/Main.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_TRAFFIC_AGE = std::chrono::minutes(15);$/;"	v	file:
MAX_TRAFFIC_AGE	Cloud/ToKML.cpp	/^static constexpr std::chrono::steady_clock::duration MAX_TRAFFIC_AGE = std::chrono::hours(12);$/;"	v	file:
MAX_TRAFFIC_SIZE	Cloud/Sender.hpp	/^  static constexpr size_t MAX_TRAFFIC_SIZE = 1024;$/;"	m	class:TrafficResponseSender
MAX_TYPE_VAL	InfoBoxes/Content/Type.hpp	/^  static constexpr Type MAX_TYPE_VAL = (Type)(e_NUM_TYPES - 1);$/;"	m	namespace:InfoBoxFactory
MAX_WEATHER_MAP	Weather/Rasp/RaspStore.hpp	/^  static constexpr unsigned MAX_WEATHER_MAP = 16; \/**< Max number of items stored *\/$/;"	m	class:RaspStore
MAX_WEATHER_TIMES	Weather/Rasp/RaspStore.hpp	/^  static constexpr unsigned MAX_WEATHER_TIMES = 48; \/**< Max time segments of each item *\/$/;"	m	class:RaspStore
MB_ABORTRETRYIGNORE	Dialogs/Message.hpp	/^  MB_ABORTRETRYIGNORE,$/;"	e	enum:__anon12
MB_ICONERROR	Dialogs/Message.hpp	/^  MB_ICONERROR = 0x100,$/;"	e	enum:__anon12
MB_ICONEXCLAMATION	Dialogs/Message.hpp	/^  MB_ICONEXCLAMATION = 0x40,$/;"	e	enum:__anon12
MB_ICONINFORMATION	Dialogs/Message.hpp	/^  MB_ICONINFORMATION = 0x10,$/;"	e	enum:__anon12
MB_ICONQUESTION	Dialogs/Message.hpp	/^  MB_ICONQUESTION = 0x80,$/;"	e	enum:__anon12
MB_ICONWARNING	Dialogs/Message.hpp	/^  MB_ICONWARNING = 0x20,$/;"	e	enum:__anon12
MB_OK	Dialogs/Message.hpp	/^  MB_OK,$/;"	e	enum:__anon12
MB_OKCANCEL	Dialogs/Message.hpp	/^  MB_OKCANCEL,$/;"	e	enum:__anon12
MB_RETRYCANCEL	Dialogs/Message.hpp	/^  MB_RETRYCANCEL,$/;"	e	enum:__anon12
MB_YESNO	Dialogs/Message.hpp	/^  MB_YESNO,$/;"	e	enum:__anon12
MB_YESNOCANCEL	Dialogs/Message.hpp	/^  MB_YESNOCANCEL,$/;"	e	enum:__anon12
MC	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  MC,$/;"	e	enum:Controls	file:
MC_CEILING_PENALTY_FACTOR	Engine/Route/RoutePolars.cpp	29;"	d	file:
MD5	Util/MD5.hpp	/^class MD5$/;"	c
MD5_HPP	Util/MD5.hpp	24;"	d
MESSAGELENGTH	Topography/shapelib/maperror.h	90;"	d
METAR	Weather/METAR.hpp	/^struct METAR$/;"	s
METARLine	Weather/METARParser.cpp	/^  METARLine(const TCHAR *line)$/;"	f	class:METARLine
METARLine	Weather/METARParser.cpp	/^class METARLine {$/;"	c	file:
METARParser	Weather/METARParser.cpp	/^namespace METARParser$/;"	n	file:
METARParser	Weather/METARParser.hpp	/^namespace METARParser$/;"	n
METAR_HPP	Weather/METAR.hpp	25;"	d
METAR_PARSER_HPP	Weather/METARParser.hpp	25;"	d
METER	Units/Unit.hpp	/^  METER,$/;"	m	class:Unit
METER_PER_SECOND	Units/Unit.hpp	/^  METER_PER_SECOND,$/;"	m	class:Unit
MFR_ID	Device/Driver/Volkslogger/vlconv.cpp	43;"	d	file:
MFR_ID2	Device/Driver/Volkslogger/vlconv.cpp	44;"	d	file:
MIDDLE	NMEA/SwitchState.hpp	/^    MIDDLE,$/;"	m	class:SwitchState::UserSwitch
MILLIBAR	Units/Unit.hpp	/^  MILLIBAR,$/;"	m	class:Unit
MINI	Kobo/Model.hpp	/^  MINI,$/;"	m	class:KoboModel
MINMAX_OFFSET	Engine/Route/AStar.hpp	/^  static constexpr unsigned MINMAX_OFFSET = 134217727;$/;"	m	struct:AStarPriorityValue
MIN_FLOOR_CLEARANCE	Engine/Route/ReachFan.cpp	/^static constexpr int MIN_FLOOR_CLEARANCE = 100;$/;"	v	file:
MIN_FREQUENCY	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  MIN_FREQUENCY,$/;"	e	enum:ControlIndex	file:
MIN_KHZ	RadioFrequency.hpp	/^  static constexpr unsigned MIN_KHZ = BASE_KHZ + 18000;$/;"	m	class:RadioFrequency
MIN_PERIOD_MS	Tracking/SkyLines/Queue.hpp	/^  static constexpr unsigned MIN_PERIOD_MS = 25000;$/;"	m	class:SkyLinesTracking::Queue
MIN_RATE	Renderer/TrackLineRenderer.cpp	/^static constexpr Angle MIN_RATE = Angle::Degrees(1.0); \/\/ degrees\/s$/;"	v	file:
MIN_TIME	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  MIN_TIME,$/;"	e	enum:Controls	file:
MIN_TURN_RATE	Computer/CirclingComputer.cpp	/^static constexpr Angle MIN_TURN_RATE = Angle::Degrees(4);$/;"	v	file:
MIN_TYPE_VAL	InfoBoxes/Content/Type.hpp	/^  static constexpr Type MIN_TYPE_VAL = (Type)0;$/;"	m	namespace:InfoBoxFactory
MIN_VALID_TIME	Engine/ThermalBand/ThermalBand.hpp	/^     static constexpr double MIN_VALID_TIME = 30.;$/;"	m	class:ThermalBand
MIN_WAIT_TIME	DrawThread.hpp	/^  static constexpr unsigned MIN_WAIT_TIME = 100;$/;"	m	class:final
MISMATCH	Dialogs/ProfilePasswordDialog.hpp	/^  MISMATCH,$/;"	m	class:ProfilePasswordResult
MIX	Terrain/RasterRenderer.cpp	/^MIX(unsigned x, unsigned y, unsigned i)$/;"	f	file:
MIXED	Engine/Task/Factory/TaskFactoryType.hpp	/^  MIXED,$/;"	m	class:TaskFactoryType
MIXED_TASK_FACTORY_HPP	Engine/Task/Factory/MixedTaskFactory.hpp	23;"	d
MMToDPI	Hardware/DisplayDPI.cpp	/^MMToDPI(unsigned pixels, unsigned mm)$/;"	f	file:
MMXAlphaPixelOperations	Screen/Memory/MMX.hpp	/^  constexpr MMXAlphaPixelOperations(uint8_t _alpha):alpha(_alpha) {}$/;"	f	class:MMXAlphaPixelOperations
MMXAlphaPixelOperations	Screen/Memory/MMX.hpp	/^class MMXAlphaPixelOperations {$/;"	c
MODE_DEFAULT	Input/InputEvents.hpp	/^    MODE_DEFAULT,$/;"	e	enum:InputEvents::Mode
MODE_INFOBOX	Input/InputEvents.hpp	/^    MODE_INFOBOX,$/;"	e	enum:InputEvents::Mode
MODE_MENU	Input/InputEvents.hpp	/^    MODE_MENU$/;"	e	enum:InputEvents::Mode
MODE_PAN	Input/InputEvents.hpp	/^    MODE_PAN,$/;"	e	enum:InputEvents::Mode
MOFile	Language/MOFile.cpp	/^MOFile::MOFile(const void *_data, size_t _size)$/;"	f	class:MOFile
MOFile	Language/MOFile.hpp	/^class MOFile {$/;"	c
MOLoader	Language/MOLoader.hpp	/^  MOLoader(const void *data, size_t size)$/;"	f	class:MOLoader
MOLoader	Language/MOLoader.hpp	/^  explicit MOLoader(Path path)$/;"	f	class:MOLoader
MOLoader	Language/MOLoader.hpp	/^class MOLoader {$/;"	c
MONITOR	Dialogs/Device/DeviceListDialog.cpp	/^    RECONNECT, FLIGHT, EDIT, MANAGE, MONITOR,$/;"	e	enum:final::Buttons	file:
MONO	Screen/Bitmap.hpp	/^    MONO,$/;"	m	class:final::Type
MORE	Dialogs/Task/Manager/TaskListPanel.cpp	/^    MORE,$/;"	e	enum:final::Buttons	file:
MORE	Monitor/AirspaceWarningMonitor.cpp	/^    MORE,$/;"	e	enum:final::Action	file:
MOTORCYCLE	Tracking/LiveTrack24.hpp	/^    MOTORCYCLE = 16403,$/;"	m	class:LiveTrack24::VehicleType
MOUNTAIN_BIKE	Tracking/LiveTrack24.hpp	/^    MOUNTAIN_BIKE = 16402,$/;"	m	class:LiveTrack24::VehicleType
MOUNTAIN_PASS	Engine/Waypoint/Waypoint.hpp	/^    MOUNTAIN_PASS,$/;"	m	class:Waypoint::Type
MOUNTAIN_TOP	Engine/Waypoint/Waypoint.hpp	/^    MOUNTAIN_TOP,$/;"	m	class:Waypoint::Type
MOUSE_DOWN	Event/Shared/Event.hpp	/^    MOUSE_DOWN,$/;"	e	enum:Event::Type
MOUSE_MOTION	Event/Shared/Event.hpp	/^    MOUSE_MOTION,$/;"	e	enum:Event::Type
MOUSE_UP	Event/Shared/Event.hpp	/^    MOUSE_UP,$/;"	e	enum:Event::Type
MOUSE_WHEEL	Event/Shared/Event.hpp	/^    MOUSE_WHEEL,$/;"	e	enum:Event::Type
MOVE_DOWN	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    MOVE_DOWN,$/;"	e	enum:PageListWidget::Buttons	file:
MOVE_UP	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^    MOVE_UP,$/;"	e	enum:PageListWidget::Buttons	file:
MSG1	zzip/__debug.h	31;"	d
MSG2	zzip/__debug.h	32;"	d
MSG3	zzip/__debug.h	33;"	d
MSG4	zzip/__debug.h	34;"	d
MSG5	zzip/__debug.h	35;"	d
MSG6	zzip/__debug.h	36;"	d
MSG_ACK_FAILURE	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_FAILURE      = 0x01,$/;"	e	enum:IMI::TMsgType
MSG_ACK_INVSTATE	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_INVSTATE     = 0x04,$/;"	e	enum:IMI::TMsgType
MSG_ACK_LOGGING	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_LOGGING      = 0x02,$/;"	e	enum:IMI::TMsgType
MSG_ACK_NOTCONFIG	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_NOTCONFIG    = 0x03,$/;"	e	enum:IMI::TMsgType
MSG_ACK_SUCCESS	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_ACK_SUCCESS      = 0x00,$/;"	e	enum:IMI::TMsgType
MSG_CFG_BYE	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_BYE          = 0x11,$/;"	e	enum:IMI::TMsgType
MSG_CFG_CONFIG_ID	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_CONFIG_ID    = 0x16,$/;"	e	enum:IMI::TMsgType
MSG_CFG_DEFAULTOZ	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_DEFAULTOZ    = 0x17,$/;"	e	enum:IMI::TMsgType
MSG_CFG_DEVICEINFO	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_DEVICEINFO   = 0x14,$/;"	e	enum:IMI::TMsgType
MSG_CFG_FORCESTOP	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_FORCESTOP    = 0x12,$/;"	e	enum:IMI::TMsgType
MSG_CFG_HELLO	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_HELLO        = 0x10,$/;"	e	enum:IMI::TMsgType
MSG_CFG_KEEPCONFIG	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_KEEPCONFIG   = 0x15,$/;"	e	enum:IMI::TMsgType
MSG_CFG_STARTCONFIG	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_CFG_STARTCONFIG  = 0x13,$/;"	e	enum:IMI::TMsgType
MSG_DECLARATION	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_DECLARATION      = 0x20,$/;"	e	enum:IMI::TMsgType
MSG_FLASH	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLASH = 0x30,$/;"	e	enum:IMI::TMsgType
MSG_FLASH_BULK	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLASH_BULK = 0x31,$/;"	e	enum:IMI::TMsgType
MSG_FLIGHT_DELETEALL	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLIGHT_DELETEALL = 0x42$/;"	e	enum:IMI::TMsgType
MSG_FLIGHT_INFO	Device/Driver/IMI/Protocol/Types.hpp	/^    MSG_FLIGHT_INFO      = 0x40,$/;"	e	enum:IMI::TMsgType
MSG_UNKNOWN	PopupMessage.hpp	/^    MSG_UNKNOWN,$/;"	e	enum:PopupMessage::Type
MSG_USERINTERFACE	PopupMessage.hpp	/^    MSG_USERINTERFACE,$/;"	e	enum:PopupMessage::Type
MSL	Geo/AltitudeReference.hpp	/^  MSL = 1,$/;"	m	class:AltitudeReference
MSLIntercept	Engine/Route/RoutePolars.cpp	/^RoutePolars::MSLIntercept(const int index, const FlatGeoPoint &fp,$/;"	f	class:RoutePolars
MS_2PI	Topography/shapelib/mapserver.h	451;"	d
MS_3PI2	Topography/shapelib/mapserver.h	450;"	d
MS_ABS	Topography/shapelib/mapserver.h	330;"	d
MS_AGGERR	Topography/shapelib/maperror.h	83;"	d
MS_ALIGN_CENTER	Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_DEFAULT	Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_LEFT	Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_RIGHT	Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	e	enum:MS_ALIGN_VALUE
MS_ALIGN_VALUE	Topography/shapelib/mapserver.h	/^  enum MS_ALIGN_VALUE {MS_ALIGN_DEFAULT, MS_ALIGN_LEFT, MS_ALIGN_CENTER, MS_ALIGN_RIGHT};$/;"	g
MS_ALLOWEMPTYTOKENS	Topography/shapelib/mapserver.h	318;"	d
MS_ALL_MATCHING_CLASSES	Topography/shapelib/mapserver.h	/^  enum MS_RENDER_MODE {MS_FIRST_MATCHING_CLASS, MS_ALL_MATCHING_CLASSES};$/;"	e	enum:MS_RENDER_MODE
MS_ARRAY_BIT	Topography/shapelib/mapserver.h	2471;"	d
MS_AUTO	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_AUTO2	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_BINDING	Topography/shapelib/mapserver.h	313;"	d
MS_BITMAP	Topography/shapelib/mapserver.h	/^  enum MS_FONT_TYPE {MS_TRUETYPE, MS_BITMAP};$/;"	e	enum:MS_FONT_TYPE
MS_BLUE	Topography/shapelib/mapserver.h	266;"	d
MS_BUFFER_LENGTH	Topography/shapelib/mapserver.h	274;"	d
MS_CAPS_JOINS_AND_CORNERS	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	g
MS_CC	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_CELLSIZE	Topography/shapelib/mapserver.h	428;"	d
MS_CGIERR	Topography/shapelib/maperror.h	57;"	d
MS_CHECK_ALLOC	Topography/shapelib/mapserver.h	201;"	d
MS_CHECK_ALLOC_NO_RET	Topography/shapelib/mapserver.h	208;"	d
MS_CHILDERR	Topography/shapelib/maperror.h	75;"	d
MS_CJC_BEVEL	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_BUTT	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_DEFAULT_CAPS	Topography/shapelib/mapserver.h	533;"	d
MS_CJC_DEFAULT_JOINS	Topography/shapelib/mapserver.h	534;"	d
MS_CJC_DEFAULT_JOIN_MAXSIZE	Topography/shapelib/mapserver.h	535;"	d
MS_CJC_MITER	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_NONE	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_ROUND	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_SQUARE	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CJC_TRIANGLE	Topography/shapelib/mapserver.h	/^  enum MS_CAPS_JOINS_AND_CORNERS {MS_CJC_NONE, MS_CJC_BEVEL, MS_CJC_BUTT, MS_CJC_MITER, MS_CJC_ROUND, MS_CJC_SQUARE, MS_CJC_TRIANGLE};$/;"	e	enum:MS_CAPS_JOINS_AND_CORNERS
MS_CL	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_CLASS_ALLOCSIZE	Topography/shapelib/mapserver.h	233;"	d
MS_CLR_BIT	Topography/shapelib/mapserver.h	2475;"	d
MS_COLORSPACE_HSL	Topography/shapelib/mapserver.h	/^    MS_COLORSPACE_HSL$/;"	e	enum:__anon68
MS_COLORSPACE_RGB	Topography/shapelib/mapserver.h	/^    MS_COLORSPACE_RGB,$/;"	e	enum:__anon68
MS_COLOR_GETRGB	Topography/shapelib/mapserver.h	385;"	d
MS_COMMENT	Topography/shapelib/mapserver.h	310;"	d
MS_COMPARE_COLOR	Topography/shapelib/mapserver.h	382;"	d
MS_COMPARE_COLORS	Topography/shapelib/mapserver.h	384;"	d
MS_COMPOP_CLEAR	Topography/shapelib/mapserver.h	/^        MS_COMPOP_CLEAR,$/;"	e	enum:__anon27
MS_COMPOP_COLOR_BURN	Topography/shapelib/mapserver.h	/^        MS_COMPOP_COLOR_BURN,$/;"	e	enum:__anon27
MS_COMPOP_COLOR_DODGE	Topography/shapelib/mapserver.h	/^        MS_COMPOP_COLOR_DODGE,$/;"	e	enum:__anon27
MS_COMPOP_CONTRAST	Topography/shapelib/mapserver.h	/^        MS_COMPOP_CONTRAST,$/;"	e	enum:__anon27
MS_COMPOP_DARKEN	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DARKEN,$/;"	e	enum:__anon27
MS_COMPOP_DIFFERENCE	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DIFFERENCE,$/;"	e	enum:__anon27
MS_COMPOP_DST	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST,$/;"	e	enum:__anon27
MS_COMPOP_DST_ATOP	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_ATOP,$/;"	e	enum:__anon27
MS_COMPOP_DST_IN	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_IN,$/;"	e	enum:__anon27
MS_COMPOP_DST_OUT	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_OUT,$/;"	e	enum:__anon27
MS_COMPOP_DST_OVER	Topography/shapelib/mapserver.h	/^        MS_COMPOP_DST_OVER,$/;"	e	enum:__anon27
MS_COMPOP_EXCLUSION	Topography/shapelib/mapserver.h	/^        MS_COMPOP_EXCLUSION,$/;"	e	enum:__anon27
MS_COMPOP_HARD_LIGHT	Topography/shapelib/mapserver.h	/^        MS_COMPOP_HARD_LIGHT,$/;"	e	enum:__anon27
MS_COMPOP_INVERT	Topography/shapelib/mapserver.h	/^        MS_COMPOP_INVERT,$/;"	e	enum:__anon27
MS_COMPOP_INVERT_RGB	Topography/shapelib/mapserver.h	/^        MS_COMPOP_INVERT_RGB$/;"	e	enum:__anon27
MS_COMPOP_LIGHTEN	Topography/shapelib/mapserver.h	/^        MS_COMPOP_LIGHTEN,$/;"	e	enum:__anon27
MS_COMPOP_MINUS	Topography/shapelib/mapserver.h	/^        MS_COMPOP_MINUS,$/;"	e	enum:__anon27
MS_COMPOP_MULTIPLY	Topography/shapelib/mapserver.h	/^        MS_COMPOP_MULTIPLY,$/;"	e	enum:__anon27
MS_COMPOP_OVERLAY	Topography/shapelib/mapserver.h	/^        MS_COMPOP_OVERLAY,$/;"	e	enum:__anon27
MS_COMPOP_PLUS	Topography/shapelib/mapserver.h	/^        MS_COMPOP_PLUS,$/;"	e	enum:__anon27
MS_COMPOP_SCREEN	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SCREEN,$/;"	e	enum:__anon27
MS_COMPOP_SOFT_LIGHT	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SOFT_LIGHT,$/;"	e	enum:__anon27
MS_COMPOP_SRC	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC,$/;"	e	enum:__anon27
MS_COMPOP_SRC_ATOP	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_ATOP,$/;"	e	enum:__anon27
MS_COMPOP_SRC_IN	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_IN,$/;"	e	enum:__anon27
MS_COMPOP_SRC_OUT	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_OUT,$/;"	e	enum:__anon27
MS_COMPOP_SRC_OVER	Topography/shapelib/mapserver.h	/^        MS_COMPOP_SRC_OVER,$/;"	e	enum:__anon27
MS_COMPOP_XOR	Topography/shapelib/mapserver.h	/^        MS_COMPOP_XOR,$/;"	e	enum:__anon27
MS_CONNECTION_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	g
MS_CONTOUR	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_CONVERT_UNIT	Topography/shapelib/mapserver.h	496;"	d
MS_CR	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_DBFERR	Topography/shapelib/maperror.h	52;"	d
MS_DB_CSV	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_MYSQL	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_ORACLE	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_POSTGRES	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DB_XBASE	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	e	enum:MS_JOIN_CONNECTION_TYPE
MS_DD	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_DEBUG	Topography/shapelib/mapserver.h	544;"	d
MS_DEBUG	Topography/shapelib/mapserver.h	547;"	d
MS_DEBUG	Topography/shapelib/mapserver.h	549;"	d
MS_DEBUGLEVEL_DEBUG	Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_DEBUG      = 1,  \/* DEBUG ON *\/$/;"	e	enum:__anon73
MS_DEBUGLEVEL_DEVDEBUG	Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_DEVDEBUG   = 20, \/* Undocumented, will trigger debug messages only useful for developers *\/$/;"	e	enum:__anon73
MS_DEBUGLEVEL_ERRORSONLY	Topography/shapelib/maperror.h	/^  typedef enum { MS_DEBUGLEVEL_ERRORSONLY = 0,  \/* DEBUG OFF, log fatal errors *\/$/;"	e	enum:__anon73
MS_DEBUGLEVEL_TUNING	Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_TUNING     = 2,  \/* Reports timing info *\/$/;"	e	enum:__anon73
MS_DEBUGLEVEL_V	Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_V          = 3,  \/* Verbose *\/$/;"	e	enum:__anon73
MS_DEBUGLEVEL_VV	Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_VV         = 4,  \/* Very verbose *\/$/;"	e	enum:__anon73
MS_DEBUGLEVEL_VVV	Topography/shapelib/maperror.h	/^                 MS_DEBUGLEVEL_VVV        = 5,  \/* Very very verbose *\/$/;"	e	enum:__anon73
MS_DEBUGMODE_FILE	Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_FILE,$/;"	e	enum:__anon74
MS_DEBUGMODE_OFF	Topography/shapelib/maperror.h	/^  typedef enum { MS_DEBUGMODE_OFF,$/;"	e	enum:__anon74
MS_DEBUGMODE_STDERR	Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_STDERR,$/;"	e	enum:__anon74
MS_DEBUGMODE_STDOUT	Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_STDOUT,$/;"	e	enum:__anon74
MS_DEBUGMODE_WINDOWSDEBUG	Topography/shapelib/maperror.h	/^                 MS_DEBUGMODE_WINDOWSDEBUG$/;"	e	enum:__anon74
MS_DEFAULT	Topography/shapelib/mapserver.h	222;"	d
MS_DEFAULT_BUFFER_ALLOC	Topography/shapelib/mapserver.h	3148;"	d
MS_DEFAULT_LABEL_PRIORITY	Topography/shapelib/mapserver.h	239;"	d
MS_DEFAULT_MAPFILE_PATTERN	Topography/shapelib/mapserver.h	245;"	d
MS_DEFAULT_MAPFILE_PATTERN	Topography/shapelib/mapserver.h	248;"	d
MS_DEFAULT_RESOLUTION	Topography/shapelib/mapserver.h	262;"	d
MS_DEFAULT_XMLMAPFILE_PATTERN	Topography/shapelib/mapserver.h	246;"	d
MS_DEG_TO_RAD	Topography/shapelib/mapserver.h	259;"	d
MS_DELETE	Topography/shapelib/mapserver.h	224;"	d
MS_DLL_EXPORT	Topography/shapelib/maperror.h	96;"	d
MS_DLL_EXPORT	Topography/shapelib/maperror.h	98;"	d
MS_DLL_EXPORT	Topography/shapelib/mapserver.h	65;"	d
MS_DLL_EXPORT	Topography/shapelib/mapserver.h	68;"	d
MS_DONE	Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	e	enum:MS_RETURN_VALUE
MS_DRAWMODE_FEATURES	Topography/shapelib/mapserver.h	2601;"	d
MS_DRAWMODE_LABELS	Topography/shapelib/mapserver.h	2603;"	d
MS_DRAWMODE_QUERY	Topography/shapelib/mapserver.h	2607;"	d
MS_DRAWMODE_SINGLESTYLE	Topography/shapelib/mapserver.h	2605;"	d
MS_DRAWMODE_UNCLIPPEDLABELS	Topography/shapelib/mapserver.h	2609;"	d
MS_DRAWMODE_UNCLIPPEDLINES	Topography/shapelib/mapserver.h	2611;"	d
MS_DRAW_FEATURES	Topography/shapelib/mapserver.h	2602;"	d
MS_DRAW_LABELS	Topography/shapelib/mapserver.h	2604;"	d
MS_DRAW_QUERY	Topography/shapelib/mapserver.h	2608;"	d
MS_DRAW_SINGLESTYLE	Topography/shapelib/mapserver.h	2606;"	d
MS_DRAW_UNCLIPPED_LABELS	Topography/shapelib/mapserver.h	2610;"	d
MS_DRAW_UNCLIPPED_LINES	Topography/shapelib/mapserver.h	2612;"	d
MS_DRIVER_AGG	Topography/shapelib/mapserver.h	392;"	d
MS_DRIVER_CAIRO	Topography/shapelib/mapserver.h	394;"	d
MS_DRIVER_GDAL	Topography/shapelib/mapserver.h	390;"	d
MS_DRIVER_IMAGEMAP	Topography/shapelib/mapserver.h	391;"	d
MS_DRIVER_MVT	Topography/shapelib/mapserver.h	393;"	d
MS_DRIVER_OGL	Topography/shapelib/mapserver.h	395;"	d
MS_DRIVER_SWF	Topography/shapelib/mapserver.h	389;"	d
MS_DRIVER_TEMPLATE	Topography/shapelib/mapserver.h	396;"	d
MS_EMBED	Topography/shapelib/mapserver.h	223;"	d
MS_ENCRYPTION_KEY_SIZE	Topography/shapelib/mapserver.h	453;"	d
MS_EOFERR	Topography/shapelib/maperror.h	54;"	d
MS_ERROR_LANGUAGE	Topography/shapelib/maperror.h	93;"	d
MS_EXPRESSION	Topography/shapelib/mapserver.h	306;"	d
MS_EXP_INSENSITIVE	Topography/shapelib/mapserver.h	325;"	d
MS_FAILURE	Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	e	enum:MS_RETURN_VALUE
MS_FALSE	Topography/shapelib/mapserver.h	218;"	d
MS_FEATUREINCREMENT	Topography/shapelib/mapserver.h	304;"	d
MS_FEATUREINITSIZE	Topography/shapelib/mapserver.h	303;"	d
MS_FEET	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_FILE	Topography/shapelib/mapserver.h	292;"	d
MS_FILE_DEFAULT	Topography/shapelib/mapserver.h	541;"	d
MS_FILE_MAP	Topography/shapelib/mapserver.h	/^  enum MS_FILE_TYPE {MS_FILE_MAP, MS_FILE_SYMBOL};$/;"	e	enum:MS_FILE_TYPE
MS_FILE_SYMBOL	Topography/shapelib/mapserver.h	/^  enum MS_FILE_TYPE {MS_FILE_MAP, MS_FILE_SYMBOL};$/;"	e	enum:MS_FILE_TYPE
MS_FILE_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_FILE_TYPE {MS_FILE_MAP, MS_FILE_SYMBOL};$/;"	g
MS_FIRST_MATCHING_CLASS	Topography/shapelib/mapserver.h	/^  enum MS_RENDER_MODE {MS_FIRST_MATCHING_CLASS, MS_ALL_MATCHING_CLASSES};$/;"	e	enum:MS_RENDER_MODE
MS_FOLLOW	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_FONT_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_FONT_TYPE {MS_TRUETYPE, MS_BITMAP};$/;"	g
MS_GEOMTRANSFORM_BBOX	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_BBOX,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_BUFFER	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_BUFFER,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_CENTROID	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_CENTROID,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_CONVEXHULL	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_CONVEXHULL,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_END	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_END,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_EXPRESSION	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_EXPRESSION,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_LABELCENTER	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_LABELCENTER$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_LABELPOINT	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_LABELPOINT,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_LABELPOLY	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_LABELPOLY,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_NONE	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_NONE,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_START	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_START,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOMTRANSFORM_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_GEOMTRANSFORM_TYPE {$/;"	g
MS_GEOMTRANSFORM_VERTICES	Topography/shapelib/mapserver.h	/^    MS_GEOMTRANSFORM_VERTICES,$/;"	e	enum:MS_GEOMTRANSFORM_TYPE
MS_GEOSERR	Topography/shapelib/maperror.h	77;"	d
MS_GEOS_BEYOND	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_CONTAINS	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_CROSSES	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_DISJOINT	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_DWITHIN	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_EQUALS	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_INTERSECTS	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_OPERATOR	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	g
MS_GEOS_OVERLAPS	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_TOUCHES	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GEOS_WITHIN	Topography/shapelib/mapserver.h	/^  enum MS_GEOS_OPERATOR {MS_GEOS_EQUALS, MS_GEOS_DISJOINT, MS_GEOS_TOUCHES, MS_GEOS_OVERLAPS, MS_GEOS_CROSSES, MS_GEOS_INTERSECTS, MS_GEOS_WITHIN, MS_GEOS_CONTAINS, MS_GEOS_BEYOND, MS_GEOS_DWITHIN};$/;"	e	enum:MS_GEOS_OPERATOR
MS_GET_BIT	Topography/shapelib/mapserver.h	2473;"	d
MS_GIANT	Topography/shapelib/mapserver.h	516;"	d
MS_GMLERR	Topography/shapelib/maperror.h	80;"	d
MS_GRATICULE	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_GREEN	Topography/shapelib/mapserver.h	265;"	d
MS_HASHERR	Topography/shapelib/maperror.h	60;"	d
MS_HILITE	Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	e	enum:MS_QUERYMAP_STYLES
MS_HONOURSTRINGS	Topography/shapelib/mapserver.h	317;"	d
MS_HTTPERR	Topography/shapelib/maperror.h	74;"	d
MS_IDENTERR	Topography/shapelib/maperror.h	53;"	d
MS_IMAGE2MAP_X	Topography/shapelib/mapserver.h	432;"	d
MS_IMAGE2MAP_Y	Topography/shapelib/mapserver.h	433;"	d
MS_IMAGEMODE	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	g
MS_IMAGEMODE_BYTE	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_FEATURE	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_FLOAT32	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_INT16	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_NULL	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_PC256	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_RGB	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGEMODE_RGBA	Topography/shapelib/mapserver.h	/^  enum MS_IMAGEMODE { MS_IMAGEMODE_PC256, MS_IMAGEMODE_RGB, MS_IMAGEMODE_RGBA, MS_IMAGEMODE_INT16, MS_IMAGEMODE_FLOAT32, MS_IMAGEMODE_BYTE, MS_IMAGEMODE_FEATURE, MS_IMAGEMODE_NULL };$/;"	e	enum:MS_IMAGEMODE
MS_IMAGE_EXTENSION	Topography/shapelib/mapserver.h	388;"	d
MS_IMAGE_MIME_TYPE	Topography/shapelib/mapserver.h	387;"	d
MS_IMAGE_RENDERER	Topography/shapelib/mapserver.h	3247;"	d
MS_IMAGE_RENDERER_CACHE	Topography/shapelib/mapserver.h	3249;"	d
MS_IMGERR	Topography/shapelib/maperror.h	59;"	d
MS_INCHES	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_INDEX_EXTENSION	Topography/shapelib/mapserver.h	253;"	d
MS_INIT_COLOR	Topography/shapelib/mapserver.h	380;"	d
MS_INIT_INVALID_RECT	Topography/shapelib/mapserver.h	498;"	d
MS_INLINE	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_IOERR	Topography/shapelib/maperror.h	46;"	d
MS_IREGEX	Topography/shapelib/mapserver.h	311;"	d
MS_ISTRING	Topography/shapelib/mapserver.h	312;"	d
MS_IS_VALID_ARRAY_INDEX	Topography/shapelib/mapserver.h	494;"	d
MS_ITEMNAMELEN	Topography/shapelib/mapserver.h	282;"	d
MS_JOINERR	Topography/shapelib/maperror.h	61;"	d
MS_JOIN_CONNECTION_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_CONNECTION_TYPE {MS_DB_XBASE, MS_DB_CSV, MS_DB_MYSQL, MS_DB_ORACLE, MS_DB_POSTGRES};$/;"	g
MS_JOIN_ONE_TO_MANY	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_TYPE {MS_JOIN_ONE_TO_ONE, MS_JOIN_ONE_TO_MANY};$/;"	e	enum:MS_JOIN_TYPE
MS_JOIN_ONE_TO_ONE	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_TYPE {MS_JOIN_ONE_TO_ONE, MS_JOIN_ONE_TO_MANY};$/;"	e	enum:MS_JOIN_TYPE
MS_JOIN_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_JOIN_TYPE {MS_JOIN_ONE_TO_ONE, MS_JOIN_ONE_TO_MANY};$/;"	g
MS_KERNELDENSITY	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_KILOMETERS	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_LABELCACHEINCREMENT	Topography/shapelib/mapserver.h	298;"	d
MS_LABELCACHEINITSIZE	Topography/shapelib/mapserver.h	297;"	d
MS_LABEL_ALLOCSIZE	Topography/shapelib/mapserver.h	235;"	d
MS_LABEL_BINDING_ALIGN	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_ANGLE	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_COLOR	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	g
MS_LABEL_BINDING_FONT	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_LENGTH	Topography/shapelib/mapserver.h	643;"	d
MS_LABEL_BINDING_OFFSET_X	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_OFFSET_Y	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_OUTLINECOLOR	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_POSITION	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_PRIORITY	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_SHADOWSIZEX	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_SHADOWSIZEY	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_BINDING_SIZE	Topography/shapelib/mapserver.h	/^  enum MS_LABEL_BINDING_ENUM { MS_LABEL_BINDING_SIZE, MS_LABEL_BINDING_ANGLE, MS_LABEL_BINDING_COLOR, MS_LABEL_BINDING_OUTLINECOLOR, MS_LABEL_BINDING_FONT, MS_LABEL_BINDING_PRIORITY, MS_LABEL_BINDING_POSITION, MS_LABEL_BINDING_SHADOWSIZEX, MS_LABEL_BINDING_SHADOWSIZEY, MS_LABEL_BINDING_OFFSET_X, MS_LABEL_BINDING_OFFSET_Y,MS_LABEL_BINDING_ALIGN };$/;"	e	enum:MS_LABEL_BINDING_ENUM
MS_LABEL_FORCE_GROUP	Topography/shapelib/mapserver.h	240;"	d
MS_LABEL_PERPENDICULAR_OFFSET	Topography/shapelib/mapserver.h	1186;"	d
MS_LABEL_PERPENDICULAR_TOP_OFFSET	Topography/shapelib/mapserver.h	1187;"	d
MS_LARGE	Topography/shapelib/mapserver.h	515;"	d
MS_LAYER_ALLOCSIZE	Topography/shapelib/mapserver.h	232;"	d
MS_LAYER_ANNOTATION	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_CHART	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_CIRCLE	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_LINE	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_POINT	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_POLYGON	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_QUERY	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_RASTER	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_TILEINDEX	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	e	enum:MS_LAYER_TYPE
MS_LAYER_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_LAYER_TYPE {MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON, MS_LAYER_RASTER, MS_LAYER_ANNOTATION \/* only used for parser backwards compatibility *\/, MS_LAYER_QUERY, MS_LAYER_CIRCLE, MS_LAYER_TILEINDEX, MS_LAYER_CHART};$/;"	g
MS_LC	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_LIST	Topography/shapelib/mapserver.h	314;"	d
MS_LL	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_LR	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_LSB_ORDER	Topography/shapelib/maptree.h	77;"	d
MS_MAP2IMAGE_X	Topography/shapelib/mapserver.h	430;"	d
MS_MAP2IMAGE_XCELL_IC	Topography/shapelib/mapserver.h	438;"	d
MS_MAP2IMAGE_X_IC	Topography/shapelib/mapserver.h	436;"	d
MS_MAP2IMAGE_X_IC_DBL	Topography/shapelib/mapserver.h	441;"	d
MS_MAP2IMAGE_X_IC_SNAP	Topography/shapelib/mapserver.h	444;"	d
MS_MAP2IMAGE_Y	Topography/shapelib/mapserver.h	431;"	d
MS_MAP2IMAGE_YCELL_IC	Topography/shapelib/mapserver.h	439;"	d
MS_MAP2IMAGE_Y_IC	Topography/shapelib/mapserver.h	437;"	d
MS_MAP2IMAGE_Y_IC_DBL	Topography/shapelib/mapserver.h	442;"	d
MS_MAP2IMAGE_Y_IC_SNAP	Topography/shapelib/mapserver.h	445;"	d
MS_MAPCONTEXTERR	Topography/shapelib/maperror.h	73;"	d
MS_MAP_RENDERER	Topography/shapelib/mapserver.h	3250;"	d
MS_MAX	Topography/shapelib/mapserver.h	329;"	d
MS_MAXCOLORS	Topography/shapelib/mapserver.h	268;"	d
MS_MAXFONTSIZE	Topography/shapelib/mapserver.h	295;"	d
MS_MAXIMAGESIZE_DEFAULT	Topography/shapelib/mapserver.h	278;"	d
MS_MAXJOINS	Topography/shapelib/mapserver.h	281;"	d
MS_MAXPATHLEN	Topography/shapelib/mapserver.h	276;"	d
MS_MAXPROJARGS	Topography/shapelib/mapserver.h	280;"	d
MS_MAXSYMBOLSIZE	Topography/shapelib/mapserver.h	286;"	d
MS_MAXSYMBOLWIDTH	Topography/shapelib/mapserver.h	289;"	d
MS_MAX_LABEL_FONTS	Topography/shapelib/mapserver.h	238;"	d
MS_MAX_LABEL_PRIORITY	Topography/shapelib/mapserver.h	237;"	d
MS_MEDIUM	Topography/shapelib/mapserver.h	514;"	d
MS_MEMERR	Topography/shapelib/maperror.h	47;"	d
MS_METERS	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_MILES	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_MIN	Topography/shapelib/mapserver.h	328;"	d
MS_MINFONTSIZE	Topography/shapelib/mapserver.h	294;"	d
MS_MINSYMBOLSIZE	Topography/shapelib/mapserver.h	285;"	d
MS_MINSYMBOLWIDTH	Topography/shapelib/mapserver.h	288;"	d
MS_MISCERR	Topography/shapelib/maperror.h	56;"	d
MS_MISSING_DATA_FAIL	Topography/shapelib/mapserver.h	271;"	d
MS_MISSING_DATA_IGNORE	Topography/shapelib/mapserver.h	270;"	d
MS_MISSING_DATA_LOG	Topography/shapelib/mapserver.h	272;"	d
MS_MSB_ORDER	Topography/shapelib/maptree.h	78;"	d
MS_MULTIPLE	Topography/shapelib/mapserver.h	524;"	d
MS_MYSQL	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_NAMELEN	Topography/shapelib/mapserver.h	283;"	d
MS_NATIVE_ORDER	Topography/shapelib/maptree.h	79;"	d
MS_NAUTICALMILES	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_NEW_LSB_ORDER	Topography/shapelib/maptree.h	80;"	d
MS_NEW_MSB_ORDER	Topography/shapelib/maptree.h	81;"	d
MS_NINT	Topography/shapelib/mapserver.h	/^  static __inline long int MS_NINT (double flt)$/;"	f
MS_NINT	Topography/shapelib/mapserver.h	/^  static __inline long int MS_NINT( double __x )$/;"	f
MS_NINT	Topography/shapelib/mapserver.h	348;"	d
MS_NINT	Topography/shapelib/mapserver.h	373;"	d
MS_NINT_GENERIC	Topography/shapelib/mapserver.h	335;"	d
MS_NO	Topography/shapelib/mapserver.h	226;"	d
MS_NOERR	Topography/shapelib/maperror.h	45;"	d
MS_NONE	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_NOOVERRIDE	Topography/shapelib/mapserver.h	872;"	d
MS_NORMAL	Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	e	enum:MS_QUERYMAP_STYLES
MS_NOTFOUND	Topography/shapelib/maperror.h	62;"	d
MS_NULLPARENTERR	Topography/shapelib/maperror.h	82;"	d
MS_NUMBER	Topography/shapelib/mapserver.h	309;"	d
MS_NUMERRORCODES	Topography/shapelib/maperror.h	88;"	d
MS_OFF	Topography/shapelib/mapserver.h	221;"	d
MS_OGLERR	Topography/shapelib/maperror.h	85;"	d
MS_OGR	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_OGRERR	Topography/shapelib/maperror.h	66;"	d
MS_ON	Topography/shapelib/mapserver.h	220;"	d
MS_ORACLESPATIAL	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_ORACLESPATIALERR	Topography/shapelib/maperror.h	70;"	d
MS_OWSERR	Topography/shapelib/maperror.h	84;"	d
MS_OWS_CELLSIZE	Topography/shapelib/mapserver.h	429;"	d
MS_PARSEERR	Topography/shapelib/maperror.h	64;"	d
MS_PARSE_TYPE_BOOLEAN	Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	e	enum:MS_PARSE_TYPE_ENUM
MS_PARSE_TYPE_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	g
MS_PARSE_TYPE_SHAPE	Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	e	enum:MS_PARSE_TYPE_ENUM
MS_PARSE_TYPE_STRING	Topography/shapelib/mapserver.h	/^  enum MS_PARSE_TYPE_ENUM { MS_PARSE_TYPE_BOOLEAN, MS_PARSE_TYPE_STRING, MS_PARSE_TYPE_SHAPE };$/;"	e	enum:MS_PARSE_TYPE_ENUM
MS_PATH_LENGTH	Topography/shapelib/mapshape.h	55;"	d
MS_PERCENTAGES	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_PI	Topography/shapelib/mapserver.h	448;"	d
MS_PI2	Topography/shapelib/mapserver.h	449;"	d
MS_PIXELS	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	e	enum:MS_UNITS
MS_PLUGIN	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_POSITIONS_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	g
MS_POSITIONS_LENGTH	Topography/shapelib/mapserver.h	510;"	d
MS_POSTGIS	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_PRESERVEESCAPES	Topography/shapelib/mapserver.h	320;"	d
MS_PRESERVEQUOTES	Topography/shapelib/mapserver.h	319;"	d
MS_PRINT_FUNC_FORMAT	Topography/shapelib/maperror.h	105;"	d
MS_PRINT_FUNC_FORMAT	Topography/shapelib/maperror.h	107;"	d
MS_PROJERR	Topography/shapelib/maperror.h	55;"	d
MS_QUERYERR	Topography/shapelib/maperror.h	67;"	d
MS_QUERYMAP_STYLES	Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	g
MS_QUERY_BY_ATTRIBUTE	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_FILTER	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_INDEX	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_POINT	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_RECT	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_BY_SHAPE	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_EXTENSION	Topography/shapelib/mapserver.h	257;"	d
MS_QUERY_IS_NULL	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	e	enum:MS_QUERY_TYPE
MS_QUERY_MODE	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_MODE {MS_QUERY_SINGLE, MS_QUERY_MULTIPLE};$/;"	g
MS_QUERY_MULTIPLE	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_MODE {MS_QUERY_SINGLE, MS_QUERY_MULTIPLE};$/;"	e	enum:MS_QUERY_MODE
MS_QUERY_PARAMS_MAGIC_STRING	Topography/shapelib/mapserver.h	256;"	d
MS_QUERY_RESULTS_MAGIC_STRING	Topography/shapelib/mapserver.h	255;"	d
MS_QUERY_SINGLE	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_MODE {MS_QUERY_SINGLE, MS_QUERY_MULTIPLE};$/;"	e	enum:MS_QUERY_MODE
MS_QUERY_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_QUERY_TYPE {MS_QUERY_IS_NULL, MS_QUERY_BY_POINT, MS_QUERY_BY_RECT, MS_QUERY_BY_SHAPE, MS_QUERY_BY_ATTRIBUTE, MS_QUERY_BY_INDEX, MS_QUERY_BY_FILTER};$/;"	g
MS_RAD_TO_DEG	Topography/shapelib/mapserver.h	260;"	d
MS_RASTER	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_RECTERR	Topography/shapelib/maperror.h	78;"	d
MS_RED	Topography/shapelib/mapserver.h	264;"	d
MS_REFCNT_DECR	Topography/shapelib/mapserver.h	461;"	d
MS_REFCNT_DECR	Topography/shapelib/mapserver.h	468;"	d
MS_REFCNT_DECR	Topography/shapelib/mapserver.h	472;"	d
MS_REFCNT_DECR	Topography/shapelib/mapserver.h	477;"	d
MS_REFCNT_DECR	Topography/shapelib/mapserver.h	482;"	d
MS_REFCNT_DECR	Topography/shapelib/mapserver.h	487;"	d
MS_REFCNT_DECR_IS_NOT_ZERO	Topography/shapelib/mapserver.h	491;"	d
MS_REFCNT_DECR_IS_ZERO	Topography/shapelib/mapserver.h	492;"	d
MS_REFCNT_INCR	Topography/shapelib/mapserver.h	460;"	d
MS_REFCNT_INCR	Topography/shapelib/mapserver.h	467;"	d
MS_REFCNT_INCR	Topography/shapelib/mapserver.h	471;"	d
MS_REFCNT_INCR	Topography/shapelib/mapserver.h	476;"	d
MS_REFCNT_INCR	Topography/shapelib/mapserver.h	481;"	d
MS_REFCNT_INCR	Topography/shapelib/mapserver.h	486;"	d
MS_REFCNT_INIT	Topography/shapelib/mapserver.h	462;"	d
MS_REFCNT_INIT	Topography/shapelib/mapserver.h	469;"	d
MS_REFCNT_INIT	Topography/shapelib/mapserver.h	473;"	d
MS_REFCNT_INIT	Topography/shapelib/mapserver.h	478;"	d
MS_REFCNT_INIT	Topography/shapelib/mapserver.h	483;"	d
MS_REFCNT_INIT	Topography/shapelib/mapserver.h	488;"	d
MS_REGEX	Topography/shapelib/mapserver.h	307;"	d
MS_REGEXERR	Topography/shapelib/maperror.h	50;"	d
MS_RENDERERERR	Topography/shapelib/maperror.h	86;"	d
MS_RENDERER_CACHE	Topography/shapelib/mapserver.h	3248;"	d
MS_RENDERER_IMAGEMAP	Topography/shapelib/mapserver.h	420;"	d
MS_RENDERER_KML	Topography/shapelib/mapserver.h	422;"	d
MS_RENDERER_MVT	Topography/shapelib/mapserver.h	424;"	d
MS_RENDERER_OGR	Topography/shapelib/mapserver.h	423;"	d
MS_RENDERER_PLUGIN	Topography/shapelib/mapserver.h	426;"	d
MS_RENDERER_RAWDATA	Topography/shapelib/mapserver.h	419;"	d
MS_RENDERER_SWF	Topography/shapelib/mapserver.h	418;"	d
MS_RENDERER_TEMPLATE	Topography/shapelib/mapserver.h	421;"	d
MS_RENDER_MODE	Topography/shapelib/mapserver.h	/^  enum MS_RENDER_MODE {MS_FIRST_MATCHING_CLASS, MS_ALL_MATCHING_CLASSES};$/;"	g
MS_RENDER_WITH_AGG	Topography/shapelib/mapserver.h	411;"	d
MS_RENDER_WITH_CAIRO_PDF	Topography/shapelib/mapserver.h	408;"	d
MS_RENDER_WITH_CAIRO_RASTER	Topography/shapelib/mapserver.h	407;"	d
MS_RENDER_WITH_CAIRO_SVG	Topography/shapelib/mapserver.h	409;"	d
MS_RENDER_WITH_IMAGEMAP	Topography/shapelib/mapserver.h	402;"	d
MS_RENDER_WITH_KML	Topography/shapelib/mapserver.h	412;"	d
MS_RENDER_WITH_MVT	Topography/shapelib/mapserver.h	414;"	d
MS_RENDER_WITH_OGL	Topography/shapelib/mapserver.h	410;"	d
MS_RENDER_WITH_OGR	Topography/shapelib/mapserver.h	404;"	d
MS_RENDER_WITH_PLUGIN	Topography/shapelib/mapserver.h	406;"	d
MS_RENDER_WITH_RAWDATA	Topography/shapelib/mapserver.h	401;"	d
MS_RENDER_WITH_SWF	Topography/shapelib/mapserver.h	400;"	d
MS_RENDER_WITH_TEMPLATE	Topography/shapelib/mapserver.h	403;"	d
MS_RENDER_WITH_UTFGRID	Topography/shapelib/mapserver.h	413;"	d
MS_RESULTCACHEINCREMENT	Topography/shapelib/mapserver.h	301;"	d
MS_RESULTCACHEINITSIZE	Topography/shapelib/mapserver.h	300;"	d
MS_RETURN_VALUE	Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	g
MS_SELECTED	Topography/shapelib/mapserver.h	/^  enum MS_QUERYMAP_STYLES {MS_NORMAL, MS_HILITE, MS_SELECTED};$/;"	e	enum:MS_QUERYMAP_STYLES
MS_SET_BIT	Topography/shapelib/mapserver.h	2474;"	d
MS_SGN	Topography/shapelib/mapserver.h	331;"	d
MS_SHAPEFILE	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_SHAPEFILE_ARC	Topography/shapelib/mapshape.h	75;"	d
MS_SHAPEFILE_MULTIPOINT	Topography/shapelib/mapshape.h	77;"	d
MS_SHAPEFILE_POINT	Topography/shapelib/mapshape.h	74;"	d
MS_SHAPEFILE_POLYGON	Topography/shapelib/mapshape.h	76;"	d
MS_SHAPE_LINE	Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_NULL	Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_POINT	Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_POLYGON	Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	e	enum:MS_SHAPE_TYPE
MS_SHAPE_TYPE	Topography/shapelib/mapserver.h	/^  enum MS_SHAPE_TYPE {MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL};$/;"	g
MS_SHPERR	Topography/shapelib/maperror.h	63;"	d
MS_SHP_ARCM	Topography/shapelib/mapshape.h	85;"	d
MS_SHP_ARCZ	Topography/shapelib/mapshape.h	80;"	d
MS_SHP_MULTIPOINTM	Topography/shapelib/mapshape.h	87;"	d
MS_SHP_MULTIPOINTZ	Topography/shapelib/mapshape.h	82;"	d
MS_SHP_POINTM	Topography/shapelib/mapshape.h	84;"	d
MS_SHP_POINTZ	Topography/shapelib/mapshape.h	79;"	d
MS_SHP_POLYGONM	Topography/shapelib/mapshape.h	86;"	d
MS_SHP_POLYGONZ	Topography/shapelib/mapshape.h	81;"	d
MS_SINGLE	Topography/shapelib/mapserver.h	523;"	d
MS_SMALL	Topography/shapelib/mapserver.h	513;"	d
MS_SOSERR	Topography/shapelib/maperror.h	81;"	d
MS_STRING	Topography/shapelib/mapserver.h	308;"	d
MS_STRING_IS_NULL_OR_EMPTY	Topography/shapelib/mapserver.h	333;"	d
MS_STRIPENDSPACES	Topography/shapelib/mapserver.h	322;"	d
MS_STRIPLEADSPACES	Topography/shapelib/mapserver.h	321;"	d
MS_STYLE_ALLOCSIZE	Topography/shapelib/mapserver.h	234;"	d
MS_STYLE_BINDING_ANGLE	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_COLOR	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	g
MS_STYLE_BINDING_LENGTH	Topography/shapelib/mapserver.h	641;"	d
MS_STYLE_BINDING_OFFSET_X	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OFFSET_Y	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OPACITY	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OUTLINECOLOR	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_OUTLINEWIDTH	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_POLAROFFSET_ANGLE	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_POLAROFFSET_PIXEL	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_SIZE	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_SYMBOL	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_BINDING_WIDTH	Topography/shapelib/mapserver.h	/^  enum MS_STYLE_BINDING_ENUM { MS_STYLE_BINDING_SIZE, MS_STYLE_BINDING_WIDTH, MS_STYLE_BINDING_ANGLE, MS_STYLE_BINDING_COLOR, MS_STYLE_BINDING_OUTLINECOLOR, MS_STYLE_BINDING_SYMBOL, MS_STYLE_BINDING_OUTLINEWIDTH, MS_STYLE_BINDING_OPACITY, MS_STYLE_BINDING_OFFSET_X, MS_STYLE_BINDING_OFFSET_Y, MS_STYLE_BINDING_POLAROFFSET_PIXEL, MS_STYLE_BINDING_POLAROFFSET_ANGLE };$/;"	e	enum:MS_STYLE_BINDING_ENUM
MS_STYLE_DOUBLE_SIDED_OFFSET	Topography/shapelib/mapserver.h	1050;"	d
MS_STYLE_SINGLE_SIDED_OFFSET	Topography/shapelib/mapserver.h	1049;"	d
MS_SUCCESS	Topography/shapelib/mapserver.h	/^  enum MS_RETURN_VALUE {MS_SUCCESS, MS_FAILURE, MS_DONE};$/;"	e	enum:MS_RETURN_VALUE
MS_SYMERR	Topography/shapelib/maperror.h	49;"	d
MS_TEMPLATE_EXPR	Topography/shapelib/mapserver.h	251;"	d
MS_TEMPLATE_MAGIC_STRING	Topography/shapelib/mapserver.h	250;"	d
MS_TILED_SHAPEFILE	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_TIMEERR	Topography/shapelib/maperror.h	79;"	d
MS_TINY	Topography/shapelib/mapserver.h	512;"	d
MS_TOKEN_BINDING_DATA_CELLSIZE	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_DOUBLE	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	g
MS_TOKEN_BINDING_INTEGER	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_MAP_CELLSIZE	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_SHAPE	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_STRING	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_BINDING_TIME	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_BINDING_ENUM { MS_TOKEN_BINDING_DOUBLE=370, MS_TOKEN_BINDING_INTEGER, MS_TOKEN_BINDING_STRING, MS_TOKEN_BINDING_TIME, MS_TOKEN_BINDING_SHAPE, MS_TOKEN_BINDING_MAP_CELLSIZE, MS_TOKEN_BINDING_DATA_CELLSIZE };$/;"	e	enum:MS_TOKEN_BINDING_ENUM
MS_TOKEN_COMPARISON_BEYOND	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_CONTAINS	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_CROSSES	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_DISJOINT	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_DWITHIN	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_COMPARISON_ENUM {$/;"	g
MS_TOKEN_COMPARISON_EQ	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_EQUALS	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_GE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_GT	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_IEQ	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_IN	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_IN, MS_TOKEN_COMPARISON_LIKE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_INTERSECTS	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_IRE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_RE, MS_TOKEN_COMPARISON_IRE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_LE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_LIKE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_IN, MS_TOKEN_COMPARISON_LIKE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_LT	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_NE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_EQ=320, MS_TOKEN_COMPARISON_NE, MS_TOKEN_COMPARISON_GT, MS_TOKEN_COMPARISON_LT, MS_TOKEN_COMPARISON_LE, MS_TOKEN_COMPARISON_GE, MS_TOKEN_COMPARISON_IEQ,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_OVERLAPS	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_RE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_RE, MS_TOKEN_COMPARISON_IRE,$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_TOUCHES	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_COMPARISON_WITHIN	Topography/shapelib/mapserver.h	/^    MS_TOKEN_COMPARISON_INTERSECTS, MS_TOKEN_COMPARISON_DISJOINT, MS_TOKEN_COMPARISON_TOUCHES, MS_TOKEN_COMPARISON_OVERLAPS, MS_TOKEN_COMPARISON_CROSSES, MS_TOKEN_COMPARISON_WITHIN, MS_TOKEN_COMPARISON_CONTAINS, MS_TOKEN_COMPARISON_EQUALS, MS_TOKEN_COMPARISON_BEYOND, MS_TOKEN_COMPARISON_DWITHIN$/;"	e	enum:MS_TOKEN_COMPARISON_ENUM
MS_TOKEN_FUNCTION_AREA	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_BUFFER	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_COMMIFY	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_DIFFERENCE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_FUNCTION_ENUM {$/;"	g
MS_TOKEN_FUNCTION_FIRSTCAP	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_FROMTEXT	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_GENERALIZE	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_INITCAP	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_JAVASCRIPT	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_LENGTH	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_LOWER	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_ROUND	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_SIMPLIFY	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_SIMPLIFYPT	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_SMOOTHSIA	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_BUFFER, MS_TOKEN_FUNCTION_DIFFERENCE, MS_TOKEN_FUNCTION_SIMPLIFY, MS_TOKEN_FUNCTION_SIMPLIFYPT, MS_TOKEN_FUNCTION_GENERALIZE, MS_TOKEN_FUNCTION_SMOOTHSIA, MS_TOKEN_FUNCTION_JAVASCRIPT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_TOSTRING	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_LENGTH=350, MS_TOKEN_FUNCTION_TOSTRING, MS_TOKEN_FUNCTION_COMMIFY, MS_TOKEN_FUNCTION_AREA, MS_TOKEN_FUNCTION_ROUND, MS_TOKEN_FUNCTION_FROMTEXT,$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_FUNCTION_UPPER	Topography/shapelib/mapserver.h	/^    MS_TOKEN_FUNCTION_UPPER, MS_TOKEN_FUNCTION_LOWER, MS_TOKEN_FUNCTION_INITCAP, MS_TOKEN_FUNCTION_FIRSTCAP$/;"	e	enum:MS_TOKEN_FUNCTION_ENUM
MS_TOKEN_LITERAL_BOOLEAN	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	g
MS_TOKEN_LITERAL_NUMBER	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_SHAPE	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_STRING	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LITERAL_TIME	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LITERAL_ENUM { MS_TOKEN_LITERAL_NUMBER=310, MS_TOKEN_LITERAL_STRING, MS_TOKEN_LITERAL_TIME, MS_TOKEN_LITERAL_SHAPE, MS_TOKEN_LITERAL_BOOLEAN };$/;"	e	enum:MS_TOKEN_LITERAL_ENUM
MS_TOKEN_LOGICAL_AND	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	e	enum:MS_TOKEN_LOGICAL_ENUM
MS_TOKEN_LOGICAL_ENUM	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	g
MS_TOKEN_LOGICAL_NOT	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	e	enum:MS_TOKEN_LOGICAL_ENUM
MS_TOKEN_LOGICAL_OR	Topography/shapelib/mapserver.h	/^  enum MS_TOKEN_LOGICAL_ENUM { MS_TOKEN_LOGICAL_AND=300, MS_TOKEN_LOGICAL_OR, MS_TOKEN_LOGICAL_NOT };$/;"	e	enum:MS_TOKEN_LOGICAL_ENUM
MS_TRANSFORM_FULLRESOLUTION	Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_FULLRESOLUTION, \/* keep full resolution *\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_MODE	Topography/shapelib/mapserver.h	/^  enum MS_TRANSFORM_MODE {$/;"	g
MS_TRANSFORM_NONE	Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_NONE, \/* no geographic to pixel transformation *\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_ROUND	Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_ROUND, \/* round to integer, might create degenerate geometries (used for GD)*\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_SIMPLIFY	Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_SIMPLIFY \/* keep full resolution *\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSFORM_SNAPTOGRID	Topography/shapelib/mapserver.h	/^    MS_TRANSFORM_SNAPTOGRID, \/* snap to a grid, should be user configurable in the future*\/$/;"	e	enum:MS_TRANSFORM_MODE
MS_TRANSPARENT_COLOR	Topography/shapelib/mapserver.h	383;"	d
MS_TRUE	Topography/shapelib/mapserver.h	217;"	d
MS_TRUETYPE	Topography/shapelib/mapserver.h	/^  enum MS_FONT_TYPE {MS_TRUETYPE, MS_BITMAP};$/;"	e	enum:MS_FONT_TYPE
MS_TTFERR	Topography/shapelib/maperror.h	51;"	d
MS_TYPEERR	Topography/shapelib/maperror.h	48;"	d
MS_UC	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_UL	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_UNION	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_UNITS	Topography/shapelib/mapserver.h	/^  enum MS_UNITS {MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD, MS_PIXELS, MS_PERCENTAGES, MS_NAUTICALMILES};$/;"	g
MS_UNKNOWN	Topography/shapelib/mapserver.h	219;"	d
MS_UNUSEDERR	Topography/shapelib/maperror.h	65;"	d
MS_UNUSED_1	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_UNUSED_2	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_UR	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_URL	Topography/shapelib/mapserver.h	291;"	d
MS_URL_LENGTH	Topography/shapelib/mapserver.h	275;"	d
MS_UVRASTER	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_V8ERR	Topography/shapelib/maperror.h	87;"	d
MS_VALID_COLOR	Topography/shapelib/mapserver.h	381;"	d
MS_VALID_EXTENT	Topography/shapelib/mapserver.h	378;"	d
MS_WCSERR	Topography/shapelib/maperror.h	76;"	d
MS_WEBERR	Topography/shapelib/maperror.h	58;"	d
MS_WFS	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_WFSCONNERR	Topography/shapelib/maperror.h	72;"	d
MS_WFSERR	Topography/shapelib/maperror.h	71;"	d
MS_WMS	Topography/shapelib/mapserver.h	/^  enum MS_CONNECTION_TYPE {MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_UNUSED_2, MS_OGR, MS_UNUSED_1, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_MYSQL, MS_RASTER, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY };$/;"	e	enum:MS_CONNECTION_TYPE
MS_WMSCONNERR	Topography/shapelib/maperror.h	69;"	d
MS_WMSERR	Topography/shapelib/maperror.h	68;"	d
MS_XY	Topography/shapelib/mapserver.h	/^  enum MS_POSITIONS_ENUM {MS_UL=101, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC, MS_CC, MS_AUTO, MS_XY, MS_NONE, MS_AUTO2,MS_FOLLOW};$/;"	e	enum:MS_POSITIONS_ENUM
MS_YES	Topography/shapelib/mapserver.h	225;"	d
MSinkRate	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::MSinkRate(const double V) const$/;"	f	class:GlidePolar
MT_ACK	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_ACK = 0xA0,$/;"	e	enum:FLARM::MessageType
MT_ERROR	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_ERROR = 0x00,$/;"	e	enum:FLARM::MessageType
MT_EXIT	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_EXIT = 0x12,$/;"	e	enum:FLARM::MessageType
MT_FLASHUPLOAD	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_FLASHUPLOAD = 0x10,$/;"	e	enum:FLARM::MessageType
MT_GETIGCDATA	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_GETIGCDATA = 0x22,$/;"	e	enum:FLARM::MessageType
MT_GETRECORDINFO	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_GETRECORDINFO = 0x21,$/;"	e	enum:FLARM::MessageType
MT_NACK	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_NACK = 0xB7,$/;"	e	enum:FLARM::MessageType
MT_PING	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_PING = 0x01,$/;"	e	enum:FLARM::MessageType
MT_SELECTRECORD	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_SELECTRECORD = 0x20,$/;"	e	enum:FLARM::MessageType
MT_SETBAUDRATE	Device/Driver/FLARM/BinaryProtocol.hpp	/^    MT_SETBAUDRATE = 0x02,$/;"	e	enum:FLARM::MessageType
MULTI_LINE	Widget/RowFormWidget.hpp	/^      MULTI_LINE,$/;"	m	class:RowFormWidget::Row::Type
MUTATE	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  MUTATE,$/;"	e	enum:Buttons	file:
MUTATED_FROM_GOTO	Task/MapTaskManager.hpp	/^    MUTATED_FROM_GOTO,$/;"	e	enum:MapTaskManager::TaskEditResult
MUTATED_TO_GOTO	Task/MapTaskManager.hpp	/^    MUTATED_TO_GOTO,$/;"	e	enum:MapTaskManager::TaskEditResult
MWV	Device/Parser.cpp	/^NMEAParser::MWV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
MXCFB_GET_DIFMT	Screen/FB/mxcfb.h	157;"	d
MXCFB_GET_FB_BLANK	Screen/FB/mxcfb.h	158;"	d
MXCFB_GET_FB_IPU_CHAN	Screen/FB/mxcfb.h	152;"	d
MXCFB_GET_FB_IPU_DI	Screen/FB/mxcfb.h	156;"	d
MXCFB_GET_PMIC_TEMPERATURE	Screen/FB/mxcfb.h	170;"	d
MXCFB_GET_PWRDOWN_DELAY	Screen/FB/mxcfb.h	168;"	d
MXCFB_REFRESH_AUTO	Screen/FB/mxcfb.h	/^	MXCFB_REFRESH_AUTO,$/;"	e	enum:__anon92
MXCFB_REFRESH_OFF	Screen/FB/mxcfb.h	/^	MXCFB_REFRESH_OFF,$/;"	e	enum:__anon92
MXCFB_REFRESH_PARTIAL	Screen/FB/mxcfb.h	/^	MXCFB_REFRESH_PARTIAL,$/;"	e	enum:__anon92
MXCFB_SEND_UPDATE	Screen/FB/mxcfb.h	165;"	d
MXCFB_SET_AUTO_UPDATE_MODE	Screen/FB/mxcfb.h	164;"	d
MXCFB_SET_BORDER_MODE	Screen/FB/mxcfb.h	171;"	d
MXCFB_SET_CLR_KEY	Screen/FB/mxcfb.h	150;"	d
MXCFB_SET_DIFMT	Screen/FB/mxcfb.h	159;"	d
MXCFB_SET_EPD_PWR0_CTRL	Screen/FB/mxcfb.h	172;"	d
MXCFB_SET_EPD_PWR2_CTRL	Screen/FB/mxcfb.h	173;"	d
MXCFB_SET_GAMMA	Screen/FB/mxcfb.h	155;"	d
MXCFB_SET_GBL_ALPHA	Screen/FB/mxcfb.h	149;"	d
MXCFB_SET_LOC_ALPHA	Screen/FB/mxcfb.h	153;"	d
MXCFB_SET_LOC_ALP_BUF	Screen/FB/mxcfb.h	154;"	d
MXCFB_SET_MERGE_ON_WAVEFORM_MISMATCH	Screen/FB/mxcfb.h	175;"	d
MXCFB_SET_OVERLAY_POS	Screen/FB/mxcfb.h	151;"	d
MXCFB_SET_PWRDOWN_DELAY	Screen/FB/mxcfb.h	167;"	d
MXCFB_SET_TEMPERATURE	Screen/FB/mxcfb.h	163;"	d
MXCFB_SET_TEMP_AUTO_UPDATE_PERIOD	Screen/FB/mxcfb.h	174;"	d
MXCFB_SET_UPDATE_SCHEME	Screen/FB/mxcfb.h	169;"	d
MXCFB_SET_WAVEFORM_MODES	Screen/FB/mxcfb.h	162;"	d
MXCFB_WAIT_FOR_UPDATE_COMPLETE	Screen/FB/mxcfb.h	166;"	d
MXCFB_WAIT_FOR_VSYNC	Screen/FB/mxcfb.h	148;"	d
M_2PI	Math/Constants.hpp	33;"	d
M_PI	Math/Constants.hpp	30;"	d
M_PI_2	Math/Constants.hpp	36;"	d
MacAddress	Tracking/SkyLines/Key.cpp	/^struct MacAddress {$/;"	s	file:
MacCready	Engine/GlideSolvers/MacCready.cpp	/^MacCready::MacCready(const GlideSettings &_settings,$/;"	f	class:MacCready
MacCready	Engine/GlideSolvers/MacCready.hpp	/^class MacCready $/;"	c
MacCreadyCaption	Renderer/MacCreadyRenderer.cpp	/^MacCreadyCaption(TCHAR *sTmp, const GlidePolar &glide_polar)$/;"	f
MacCreadyOffsetButtons	InfoBoxes/Panel/MacCreadyEdit.cpp	/^  MacCreadyOffsetButtons(Args&&... args):OffsetButtonsWidget(args...) {}$/;"	f	class:final
MacCreadyProcessTimer	ApplyExternalSettings.cpp	/^MacCreadyProcessTimer()$/;"	f	file:
MacCreadySetupPanel	InfoBoxes/Panel/MacCreadySetup.cpp	/^class MacCreadySetupPanel : public WindowWidget,$/;"	c	file:
MacCreadyVopt	Engine/GlideSolvers/MacCready.cpp	/^  MacCreadyVopt(const GlideState &_task, const MacCready &_mac,$/;"	f	class:MacCreadyVopt
MacCreadyVopt	Engine/GlideSolvers/MacCready.cpp	/^class MacCreadyVopt: public ZeroFinder$/;"	c	file:
Magnitude	Geo/Flat/FlatPoint.hpp	/^  double Magnitude() const {$/;"	f	struct:FlatPoint
Magnitude	Geo/Flat/FlatRay.cpp	/^FlatRay::Magnitude() const$/;"	f	class:FlatRay
Main	Kobo/KoboMenu.cpp	/^Main()$/;"	f	file:
Main	Kobo/KoboMenu.cpp	/^Main(SingleWindow &main_window, const DialogLook &dialog_look)$/;"	f	file:
Main	PageSettings.hpp	/^  enum class Main : uint8_t {$/;"	c	struct:PageLayout
Main	XCSoar.cpp	/^Main()$/;"	f	file:
MainMenuButton	Form/TabMenuDisplay.hpp	/^  struct MainMenuButton {$/;"	s	class:final
MainWindow	MainWindow.hpp	/^class MainWindow : public SingleWindow {$/;"	c
Make	Cloud/Client.cpp	/^CloudClientContainer::Make(const boost::asio::ip::udp::endpoint &endpoint,$/;"	f	class:CloudClientContainer
Make	Cloud/Thermal.cpp	/^CloudThermalContainer::Make(uint64_t client_key,$/;"	f	class:CloudThermalContainer
Make	Util/Cache.hxx	/^	Item &Make(K &&key, U &&data) {$/;"	f	class:Cache
MakeAck	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeAck(uint64_t key, uint16_t id, uint32_t flags)$/;"	f	class:SkyLinesTracking
MakeAirspaceSettingName	Profile/AirspaceConfig.cpp	/^MakeAirspaceSettingName(char *buffer, const char *prefix, unsigned n)$/;"	f	file:
MakeAlsaHandleUniquePtr	Audio/ALSAPCMPlayer.hpp	/^  static inline AlsaHandleUniquePtr MakeAlsaHandleUniquePtr($/;"	f	class:ALSAPCMPlayer
MakeAndPredicate	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^MakeAndPredicate(const A &a, const B &b)$/;"	f
MakeBottomRow	InfoBoxes/InfoBoxLayout.cpp	/^MakeBottomRow(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeCClosure	Lua/Util.hxx	/^MakeCClosure(lua_CFunction fn, T&&... values)$/;"	f	struct:Lua::StackIndex::LightUserData
MakeCachePath	IO/FileCache.hpp	/^  AllocatedPath MakeCachePath(const TCHAR *name) const {$/;"	f	class:FileCache
MakeCircleBuffer	Screen/OpenGL/Shapes.cpp	/^MakeCircleBuffer(unsigned n)$/;"	f	file:
MakeDeviceSettingName	Profile/DeviceConfig.cpp	/^MakeDeviceSettingName(char *buffer, const char *prefix, unsigned n,$/;"	f	file:
MakeDisposer	Engine/Trace/Trace.hpp	/^  Disposer<decltype(allocator)> MakeDisposer() {$/;"	f	class:Trace
MakeDisposer	Engine/Trace/Trace.hpp	/^  static Disposer<Alloc> MakeDisposer(Alloc &alloc) {$/;"	f	class:Trace
MakeFix	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeFix(uint64_t key, uint32_t flags, uint32_t time,$/;"	f	class:SkyLinesTracking
MakeLambdaActionListener	Form/LambdaActionListener.hpp	/^MakeLambdaActionListener(C &&c)$/;"	f
MakeLeftColumn	InfoBoxes/InfoBoxLayout.cpp	/^MakeLeftColumn(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeListItemRenderer	Form/List.hpp	/^MakeListItemRenderer(C &&c)$/;"	f
MakeLocalPath	LocalPath.cpp	/^MakeLocalPath(const TCHAR *name)$/;"	f
MakeMessage	Monitor/AirspaceWarningMonitor.cpp	/^  const TCHAR *MakeMessage(const AbstractAirspace &airspace,$/;"	f	class:final	file:
MakeMessage	Monitor/MatTaskMonitor.cpp	/^  const TCHAR *MakeMessage(const Waypoint &wp) {$/;"	f	class:final	file:
MakeMode	Input/InputConfig.hpp	/^  int MakeMode(TStringView name) {$/;"	f	struct:InputConfig
MakeOverlayLabel	Weather/PCMet/Overlays.cpp	/^MakeOverlayLabel(PCMet::OverlayInfo &info)$/;"	f	file:
MakePing	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakePing(uint64_t key, uint16_t id)$/;"	f	class:SkyLinesTracking
MakeRightColumn	InfoBoxes/InfoBoxLayout.cpp	/^MakeRightColumn(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeTemporaryPath	IO/FileTransaction.cpp	/^MakeTemporaryPath(Path path)$/;"	f	file:
MakeTexture	Screen/Android/Bitmap.cpp	/^Bitmap::MakeTexture(jobject _bmp, Type _type, bool flipped)$/;"	f	class:Bitmap
MakeTexture	Screen/OpenGL/Bitmap.cpp	/^Bitmap::MakeTexture(const UncompressedImage &uncompressed, Type type)$/;"	f	class:Bitmap
MakeThermal	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeThermal(uint32_t time,$/;"	f	class:SkyLinesTracking
MakeThermalRequest	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeThermalRequest(uint64_t key)$/;"	f	class:SkyLinesTracking
MakeThermalSubmit	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeThermalSubmit(uint64_t key, uint32_t time,$/;"	f	class:SkyLinesTracking
MakeTitle	PageSettings.cpp	/^PageLayout::MakeTitle(const InfoBoxSettings &info_box_settings,$/;"	f	class:PageLayout
MakeTopRow	InfoBoxes/InfoBoxLayout.cpp	/^MakeTopRow(const InfoBoxLayout::Layout &layout,$/;"	f	file:
MakeTrafficRequest	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeTrafficRequest(uint64_t key, bool followees, bool club,$/;"	f	class:SkyLinesTracking
MakeUint64	Tracking/SkyLines/Key.cpp	/^MakeUint64(uint8_t a, uint8_t b, uint8_t c, uint8_t d,$/;"	f	file:
MakeUint64_64	Tracking/SkyLines/Key.cpp	/^MakeUint64_64(uint64_t a, uint64_t b, uint64_t c, uint64_t d,$/;"	f	file:
MakeUserNameRequest	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::MakeUserNameRequest(uint64_t key, uint32_t user_id)$/;"	f	class:SkyLinesTracking
MakeWaypoint	Task/TaskFileIGC.cpp	/^MakeWaypoint(GeoPoint location, const TCHAR *name)$/;"	f	file:
ManageCAI302Dialog	Dialogs/Device/ManageCAI302Dialog.cpp	/^ManageCAI302Dialog(SingleWindow &parent, const DialogLook &look,$/;"	f
ManageCAI302Widget	Dialogs/Device/ManageCAI302Dialog.cpp	/^  ManageCAI302Widget(const DialogLook &look, CAI302Device &_device)$/;"	f	class:final
ManageCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::ManageCurrent()$/;"	f	class:DeviceListWidget
ManageFLARMWidget	Dialogs/Device/ManageFlarmDialog.cpp	/^  ManageFLARMWidget(const DialogLook &look, FlarmDevice &_device,$/;"	f	class:final
ManageFlarmDialog	Dialogs/Device/ManageFlarmDialog.cpp	/^ManageFlarmDialog(Device &device, const FlarmVersion &version)$/;"	f
ManageLX16xxDialog	Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^ManageLX16xxDialog(Device &device, const DeviceInfo &info)$/;"	f
ManageLX16xxWidget	Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  ManageLX16xxWidget(const DialogLook &look, LXDevice &_device,$/;"	f	class:ManageLX16xxWidget
ManageLX16xxWidget	Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^class ManageLX16xxWidget : public RowFormWidget {$/;"	c	file:
ManageNanoDialog	Dialogs/Device/LX/ManageNanoDialog.cpp	/^ManageNanoDialog(Device &device, const DeviceInfo &info)$/;"	f
ManageNanoWidget	Dialogs/Device/LX/ManageNanoDialog.cpp	/^  ManageNanoWidget(const DialogLook &look, LXDevice &_device,$/;"	f	class:final
ManageV7Dialog	Dialogs/Device/LX/ManageV7Dialog.cpp	/^ManageV7Dialog(Device &device, const DeviceInfo &info,$/;"	f
ManageV7Widget	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  ManageV7Widget(const DialogLook &look, LXDevice &_device,$/;"	f	class:final
ManagedFileListWidget	Dialogs/FileManager.cpp	/^class ManagedFileListWidget$/;"	c	file:
ManagedWidget	Widget/ManagedWidget.hpp	/^  ManagedWidget(ContainerWindow &_parent)$/;"	f	class:ManagedWidget
ManagedWidget	Widget/ManagedWidget.hpp	/^  ManagedWidget(ContainerWindow &_parent, Widget *_widget)$/;"	f	class:ManagedWidget
ManagedWidget	Widget/ManagedWidget.hpp	/^class ManagedWidget {$/;"	c
Manual	Util/Manual.hxx	/^class Manual {$/;"	c
Map	Device/SettingsMap.hpp	/^  typedef std::map<std::string, Item> Map;$/;"	t	class:DeviceSettingsMap
Map	FLARM/ColorDatabase.hpp	/^  typedef std::map<FlarmId, FlarmColor> Map;$/;"	t	class:FlarmColorDatabase
MapCanvas	MapWindow/MapCanvas.hpp	/^  MapCanvas(Canvas &_canvas, const Projection &_projection,$/;"	f	class:MapCanvas
MapCanvas	MapWindow/MapCanvas.hpp	/^class MapCanvas {$/;"	c
MapDisplayConfigPanel	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  MapDisplayConfigPanel()$/;"	f	class:final
MapFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  MapFile,$/;"	e	enum:ControlIndex	file:
MapFile	Profile/ProfileKeys.cpp	/^const char MapFile[] = "MapFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
MapFileChanged	UtilsSettings.cpp	/^bool MapFileChanged = false;$/;"	v
MapInQuadrilateral	MapWindow/OverlayBitmap.cpp	/^MapInQuadrilateral(const GeoQuadrilateral &q, const GeoPoint p)$/;"	f	file:
MapInfo	Weather/Rasp/RaspStore.hpp	/^  struct MapInfo {$/;"	s	class:RaspStore
MapItem	MapWindow/Items/MapItem.hpp	/^  MapItem(Type _type):type(_type) {}$/;"	f	class:TaskPointType
MapItem	Weather/Rasp/RaspStore.cpp	/^RaspStore::MapItem::MapItem(const TCHAR *_name)$/;"	f	class:RaspStore::MapItem
MapItem	Weather/Rasp/RaspStore.hpp	/^  struct MapItem {$/;"	s	class:RaspStore
MapItemList	MapWindow/Items/List.hpp	/^class MapItemList: public StaticArray<MapItem *, 32>$/;"	c
MapItemListBuilder	MapWindow/Items/Builder.hpp	/^  MapItemListBuilder(MapItemList &_list, GeoPoint _location, double _range)$/;"	f	class:MapItemListBuilder
MapItemListBuilder	MapWindow/Items/Builder.hpp	/^class MapItemListBuilder$/;"	c
MapItemListRenderer	Renderer/MapItemListRenderer.hpp	/^  MapItemListRenderer(const MapLook &_look,$/;"	f	class:MapItemListRenderer
MapItemListRenderer	Renderer/MapItemListRenderer.hpp	/^class MapItemListRenderer {$/;"	c
MapItemListSettings	MapSettings.hpp	/^struct MapItemListSettings {$/;"	s
MapItemListSettingsPanel	Dialogs/MapItemListSettingsPanel.cpp	/^MapItemListSettingsPanel::MapItemListSettingsPanel()$/;"	f	class:MapItemListSettingsPanel
MapItemListWidget	Dialogs/MapItemListDialog.cpp	/^  MapItemListWidget(const MapItemList &_list,$/;"	f	class:final
MapList	Weather/Rasp/RaspStore.hpp	/^  typedef StaticArray<MapItem, MAX_WEATHER_MAP> MapList;$/;"	t	class:RaspStore
MapLook	Look/MapLook.hpp	/^struct MapLook {$/;"	s
MapOrientation	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  MapOrientation,$/;"	e	enum:ControlIndex	file:
MapOrientation	MapSettings.hpp	/^enum class MapOrientation : uint8_t {$/;"	c
MapOrientation	Profile/ProfileKeys.cpp	/^const char MapOrientation[] = "DisplayOrientation";$/;"	m	namespace:ProfileKeys	file:
MapOverlay	MapWindow/Overlay.hpp	/^class MapOverlay {$/;"	c
MapOverlayBitmap	MapWindow/OverlayBitmap.cpp	/^MapOverlayBitmap::MapOverlayBitmap(Path path)$/;"	f	class:MapOverlayBitmap
MapSettings	MapSettings.hpp	/^struct MapSettings {$/;"	s
MapSettingsBlackboard	Blackboard/MapSettingsBlackboard.hpp	/^class MapSettingsBlackboard$/;"	c
MapShiftBias	MapSettings.hpp	/^enum class MapShiftBias : uint8_t {$/;"	c
MapShiftBias	Profile/ProfileKeys.cpp	/^const char MapShiftBias[] = "MapShiftBias";$/;"	m	namespace:ProfileKeys	file:
MapTaskManager	Task/MapTaskManager.hpp	/^namespace MapTaskManager$/;"	n
MapVehicleTypeToLivetrack24	Tracking/TrackingGlue.cpp	/^MapVehicleTypeToLivetrack24(LiveTrack24::Settings::VehicleType vt)$/;"	f	file:
MapWaypointLabelListCompare	Renderer/WaypointLabelList.cpp	/^MapWaypointLabelListCompare(const WaypointLabelList::Label &e1,$/;"	f	file:
MapWaypointLabelRender	Renderer/WaypointRenderer.cpp	/^MapWaypointLabelRender(Canvas &canvas, unsigned width, unsigned height,$/;"	f	file:
MapWindow	MapWindow/MapWindow.cpp	/^MapWindow::MapWindow(const MapLook &_look,$/;"	f	class:MapWindow
MapWindow	MapWindow/MapWindow.hpp	/^class MapWindow :$/;"	c
MapWindowBlackboard	MapWindow/MapWindowBlackboard.hpp	/^class MapWindowBlackboard:$/;"	c
MapWindowProjection	Projection/MapWindowProjection.hpp	/^class MapWindowProjection:$/;"	c
MapWrite	Screen/OpenGL/Buffer.hpp	/^  static void *MapWrite() {$/;"	f	class:GLBuffer
Mark	Screen/StopWatch.hpp	/^  void Mark(const char *text) {$/;"	f	class:ScreenStopWatch
MarkLocation	Markers/Markers.cpp	/^MarkLocation(const GeoPoint &loc, const BrokenDateTime &time)$/;"	f
MarkOld	Device/SettingsMap.hpp	/^  void MarkOld(const K &key) {$/;"	f	class:DeviceSettingsMap
Marker	Screen/StopWatch.hpp	/^  struct Marker {$/;"	s	class:ScreenStopWatch
MarkerList	Screen/StopWatch.hpp	/^  typedef StaticArray<Marker, 256u> MarkerList;$/;"	t	class:ScreenStopWatch
MarkerSegment	Terrain/Loader.cpp	/^TerrainLoader::MarkerSegment(long file_offset, unsigned id)$/;"	f	class:TerrainLoader
MarkerSegmentInfo	Terrain/RasterTileCache.hpp	/^    MarkerSegmentInfo() {}$/;"	f	struct:RasterTileCache::MarkerSegmentInfo
MarkerSegmentInfo	Terrain/RasterTileCache.hpp	/^    MarkerSegmentInfo(uint32_t _file_offset, int _tile=NO_TILE)$/;"	f	struct:RasterTileCache::MarkerSegmentInfo
MarkerSegmentInfo	Terrain/RasterTileCache.hpp	/^  struct MarkerSegmentInfo {$/;"	s	class:RasterTileCache
MaskedIcon	Screen/Icon.hpp	/^class MaskedIcon {$/;"	c
MassUnitValue	Profile/ProfileKeys.cpp	/^const char MassUnitValue[] = "MassUnit";$/;"	m	namespace:ProfileKeys	file:
MasterAudioVolume	Profile/ProfileKeys.cpp	/^const char MasterAudioVolume[] = "MasterAudioVolume";$/;"	m	namespace:ProfileKeys	file:
MasterVolume	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  MasterVolume,$/;"	e	enum:ControlIndex	file:
MatTaskAddWidget	Monitor/MatTaskMonitor.cpp	/^  MatTaskAddWidget(MatTaskMonitor &_monitor, WaypointPtr &&_waypoint)$/;"	f	class:final
MatTaskFactory	Engine/Task/Factory/MatTaskFactory.cpp	/^MatTaskFactory::MatTaskFactory(OrderedTask& _task, const TaskBehaviour &tb)$/;"	f	class:MatTaskFactory
MatTaskMonitor	Monitor/MatTaskMonitor.hpp	/^  MatTaskMonitor():widget(nullptr), last_id(-1) {}$/;"	f	class:MatTaskMonitor
MatTaskMonitor	Monitor/MatTaskMonitor.hpp	/^class MatTaskMonitor {$/;"	c
Match	Engine/Airspace/AirspaceSorter.cpp	/^AirspaceFilterData::Match(const GeoPoint &location,$/;"	f	class:AirspaceFilterData
Match	Util/RadixTree.hpp	/^      Match(Node *_node, const TCHAR *_key)$/;"	f	struct:RadixTree::Node::Match
Match	Util/RadixTree.hpp	/^    struct Match {$/;"	s	struct:RadixTree::Node
Match	Util/StringParser.hxx	/^	bool Match(const_pointer value, size_t size) {$/;"	f	class:StringParser
Match	Util/StringParser.hxx	/^	bool Match(value_type value) {$/;"	f	class:StringParser
MatchAll	Util/StringParser.hxx	/^	bool MatchAll(const_pointer value) {$/;"	f	class:StringParser
MatchAllIgnoreCase	Util/StringParser.hxx	/^	bool MatchAllIgnoreCase(const_pointer value) {$/;"	f	class:StringParser
MatchCallback	Event/Android/Queue.cpp	/^MatchCallback(const Event &event, void *ctx)$/;"	f	file:
MatchCallback	Event/Poll/Queue.cpp	/^MatchCallback(const Event &event, void *ctx)$/;"	f	file:
MatchCallback	Event/SDL/Queue.cpp	/^MatchCallback(const SDL_Event &event, void *ctx)$/;"	f	file:
MatchCallbackData	Event/SDL/Queue.cpp	/^struct MatchCallbackData {$/;"	s	file:
MatchIgnoreCase	Util/StringParser.hxx	/^	bool MatchIgnoreCase(const_pointer value, size_t size) {$/;"	f	class:StringParser
MatchKey	Util/RadixTree.hpp	/^    const TCHAR *MatchKey(const TCHAR *key) const {$/;"	f	struct:RadixTree::Node
MatchNamePrefix	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::MatchNamePrefix(const TCHAR *prefix) const$/;"	f	class:AbstractAirspace
MatchPrefix	Util/RadixTree.hpp	/^    const TCHAR *MatchPrefix(const TCHAR *prefix) const {$/;"	f	struct:RadixTree::Node
Matches	Engine/Airspace/AirspaceActivity.hpp	/^  bool Matches(AirspaceActivity _mask) const {$/;"	f	class:AirspaceActivity
Matches	Waypoint/WaypointFilter.cpp	/^WaypointFilter::Matches(const Waypoint &waypoint, GeoPoint location,$/;"	f	class:WaypointFilter
MatchesExtension	OS/Path.cpp	/^Path::MatchesExtension(const_pointer extension) const$/;"	f	class:Path
MatchesExtension	OS/Path.hpp	/^  bool MatchesExtension(const_pointer extension) const {$/;"	f	class:AllocatedPath
MatchesExtension	OS/PathName.cpp	/^MatchesExtension(const TCHAR *filename, const TCHAR *extension)$/;"	f
MatchesExtension	OS/PathName.cpp	/^MatchesExtension(const char *filename, const char *extension)$/;"	f
Max	Rough/RoughAltitude.hpp	/^  static RoughAltitude Max() {$/;"	f	class:RoughAltitude
MaxAutoZoomDistance	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  MaxAutoZoomDistance,$/;"	e	enum:ControlIndex	file:
MaxAutoZoomDistance	Profile/ProfileKeys.cpp	/^const char MaxAutoZoomDistance[] = "MaxAutoZoomDistance";$/;"	m	namespace:ProfileKeys	file:
MaxHeightGain	Computer/CirclingComputer.cpp	/^CirclingComputer::MaxHeightGain(const MoreData &basic,$/;"	f	class:CirclingComputer
MaxHeightGain	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  MaxHeightGain,$/;"	e	enum:Controls	file:
MaybeBluetooth	Device/Config.cpp	/^DeviceConfig::MaybeBluetooth() const$/;"	f	class:DeviceConfig
MaybeBluetooth	Device/Config.cpp	/^DeviceConfig::MaybeBluetooth(PortType port_type, const TCHAR *path)$/;"	f	class:DeviceConfig
MemoryAddress24	Device/Driver/LX/Protocol.hpp	/^  struct MemoryAddress24 {$/;"	s	namespace:LX
MemoryAddress24	Device/Driver/LXERA/Protocol.hpp	/^  struct MemoryAddress24 {$/;"	s	namespace:LXEra
MemoryAddress32	Device/Driver/LX/Protocol.hpp	/^  struct MemoryAddress32 {$/;"	s	namespace:LX
MemoryAddress32	Device/Driver/LXERA/Protocol.hpp	/^  struct MemoryAddress32 {$/;"	s	namespace:LXEra
MemorySection	Device/Driver/LX/Protocol.hpp	/^  struct MemorySection {$/;"	s	namespace:LX
MemorySection	Device/Driver/LXERA/Protocol.hpp	/^  struct MemorySection {$/;"	s	namespace:LXEra
Menu	Menu/MenuData.hpp	/^class Menu {$/;"	c
MenuBar	Menu/MenuBar.cpp	/^MenuBar::MenuBar(ContainerWindow &parent, const ButtonLook &look)$/;"	f	class:MenuBar
MenuBar	Menu/MenuBar.hpp	/^class MenuBar {$/;"	c
MenuItem	Menu/MenuData.hpp	/^class MenuItem {$/;"	c
MenuTabIndex	Form/TabMenuDisplay.hpp	/^    explicit MenuTabIndex(unsigned mainNum, unsigned subNum=NO_SUB_MENU)$/;"	f	struct:final::MenuTabIndex
MenuTabIndex	Form/TabMenuDisplay.hpp	/^  struct MenuTabIndex {$/;"	s	class:final
MenuTimeOut	Input/InputEvents.cpp	/^  static unsigned MenuTimeOut = 0;$/;"	m	namespace:InputEvents	file:
MenuTimeout	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  MenuTimeout,$/;"	e	enum:ControlIndex	file:
MenuTimeout	Profile/ProfileKeys.cpp	/^const char MenuTimeout[] = "MenuTimeout";$/;"	m	namespace:ProfileKeys	file:
Merge	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::Merge()$/;"	f	class:DeviceBlackboard
Merge	Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::Merge(const ThermalBand& tb)$/;"	f	class:ThermalEncounterCollection
Merge	Engine/ThermalBand/ThermalSlice.cpp	/^ThermalSlice::Merge(const ThermalSlice& o)$/;"	f	class:ThermalSlice
Merge	Geo/Flat/FlatBoundingBox.hpp	/^  void Merge(const FlatBoundingBox& p) {$/;"	f	struct:FlatBoundingBox
Merge	Kobo/WifiDialog.cpp	/^WifiListWidget::Merge(const WifiConfiguredNetworkInfo &c)$/;"	f	class:WifiListWidget
MergeLines	Computer/WaveComputer.cpp	/^MergeLines(FlatLine &a, const FlatLine b)$/;"	f	file:
MergeLines	Computer/WaveComputer.cpp	/^MergeLines(WaveInfo &i, const WaveInfo &new_wave, double new_length,$/;"	f	file:
MergeList	Kobo/WifiDialog.cpp	/^WifiListWidget::MergeList(const WifiConfiguredNetworkInfo *p, unsigned n)$/;"	f	class:WifiListWidget
MergeList	Kobo/WifiDialog.cpp	/^WifiListWidget::MergeList(const WifiVisibleNetwork *p, unsigned n)$/;"	f	class:WifiListWidget
MergeThread	MergeThread.cpp	/^MergeThread::MergeThread(DeviceBlackboard &_device_blackboard)$/;"	f	class:MergeThread
MergeUnsafe	Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::MergeUnsafe(const ThermalBand& o)$/;"	f	class:ThermalEncounterCollection
Message	Message.hpp	/^namespace Message {$/;"	n
Message	PopupMessage.hpp	/^    Message()$/;"	f	struct:PopupMessage::Message
Message	PopupMessage.hpp	/^  struct Message {$/;"	s	class:PopupMessage
MessageOperationEnvironment	Operation/MessageOperationEnvironment.hpp	/^class MessageOperationEnvironment : public QuietOperationEnvironment {$/;"	c
MessageParser	Device/Driver/IMI/Protocol/MessageParser.cpp	/^namespace MessageParser {$/;"	n	namespace:IMI	file:
MessageParser	Device/Driver/IMI/Protocol/MessageParser.hpp	/^  namespace MessageParser {$/;"	n	namespace:IMI
MessageProcessTimer	ProcessTimer.cpp	/^MessageProcessTimer()$/;"	f	file:
MessageType	Device/Driver/FLARM/BinaryProtocol.hpp	/^  enum MessageType {$/;"	g	namespace:FLARM
MetaData	InfoBoxes/Content/Factory.cpp	/^  constexpr MetaData(const TCHAR *_name,$/;"	f	struct:MetaData
MetaData	InfoBoxes/Content/Factory.cpp	/^struct MetaData {$/;"	s	file:
MetaData	Terrain/RasterTile.hpp	/^  struct MetaData {$/;"	s	class:RasterTile
MidPoint	Geo/GeoVector.cpp	/^GeoVector::MidPoint(const GeoPoint &source) const$/;"	f	class:GeoVector
Middle	Geo/GeoPoint.cpp	/^GeoPoint::Middle(const GeoPoint &other) const$/;"	f	class:GeoPoint
Middle	Geo/Math.cpp	/^Middle(const GeoPoint &a, const GeoPoint &b)$/;"	f
Midnight	Time/BrokenTime.hpp	/^  static BrokenTime Midnight() {$/;"	f	struct:BrokenTime
MixLine	Screen/FreeType/Font.cpp	/^MixLine(uint8_t *dest, const uint8_t *src, size_t n)$/;"	f	file:
MixPCM	Audio/AudioAlgorithms.hpp	/^inline void MixPCM(int16_t *dest, const int16_t *src, size_t num_frames,$/;"	f
MixPCM	Audio/AudioAlgorithms.hpp	/^inline void MixPCM(int16_t *dest, size_t num_frames,$/;"	f
Mixed	Screen/Memory/PixelTraits.hpp	/^  struct Mixed {$/;"	s	struct:GreyscalePixelTraits
MixedTaskFactory	Engine/Task/Factory/MixedTaskFactory.cpp	/^MixedTaskFactory::MixedTaskFactory(OrderedTask& _task,$/;"	f	class:MixedTaskFactory
MixedTaskFactory	Engine/Task/Factory/MixedTaskFactory.hpp	/^class MixedTaskFactory: public AbstractTaskFactory $/;"	c
MixerPCMPlayer	Audio/MixerPCMPlayer.hpp	/^class MixerPCMPlayer : public PCMPlayer {$/;"	c
ModalResult	Form/Form.hpp	/^enum ModalResult {$/;"	g
Mode	Device/Driver/CAI302/Internal.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:CAI302Device
Mode	Device/Driver/FLARM/Device.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:FlarmDevice
Mode	Device/Driver/LX/Internal.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:LXDevice
Mode	Device/Driver/LXERA/Internal.hpp	/^  enum class Mode : uint8_t {$/;"	c	class:LXEraDevice
Mode	Engine/Route/Config.hpp	/^  enum class Mode {$/;"	c	struct:RoutePlannerConfig
Mode	IO/FileOutputStream.hxx	/^	enum class Mode : uint8_t {$/;"	c	class:final
Mode	Input/InputEvents.hpp	/^  enum Mode {$/;"	g	namespace:InputEvents
Mode	Renderer/WaypointLabelList.hpp	/^    TextInBoxMode Mode;$/;"	m	struct:WaypointLabelList::Label
ModeDirect	Device/Driver/LX/V7.hpp	/^  ModeDirect(Port &port, OperationEnvironment &env)$/;"	f	namespace:V7
ModeVSeven	Device/Driver/LX/V7.hpp	/^  ModeVSeven(Port &port, OperationEnvironment &env)$/;"	f	namespace:V7
Modified	Form/DataField/Base.cpp	/^DataField::Modified()$/;"	f	class:DataField
Modified	NMEA/Validity.hpp	/^  constexpr bool Modified(const Validity &other) const {$/;"	f	class:Validity
ModifyValue	Form/DataField/Angle.cpp	/^AngleDataField::ModifyValue(Angle _value)$/;"	f	class:AngleDataField
ModifyValue	Form/DataField/Angle.cpp	/^AngleDataField::ModifyValue(int _value)$/;"	f	class:AngleDataField
ModifyValue	Form/DataField/Angle.cpp	/^AngleDataField::ModifyValue(unsigned _value)$/;"	f	class:AngleDataField
ModifyValue	Form/DataField/GeoPoint.cpp	/^GeoPointDataField::ModifyValue(GeoPoint _value)$/;"	f	class:GeoPointDataField
ModifyValue	Form/DataField/RoughTime.cpp	/^RoughTimeDataField::ModifyValue(RoughTime _value)$/;"	f	class:RoughTimeDataField
ModuleInFlash	LocalPath.cpp	/^ModuleInFlash(HMODULE module, TCHAR *buffer)$/;"	f	file:
MonitorCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::MonitorCurrent()$/;"	f	class:DeviceListWidget
MonotonicClockFloat	OS/Clock.cpp	/^MonotonicClockFloat()$/;"	f
MonotonicClockMS	OS/Clock.cpp	/^MonotonicClockMS()$/;"	f
MonotonicClockUS	OS/Clock.cpp	/^MonotonicClockUS()$/;"	f
MoreData	NMEA/MoreData.hpp	/^struct MoreData : public NMEAInfo {$/;"	s
MouseDown	UIUtil/KineticManager.cpp	/^KineticManager::MouseDown(int x)$/;"	f	class:KineticManager
MouseMove	UIUtil/KineticManager.cpp	/^KineticManager::MouseMove(int x)$/;"	f	class:KineticManager
MouseUp	UIUtil/KineticManager.cpp	/^KineticManager::MouseUp(int x)$/;"	f	class:KineticManager
Move	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::Move(const PixelRect &rc)$/;"	f	class:TaskClosePanel
Move	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::Move(const PixelRect &rc)$/;"	f	class:BigThermalAssistantWidget
Move	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::Move(const PixelRect &rc)$/;"	f	class:TrafficWidget
Move	ProgressGlue.cpp	/^ProgressGlue::Move(const PixelRect &rc)$/;"	f	class:ProgressGlue
Move	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::Move(const PixelRect &rc)$/;"	f	class:ArrowPagerWidget
Move	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Move(const PixelRect &rc)$/;"	f	class:ButtonPanelWidget
Move	Widget/KeyboardWidget.cpp	/^KeyboardWidget::Move(const PixelRect &rc)$/;"	f	class:KeyboardWidget
Move	Widget/ManagedWidget.cpp	/^ManagedWidget::Move(const PixelRect &_position)$/;"	f	class:ManagedWidget
Move	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::Move(const PixelRect &total_rc)$/;"	f	class:OffsetButtonsWidget
Move	Widget/PagerWidget.cpp	/^PagerWidget::Move(const PixelRect &rc)$/;"	f	class:PagerWidget
Move	Widget/RowFormWidget.cpp	/^RowFormWidget::Move(const PixelRect &rc)$/;"	f	class:RowFormWidget
Move	Widget/SolidWidget.cpp	/^SolidWidget::Move(const PixelRect &rc)$/;"	f	class:SolidWidget
Move	Widget/TabWidget.cpp	/^TabWidget::Move(const PixelRect &rc)$/;"	f	class:TabWidget
Move	Widget/TwoWidgets.cpp	/^TwoWidgets::Move(const PixelRect &rc)$/;"	f	class:TwoWidgets
Move	Widget/Widget.cpp	/^NullWidget::Move(const PixelRect &rc)$/;"	f	class:NullWidget
Move	Widget/WindowWidget.cpp	/^WindowWidget::Move(const PixelRect &rc)$/;"	f	class:WindowWidget
MoveAbsolute	Event/Poll/Linux/MergeMouse.cpp	/^MergeMouse::MoveAbsolute(PixelPoint p)$/;"	f	class:MergeMouse
MoveAbsolute	Event/Poll/Linux/MergeMouse.cpp	/^MergeMouse::MoveAbsolute(int new_x, int new_y,$/;"	f	class:MergeMouse
MoveButton	Widget/KeyboardWidget.cpp	/^KeyboardWidget::MoveButton(unsigned ch, int left, int top)$/;"	f	class:KeyboardWidget
MoveButtons	Widget/KeyboardWidget.cpp	/^KeyboardWidget::MoveButtons(const PixelRect &rc)$/;"	f	class:KeyboardWidget
MoveButtonsToRow	Widget/KeyboardWidget.cpp	/^KeyboardWidget::MoveButtonsToRow(const PixelRect &rc,$/;"	f	class:KeyboardWidget
MoveChildren	Dialogs/Task/TaskPointDialog.cpp	/^  void MoveChildren(const Layout &layout) {$/;"	f	class:final	file:
MoveCursor	Dialogs/KnobTextEntry.cpp	/^  void MoveCursor() {$/;"	f	class:final	file:
MoveCursorLeft	Dialogs/KnobTextEntry.cpp	/^  bool MoveCursorLeft() {$/;"	f	class:final	file:
MoveCursorRight	Dialogs/KnobTextEntry.cpp	/^  bool MoveCursorRight() {$/;"	f	class:final	file:
MoveDown	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::MoveDown()$/;"	f	class:TaskEditPanel
MoveFocus	Form/GridView.cpp	/^GridView::MoveFocus(Direction direction)$/;"	f	class:GridView
MoveRelative	Event/Poll/Linux/MergeMouse.cpp	/^MergeMouse::MoveRelative(PixelPoint d)$/;"	f	class:MergeMouse
MoveUp	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::MoveUp()$/;"	f	class:TaskEditPanel
MoveWheel	Event/Poll/Linux/MergeMouse.hpp	/^  void MoveWheel(int d) {$/;"	f	class:final
MoveWidget	Widget/DockWindow.cpp	/^DockWindow::MoveWidget()$/;"	f	class:DockWindow
Moved	Screen/Custom/DoubleClick.hpp	/^  void Moved(PixelPoint _location) {$/;"	f	class:DoubleClick
MovementDetected	Interface.hpp	/^  static inline bool MovementDetected() {$/;"	f	namespace:CommonInterface
MovementDetected	NMEA/Info.hpp	/^  bool MovementDetected() const {$/;"	f	struct:NMEAInfo
Moving	Computer/FlyingComputer.cpp	/^FlyingComputer::Moving(FlyingState &state, double time, double dt,$/;"	f	class:FlyingComputer
MultiDrawElements	Screen/OpenGL/Dynamic.hpp	/^  static inline void MultiDrawElements(Args... args) {$/;"	f	namespace:GLExt
MultiPartFormData	Net/HTTP/FormData.hpp	/^    MultiPartFormData(MultiPartFormData &&src)$/;"	f	class:Net::MultiPartFormData
MultiPartFormData	Net/HTTP/FormData.hpp	/^  class MultiPartFormData {$/;"	c	namespace:Net
MultipleDevices	Device/MultipleDevices.cpp	/^MultipleDevices::MultipleDevices(boost::asio::io_context &io_context)$/;"	f	class:MultipleDevices
MultiplyY	Geo/Flat/FlatLine.hpp	/^  void MultiplyY(const double factor) {$/;"	f	class:FlatLine
MultiplyY	Geo/Flat/FlatPoint.hpp	/^  void MultiplyY(const double a) {$/;"	f	struct:FlatPoint
MurphyIterator	Screen/Memory/Murphy.hpp	/^  MurphyIterator(Canvas &_canvas, typename Canvas::color_type _color,$/;"	f	struct:MurphyIterator
MurphyIterator	Screen/Memory/Murphy.hpp	/^struct MurphyIterator {$/;"	s
MutateClosedFinishPerTaskType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::MutateClosedFinishPerTaskType()$/;"	f	class:AbstractTaskFactory
MutateFromGoto	Task/MapTaskManager.cpp	/^MutateFromGoto(OrderedTask *task, WaypointPtr &&finish_waypoint,$/;"	f	file:
MutateTPsToTaskType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::MutateTPsToTaskType()$/;"	f	class:AbstractTaskFactory
MutateTaskPointRenderer	Dialogs/Task/MutateTaskPointDialog.cpp	/^  explicit MutateTaskPointRenderer(TaskPointFactoryType _current_type)$/;"	f	class:final
N	Device/Driver/LX/Protocol.hpp	/^    static constexpr unsigned N = 0x10;$/;"	m	struct:LX::MemorySection
N	Device/Driver/LXERA/Protocol.hpp	/^    static constexpr unsigned N = 0x10;$/;"	m	struct:LXEra::MemorySection
N	Util/EnumBitSet.hpp	/^  static constexpr unsigned N = unsigned(E::COUNT);$/;"	m	class:EnumBitSet
N	Util/QuadTree.hxx	/^		static constexpr unsigned N = 4;$/;"	m	struct:QuadBucket
N2Event	Input/InputConfig.hpp	/^  unsigned short N2Event[NE_COUNT];$/;"	m	struct:InputConfig
NAK	Device/Driver/KRT2.cpp	/^  static constexpr char NAK = 0x15; \/\/!< Command not acknowledged character.$/;"	m	class:final	file:
NAK	Device/Driver/Volkslogger/Protocol.hpp	/^    NAK = 0x15,$/;"	e	enum:Volkslogger::__anon202
NAME	Dialogs/Airspace/AirspaceList.cpp	/^  NAME,$/;"	e	enum:Controls	file:
NAME	Dialogs/Plane/PlanePolarDialog.cpp	/^    NAME,$/;"	e	enum:final::Controls	file:
NAME	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    NAME, INFOBOX, CONTENT, DESCRIPTION$/;"	e	enum:final::Controls	file:
NAME	Dialogs/Task/TargetDialog.cpp	/^    NAME,$/;"	e	enum:TargetWidget::Buttons	file:
NAME	Dialogs/Waypoint/WaypointList.cpp	/^  NAME,$/;"	e	enum:Controls	file:
NAME	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    NAME,$/;"	e	enum:final::Rows	file:
NAME	Renderer/WaypointRendererSettings.hpp	/^    NAME = 0,$/;"	m	class:WaypointRendererSettings::DisplayTextType
NAME_LENGTH	Waypoint/WaypointFilter.hpp	/^  static constexpr size_t NAME_LENGTH = 10;$/;"	m	struct:WaypointFilter
NAME_SIZE	Sizes.h	5;"	d
NANO	Dialogs/Device/LX/ManageV7Dialog.cpp	/^    NANO,$/;"	e	enum:final::Controls	file:
NARROWS	Gauge/GaugeVario.hpp	/^  static constexpr unsigned NARROWS = 3;$/;"	m	class:GaugeVario
NATIVE_TO_INT	Math/FastTrig.hpp	/^NATIVE_TO_INT(double x)$/;"	f
NATIVE_TO_INT_COS	Math/FastTrig.hpp	/^NATIVE_TO_INT_COS(double x)$/;"	f
NAUTICAL_MILES	Units/Unit.hpp	/^  NAUTICAL_MILES,$/;"	m	class:Unit
NAVWarn	Device/Parser.cpp	/^NAVWarn(char c)$/;"	f	file:
NAV_DIJKSTRA_HPP	Engine/PathSolvers/NavDijkstra.hpp	25;"	d
NEAREST_AIRSPACE_HPP	Airspace/NearestAirspace.hpp	25;"	d
NEARZERO	Topography/shapelib/mapprimitive.c	50;"	d	file:
NEGATIVE	NMEA/SwitchState.hpp	/^    NEGATIVE,$/;"	m	class:SwitchState::FlapPosition
NEONAlphaPixelOperations	Screen/Memory/NEON.hpp	/^  constexpr NEONAlphaPixelOperations(uint8_t _alpha):alpha(_alpha) {}$/;"	f	class:NEONAlphaPixelOperations
NEONAlphaPixelOperations	Screen/Memory/NEON.hpp	/^class NEONAlphaPixelOperations {$/;"	c
NEONBitOrPixelOperations	Screen/Memory/NEON.hpp	/^class NEONBitOrPixelOperations {$/;"	c
NEONBytesTwice	Screen/Memory/NEON.hpp	/^struct NEONBytesTwice {$/;"	s
NEONTransparentPixelOperations	Screen/Memory/NEON.hpp	/^  constexpr NEONTransparentPixelOperations(Luminosity8 _key)$/;"	f	class:NEONTransparentPixelOperations
NEONTransparentPixelOperations	Screen/Memory/NEON.hpp	/^class NEONTransparentPixelOperations {$/;"	c
NETCOUPE_HPP	Engine/Contest/Solvers/NetCoupe.hpp	24;"	d
NETWORK	Kobo/KoboMenu.cpp	/^  NETWORK,$/;"	e	enum:Buttons	file:
NET_COUPE	Engine/Contest/Settings.hpp	/^  NET_COUPE,$/;"	m	class:Contest
NET_CURL_MULTI_HPP	Net/HTTP/Multi.hpp	25;"	d
NET_HTTP_FORMDATA_HPP	Net/HTTP/FormData.hpp	25;"	d
NET_HTTP_RESPONSE_HANDLER_HPP	Net/HTTP/Handler.hpp	25;"	d
NET_REQUEST_HPP	Net/HTTP/Request.hpp	25;"	d
NET_SESSION_HPP	Net/HTTP/Session.hpp	25;"	d
NET_TO_BUFFER_HPP	Net/HTTP/ToBuffer.hpp	25;"	d
NET_TO_FILE_HPP	Net/HTTP/ToFile.hpp	25;"	d
NEUTRAL	NMEA/SwitchState.hpp	/^    NEUTRAL,$/;"	m	class:SwitchState::FlapPosition
NEW	Dialogs/Plane/PlaneListDialog.cpp	/^    NEW,$/;"	e	enum:final::Buttons	file:
NEW	Dialogs/ProfileListDialog.cpp	/^    NEW,$/;"	e	enum:final::Buttons	file:
NEW	Dialogs/Waypoint/Manager.cpp	/^    NEW,$/;"	e	enum:final::Buttons	file:
NEW_TASK	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    NEW_TASK,$/;"	e	enum:TaskActionsPanel::Controls
NEXT	Dialogs/Task/TargetDialog.cpp	/^    NEXT,$/;"	e	enum:TargetWidget::Buttons	file:
NEXT	Dialogs/Task/TaskPointDialog.cpp	/^    PREVIOUS, NEXT,$/;"	e	enum:final::Buttons	file:
NEXT	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PREVIOUS, NEXT,$/;"	e	enum:final::Buttons	file:
NEXT	Dialogs/dlgAnalysis.cpp	/^    NEXT,$/;"	e	enum:final::Buttons	file:
NEXT	Widget/ArrowPagerWidget.hpp	/^    NEXT,$/;"	e	enum:ArrowPagerWidget::Buttons
NEXTVERT	Topography/shapelib/mapsearch.c	42;"	d	file:
NEXT_ARROW	InfoBoxes/Content/Type.hpp	/^    NEXT_ARROW,$/;"	e	enum:InfoBoxFactory::Type
NEXT_ITEM	Gauge/BigTrafficWidget.hpp	/^    NEXT_ITEM,$/;"	e	enum:TrafficWidget::Action
NEXT_PAGE	Form/DataField/ComboList.hpp	/^    static constexpr int NEXT_PAGE = -800001;$/;"	m	struct:ComboList::Item
NEXT_RADIAL	InfoBoxes/Content/Type.hpp	/^    NEXT_RADIAL,$/;"	e	enum:InfoBoxFactory::Type
NE_COUNT	Input/InputQueue.hpp	/^  NE_COUNT = 132, \/\/ How many we have for arrays etc \/\/ XXX Increased arbitrarily for duplicates above$/;"	e	enum:__anon209
NE_DOWN_IN_ACK	Input/InputQueue.hpp	/^  NE_DOWN_IN_ACK=                       8,$/;"	e	enum:__anon209
NE_DOWN_IN_AIRBRAKELOCKED	Input/InputQueue.hpp	/^  NE_DOWN_IN_AIRBRAKELOCKED=            21,$/;"	e	enum:__anon209
NE_DOWN_IN_AIRBRAKENOTLOCKED	Input/InputQueue.hpp	/^  NE_DOWN_IN_AIRBRAKENOTLOCKED=         6,$/;"	e	enum:__anon209
NE_DOWN_IN_AUX	Input/InputQueue.hpp	/^  NE_DOWN_IN_AUX=                       7,$/;"	e	enum:__anon209
NE_DOWN_IN_CIRCLING_FLARM	Input/InputQueue.hpp	/^  NE_DOWN_IN_CIRCLING_FLARM=            11,$/;"	e	enum:__anon209
NE_DOWN_IN_CIRCLING_PDA	Input/InputQueue.hpp	/^  NE_DOWN_IN_CIRCLING_PDA=              10,$/;"	e	enum:__anon209
NE_DOWN_IN_FLAP_NEG	Input/InputQueue.hpp	/^  NE_DOWN_IN_FLAP_NEG=                  2,$/;"	e	enum:__anon209
NE_DOWN_IN_FLAP_POS	Input/InputQueue.hpp	/^  NE_DOWN_IN_FLAP_POS=                  0,$/;"	e	enum:__anon209
NE_DOWN_IN_FLAP_ZERO	Input/InputQueue.hpp	/^  NE_DOWN_IN_FLAP_ZERO=                 1,$/;"	e	enum:__anon209
NE_DOWN_IN_FLYING	Input/InputQueue.hpp	/^  NE_DOWN_IN_FLYING=                    12,$/;"	e	enum:__anon209
NE_DOWN_IN_GEAR_EXTENDED	Input/InputQueue.hpp	/^  NE_DOWN_IN_GEAR_EXTENDED=             5,$/;"	e	enum:__anon209
NE_DOWN_IN_GEAR_RETRACTED	Input/InputQueue.hpp	/^  NE_DOWN_IN_GEAR_RETRACTED=            4,$/;"	e	enum:__anon209
NE_DOWN_IN_NOTFLYING	Input/InputQueue.hpp	/^  NE_DOWN_IN_NOTFLYING=                 13,$/;"	e	enum:__anon209
NE_DOWN_IN_PDA_CONNECTED	Input/InputQueue.hpp	/^  NE_DOWN_IN_PDA_CONNECTED=             14,$/;"	e	enum:__anon209
NE_DOWN_IN_REP	Input/InputQueue.hpp	/^  NE_DOWN_IN_REP=                       9,$/;"	e	enum:__anon209
NE_DOWN_IN_SC	Input/InputQueue.hpp	/^  NE_DOWN_IN_SC=                        3,$/;"	e	enum:__anon209
NE_DOWN_IN_STALL	Input/InputQueue.hpp	/^  NE_DOWN_IN_STALL=                     20,$/;"	e	enum:__anon209
NE_DOWN_IN_TAKINGOFF	Input/InputQueue.hpp	/^  NE_DOWN_IN_TAKINGOFF=                 22,$/;"	e	enum:__anon209
NE_DOWN_IN_USERSWDOWN	Input/InputQueue.hpp	/^  NE_DOWN_IN_USERSWDOWN=                25,$/;"	e	enum:__anon209
NE_DOWN_IN_USERSWMIDDLE	Input/InputQueue.hpp	/^  NE_DOWN_IN_USERSWMIDDLE=              24,$/;"	e	enum:__anon209
NE_DOWN_IN_USERSWUP	Input/InputQueue.hpp	/^  NE_DOWN_IN_USERSWUP=                  23,$/;"	e	enum:__anon209
NE_DOWN_IN_VELOCITY_AIRBRAKE	Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_AIRBRAKE=         17,$/;"	e	enum:__anon209
NE_DOWN_IN_VELOCITY_FLAP	Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_FLAP=             16,$/;"	e	enum:__anon209
NE_DOWN_IN_VELOCITY_MANOEUVERING	Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_MANOEUVERING=     15,$/;"	e	enum:__anon209
NE_DOWN_IN_VELOCITY_NEVEREXCEED	Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_NEVEREXCEED=      19,$/;"	e	enum:__anon209
NE_DOWN_IN_VELOCITY_TERRAIN	Input/InputQueue.hpp	/^  NE_DOWN_IN_VELOCITY_TERRAIN=          18,$/;"	e	enum:__anon209
NE_DOWN_OUT_AIRBRAKE_TAKEOFF	Input/InputQueue.hpp	/^  NE_DOWN_OUT_AIRBRAKE_TAKEOFF=         40,$/;"	e	enum:__anon209
NE_DOWN_OUT_CIRCLING	Input/InputQueue.hpp	/^  NE_DOWN_OUT_CIRCLING=                 32,$/;"	e	enum:__anon209
NE_DOWN_OUT_FLAP_LANDING	Input/InputQueue.hpp	/^  NE_DOWN_OUT_FLAP_LANDING=             39,$/;"	e	enum:__anon209
NE_DOWN_OUT_GEAR_LANDING	Input/InputQueue.hpp	/^  NE_DOWN_OUT_GEAR_LANDING=             38,$/;"	e	enum:__anon209
NE_DOWN_OUT_STALL	Input/InputQueue.hpp	/^  NE_DOWN_OUT_STALL=                    41,$/;"	e	enum:__anon209
NE_DOWN_OUT_VELOCITY_AIRBRAKE	Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_AIRBRAKE=        35,$/;"	e	enum:__anon209
NE_DOWN_OUT_VELOCITY_FLAP	Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_FLAP=            34,$/;"	e	enum:__anon209
NE_DOWN_OUT_VELOCITY_MANOEUVERING	Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_MANOEUVERING=    33,$/;"	e	enum:__anon209
NE_DOWN_OUT_VELOCITY_NEVEREXCEED	Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_NEVEREXCEED=     37,$/;"	e	enum:__anon209
NE_DOWN_OUT_VELOCITY_TERRAIN	Input/InputQueue.hpp	/^  NE_DOWN_OUT_VELOCITY_TERRAIN=         36,$/;"	e	enum:__anon209
NE_UNUSED_0	Input/InputQueue.hpp	/^  NE_UNUSED_0 =                      26,$/;"	e	enum:__anon209
NE_UNUSED_1	Input/InputQueue.hpp	/^  NE_UNUSED_1 =                      27,$/;"	e	enum:__anon209
NE_UNUSED_10	Input/InputQueue.hpp	/^  NE_UNUSED_10 =                      46,$/;"	e	enum:__anon209
NE_UNUSED_11	Input/InputQueue.hpp	/^  NE_UNUSED_11 =                      47,$/;"	e	enum:__anon209
NE_UNUSED_12	Input/InputQueue.hpp	/^  NE_UNUSED_12 =                      48,$/;"	e	enum:__anon209
NE_UNUSED_13	Input/InputQueue.hpp	/^  NE_UNUSED_13 =                      49,$/;"	e	enum:__anon209
NE_UNUSED_14	Input/InputQueue.hpp	/^  NE_UNUSED_14 =                      50,$/;"	e	enum:__anon209
NE_UNUSED_15	Input/InputQueue.hpp	/^  NE_UNUSED_15 =                      51,$/;"	e	enum:__anon209
NE_UNUSED_16	Input/InputQueue.hpp	/^  NE_UNUSED_16 =                      52,$/;"	e	enum:__anon209
NE_UNUSED_17	Input/InputQueue.hpp	/^  NE_UNUSED_17 =                      53,$/;"	e	enum:__anon209
NE_UNUSED_18	Input/InputQueue.hpp	/^  NE_UNUSED_18 =                      54,$/;"	e	enum:__anon209
NE_UNUSED_19	Input/InputQueue.hpp	/^  NE_UNUSED_19 =                      55,$/;"	e	enum:__anon209
NE_UNUSED_2	Input/InputQueue.hpp	/^  NE_UNUSED_2 =                      28,$/;"	e	enum:__anon209
NE_UNUSED_20	Input/InputQueue.hpp	/^  NE_UNUSED_20 =                      56,$/;"	e	enum:__anon209
NE_UNUSED_21	Input/InputQueue.hpp	/^  NE_UNUSED_21 =                      57,$/;"	e	enum:__anon209
NE_UNUSED_22	Input/InputQueue.hpp	/^  NE_UNUSED_22 =                      58,$/;"	e	enum:__anon209
NE_UNUSED_23	Input/InputQueue.hpp	/^  NE_UNUSED_23 =                      59,$/;"	e	enum:__anon209
NE_UNUSED_24	Input/InputQueue.hpp	/^  NE_UNUSED_24 =                      60,$/;"	e	enum:__anon209
NE_UNUSED_25	Input/InputQueue.hpp	/^  NE_UNUSED_25 =                      61,$/;"	e	enum:__anon209
NE_UNUSED_26	Input/InputQueue.hpp	/^  NE_UNUSED_26 =                      62,$/;"	e	enum:__anon209
NE_UNUSED_27	Input/InputQueue.hpp	/^  NE_UNUSED_27 =                      63,$/;"	e	enum:__anon209
NE_UNUSED_28	Input/InputQueue.hpp	/^  NE_UNUSED_28 =                      90,$/;"	e	enum:__anon209
NE_UNUSED_29	Input/InputQueue.hpp	/^  NE_UNUSED_29 =                      91,$/;"	e	enum:__anon209
NE_UNUSED_3	Input/InputQueue.hpp	/^  NE_UNUSED_3 =                      29,$/;"	e	enum:__anon209
NE_UNUSED_30	Input/InputQueue.hpp	/^  NE_UNUSED_30 =                      92,$/;"	e	enum:__anon209
NE_UNUSED_31	Input/InputQueue.hpp	/^  NE_UNUSED_31 =                      93,$/;"	e	enum:__anon209
NE_UNUSED_32	Input/InputQueue.hpp	/^  NE_UNUSED_32 =                      94,$/;"	e	enum:__anon209
NE_UNUSED_33	Input/InputQueue.hpp	/^  NE_UNUSED_33 =                      95,$/;"	e	enum:__anon209
NE_UNUSED_34	Input/InputQueue.hpp	/^  NE_UNUSED_34 =                      106,$/;"	e	enum:__anon209
NE_UNUSED_35	Input/InputQueue.hpp	/^  NE_UNUSED_35 =                      107,$/;"	e	enum:__anon209
NE_UNUSED_36	Input/InputQueue.hpp	/^  NE_UNUSED_36 =                      108,$/;"	e	enum:__anon209
NE_UNUSED_37	Input/InputQueue.hpp	/^  NE_UNUSED_37 =                      108,	\/\/ XXX Duplicate of above$/;"	e	enum:__anon209
NE_UNUSED_38	Input/InputQueue.hpp	/^  NE_UNUSED_38 =                      109,$/;"	e	enum:__anon209
NE_UNUSED_39	Input/InputQueue.hpp	/^  NE_UNUSED_39 =                      110,$/;"	e	enum:__anon209
NE_UNUSED_4	Input/InputQueue.hpp	/^  NE_UNUSED_4 =                      30,$/;"	e	enum:__anon209
NE_UNUSED_40	Input/InputQueue.hpp	/^  NE_UNUSED_40 =                      111,$/;"	e	enum:__anon209
NE_UNUSED_41	Input/InputQueue.hpp	/^  NE_UNUSED_41 =                      112,$/;"	e	enum:__anon209
NE_UNUSED_42	Input/InputQueue.hpp	/^  NE_UNUSED_42 =                      113,$/;"	e	enum:__anon209
NE_UNUSED_43	Input/InputQueue.hpp	/^  NE_UNUSED_43 =                      114,$/;"	e	enum:__anon209
NE_UNUSED_44	Input/InputQueue.hpp	/^  NE_UNUSED_44 =                      115,$/;"	e	enum:__anon209
NE_UNUSED_45	Input/InputQueue.hpp	/^  NE_UNUSED_45 =                      116,$/;"	e	enum:__anon209
NE_UNUSED_46	Input/InputQueue.hpp	/^  NE_UNUSED_46 =                      117,$/;"	e	enum:__anon209
NE_UNUSED_47	Input/InputQueue.hpp	/^  NE_UNUSED_47 =                      118,$/;"	e	enum:__anon209
NE_UNUSED_48	Input/InputQueue.hpp	/^  NE_UNUSED_48 =                      119,$/;"	e	enum:__anon209
NE_UNUSED_49	Input/InputQueue.hpp	/^  NE_UNUSED_49 =                      120,$/;"	e	enum:__anon209
NE_UNUSED_5	Input/InputQueue.hpp	/^  NE_UNUSED_5 =                      31,$/;"	e	enum:__anon209
NE_UNUSED_50	Input/InputQueue.hpp	/^  NE_UNUSED_50 =                      121,$/;"	e	enum:__anon209
NE_UNUSED_51	Input/InputQueue.hpp	/^  NE_UNUSED_51 =                      122,$/;"	e	enum:__anon209
NE_UNUSED_52	Input/InputQueue.hpp	/^  NE_UNUSED_52 =                      122,	\/\/ XXX Duplicate of above$/;"	e	enum:__anon209
NE_UNUSED_53	Input/InputQueue.hpp	/^  NE_UNUSED_53 =                      123,$/;"	e	enum:__anon209
NE_UNUSED_54	Input/InputQueue.hpp	/^  NE_UNUSED_54 =                      124,$/;"	e	enum:__anon209
NE_UNUSED_55	Input/InputQueue.hpp	/^  NE_UNUSED_55 =                      125,$/;"	e	enum:__anon209
NE_UNUSED_56	Input/InputQueue.hpp	/^  NE_UNUSED_56 =                      126,$/;"	e	enum:__anon209
NE_UNUSED_57	Input/InputQueue.hpp	/^  NE_UNUSED_57 =                      127,$/;"	e	enum:__anon209
NE_UNUSED_6	Input/InputQueue.hpp	/^  NE_UNUSED_6 =                      42,$/;"	e	enum:__anon209
NE_UNUSED_7	Input/InputQueue.hpp	/^  NE_UNUSED_7 =                      43,$/;"	e	enum:__anon209
NE_UNUSED_8	Input/InputQueue.hpp	/^  NE_UNUSED_8 =                      44,$/;"	e	enum:__anon209
NE_UNUSED_9	Input/InputQueue.hpp	/^  NE_UNUSED_9 =                      45,$/;"	e	enum:__anon209
NE_UP_IN_ACK	Input/InputQueue.hpp	/^  NE_UP_IN_ACK=                       72,$/;"	e	enum:__anon209
NE_UP_IN_AIRBRAKELOCKED	Input/InputQueue.hpp	/^  NE_UP_IN_AIRBRAKELOCKED=            85,$/;"	e	enum:__anon209
NE_UP_IN_AIRBRAKENOTLOCKED	Input/InputQueue.hpp	/^  NE_UP_IN_AIRBRAKENOTLOCKED=         70,$/;"	e	enum:__anon209
NE_UP_IN_AUX	Input/InputQueue.hpp	/^  NE_UP_IN_AUX=                       71,$/;"	e	enum:__anon209
NE_UP_IN_CIRCLING_FLARM	Input/InputQueue.hpp	/^  NE_UP_IN_CIRCLING_FLARM=            75,$/;"	e	enum:__anon209
NE_UP_IN_CIRCLING_PDA	Input/InputQueue.hpp	/^  NE_UP_IN_CIRCLING_PDA=              74,$/;"	e	enum:__anon209
NE_UP_IN_FLAP_NEG	Input/InputQueue.hpp	/^  NE_UP_IN_FLAP_NEG=                  66,$/;"	e	enum:__anon209
NE_UP_IN_FLAP_POS	Input/InputQueue.hpp	/^  NE_UP_IN_FLAP_POS=                  64,$/;"	e	enum:__anon209
NE_UP_IN_FLAP_ZERO	Input/InputQueue.hpp	/^  NE_UP_IN_FLAP_ZERO=                 65,$/;"	e	enum:__anon209
NE_UP_IN_FLYING	Input/InputQueue.hpp	/^  NE_UP_IN_FLYING=                    76,$/;"	e	enum:__anon209
NE_UP_IN_GEAR_EXTENDED	Input/InputQueue.hpp	/^  NE_UP_IN_GEAR_EXTENDED=             69,$/;"	e	enum:__anon209
NE_UP_IN_GEAR_RETRACTED	Input/InputQueue.hpp	/^  NE_UP_IN_GEAR_RETRACTED=            68,$/;"	e	enum:__anon209
NE_UP_IN_NOTFLYING	Input/InputQueue.hpp	/^  NE_UP_IN_NOTFLYING=                 77,$/;"	e	enum:__anon209
NE_UP_IN_PDA_CONNECTED	Input/InputQueue.hpp	/^  NE_UP_IN_PDA_CONNECTED=             78,$/;"	e	enum:__anon209
NE_UP_IN_REP	Input/InputQueue.hpp	/^  NE_UP_IN_REP=                       73,$/;"	e	enum:__anon209
NE_UP_IN_SC	Input/InputQueue.hpp	/^  NE_UP_IN_SC=                        67,$/;"	e	enum:__anon209
NE_UP_IN_STALL	Input/InputQueue.hpp	/^  NE_UP_IN_STALL=                     84,$/;"	e	enum:__anon209
NE_UP_IN_TAKINGOFF	Input/InputQueue.hpp	/^  NE_UP_IN_TAKINGOFF=                 86,$/;"	e	enum:__anon209
NE_UP_IN_USERSWDOWN	Input/InputQueue.hpp	/^  NE_UP_IN_USERSWDOWN=                89,$/;"	e	enum:__anon209
NE_UP_IN_USERSWMIDDLE	Input/InputQueue.hpp	/^  NE_UP_IN_USERSWMIDDLE=              88,$/;"	e	enum:__anon209
NE_UP_IN_USERSWUP	Input/InputQueue.hpp	/^  NE_UP_IN_USERSWUP=                  87,$/;"	e	enum:__anon209
NE_UP_IN_VELOCITY_AIRBRAKE	Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_AIRBRAKE=         81,$/;"	e	enum:__anon209
NE_UP_IN_VELOCITY_FLAP	Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_FLAP=             80,$/;"	e	enum:__anon209
NE_UP_IN_VELOCITY_MANOEUVERING	Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_MANOEUVERING=     79,$/;"	e	enum:__anon209
NE_UP_IN_VELOCITY_NEVEREXCEED	Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_NEVEREXCEED=      83,$/;"	e	enum:__anon209
NE_UP_IN_VELOCITY_TERRAIN	Input/InputQueue.hpp	/^  NE_UP_IN_VELOCITY_TERRAIN=          82,$/;"	e	enum:__anon209
NE_UP_OUT_AIRBRAKE_TAKEOFF	Input/InputQueue.hpp	/^  NE_UP_OUT_AIRBRAKE_TAKEOFF=         104,$/;"	e	enum:__anon209
NE_UP_OUT_CIRCLING	Input/InputQueue.hpp	/^  NE_UP_OUT_CIRCLING=                 96,$/;"	e	enum:__anon209
NE_UP_OUT_FLAP_LANDING	Input/InputQueue.hpp	/^  NE_UP_OUT_FLAP_LANDING=             103,$/;"	e	enum:__anon209
NE_UP_OUT_GEAR_LANDING	Input/InputQueue.hpp	/^  NE_UP_OUT_GEAR_LANDING=             102,$/;"	e	enum:__anon209
NE_UP_OUT_STALL	Input/InputQueue.hpp	/^  NE_UP_OUT_STALL=                    105,$/;"	e	enum:__anon209
NE_UP_OUT_VELOCITY_AIRBRAKE	Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_AIRBRAKE=        99,$/;"	e	enum:__anon209
NE_UP_OUT_VELOCITY_FLAP	Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_FLAP=            98,$/;"	e	enum:__anon209
NE_UP_OUT_VELOCITY_MANOEUVERING	Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_MANOEUVERING=    97,$/;"	e	enum:__anon209
NE_UP_OUT_VELOCITY_NEVEREXCEED	Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_NEVEREXCEED=     101,$/;"	e	enum:__anon209
NE_UP_OUT_VELOCITY_TERRAIN	Input/InputQueue.hpp	/^  NE_UP_OUT_VELOCITY_TERRAIN=         100,$/;"	e	enum:__anon209
NLineReader	IO/LineReader.hpp	/^class NLineReader : public LineReader<char> {};$/;"	c
NLineReader	IO/LineReader.hpp	/^class NLineReader : public TLineReader {};$/;"	c
NMEA	Device/Driver/CAI302/Internal.hpp	/^    NMEA,$/;"	m	class:CAI302Device::Mode
NMEA	Device/Driver/FLARM/Device.hpp	/^    NMEA,$/;"	m	class:FlarmDevice::Mode
NMEA	Device/Driver/LX/Internal.hpp	/^    NMEA,$/;"	m	class:LXDevice::Mode
NMEA	Device/Driver/LXERA/Internal.hpp	/^    NMEA,$/;"	m	class:LXEraDevice::Mode
NMEA	Dialogs/Device/LX/NanoConfigWidget.hpp	/^    NMEA,$/;"	e	enum:final::Controls
NMEAChecksum	Device/Parser.cpp	/^NMEAParser::NMEAChecksum(const char *string)$/;"	f	class:NMEAParser
NMEAChecksum	NMEA/Checksum.hpp	/^NMEAChecksum(const char *p)$/;"	f
NMEAChecksum	NMEA/Checksum.hpp	/^NMEAChecksum(const char *p, unsigned length)$/;"	f
NMEAInfo	NMEA/Info.hpp	/^struct NMEAInfo {$/;"	s
NMEAInputLine	NMEA/InputLine.cpp	/^NMEAInputLine::NMEAInputLine(const char* line):$/;"	f	class:NMEAInputLine
NMEAInputLine	NMEA/InputLine.hpp	/^class NMEAInputLine: public CSVLine {$/;"	c
NMEALogger	Logger/NMEALogger.cpp	/^namespace NMEALogger$/;"	n	file:
NMEALogger	Logger/NMEALogger.hpp	/^namespace NMEALogger$/;"	n
NMEAParser	Device/Parser.cpp	/^NMEAParser::NMEAParser()$/;"	f	class:NMEAParser
NMEAParser	Device/Parser.hpp	/^class NMEAParser$/;"	c
NMEA_OUT	Device/Driver.hpp	/^    NMEA_OUT = 0x1,$/;"	e	enum:DeviceRegister::__anon196
NMEA_Queue	Input/InputQueue.cpp	/^static int NMEA_Queue[MAX_NMEA_QUEUE];$/;"	v	file:
NMEA_REPLAY_HPP	Replay/NmeaReplay.hpp	25;"	d
NOAADetailsWidget	Dialogs/Weather/NOAADetails.cpp	/^  NOAADetailsWidget(WndForm &_dialog, NOAAStore::iterator _station)$/;"	f	class:final
NOAADownloader	Weather/NOAADownloader.cpp	/^namespace NOAADownloader$/;"	n	file:
NOAADownloader	Weather/NOAADownloader.hpp	/^namespace NOAADownloader$/;"	n
NOAAFormatter	Weather/NOAAFormatter.hpp	/^namespace NOAAFormatter$/;"	n
NOAALineSplitter	Weather/NOAAFormatter.cpp	/^  NOAALineSplitter(const TCHAR *_start):start(_start) {}$/;"	f	class:NOAALineSplitter
NOAALineSplitter	Weather/NOAAFormatter.cpp	/^class NOAALineSplitter$/;"	c	file:
NOAAListRenderer	Renderer/NOAAListRenderer.hpp	/^namespace NOAAListRenderer$/;"	n
NOAALook	Look/NOAALook.hpp	/^struct NOAALook {$/;"	s
NOAAStore	Weather/NOAAStore.hpp	/^class NOAAStore$/;"	c
NOAAUpdater	Weather/NOAAUpdater.cpp	/^namespace NOAAUpdater {$/;"	n	file:
NOAAUpdater	Weather/NOAAUpdater.hpp	/^namespace NOAAUpdater$/;"	n
NOAA_DOWNLOADER_HPP	Weather/NOAADownloader.hpp	25;"	d
NOAA_FORMATTER_HPP	Weather/NOAAFormatter.hpp	25;"	d
NOAA_GLUE_HPP	Weather/NOAAGlue.hpp	25;"	d
NOAA_STORE_HPP	Weather/NOAAStore.hpp	25;"	d
NOAA_UPDATER_HPP	Weather/NOAAUpdater.hpp	25;"	d
NOBATTERY	Hardware/Battery.hpp	/^      NOBATTERY,$/;"	e	enum:Power::Battery::batterystatus
NOGLIDER	Engine/Airspace/AirspaceClass.hpp	/^  NOGLIDER,$/;"	e	enum:uint8_t
NONCOPYABLE_HPP	Util/NonCopyable.hpp	23;"	d
NONE	Device/Config.hpp	/^    NONE = 0,$/;"	m	class:DeviceConfig::PressureUse
NONE	DisplayMode.hpp	/^  NONE,$/;"	m	class:DisplayMode
NONE	Engine/Contest/Settings.hpp	/^  NONE,$/;"	m	class:Contest
NONE	Engine/Route/Config.hpp	/^    NONE,$/;"	m	class:RoutePlannerConfig::Mode
NONE	Engine/Task/TaskType.hpp	/^  NONE,$/;"	m	class:TaskType
NONE	Engine/Waypoint/Origin.hpp	/^  NONE,$/;"	m	class:WaypointOrigin
NONE	FLARM/Color.hpp	/^  NONE,$/;"	m	class:FlarmColor
NONE	FLARM/Status.hpp	/^    NONE = 0,$/;"	m	class:FlarmStatus::GPSStatus
NONE	FLARM/Traffic.hpp	/^    NONE = 0,$/;"	m	class:FlarmTraffic::AlarmType
NONE	Form/List.hpp	/^    NONE,$/;"	m	class:ListControl::DragMode
NONE	Geo/AltitudeReference.hpp	/^  NONE = -1,$/;"	m	class:AltitudeReference
NONE	MapSettings.hpp	/^  NONE,$/;"	m	class:MapShiftBias
NONE	NMEA/Derived.hpp	/^    NONE,$/;"	m	class:DerivedInfo::WindSource
NONE	Renderer/AirspaceRendererSettings.hpp	/^    NONE,$/;"	m	class:AirspaceClassRendererSettings::FillMode
NONE	Renderer/AirspaceRendererSettings.hpp	/^    NONE,$/;"	m	class:AirspaceRendererSettings::FillMode
NONE	Renderer/AirspaceRendererSettings.hpp	/^    NONE,$/;"	m	class:AirspaceRendererSettings::LabelSelection
NONE	Renderer/ChartRenderer.hpp	/^    NONE,$/;"	e	enum:ChartRenderer::UnitFormat
NONE	Renderer/TaskPointRenderer.hpp	/^    NONE,$/;"	e	enum:TaskPointRenderer::TargetVisibility
NONE	Renderer/WaypointRendererSettings.hpp	/^    NONE = 0,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
NONE	Renderer/WaypointRendererSettings.hpp	/^    NONE,$/;"	m	class:WaypointRendererSettings::DisplayTextType
NONE	Renderer/WaypointRendererSettings.hpp	/^    NONE,$/;"	m	class:WaypointRendererSettings::LabelSelection
NONE	Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	e	enum:ShapeRenderer::__anon89
NONE	Units/Group.hpp	/^  NONE,$/;"	m	class:UnitGroup
NON_FAI_OZS	Engine/Task/Factory/ValidationError.hpp	/^  NON_FAI_OZS,$/;"	m	class:TaskValidationErrorType
NON_MAT_OZS	Engine/Task/Factory/ValidationError.hpp	/^  NON_MAT_OZS,$/;"	m	class:TaskValidationErrorType
NOP	Device/Port/K6BtPort.hpp	/^  static constexpr uint8_t NOP = 0x00;$/;"	m	class:K6BtPort
NOP	Event/Shared/Event.hpp	/^    NOP,$/;"	e	enum:Event::Type
NORMAL	Device/Driver/LX/LX1600.hpp	/^    NORMAL = 0,$/;"	m	class:LX1600::SCControlMode
NORMAL	Device/Driver/LXERA/LXERA.hpp	/^    NORMAL = 0,$/;"	m	class:LXEra::SCControlMode
NORMAL	Engine/Waypoint/Waypoint.hpp	/^    NORMAL,$/;"	m	class:Waypoint::Type
NORTH_SOUTH	Form/DigitEntry.hpp	/^      NORTH_SOUTH,$/;"	m	class:CoordinateFormat::Column::Type
NORTH_UP	MapSettings.hpp	/^  NORTH_UP,$/;"	m	class:MapOrientation
NOSENSOR	Android/NativeView.hpp	/^    NOSENSOR = 5,$/;"	m	class:NativeView::ScreenOrientation
NOTASK	Task/MapTaskManager.hpp	/^    NOTASK,$/;"	e	enum:MapTaskManager::TaskEditResult
NOTE1	zzip/__debug.h	53;"	d
NOTE2	zzip/__debug.h	54;"	d
NOTE3	zzip/__debug.h	55;"	d
NOTE4	zzip/__debug.h	56;"	d
NOTE5	zzip/__debug.h	57;"	d
NOTE6	zzip/__debug.h	58;"	d
NOTHING	PageSettings.hpp	/^    NOTHING,$/;"	m	class:PageLayout::Bottom
NOT_LOCKED	NMEA/SwitchState.hpp	/^    NOT_LOCKED,$/;"	m	class:SwitchState::AirbrakeState
NO_ARROW	MapSettings.hpp	/^  NO_ARROW,$/;"	m	class:WindArrowStyle
NO_ERROR	FLARM/Error.hpp	36;"	d
NO_FIX	NMEA/GPSState.hpp	/^  NO_FIX,$/;"	m	class:FixQuality
NO_MAIN_MENU	Form/TabMenuDisplay.hpp	/^    static constexpr unsigned NO_MAIN_MENU = 997;$/;"	m	struct:final::MenuTabIndex
NO_RSP	Device/Driver/KRT2.cpp	/^  static constexpr char NO_RSP = 0; \/\/!< No response received yet.$/;"	m	class:final	file:
NO_SCREEN	Net/State.cpp	27;"	d	file:
NO_SCREEN	OS/RunFile.cpp	28;"	d	file:
NO_SUB_MENU	Form/TabMenuDisplay.hpp	/^    static constexpr unsigned NO_SUB_MENU = 998;$/;"	m	struct:final::MenuTabIndex
NO_TILE	Terrain/RasterTileCache.hpp	/^    static constexpr uint16_t NO_TILE = (uint16_t)-1;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
NO_TIMEOUT	Device/Driver.hpp	/^    NO_TIMEOUT = 0x20,$/;"	e	enum:DeviceRegister::__anon196
NO_VALID_FINISH	Engine/Task/Factory/ValidationError.hpp	/^  NO_VALID_FINISH,$/;"	m	class:TaskValidationErrorType
NO_VALID_START	Engine/Task/Factory/ValidationError.hpp	/^  NO_VALID_START,$/;"	m	class:TaskValidationErrorType
NR_RETRIES	Device/Driver/KRT2.cpp	/^  static constexpr unsigned NR_RETRIES = 3; \/\/!< Number of tries to send a command.$/;"	m	class:final	file:
NTP	Device/Driver/Volkslogger/vlconv.cpp	/^  unsigned NTP;$/;"	m	class:C_RECORD	file:
NUMAIRSPACEBRUSHES	Look/AirspaceLook.hpp	34;"	d
NUMAIRSPACECOLORS	Look/AirspaceLook.hpp	33;"	d
NUMBER_OF_VOLTAGES	Android/VoltageDevice.hpp	34;"	d
NUMDEV	Device/Features.hpp	/^static constexpr unsigned NUMDEV = 4;$/;"	v
NUMDEV	Device/Features.hpp	/^static constexpr unsigned NUMDEV = 6;$/;"	v
NUMERIC	Renderer/ChartRenderer.hpp	/^    NUMERIC,$/;"	e	enum:ChartRenderer::UnitFormat
NUMSNAILCOLORS	Look/TrailLook.hpp	/^  static constexpr unsigned NUMSNAILCOLORS = 15;$/;"	m	struct:TrailLook
NUMTPS	Device/Driver/LX/Protocol.hpp	/^  static constexpr unsigned NUMTPS = 12;$/;"	m	namespace:LX
NUMTPS	Device/Driver/LXERA/Protocol.hpp	/^  static constexpr unsigned NUMTPS = 12;$/;"	m	namespace:LXEra
NUM_COLOR_RAMP_LEVELS	Terrain/RasterRenderer.hpp	33;"	d
NUM_LEVELS	Atmosphere/CuSonde.hpp	/^  static constexpr unsigned NUM_LEVELS = 100;$/;"	m	class:CuSonde
NUM_RAMPS	Terrain/TerrainRenderer.cpp	/^static_assert(ARRAY_SIZE(terrain_colors) == TerrainRendererSettings::NUM_RAMPS,$/;"	m	class:TerrainRendererSettings	file:
NUM_RAMPS	Terrain/TerrainSettings.hpp	/^  static constexpr unsigned NUM_RAMPS = 15;$/;"	m	struct:TerrainRendererSettings
NUM_SLICES	CrossSection/CrossSectionRenderer.hpp	/^  static constexpr unsigned NUM_SLICES = 64;$/;"	m	class:CrossSectionRenderer
NUM_SLICES	Engine/ThermalBand/ThermalBand.hpp	/^     static constexpr unsigned NUM_SLICES = 64;$/;"	m	class:ThermalBand
NUM_SLOTS	Math/Histogram.cpp	25;"	d	file:
NUM_TYPES	InfoBoxes/Content/Factory.cpp	/^static_assert(ARRAY_SIZE(meta_data) == NUM_TYPES,$/;"	v
NUM_TYPES	InfoBoxes/Content/Type.hpp	/^  static constexpr Type NUM_TYPES = e_NUM_TYPES;$/;"	m	namespace:InfoBoxFactory
NUNCHUCK	Device/Config.hpp	/^    NUNCHUCK,$/;"	m	class:DeviceConfig::PortType
N_	Language/Language.hpp	35;"	d
N_	Language/Language.hpp	37;"	d
N_	Language/Language.hpp	67;"	d
N_AV	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  static constexpr unsigned N_AV = 3;$/;"	m	class:IncrementalSpeedComputer
N_KEY_BUCKETS	Cloud/Client.hpp	/^  static constexpr size_t N_KEY_BUCKETS = 65521;$/;"	m	class:CloudClientContainer
N_MD5	Logger/GRecord.hpp	/^  static constexpr unsigned N_MD5 = 4;$/;"	m	class:GRecord
Name	Renderer/WaypointLabelList.hpp	/^    TCHAR Name[NAME_SIZE+1];$/;"	m	struct:WaypointLabelList::Label
Name	Units/UnitsStore.cpp	/^  const TCHAR* Name;$/;"	m	struct:UnitStoreItem	file:
Nano	Device/Driver/LX/NanoDeclare.hpp	/^namespace Nano {$/;"	n
Nano	Device/Driver/LX/NanoLogger.hpp	/^namespace Nano {$/;"	n
Nano	Device/Driver/LX/NanoProtocol.hpp	/^namespace Nano {$/;"	n
NanoBeginDeclaration	Device/Driver/LX/NanoDeclare.cpp	/^NanoBeginDeclaration(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoConfigWidget	Dialogs/Device/LX/NanoConfigWidget.hpp	/^  NanoConfigWidget(const DialogLook &look, LXDevice &_device)$/;"	f	class:final
NanoWriteDecl	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDecl(Port &port, OperationEnvironment &env, PortNMEAReader &reader,$/;"	f	file:
NanoWriteDeclFormat	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDeclFormat(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteDeclMeta	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDeclMeta(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteDeclString	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteDeclString(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteLanding	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteLanding(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteStartDeclaration	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteStartDeclaration(Port &port, OperationEnvironment &env,$/;"	f	file:
NanoWriteTakeoff	Device/Driver/LX/NanoDeclare.cpp	/^NanoWriteTakeoff(Port &port, OperationEnvironment &env,$/;"	f	file:
NarrowPathName	OS/ConvertPathName.hpp	/^  explicit NarrowPathName(Path _value)$/;"	f	class:NarrowPathName
NarrowPathName	OS/ConvertPathName.hpp	/^class NarrowPathName {$/;"	c
NarrowString	Util/StaticString.hxx	/^	explicit NarrowString(const_pointer value):Base(value) {}$/;"	f	class:NarrowString
NarrowString	Util/StaticString.hxx	/^class NarrowString: public StaticStringBase<char, max>$/;"	c
NarrowWeatherFilename	Weather/Rasp/RaspStore.cpp	/^RaspStore::NarrowWeatherFilename(char *filename, Path name,$/;"	f	class:RaspStore
Native	Math/Angle.hpp	/^  constexpr double Native() const {$/;"	f	class:Angle
Native	Math/Angle.hpp	/^  static Angle Native(const double _value) {$/;"	f	class:Angle
Native	Screen/Brush.hpp	/^  HBRUSH Native() const {$/;"	f	class:Brush
Native	Screen/Font.hpp	/^  HFONT Native() const {$/;"	f	class:Font
Native	Screen/Pen.hpp	/^  HPEN Native() const { return pen; }$/;"	f	class:Pen
NativeBMP085Listener	Android/NativeBMP085Listener.cpp	/^namespace NativeBMP085Listener {$/;"	n	file:
NativeBMP085Listener	Android/NativeBMP085Listener.hpp	/^namespace NativeBMP085Listener {$/;"	n
NativeI2CbaroListener	Android/NativeI2CbaroListener.cpp	/^namespace NativeI2CbaroListener {$/;"	n	file:
NativeI2CbaroListener	Android/NativeI2CbaroListener.hpp	/^namespace NativeI2CbaroListener {$/;"	n
NativeInputListener	Android/NativeInputListener.cpp	/^namespace NativeInputListener {$/;"	n	file:
NativeInputListener	Android/NativeInputListener.hpp	/^namespace NativeInputListener {$/;"	n
NativeLeScanCallback	Android/NativeLeScanCallback.cpp	/^namespace NativeLeScanCallback {$/;"	n	file:
NativeLeScanCallback	Android/NativeLeScanCallback.hpp	/^namespace NativeLeScanCallback {$/;"	n
NativeNunchuckListener	Android/NativeNunchuckListener.cpp	/^namespace NativeNunchuckListener {$/;"	n	file:
NativeNunchuckListener	Android/NativeNunchuckListener.hpp	/^namespace NativeNunchuckListener {$/;"	n
NativePortListener	Android/NativePortListener.cpp	/^namespace NativePortListener {$/;"	n	file:
NativePortListener	Android/NativePortListener.hpp	/^namespace NativePortListener {$/;"	n
NativeView	Android/NativeView.hpp	/^class NativeView {$/;"	c
NativeVoltageListener	Android/NativeVoltageListener.cpp	/^namespace NativeVoltageListener {$/;"	n	file:
NativeVoltageListener	Android/NativeVoltageListener.hpp	/^namespace NativeVoltageListener {$/;"	n
NavAltitude	InfoBoxes/Content/Type.hpp	/^    NavAltitude,$/;"	e	enum:InfoBoxFactory::Type
NavAltitudeAvailable	NMEA/MoreData.hpp	/^  bool NavAltitudeAvailable() const {$/;"	f	struct:MoreData
NavDijkstra	Engine/PathSolvers/NavDijkstra.hpp	/^class NavDijkstra {$/;"	c
Navpoint	Device/Driver/CAI302/Protocol.hpp	/^  struct Navpoint {$/;"	s	namespace:CAI302
NavpointMeta	Device/Driver/CAI302/Protocol.hpp	/^  struct NavpointMeta {$/;"	s	namespace:CAI302
Near	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^  Near,$/;"	e	enum:Controls	file:
NearWaypoint	Engine/Contest/Solvers/Retrospective.hpp	/^  struct NearWaypoint {$/;"	s	class:Retrospective
NearWaypointList	Engine/Contest/Solvers/Retrospective.hpp	/^  typedef std::list<NearWaypoint> NearWaypointList;$/;"	t	class:Retrospective
NearestAirspace	Airspace/NearestAirspace.hpp	/^  NearestAirspace():airspace(nullptr) {}$/;"	f	class:NearestAirspace
NearestAirspace	Airspace/NearestAirspace.hpp	/^  NearestAirspace(const AbstractAirspace &_airspace, double _distance)$/;"	f	class:NearestAirspace
NearestAirspace	Airspace/NearestAirspace.hpp	/^class NearestAirspace {$/;"	c
NearestIndexConvex	Geo/SearchPointVector.cpp	/^SearchPointVector::NearestIndexConvex(const FlatGeoPoint &p3) const$/;"	f	class:SearchPointVector
NearestPoint	Geo/SearchPointVector.cpp	/^NearestPoint(const FlatGeoPoint &p1, const FlatGeoPoint &p2,$/;"	f	file:
NearestPoint	Geo/SearchPointVector.cpp	/^SearchPointVector::NearestPoint(const FlatGeoPoint &p3) const$/;"	f	class:SearchPointVector
NearestPointNonConvex	Geo/SearchPointVector.cpp	/^NearestPointNonConvex(const SearchPointVector& spv, const FlatGeoPoint &p3)$/;"	f	file:
NeedData	Replay/CatmullRomInterpolator.hpp	/^  NeedData(double t_simulation) const$/;"	f	class:CatmullRomInterpolator
NeedGroundLevel	Engine/Airspace/AbstractAirspace.hpp	/^  bool NeedGroundLevel() const {$/;"	f	class:AbstractAirspace
NeedGroundLevel	Engine/Airspace/Airspace.cpp	/^Airspace::NeedGroundLevel() const$/;"	f	class:Airspace
NeedGroundLevel	Engine/Airspace/AirspaceAltitude.hpp	/^  bool NeedGroundLevel() const {$/;"	f	struct:AirspaceAltitude
NeedToArm	Engine/Task/Ordered/TaskAdvance.hpp	/^  bool NeedToArm() const  {$/;"	f	class:TaskAdvance
NeighbourLink	Engine/Route/RoutePolars.cpp	/^RoutePolars::NeighbourLink(const RoutePoint &start, const RoutePoint &end,$/;"	f	class:RoutePolars
Net	Android/DownloadManager.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/DownloadManager.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/FormData.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/Handler.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/Init.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/Multi.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/Request.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/Session.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/ToBuffer.hpp	/^namespace Net {$/;"	n
Net	Net/HTTP/ToFile.hpp	/^namespace Net {$/;"	n
Net	Weather/NOAADownloader.hpp	/^namespace Net {$/;"	n
NetCoupe	Engine/Contest/Solvers/NetCoupe.hpp	/^class NetCoupe : public ContestDijkstra {$/;"	c
NetState	Net/State.hpp	/^enum class NetState {$/;"	c
NettoSpeed	Profile/ProfileKeys.cpp	/^const char NettoSpeed[] = "NettoSpeed";$/;"	m	namespace:ProfileKeys	file:
NettoVario	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::NettoVario(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
NettoVario	Engine/Navigation/TraceHistory.hpp	/^  TraceVariableHistory NettoVario;$/;"	m	class:TraceHistory
Network	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Network,$/;"	e	enum:Controls	file:
NetworkInfo	Kobo/WifiDialog.cpp	/^  struct NetworkInfo {$/;"	s	class:final	file:
NetworkWidget	Kobo/NetworkDialog.cpp	/^  NetworkWidget(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:final
New	Lua/Class.hxx	/^	static pointer New(lua_State *L, Args&&... args) {$/;"	f	struct:Lua::Class
NewBasicState	Lua/Basic.cpp	/^Lua::NewBasicState()$/;"	f	class:Lua
NewClicked	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::NewClicked()$/;"	f	class:PlaneListWidget
NewClicked	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::NewClicked()$/;"	f	class:ProfileListWidget
NewFullState	Lua/Full.cpp	/^Lua::NewFullState()$/;"	f	class:Lua
NewLine	IO/TextWriter.hpp	/^  bool NewLine() {$/;"	f	class:TextWriter
NewLine	Screen/TerminalWindow.cpp	/^TerminalWindow::NewLine()$/;"	f	class:TerminalWindow
NewRef	Event/Poll/LibInput/UdevContext.cpp	/^UdevContext::NewRef()$/;"	f	class:UdevContext
NewSample	Computer/Wind/CirclingWind.cpp	/^CirclingWind::NewSample(const MoreData &info, const CirclingInfo &circling)$/;"	f	class:CirclingWind
NewSymbolButton	Gauge/BigTrafficWidget.cpp	/^NewSymbolButton(ContainerWindow &parent, const ButtonLook &look,$/;"	f	file:
NewWind	Computer/Wind/Store.cpp	/^WindStore::NewWind(const NMEAInfo &info, DerivedInfo &derived,$/;"	f	class:WindStore
Next	Device/Port/TTYEnumerator.cpp	/^TTYEnumerator::Next()$/;"	f	class:TTYEnumerator
Next	PageActions.cpp	/^PageActions::Next()$/;"	f	class:PageActions
Next	Screen/Memory/Bresenham.hpp	/^  bool Next() {$/;"	f	class:BresenhamIterator
Next	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer Next(const_pointer p, int delta) {$/;"	f	struct:BGRAPixelTraits
Next	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer Next(const_pointer p, int delta) {$/;"	f	struct:GreyscalePixelTraits
Next	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer Next(pointer p, int delta) {$/;"	f	struct:BGRAPixelTraits
Next	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer Next(pointer p, int delta) {$/;"	f	struct:GreyscalePixelTraits
Next	Terrain/RasterBuffer.cpp	/^  unsigned Next() {$/;"	f	class:PixelIterator
Next	Util/IterableSplitString.hxx	/^		void Next() {$/;"	f	class:BasicIterableSplitString::final
Next	Weather/METARParser.cpp	/^  const TCHAR *Next() {$/;"	f	class:METARLine
Next	Weather/NOAAFormatter.cpp	/^  Range Next() {$/;"	f	class:NOAALineSplitter
Next	Widget/PagerWidget.cpp	/^PagerWidget::Next(bool wrap)$/;"	f	class:PagerWidget
NextAngle	Screen/OpenGL/VertexArray.hpp	/^  static unsigned NextAngle(unsigned angle) {$/;"	f	struct:GLDonutVertices
NextArrowRenderer	Renderer/NextArrowRenderer.hpp	/^  NextArrowRenderer(const WindArrowLook &_look):look(_look) {}$/;"	f	class:NextArrowRenderer
NextArrowRenderer	Renderer/NextArrowRenderer.hpp	/^class NextArrowRenderer {$/;"	c
NextBottomGridIntersection	Terrain/ScanLine.cpp	/^NextBottomGridIntersection(const GridRay &ray,$/;"	f	file:
NextByte	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer NextByte(const_pointer p,$/;"	f	struct:BGRAPixelTraits
NextByte	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer NextByte(const_pointer p,$/;"	f	struct:GreyscalePixelTraits
NextByte	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer NextByte(pointer p, int delta) {$/;"	f	struct:BGRAPixelTraits
NextByte	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer NextByte(pointer p, int delta) {$/;"	f	struct:GreyscalePixelTraits
NextChar	Screen/FreeType/Font.cpp	/^NextChar(const TCHAR *p)$/;"	f	file:
NextCircular	Geo/SearchPointVector.cpp	/^SearchPointVector::NextCircular(const_iterator i) const$/;"	f	class:SearchPointVector
NextClock	Time/ReplayClock.hpp	/^  double NextClock(double time) {$/;"	f	class:ReplayClock
NextColumn	Renderer/TextRowRenderer.cpp	/^TextRowRenderer::NextColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
NextControlRect	Widget/RowFormWidget.hpp	/^  void NextControlRect(PixelRect &rc, unsigned height) {$/;"	f	class:RowFormWidget
NextGridIntersection	Terrain/ScanLine.cpp	/^NextGridIntersection(const GridRay &ray,$/;"	f	file:
NextHorizontalGridIntersection	Terrain/ScanLine.cpp	/^NextHorizontalGridIntersection(const GridRay &ray,$/;"	f	file:
NextIndex	PageActions.cpp	/^PageActions::NextIndex()$/;"	f	class:PageActions
NextLeftGridIntersection	Terrain/ScanLine.cpp	/^NextLeftGridIntersection(const GridRay &ray, GridLocation current)$/;"	f	file:
NextLegEqThermal	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::NextLegEqThermal(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
NextLegEqThermal	InfoBoxes/Content/Type.hpp	/^    NextLegEqThermal,$/;"	e	enum:InfoBoxFactory::Type
NextName	IO/ZipArchive.cpp	/^ZipArchive::NextName()$/;"	f	class:ZipArchive
NextPage	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::NextPage(int step)$/;"	f	class:WaypointDetailsWidget
NextPage	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::NextPage(int Step)$/;"	f	class:AnalysisWidget
NextPage	Widget/TabWidget.cpp	/^TabWidget::NextPage()$/;"	f	class:TabWidget
NextPowerOfTwo	Screen/OpenGL/Texture.cpp	/^NextPowerOfTwo(unsigned i)$/;"	f	file:
NextRightGridIntersection	Terrain/ScanLine.cpp	/^NextRightGridIntersection(const GridRay &ray,$/;"	f	file:
NextRow	Dialogs/Task/TargetDialog.cpp	/^  PixelRect NextRow(unsigned height) {$/;"	f	class:RowLayout
NextRow	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer NextRow(const_pointer p,$/;"	f	struct:BGRAPixelTraits
NextRow	Screen/Memory/PixelTraits.hpp	/^  static constexpr const_pointer NextRow(const_pointer p,$/;"	f	struct:GreyscalePixelTraits
NextRow	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer NextRow(pointer p,$/;"	f	struct:BGRAPixelTraits
NextRow	Screen/Memory/PixelTraits.hpp	/^  static constexpr pointer NextRow(pointer p,$/;"	f	struct:GreyscalePixelTraits
NextSquareRange	Engine/Trace/Trace.hpp	/^    const_iterator &NextSquareRange(unsigned sq_resolution,$/;"	f	class:Trace::const_iterator
NextTarget	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::NextTarget()$/;"	f	class:TrafficWidget
NextTarget	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::NextTarget()$/;"	f	class:FlarmTrafficWindow
NextToken	XML/Parser.cpp	/^  struct NextToken {$/;"	s	namespace:XML	file:
NextTopGridIntersection	Terrain/ScanLine.cpp	/^NextTopGridIntersection(const GridRay &ray, GridLocation current)$/;"	f	file:
NextTraffic	FLARM/List.hpp	/^  const FlarmTraffic *NextTraffic(const FlarmTraffic *t) const {$/;"	f	struct:TrafficList
NextVerticalGridIntersection	Terrain/ScanLine.cpp	/^NextVerticalGridIntersection(const GridRay &ray,$/;"	f	file:
NmeaReplay	Replay/NmeaReplay.cpp	/^NmeaReplay::NmeaReplay(std::unique_ptr<NLineReader> &&_reader,$/;"	f	class:NmeaReplay
NmeaReplay	Replay/NmeaReplay.hpp	/^class NmeaReplay: public AbstractReplay$/;"	c
NoCancelOperationEnvironment	Operation/NoCancelOperationEnvironment.hpp	/^  NoCancelOperationEnvironment(OperationEnvironment &_other)$/;"	f	class:NoCancelOperationEnvironment
NoCancelOperationEnvironment	Operation/NoCancelOperationEnvironment.hpp	/^class NoCancelOperationEnvironment : public ProxyOperationEnvironment {$/;"	c
NoFontsAvailable	MainWindow.cpp	/^NoFontsAvailable()$/;"	f	file:
NoTrack	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    NoTrack,$/;"	e	enum:final::Controls
NoValue	Audio/VarioGlue.cpp	/^AudioVarioGlue::NoValue()$/;"	f	class:AudioVarioGlue
NoValue	Screen/EGL/System.hpp	54;"	d
NoValue	Screen/GLX/System.hpp	43;"	d
NoValue	Screen/TopWindow.hpp	67;"	d
Node	Util/RadixTree.hpp	/^    Node(const TCHAR *_label)$/;"	f	struct:RadixTree::Node
Node	Util/RadixTree.hpp	/^  struct Node {$/;"	s	class:RadixTree
NodeValue	Engine/Route/AStar.hpp	/^    NodeValue(const AStarPriorityValue &_priority,$/;"	f	struct:AStar::NodeValue
NodeValue	Engine/Route/AStar.hpp	/^  struct NodeValue {$/;"	s	class:AStar
NonCopyable	Util/NonCopyable.hpp	/^  constexpr NonCopyable () {}$/;"	f	class:NonCopyable
NonCopyable	Util/NonCopyable.hpp	/^class NonCopyable$/;"	c
None	Form/TabMenuDisplay.hpp	/^    static MenuTabIndex None() {$/;"	f	struct:final::MenuTabIndex
None	Screen/EGL/System.hpp	58;"	d
None	Screen/GLX/System.hpp	47;"	d
Nook	Android/Nook.hpp	/^namespace Nook {$/;"	n
Normal	Math/Line2D.hpp	/^  constexpr Point Normal() const {$/;"	f	struct:Line2D
Normalise	Time/WrapClock.cpp	/^WrapClock::Normalise(NMEAInfo &basic)$/;"	f	class:WrapClock
Normalise	Time/WrapClock.cpp	/^WrapClock::Normalise(double stamp, BrokenDate &date, const BrokenTime &time)$/;"	f	class:WrapClock
Normalize	Geo/GeoPoint.hpp	/^  GeoPoint &Normalize() {$/;"	f	struct:GeoPoint
Normalize	Screen/OpenGL/Triangulate.cpp	/^Normalize(PixelPoint *v, float length)$/;"	f	file:
NormalizeIGCAltitude	IGC/IGCWriter.cpp	/^NormalizeIGCAltitude(int value)$/;"	f	file:
NormalizeIntAngle	Math/FastTrig.hpp	/^NormalizeIntAngle(unsigned angle)$/;"	f
NormalizeLift	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::NormalizeLift(double lift, double max_lift)$/;"	f	class:ThermalAssistantRenderer
NormalizeSearchString	Util/StringUtil.cpp	/^NormalizeSearchString(char *gcc_restrict dest,$/;"	f
NormalizeSearchString	Util/WStringUtil.cpp	/^NormalizeSearchString(wchar_t *gcc_restrict dest,$/;"	f
NotWhiteCondition	Screen/Memory/PixelOperations.hpp	/^struct NotWhiteCondition {$/;"	s
Notify	Computer/ConditionMonitor/ConditionMonitorAATTime.cpp	/^ConditionMonitorAATTime::Notify()$/;"	f	class:ConditionMonitorAATTime
Notify	Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp	/^ConditionMonitorFinalGlide::Notify()$/;"	f	class:ConditionMonitorFinalGlide
Notify	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.cpp	/^ConditionMonitorGlideTerrain::Notify()$/;"	f	class:ConditionMonitorGlideTerrain
Notify	Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp	/^ConditionMonitorLandableReachable::Notify()$/;"	f	class:ConditionMonitorLandableReachable
Notify	Computer/ConditionMonitor/ConditionMonitorSunset.cpp	/^ConditionMonitorSunset::Notify()$/;"	f	class:ConditionMonitorSunset
Notify	Computer/ConditionMonitor/ConditionMonitorWind.cpp	/^ConditionMonitorWind::Notify()$/;"	f	class:ConditionMonitorWind
NotifyCalculatedUpdate	Device/MultipleDevices.cpp	/^MultipleDevices::NotifyCalculatedUpdate(const MoreData &basic,$/;"	f	class:MultipleDevices
NotifySensorUpdate	Device/MultipleDevices.cpp	/^MultipleDevices::NotifySensorUpdate(const MoreData &basic)$/;"	f	class:MultipleDevices
Now	OS/FileUtil.cpp	/^File::Now()$/;"	f	class:File
NowLocal	Time/BrokenDateTime.cpp	/^BrokenDateTime::NowLocal()$/;"	f	class:BrokenDateTime
NowUTC	Time/BrokenDateTime.cpp	/^BrokenDateTime::NowUTC()$/;"	f	class:BrokenDateTime
Null	Engine/Waypoint/Runway.hpp	/^  static constexpr Runway Null() {$/;"	f	class:Runway
Null	RadioFrequency.hpp	/^  static constexpr RadioFrequency Null() {$/;"	f	class:RadioFrequency
Null	ResourceId.hpp	/^  static constexpr ResourceId Null() {$/;"	f	class:ResourceId
Null	Util/LightString.hxx	/^	static LightString Null() {$/;"	f	class:LightString
Null	XML/Node.hpp	/^  static inline XMLNode Null() {$/;"	f	class:XMLNode
NullBlackboardListener	Blackboard/BlackboardListener.hpp	/^class NullBlackboardListener : public BlackboardListener {$/;"	c
NullDataHandler	IO/NullDataHandler.hpp	/^class NullDataHandler : public DataHandler {$/;"	c
NullOperationEnvironment	Operation/Operation.hpp	/^class NullOperationEnvironment : public OperationEnvironment {$/;"	c
NullPort	Device/Port/NullPort.cpp	/^NullPort::NullPort()$/;"	f	class:NullPort
NullPort	Device/Port/NullPort.cpp	/^NullPort::NullPort(DataHandler &_handler)$/;"	f	class:NullPort
NullPort	Device/Port/NullPort.hpp	/^class NullPort : public Port, private DataHandler  {$/;"	c
NullWidget	Widget/Widget.hpp	/^class NullWidget : public Widget {$/;"	c
NumSat	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  NumSat,$/;"	e	enum:Controls	file:
NumSubMenus	Form/TabMenuDisplay.hpp	/^    unsigned NumSubMenus() const {$/;"	f	struct:final::MainMenuButton
NumToIGCChar	Formatter/IGCFilenameFormatter.cpp	/^NumToIGCChar(unsigned num)$/;"	f	file:
NumberDataField	Form/DataField/Number.cpp	/^NumberDataField::NumberDataField(Type type, bool support_combo,$/;"	f	class:NumberDataField
NumberDataField	Form/DataField/Number.hpp	/^class NumberDataField : public DataField {$/;"	c
NumberEntryDialog	Dialogs/NumberEntry.cpp	/^NumberEntryDialog(const TCHAR *caption,$/;"	f
NumberToTeamCode	TeamCode/TeamCode.cpp	/^NumberToTeamCode(unsigned value, TCHAR *code, unsigned n_digits)$/;"	f	file:
NunchuckDevice	Android/NunchuckDevice.cpp	/^NunchuckDevice::NunchuckDevice(unsigned _index,$/;"	f	class:NunchuckDevice
NunchuckListener	Android/NunchuckListener.hpp	/^class NunchuckListener {$/;"	c
OBSERVATIONZONECLIENT_HPP	Engine/Task/ObservationZones/ObservationZoneClient.hpp	24;"	d
OBSERVATIONZONEPOINT_HPP	Engine/Task/ObservationZones/ObservationZonePoint.hpp	25;"	d
OBSERVATIONZONE_HPP	Engine/Task/ObservationZones/ObservationZone.hpp	25;"	d
OBSOLETE_BOTTOM_RIGHT_12	InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_BOTTOM_RIGHT_12 = 10,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_BOTTOM_RIGHT_4	InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_BOTTOM_RIGHT_4 = 16,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_BOTTOM_RIGHT_8	InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_BOTTOM_RIGHT_8 = 5,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_DONT_USE_NAMEIFINTASK	Renderer/WaypointRendererSettings.hpp	/^    OBSOLETE_DONT_USE_NAMEIFINTASK,$/;"	m	class:WaypointRendererSettings::DisplayTextType
OBSOLETE_DONT_USE_NUMBER	Renderer/WaypointRendererSettings.hpp	/^    OBSOLETE_DONT_USE_NUMBER,$/;"	m	class:WaypointRendererSettings::DisplayTextType
OBSOLETE_SPLIT_8	InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_SPLIT_8 = 3,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_TOP_LEFT_4	InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_TOP_LEFT_4 = 17,$/;"	m	class:InfoBoxSettings::Geometry
OBSOLETE_TOP_LEFT_8	InfoBoxes/InfoBoxSettings.hpp	/^    OBSOLETE_TOP_LEFT_8 = 4,$/;"	m	class:InfoBoxSettings::Geometry
OBSTACLE	Engine/Waypoint/Waypoint.hpp	/^    OBSTACLE,$/;"	m	class:Waypoint::Type
OBSTACLE_DATABASE	FLARM/Error.hpp	/^    OBSTACLE_DATABASE = 0x81,$/;"	e	enum:uint8_t
OFF	Computer/Settings.hpp	/^    OFF,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
OFF	Engine/Route/Config.hpp	/^    OFF,$/;"	m	class:RoutePlannerConfig::ReachMode
OFF	Hardware/Battery.hpp	/^      OFF,$/;"	e	enum:Power::External::externalstatus
OFF	Logger/Settings.hpp	/^    OFF,$/;"	m	class:LoggerSettings::AutoLogger
OFF	MapSettings.hpp	/^    OFF,$/;"	m	class:TrailSettings::Length
OFF	MapSettings.hpp	/^  OFF,$/;"	m	class:DisplayGroundTrack
OFF	MapSettings.hpp	/^  OFF,$/;"	m	class:DisplaySkyLinesTrafficMapMode
OFF	MapSettings.hpp	/^  OFF,$/;"	m	class:FinalGlideBarDisplayMode
OFF	Terrain/TerrainSettings.hpp	/^  OFF,$/;"	m	class:Contours
OFF	Terrain/TerrainSettings.hpp	/^  OFF,$/;"	m	class:SlopeShading
OFF	UISettings.hpp	/^    OFF,$/;"	m	class:UISettings::HapticFeedback
OFF	UISettings.hpp	/^    OFF,$/;"	m	class:UISettings::ThermalAssistantPosition
OFFFIN	Dialogs/Device/LX/NanoConfigWidget.hpp	/^    OFFFIN,$/;"	e	enum:final::Controls
OK	Engine/GlideSolvers/GlideResult.hpp	/^    OK = 0,$/;"	m	class:GlideResult::Validity
OLC	Dialogs/dlgAnalysis.hpp	/^  OLC,$/;"	m	class:AnalysisPage
OLCClassic	Engine/Contest/Solvers/OLCClassic.hpp	/^class OLCClassic : public ContestDijkstra {$/;"	c
OLCFAI	Engine/Contest/Solvers/OLCFAI.hpp	/^class OLCFAI : public TriangleContest {$/;"	c
OLCLeague	Engine/Contest/Solvers/OLCLeague.hpp	/^class OLCLeague : public AbstractContest$/;"	c
OLCPlus	Engine/Contest/Solvers/OLCPlus.hpp	/^class OLCPlus : public AbstractContest {$/;"	c
OLCRules	Profile/ProfileKeys.cpp	/^const char OLCRules[] = "OLCRules";$/;"	m	namespace:ProfileKeys	file:
OLCSISAT	Engine/Contest/Solvers/OLCSISAT.hpp	/^class OLCSISAT : public ContestDijkstra {$/;"	c
OLCSprint	Engine/Contest/Solvers/OLCSprint.hpp	/^class OLCSprint : public ContestDijkstra {$/;"	c
OLCTriangleConstants	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^struct OLCTriangleConstants {$/;"	s
OLCTriangleRules	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^struct OLCTriangleRules : private OLCTriangleConstants {$/;"	s
OLCTriangleValidator	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^class OLCTriangleValidator : OLCTriangleConstants {$/;"	c
OLC_CLASSIC	Engine/Contest/Settings.hpp	/^  OLC_CLASSIC,$/;"	m	class:Contest
OLC_CLASSIC_HPP	Engine/Contest/Solvers/OLCClassic.hpp	24;"	d
OLC_DIJKSTRA_HPP	Engine/Contest/Solvers/ContestDijkstra.hpp	25;"	d
OLC_FAI	Engine/Contest/Settings.hpp	/^  OLC_FAI,$/;"	m	class:Contest
OLC_FAI_HPP	Engine/Contest/Solvers/OLCFAI.hpp	24;"	d
OLC_LEAGUE	Engine/Contest/Settings.hpp	/^  OLC_LEAGUE,$/;"	m	class:Contest
OLC_LEAGUE_HPP	Engine/Contest/Solvers/OLCLeague.hpp	24;"	d
OLC_PLUS	Engine/Contest/Settings.hpp	/^  OLC_PLUS,$/;"	m	class:Contest
OLC_PLUS_HPP	Engine/Contest/Solvers/OLCPlus.hpp	24;"	d
OLC_RULES_HPP	Engine/Contest/Solvers/Contests.hpp	25;"	d
OLC_SISAT_HPP	Engine/Contest/Solvers/OLCSISAT.hpp	24;"	d
OLC_SPEED	InfoBoxes/Content/Type.hpp	/^    OLC_SPEED,$/;"	e	enum:InfoBoxFactory::Type
OLC_SPRINT	Engine/Contest/Settings.hpp	/^  OLC_SPRINT = 0,$/;"	m	class:Contest
OLC_SPRINT_HPP	Engine/Contest/Solvers/OLCSprint.hpp	24;"	d
OLC_TRIANGLE_RULES_HPP	Engine/Contest/Solvers/OLCTriangleRules.hpp	24;"	d
OLDXCSPROFILE	Profile/Profile.cpp	42;"	d	file:
ON	Hardware/Battery.hpp	/^      ON,$/;"	e	enum:Power::External::externalstatus
ON	Logger/Settings.hpp	/^    ON,$/;"	m	class:LoggerSettings::AutoLogger
ON	MapSettings.hpp	/^  ON,$/;"	m	class:DisplayGroundTrack
ON	MapSettings.hpp	/^  ON,$/;"	m	class:FinalGlideBarDisplayMode
ON	UISettings.hpp	/^    ON,$/;"	m	class:UISettings::HapticFeedback
ONES	Terrain/jasper/jp2/jp2_cod.c	86;"	d	file:
ONLINE_CONTEST_HPP	Engine/Contest/ContestManager.hpp	24;"	d
ON_CIRCLING	Device/Driver/LX/LX1600.hpp	/^    ON_CIRCLING = 1,$/;"	m	class:LX1600::SCMode
ON_CIRCLING	Device/Driver/LXERA/LXERA.hpp	/^    ON_CIRCLING = 1,$/;"	m	class:LXEra::SCMode
OPAQUE	Screen/Memory/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon91
OPAQUE	Screen/Memory/Canvas.hpp	43;"	d
OPAQUE	Screen/Memory/Color.hpp	/^  static constexpr uint8_t OPAQUE = 0xff;$/;"	m	class:Color
OPAQUE	Screen/Memory/Color.hpp	36;"	d
OPAQUE	Screen/OpenGL/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon93
OPAQUE	Screen/OpenGL/Canvas.hpp	43;"	d
OPENAIR	Airspace/AirspaceParser.cpp	/^  OPENAIR,$/;"	m	class:AirspaceFileType	file:
OPEN_SECURITY	Kobo/WPASupplicant.hpp	/^  OPEN_SECURITY,$/;"	e	enum:WifiSecurity
OPTIMISED_MASK	Screen/Memory/Optimised.hpp	/^  static constexpr unsigned OPTIMISED_MASK = ~PORTABLE_MASK;$/;"	m	class:SelectOptimisedPixelOperations
OPTIMIZED	Dialogs/Task/TargetDialog.cpp	/^    OPTIMIZED,$/;"	e	enum:TargetWidget::Buttons	file:
OPTIONAL_STARTS	Dialogs/Task/TaskPointDialog.cpp	/^    OPTIONAL_STARTS,$/;"	e	enum:final::Buttons	file:
OPT_DEBUG	Terrain/jasper/jpc/jpc_dec.c	/^	OPT_DEBUG$/;"	e	enum:__anon155	file:
OPT_MAXLYRS	Terrain/jasper/jpc/jpc_dec.c	/^	OPT_MAXLYRS,$/;"	e	enum:__anon155	file:
OPT_MAXPKTS	Terrain/jasper/jpc/jpc_dec.c	/^	OPT_MAXPKTS,$/;"	e	enum:__anon155	file:
OPT_MAXSAMPLES	Terrain/jasper/jpc/jpc_dec.c	/^	OPT_MAXSAMPLES,$/;"	e	enum:__anon155	file:
ORDERED	Engine/Task/TaskType.hpp	/^  ORDERED,$/;"	m	class:TaskType
ORDEREDTASKPOINT_HPP	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	25;"	d
ORDEREDTASK_H	Engine/Task/Ordered/OrderedTask.hpp	24;"	d
ORIGIN	Device/Driver/LX/LXN.hpp	/^    ORIGIN = 0xa0,$/;"	e	enum:LXN::Command
OS_ALLOCATED_PATH_HPP	OS/Path.hpp	25;"	d
OS_CONVERT_PATH_NAME_HPP	OS/ConvertPathName.hpp	25;"	d
OS_PATH_HPP	OS/PathName.hpp	25;"	d
OTHER	Engine/Airspace/AirspaceClass.hpp	/^  OTHER = 0,$/;"	e	enum:uint8_t
OTHER	FLARM/Error.hpp	/^    OTHER = 0xf1,$/;"	e	enum:uint8_t
OUTBUFFERSIZE	Form/DataField/Base.hpp	33;"	d
OUTLANDING	Engine/Waypoint/Waypoint.hpp	/^    OUTLANDING,$/;"	m	class:Waypoint::Type
OUTLINE	Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	e	enum:ShapeRenderer::__anon89
OUTLINED	Renderer/LabelShape.hpp	/^  OUTLINED,$/;"	m	class:LabelShape
OUTLINED_INVERTED	Renderer/LabelShape.hpp	/^  OUTLINED_INVERTED,$/;"	m	class:LabelShape
OUTPUT_CIRCLING	NMEA/VegaSwitchState.hpp	/^    OUTPUT_CIRCLING = 0,$/;"	e	enum:VegaSwitchState::OutputBits
OUTPUT_FLAP_LANDING	NMEA/VegaSwitchState.hpp	/^    OUTPUT_FLAP_LANDING = 7,$/;"	e	enum:VegaSwitchState::OutputBits
OUTPUT_MASK_CIRCLING	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned OUTPUT_MASK_CIRCLING = 1 << OUTPUT_CIRCLING;$/;"	m	struct:VegaSwitchState
OUTPUT_MASK_FLAP_LANDING	NMEA/VegaSwitchState.hpp	/^  static constexpr unsigned OUTPUT_MASK_FLAP_LANDING = 1 << OUTPUT_FLAP_LANDING;$/;"	m	struct:VegaSwitchState
OUTPUT_MODE	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^    OUTPUT_MODE,$/;"	e	enum:final::BlueFlyWidgets	file:
OUTPUT_MODE_MAX	Device/Driver/BlueFly/Internal.hpp	/^    static constexpr unsigned OUTPUT_MODE_MAX = 3;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
OUTPUT_MODE_NAME	Device/Driver/BlueFly/Internal.hpp	/^    static const char OUTPUT_MODE_NAME[];$/;"	m	struct:BlueFlyDevice::BlueFlySettings
OUTPUT_MODE_NAME	Device/Driver/BlueFly/Settings.cpp	/^const char BlueFlyDevice::BlueFlySettings::OUTPUT_MODE_NAME[] = "BOM";$/;"	m	class:BlueFlyDevice::BlueFlySettings	file:
OUTPUT_STREAM_HXX	IO/OutputStream.hxx	31;"	d
OVERLAY	MapWindow/Items/MapItem.hpp	/^    OVERLAY,$/;"	e	enum:TaskPointType::Type
OVERVIEW_BITS	Terrain/RasterTileCache.hpp	/^  static constexpr unsigned OVERVIEW_BITS = 4;$/;"	m	class:RasterTileCache
OVERVIEW_BITS	Terrain/RasterTraits.hpp	/^  constexpr unsigned OVERVIEW_BITS = 4;$/;"	m	namespace:RasterTraits
OVERVIEW_MASK	Terrain/RasterTileCache.hpp	/^  static constexpr unsigned OVERVIEW_MASK = (~0u) << OVERVIEW_BITS;$/;"	m	class:RasterTileCache
OVERVIEW_MASK	Terrain/RasterTraits.hpp	/^  constexpr unsigned OVERVIEW_MASK = (~0u) << OVERVIEW_BITS;$/;"	m	namespace:RasterTraits
OVERWRITING_RING_BUFFER_HPP	Util/OverwritingRingBuffer.hpp	31;"	d
OWN_CODE	Dialogs/Traffic/TeamCodeDialog.cpp	/^    OWN_CODE,$/;"	e	enum:final::Buttons	file:
OZBoundary	Engine/Task/ObservationZones/Boundary.hpp	/^class OZBoundary : public std::forward_list<GeoPoint> {$/;"	c
OZI_EXPLORER	Waypoint/WaypointFileType.hpp	/^  OZI_EXPLORER,$/;"	m	class:WaypointFileType
OZPreviewRenderer	Renderer/OZPreviewRenderer.hpp	/^namespace OZPreviewRenderer$/;"	n
OZRenderer	Renderer/OZRenderer.cpp	/^OZRenderer::OZRenderer(const TaskLook &_task_look,$/;"	f	class:OZRenderer
OZRenderer	Renderer/OZRenderer.hpp	/^class OZRenderer {$/;"	c
OZTYP	Device/Driver/Volkslogger/vlapi2.h	/^    enum OZTYP {$/;"	g	struct:VLAPI_DATA::DCLWPT
OZTYP_CYLSKT	Device/Driver/Volkslogger/vlapi2.h	/^      OZTYP_CYLSKT = 0,$/;"	e	enum:VLAPI_DATA::DCLWPT::OZTYP
OZTYP_LINE	Device/Driver/Volkslogger/vlapi2.h	/^      OZTYP_LINE = 1$/;"	e	enum:VLAPI_DATA::DCLWPT::OZTYP
O_BINARY	Terrain/jasper/jas_stream.h	98;"	d
O_BINARY	zzip/file.c	646;"	d	file:
O_BINARY	zzip/zip.c	611;"	d	file:
O_CLOEXEC	OS/FileDescriptor.cxx	54;"	d	file:
O_NOCTTY	OS/FileDescriptor.cxx	50;"	d	file:
O_NOCTTY	zzip/file.c	649;"	d	file:
O_NONBLOCK	zzip/file.c	655;"	d	file:
O_SYNC	zzip/file.c	652;"	d	file:
O_TMPFILE	IO/FileOutputStream.cxx	143;"	d	file:
Object	Audio/SLES/Object.hpp	/^    explicit Object(SLObjectItf _object):object(_object) {}$/;"	f	class:SLES::Object
Object	Audio/SLES/Object.hpp	/^  class Object {$/;"	c	namespace:SLES
Object	Java/Object.hxx	/^	class Object {$/;"	c	namespace:Java
ObjectWriter	JSON/Writer.hpp	/^    ObjectWriter(BufferedOutputStream &_writer):writer(_writer), first(true) {$/;"	f	class:JSON::ObjectWriter
ObjectWriter	JSON/Writer.hpp	/^  class ObjectWriter {$/;"	c	namespace:JSON
ObservationZone	Engine/Task/ObservationZones/ObservationZone.hpp	/^  ObservationZone(Shape _shape, bool _can_start_through_top)$/;"	f	class:ObservationZone
ObservationZone	Engine/Task/ObservationZones/ObservationZone.hpp	/^class ObservationZone$/;"	c
ObservationZoneClient	Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  ObservationZoneClient(ObservationZonePoint* _oz_point):oz_point(_oz_point) {}$/;"	f	class:ObservationZoneClient
ObservationZoneClient	Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^class ObservationZoneClient {$/;"	c
ObservationZoneEditWidget	Dialogs/Task/Widgets/ObservationZoneEditWidget.cpp	/^ObservationZoneEditWidget::ObservationZoneEditWidget(ObservationZone &_oz)$/;"	f	class:ObservationZoneEditWidget
ObservationZoneEditWidget	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^class ObservationZoneEditWidget$/;"	c
ObservationZonePoint	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  ObservationZonePoint(Shape _shape, bool _can_start_through_top,$/;"	f	class:ObservationZonePoint
ObservationZonePoint	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  ObservationZonePoint(const ObservationZonePoint &other,$/;"	f	class:ObservationZonePoint
ObservationZonePoint	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^class ObservationZonePoint : public ObservationZone {$/;"	c
Occupied	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Occupied(const unsigned index) const$/;"	f	class:ThermalBand
Occupied	Engine/ThermalBand/ThermalSlice.cpp	/^ThermalSlice::Occupied() const$/;"	f	class:ThermalSlice
OffsetActiveFrequency	ActionInterface.cpp	/^void ActionInterface::OffsetActiveFrequency(double offset_khz, bool to_devices)$/;"	f	class:ActionInterface
OffsetButtonsWidget	Widget/OffsetButtonsWidget.hpp	/^  OffsetButtonsWidget(const ButtonLook &_look, const TCHAR *_format,$/;"	f	class:OffsetButtonsWidget
OffsetButtonsWidget	Widget/OffsetButtonsWidget.hpp	/^class OffsetButtonsWidget : public NullWidget, private ActionListener {$/;"	c
OffsetCast	Util/Cast.hxx	/^OffsetCast(U *p, ptrdiff_t offset)$/;"	f
OffsetCast	Util/Cast.hxx	/^OffsetCast(const U *p, ptrdiff_t offset)$/;"	f
OffsetCast	Util/ContainerCast.hxx	/^OffsetCast(U *p, ptrdiff_t offset)$/;"	f
OffsetCast	Util/ContainerCast.hxx	/^OffsetCast(const U *p, ptrdiff_t offset)$/;"	f
OffsetHistory	MapWindow/GlueMapWindow.hpp	/^  OffsetHistory():pos(0) {$/;"	f	class:OffsetHistory
OffsetHistory	MapWindow/GlueMapWindow.hpp	/^class OffsetHistory$/;"	c
OffsetKiloHertz	RadioFrequency.hpp	/^  void OffsetKiloHertz(int khz_offset) {$/;"	f	class:RadioFrequency
OffsetManualMacCready	ActionInterface.cpp	/^ActionInterface::OffsetManualMacCready(double offset, bool to_devices)$/;"	f	class:ActionInterface
OffsetPointer	Util/ContainerCast.hxx	/^OffsetPointer(const void *p, ptrdiff_t offset)$/;"	f
OffsetPointer	Util/ContainerCast.hxx	/^OffsetPointer(void *p, ptrdiff_t offset)$/;"	f
OffsetPointer	Util/OffsetPointer.hxx	/^OffsetPointer(const void *p, ptrdiff_t offset)$/;"	f
OffsetPointer	Util/OffsetPointer.hxx	/^OffsetPointer(void *p, ptrdiff_t offset)$/;"	f
OffsetStandbyFrequency	ActionInterface.cpp	/^void ActionInterface::OffsetStandbyFrequency(double offset_khz, bool to_devices)$/;"	f	class:ActionInterface
OldIGCFileFinder	Logger/IGCFileCleanup.cpp	/^  OldIGCFileFinder(unsigned _current_year):current_year(_current_year) {$/;"	f	class:OldIGCFileFinder
OldIGCFileFinder	Logger/IGCFileCleanup.cpp	/^class OldIGCFileFinder: public File::Visitor$/;"	c	file:
OnAccept	Device/Port/TCPPort.cpp	/^TCPPort::OnAccept(const boost::system::error_code &ec)$/;"	f	class:TCPPort
OnAck	Tracking/SkyLines/Handler.hpp	/^  virtual void OnAck(unsigned id) {}$/;"	f	class:SkyLinesTracking::Handler
OnAckClicked	Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::OnAckClicked()$/;"	f	class:MapItemListWidget
OnAdd	Monitor/MatTaskMonitor.cpp	/^MatTaskAddWidget::OnAdd()$/;"	f	class:MatTaskAddWidget
OnAirspaceListEnter	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::OnAirspaceListEnter(unsigned i)$/;"	f	class:AirspaceListWidget
OnAnyKeyDown	Dialogs/WidgetDialog.cpp	/^WidgetDialog::OnAnyKeyDown(unsigned key_code)$/;"	f	class:WidgetDialog
OnAnyKeyDown	Form/Form.cpp	/^WndForm::OnAnyKeyDown(unsigned key_code)$/;"	f	class:WndForm
OnBackspace	Dialogs/TouchTextEntry.cpp	/^OnBackspace()$/;"	f	file:
OnBrowseClicked	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::OnBrowseClicked()$/;"	f	class:TaskActionsPanel
OnCalcClicked	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::OnCalcClicked()$/;"	f	class:AnalysisWidget
OnCalculatedUpdate	Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnCalculatedUpdate(gcc_unused const MoreData &basic,$/;"	f	class:NullBlackboardListener
OnCalculatedUpdate	Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:ProxyBlackboardListener
OnCalculatedUpdate	Blackboard/RateLimitedBlackboardListener.cpp	/^RateLimitedBlackboardListener::OnCalculatedUpdate(const MoreData &_basic,$/;"	f	class:RateLimitedBlackboardListener
OnCalculatedUpdate	Blackboard/ScopeCalculatedListener.cpp	/^ScopeCalculatedListener::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:ScopeCalculatedListener
OnCalculatedUpdate	Computer/Events.cpp	/^GlideComputerEvents::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:GlideComputerEvents
OnCalculatedUpdate	CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:CrossSectionWidget
OnCalculatedUpdate	Device/Descriptor.cpp	/^DeviceDescriptor::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:DeviceDescriptor
OnCalculatedUpdate	Device/Driver/CaiLNav.cpp	/^CaiLNavDevice::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:CaiLNavDevice
OnCalculatedUpdate	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::OnCalculatedUpdate(const MoreData &basic, $/;"	f	class:OpenVarioDevice
OnCalculatedUpdate	Device/Driver/Vega/Misc.cpp	/^VegaDevice::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:VegaDevice
OnCalculatedUpdate	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:WindSettingsPanel
OnCalculatedUpdate	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:TeamCodeWidget
OnCalculatedUpdate	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:BigThermalAssistantWidget
OnCalculatedUpdate	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:GaugeThermalAssistant
OnCalculatedUpdate	Logger/GlueFlightLogger.cpp	/^GlueFlightLogger::OnCalculatedUpdate(const MoreData &basic,$/;"	f	class:GlueFlightLogger
OnCallsignClicked	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::OnCallsignClicked()$/;"	f	class:FlarmTrafficDetailsWidget
OnCancelMode	Form/Button.cpp	/^Button::OnCancelMode()$/;"	f	class:Button
OnCancelMode	Form/CheckBox.cpp	/^CheckBoxControl::OnCancelMode()$/;"	f	class:CheckBoxControl
OnCancelMode	Form/Edit.cpp	/^WndProperty::OnCancelMode()$/;"	f	class:WndProperty
OnCancelMode	Form/Form.cpp	/^WndForm::OnCancelMode()$/;"	f	class:WndForm
OnCancelMode	Form/List.cpp	/^ListControl::OnCancelMode()$/;"	f	class:ListControl
OnCancelMode	Form/TabDisplay.cpp	/^TabDisplay::OnCancelMode()$/;"	f	class:TabDisplay
OnCancelMode	Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnCancelMode()$/;"	f	class:BigThermalAssistantWindow
OnCancelMode	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnCancelMode()$/;"	f	class:FlarmTrafficControl
OnCancelMode	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnCancelMode()$/;"	f	class:SmallTrafficWindow
OnCancelMode	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnCancelMode()$/;"	f	class:GaugeThermalAssistantWindow
OnCancelMode	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnCancelMode()$/;"	f	class:InfoBoxWindow
OnCancelMode	MainWindow.cpp	/^MainWindow::OnCancelMode()$/;"	f	class:MainWindow
OnCancelMode	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnCancelMode()$/;"	f	class:GlueMapWindow
OnCancelMode	MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnCancelMode()$/;"	f	class:TargetMapWindow
OnCancelMode	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnCancelMode()$/;"	f	class:ContainerWindow
OnCancelMode	Screen/Window.cpp	/^Window::OnCancelMode()$/;"	f	class:Window
OnCharacter	Screen/Window.cpp	/^Window::OnCharacter(unsigned ch)$/;"	f	class:Window
OnCharacterCallback	Form/CharacterButton.hpp	/^  typedef bool (*OnCharacterCallback)(unsigned key);$/;"	t	class:CharacterButton
OnCharacterCallback_t	Widget/KeyboardWidget.hpp	/^  typedef bool (*OnCharacterCallback_t)(unsigned ch);$/;"	t	class:KeyboardWidget
OnClearAllClicked	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::OnClearAllClicked()$/;"	f	class:TaskEditPanel
OnClicked	Form/Button.cpp	/^Button::OnClicked()$/;"	f	class:Button
OnClicked	Form/CharacterButton.cpp	/^CharacterButton::OnClicked()$/;"	f	class:CharacterButton
OnClicked	Form/CheckBox.cpp	/^CheckBoxControl::OnClicked()$/;"	f	class:CheckBoxControl
OnClicked	Menu/MenuBar.cpp	/^MenuBar::Button::OnClicked()$/;"	f	class:MenuBar::Button
OnClicked	Menu/ShowMenuButton.cpp	/^ShowMenuButton::OnClicked()$/;"	f	class:ShowMenuButton
OnClimbBase	Computer/StatsComputer.cpp	/^StatsComputer::OnClimbBase(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
OnClimbCeiling	Computer/StatsComputer.cpp	/^StatsComputer::OnClimbCeiling(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
OnClose	Replay/TaskAutoPilot.hpp	/^  virtual void OnClose() {};$/;"	f	class:AbstractAutoPilot
OnCloseClicked	Dialogs/Settings/dlgConfiguration.cpp	/^OnCloseClicked(WidgetDialog &dialog)$/;"	f	file:
OnCodeClicked	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnCodeClicked()$/;"	f	class:TeamCodeWidget
OnCommand	Form/Form.cpp	/^WndForm::OnCommand(unsigned id, unsigned code)$/;"	f	class:WndForm
OnCommand	Screen/GDI/Window.cpp	/^Window::OnCommand(unsigned id, unsigned code)$/;"	f	class:Window
OnComplete	Dialogs/JobDialog.cpp	/^  virtual void OnComplete() {$/;"	f	class:DialogJobThread
OnComputerSettingsUpdate	Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnComputerSettingsUpdate(gcc_unused const ComputerSettings &settings)$/;"	f	class:NullBlackboardListener
OnComputerSettingsUpdate	Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnComputerSettingsUpdate(const ComputerSettings &settings)$/;"	f	class:ProxyBlackboardListener
OnComputerSettingsUpdate	Computer/Events.cpp	/^GlideComputerEvents::OnComputerSettingsUpdate(const ComputerSettings &settings)$/;"	f	class:GlideComputerEvents
OnConnect	Device/Port/TCPClientPort.cpp	/^TCPClientPort::OnConnect(const boost::system::error_code &ec)$/;"	f	class:TCPClientPort
OnCopy	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::OnCopy()$/;"	f	class:InfoBoxesConfigWidget
OnCreate	Dialogs/SimulatorPromptWindow.cpp	/^SimulatorPromptWindow::OnCreate()$/;"	f	class:SimulatorPromptWindow
OnCreate	Form/Form.cpp	/^WndForm::OnCreate()$/;"	f	class:WndForm
OnCreate	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnCreate()$/;"	f	class:FlarmTrafficControl
OnCreate	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnCreate()$/;"	f	class:GlueMapWindow
OnCreate	MapWindow/MapWindowEvents.cpp	/^MapWindow::OnCreate()$/;"	f	class:MapWindow
OnCreate	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnCreate()$/;"	f	class:TargetMapWindow
OnCreate	Screen/BufferWindow.cpp	/^BufferWindow::OnCreate()$/;"	f	class:BufferWindow
OnCreate	Screen/DoubleBufferWindow.cpp	/^DoubleBufferWindow::OnCreate()$/;"	f	class:DoubleBufferWindow
OnCreate	Screen/TerminalWindow.cpp	/^TerminalWindow::OnCreate()$/;"	f	class:TerminalWindow
OnCreate	Screen/Window.cpp	/^Window::OnCreate()$/;"	f	class:Window
OnCustomPaint	InfoBoxes/Content/Base.cpp	/^InfoBoxContent::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContent
OnCustomPaint	InfoBoxes/Content/Other.cpp	/^InfoBoxContentHorizon::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentHorizon
OnCustomPaint	InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextArrow::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentNextArrow
OnCustomPaint	InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentClimbPercent::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentClimbPercent
OnCustomPaint	InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentThermalAssistant::OnCustomPaint(Canvas &canvas,$/;"	f	class:InfoBoxContentThermalAssistant
OnCustomPaint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentBarogram::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentBarogram
OnCustomPaint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentCirclingAverageSpark::OnCustomPaint(Canvas &canvas,$/;"	f	class:InfoBoxContentCirclingAverageSpark
OnCustomPaint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentNettoVarioSpark::OnCustomPaint(Canvas &canvas,$/;"	f	class:InfoBoxContentNettoVarioSpark
OnCustomPaint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentTaskProgress::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentTaskProgress
OnCustomPaint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentThermalBand::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentThermalBand
OnCustomPaint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentVarioSpark::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentVarioSpark
OnCustomPaint	InfoBoxes/Content/Weather.cpp	/^InfoBoxContentWindArrow::OnCustomPaint(Canvas &canvas, const PixelRect &rc)$/;"	f	class:InfoBoxContentWindArrow
OnDatagramReceived	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnDatagramReceived(void *data, size_t length)$/;"	f	class:SkyLinesTracking::Client
OnDatagramReceived	Tracking/SkyLines/Server.cpp	/^Server::OnDatagramReceived(Client &&client,$/;"	f	class:SkyLinesTracking::Server
OnDeclareClicked	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::OnDeclareClicked()$/;"	f	class:TaskActionsPanel
OnDemo	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^VegaConfigurationExtraButtons::OnDemo()$/;"	f	class:VegaConfigurationExtraButtons
OnDepartedThermal	Computer/StatsComputer.cpp	/^StatsComputer::OnDepartedThermal(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
OnDestroy	Dialogs/WidgetDialog.cpp	/^WidgetDialog::OnDestroy()$/;"	f	class:WidgetDialog
OnDestroy	Form/Button.cpp	/^Button::OnDestroy()$/;"	f	class:Button
OnDestroy	Form/Form.cpp	/^WndForm::OnDestroy()$/;"	f	class:WndForm
OnDestroy	Form/List.cpp	/^ListControl::OnDestroy()$/;"	f	class:ListControl
OnDestroy	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnDestroy()$/;"	f	class:InfoBoxWindow
OnDestroy	MainWindow.cpp	/^MainWindow::OnDestroy()$/;"	f	class:MainWindow
OnDestroy	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnDestroy()$/;"	f	class:GlueMapWindow
OnDestroy	MapWindow/MapWindowEvents.cpp	/^MapWindow::OnDestroy()$/;"	f	class:MapWindow
OnDestroy	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnDestroy()$/;"	f	class:TargetMapWindow
OnDestroy	Screen/BufferWindow.cpp	/^BufferWindow::OnDestroy()$/;"	f	class:BufferWindow
OnDestroy	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnDestroy()$/;"	f	class:ContainerWindow
OnDestroy	Screen/DoubleBufferWindow.cpp	/^DoubleBufferWindow::OnDestroy()$/;"	f	class:DoubleBufferWindow
OnDestroy	Screen/FB/TopWindow.cpp	/^TopWindow::OnDestroy()$/;"	f	class:TopWindow
OnDestroy	Screen/SingleWindow.cpp	/^SingleWindow::OnDestroy()$/;"	f	class:SingleWindow
OnDestroy	Screen/Window.cpp	/^Window::OnDestroy()$/;"	f	class:Window
OnDetailsClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnDetailsClicked()$/;"	f	class:TaskPointWidget
OnDownloadAdded	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::OnDownloadAdded(Path path_relative,$/;"	f	class:DownloadFilePickerWidget
OnDownloadAdded	Dialogs/FileManager.cpp	/^ManagedFileListWidget::OnDownloadAdded(Path path_relative,$/;"	f	class:ManagedFileListWidget
OnDownloadComplete	Android/DownloadManager.cpp	/^AndroidDownloadManager::OnDownloadComplete(Path path_relative,$/;"	f	class:AndroidDownloadManager
OnDownloadComplete	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::OnDownloadComplete(Path path_relative,$/;"	f	class:DownloadFilePickerWidget
OnDownloadComplete	Dialogs/FileManager.cpp	/^ManagedFileListWidget::OnDownloadComplete(Path path_relative,$/;"	f	class:ManagedFileListWidget
OnEditTurnpointClicked	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::OnEditTurnpointClicked()$/;"	f	class:TaskEditPanel
OnEvent	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::OnEvent()$/;"	f	class:ALSAPCMPlayer
OnEvent	Lua/InputEvent.cpp	/^  void OnEvent() {$/;"	f	class:final
OnEvent	Screen/Android/TopWindow.cpp	/^TopWindow::OnEvent(const Event &event)$/;"	f	class:TopWindow
OnEvent	Screen/FB/TopWindow.cpp	/^TopWindow::OnEvent(const Event &event)$/;"	f	class:TopWindow
OnEvent	Screen/SDL/TopWindow.cpp	/^TopWindow::OnEvent(const SDL_Event &event)$/;"	f	class:TopWindow
OnEventPipe	Event/Poll/Queue.cpp	/^EventQueue::OnEventPipe(const boost::system::error_code &ec)$/;"	f	class:EventQueue
OnExpertClicked	Dialogs/Settings/dlgConfiguration.cpp	/^ConfigurationExtraButtons::OnExpertClicked()$/;"	f	class:ConfigurationExtraButtons
OnFAIFinishHeightChange	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::OnFAIFinishHeightChange(DataFieldBoolean &df)$/;"	f	class:TaskPropertiesPanel
OnFastForwardClicked	Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnFastForwardClicked()$/;"	f	class:ReplayControlWidget
OnFinishTask	Computer/GlideComputer.cpp	/^GlideComputer::OnFinishTask()$/;"	f	class:GlideComputer
OnFix	Cloud/Main.cpp	/^CloudServer::OnFix(const Client &c,$/;"	f	class:CloudServer
OnFix	Tracking/SkyLines/Server.hpp	/^  virtual void OnFix(const Client &client,$/;"	f	class:SkyLinesTracking::Server
OnFlarmLockClicked	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnFlarmLockClicked()$/;"	f	class:TeamCodeWidget
OnFriendColorClicked	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::OnFriendColorClicked(FlarmColor color)$/;"	f	class:FlarmTrafficDetailsWidget
OnGPSUpdate	Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnGPSUpdate(gcc_unused const MoreData &basic)$/;"	f	class:NullBlackboardListener
OnGPSUpdate	Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnGPSUpdate(const MoreData &basic)$/;"	f	class:ProxyBlackboardListener
OnGPSUpdate	Blackboard/RateLimitedBlackboardListener.cpp	/^RateLimitedBlackboardListener::OnGPSUpdate(const MoreData &_basic)$/;"	f	class:RateLimitedBlackboardListener
OnGPSUpdate	Blackboard/ScopeGPSListener.cpp	/^ScopeGPSListener::OnGPSUpdate(const MoreData &basic)$/;"	f	class:ScopeGPSListener
OnGPSUpdate	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:AirspaceListWidget
OnGPSUpdate	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:DeviceListWidget
OnGPSUpdate	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^SystemStatusPanel::OnGPSUpdate(const MoreData &basic)$/;"	f	class:SystemStatusPanel
OnGPSUpdate	Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:WaypointListWidget
OnGPSUpdate	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:TrafficWidget
OnGPSUpdate	Gauge/GaugeFLARM.cpp	/^GaugeFLARM::OnGPSUpdate(const MoreData &basic)$/;"	f	class:GaugeFLARM
OnGPSUpdate	Gauge/GlueGaugeVario.cpp	/^GlueGaugeVario::OnGPSUpdate(const MoreData &basic)$/;"	f	class:GlueGaugeVario
OnGPSUpdate	HorizonWidget.cpp	/^HorizonWidget::OnGPSUpdate(const MoreData &basic)$/;"	f	class:HorizonWidget
OnGPSUpdate	InfoBoxes/Panel/AltitudeInfo.cpp	/^AltitudeInfoPanel::OnGPSUpdate(const MoreData &basic)$/;"	f	class:AltitudeInfoPanel
OnGesture	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::OnGesture(const TCHAR *gesture)$/;"	f	class:AnalysisWidget
OnGotoClicked	Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::OnGotoClicked()$/;"	f	class:MapItemListWidget
OnGotoClicked	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnGotoClicked()$/;"	f	class:WaypointDetailsWidget
OnImagePaint	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnImagePaint(gcc_unused Canvas &canvas,$/;"	f	class:WaypointDetailsWidget
OnItemHelp	Dialogs/ComboPicker.cpp	/^OnItemHelp(unsigned i)$/;"	f	file:
OnKeyCheck	Form/Button.cpp	/^Button::OnKeyCheck(unsigned key_code) const$/;"	f	class:Button
OnKeyCheck	Form/CheckBox.cpp	/^CheckBoxControl::OnKeyCheck(unsigned key_code) const$/;"	f	class:CheckBoxControl
OnKeyCheck	Form/DigitEntry.cpp	/^DigitEntry::OnKeyCheck(unsigned key_code) const$/;"	f	class:DigitEntry
OnKeyCheck	Form/Edit.cpp	/^WndProperty::OnKeyCheck(unsigned key_code) const$/;"	f	class:WndProperty
OnKeyCheck	Form/List.cpp	/^ListControl::OnKeyCheck(unsigned key_code) const$/;"	f	class:ListControl
OnKeyCheck	Form/TabDisplay.cpp	/^TabDisplay::OnKeyCheck(unsigned key_code) const$/;"	f	class:TabDisplay
OnKeyCheck	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnKeyCheck(unsigned key_code) const$/;"	f	class:TabMenuDisplay
OnKeyCheck	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnKeyCheck(unsigned key_code) const$/;"	f	class:LargeTextWindow
OnKeyCheck	Screen/Window.cpp	/^Window::OnKeyCheck(unsigned key_code) const$/;"	f	class:Window
OnKeyDown	Form/Button.cpp	/^Button::OnKeyDown(unsigned key_code)$/;"	f	class:Button
OnKeyDown	Form/CheckBox.cpp	/^CheckBoxControl::OnKeyDown(unsigned key_code)$/;"	f	class:CheckBoxControl
OnKeyDown	Form/DigitEntry.cpp	/^DigitEntry::OnKeyDown(unsigned key_code)$/;"	f	class:DigitEntry
OnKeyDown	Form/Edit.cpp	/^WndProperty::OnKeyDown(unsigned key_code)$/;"	f	class:WndProperty
OnKeyDown	Form/List.cpp	/^ListControl::OnKeyDown(unsigned key_code)$/;"	f	class:ListControl
OnKeyDown	Form/TabDisplay.cpp	/^TabDisplay::OnKeyDown(unsigned key_code)$/;"	f	class:TabDisplay
OnKeyDown	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnKeyDown(unsigned key_code)$/;"	f	class:TabMenuDisplay
OnKeyDown	Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnKeyDown(unsigned key_code)$/;"	f	class:BigThermalAssistantWindow
OnKeyDown	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnKeyDown(unsigned key_code)$/;"	f	class:FlarmTrafficControl
OnKeyDown	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnKeyDown(unsigned key_code)$/;"	f	class:InfoBoxWindow
OnKeyDown	MainWindow.cpp	/^MainWindow::OnKeyDown(unsigned key_code)$/;"	f	class:MainWindow
OnKeyDown	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnKeyDown(unsigned key_code)$/;"	f	class:GlueMapWindow
OnKeyDown	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnKeyDown(unsigned key_code)$/;"	f	class:LargeTextWindow
OnKeyDown	Screen/Window.cpp	/^Window::OnKeyDown(unsigned key_code)$/;"	f	class:Window
OnKeyUp	Screen/Window.cpp	/^Window::OnKeyUp(unsigned key_code)$/;"	f	class:Window
OnKillFocus	Form/Button.cpp	/^Button::OnKillFocus()$/;"	f	class:Button
OnKillFocus	Form/CheckBox.cpp	/^CheckBoxControl::OnKillFocus()$/;"	f	class:CheckBoxControl
OnKillFocus	Form/DigitEntry.cpp	/^DigitEntry::OnKillFocus()$/;"	f	class:DigitEntry
OnKillFocus	Form/Edit.cpp	/^WndProperty::OnKillFocus()$/;"	f	class:WndProperty
OnKillFocus	Form/List.cpp	/^ListControl::OnKillFocus()$/;"	f	class:ListControl
OnKillFocus	Form/TabDisplay.cpp	/^TabDisplay::OnKillFocus()$/;"	f	class:TabDisplay
OnKillFocus	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnKillFocus()$/;"	f	class:TabMenuDisplay
OnKillFocus	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnKillFocus()$/;"	f	class:InfoBoxWindow
OnKillFocus	Screen/Window.cpp	/^Window::OnKillFocus()$/;"	f	class:Window
OnLanding	Computer/GlideComputer.cpp	/^GlideComputer::OnLanding()$/;"	f	class:GlideComputer
OnMagnifyClicked	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnMagnifyClicked()$/;"	f	class:WaypointDetailsWidget
OnMakeFinish	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::OnMakeFinish()$/;"	f	class:TaskEditPanel
OnManualAdvance	Replay/TaskAutoPilot.hpp	/^  virtual void OnManualAdvance() {};$/;"	f	class:AbstractAutoPilot
OnModeChange	Replay/TaskAutoPilot.hpp	/^  virtual void OnModeChange() {};$/;"	f	class:AbstractAutoPilot
OnModified	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::OnModified(DataField &df)$/;"	f	class:AirspaceListWidget
OnModified	Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::OnModified(DataField &df)$/;"	f	class:DeviceEditWidget
OnModified	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^VegaDemoWidget::OnModified(DataField &df)$/;"	f	class:VegaDemoWidget
OnModified	Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::OnModified(DataField &df)$/;"	f	class:PlaneEditWidget
OnModified	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::OnModified(DataField &df)$/;"	f	class:PlanePolarWidget
OnModified	Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnModified(DataField &_df)$/;"	f	class:ReplayControlWidget
OnModified	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::OnModified(DataField &df)$/;"	f	class:AirspaceConfigPanel
OnModified	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CloudConfigPanel::OnModified(DataField &df)$/;"	f	class:CloudConfigPanel
OnModified	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^GaugesConfigPanel::OnModified(DataField &df)$/;"	f	class:GaugesConfigPanel
OnModified	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^MapDisplayConfigPanel::OnModified(DataField &df)$/;"	f	class:MapDisplayConfigPanel
OnModified	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageLayoutEditWidget::OnModified(DataField &df)$/;"	f	class:PageLayoutEditWidget
OnModified	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageListWidget::OnModified(const PageLayout &new_value)$/;"	f	class:PageListWidget
OnModified	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::OnModified(DataField &df)$/;"	f	class:RouteConfigPanel
OnModified	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^ScoringConfigPanel::OnModified(DataField &df)$/;"	f	class:ScoringConfigPanel
OnModified	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^SymbolsConfigPanel::OnModified(DataField &df)$/;"	f	class:SymbolsConfigPanel
OnModified	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::OnModified(DataField &df)$/;"	f	class:TaskDefaultsConfigPanel
OnModified	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::OnModified(DataField &df)$/;"	f	class:TerrainDisplayConfigPanel
OnModified	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^TimeConfigPanel::OnModified(DataField &df)$/;"	f	class:TimeConfigPanel
OnModified	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::OnModified(DataField &df)$/;"	f	class:TrackingConfigPanel
OnModified	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::OnModified(DataField &df)$/;"	f	class:UnitsConfigPanel
OnModified	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^WaypointDisplayConfigPanel::OnModified(DataField &df)$/;"	f	class:WaypointDisplayConfigPanel
OnModified	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::OnModified(DataField &df)$/;"	f	class:WindSettingsPanel
OnModified	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::OnModified(DataField &df)$/;"	f	class:FlightSetupPanel
OnModified	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^TaskStatusPanel::OnModified(DataField &df)$/;"	f	class:TaskStatusPanel
OnModified	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::OnModified(DataField &df)$/;"	f	class:TaskPropertiesPanel
OnModified	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnModified(ObservationZoneEditWidget &widget)$/;"	f	class:TaskPointWidget
OnModified	Dialogs/Task/Widgets/ObservationZoneEditWidget.cpp	/^ObservationZoneEditWidget::OnModified(DataField &df)$/;"	f	class:ObservationZoneEditWidget
OnModified	Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::OnModified(DataField &df)$/;"	f	class:WaypointListWidget
OnModified	InfoBoxes/Panel/AltitudeSetup.cpp	/^AltitudeSetupPanel::OnModified(DataField &_df)$/;"	f	class:AltitudeSetupPanel
OnMoreClicked	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::OnMoreClicked()$/;"	f	class:TaskListPanel
OnMouseDouble	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxPreview::OnMouseDouble(PixelPoint p)$/;"	f	class:InfoBoxPreview
OnMouseDouble	Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:BigThermalAssistantWindow
OnMouseDouble	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseDouble(PixelPoint p)$/;"	f	class:FlarmTrafficControl
OnMouseDouble	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:InfoBoxWindow
OnMouseDouble	MainWindow.cpp	/^MainWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:MainWindow
OnMouseDouble	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:GlueMapWindow
OnMouseDouble	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseDouble(PixelPoint p)$/;"	f	class:ContainerWindow
OnMouseDouble	Screen/Window.cpp	/^Window::OnMouseDouble(PixelPoint p)$/;"	f	class:Window
OnMouseDown	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxPreview::OnMouseDown(PixelPoint p)$/;"	f	class:InfoBoxPreview
OnMouseDown	Dialogs/dlgAnalysis.cpp	/^ChartControl::OnMouseDown(PixelPoint p)$/;"	f	class:ChartControl
OnMouseDown	Form/Button.cpp	/^Button::OnMouseDown(PixelPoint p)$/;"	f	class:Button
OnMouseDown	Form/CheckBox.cpp	/^CheckBoxControl::OnMouseDown(PixelPoint p)$/;"	f	class:CheckBoxControl
OnMouseDown	Form/DigitEntry.cpp	/^DigitEntry::OnMouseDown(PixelPoint p)$/;"	f	class:DigitEntry
OnMouseDown	Form/Edit.cpp	/^WndProperty::OnMouseDown(PixelPoint p)$/;"	f	class:WndProperty
OnMouseDown	Form/Form.cpp	/^WndForm::OnMouseDown(PixelPoint p)$/;"	f	class:WndForm
OnMouseDown	Form/List.cpp	/^ListControl::OnMouseDown(PixelPoint Pos)$/;"	f	class:ListControl
OnMouseDown	Form/TabDisplay.cpp	/^TabDisplay::OnMouseDown(PixelPoint p)$/;"	f	class:TabDisplay
OnMouseDown	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnMouseDown(PixelPoint Pos)$/;"	f	class:TabMenuDisplay
OnMouseDown	Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseDown(PixelPoint p)$/;"	f	class:BigThermalAssistantWindow
OnMouseDown	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseDown(PixelPoint p)$/;"	f	class:FlarmTrafficControl
OnMouseDown	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnMouseDown(PixelPoint p)$/;"	f	class:SmallTrafficWindow
OnMouseDown	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnMouseDown(PixelPoint p)$/;"	f	class:GaugeThermalAssistantWindow
OnMouseDown	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseDown(PixelPoint p)$/;"	f	class:InfoBoxWindow
OnMouseDown	MainWindow.cpp	/^MainWindow::OnMouseDown(PixelPoint p)$/;"	f	class:MainWindow
OnMouseDown	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseDown(PixelPoint p)$/;"	f	class:GlueMapWindow
OnMouseDown	MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnMouseDown(PixelPoint p)$/;"	f	class:TargetMapWindow
OnMouseDown	PopupMessage.cpp	/^PopupMessage::OnMouseDown(PixelPoint p)$/;"	f	class:PopupMessage
OnMouseDown	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseDown(PixelPoint p)$/;"	f	class:ContainerWindow
OnMouseDown	Screen/Window.cpp	/^Window::OnMouseDown(PixelPoint p)$/;"	f	class:Window
OnMouseGesture	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseGesture(const TCHAR* gesture)$/;"	f	class:FlarmTrafficControl
OnMouseGesture	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseGesture(const TCHAR* gesture)$/;"	f	class:GlueMapWindow
OnMouseMove	Dialogs/dlgAnalysis.cpp	/^ChartControl::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:ChartControl
OnMouseMove	Form/Button.cpp	/^Button::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:Button
OnMouseMove	Form/CheckBox.cpp	/^CheckBoxControl::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:CheckBoxControl
OnMouseMove	Form/Edit.cpp	/^WndProperty::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:WndProperty
OnMouseMove	Form/Form.cpp	/^WndForm::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:WndForm
OnMouseMove	Form/List.cpp	/^ListControl::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:ListControl
OnMouseMove	Form/TabDisplay.cpp	/^TabDisplay::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:TabDisplay
OnMouseMove	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:TabMenuDisplay
OnMouseMove	Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseMove(PixelPoint p, gcc_unused unsigned keys)$/;"	f	class:BigThermalAssistantWindow
OnMouseMove	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseMove(PixelPoint p, gcc_unused unsigned keys)$/;"	f	class:FlarmTrafficControl
OnMouseMove	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:SmallTrafficWindow
OnMouseMove	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:GaugeThermalAssistantWindow
OnMouseMove	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:InfoBoxWindow
OnMouseMove	MainWindow.cpp	/^MainWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:MainWindow
OnMouseMove	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:GlueMapWindow
OnMouseMove	MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:TargetMapWindow
OnMouseMove	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:ContainerWindow
OnMouseMove	Screen/Window.cpp	/^Window::OnMouseMove(PixelPoint p, unsigned keys)$/;"	f	class:Window
OnMouseUp	Dialogs/dlgAnalysis.cpp	/^ChartControl::OnMouseUp(PixelPoint p)$/;"	f	class:ChartControl
OnMouseUp	Form/Button.cpp	/^Button::OnMouseUp(PixelPoint p)$/;"	f	class:Button
OnMouseUp	Form/CheckBox.cpp	/^CheckBoxControl::OnMouseUp(PixelPoint p)$/;"	f	class:CheckBoxControl
OnMouseUp	Form/Edit.cpp	/^WndProperty::OnMouseUp(PixelPoint p)$/;"	f	class:WndProperty
OnMouseUp	Form/Form.cpp	/^WndForm::OnMouseUp(PixelPoint p)$/;"	f	class:WndForm
OnMouseUp	Form/List.cpp	/^ListControl::OnMouseUp(PixelPoint p)$/;"	f	class:ListControl
OnMouseUp	Form/TabDisplay.cpp	/^TabDisplay::OnMouseUp(PixelPoint p)$/;"	f	class:TabDisplay
OnMouseUp	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnMouseUp(PixelPoint Pos)$/;"	f	class:TabMenuDisplay
OnMouseUp	Gauge/BigThermalAssistantWindow.cpp	/^BigThermalAssistantWindow::OnMouseUp(PixelPoint p)$/;"	f	class:BigThermalAssistantWindow
OnMouseUp	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnMouseUp(PixelPoint p)$/;"	f	class:FlarmTrafficControl
OnMouseUp	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnMouseUp(PixelPoint p)$/;"	f	class:SmallTrafficWindow
OnMouseUp	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnMouseUp(PixelPoint p)$/;"	f	class:GaugeThermalAssistantWindow
OnMouseUp	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnMouseUp(PixelPoint p)$/;"	f	class:InfoBoxWindow
OnMouseUp	MainWindow.cpp	/^MainWindow::OnMouseUp(PixelPoint p)$/;"	f	class:MainWindow
OnMouseUp	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseUp(PixelPoint p)$/;"	f	class:GlueMapWindow
OnMouseUp	MapWindow/TargetMapWindowEvents.cpp	/^TargetMapWindow::OnMouseUp(PixelPoint p)$/;"	f	class:TargetMapWindow
OnMouseUp	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseUp(PixelPoint p)$/;"	f	class:ContainerWindow
OnMouseUp	Screen/Window.cpp	/^Window::OnMouseUp(PixelPoint p)$/;"	f	class:Window
OnMouseWheel	Form/List.cpp	/^ListControl::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:ListControl
OnMouseWheel	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:GlueMapWindow
OnMouseWheel	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:ContainerWindow
OnMouseWheel	Screen/Window.cpp	/^Window::OnMouseWheel(PixelPoint p, int delta)$/;"	f	class:Window
OnMultiTouchDown	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnMultiTouchDown()$/;"	f	class:GlueMapWindow
OnMultiTouchDown	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMultiTouchDown()$/;"	f	class:ContainerWindow
OnMultiTouchDown	Screen/Window.cpp	/^Window::OnMultiTouchDown()$/;"	f	class:Window
OnMultiTouchUp	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnMultiTouchUp()$/;"	f	class:ContainerWindow
OnMultiTouchUp	Screen/Window.cpp	/^Window::OnMultiTouchUp()$/;"	f	class:Window
OnNameClicked	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnNameClicked()$/;"	f	class:TargetWidget
OnNewTaskClicked	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::OnNewTaskClicked()$/;"	f	class:TaskActionsPanel
OnNextClicked	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnNextClicked()$/;"	f	class:TargetWidget
OnNextClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnNextClicked()$/;"	f	class:TaskPointWidget
OnNextClicked	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void OnNextClicked() {$/;"	f	class:final
OnNotification	Job/Thread.cpp	/^JobThread::OnNotification()$/;"	f	class:JobThread
OnNotification	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::OnNotification()$/;"	f	class:ThreadedOperationEnvironment
OnOffset	InfoBoxes/Panel/AltitudeSimulator.cpp	/^AltitudeSimulatorOffsetButtons::OnOffset(const double step)$/;"	f	class:AltitudeSimulatorOffsetButtons
OnOffset	InfoBoxes/Panel/MacCreadyEdit.cpp	/^MacCreadyOffsetButtons::OnOffset(double offset)$/;"	f	class:MacCreadyOffsetButtons
OnOffset	InfoBoxes/Panel/RadioEdit.cpp	/^RadioOffsetButtons::OnOffset(double offset)$/;"	f	class:RadioOffsetButtons
OnOptimized	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnOptimized()$/;"	f	class:TargetWidget
OnOptionalStartsClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnOptionalStartsClicked()$/;"	f	class:TaskPointWidget
OnPageFlipped	Dialogs/Settings/dlgConfiguration.cpp	/^OnPageFlipped(WidgetDialog &dialog, TabMenuDisplay &menu)$/;"	f	file:
OnPageFlipped	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::OnPageFlipped()$/;"	f	class:TaskManagerDialog
OnPageFlipped	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnPageFlipped()$/;"	f	class:TabMenuDisplay
OnPageFlipped	Widget/PagerWidget.cpp	/^PagerWidget::OnPageFlipped()$/;"	f	class:PagerWidget
OnPageFlipped	Widget/TabWidget.cpp	/^TabWidget::OnPageFlipped()$/;"	f	class:TabWidget
OnPaint	Dialogs/KnobTextEntry.cpp	/^KnobTextEntryWindow::OnPaint(Canvas &canvas)$/;"	f	class:KnobTextEntryWindow
OnPaint	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainPreviewWindow::OnPaint(Canvas &canvas)$/;"	f	class:TerrainPreviewWindow
OnPaint	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxPreview::OnPaint(Canvas &canvas)$/;"	f	class:InfoBoxPreview
OnPaint	Dialogs/SimulatorPromptWindow.cpp	/^SimulatorPromptWindow::OnPaint(Canvas &canvas)$/;"	f	class:SimulatorPromptWindow
OnPaint	Dialogs/dlgAnalysis.cpp	/^ChartControl::OnPaint(Canvas &canvas)$/;"	f	class:ChartControl
OnPaint	Dialogs/dlgCredits.cpp	/^LogoPageWindow::OnPaint(Canvas &canvas)$/;"	f	class:LogoPageWindow
OnPaint	Form/Button.cpp	/^Button::OnPaint(Canvas &canvas)$/;"	f	class:Button
OnPaint	Form/CheckBox.cpp	/^CheckBoxControl::OnPaint(Canvas &canvas)$/;"	f	class:CheckBoxControl
OnPaint	Form/DigitEntry.cpp	/^DigitEntry::OnPaint(Canvas &canvas)$/;"	f	class:DigitEntry
OnPaint	Form/Draw.cpp	/^WndOwnerDrawFrame::OnPaint(Canvas &canvas)$/;"	f	class:WndOwnerDrawFrame
OnPaint	Form/Edit.cpp	/^WndProperty::OnPaint(Canvas &canvas)$/;"	f	class:WndProperty
OnPaint	Form/Form.cpp	/^WndForm::OnPaint(Canvas &canvas)$/;"	f	class:WndForm
OnPaint	Form/Frame.cpp	/^WndFrame::OnPaint(Canvas &canvas)$/;"	f	class:WndFrame
OnPaint	Form/HLine.cpp	/^HLine::OnPaint(Canvas &canvas)$/;"	f	class:HLine
OnPaint	Form/List.cpp	/^ListControl::OnPaint(Canvas &canvas)$/;"	f	class:ListControl
OnPaint	Form/List.cpp	/^ListControl::OnPaint(Canvas &canvas, const PixelRect &dirty)$/;"	f	class:ListControl
OnPaint	Form/TabDisplay.cpp	/^TabDisplay::OnPaint(Canvas &canvas)$/;"	f	class:TabDisplay
OnPaint	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnPaint(Canvas &canvas)$/;"	f	class:TabMenuDisplay
OnPaint	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OnPaint(Canvas &canvas)$/;"	f	class:FlarmTrafficControl
OnPaint	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::OnPaint(Canvas &canvas)$/;"	f	class:FlarmTrafficWindow
OnPaint	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::OnPaint(Canvas &canvas)$/;"	f	class:SmallTrafficWindow
OnPaint	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistantWindow::OnPaint(Canvas &canvas)$/;"	f	class:GaugeThermalAssistantWindow
OnPaint	MainWindow.cpp	/^MainWindow::OnPaint(Canvas &canvas)$/;"	f	class:MainWindow
OnPaint	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnPaint(Canvas &canvas)$/;"	f	class:GlueMapWindow
OnPaint	MapWindow/MapWindowEvents.cpp	/^MapWindow::OnPaint(Canvas &canvas)$/;"	f	class:MapWindow
OnPaint	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnPaint(Canvas &canvas)$/;"	f	class:TargetMapWindow
OnPaint	PopupMessage.cpp	/^PopupMessage::OnPaint(Canvas &canvas)$/;"	f	class:PopupMessage
OnPaint	ProgressWindow.cpp	/^ProgressWindow::OnPaint(Canvas &canvas)$/;"	f	class:ProgressWindow
OnPaint	Screen/BufferWindow.cpp	/^BufferWindow::OnPaint(Canvas &canvas)$/;"	f	class:BufferWindow
OnPaint	Screen/ContainerWindow.hpp	/^  virtual void OnPaint(gcc_unused Canvas &canvas) {}$/;"	f	class:ContainerWindow
OnPaint	Screen/Custom/ContainerWindow.cpp	/^ContainerWindow::OnPaint(Canvas &canvas)$/;"	f	class:ContainerWindow
OnPaint	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnPaint(Canvas &canvas)$/;"	f	class:LargeTextWindow
OnPaint	Screen/DoubleBufferWindow.cpp	/^DoubleBufferWindow::OnPaint(Canvas &canvas)$/;"	f	class:DoubleBufferWindow
OnPaint	Screen/FB/TopWindow.cpp	/^TopWindow::OnPaint(Canvas &canvas)$/;"	f	class:TopWindow
OnPaint	Screen/PaintWindow.hpp	/^  virtual void OnPaint(Canvas &canvas, gcc_unused const PixelRect &dirty) {$/;"	f	class:PaintWindow
OnPaint	Screen/ProgressBar.cpp	/^ProgressBar::OnPaint(Canvas &canvas)$/;"	f	class:ProgressBar
OnPaint	Screen/SolidContainerWindow.cpp	/^SolidContainerWindow::OnPaint(Canvas &canvas)$/;"	f	class:SolidContainerWindow
OnPaint	Screen/TerminalWindow.cpp	/^TerminalWindow::OnPaint(Canvas &canvas)$/;"	f	class:TerminalWindow
OnPaint	Screen/TerminalWindow.cpp	/^TerminalWindow::OnPaint(Canvas &canvas, const PixelRect &p_dirty)$/;"	f	class:TerminalWindow
OnPaint	Widget/ViewImageWidget.cpp	/^ViewImageWindow::OnPaint(Canvas &canvas)$/;"	f	class:ViewImageWindow
OnPaintBuffer	CrossSection/CrossSectionWindow.cpp	/^CrossSectionWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:CrossSectionWindow
OnPaintBuffer	Gauge/GaugeVario.cpp	/^GaugeVario::OnPaintBuffer(Canvas &canvas)$/;"	f	class:GaugeVario
OnPaintBuffer	Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:ThermalAssistantWindow
OnPaintBuffer	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:InfoBoxWindow
OnPaintBuffer	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:GlueMapWindow
OnPaintBuffer	MapWindow/MapWindow.cpp	/^MapWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:MapWindow
OnPaintBuffer	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnPaintBuffer(Canvas &canvas)$/;"	f	class:TargetMapWindow
OnPaste	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::OnPaste()$/;"	f	class:InfoBoxesConfigWidget
OnPing	Tracking/SkyLines/Server.cpp	/^Server::OnPing(const Client &client, unsigned id)$/;"	f	class:SkyLinesTracking::Server
OnPrevClicked	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnPrevClicked()$/;"	f	class:TargetWidget
OnPrevClicked	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void OnPrevClicked() {$/;"	f	class:final
OnPreviousClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnPreviousClicked()$/;"	f	class:TaskPointWidget
OnProjectionModified	MapWindow/GlueMapWindow.hpp	/^  void OnProjectionModified() {}$/;"	f	class:GlueMapWindow
OnRadialModified	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnRadialModified(double new_value)$/;"	f	class:TargetWidget
OnRangeModified	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::OnRangeModified(double new_value)$/;"	f	class:TargetWidget
OnRead	Device/Port/TCPClientPort.cpp	/^TCPClientPort::OnRead(const boost::system::error_code &ec, size_t nbytes)$/;"	f	class:TCPClientPort
OnRead	Device/Port/TCPPort.cpp	/^TCPPort::OnRead(const boost::system::error_code &ec, size_t nbytes)$/;"	f	class:TCPPort
OnRead	Device/Port/UDPPort.cpp	/^UDPPort::OnRead(const boost::system::error_code &ec, size_t nbytes)$/;"	f	class:UDPPort
OnReadEvent	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::OnReadEvent(boost::asio::posix::stream_descriptor &fd,$/;"	f	class:ALSAPCMPlayer
OnReadReady	Device/Port/TTYPort.cpp	/^TTYPort::OnReadReady(const boost::system::error_code &ec)$/;"	f	class:TTYPort
OnReadReady	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::OnReadReady(const boost::system::error_code &ec)$/;"	f	class:LibInputHandler
OnReadReady	Event/Poll/Linux/Input.cpp	/^LinuxInputDevice::OnReadReady(const boost::system::error_code &ec)$/;"	f	class:LinuxInputDevice
OnReadReady	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::OnReadReady(const boost::system::error_code &ec)$/;"	f	class:WaylandEventQueue
OnReadReady	Event/Poll/X11Queue.cpp	/^X11EventQueue::OnReadReady(const boost::system::error_code &ec)$/;"	f	class:X11EventQueue
OnReadReady	IO/Async/SignalListener.cpp	/^SignalListener::OnReadReady(const boost::system::error_code &ec)$/;"	f	class:SignalListener
OnReceive	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnReceive(const boost::system::error_code &ec,$/;"	f	class:SkyLinesTracking::Client
OnReceive	Tracking/SkyLines/Server.cpp	/^Server::OnReceive(const boost::system::error_code &ec, size_t size)$/;"	f	class:SkyLinesTracking::Server
OnRelocateClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnRelocateClicked()$/;"	f	class:TaskPointWidget
OnRemoveClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnRemoveClicked()$/;"	f	class:TaskPointWidget
OnResize	Dialogs/SimulatorPromptWindow.cpp	/^SimulatorPromptWindow::OnResize(PixelSize new_size)$/;"	f	class:SimulatorPromptWindow
OnResize	Dialogs/WidgetDialog.cpp	/^WidgetDialog::OnResize(PixelSize new_size)$/;"	f	class:WidgetDialog
OnResize	Form/Edit.cpp	/^WndProperty::OnResize(PixelSize new_size)$/;"	f	class:WndProperty
OnResize	Form/Form.cpp	/^WndForm::OnResize(PixelSize new_size)$/;"	f	class:WndForm
OnResize	Form/GridView.cpp	/^GridView::OnResize(PixelSize new_size)$/;"	f	class:GridView
OnResize	Form/List.cpp	/^ListControl::OnResize(PixelSize new_size)$/;"	f	class:ListControl
OnResize	Form/TabDisplay.cpp	/^TabDisplay::OnResize(PixelSize new_size)$/;"	f	class:TabDisplay
OnResize	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnResize(PixelSize new_size)$/;"	f	class:TabMenuDisplay
OnResize	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::OnResize(PixelSize new_size)$/;"	f	class:FlarmTrafficWindow
OnResize	Gauge/GaugeVario.cpp	/^GaugeVario::OnResize(PixelSize new_size)$/;"	f	class:GaugeVario
OnResize	Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::OnResize(PixelSize new_size)$/;"	f	class:ThermalAssistantWindow
OnResize	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnResize(PixelSize new_size)$/;"	f	class:InfoBoxWindow
OnResize	MainWindow.cpp	/^MainWindow::OnResize(PixelSize new_size)$/;"	f	class:MainWindow
OnResize	MapWindow/MapWindowEvents.cpp	/^MapWindow::OnResize(PixelSize new_size)$/;"	f	class:MapWindow
OnResize	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::OnResize(PixelSize new_size)$/;"	f	class:TargetMapWindow
OnResize	Menu/ButtonLabel.cpp	/^ButtonLabel::OnResize(const PixelRect &rc)$/;"	f	class:ButtonLabel
OnResize	Menu/MenuBar.cpp	/^MenuBar::OnResize(const PixelRect &rc)$/;"	f	class:MenuBar
OnResize	ProgressWindow.cpp	/^ProgressWindow::OnResize(PixelSize new_size)$/;"	f	class:ProgressWindow
OnResize	Screen/Android/TopWindow.cpp	/^TopWindow::OnResize(PixelSize new_size)$/;"	f	class:TopWindow
OnResize	Screen/BufferWindow.cpp	/^BufferWindow::OnResize(PixelSize new_size)$/;"	f	class:BufferWindow
OnResize	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::OnResize(PixelSize new_size)$/;"	f	class:LargeTextWindow
OnResize	Screen/FB/TopWindow.cpp	/^TopWindow::OnResize(PixelSize new_size)$/;"	f	class:TopWindow
OnResize	Screen/SDL/TopCanvas.cpp	/^TopCanvas::OnResize(PixelSize new_size)$/;"	f	class:TopCanvas
OnResize	Screen/SDL/TopWindow.cpp	/^TopWindow::OnResize(PixelSize new_size)$/;"	f	class:TopWindow
OnResize	Screen/SingleWindow.cpp	/^SingleWindow::OnResize(PixelSize new_size)$/;"	f	class:SingleWindow
OnResize	Screen/TerminalWindow.cpp	/^TerminalWindow::OnResize(PixelSize new_size)$/;"	f	class:TerminalWindow
OnResize	Screen/Window.cpp	/^Window::OnResize(PixelSize new_size)$/;"	f	class:Window
OnResize	Widget/DockWindow.cpp	/^DockWindow::OnResize(PixelSize new_size)$/;"	f	class:DockWindow
OnResize	Widget/KeyboardWidget.cpp	/^KeyboardWidget::OnResize(const PixelRect &rc)$/;"	f	class:KeyboardWidget
OnResolved	Device/Port/TCPClientPort.cpp	/^TCPClientPort::OnResolved(const boost::system::error_code &ec,$/;"	f	class:TCPClientPort
OnResolved	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnResolved(const boost::system::error_code &ec,$/;"	f	class:SkyLinesTracking::Client
OnSave	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^VegaConfigurationExtraButtons::OnSave()$/;"	f	class:VegaConfigurationExtraButtons
OnSendError	Tracking/SkyLines/Server.hpp	/^  virtual void OnSendError(const boost::asio::ip::udp::endpoint &endpoint,$/;"	f	class:SkyLinesTracking::Server
OnSensorUpdate	Device/Descriptor.cpp	/^DeviceDescriptor::OnSensorUpdate(const MoreData &basic)$/;"	f	class:DeviceDescriptor
OnSetFocus	Form/Button.cpp	/^Button::OnSetFocus()$/;"	f	class:Button
OnSetFocus	Form/CheckBox.cpp	/^CheckBoxControl::OnSetFocus()$/;"	f	class:CheckBoxControl
OnSetFocus	Form/DigitEntry.cpp	/^DigitEntry::OnSetFocus()$/;"	f	class:DigitEntry
OnSetFocus	Form/Edit.cpp	/^WndProperty::OnSetFocus()$/;"	f	class:WndProperty
OnSetFocus	Form/List.cpp	/^ListControl::OnSetFocus()$/;"	f	class:ListControl
OnSetFocus	Form/TabDisplay.cpp	/^TabDisplay::OnSetFocus()$/;"	f	class:TabDisplay
OnSetFocus	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::OnSetFocus()$/;"	f	class:TabMenuDisplay
OnSetFocus	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::OnSetFocus()$/;"	f	class:InfoBoxWindow
OnSetFocus	MainWindow.cpp	/^MainWindow::OnSetFocus()$/;"	f	class:MainWindow
OnSetFocus	Screen/Window.cpp	/^Window::OnSetFocus()$/;"	f	class:Window
OnSetWaypointClicked	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::OnSetWaypointClicked()$/;"	f	class:TeamCodeWidget
OnShiftClicked	Widget/KeyboardWidget.cpp	/^KeyboardWidget::OnShiftClicked()$/;"	f	class:KeyboardWidget
OnShrinkClicked	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::OnShrinkClicked()$/;"	f	class:WaypointDetailsWidget
OnSignal	Event/Poll/Queue.cpp	/^EventQueue::OnSignal(int signo)$/;"	f	class:EventQueue
OnSkyLinesError	Tracking/TrackingGlue.cpp	/^TrackingGlue::OnSkyLinesError(std::exception_ptr e)$/;"	f	class:TrackingGlue
OnSkyLinesReady	Tracking/SkyLines/Handler.hpp	/^  virtual void OnSkyLinesReady() {}$/;"	f	class:SkyLinesTracking::Handler
OnSolve	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::OnSolve(const AGeoPoint &origin, const AGeoPoint &destination)$/;"	f	class:AirspaceRoute
OnSolve	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::OnSolve(const AGeoPoint &origin, const AGeoPoint &destination)$/;"	f	class:RoutePlanner
OnStartClicked	Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnStartClicked()$/;"	f	class:ReplayControlWidget
OnStartTask	Computer/GlideComputer.cpp	/^GlideComputer::OnStartTask()$/;"	f	class:GlideComputer
OnStopClicked	Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::OnStopClicked()$/;"	f	class:ReplayControlWidget
OnSysTicker	Device/Descriptor.cpp	/^DeviceDescriptor::OnSysTicker()$/;"	f	class:DeviceDescriptor
OnSysTicker	Device/Driver.cpp	/^AbstractDevice::OnSysTicker()$/;"	f	class:AbstractDevice
OnSysTicker	Device/Driver/LX/Mode.cpp	/^LXDevice::OnSysTicker()$/;"	f	class:LXDevice
OnSysTicker	Device/Driver/LXERA/Mode.cpp	/^LXEraDevice::OnSysTicker()$/;"	f	class:LXEraDevice
OnTakeoff	Computer/GlideComputer.cpp	/^GlideComputer::OnTakeoff()$/;"	f	class:GlideComputer
OnTaskModified	Dialogs/Task/TargetDialog.cpp	/^TargetDialogMapWindow::OnTaskModified()$/;"	f	class:TargetDialogMapWindow
OnTaskModified	MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::OnTaskModified()$/;"	f	class:TargetMapWindow
OnTaskTypeChange	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::OnTaskTypeChange(DataFieldEnum &df)$/;"	f	class:TaskPropertiesPanel
OnTeamClicked	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::OnTeamClicked()$/;"	f	class:FlarmTrafficDetailsWidget
OnThermal	Tracking/SkyLines/Handler.hpp	/^  virtual void OnThermal(unsigned time_of_day_ms,$/;"	f	class:SkyLinesTracking::Handler
OnThermal	Tracking/TrackingGlue.cpp	/^TrackingGlue::OnThermal(unsigned time_of_day_ms,$/;"	f	class:TrackingGlue
OnThermalReceived	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnThermalReceived(const ThermalResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnThermalRequest	Cloud/Main.cpp	/^CloudServer::OnThermalRequest(const Client &c)$/;"	f	class:CloudServer
OnThermalRequest	Tracking/SkyLines/Server.hpp	/^  virtual void OnThermalRequest(const Client &client) {}$/;"	f	class:SkyLinesTracking::Server
OnThermalSubmit	Cloud/Main.cpp	/^CloudServer::OnThermalSubmit(const Client &c,$/;"	f	class:CloudServer
OnThermalSubmit	Tracking/SkyLines/Server.hpp	/^  virtual void OnThermalSubmit(const Client &client,$/;"	f	class:SkyLinesTracking::Server
OnTimer	Dialogs/FileManager.cpp	/^ManagedFileListWidget::OnTimer()$/;"	f	class:ManagedFileListWidget
OnTimer	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::OnTimer()$/;"	f	class:FlightSetupPanel
OnTimer	RateLimiter.cpp	/^RateLimiter::OnTimer()$/;"	f	class:RateLimiter
OnTimer	Replay/Replay.cpp	/^Replay::OnTimer()$/;"	f	class:Replay
OnTimer	Tracking/TrackingGlue.cpp	/^TrackingGlue::OnTimer(const MoreData &basic, const DerivedInfo &calculated)$/;"	f	class:TrackingGlue
OnTraffic	Tracking/SkyLines/Handler.hpp	/^  virtual void OnTraffic(uint32_t pilot_id, unsigned time_of_day_ms,$/;"	f	class:SkyLinesTracking::Handler
OnTraffic	Tracking/TrackingGlue.cpp	/^TrackingGlue::OnTraffic(uint32_t pilot_id, unsigned time_of_day_ms,$/;"	f	class:TrackingGlue
OnTrafficReceived	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnTrafficReceived(const TrafficResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnTrafficRequest	Cloud/Main.cpp	/^CloudServer::OnTrafficRequest(const Client &c, bool near)$/;"	f	class:CloudServer
OnTrafficRequest	Tracking/SkyLines/Server.hpp	/^  virtual void OnTrafficRequest(const Client &client, bool near) {}$/;"	f	class:SkyLinesTracking::Server
OnTransitionEnter	Computer/GlideComputer.cpp	/^GlideComputer::OnTransitionEnter()$/;"	f	class:GlideComputer
OnTypeClicked	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::OnTypeClicked()$/;"	f	class:TaskPointWidget
OnUISettingsUpdate	Blackboard/BlackboardListener.cpp	/^NullBlackboardListener::OnUISettingsUpdate(gcc_unused const UISettings &settings)$/;"	f	class:NullBlackboardListener
OnUISettingsUpdate	Blackboard/ProxyBlackboardListener.cpp	/^ProxyBlackboardListener::OnUISettingsUpdate(const UISettings &settings)$/;"	f	class:ProxyBlackboardListener
OnUser	Event/Notify.cpp	/^Notify::OnUser(unsigned id)$/;"	f	class:Notify
OnUser	Screen/GDI/Window.cpp	/^Window::OnUser(unsigned id)$/;"	f	class:Window
OnUserLevel	Dialogs/Settings/dlgConfiguration.cpp	/^OnUserLevel(CheckBoxControl &control)$/;"	f	file:
OnUserName	Tracking/SkyLines/Handler.hpp	/^  virtual void OnUserName(uint32_t user_id, const TCHAR *name) {}$/;"	f	class:SkyLinesTracking::Handler
OnUserName	Tracking/TrackingGlue.cpp	/^TrackingGlue::OnUserName(uint32_t user_id, const TCHAR *name)$/;"	f	class:TrackingGlue
OnUserNameReceived	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnUserNameReceived(const UserNameResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnUserNameRequest	Tracking/SkyLines/Server.hpp	/^  virtual void OnUserNameRequest(const Client &client, uint32_t user_id) {}$/;"	f	class:SkyLinesTracking::Server
OnWave	Tracking/SkyLines/Handler.hpp	/^  virtual void OnWave(unsigned time_of_day_ms,$/;"	f	class:SkyLinesTracking::Handler
OnWave	Tracking/TrackingGlue.cpp	/^TrackingGlue::OnWave(unsigned time_of_day_ms,$/;"	f	class:TrackingGlue
OnWaveReceived	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::OnWaveReceived(const WaveResponsePacket &packet,$/;"	f	class:SkyLinesTracking::Client
OnWaveRequest	Tracking/SkyLines/Server.hpp	/^  virtual void OnWaveRequest(const Client &client) {}$/;"	f	class:SkyLinesTracking::Server
OnWaveSubmit	Cloud/Main.cpp	/^CloudServer::OnWaveSubmit(const Client &c,$/;"	f	class:CloudServer
OnWaveSubmit	Tracking/SkyLines/Server.hpp	/^  virtual void OnWaveSubmit(const Client &client,$/;"	f	class:SkyLinesTracking::Server
OnWaypointDeleteClicked	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointDeleteClicked(unsigned i)$/;"	f	class:WaypointManagerWidget
OnWaypointEditClicked	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointEditClicked(unsigned i)$/;"	f	class:WaypointManagerWidget
OnWaypointImportClicked	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointImportClicked()$/;"	f	class:WaypointManagerWidget
OnWaypointListEnter	Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::OnWaypointListEnter()$/;"	f	class:WaypointListWidget
OnWaypointNewClicked	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointNewClicked()$/;"	f	class:WaypointManagerWidget
OnWaypointSaveClicked	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::OnWaypointSaveClicked()$/;"	f	class:WaypointManagerWidget
OnWriteEvent	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::OnWriteEvent(boost::asio::posix::stream_descriptor &fd,$/;"	f	class:ALSAPCMPlayer
OneClimbInfo	NMEA/ClimbInfo.hpp	/^struct OneClimbInfo$/;"	s
Open	Device/Descriptor.cpp	/^DeviceDescriptor::Open(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
Open	Device/Port/SerialPort.cpp	/^SerialPort::Open(const TCHAR *path, unsigned _baud_rate)$/;"	f	class:SerialPort
Open	Device/Port/TTYPort.cpp	/^TTYPort::Open(const TCHAR *path, unsigned baud_rate)$/;"	f	class:TTYPort
Open	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::Open()$/;"	f	class:LibInputHandler
Open	Event/Poll/Linux/Input.cpp	/^LinuxInputDevice::Open(const char *path)$/;"	f	class:LinuxInputDevice
Open	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::Open(boost::asio::ip::udp::endpoint _endpoint)$/;"	f	class:SkyLinesTracking::Client
Open	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::Open(boost::asio::ip::udp::resolver::query query)$/;"	f	class:SkyLinesTracking::Client
OpenAndroidBluetoothPort	Device/Port/AndroidBluetoothPort.cpp	/^OpenAndroidBluetoothPort(const TCHAR *address, PortListener *listener,$/;"	f
OpenAndroidBluetoothServerPort	Device/Port/AndroidBluetoothPort.cpp	/^OpenAndroidBluetoothServerPort(PortListener *listener, DataHandler &handler)$/;"	f
OpenAndroidIOIOUartPort	Device/Port/AndroidIOIOUartPort.cpp	/^OpenAndroidIOIOUartPort(unsigned uart_id, unsigned baud_rate,$/;"	f
OpenAppend	IO/FileOutputStream.cxx	/^FileOutputStream::OpenAppend(bool create)$/;"	f	class:FileOutputStream
OpenArchive	Weather/Rasp/RaspStore.cpp	/^RaspStore::OpenArchive() const$/;"	f	class:RaspStore
OpenConfiguredTextFile	IO/ConfiguredFile.cpp	/^OpenConfiguredTextFile(const char *profile_key, Charset cs)$/;"	f
OpenConfiguredTextFile	IO/ConfiguredFile.cpp	/^OpenConfiguredTextFile(const char *profile_key, const char *in_map_file,$/;"	f
OpenConfiguredTextFileA	IO/ConfiguredFile.cpp	/^OpenConfiguredTextFileA(const char *profile_key)$/;"	f
OpenCreate	IO/FileOutputStream.cxx	/^FileOutputStream::OpenCreate(bool visible)$/;"	f	class:FileOutputStream
OpenCreate	IO/FileOutputStream.cxx	/^FileOutputStream::OpenCreate(gcc_unused bool visible)$/;"	f	class:FileOutputStream
OpenDataFile	IO/DataFile.cpp	/^OpenDataFile(const TCHAR *name)$/;"	f
OpenDataTextFile	IO/DataFile.cpp	/^OpenDataTextFile(const TCHAR *name, Charset cs)$/;"	f
OpenDataTextFileA	IO/DataFile.cpp	/^OpenDataTextFileA(const TCHAR *name)$/;"	f
OpenDetails	Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::OpenDetails(unsigned index)$/;"	f	class:TrafficListWidget
OpenDetails	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::OpenDetails(unsigned index)$/;"	f	class:NOAAListWidget
OpenDetails	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::OpenDetails()$/;"	f	class:FlarmTrafficControl
OpenDetails	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::OpenDetails()$/;"	f	class:TrafficWidget
OpenDevice	Event/Poll/LibInput/LibInputHandler.cpp	/^LibInputHandler::OpenDevice(const char *path, int flags)$/;"	f	class:LibInputHandler
OpenDeviceJob	Device/Descriptor.cpp	/^  OpenDeviceJob(DeviceDescriptor &_device):device(_device) {}$/;"	f	class:final
OpenDroidSoarV2	Device/Descriptor.cpp	/^DeviceDescriptor::OpenDroidSoarV2()$/;"	f	class:DeviceDescriptor
OpenGL	Screen/OpenGL/Attribute.hpp	/^namespace OpenGL {$/;"	n
OpenGL	Screen/OpenGL/Debug.hpp	/^namespace OpenGL {$/;"	n
OpenGL	Screen/OpenGL/Extension.hpp	/^namespace OpenGL {$/;"	n
OpenGL	Screen/OpenGL/Function.hpp	/^namespace OpenGL {$/;"	n
OpenGL	Screen/OpenGL/Globals.cpp	/^namespace OpenGL {$/;"	n	file:
OpenGL	Screen/OpenGL/Rotate.hpp	/^namespace OpenGL {$/;"	n
OpenGL	Screen/OpenGL/Shaders.cpp	/^namespace OpenGL {$/;"	n	file:
OpenGL	Screen/OpenGL/Shaders.hpp	/^namespace OpenGL {$/;"	n
OpenGL	Screen/OpenGL/Shapes.cpp	/^namespace OpenGL {$/;"	n	file:
OpenGL	Screen/OpenGL/Shapes.hpp	/^namespace OpenGL {$/;"	n
OpenGliderLink	Device/Descriptor.cpp	/^DeviceDescriptor::OpenGliderLink()$/;"	f	class:DeviceDescriptor
OpenI2Cbaro	Device/Descriptor.cpp	/^DeviceDescriptor::OpenI2Cbaro()$/;"	f	class:DeviceDescriptor
OpenInternalSensors	Device/Descriptor.cpp	/^DeviceDescriptor::OpenInternalSensors()$/;"	f	class:DeviceDescriptor
OpenJasperZzipStream	Terrain/ZzipStream.cpp	/^OpenJasperZzipStream(struct zzip_dir *dir, const char *path)$/;"	f
OpenLayout	PageActions.cpp	/^PageActions::OpenLayout(const PageLayout &layout)$/;"	f	class:PageActions
OpenMap	Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::OpenMap(unsigned index)$/;"	f	class:TrafficListWidget
OpenMapFile	IO/MapFile.cpp	/^OpenMapFile()$/;"	f
OpenMapTextFile	IO/ConfiguredFile.cpp	/^OpenMapTextFile(const char *in_map_file, Charset cs)$/;"	f	file:
OpenMapTextFileA	IO/ConfiguredFile.cpp	/^OpenMapTextFileA(const char *in_map_file)$/;"	f	file:
OpenNunchuck	Device/Descriptor.cpp	/^DeviceDescriptor::OpenNunchuck()$/;"	f	class:DeviceDescriptor
OpenOnPort	Device/Descriptor.cpp	/^DeviceDescriptor::OpenOnPort(DumpPort *_port, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
OpenPort	Device/Port/ConfiguredPort.cpp	/^OpenPort(boost::asio::io_context &io_context,$/;"	f
OpenPortInternal	Device/Port/ConfiguredPort.cpp	/^OpenPortInternal(boost::asio::io_context &io_context,$/;"	f	file:
OpenPseudo	Device/Port/TTYPort.cpp	/^TTYPort::OpenPseudo()$/;"	f	class:TTYPort
OpenTerrain	Terrain/RasterTerrain.cpp	/^RasterTerrain::OpenTerrain(FileCache *cache, OperationEnvironment &operation)$/;"	f	class:RasterTerrain
OpenVarioCreateOnPort	Device/Driver/OpenVario.cpp	/^OpenVarioCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
OpenVarioDevice	Device/Driver/OpenVario.cpp	/^  OpenVarioDevice(Port &_port):port(_port) {}$/;"	f	class:OpenVarioDevice
OpenVarioDevice	Device/Driver/OpenVario.cpp	/^class OpenVarioDevice : public AbstractDevice {$/;"	c	file:
OpenVoltage	Device/Descriptor.cpp	/^DeviceDescriptor::OpenVoltage()$/;"	f	class:DeviceDescriptor
OperationEnvironment	Operation/Operation.hpp	/^class OperationEnvironment : private NonCopyable {$/;"	c
Optimise	Engine/Airspace/Airspaces.cpp	/^Airspaces::Optimise()$/;"	f	class:Airspaces
Optimise	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Optimise()$/;"	f	class:Waypoints
OptimiseGlide	Engine/GlideSolvers/MacCready.cpp	/^MacCready::OptimiseGlide(const GlideState &task, const bool allow_partial) const$/;"	f	class:MacCready
OptionStartsWidget	Dialogs/Task/OptionalStartsDialog.cpp	/^  explicit OptionStartsWidget(OrderedTask &_task)$/;"	f	class:OptionStartsWidget
OptionStartsWidget	Dialogs/Task/OptionalStartsDialog.cpp	/^class OptionStartsWidget : public ListWidget, private ActionListener {$/;"	c	file:
OrderedTask	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::OrderedTask(const TaskBehaviour &tb)$/;"	f	class:OrderedTask
OrderedTaskFactoryDescription	Task/TypeStrings.cpp	/^OrderedTaskFactoryDescription(TaskFactoryType type)$/;"	f
OrderedTaskFactoryName	Task/TypeStrings.cpp	/^OrderedTaskFactoryName(TaskFactoryType type)$/;"	f
OrderedTaskPoint	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::OrderedTaskPoint(TaskPointType _type,$/;"	f	class:OrderedTaskPoint
OrderedTaskPoint	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^class OrderedTaskPoint$/;"	c
OrderedTaskPointDescription	Task/TypeStrings.cpp	/^OrderedTaskPointDescription(TaskPointFactoryType type)$/;"	f
OrderedTaskPointLabel	Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskPointLabel(TaskPointType type, const TCHAR *name,$/;"	f
OrderedTaskPointName	Task/TypeStrings.cpp	/^OrderedTaskPointName(TaskPointFactoryType type)$/;"	f
OrderedTaskPointRadiusLabel	Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskPointRadiusLabel(const ObservationZonePoint &ozp, TCHAR* buffer)$/;"	f
OrderedTaskPointVector	Engine/Task/Ordered/OrderedTask.hpp	/^  typedef std::vector<OrderedTaskPoint*> OrderedTaskPointVector;$/;"	t	class:final
OrderedTaskSave	Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskSave(OrderedTask &task)$/;"	f
OrderedTaskSettings	Engine/Task/Ordered/Settings.hpp	/^struct OrderedTaskSettings {$/;"	s
OrderedTaskSummary	Dialogs/Task/dlgTaskHelpers.cpp	/^OrderedTaskSummary(const OrderedTask *task, TCHAR *text, bool linebreaks)$/;"	f
Orientation	Widget/TabWidget.hpp	/^  enum class Orientation {$/;"	c	class:TabWidget
OrientationCircling	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  OrientationCircling,$/;"	e	enum:ControlIndex	file:
OrientationCircling	Profile/ProfileKeys.cpp	/^const char OrientationCircling[] = "OrientationCircling";$/;"	m	namespace:ProfileKeys	file:
OrientationCruise	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  OrientationCruise,$/;"	e	enum:ControlIndex	file:
OrientationCruise	Profile/ProfileKeys.cpp	/^const char OrientationCruise[] = "OrientationCruise";$/;"	m	namespace:ProfileKeys	file:
OrientationSwap	Screen/OpenGL/Init.cpp	/^OrientationSwap(UnsignedPoint2D &p, DisplayOrientation orientation)$/;"	f	file:
OrientationToRotation	Screen/OpenGL/Init.cpp	/^OrientationToRotation(DisplayOrientation orientation)$/;"	f	file:
Origin	Device/Driver/LX/LXN.hpp	/^  struct Origin {$/;"	s	namespace:LXN
OutlineRectangleGL	Screen/OpenGL/Canvas.cpp	/^Canvas::OutlineRectangleGL(int left, int top, int right, int bottom)$/;"	f	class:Canvas
OutputBits	NMEA/VegaSwitchState.hpp	/^  enum OutputBits {$/;"	g	struct:VegaSwitchState
OutputStream	IO/OutputStream.hxx	/^class OutputStream {$/;"	c
OutsideAirspacePredicate	Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	/^  constexpr OutsideAirspacePredicate(const AGeoPoint &_location)$/;"	f	class:OutsideAirspacePredicate
OutsideAirspacePredicate	Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	/^class OutsideAirspacePredicate {$/;"	c
OverlappedEvent	OS/OverlappedEvent.hpp	/^  OverlappedEvent()$/;"	f	class:OverlappedEvent
OverlappedEvent	OS/OverlappedEvent.hpp	/^class OverlappedEvent {$/;"	c
OverlappedWidget	Widget/OverlappedWidget.hpp	/^class OverlappedWidget : public WindowWidget {$/;"	c
Overlaps	Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::Overlaps(const FlatBoundingBox& other) const$/;"	f	class:FlatBoundingBox
Overlaps	Geo/GeoBounds.hpp	/^  bool Overlaps(const GeoBounds &other) const {$/;"	f	class:GeoBounds
Overlaps	Math/ARange.hpp	/^  bool Overlaps(const AngleRange &other) const {$/;"	f	struct:AngleRange
Overlay	Weather/PCMet/Overlays.hpp	/^  Overlay(BrokenDateTime _run_time, BrokenDateTime _valid_time, Path _path)$/;"	f	struct:PCMet::Overlay
Overlay	Weather/PCMet/Overlays.hpp	/^  Overlay(BrokenDateTime _run_time, BrokenDateTime _valid_time,$/;"	f	struct:PCMet::Overlay
Overlay	Weather/PCMet/Overlays.hpp	/^struct Overlay {$/;"	s	namespace:PCMet
OverlayInfo	Weather/PCMet/Overlays.hpp	/^  OverlayInfo()$/;"	f	struct:PCMet::OverlayInfo
OverlayInfo	Weather/PCMet/Overlays.hpp	/^struct OverlayInfo {$/;"	s	namespace:PCMet
OverlayLook	Look/OverlayLook.hpp	/^struct OverlayLook {$/;"	s
OverlayMapItem	MapWindow/Items/OverlayMapItem.cpp	/^OverlayMapItem::OverlayMapItem(const MapOverlay &_overlay)$/;"	f	class:OverlayMapItem
OverlayMapItem	MapWindow/Items/OverlayMapItem.hpp	/^struct OverlayMapItem : public MapItem$/;"	s
OverwritingRingBuffer	Util/OverwritingRingBuffer.hpp	/^  OverwritingRingBuffer():TrivialOverwritingRingBuffer<T, size>(0, 0) {}$/;"	f	class:OverwritingRingBuffer
OverwritingRingBuffer	Util/OverwritingRingBuffer.hpp	/^class OverwritingRingBuffer: public TrivialOverwritingRingBuffer<T, size>$/;"	c
PADDING	Renderer/AirspaceRendererSettings.hpp	/^    PADDING,$/;"	m	class:AirspaceClassRendererSettings::FillMode
PADDING	Renderer/AirspaceRendererSettings.hpp	/^    PADDING,$/;"	m	class:AirspaceRendererSettings::FillMode
PAGESCONFIGPANEL_HPP	Dialogs/Settings/Panels/PagesConfigPanel.hpp	25;"	d
PAGES_DISTINCT_ZOOM	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  PAGES_DISTINCT_ZOOM,$/;"	e	enum:ControlIndex	file:
PAGE_OFFSET	Form/TabMenuDisplay.hpp	/^  static constexpr unsigned PAGE_OFFSET = 1;$/;"	m	class:final
PAN	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  PAN,$/;"	e	enum:Commands	file:
PANEL_AUXILIARY	InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_AUXILIARY,$/;"	e	enum:InfoBoxSettings::PanelIndex
PANEL_CIRCLING	InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_CIRCLING,$/;"	e	enum:InfoBoxSettings::PanelIndex
PANEL_CRUISE	InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_CRUISE,$/;"	e	enum:InfoBoxSettings::PanelIndex
PANEL_FINAL_GLIDE	InfoBoxes/InfoBoxSettings.hpp	/^    PANEL_FINAL_GLIDE,$/;"	e	enum:InfoBoxSettings::PanelIndex
PARACHUTE	FLARM/Traffic.hpp	/^    PARACHUTE = 4,        \/\/!< parachute$/;"	m	class:FlarmTraffic::AircraftType
PARAGLIDER	MapSettings.hpp	/^  PARAGLIDER,$/;"	m	class:AircraftSymbol
PARAGLIDER	Tracking/LiveTrack24.hpp	/^    PARAGLIDER = 1,$/;"	m	class:LiveTrack24::VehicleType
PARAGLIDER	Tracking/LiveTrack24/Settings.hpp	/^    PARAGLIDER = 1,$/;"	m	class:LiveTrack24::Settings::VehicleType
PARAMOTOR	Tracking/LiveTrack24.hpp	/^    PARAMOTOR = 16,$/;"	m	class:LiveTrack24::VehicleType
PARA_GLIDER	FLARM/Traffic.hpp	/^    PARA_GLIDER = 7,      \/\/!< para-glider (soft)$/;"	m	class:FlarmTraffic::AircraftType
PARSED_METAR_HPP	Weather/ParsedMETAR.hpp	25;"	d
PASSWORD	Dialogs/ProfileListDialog.cpp	/^    PASSWORD,$/;"	e	enum:final::Buttons	file:
PASS_THROUGH	Device/Driver.hpp	/^    PASS_THROUGH = 0x200,$/;"	e	enum:DeviceRegister::__anon196
PASS_THROUGH	Device/Driver/LX/Internal.hpp	/^    PASS_THROUGH,$/;"	m	class:LXDevice::Mode
PASS_THROUGH	Device/Driver/LXERA/Internal.hpp	/^    PASS_THROUGH,$/;"	m	class:LXEraDevice::Mode
PASTE	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    COPY, PASTE,$/;"	e	enum:final::Buttons	file:
PATH_MAX	zzip/file.h	46;"	d
PATH_MAX	zzip/file.h	48;"	d
PAUSE	Dialogs/Device/PortMonitor.cpp	/^  PAUSE,$/;"	e	enum:Buttons	file:
PAUSE	Event/Shared/Event.hpp	/^    PAUSE,$/;"	e	enum:Event::Type
PBB50	Device/Driver/BorgeltB50.cpp	/^PBB50(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PCMBufferDataSource	Audio/PCMBufferDataSource.hpp	/^class PCMBufferDataSource : public PCMDataSource {$/;"	c
PCMData	Audio/PCMBufferDataSource.hpp	/^  typedef ConstBuffer<int16_t> PCMData;$/;"	t	class:PCMBufferDataSource
PCMDataSource	Audio/PCMDataSource.hpp	/^class PCMDataSource {$/;"	c
PCMET_FTP	Weather/PCMet/Overlays.cpp	42;"	d	file:
PCMET_FTP_PASSWORD	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_FTP_PASSWORD,$/;"	e	enum:ControlIndex	file:
PCMET_FTP_USER	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_FTP_USER,$/;"	e	enum:ControlIndex	file:
PCMET_PASSWORD	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_PASSWORD,$/;"	e	enum:ControlIndex	file:
PCMET_URI	Weather/PCMet/Images.cpp	41;"	d	file:
PCMET_USER	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  PCMET_USER,$/;"	e	enum:ControlIndex	file:
PCMMixer	Audio/PCMMixer.cpp	/^PCMMixer::PCMMixer(unsigned _sample_rate,$/;"	f	class:PCMMixer
PCMMixerDataSource	Audio/PCMMixerDataSource.hpp	/^  explicit PCMMixerDataSource(unsigned _sample_rate) :$/;"	f	class:PCMMixerDataSource
PCMMixerDataSource	Audio/PCMMixerDataSource.hpp	/^class PCMMixerDataSource : public PCMDataSource {$/;"	c
PCMPLAYER_SYNTHESISER_ONLY	Audio/PCMPlayer.hpp	28;"	d
PCMPlayer	Audio/PCMPlayer.hpp	/^class PCMPlayer {$/;"	c
PCMPlayerFactory	Audio/PCMPlayerFactory.hpp	/^namespace PCMPlayerFactory$/;"	n
PCMResourcePlayer	Audio/PCMResourcePlayer.cpp	/^PCMResourcePlayer::PCMResourcePlayer() :$/;"	f	class:PCMResourcePlayer
PCMResourcePlayer	Audio/PCMResourcePlayer.hpp	/^class PCMResourcePlayer {$/;"	c
PCMSynthesiser	Audio/PCMSynthesiser.hpp	/^class PCMSynthesiser : public PCMDataSource {$/;"	c
PCM_CONTROL_NAME	Audio/VolumeController.cpp	/^static constexpr char PCM_CONTROL_NAME[] = "pcm";$/;"	v	file:
PCMet	Weather/PCMet/Images.hpp	/^namespace PCMet {$/;"	n
PCMet	Weather/PCMet/Overlays.hpp	/^namespace PCMet {$/;"	n
PCMetFtpPassword	Profile/ProfileKeys.cpp	/^const char PCMetFtpPassword[] = "PCMetFtpPassword";$/;"	m	namespace:ProfileKeys	file:
PCMetFtpUsername	Profile/ProfileKeys.cpp	/^const char PCMetFtpUsername[] = "PCMetFtpUsername";$/;"	m	namespace:ProfileKeys	file:
PCMetPassword	Profile/ProfileKeys.cpp	/^const char PCMetPassword[] = "PCMetPassword";$/;"	m	namespace:ProfileKeys	file:
PCMetSettings	Weather/PCMet/Settings.hpp	/^struct PCMetSettings {$/;"	s
PCMetUsername	Profile/ProfileKeys.cpp	/^const char PCMetUsername[] = "PCMetUsername";$/;"	m	namespace:ProfileKeys	file:
PDAAV	Device/Driver/Vega/Parser.cpp	/^PDAAV(NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	file:
PDGFTL1	Device/Driver/Leonardo.cpp	/^PDGFTL1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PDSWC	Device/Driver/Vega/Parser.cpp	/^PDSWC(NMEAInputLine &line, NMEAInfo &info, Vega::VolatileData &volatile_data)$/;"	f	file:
PDTSM	Device/Driver/Vega/Parser.cpp	/^PDTSM(NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	file:
PDVDS	Device/Driver/Vega/Parser.cpp	/^PDVDS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PDVDV	Device/Driver/Vega/Parser.cpp	/^PDVDV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PDVSC	Device/Driver/Vega/Parser.cpp	/^VegaDevice::PDVSC(NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	class:VegaDevice
PDVVT	Device/Driver/Vega/Parser.cpp	/^PDVVT(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PERCENT	Units/Unit.hpp	/^  PERCENT,$/;"	m	class:Unit
PERCENTILE_VARIO	FlightStatistics.cpp	/^static constexpr double PERCENTILE_VARIO = 0.1;$/;"	v	file:
PERIOD	Computer/RouteComputer.cpp	/^constexpr std::chrono::steady_clock::duration RouteComputer::PERIOD;$/;"	m	class:RouteComputer	file:
PERIOD	Computer/RouteComputer.hpp	/^  static constexpr std::chrono::steady_clock::duration PERIOD = std::chrono::seconds(5);$/;"	m	class:RouteComputer
PERIOD	Computer/StatsComputer.cpp	/^constexpr std::chrono::steady_clock::duration StatsComputer::PERIOD;$/;"	m	class:StatsComputer	file:
PERIOD	Computer/StatsComputer.hpp	/^  static constexpr std::chrono::steady_clock::duration PERIOD = std::chrono::minutes(1);$/;"	m	class:StatsComputer
PERIOD_CONST_HI	Dialogs/Device/Vega/Types.hpp	61;"	d
PERIOD_CONST_INTERMITTENT	Dialogs/Device/Vega/Types.hpp	70;"	d
PERIOD_CONST_LO	Dialogs/Device/Vega/Types.hpp	63;"	d
PERIOD_CONST_MEDIUM	Dialogs/Device/Vega/Types.hpp	62;"	d
PERIOD_SPEED_ERROR	Dialogs/Device/Vega/Types.hpp	65;"	d
PERIOD_SPEED_PERCENT	Dialogs/Device/Vega/Types.hpp	64;"	d
PERIOD_VARIO_GROSS	Dialogs/Device/Vega/Types.hpp	66;"	d
PERIOD_VARIO_GROSSRELATIVE	Dialogs/Device/Vega/Types.hpp	69;"	d
PERIOD_VARIO_NET	Dialogs/Device/Vega/Types.hpp	67;"	d
PERIOD_VARIO_RELATIVE	Dialogs/Device/Vega/Types.hpp	68;"	d
PEYA	Device/Driver/Eye.cpp	/^EyeDevice::PEYA(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:EyeDevice
PEYI	Device/Driver/Eye.cpp	/^EyeDevice::PEYI(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:EyeDevice
PGCreateOnPort	Device/Driver/PosiGraph.cpp	/^PGCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
PGDevice	Device/Driver/PosiGraph.cpp	/^  PGDevice(Port &_port, unsigned baud_rate, unsigned bulk_baud_rate)$/;"	f	class:PGDevice
PGDevice	Device/Driver/PosiGraph.cpp	/^class PGDevice : public LXDevice {$/;"	c	file:
PILOT	Device/Driver/Volkslogger/vlapi2.h	/^  struct PILOT {$/;"	s	class:VLAPI_DATA
PILOT	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    PILOT,$/;"	e	enum:final::Controls	file:
PING	Tracking/SkyLines/Protocol.hpp	/^  PING = 1,$/;"	e	enum:SkyLinesTracking::Type
PITCH_CONST_HI	Dialogs/Device/Vega/Types.hpp	50;"	d
PITCH_CONST_LO	Dialogs/Device/Vega/Types.hpp	52;"	d
PITCH_CONST_MEDIUM	Dialogs/Device/Vega/Types.hpp	51;"	d
PITCH_SPEED_ERROR	Dialogs/Device/Vega/Types.hpp	54;"	d
PITCH_SPEED_PERCENT	Dialogs/Device/Vega/Types.hpp	53;"	d
PITCH_VARIO_GROSS	Dialogs/Device/Vega/Types.hpp	55;"	d
PITCH_VARIO_GROSSRELATIVE	Dialogs/Device/Vega/Types.hpp	58;"	d
PITCH_VARIO_NET	Dialogs/Device/Vega/Types.hpp	56;"	d
PITCH_VARIO_RELATIVE	Dialogs/Device/Vega/Types.hpp	57;"	d
PITOT	Device/Config.hpp	/^    PITOT,$/;"	m	class:DeviceConfig::PressureUse
PITOT_ZERO	Device/Config.hpp	/^    PITOT_ZERO,$/;"	m	class:DeviceConfig::PressureUse
PLANE	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    PLANE,$/;"	e	enum:final::Controls	file:
PLANE_FILE_GLUE_HPP	Plane/PlaneFileGlue.hpp	25;"	d
PLANE_GLUE_HPP	Plane/PlaneGlue.hpp	25;"	d
PLANE_HPP	Plane/Plane.hpp	25;"	d
PLT	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
PLXV0	Device/Driver/LX/Parser.cpp	/^PLXV0(NMEAInputLine &line, DeviceSettingsMap<std::string> &settings)$/;"	f	file:
PLXVC	Device/Driver/LX/Parser.cpp	/^PLXVC(NMEAInputLine &line, DeviceInfo &device,$/;"	f	file:
PLXVF	Device/Driver/LX/Parser.cpp	/^PLXVF(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PLXVS	Device/Driver/LX/Parser.cpp	/^PLXVS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PNGCallbackContext	Screen/Custom/LibPNG.cpp	/^struct PNGCallbackContext {$/;"	s	file:
PNGReadCallback	Screen/Custom/LibPNG.cpp	/^PNGReadCallback(png_structp _ctx, png_bytep area, png_size_t size)$/;"	f	file:
POINTER_DOWN	Event/Shared/Event.hpp	/^    POINTER_DOWN,$/;"	e	enum:Event::Type
POINTER_UP	Event/Shared/Event.hpp	/^    POINTER_UP,$/;"	e	enum:Event::Type
POLAR	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    POLAR,$/;"	e	enum:final::Controls	file:
POLAR	Dialogs/dlgAnalysis.hpp	/^  POLAR,$/;"	m	class:AnalysisPage
POLE_RADIUS	Geo/WGS84.hpp	/^  static constexpr double POLE_RADIUS = EQUATOR_RADIUS * (1 - FLATTENING);$/;"	m	namespace:WGS84
POLYGON	Engine/Airspace/AbstractAirspace.hpp	/^    POLYGON,$/;"	m	class:AbstractAirspace::Shape
POLYGON_INTERIOR_HPP	Geo/ConvexHull/PolygonInterior.hpp	23;"	d
PORTABLE_MASK	Screen/Memory/Optimised.hpp	/^  static constexpr unsigned PORTABLE_MASK = N - 1;$/;"	m	class:SelectOptimisedPixelOperations
PORTRAIT	Android/NativeView.hpp	/^    PORTRAIT = 1,$/;"	m	class:NativeView::ScreenOrientation
PORTRAIT	DisplayOrientation.hpp	/^  PORTRAIT,$/;"	m	class:DisplayOrientation
POSITION	Screen/OpenGL/Attribute.hpp	/^    static constexpr GLuint POSITION = 1;$/;"	m	namespace:OpenGL::Attribute
POSITION_BAD	Device/Driver/LX/LXN.hpp	/^    POSITION_BAD = 0xc3,$/;"	e	enum:LXN::Command
POSITION_OK	Device/Driver/LX/LXN.hpp	/^    POSITION_OK = 0xbf,$/;"	e	enum:LXN::Command
POSITIVE	NMEA/SwitchState.hpp	/^    POSITIVE,$/;"	m	class:SwitchState::FlapPosition
POSSIBLE_CLIMB	NMEA/CirclingInfo.hpp	/^  POSSIBLE_CLIMB,$/;"	m	class:CirclingMode
POSSIBLE_CRUISE	NMEA/CirclingInfo.hpp	/^  POSSIBLE_CRUISE,$/;"	m	class:CirclingMode
POV	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::POV(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:OpenVarioDevice
POWER	FLARM/Error.hpp	/^    POWER = 0x21,$/;"	e	enum:uint8_t
POWERED_AIRCRAFT	FLARM/Traffic.hpp	/^    POWERED_AIRCRAFT = 8, \/\/!< powered aircraft$/;"	m	class:FlarmTraffic::AircraftType
POWERED_AIRCRAFT	Tracking/LiveTrack24.hpp	/^    POWERED_AIRCRAFT = 64,$/;"	m	class:LiveTrack24::VehicleType
POWERED_AIRCRAFT	Tracking/LiveTrack24/Settings.hpp	/^    POWERED_AIRCRAFT = 2,$/;"	m	class:LiveTrack24::Settings::VehicleType
POWEROFF	Kobo/KoboMenu.cpp	/^  POWEROFF$/;"	e	enum:Buttons	file:
POWERPLANT	Engine/Waypoint/Waypoint.hpp	/^    POWERPLANT,$/;"	m	class:Waypoint::Type
PPS	NMEA/GPSState.hpp	/^  PPS,$/;"	m	class:FixQuality
PREASSIGNED_PANELS	InfoBoxes/InfoBoxSettings.hpp	/^  static constexpr unsigned PREASSIGNED_PANELS = 3;$/;"	m	struct:InfoBoxSettings
PREDICT_CONTEST	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  PREDICT_CONTEST,$/;"	e	enum:ControlIndex	file:
PREFIX	Device/Driver/LX/Protocol.hpp	/^    PREFIX = 0x02,$/;"	e	enum:LX::Command
PREFIX	Device/Driver/LXERA/Protocol.hpp	/^    PREFIX = 0x02,$/;"	e	enum:LXEra::Command
PREFIX	Form/DataField/Base.hpp	/^    PREFIX,$/;"	m	class:DataField::Type
PRESSURE	Units/Group.hpp	/^  PRESSURE,$/;"	m	class:UnitGroup
PRESSURE_SENSOR	FLARM/Error.hpp	/^    PRESSURE_SENSOR = 0x71,$/;"	e	enum:uint8_t
PRETAKEOFF_BUFFER_MAX	Logger/LoggerImpl.hpp	/^    PRETAKEOFF_BUFFER_MAX = 60,$/;"	e	enum:LoggerImpl::__anon14
PREVIOUS	Dialogs/Task/TargetDialog.cpp	/^    PREVIOUS,$/;"	e	enum:TargetWidget::Buttons	file:
PREVIOUS	Dialogs/Task/TaskPointDialog.cpp	/^    PREVIOUS, NEXT,$/;"	e	enum:final::Buttons	file:
PREVIOUS	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PREVIOUS, NEXT,$/;"	e	enum:final::Buttons	file:
PREVIOUS	Dialogs/dlgAnalysis.cpp	/^    PREVIOUS,$/;"	e	enum:final::Buttons	file:
PREVIOUS	Widget/ArrowPagerWidget.hpp	/^    PREVIOUS,$/;"	e	enum:ArrowPagerWidget::Buttons
PREVIOUS_ITEM	Gauge/BigTrafficWidget.hpp	/^    PREVIOUS_ITEM,$/;"	e	enum:TrafficWidget::Action
PREVIOUS_PAGE	Form/DataField/ComboList.hpp	/^    static constexpr int PREVIOUS_PAGE = -800002;$/;"	m	struct:ComboList::Item
PRIMARY	Engine/Waypoint/Origin.hpp	/^  PRIMARY,$/;"	m	class:WaypointOrigin
PRINT_EXCEPTION_HXX	Util/PrintException.hxx	34;"	d
PRIdPTR	Terrain/jasper/jas_types.h	126;"	d
PRIdPTR	Terrain/jasper/jas_types.h	128;"	d
PRIiFAST32	Terrain/jasper/jas_types.h	124;"	d
PRIuFAST16	Terrain/jasper/jas_types.h	123;"	d
PRIuFAST32	Terrain/jasper/jas_types.h	122;"	d
PRIxFAST16	Terrain/jasper/jas_types.h	121;"	d
PRIxFAST32	Terrain/jasper/jas_types.h	120;"	d
PROFILE	Dialogs/StartupDialog.cpp	/^    PROFILE,$/;"	e	enum:final::Controls	file:
PROHIBITED	Engine/Airspace/AirspaceClass.hpp	/^  PROHIBITED,$/;"	e	enum:uint8_t
PTAS1	Device/Parser.cpp	/^NMEAParser::PTAS1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
PTFRS	Device/Driver/AltairPro.cpp	/^PTFRS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PTY	Device/Config.hpp	/^    PTY,$/;"	m	class:DeviceConfig::PortType
PURPLE_CIRCLE	Renderer/WaypointRendererSettings.hpp	/^    PURPLE_CIRCLE,$/;"	m	class:WaypointRendererSettings::LandableStyle
PWES0	Device/Driver/Westerboer.cpp	/^PWES0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PWES1	Device/Driver/Westerboer.cpp	/^PWES1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN1	Device/Driver/Zander.cpp	/^PZAN1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN2	Device/Driver/Zander.cpp	/^PZAN2(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN3	Device/Driver/Zander.cpp	/^PZAN3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN4	Device/Driver/Zander.cpp	/^PZAN4(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
PZAN5	Device/Driver/Zander.cpp	/^PZAN5(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
Pack	Cloud/Thermal.cpp	/^CloudThermal::Pack() const$/;"	f	class:CloudThermal
PackedBE16	OS/ByteOrder.hpp	/^class PackedBE16 {$/;"	c
PackedLE16	OS/ByteOrder.hpp	/^class PackedLE16 {$/;"	c
Packet	Cloud/Sender.hpp	/^  struct Packet {$/;"	s	class:ThermalResponseSender
Packet	Cloud/Sender.hpp	/^  struct Packet {$/;"	s	class:TrafficResponseSender
Packet	Device/Driver/LX/LXN.hpp	/^  union Packet {$/;"	u	namespace:LXN
PageActions	PageActions.cpp	/^namespace PageActions {$/;"	n	file:
PageActions	PageActions.hpp	/^namespace PageActions$/;"	n
PageFlippedCallback	Widget/PagerWidget.hpp	/^  typedef std::function<void()> PageFlippedCallback;$/;"	t	class:PagerWidget
PageLayout	PageSettings.hpp	/^  constexpr PageLayout(InfoBoxConfig _infobox_config)$/;"	f	struct:PageLayout
PageLayout	PageSettings.hpp	/^  constexpr PageLayout(bool _valid, InfoBoxConfig _infobox_config)$/;"	f	struct:PageLayout
PageLayout	PageSettings.hpp	/^struct PageLayout$/;"	s
PageLayoutEditWidget	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageLayoutEditWidget(const DialogLook &_look, Listener &_listener)$/;"	f	class:final
PageListWidget	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^class PageListWidget$/;"	c	file:
PageSettings	PageSettings.hpp	/^struct PageSettings {$/;"	s
PageState	PageState.hpp	/^struct PageState {$/;"	s
PagerWidget	Widget/PagerWidget.hpp	/^  PagerWidget():initialised(false) {}$/;"	f	class:PagerWidget
PagerWidget	Widget/PagerWidget.hpp	/^class PagerWidget : public Widget {$/;"	c
PagesDistinctZoom	Profile/ProfileKeys.cpp	/^const char PagesDistinctZoom[] = "PagesDistinctZoom";$/;"	m	namespace:ProfileKeys	file:
PagesState	PageState.hpp	/^struct PagesState {$/;"	s
Paint	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::Paint(Canvas &canvas, const PixelRect rc) const$/;"	f	class:CrossSectionRenderer
Paint	Form/ScrollBar.cpp	/^ScrollBar::Paint(Canvas &canvas) const$/;"	f	class:ScrollBar
Paint	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::Paint(Canvas &canvas)$/;"	f	class:FlarmTrafficWindow
Paint	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::Paint(Canvas &canvas)$/;"	f	class:ThermalAssistantRenderer
Paint	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentSpark::Paint(Canvas &canvas, const PixelRect &rc,$/;"	f	class:InfoBoxContentSpark
Paint	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::Paint(Canvas &canvas)$/;"	f	class:InfoBoxWindow
Paint	Screen/Custom/WList.cpp	/^WindowList::Paint(Canvas &canvas)$/;"	f	class:WindowList
Paint	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::Paint(Canvas &canvas,$/;"	f	class:TopographyFileRenderer
PaintAdvisor	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintAdvisor(Canvas &canvas,$/;"	f	class:ThermalAssistantRenderer
PaintAircraft	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintAircraft(Canvas &canvas, const ChartRenderer &chart,$/;"	f	class:CrossSectionRenderer
PaintCanvas	Screen/GDI/PaintCanvas.cpp	/^PaintCanvas::PaintCanvas(Window &_window)$/;"	f	class:PaintCanvas
PaintCanvas	Screen/GDI/PaintCanvas.hpp	/^class PaintCanvas : public Canvas {$/;"	c
PaintClimbRate	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintClimbRate(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintComment	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::PaintComment(Canvas &canvas)$/;"	f	class:InfoBoxWindow
PaintDistance	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintDistance(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintGlide	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintGlide(ChartRenderer &chart) const$/;"	f	class:CrossSectionRenderer
PaintGrid	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintGrid(Canvas &canvas, ChartRenderer &chart) const$/;"	f	class:CrossSectionRenderer
PaintID	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintID(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintLabels	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::PaintLabels(Canvas &canvas,$/;"	f	class:TopographyFileRenderer
PaintMainMenuBorder	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintMainMenuBorder(Canvas &canvas) const$/;"	f	class:TabMenuDisplay
PaintMainMenuItems	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintMainMenuItems(Canvas &canvas) const$/;"	f	class:TabMenuDisplay
PaintMap	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::PaintMap(Canvas &canvas, const PixelRect &rc)$/;"	f	class:TaskPointWidget
PaintNorth	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintNorth(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintNotCircling	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintNotCircling(Canvas &canvas) const$/;"	f	class:ThermalAssistantRenderer
PaintPoint	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::PaintPoint(Canvas &canvas,$/;"	f	class:TopographyFileRenderer
PaintPoints	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintPoints(Canvas &canvas,$/;"	f	class:ThermalAssistantRenderer
PaintRadarBackground	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarBackground(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintRadarBackground	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintRadarBackground(Canvas &canvas, double max_lift) const$/;"	f	class:ThermalAssistantRenderer
PaintRadarNoTraffic	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarNoTraffic(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintRadarPlane	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarPlane(Canvas &canvas) const$/;"	f	class:FlarmTrafficWindow
PaintRadarPlane	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::PaintRadarPlane(Canvas &canvas) const$/;"	f	class:ThermalAssistantRenderer
PaintRadarTarget	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarTarget(Canvas &canvas,$/;"	f	class:FlarmTrafficWindow
PaintRadarTraffic	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintRadarTraffic(Canvas &canvas)$/;"	f	class:FlarmTrafficWindow
PaintRelativeAltitude	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintRelativeAltitude(Canvas &canvas, PixelRect rc,$/;"	f	class:FlarmTrafficControl
PaintSubMenuBorder	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintSubMenuBorder(Canvas &canvas,$/;"	f	class:TabMenuDisplay
PaintSubMenuItems	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::PaintSubMenuItems(Canvas &canvas) const$/;"	f	class:TabMenuDisplay
PaintTargetInfoSmall	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PaintTargetInfoSmall($/;"	f	class:FlarmTrafficWindow
PaintTask	Gauge/TaskView.cpp	/^PaintTask(Canvas &canvas, const PixelRect &rc, const OrderedTask &task,$/;"	f
PaintTask	Gauge/TaskView.cpp	/^PaintTask(Canvas &canvas, const WindowProjection &projection,$/;"	f
PaintTaskDirection	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintTaskDirection(Canvas &canvas) const$/;"	f	class:FlarmTrafficControl
PaintTaskPoint	Gauge/TaskView.cpp	/^PaintTaskPoint(Canvas &canvas, const PixelRect &rc,$/;"	f
PaintTitle	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::PaintTitle(Canvas &canvas)$/;"	f	class:InfoBoxWindow
PaintTrafficInfo	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::PaintTrafficInfo(Canvas &canvas) const$/;"	f	class:FlarmTrafficControl
PaintValue	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::PaintValue(Canvas &canvas, Color background_color)$/;"	f	class:InfoBoxWindow
PaintWindow	Screen/PaintWindow.hpp	/^class PaintWindow : public Window {$/;"	c
PaintWorking	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::PaintWorking(ChartRenderer &chart) const$/;"	f	class:CrossSectionRenderer
Pair	Util/Cache.hxx	/^		Pair(K &&_key, U &&_data)$/;"	f	struct:Cache::Pair
Pair	Util/Cache.hxx	/^	struct Pair {$/;"	s	class:Cache
PanTo	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::PanTo(const GeoPoint &location)$/;"	f	class:GlueMapWindow
PanTo	Pan.cpp	/^PanTo(const GeoPoint &location)$/;"	f
Panel	InfoBoxes/InfoBoxSettings.hpp	/^  struct Panel {$/;"	s	struct:InfoBoxSettings
PanelControl	Form/Panel.hpp	/^  PanelControl(ContainerWindow &parent, const DialogLook &look,$/;"	f	class:PanelControl
PanelControl	Form/Panel.hpp	/^class PanelControl :$/;"	c
PanelIndex	InfoBoxes/InfoBoxSettings.hpp	/^  enum PanelIndex {$/;"	g	struct:InfoBoxSettings
PanelWidget	Widget/PanelWidget.hpp	/^class PanelWidget : public WindowWidget {$/;"	c
Paraline	Screen/Memory/Murphy.hpp	/^  void Paraline(int x, int y, int d1) {$/;"	f	struct:MurphyIterator
Parameter	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    Parameter(const char *_name):name(_name), value(0) {}$/;"	f	struct:VegaParametersWidget::Parameter
Parameter	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  struct Parameter {$/;"	s	class:VegaParametersWidget
Parametric	Engine/Task/Ordered/AATIsolineSegment.cpp	/^AATIsolineSegment::Parametric(const double t) const$/;"	f	class:AATIsolineSegment
Parametric	Geo/Flat/FlatEllipse.cpp	/^FlatEllipse::Parametric(const double t) const$/;"	f	class:FlatEllipse
Parametric	Geo/Flat/FlatRay.cpp	/^FlatRay::Parametric(const double t) const$/;"	f	class:FlatRay
Parametric	Geo/GeoEllipse.cpp	/^GeoEllipse::Parametric(const double t) const$/;"	f	class:GeoEllipse
Parametric	Geo/GeoPoint.cpp	/^GeoPoint::Parametric(const GeoPoint &delta, const double t) const$/;"	f	class:GeoPoint
Parse	Airspace/AirspaceParser.cpp	/^AirspaceParser::Parse(TLineReader &reader, OperationEnvironment &operation)$/;"	f	class:AirspaceParser
Parse	CommandLine.cpp	/^CommandLine::Parse(Args &args)$/;"	f	class:CommandLine
Parse	Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::BlueFlySettings::Parse(StringView name, unsigned long value)$/;"	f	class:BlueFlyDevice::BlueFlySettings
Parse	Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::Parse(const IMIBYTE _buffer[], int size)$/;"	f	class:IMI::MessageParser
Parse	FLARM/FlarmId.cpp	/^FlarmId::Parse(const TCHAR *input, TCHAR **endptr_r)$/;"	f	class:FlarmId
Parse	FLARM/FlarmId.cpp	/^FlarmId::Parse(const char *input, char **endptr_r)$/;"	f	class:FlarmId
Parse	RadioFrequency.cpp	/^RadioFrequency::Parse(const TCHAR *p)$/;"	f	class:RadioFrequency
Parse	Waypoint/WaypointReaderBase.cpp	/^WaypointReaderBase::Parse(Waypoints &way_points, TLineReader &reader,$/;"	f	class:WaypointReaderBase
Parse	Weather/METARParser.cpp	/^METARParser::Parse(const METAR &metar, ParsedMETAR &parsed)$/;"	f	class:METARParser
ParseAPENV1	Device/Driver/LevilAHRS_G.cpp	/^ParseAPENV1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParseAdditionalTemperatures	Weather/METARParser.cpp	/^ParseAdditionalTemperatures(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseAirfieldDetails	Waypoint/WaypointDetailsReader.cpp	/^ParseAirfieldDetails(Waypoints &way_points, TLineReader &reader,$/;"	f	file:
ParseAirspaceFile	Airspace/AirspaceGlue.cpp	/^ParseAirspaceFile(AirspaceParser &parser, Path path,$/;"	f	file:
ParseAirspaceFile	Airspace/AirspaceGlue.cpp	/^ParseAirspaceFile(AirspaceParser &parser,$/;"	f	file:
ParseAltitude	Waypoint/WaypointReaderCompeGPS.cpp	/^ParseAltitude(const TCHAR *&src, double &dest)$/;"	f	file:
ParseAltitude	Waypoint/WaypointReaderFS.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAltitude	Waypoint/WaypointReaderSeeYou.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAltitude	Waypoint/WaypointReaderWinPilot.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAltitude	Waypoint/WaypointReaderZander.cpp	/^ParseAltitude(const TCHAR *src, double &dest)$/;"	f	file:
ParseAngle	Task/TaskFileSeeYou.cpp	/^ParseAngle(const TCHAR* str)$/;"	f	file:
ParseAngle	Waypoint/WaypointReaderCompeGPS.cpp	/^ParseAngle(const TCHAR *&src, Angle &angle)$/;"	f	file:
ParseAngle	Waypoint/WaypointReaderFS.cpp	/^ParseAngle(const TCHAR *src, Angle &angle)$/;"	f	file:
ParseAngle	Waypoint/WaypointReaderOzi.cpp	/^ParseAngle(const TCHAR *src, Angle &angle)$/;"	f	file:
ParseAngle	Waypoint/WaypointReaderSeeYou.cpp	/^ParseAngle(const TCHAR* src, Angle& dest, const bool lat)$/;"	f	file:
ParseAngle	Waypoint/WaypointReaderWinPilot.cpp	/^ParseAngle(const TCHAR* src, Angle& dest, const bool lat)$/;"	f	file:
ParseAngle	Waypoint/WaypointReaderZander.cpp	/^ParseAngle(const TCHAR* src, Angle& dest, const bool lat)$/;"	f	file:
ParseArcBearings	Airspace/AirspaceParser.cpp	/^ParseArcBearings(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseArcPoints	Airspace/AirspaceParser.cpp	/^ParseArcPoints(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseArcTNP	Airspace/AirspaceParser.cpp	/^ParseArcTNP(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseBAT	Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseBAT(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseBAT	Device/Driver/FlyNet.cpp	/^FlyNetDevice::ParseBAT(const char *content, NMEAInfo &info)$/;"	f	class:FlyNetDevice
ParseBFV	Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseBFV(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseBST	Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseBST(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseBearingDegrees	Airspace/AirspaceParser.cpp	/^ParseBearingDegrees(StringParser<TCHAR> &input, Angle &value_r)$/;"	f	file:
ParseBounds	Terrain/Loader.cpp	/^TerrainLoader::ParseBounds(const char *data)$/;"	f	class:TerrainLoader
ParseCUTaskDetails	Task/TaskFileSeeYou.cpp	/^ParseCUTaskDetails(TLineReader &reader, SeeYouTaskInformation *task_info,$/;"	f	file:
ParseCircleTNP	Airspace/AirspaceParser.cpp	/^ParseCircleTNP(StringParser<TCHAR> &input, TempAirspaceType &temp_area)$/;"	f	file:
ParseClassTNP	Airspace/AirspaceParser.cpp	/^ParseClassTNP(const TCHAR *buffer)$/;"	f	file:
ParseCommandLine	OS/Args.hpp	/^  void ParseCommandLine(const TCHAR *_cmdline) {$/;"	f	class:Args
ParseCommandLine	OS/Args.hpp	/^  void ParseCommandLine(const char *_cmdline) {$/;"	f	class:Args
ParseCoordsTNP	Airspace/AirspaceParser.cpp	/^ParseCoordsTNP(StringParser<TCHAR> &input, GeoPoint &point)$/;"	f	file:
ParseData	Device/Driver/CProbe.cpp	/^ParseData(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParseDate	Device/Driver/FLARM/Logger.cpp	/^ParseDate(const char *str, BrokenDate &date)$/;"	f	file:
ParseDate	Device/Driver/Flytec/Logger.cpp	/^ParseDate(const char *str, BrokenDate &date)$/;"	f	file:
ParseDate	Device/Driver/LX/Logger.cpp	/^ParseDate(BrokenDate &date, const char *p)$/;"	f	file:
ParseDateTime	Weather/NOAADownloader.cpp	/^NOAADownloader::ParseDateTime(const char *buffer, BrokenDateTime &dest)$/;"	f	class:NOAADownloader
ParseDecoded	Weather/METARParser.cpp	/^METARParser::ParseDecoded(const METAR::ContentString &decoded,$/;"	f	class:METARParser
ParseDecodedDateTime	Weather/NOAADownloader.cpp	/^NOAADownloader::ParseDecodedDateTime(const char *buffer, BrokenDateTime &dest)$/;"	f	class:NOAADownloader
ParseDistance	Waypoint/WaypointReaderSeeYou.cpp	/^ParseDistance(const TCHAR *src, double &dest)$/;"	f	file:
ParseDouble	Util/NumberParser.hpp	/^ParseDouble(const char *p, char **endptr=nullptr)$/;"	f
ParseDouble	Util/NumberParser.hpp	/^ParseDouble(const wchar_t *p)$/;"	f
ParseDouble	Util/NumberParser.hpp	/^ParseDouble(const wchar_t *p, wchar_t **endptr)$/;"	f
ParseExtensionValue	IGC/IGCParser.cpp	/^ParseExtensionValue(const char *p, const char *end, int16_t &value_r)$/;"	f	file:
ParseExtensionValueN	IGC/IGCParser.cpp	/^ParseExtensionValueN(const char *p, const char *end, size_t n,$/;"	f	file:
ParseFLYSEN	Device/Driver/Flytec/Parser.cpp	/^FlytecDevice::ParseFLYSEN(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:FlytecDevice
ParseFile	XML/Parser.cpp	/^XML::ParseFile(Path filename, Results *pResults)$/;"	f	class:XML
ParseFileRepository	Repository/Parser.cpp	/^ParseFileRepository(FileRepository &repository, NLineReader &reader)$/;"	f
ParseFlags	Waypoint/WaypointReaderWinPilot.cpp	/^ParseFlags(const TCHAR* src, Waypoint &dest)$/;"	f	file:
ParseFlags	Waypoint/WaypointReaderZander.cpp	/^ParseFlags(const TCHAR* src, Waypoint &dest)$/;"	f	file:
ParseFlagsFromDescription	Waypoint/WaypointReaderZander.cpp	/^ParseFlagsFromDescription(const TCHAR* src, Waypoint &dest)$/;"	f	file:
ParseHexColor	Formatter/HexColor.cpp	/^ParseHexColor(const TCHAR *buffer, RGB8Color &color)$/;"	f
ParseHexColor	Formatter/HexColor.cpp	/^ParseHexColor(const char *buffer, RGB8Color &color)$/;"	f
ParseHexDigit	Util/HexString.hpp	/^ParseHexDigit(const unsigned char c) {$/;"	f
ParseHexString	Util/HexString.hpp	/^ParseHexString(const std::string_view hex_str)$/;"	f
ParseInputFile	Input/InputParser.cpp	/^ParseInputFile(InputConfig &config, TLineReader &reader)$/;"	f
ParseInt	Util/NumberParser.hpp	/^ParseInt(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseInt	Util/NumberParser.hpp	/^ParseInt(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseInt64	Util/NumberParser.hpp	/^ParseInt64(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseInt64	Util/NumberParser.hpp	/^ParseInt64(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseKeyCode	Input/InputKeys.cpp	/^ParseKeyCode(const TCHAR *data)$/;"	f
ParseLine	Airspace/AirspaceParser.cpp	/^ParseLine(Airspaces &airspace_database, StringParser<TCHAR> &&input,$/;"	f	file:
ParseLine	Airspace/AirspaceParser.cpp	/^ParseLine(Airspaces &airspace_database, TCHAR *line,$/;"	f	file:
ParseLine	Device/Descriptor.cpp	/^DeviceDescriptor::ParseLine(const char *line)$/;"	f	class:DeviceDescriptor
ParseLine	Device/Parser.cpp	/^NMEAParser::ParseLine(const char *string, NMEAInfo &info)$/;"	f	class:NMEAParser
ParseLine	Replay/NmeaReplay.cpp	/^NmeaReplay::ParseLine(const char *line, NMEAInfo &data)$/;"	f	class:NmeaReplay
ParseLine	Repository/Parser.cpp	/^ParseLine(char *line)$/;"	f	file:
ParseLine	Waypoint/WaypointReaderCompeGPS.cpp	/^WaypointReaderCompeGPS::ParseLine(const TCHAR *line, Waypoints &waypoints)$/;"	f	class:WaypointReaderCompeGPS
ParseLine	Waypoint/WaypointReaderFS.cpp	/^WaypointReaderFS::ParseLine(const TCHAR *line, Waypoints &way_points)$/;"	f	class:WaypointReaderFS
ParseLine	Waypoint/WaypointReaderOzi.cpp	/^WaypointReaderOzi::ParseLine(const TCHAR *line, Waypoints &way_points)$/;"	f	class:WaypointReaderOzi
ParseLine	Waypoint/WaypointReaderSeeYou.cpp	/^WaypointReaderSeeYou::ParseLine(const TCHAR* line, Waypoints &waypoints)$/;"	f	class:WaypointReaderSeeYou
ParseLine	Waypoint/WaypointReaderWinPilot.cpp	/^WaypointReaderWinPilot::ParseLine(const TCHAR *line, Waypoints &waypoints)$/;"	f	class:WaypointReaderWinPilot
ParseLine	Waypoint/WaypointReaderZander.cpp	/^WaypointReaderZander::ParseLine(const TCHAR* line, Waypoints &way_points)$/;"	f	class:WaypointReaderZander
ParseLine	Weather/METARParser.cpp	/^METARParser::ParseLine(const METAR::ContentString &content, ParsedMETAR &parsed)$/;"	f	class:METARParser
ParseLineTNP	Airspace/AirspaceParser.cpp	/^ParseLineTNP(Airspaces &airspace_database, StringParser<TCHAR> &input,$/;"	f	file:
ParseListResults	Kobo/WPASupplicant.cpp	/^ParseListResults(WifiConfiguredNetworkInfo *dest, unsigned max, char *src)$/;"	f	file:
ParseListResultsLine	Kobo/WPASupplicant.cpp	/^ParseListResultsLine(WifiConfiguredNetworkInfo &dest, char *src)$/;"	f	file:
ParseLocation	Waypoint/WaypointReaderCompeGPS.cpp	/^ParseLocation(const TCHAR *&src, GeoPoint &p)$/;"	f	file:
ParseLocation	Waypoint/WaypointReaderFS.cpp	/^ParseLocation(const TCHAR *src, GeoPoint &p)$/;"	f	file:
ParseLocation	Weather/METARParser.cpp	/^ParseLocation(const TCHAR *buffer, ParsedMETAR &parsed)$/;"	f	file:
ParseLocationUTM	Waypoint/WaypointReaderCompeGPS.cpp	/^ParseLocationUTM(const TCHAR *&src, GeoPoint &p)$/;"	f	file:
ParseLocationUTM	Waypoint/WaypointReaderFS.cpp	/^ParseLocationUTM(const TCHAR *src, GeoPoint &p)$/;"	f	file:
ParseLogbookContent	Device/Driver/LX/NanoLogger.cpp	/^ParseLogbookContent(const char *_line, RecordedFlightInfo &info)$/;"	f	file:
ParseMaxAlt	Task/TaskFileSeeYou.cpp	/^ParseMaxAlt(const TCHAR* str)$/;"	f	file:
ParseNMEA	Device/Descriptor.cpp	/^DeviceDescriptor::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:DeviceDescriptor
ParseNMEA	Device/Driver.cpp	/^AbstractDevice::ParseNMEA(const char *line, struct NMEAInfo &info)$/;"	f	class:AbstractDevice
ParseNMEA	Device/Driver/AirControlDisplay.cpp	/^ACDDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:ACDDevice
ParseNMEA	Device/Driver/AltairPro.cpp	/^AltairProDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:AltairProDevice
ParseNMEA	Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseNMEA	Device/Driver/BorgeltB50.cpp	/^B50Device::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:B50Device
ParseNMEA	Device/Driver/CAI302/Parser.cpp	/^CAI302Device::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:CAI302Device
ParseNMEA	Device/Driver/CProbe.cpp	/^CProbeDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:CProbeDevice
ParseNMEA	Device/Driver/Condor.cpp	/^CondorDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:CondorDevice
ParseNMEA	Device/Driver/EWMicroRecorder.cpp	/^EWMicroRecorderDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:EWMicroRecorderDevice
ParseNMEA	Device/Driver/Eye.cpp	/^EyeDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:EyeDevice
ParseNMEA	Device/Driver/FLARM/Parser.cpp	/^FlarmDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:FlarmDevice
ParseNMEA	Device/Driver/FlyNet.cpp	/^FlyNetDevice::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:FlyNetDevice
ParseNMEA	Device/Driver/FlymasterF1.cpp	/^FlymasterF1Device::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:FlymasterF1Device
ParseNMEA	Device/Driver/Flytec/Parser.cpp	/^FlytecDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:FlytecDevice
ParseNMEA	Device/Driver/ILEC.cpp	/^ILECDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:ILECDevice
ParseNMEA	Device/Driver/IMI/Internal.cpp	/^IMIDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:IMIDevice
ParseNMEA	Device/Driver/LX/Parser.cpp	/^LXDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:LXDevice
ParseNMEA	Device/Driver/Leonardo.cpp	/^LeonardoDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:LeonardoDevice
ParseNMEA	Device/Driver/LevilAHRS_G.cpp	/^LevilDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:LevilDevice
ParseNMEA	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:OpenVarioDevice
ParseNMEA	Device/Driver/PosiGraph.cpp	/^PGDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:PGDevice
ParseNMEA	Device/Driver/ThermalExpress/Driver.cpp	/^ThermalExpressDevice::ParseNMEA(const char *line, NMEAInfo &info)$/;"	f	class:ThermalExpressDevice
ParseNMEA	Device/Driver/Vaulter.cpp	/^VaulterDevice::ParseNMEA(const char *_line, NMEAInfo &info)$/;"	f	class:VaulterDevice
ParseNMEA	Device/Driver/Vega/Parser.cpp	/^VegaDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:VegaDevice
ParseNMEA	Device/Driver/Volkslogger/Parser.cpp	/^VolksloggerDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:VolksloggerDevice
ParseNMEA	Device/Driver/Westerboer.cpp	/^WesterboerDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:WesterboerDevice
ParseNMEA	Device/Driver/XCTracer/Parser.cpp	/^XCTracerDevice::ParseNMEA(const char *string, NMEAInfo &info)$/;"	f	class:XCTracerDevice
ParseNMEA	Device/Driver/Zander.cpp	/^ZanderDevice::ParseNMEA(const char *String, NMEAInfo &info)$/;"	f	class:ZanderDevice
ParseNanoInfo	Device/Driver/LX/Parser.cpp	/^ParseNanoInfo(NMEAInputLine &line, DeviceInfo &device)$/;"	f	file:
ParseNumber	Waypoint/WaypointReaderOzi.cpp	/^ParseNumber(const TCHAR *src, long &dest)$/;"	f	file:
ParseOZs	Task/TaskFileSeeYou.cpp	/^ParseOZs(SeeYouTurnpointInformation turnpoint_infos[], const TCHAR *params[],$/;"	f	file:
ParseOptions	Task/TaskFileSeeYou.cpp	/^ParseOptions(SeeYouTaskInformation *task_info, const TCHAR *params[],$/;"	f	file:
ParsePAAVS	Device/Driver/AirControlDisplay.cpp	/^ParsePAAVS(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePDA1	Device/Driver/ILEC.cpp	/^ParsePDA1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePFLAA	Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAA(NMEAInputLine &line, TrafficList &flarm, double clock)$/;"	f
ParsePFLAC	Device/Driver/FLARM/Parser.cpp	/^FlarmDevice::ParsePFLAC(NMEAInputLine &line)$/;"	f	class:FlarmDevice
ParsePFLAE	Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAE(NMEAInputLine &line, FlarmError &error, double clock)$/;"	f
ParsePFLAU	Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAU(NMEAInputLine &line, FlarmStatus &flarm, double clock)$/;"	f
ParsePFLAV	Device/Driver/FLARM/StaticParser.cpp	/^ParsePFLAV(NMEAInputLine &line, FlarmVersion &version, double clock)$/;"	f
ParsePITV3	Device/Driver/Vaulter.cpp	/^ParsePITV3(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePITV4	Device/Driver/Vaulter.cpp	/^ParsePITV4(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePITV5	Device/Driver/Vaulter.cpp	/^ParsePITV5(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParsePRS	Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParsePRS(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParsePRS	Device/Driver/FlyNet.cpp	/^FlyNetDevice::ParsePRS(const char *content, NMEAInfo &info)$/;"	f	class:FlyNetDevice
ParsePolar	Polar/Parser.cpp	/^ParsePolar(PolarInfo &polar_r, const char *s)$/;"	f
ParsePolarShape	Polar/Parser.cpp	/^ParsePolarShape(PolarShape &shape, const char *s)$/;"	f
ParseQNH	Weather/METARParser.cpp	/^ParseQNH(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseRPYL	Device/Driver/LevilAHRS_G.cpp	/^ParseRPYL(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
ParseRadius	Task/TaskFileSeeYou.cpp	/^ParseRadius(const TCHAR* str)$/;"	f	file:
ParseRecordInfo	Device/Driver/FLARM/Logger.cpp	/^ParseRecordInfo(char *record_info, RecordedFlightInfo &flight)$/;"	f	file:
ParseRunwayDirection	Waypoint/WaypointReaderWinPilot.cpp	/^ParseRunwayDirection(const TCHAR* src, Runway &dest)$/;"	f	file:
ParseSET	Device/Driver/BlueFly/Parser.cpp	/^BlueFlyDevice::ParseSET(const char *content, NMEAInfo &info)$/;"	f	class:BlueFlyDevice
ParseScanResults	Kobo/WPASupplicant.cpp	/^ParseScanResults(WifiVisibleNetwork *dest, unsigned max, char *src)$/;"	f	file:
ParseScanResultsLine	Kobo/WPASupplicant.cpp	/^ParseScanResultsLine(WifiVisibleNetwork &dest, char *src)$/;"	f	file:
ParseStatus	Kobo/WPASupplicant.cpp	/^ParseStatus(WifiStatus &status, char *src)$/;"	f	file:
ParseStatusLine	Kobo/WPASupplicant.cpp	/^ParseStatusLine(WifiStatus &status, char *src)$/;"	f	file:
ParseString	Form/DataField/Boolean.cpp	/^DataFieldBoolean::ParseString(const TCHAR *s) const$/;"	f	class:DataFieldBoolean
ParseString	Form/DataField/Integer.cpp	/^ParseString(const TCHAR *s)$/;"	f	file:
ParseString	Waypoint/WaypointReaderFS.cpp	/^ParseString(const TCHAR *src, tstring &dest, unsigned len = 0)$/;"	f	file:
ParseString	Waypoint/WaypointReaderOzi.cpp	/^ParseString(const TCHAR *src, tstring &dest)$/;"	f	file:
ParseString	Waypoint/WaypointReaderZander.cpp	/^ParseString(const TCHAR* src, tstring& dest, unsigned len)$/;"	f	file:
ParseString	XML/Parser.cpp	/^XML::ParseString(const TCHAR *xml_string, Results *pResults)$/;"	f	class:XML
ParseStyle	Task/TaskFileSeeYou.cpp	/^ParseStyle(const TCHAR* str)$/;"	f	file:
ParseStyle	Waypoint/WaypointReaderSeeYou.cpp	/^ParseStyle(const TCHAR* src, Waypoint::Type &type)$/;"	f	file:
ParseTXP	Device/Driver/ThermalExpress/Driver.cpp	/^ThermalExpressDevice::ParseTXP(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:ThermalExpressDevice
ParseTaskTime	Task/TaskFileSeeYou.cpp	/^ParseTaskTime(const TCHAR* str)$/;"	f	file:
ParseTemperature	Weather/METARParser.cpp	/^ParseTemperature(const TCHAR *token, double &temperature)$/;"	f	file:
ParseTemperatures	Weather/METARParser.cpp	/^ParseTemperatures(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseTime	Device/Driver/FLARM/Logger.cpp	/^ParseTime(const char *str, BrokenTime &time)$/;"	f	file:
ParseTime	Device/Driver/Flytec/Logger.cpp	/^ParseTime(const char *str, BrokenTime &time)$/;"	f	file:
ParseTime	Device/Driver/LX/Logger.cpp	/^ParseTime(BrokenTime &time, const char *p)$/;"	f	file:
ParseTimeCode	Weather/METARParser.cpp	/^ParseTimeCode(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseTwoDigits	IGC/IGCParser.cpp	/^ParseTwoDigits(const char *p)$/;"	f	file:
ParseType	Airspace/AirspaceParser.cpp	/^ParseType(const TCHAR *buffer)$/;"	f	file:
ParseTypeTNP	Airspace/AirspaceParser.cpp	/^ParseTypeTNP(const TCHAR *buffer)$/;"	f	file:
ParseUint64	Util/NumberParser.hpp	/^ParseUint64(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseUint64	Util/NumberParser.hpp	/^ParseUint64(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseUlong	Device/Driver/BlueFly/Parser.cpp	/^ParseUlong(const char **line, unsigned long &value)$/;"	f	file:
ParseUnsigned	IGC/IGCParser.cpp	/^ParseUnsigned(const char *p, const char *end)$/;"	f	file:
ParseUnsigned	Util/NumberParser.hpp	/^ParseUnsigned(const char *p, char **endptr=nullptr, int base=10)$/;"	f
ParseUnsigned	Util/NumberParser.hpp	/^ParseUnsigned(const wchar_t *p, wchar_t **endptr=nullptr, int base=10)$/;"	f
ParseVisibility	Weather/METARParser.cpp	/^ParseVisibility(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseWind	Weather/METARParser.cpp	/^ParseWind(const TCHAR *token, ParsedMETAR &parsed)$/;"	f	file:
ParseXMLElement	XML/Parser.cpp	/^XML::ParseXMLElement(XMLNode &node, Parser *pXML)$/;"	f	class:XML
ParsedMETAR	Weather/ParsedMETAR.hpp	/^struct ParsedMETAR$/;"	s
Parser	XML/Parser.cpp	/^  struct Parser {$/;"	s	namespace:XML	file:
PartitionPoints	Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::PartitionPoints()$/;"	f	class:GrahamScan
Pascal	Atmosphere/Pressure.hpp	/^  AtmosphericPressure Pascal(double value) {$/;"	f	class:AtmosphericPressure
Password	Profile/ProfileKeys.cpp	/^const char Password[] = "Password";$/;"	m	namespace:ProfileKeys	file:
PasswordClicked	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::PasswordClicked()$/;"	f	class:ProfileListWidget
PasswordDataField	Form/DataField/Password.hpp	/^  PasswordDataField(const TCHAR *initial_value,$/;"	f	class:final
Path	OS/Path.hpp	/^  Path(std::nullptr_t n):value(n) {}$/;"	f	class:Path
Path	OS/Path.hpp	/^  explicit constexpr Path(const_pointer _value):value(_value) {}$/;"	f	class:Path
Path	OS/Path.hpp	/^class Path {$/;"	c
PathName	OS/ConvertPathName.hpp	/^  explicit PathName(Value::const_pointer _value)$/;"	f	class:PathName
PathName	OS/ConvertPathName.hpp	/^  explicit PathName(const char *_value)$/;"	f	class:PathName
PathName	OS/ConvertPathName.hpp	/^class PathName {$/;"	c
PatternList	Form/DataField/File.hpp	/^  typedef StaticArray<StaticString<32>, 8> PatternList;$/;"	t	class:final
Peek	Tracking/SkyLines/Queue.hpp	/^  const FixPacket &Peek() {$/;"	f	class:SkyLinesTracking::Queue
PeekNext	OS/Args.hpp	/^  const char *PeekNext() const {$/;"	f	class:Args
Pen	Screen/Pen.hpp	/^  Pen(Style Style, unsigned width, const Color c) {$/;"	f	class:Pen
Pen	Screen/Pen.hpp	/^  Pen(Style _style, unsigned _width, const Color _color)$/;"	f	class:Pen
Pen	Screen/Pen.hpp	/^  Pen(unsigned _width, const Color _color)$/;"	f	class:Pen
Pen	Screen/Pen.hpp	/^  Pen(unsigned width, Color c) {$/;"	f	class:Pen
Pen	Screen/Pen.hpp	/^class Pen$/;"	c
PerPixelOperations	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr PerPixelOperations(Args&&... args)$/;"	f	struct:PerPixelOperations
PerPixelOperations	Screen/Memory/PixelOperations.hpp	/^struct PerPixelOperations : private WritePixelOperation {$/;"	s
PercentCircling	Computer/CirclingComputer.cpp	/^CirclingComputer::PercentCircling(const MoreData &basic,$/;"	f	class:CirclingComputer
PercentToByte	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^PercentToByte(short percent)$/;"	f	file:
Perform	Net/HTTP/Multi.hpp	/^    CURLMcode Perform() {$/;"	f	class:Net::CurlMulti
Perform	Net/HTTP/Session.hpp	/^    CURLMcode Perform() {$/;"	f	class:Net::Session
PeriodClock	Time/PeriodClock.hpp	/^class PeriodClock {$/;"	c
PersistentCallback	Lua/Background.cpp	/^  static void PersistentCallback(lua_State *L) {$/;"	f	class:final	file:
PersistentCallback	Lua/Background.cpp	/^BackgroundLua::PersistentCallback()$/;"	f	class:BackgroundLua
PersistentCallback	Lua/Persistent.hpp	/^typedef void (*PersistentCallback)(lua_State *L);$/;"	t	namespace:Lua
PickFlarmTraffic	Dialogs/Traffic/TrafficList.cpp	/^PickFlarmTraffic(const TCHAR *title, FlarmId array[], unsigned count)$/;"	f
Pilot	Device/Driver/CAI302/Protocol.hpp	/^  struct Pilot {$/;"	s	namespace:CAI302
Pilot	Device/Driver/LX/Protocol.hpp	/^  struct Pilot {$/;"	s	namespace:LX
Pilot	Device/Driver/LXERA/Protocol.hpp	/^  struct Pilot {$/;"	s	namespace:LXEra
Pilot	Device/Driver/Volkslogger/Database.hpp	/^  struct Pilot {$/;"	s	namespace:Volkslogger
PilotMeta	Device/Driver/CAI302/Protocol.hpp	/^  struct PilotMeta {$/;"	s	namespace:CAI302
PilotMetaActive	Device/Driver/CAI302/Protocol.hpp	/^  struct PilotMetaActive {$/;"	s	namespace:CAI302
PilotName	Device/Driver/LX/Protocol.hpp	/^    char PilotName[19];$/;"	m	struct:LX::Pilot
PilotName	Device/Driver/LXERA/Protocol.hpp	/^    char PilotName[19];$/;"	m	struct:LXEra::Pilot
PilotName	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  PilotName,$/;"	e	enum:ControlIndex	file:
PilotName	Profile/ProfileKeys.cpp	/^const char PilotName[] = "PilotName";$/;"	m	namespace:ProfileKeys	file:
PingPacket	Tracking/SkyLines/Protocol.hpp	/^struct PingPacket {$/;"	s	namespace:SkyLinesTracking
PixelAlphaOperation	Screen/Memory/PixelOperations.hpp	/^  constexpr explicit PixelAlphaOperation(uint8_t _alpha):alpha(_alpha) {}$/;"	f	class:PixelAlphaOperation
PixelAlphaOperation	Screen/Memory/PixelOperations.hpp	/^class PixelAlphaOperation {$/;"	c
PixelBitNot	Screen/Memory/PixelOperations.hpp	/^struct PixelBitNot {$/;"	s
PixelBitNotOr	Screen/Memory/PixelOperations.hpp	/^struct PixelBitNotOr {$/;"	s
PixelColoredAlpha	Screen/Memory/PixelOperations.hpp	/^  constexpr explicit PixelColoredAlpha(color_type _color):color(_color) {}$/;"	f	struct:PixelColoredAlpha
PixelColoredAlpha	Screen/Memory/PixelOperations.hpp	/^struct PixelColoredAlpha {$/;"	s
PixelDistance	Terrain/RasterMap.hpp	/^  PixelDistance(const GeoPoint &location, unsigned pixels) const {$/;"	f	class:RasterMap
PixelIntegerAdapter	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr PixelIntegerAdapter(Args&&... args)$/;"	f	struct:PixelIntegerAdapter
PixelIntegerAdapter	Screen/Memory/PixelOperations.hpp	/^struct PixelIntegerAdapter : private Operation {$/;"	s
PixelIterator	Terrain/RasterBuffer.cpp	/^  PixelIterator(unsigned src_size, unsigned dest_size)$/;"	f	class:PixelIterator
PixelIterator	Terrain/RasterBuffer.cpp	/^class PixelIterator$/;"	c	file:
PixelOpaqueAlpha	Screen/Memory/PixelOperations.hpp	/^  constexpr PixelOpaqueAlpha(color_type _a, color_type _b):a(_a), b(_b) {}$/;"	f	struct:PixelOpaqueAlpha
PixelOpaqueAlpha	Screen/Memory/PixelOperations.hpp	/^struct PixelOpaqueAlpha {$/;"	s
PixelOpaqueText	Screen/Memory/PixelOperations.hpp	/^  constexpr PixelOpaqueText(color_type _b, color_type _t)$/;"	f	struct:PixelOpaqueText
PixelOpaqueText	Screen/Memory/PixelOperations.hpp	/^struct PixelOpaqueText {$/;"	s
PixelPerChannelAdapter	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr PixelPerChannelAdapter(Args&&... args)$/;"	f	struct:PixelPerChannelAdapter
PixelPerChannelAdapter	Screen/Memory/PixelOperations.hpp	/^struct PixelPerChannelAdapter : private Operation {$/;"	s
PixelPoint	Screen/Point.hpp	/^struct PixelPoint : IntPoint2D {$/;"	s
PixelRect	Screen/Point.hpp	/^struct PixelRect {$/;"	s	struct:PixelPoint
PixelSize	Screen/Point.hpp	/^struct PixelSize {$/;"	s	struct:PixelPoint
PixelTraits	Screen/Memory/Optimised.hpp	/^  typedef typename Portable::PixelTraits PixelTraits;$/;"	t	class:SelectOptimisedPixelOperations
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:ColorKey
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:NotWhiteCondition
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelColoredAlpha
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelIntegerAdapter
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelOpaqueAlpha
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelOpaqueText
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PT PixelTraits;$/;"	t	struct:PixelPerChannelAdapter
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename Check::PixelTraits PixelTraits;$/;"	t	struct:ConditionalWritePixel
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename Operation::PixelTraits PixelTraits;$/;"	t	struct:BinaryWritePixel
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename Operation::PixelTraits PixelTraits;$/;"	t	struct:UnaryWritePixel
PixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename WritePixelOperation::PixelTraits PixelTraits;$/;"	t	struct:PerPixelOperations
PixelsToAngle	Projection/Projection.hpp	/^  Angle PixelsToAngle(int pixels) const {$/;"	f	class:Projection
PlacesOfInterestSettings	Computer/Settings.hpp	/^struct PlacesOfInterestSettings {$/;"	s
Plane	Plane/Plane.hpp	/^struct Plane$/;"	s
PlaneEditWidget	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  PlaneEditWidget(const Plane &_plane, const DialogLook &_look,$/;"	f	class:final
PlaneFileVisitor	Dialogs/Plane/PlaneListDialog.cpp	/^    PlaneFileVisitor(std::vector<ListItem> &_list):list(_list) {}$/;"	f	class:final::PlaneFileVisitor
PlaneFileVisitor	Dialogs/Plane/PlaneListDialog.cpp	/^  class PlaneFileVisitor: public File::Visitor$/;"	c	class:final	file:
PlaneGlue	Plane/PlaneFileGlue.hpp	/^namespace PlaneGlue$/;"	n
PlaneGlue	Plane/PlaneGlue.hpp	/^namespace PlaneGlue$/;"	n
PlanePolarWidget	Dialogs/Plane/PlanePolarDialog.cpp	/^  PlanePolarWidget(const Plane &_plane, const DialogLook &_look)$/;"	f	class:final
Play	Android/SoundUtil.cpp	/^SoundUtil::Play(JNIEnv *env, jobject context, const char *name)$/;"	f	class:SoundUtil
Play	Audio/SLES/Play.hpp	/^    explicit Play(SLPlayItf _play):play(_play) {}$/;"	f	class:SLES::Play
Play	Audio/SLES/Play.hpp	/^  class Play {$/;"	c	namespace:SLES
PlayExternal	Android/SoundUtil.cpp	/^SoundUtil::PlayExternal(JNIEnv *env, jobject context, const char *path)$/;"	f	class:SoundUtil
PlayResource	Audio/PCMResourcePlayer.cpp	/^PCMResourcePlayer::PlayResource(const TCHAR *resource_name)$/;"	f	class:PCMResourcePlayer
PlayResource	Audio/Sound.cpp	/^PlayResource(const TCHAR *resource_name)$/;"	f
Point	Computer/ThermalLocator.hpp	/^  struct Point $/;"	s	class:ThermalLocator
Point	Math/FastRotation.hpp	/^  typedef DoublePoint2D Point;$/;"	t	class:FastRotation
Point	Math/FastRotation.hpp	/^  typedef IntPoint2D Point;$/;"	t	class:FastIntegerRotation
Point	Math/FastRotation.hpp	/^  typedef IntPoint2D Point;$/;"	t	class:FastRowRotation
Point	Math/Line2D.hpp	/^  typedef P Point;$/;"	t	struct:Line2D
Point	Util/QuadTree.hxx	/^	struct Point {$/;"	s	class:QuadTree
Point2D	Math/Point2D.hpp	/^struct Point2D {$/;"	s
PointCurrent	Renderer/TaskPointRenderer.hpp	/^  bool PointCurrent() const {$/;"	f	class:TaskPointRenderer
PointEditor	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  struct PointEditor {$/;"	s	class:PolarShapeEditWidget
PointLeftOfLine	Screen/OpenGL/Triangulate.cpp	/^PointLeftOfLine(const PT &p, const PT &a, const PT &b)$/;"	f	file:
PointPast	Renderer/TaskPointRenderer.hpp	/^  bool PointPast() const {$/;"	f	class:TaskPointRenderer
PointVector	UIUtil/TrackingGestureManager.hpp	/^  typedef std::vector<PixelPoint> PointVector;$/;"	t	class:TrackingGestureManager
PointerButton	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::PointerButton(bool pressed)$/;"	f	class:WaylandEventQueue
PointerIterator	Engine/Trace/Trace.cpp	/^  explicit PointerIterator(I _i):i(_i) {}$/;"	f	class:PointerIterator
PointerIterator	Engine/Trace/Trace.cpp	/^class PointerIterator {$/;"	c	file:
PointerMotion	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::PointerMotion(IntPoint2D new_pointer_position)$/;"	f	class:WaylandEventQueue
Polar	Device/Driver/CAI302/Protocol.hpp	/^  struct Polar {$/;"	s	namespace:CAI302
Polar	Engine/Route/Config.hpp	/^  enum class Polar {$/;"	c	struct:RoutePlannerConfig
Polar	Profile/ProfileKeys.cpp	/^const char Polar[] = "PolarInformation";$/;"	m	namespace:ProfileKeys	file:
PolarButtonClicked	Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::PolarButtonClicked()$/;"	f	class:PlaneEditWidget
PolarCoefficients	Engine/GlideSolvers/PolarCoefficients.hpp	/^  constexpr PolarCoefficients(double _a, double _b, double _c)$/;"	f	struct:PolarCoefficients
PolarCoefficients	Engine/GlideSolvers/PolarCoefficients.hpp	/^struct PolarCoefficients$/;"	s
PolarDegradation	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  PolarDegradation,$/;"	e	enum:ControlIndex	file:
PolarDegradation	Profile/ProfileKeys.cpp	/^const char PolarDegradation[] = "PolarDegradation";$/;"	m	namespace:ProfileKeys	file:
PolarFile	Profile/ProfileKeys.cpp	/^const char PolarFile[] = "PolarFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
PolarGlue	Polar/PolarFileGlue.hpp	/^namespace PolarGlue$/;"	n
PolarGlue	Polar/PolarGlue.cpp	/^namespace PolarGlue$/;"	n	file:
PolarGlue	Polar/PolarGlue.hpp	/^namespace PolarGlue$/;"	n
PolarID	Profile/ProfileKeys.cpp	/^const char PolarID[] = "Polar";$/;"	m	namespace:ProfileKeys	file:
PolarInfo	Polar/Polar.hpp	/^struct PolarInfo$/;"	s
PolarMeta	Device/Driver/CAI302/Protocol.hpp	/^  struct PolarMeta {$/;"	s	namespace:CAI302
PolarName	Profile/ProfileKeys.cpp	/^const char PolarName[] = "PolarName";$/;"	m	namespace:ProfileKeys	file:
PolarPoint	Polar/Shape.hpp	/^struct PolarPoint {$/;"	s
PolarSettings	Computer/Settings.hpp	/^struct PolarSettings {$/;"	s
PolarShape	Polar/Shape.hpp	/^struct PolarShape {$/;"	s
PolarShapeEditWidget	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::PolarShapeEditWidget(const PolarShape &_shape,$/;"	f	class:PolarShapeEditWidget
PolarShapeEditWidget	Dialogs/Plane/PolarShapeEditWidget.hpp	/^class PolarShapeEditWidget : public PanelWidget {$/;"	c
PolarStore	Polar/PolarStore.hpp	/^namespace PolarStore$/;"	n
Poll	Event/Poll/Queue.cpp	/^EventQueue::Poll()$/;"	f	class:EventQueue
PollTiles	Terrain/RasterTileCache.cpp	/^RasterTileCache::PollTiles(int x, int y, unsigned radius)$/;"	f	class:RasterTileCache
PolygonInterior	Geo/ConvexHull/PolygonInterior.cpp	/^PolygonInterior(const FlatGeoPoint &P,$/;"	f
PolygonInterior	Geo/ConvexHull/PolygonInterior.cpp	/^PolygonInterior(const GeoPoint &P,$/;"	f
PolygonRotateShift	Math/Screen.cpp	/^PolygonRotateShift(BulkPixelPoint *poly,$/;"	f
PolygonRotatesLeft	Screen/OpenGL/Triangulate.cpp	/^PolygonRotatesLeft(const PT *points, unsigned num_points)$/;"	f	file:
PolygonToTriangles	Screen/OpenGL/Triangulate.cpp	/^PolygonToTriangles(const BulkPixelPoint *points, unsigned num_points,$/;"	f
PolygonToTriangles	Screen/OpenGL/Triangulate.cpp	/^PolygonToTriangles(const FloatPoint2D *points, unsigned num_points,$/;"	f
Pop	Engine/Route/AStar.hpp	/^  const Node &Pop() {$/;"	f	class:AStar
Pop	Event/Android/Queue.cpp	/^EventQueue::Pop(Event &event)$/;"	f	class:EventQueue
Pop	Event/Poll/Queue.cpp	/^EventQueue::Pop(Event &event)$/;"	f	class:EventQueue
Pop	Event/SDL/Queue.cpp	/^EventQueue::Pop(Event &event)$/;"	f	class:EventQueue
Pop	Tracking/SkyLines/Queue.hpp	/^  const FixPacket &Pop() {$/;"	f	class:SkyLinesTracking::Queue
PopError	Lua/Error.cxx	/^PopError(lua_State *L)$/;"	f	namespace:Lua
Popup	Screen/Window.hpp	/^  void Popup() {$/;"	f	class:WindowStyle
PopupMessage	PopupMessage.cpp	/^PopupMessage::PopupMessage(SingleWindow &_parent, const DialogLook &_look,$/;"	f	class:PopupMessage
PopupMessage	PopupMessage.hpp	/^class PopupMessage : public PaintWindow$/;"	c
PopupMessagePosition	UISettings.hpp	/^  enum class PopupMessagePosition : uint8_t {$/;"	c	struct:UISettings
PopupNearestWaypointDetails	Dialogs/Waypoint/NearestWaypoint.cpp	/^PopupNearestWaypointDetails(const Waypoints &way_points,$/;"	f
PopupOperationEnvironment	Operation/PopupOperationEnvironment.hpp	/^class PopupOperationEnvironment : public QuietOperationEnvironment {$/;"	c
Port	Device/Port/Port.cpp	/^Port::Port(PortListener *_listener, DataHandler &_handler)$/;"	f	class:Port
Port	Device/Port/Port.hpp	/^class Port {$/;"	c
Port	Dialogs/Device/DeviceEditWidget.cpp	/^  Port, BaudRate, BulkBaudRate,$/;"	e	enum:ControlIndex	file:
PortBridge	Android/PortBridge.cpp	/^PortBridge::PortBridge(JNIEnv *env, jobject obj)$/;"	f	class:PortBridge
PortBridge	Android/PortBridge.hpp	/^class PortBridge : protected Java::GlobalObject {$/;"	c
PortLineHandler	Device/Util/LineHandler.hpp	/^class PortLineHandler {$/;"	c
PortLineSplitter	Device/Util/LineSplitter.hpp	/^class PortLineSplitter : public DataHandler, protected PortLineHandler {$/;"	c
PortListener	Device/Port/Listener.hpp	/^class PortListener {$/;"	c
PortMonitorWidget	Dialogs/Device/PortMonitor.cpp	/^  PortMonitorWidget(DeviceDescriptor &_device, const TerminalLook &look)$/;"	f	class:final
PortNMEAReader	Device/Util/NMEAReader.hpp	/^  PortNMEAReader(Port &_port, OperationEnvironment &_env)$/;"	f	class:PortNMEAReader
PortNMEAReader	Device/Util/NMEAReader.hpp	/^class PortNMEAReader {$/;"	c
PortState	Device/Port/State.hpp	/^enum class PortState {$/;"	c
PortTerminalBridge	Dialogs/Device/PortMonitor.cpp	/^  PortTerminalBridge(TerminalWindow &_terminal)$/;"	f	class:final
PortType	Device/Config.hpp	/^  enum class PortType : uint8_t {$/;"	c	struct:DeviceConfig
PortTypeToString	Profile/DeviceConfig.cpp	/^PortTypeToString(DeviceConfig::PortType type)$/;"	f	file:
PortWriteNMEA	Device/Util/NMEAWriter.cpp	/^PortWriteNMEA(Port &port, const char *line, OperationEnvironment &env)$/;"	f
PortWriteNMEANoChecksum	Device/Driver/CaiLNav.cpp	/^PortWriteNMEANoChecksum(Port &port, const char *line,$/;"	f	file:
Pos	Renderer/WaypointLabelList.hpp	/^    PixelPoint Pos;$/;"	m	struct:WaypointLabelList::Label
Position	Device/Driver/LX/LXN.hpp	/^  struct Position {$/;"	s	namespace:LXN
Position	Event/Poll/Linux/Input.hpp	/^  typedef IntPoint2D Position;$/;"	t	class:final
Power	Android/Battery.cpp	/^namespace Power {$/;"	n	file:
Power	Hardware/Battery.cpp	/^namespace Power$/;"	n	file:
Power	Hardware/Battery.hpp	/^namespace Power$/;"	n
PowerOff	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::PowerOff(OperationEnvironment &env)$/;"	f	class:CAI302Device
PowerOff	Device/Driver/CAI302/Protocol.cpp	/^CAI302::PowerOff(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
PowerState	Hardware/VideoPower.h	/^  ULONG PowerState;$/;"	m	struct:VIDEO_POWER_MANAGEMENT
PreTakeoffBuffer	Logger/LoggerImpl.hpp	/^  struct PreTakeoffBuffer$/;"	s	class:LoggerImpl
PredictContest	Profile/ProfileKeys.cpp	/^const char PredictContest[] = "PredictContest";$/;"	m	namespace:ProfileKeys	file:
PredictWindDrift	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  PredictWindDrift,$/;"	e	enum:ControlIndex	file:
PredictWindDrift	Profile/ProfileKeys.cpp	/^const char PredictWindDrift[] = "PredictWindDrift";$/;"	m	namespace:ProfileKeys	file:
Predicted	Computer/TaskComputer.cpp	/^Predicted(const ContestSettings &settings,$/;"	f	file:
PrefixDataField	Form/DataField/Prefix.hpp	/^  PrefixDataField(const TCHAR *value,$/;"	f	class:final
PrefixDataField	Form/DataField/Prefix.hpp	/^  PrefixDataField(const TCHAR *value=_T(""),$/;"	f	class:final
Prepare	CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:CrossSectionWidget
Prepare	Dialogs/Airspace/AirspaceCRendererSettingsPanel.cpp	/^AirspaceClassRendererSettingsPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AirspaceClassRendererSettingsPanel
Prepare	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceFilterWidget::Prepare(ContainerWindow &parent,$/;"	f	class:AirspaceFilterWidget
Prepare	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AirspaceListWidget
Prepare	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^AirspaceDetailsWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AirspaceDetailsWidget
Prepare	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Prepare(ContainerWindow &parent,$/;"	f	class:AirspaceWarningListWidget
Prepare	Dialogs/Device/CAI302/UnitsEditor.cpp	/^CAI302UnitsEditor::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:CAI302UnitsEditor
Prepare	Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:DeviceEditWidget
Prepare	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:DeviceListWidget
Prepare	Dialogs/Device/FLARM/ConfigWidget.cpp	/^FLARMConfigWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:FLARMConfigWidget
Prepare	Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^ManageLX16xxWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ManageLX16xxWidget
Prepare	Dialogs/Device/LX/ManageNanoDialog.cpp	/^ManageNanoWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ManageNanoWidget
Prepare	Dialogs/Device/LX/ManageV7Dialog.cpp	/^ManageV7Widget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ManageV7Widget
Prepare	Dialogs/Device/LX/NanoConfigWidget.cpp	/^NanoConfigWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:NanoConfigWidget
Prepare	Dialogs/Device/LX/V7ConfigWidget.cpp	/^V7ConfigWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:V7ConfigWidget
Prepare	Dialogs/Device/ManageCAI302Dialog.cpp	/^ManageCAI302Widget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ManageCAI302Widget
Prepare	Dialogs/Device/ManageFlarmDialog.cpp	/^ManageFLARMWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ManageFLARMWidget
Prepare	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^ScanBluetoothLeWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ScanBluetoothLeWidget
Prepare	Dialogs/Device/Vega/AudioParameters.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) {$/;"	f	class:VegaAudioParametersWidget
Prepare	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^VegaDemoWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:VegaDemoWidget
Prepare	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:VegaParametersWidget
Prepare	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:DownloadFilePickerWidget
Prepare	Dialogs/FileManager.cpp	/^ManagedFileListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ManagedFileListWidget
Prepare	Dialogs/MapItemListDialog.cpp	/^MapItemListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:MapItemListWidget
Prepare	Dialogs/MapItemListSettingsPanel.cpp	/^MapItemListSettingsPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:MapItemListSettingsPanel
Prepare	Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:PlaneEditWidget
Prepare	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:PlaneListWidget
Prepare	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:PlanePolarWidget
Prepare	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::Prepare(ContainerWindow &parent, const PixelRect &_rc)$/;"	f	class:PolarShapeEditWidget
Prepare	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ProfileListWidget
Prepare	Dialogs/ReplayDialog.cpp	/^ReplayControlWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ReplayControlWidget
Prepare	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AirspaceConfigPanel
Prepare	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^AudioConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AudioConfigPanel
Prepare	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^AudioVarioConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AudioVarioConfigPanel
Prepare	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CloudConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:CloudConfigPanel
Prepare	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^GaugesConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:GaugesConfigPanel
Prepare	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^GlideComputerConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:GlideComputerConfigPanel
Prepare	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^InfoBoxesConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:InfoBoxesConfigPanel
Prepare	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^InterfaceConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:InterfaceConfigPanel
Prepare	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^LayoutConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:LayoutConfigPanel
Prepare	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^LoggerConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:LoggerConfigPanel
Prepare	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^MapDisplayConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:MapDisplayConfigPanel
Prepare	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageLayoutEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:PageLayoutEditWidget
Prepare	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:RouteConfigPanel
Prepare	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^SafetyFactorsConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SafetyFactorsConfigPanel
Prepare	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^ScoringConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ScoringConfigPanel
Prepare	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^SiteConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SiteConfigPanel
Prepare	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^SymbolsConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SymbolsConfigPanel
Prepare	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskDefaultsConfigPanel
Prepare	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^TaskRulesConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskRulesConfigPanel
Prepare	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TerrainDisplayConfigPanel
Prepare	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^TimeConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TimeConfigPanel
Prepare	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TrackingConfigPanel
Prepare	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:UnitsConfigPanel
Prepare	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^VarioConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:VarioConfigPanel
Prepare	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^WaypointDisplayConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WaypointDisplayConfigPanel
Prepare	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^WeatherConfigPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WeatherConfigPanel
Prepare	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WindSettingsPanel
Prepare	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:FlightSetupPanel
Prepare	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::Prepare(ContainerWindow &parent,$/;"	f	class:InfoBoxesConfigWidget
Prepare	Dialogs/StartupDialog.cpp	/^StartupWidget::Prepare(ContainerWindow &parent,$/;"	f	class:StartupWidget
Prepare	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^FlightStatusPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:FlightStatusPanel
Prepare	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^RulesStatusPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:RulesStatusPanel
Prepare	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^SystemStatusPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SystemStatusPanel
Prepare	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^TaskStatusPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskStatusPanel
Prepare	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^TimesStatusPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TimesStatusPanel
Prepare	Dialogs/Task/AlternatesListDialog.cpp	/^AlternatesListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AlternatesListWidget
Prepare	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskActionsPanel
Prepare	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskClosePanel
Prepare	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskEditPanel
Prepare	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskListPanel
Prepare	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskPropertiesPanel
Prepare	Dialogs/Task/OptionalStartsDialog.cpp	/^OptionStartsWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:OptionStartsWidget
Prepare	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TargetWidget
Prepare	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TaskPointWidget
Prepare	Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^CylinderZoneEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:CylinderZoneEditWidget
Prepare	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^KeyholeZoneEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:KeyholeZoneEditWidget
Prepare	Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^LineSectorZoneEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:LineSectorZoneEditWidget
Prepare	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^SectorZoneEditWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SectorZoneEditWidget
Prepare	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::Prepare(ContainerWindow &parent,$/;"	f	class:FlarmTrafficDetailsWidget
Prepare	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::Prepare(ContainerWindow &parent,$/;"	f	class:TeamCodeWidget
Prepare	Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::Prepare(ContainerWindow &parent,$/;"	f	class:TrafficListWidget
Prepare	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WaypointManagerWidget
Prepare	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^WaypointCommandsWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WaypointCommandsWidget
Prepare	Dialogs/Waypoint/WaypointInfoWidget.cpp	/^WaypointInfoWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WaypointInfoWidget
Prepare	Dialogs/Waypoint/WaypointList.cpp	/^WaypointFilterWidget::Prepare(ContainerWindow &parent,$/;"	f	class:WaypointFilterWidget
Prepare	Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WaypointListWidget
Prepare	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:WaypointDetailsWidget
Prepare	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^WaypointEditWidget::Prepare(gcc_unused ContainerWindow &parent,$/;"	f	class:WaypointEditWidget
Prepare	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:NOAAListWidget
Prepare	Dialogs/Weather/RASPDialog.cpp	/^RASPSettingsPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:RASPSettingsPanel
Prepare	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AnalysisWidget
Prepare	Dialogs/dlgQuickMenu.cpp	/^QuickMenu::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:QuickMenu
Prepare	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::Prepare(ContainerWindow &parent,$/;"	f	class:BigThermalAssistantWidget
Prepare	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::Prepare(ContainerWindow &parent, const PixelRect &_rc)$/;"	f	class:TrafficWidget
Prepare	Gauge/GaugeFLARM.cpp	/^GaugeFLARM::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:GaugeFLARM
Prepare	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:GaugeThermalAssistant
Prepare	Gauge/GlueGaugeVario.cpp	/^GlueGaugeVario::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:GlueGaugeVario
Prepare	HorizonWidget.cpp	/^HorizonWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:HorizonWidget
Prepare	InfoBoxes/Panel/ATCReference.cpp	/^ATCReferencePanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ATCReferencePanel
Prepare	InfoBoxes/Panel/AltitudeSetup.cpp	/^AltitudeSetupPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:AltitudeSetupPanel
Prepare	InfoBoxes/Panel/MacCreadySetup.cpp	/^MacCreadySetupPanel::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:MacCreadySetupPanel
Prepare	Kobo/KoboMenu.cpp	/^KoboMenuWidget::Prepare(ContainerWindow &parent,$/;"	f	class:KoboMenuWidget
Prepare	Kobo/NetworkDialog.cpp	/^NetworkWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:NetworkWidget
Prepare	Kobo/SystemDialog.cpp	/^SystemWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SystemWidget
Prepare	Kobo/ToolsDialog.cpp	/^ToolsWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ToolsWidget
Prepare	Renderer/OZRenderer.cpp	/^OZRenderer::Prepare(Canvas &canvas, Layer layer, int offset) const$/;"	f	class:OZRenderer
Prepare	Renderer/TrailRenderer.cpp	/^TrailRenderer::Prepare(unsigned n)$/;"	f	class:TrailRenderer
Prepare	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ArrowPagerWidget
Prepare	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ButtonPanelWidget
Prepare	Widget/ContainerWidget.cpp	/^ContainerWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ContainerWidget
Prepare	Widget/CreateWindowWidget.cpp	/^CreateWindowWidget::Prepare(ContainerWindow &parent,$/;"	f	class:CreateWindowWidget
Prepare	Widget/KeyboardWidget.cpp	/^KeyboardWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:KeyboardWidget
Prepare	Widget/LargeTextWidget.cpp	/^LargeTextWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:LargeTextWidget
Prepare	Widget/ManagedWidget.cpp	/^ManagedWidget::Prepare()$/;"	f	class:ManagedWidget
Prepare	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::Prepare(ContainerWindow &parent,$/;"	f	class:OffsetButtonsWidget
Prepare	Widget/PagerWidget.cpp	/^PagerWidget::Prepare(ContainerWindow &_parent, const PixelRect &rc)$/;"	f	class:PagerWidget
Prepare	Widget/PanelWidget.cpp	/^PanelWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:PanelWidget
Prepare	Widget/QuestionWidget.cpp	/^QuestionWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:QuestionWidget
Prepare	Widget/SolidWidget.cpp	/^SolidWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:SolidWidget
Prepare	Widget/TabWidget.cpp	/^TabWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TabWidget
Prepare	Widget/TextListWidget.cpp	/^TextListWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TextListWidget
Prepare	Widget/TextWidget.cpp	/^TextWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TextWidget
Prepare	Widget/TwoWidgets.cpp	/^TwoWidgets::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:TwoWidgets
Prepare	Widget/ViewImageWidget.cpp	/^ViewImageWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:ViewImageWidget
Prepare	Widget/Widget.cpp	/^NullWidget::Prepare(ContainerWindow &parent, const PixelRect &rc)$/;"	f	class:NullWidget
PrepareColorTable	Terrain/RasterRenderer.cpp	/^RasterRenderer::PrepareColorTable(const ColorRamp *color_ramp, bool do_water,$/;"	f	class:RasterRenderer
PrepareColoredAlphaTexture	Screen/OpenGL/Canvas.cpp	/^PrepareColoredAlphaTexture(Color color)$/;"	f	file:
PrepareFill	Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::PrepareFill($/;"	f	class:AirspacePreviewRenderer
PrepareFrameHeader	Device/Driver/FLARM/BinaryProtocol.cpp	/^FLARM::PrepareFrameHeader(unsigned sequence_number, MessageType message_type,$/;"	f	class:FLARM
PrepareFrameHeader	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::PrepareFrameHeader(FLARM::MessageType message_type,$/;"	f	class:FlarmDevice
PrepareOutline	Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::PrepareOutline($/;"	f	class:AirspacePreviewRenderer
PreparePolygon	MapWindow/MapCanvas.cpp	/^MapCanvas::PreparePolygon(const SearchPointVector &points)$/;"	f	class:MapCanvas
PrepareSize	Widget/KeyboardWidget.cpp	/^KeyboardWidget::PrepareSize(const PixelRect &rc)$/;"	f	class:KeyboardWidget
PrepareWidget	Dialogs/WidgetDialog.hpp	/^  void PrepareWidget() {$/;"	f	class:WidgetDialog
PrepareWidget	Widget/PagerWidget.cpp	/^PagerWidget::PrepareWidget(unsigned i)$/;"	f	class:PagerWidget
PresetCheck	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::PresetCheck()$/;"	f	class:UnitsConfigPanel
Presets	Units/UnitsStore.cpp	/^static constexpr UnitStoreItem Presets[] =$/;"	v	file:
PressureAltitudeToQNHAltitude	Atmosphere/Pressure.cpp	/^AtmosphericPressure::PressureAltitudeToQNHAltitude(const double alt) const$/;"	f	class:AtmosphericPressure
PressureAltitudeToStaticPressure	Atmosphere/Pressure.cpp	/^AtmosphericPressure::PressureAltitudeToStaticPressure(const double alt)$/;"	f	class:AtmosphericPressure
PressureUnit	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    PressureUnit,$/;"	e	enum:final::Controls
PressureUnitsValue	Profile/ProfileKeys.cpp	/^const char PressureUnitsValue[] = "Pressure";$/;"	m	namespace:ProfileKeys	file:
PressureUsage	Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
PressureUse	Device/Config.hpp	/^  enum class PressureUse : unsigned {$/;"	c	struct:DeviceConfig
Prev	PageActions.cpp	/^PageActions::Prev()$/;"	f	class:PageActions
PrevIndex	PageActions.cpp	/^PageActions::PrevIndex()$/;"	f	class:PageActions
PrevTarget	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::PrevTarget()$/;"	f	class:FlarmTrafficWindow
Previous	Widget/PagerWidget.cpp	/^PagerWidget::Previous(bool wrap)$/;"	f	class:PagerWidget
PreviousAngle	Screen/OpenGL/VertexArray.hpp	/^  static unsigned PreviousAngle(unsigned angle) {$/;"	f	struct:GLDonutVertices
PreviousCircular	Geo/SearchPointVector.cpp	/^SearchPointVector::PreviousCircular(const_iterator i) const$/;"	f	class:SearchPointVector
PreviousPage	Widget/TabWidget.cpp	/^TabWidget::PreviousPage()$/;"	f	class:TabWidget
PreviousRightColumn	Renderer/TextRowRenderer.cpp	/^TextRowRenderer::PreviousRightColumn(Canvas &canvas, const PixelRect &rc,$/;"	f	class:TextRowRenderer
PreviousTarget	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::PreviousTarget()$/;"	f	class:TrafficWidget
PreviousTraffic	FLARM/List.hpp	/^  const FlarmTraffic *PreviousTraffic(const FlarmTraffic *t) const {$/;"	f	struct:TrafficList
Priv	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Priv,$/;"	e	enum:final::Controls
Private	Interface.hpp	/^  namespace Private {$/;"	n	namespace:CommonInterface
Process	BatteryTimer.cpp	/^BatteryTimer::Process()$/;"	f	class:BatteryTimer
Process	Computer/AutoQNH.cpp	/^AutoQNH::Process(const NMEAInfo &basic, DerivedInfo &calculated,$/;"	f	class:AutoQNH
Process	Computer/ThermalLocator.cpp	/^ThermalLocator::Process(const bool circling, const double time,$/;"	f	class:ThermalLocator
Process	Device/Simulator.cpp	/^Simulator::Process(NMEAInfo &basic)$/;"	f	class:Simulator
Process	FLARM/FlarmComputer.cpp	/^FlarmComputer::Process(FlarmData &flarm, const FlarmData &last_flarm,$/;"	f	class:FlarmComputer
Process	MergeThread.cpp	/^MergeThread::Process()$/;"	f	class:MergeThread
Process512	Util/MD5.cpp	/^MD5::Process512(const uint8_t *s512in)$/;"	f	class:MD5
ProcessAutoBugs	ProcessTimer.cpp	/^ProcessAutoBugs()$/;"	f	file:
ProcessAutoTask	Computer/TaskComputer.cpp	/^TaskComputer::ProcessAutoTask(const NMEAInfo &basic,$/;"	f	class:TaskComputer
ProcessBasic	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ProcessBasic(const MoreData &basic,$/;"	f	class:GlideComputerAirData
ProcessBasicTask	Computer/TaskComputer.cpp	/^TaskComputer::ProcessBasicTask(const MoreData &basic,$/;"	f	class:TaskComputer
ProcessClimbEvents	Computer/StatsComputer.cpp	/^StatsComputer::ProcessClimbEvents(const DerivedInfo &calculated)$/;"	f	class:StatsComputer
ProcessComment	Terrain/Loader.cpp	/^TerrainLoader::ProcessComment(const char *data, unsigned size)$/;"	f	class:TerrainLoader
ProcessEvent	Input/InputEvents.cpp	/^InputEvents::ProcessEvent(unsigned event_id)$/;"	f	class:InputEvents
ProcessExhaustive	Computer/GlideComputer.hpp	/^  void ProcessExhaustive() {$/;"	f	class:GlideComputer
ProcessGPS	Computer/GlideComputer.cpp	/^GlideComputer::ProcessGPS(bool force)$/;"	f	class:GlideComputer
ProcessIdle	Computer/GlideComputer.cpp	/^GlideComputer::ProcessIdle(bool exhaustive)$/;"	f	class:GlideComputer
ProcessIdle	Computer/TaskComputer.cpp	/^TaskComputer::ProcessIdle(const MoreData &basic, DerivedInfo &calculated,$/;"	f	class:TaskComputer
ProcessKey	Input/InputEvents.cpp	/^InputEvents::ProcessKey(Mode mode, unsigned key_code)$/;"	f	class:InputEvents
ProcessMenuTimer	Input/InputEvents.cpp	/^InputEvents::ProcessMenuTimer()$/;"	f	class:InputEvents
ProcessMoreTask	Computer/TaskComputer.cpp	/^TaskComputer::ProcessMoreTask(const MoreData &basic,$/;"	f	class:TaskComputer
ProcessQueue	Net/HTTP/DownloadManager.cpp	/^DownloadManagerThread::ProcessQueue(Net::Session &session)$/;"	f	class:DownloadManagerThread
ProcessRoute	Computer/RouteComputer.cpp	/^RouteComputer::ProcessRoute(const MoreData &basic, DerivedInfo &calculated,$/;"	f	class:RouteComputer
ProcessSimulation	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ProcessSimulation()$/;"	f	class:DeviceBlackboard
ProcessSun	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ProcessSun(const NMEAInfo &basic,$/;"	f	class:GlideComputerAirData
ProcessTimer	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::ProcessTimer()$/;"	f	class:InfoBoxManager
ProcessTimer	Input/InputEvents.cpp	/^InputEvents::ProcessTimer()$/;"	f	class:InputEvents
ProcessTimer	ProcessTimer.cpp	/^ProcessTimer()$/;"	f
ProcessVertical	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ProcessVertical(const MoreData &basic,$/;"	f	class:GlideComputerAirData
Profile	Profile/AirspaceConfig.hpp	/^namespace Profile$/;"	n
Profile	Profile/ComputerProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	Profile/ComputerProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/ContestProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/Current.cpp	/^namespace Profile {$/;"	n	file:
Profile	Profile/Current.hpp	/^namespace Profile {$/;"	n
Profile	Profile/DeviceConfig.hpp	/^namespace Profile$/;"	n
Profile	Profile/File.hpp	/^namespace Profile {$/;"	n
Profile	Profile/FlarmProfile.hpp	/^namespace Profile$/;"	n
Profile	Profile/InfoBoxConfig.hpp	/^namespace Profile$/;"	n
Profile	Profile/MapProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/PageProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/Profile.hpp	/^namespace Profile$/;"	n
Profile	Profile/ProfileMap.hpp	/^namespace Profile {$/;"	n
Profile	Profile/RouteProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/Settings.hpp	/^namespace Profile$/;"	n
Profile	Profile/SystemProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/TaskProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	Profile/TaskProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/TerrainConfig.hpp	/^namespace Profile$/;"	n
Profile	Profile/TrackingProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	Profile/TrackingProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/UIProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	Profile/UIProfile.hpp	/^namespace Profile {$/;"	n
Profile	Profile/UnitsConfig.hpp	/^namespace Profile$/;"	n
Profile	Profile/WeatherProfile.cpp	/^namespace Profile {$/;"	n	file:
Profile	Profile/WeatherProfile.hpp	/^namespace Profile {$/;"	n
ProfileFileHasPassword	Dialogs/ProfilePasswordDialog.cpp	/^ProfileFileHasPassword(Path path)$/;"	f
ProfileFileVisitor	Dialogs/ProfileListDialog.cpp	/^    ProfileFileVisitor(std::vector<ListItem> &_list):list(_list) {}$/;"	f	class:final::ProfileFileVisitor
ProfileFileVisitor	Dialogs/ProfileListDialog.cpp	/^  class ProfileFileVisitor: public File::Visitor$/;"	c	class:final	file:
ProfileKeys	Profile/ProfileKeys.cpp	/^namespace ProfileKeys {$/;"	n	file:
ProfileKeys	Profile/ProfileKeys.hpp	/^namespace ProfileKeys {$/;"	n
ProfileListDialog	Dialogs/ProfileListDialog.cpp	/^ProfileListDialog()$/;"	f
ProfileListWidget	Dialogs/ProfileListDialog.cpp	/^  ProfileListWidget(bool _select=false):select(_select) {}$/;"	f	class:final
ProfileMap	Profile/Map.hpp	/^  ProfileMap():modified(false) {}$/;"	f	class:ProfileMap
ProfileMap	Profile/Map.hpp	/^class ProfileMap : public std::map<std::string, std::string> {$/;"	c
ProfilePasswordResult	Dialogs/ProfilePasswordDialog.hpp	/^enum class ProfilePasswordResult {$/;"	c
ProgressBar	Screen/ProgressBar.hpp	/^class ProgressBar : public PaintWindow {$/;"	c
ProgressDialog	Dialogs/ProgressDialog.cpp	/^ProgressDialog::ProgressDialog(SingleWindow &parent,$/;"	f	class:ProgressDialog
ProgressDialog	Dialogs/ProgressDialog.hpp	/^class ProgressDialog$/;"	c
ProgressGlue	ProgressGlue.hpp	/^namespace ProgressGlue {$/;"	n
ProgressWindow	ProgressWindow.cpp	/^ProgressWindow::ProgressWindow(ContainerWindow &parent)$/;"	f	class:ProgressWindow
ProgressWindow	ProgressWindow.hpp	/^class ProgressWindow : public ContainerWindow {$/;"	c
Project	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::Project(const FlatProjection &projection)$/;"	f	class:AbstractAirspace
Project	Engine/Waypoint/Waypoint.cpp	/^Waypoint::Project(const FlatProjection &projection)$/;"	f	class:Waypoint
Project	Geo/Flat/FlatProjection.cpp	/^FlatProjection::Project(const GeoBounds &bb) const$/;"	f	class:FlatProjection
Project	Geo/SearchPoint.cpp	/^SearchPoint::Project(const FlatProjection &tp)$/;"	f	class:SearchPoint
Project	Geo/SearchPointVector.cpp	/^SearchPointVector::Project(const FlatProjection &tp)$/;"	f	class:SearchPointVector
Project	MapWindow/MapCanvas.cpp	/^MapCanvas::Project(const Projection &projection,$/;"	f	class:MapCanvas
Project	MapWindow/MapCanvas.hpp	/^  void Project(const SearchPointVector &points, BulkPixelPoint *screen) const {$/;"	f	class:MapCanvas
Project	Math/Line2D.hpp	/^  constexpr Point Project(Point p) const {$/;"	f	struct:Line2D
ProjectCoarse	Terrain/RasterProjection.hpp	/^  constexpr SignedRasterLocation ProjectCoarse(GeoPoint location) const {$/;"	f	class:RasterProjection
ProjectCoarseRound	Terrain/RasterProjection.hpp	/^  constexpr SignedRasterLocation ProjectCoarseRound(GeoPoint location) const {$/;"	f	class:RasterProjection
ProjectFine	Terrain/RasterProjection.hpp	/^  constexpr SignedRasterLocation ProjectFine(GeoPoint location) const {$/;"	f	class:RasterProjection
ProjectFloat	Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectFloat(const GeoPoint &tp) const$/;"	f	class:FlatProjection
ProjectInteger	Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectInteger(const GeoPoint &tp) const$/;"	f	class:FlatProjection
ProjectRange	Engine/Trace/Trace.hpp	/^  unsigned ProjectRange(const GeoPoint &location, double distance) const {$/;"	f	class:Trace
ProjectRangeFloat	Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectRangeFloat(const GeoPoint &tp,$/;"	f	class:FlatProjection
ProjectRangeInteger	Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectRangeInteger(const GeoPoint &tp,$/;"	f	class:FlatProjection
ProjectSquare	Geo/Flat/FlatProjection.cpp	/^FlatProjection::ProjectSquare(const GeoPoint center, double radius) const$/;"	f	class:FlatProjection
ProjectedDistance	Geo/GeoPoint.cpp	/^GeoPoint::ProjectedDistance(const GeoPoint &from,$/;"	f	class:GeoPoint
ProjectedDistance	Geo/Math.cpp	/^ProjectedDistance(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f
ProjectedDistanceS	Geo/SimplifiedMath.cpp	/^ProjectedDistanceS(const GeoPoint &loc1, const GeoPoint &loc2,$/;"	f
ProjectedFan	MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFan(unsigned n):size(n) {$/;"	f	struct:ProjectedFan
ProjectedFan	MapWindow/MapWindowGlideRange.cpp	/^struct ProjectedFan {$/;"	s	file:
ProjectedFanVector	MapWindow/MapWindowGlideRange.cpp	/^  typedef StaticArray<ProjectedFan, FlatTriangleFanTree::REACH_MAX_FANS> ProjectedFanVector;$/;"	t	struct:ProjectedFans	file:
ProjectedFanVector	MapWindow/MapWindowGlideRange.cpp	/^typedef StaticArray<ProjectedFan, FlatTriangleFanTree::REACH_MAX_FANS> ProjectedFanVector;$/;"	t	file:
ProjectedFans	MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFans()$/;"	f	struct:ProjectedFans
ProjectedFans	MapWindow/MapWindowGlideRange.cpp	/^struct ProjectedFans {$/;"	s	file:
ProjectedRatio	Math/Line2D.hpp	/^  constexpr double ProjectedRatio(Point p) const {$/;"	f	struct:Line2D
Projection	Projection/Projection.cpp	/^Projection::Projection()$/;"	f	class:Projection
Projection	Projection/Projection.hpp	/^class Projection$/;"	c
PropagateOrderedTaskSettings	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::PropagateOrderedTaskSettings()$/;"	f	class:OrderedTask
PropertiesTab	Dialogs/Task/Manager/Internal.hpp	/^    PropertiesTab,$/;"	e	enum:final::Tabs
PropertySetGet	Device/Driver/AltairPro.cpp	/^AltairProDevice::PropertySetGet(TCHAR *s, size_t size,$/;"	f	class:AltairProDevice
PropertySetGet	Device/Driver/AltairPro.cpp	/^AltairProDevice::PropertySetGet(char *Buffer, size_t size,$/;"	f	class:AltairProDevice
ProtectedAirspaceWarningManager	Airspace/ProtectedAirspaceWarningManager.hpp	/^  ProtectedAirspaceWarningManager(AirspaceWarningManager &awm):$/;"	f	class:ProtectedAirspaceWarningManager
ProtectedAirspaceWarningManager	Airspace/ProtectedAirspaceWarningManager.hpp	/^class ProtectedAirspaceWarningManager : public Guard<AirspaceWarningManager> {$/;"	c
ProtectedRoutePlanner	Task/ProtectedRoutePlanner.hpp	/^  ProtectedRoutePlanner(RoutePlannerGlue &route, const Airspaces &_airspaces,$/;"	f	class:ProtectedRoutePlanner
ProtectedRoutePlanner	Task/ProtectedRoutePlanner.hpp	/^class ProtectedRoutePlanner: public Guard<RoutePlannerGlue>$/;"	c
ProtectedTaskManager	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::ProtectedTaskManager(TaskManager &_task_manager,$/;"	f	class:ProtectedTaskManager
ProtectedTaskManager	Task/ProtectedTaskManager.hpp	/^class ProtectedTaskManager: public Guard<TaskManager>$/;"	c
ProvideAutoMacCready	NMEA/Derived.hpp	/^  void ProvideAutoMacCready(double clock, double mc) {$/;"	f	struct:DerivedInfo
ProvideBallastFraction	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideBallastFraction(double value, double time)$/;"	f	class:ExternalSettings
ProvideBallastOverload	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideBallastOverload(double value, double time)$/;"	f	class:ExternalSettings
ProvideBaroAltitudeTrue	NMEA/Info.hpp	/^  void ProvideBaroAltitudeTrue(double value) {$/;"	f	struct:NMEAInfo
ProvideBothAirspeeds	NMEA/Info.hpp	/^  void ProvideBothAirspeeds(double as) {$/;"	f	struct:NMEAInfo
ProvideBothAirspeeds	NMEA/Info.hpp	/^  void ProvideBothAirspeeds(double ias, double tas) {$/;"	f	struct:NMEAInfo
ProvideBugs	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideBugs(double value, double time)$/;"	f	class:ExternalSettings
ProvideDate	NMEA/Info.cpp	/^NMEAInfo::ProvideDate(const BrokenDate &date)$/;"	f	class:NMEAInfo
ProvideDynamicPressure	NMEA/Info.hpp	/^  void ProvideDynamicPressure(AtmosphericPressure value) {$/;"	f	struct:NMEAInfo
ProvideExternalWind	NMEA/Info.hpp	/^  void ProvideExternalWind(const SpeedVector &value) {$/;"	f	struct:NMEAInfo
ProvideGLoad	NMEA/Acceleration.hpp	/^  void ProvideGLoad(double _g_load, bool _real) {$/;"	f	struct:AccelerationState
ProvideIndicatedAirspeed	NMEA/Info.cpp	/^NMEAInfo::ProvideIndicatedAirspeed(double ias)$/;"	f	class:NMEAInfo
ProvideIndicatedAirspeedWithAltitude	NMEA/Info.cpp	/^NMEAInfo::ProvideIndicatedAirspeedWithAltitude(double ias, double altitude)$/;"	f	class:NMEAInfo
ProvideMacCready	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideMacCready(double value, double time)$/;"	f	class:ExternalSettings
ProvideNettoVario	NMEA/Info.hpp	/^  void ProvideNettoVario(double value) {$/;"	f	struct:NMEAInfo
ProvideNoncompVario	NMEA/Info.hpp	/^  void ProvideNoncompVario(double value) {$/;"	f	struct:NMEAInfo
ProvidePitotPressure	NMEA/Info.hpp	/^  void ProvidePitotPressure(AtmosphericPressure value) {$/;"	f	struct:NMEAInfo
ProvidePressureAltitude	NMEA/Info.hpp	/^  void ProvidePressureAltitude(double value) {$/;"	f	struct:NMEAInfo
ProvideQNH	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideQNH(AtmosphericPressure value, double time)$/;"	f	class:ExternalSettings
ProvideSensorCalibration	NMEA/Info.hpp	/^  void ProvideSensorCalibration(double value, double offset) {$/;"	f	struct:NMEAInfo
ProvideStaticPressure	NMEA/Info.hpp	/^  void ProvideStaticPressure(AtmosphericPressure value) {$/;"	f	struct:NMEAInfo
ProvideTime	NMEA/Info.cpp	/^NMEAInfo::ProvideTime(double _time)$/;"	f	class:NMEAInfo
ProvideTotalEnergyVario	NMEA/Info.hpp	/^  void ProvideTotalEnergyVario(double value) {$/;"	f	struct:NMEAInfo
ProvideTrueAirspeed	NMEA/Info.cpp	/^NMEAInfo::ProvideTrueAirspeed(double tas)$/;"	f	class:NMEAInfo
ProvideTrueAirspeedWithAltitude	NMEA/Info.cpp	/^NMEAInfo::ProvideTrueAirspeedWithAltitude(double tas, double altitude)$/;"	f	class:NMEAInfo
ProvideVolume	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideVolume(unsigned value, double time)$/;"	f	class:ExternalSettings
ProvideWeakBaroAltitude	NMEA/Info.hpp	/^  void ProvideWeakBaroAltitude(double value) {$/;"	f	struct:NMEAInfo
ProvideWeakPressureAltitude	NMEA/Info.hpp	/^  void ProvideWeakPressureAltitude(double value) {$/;"	f	struct:NMEAInfo
ProvideWingLoading	NMEA/ExternalSettings.cpp	/^ExternalSettings::ProvideWingLoading(double value, double time)$/;"	f	class:ExternalSettings
ProxyBlackboardListener	Blackboard/ProxyBlackboardListener.hpp	/^  ProxyBlackboardListener(BlackboardListener &_next):next(_next) {}$/;"	f	class:ProxyBlackboardListener
ProxyBlackboardListener	Blackboard/ProxyBlackboardListener.hpp	/^class ProxyBlackboardListener : public BlackboardListener {$/;"	c
ProxyOperationEnvironment	Operation/ProxyOperationEnvironment.hpp	/^  ProxyOperationEnvironment(OperationEnvironment &_other)$/;"	f	class:ProxyOperationEnvironment
ProxyOperationEnvironment	Operation/ProxyOperationEnvironment.hpp	/^class ProxyOperationEnvironment : public OperationEnvironment {$/;"	c
PruneInterior	Geo/ConvexHull/GrahamScan.cpp	/^GrahamScan::PruneInterior()$/;"	f	class:GrahamScan
PruneInterior	Geo/SearchPointVector.cpp	/^SearchPointVector::PruneInterior()$/;"	f	class:SearchPointVector
PtScale	Screen/Layout.hpp	/^  PtScale(unsigned pt)$/;"	f	namespace:Layout
PublishPolarSettings	Dialogs/Settings/dlgBasicSettings.cpp	/^  void PublishPolarSettings() {$/;"	f	class:final
Purge	Event/Android/Queue.cpp	/^EventQueue::Purge(Event::Callback callback, void *ctx)$/;"	f	class:EventQueue
Purge	Event/Android/Queue.cpp	/^EventQueue::Purge(Event::Type type)$/;"	f	class:EventQueue
Purge	Event/Android/Queue.cpp	/^EventQueue::Purge(bool (*match)(const Event &event, void *ctx), void *ctx)$/;"	f	class:EventQueue
Purge	Event/Poll/Queue.cpp	/^EventQueue::Purge(Event::Callback callback, void *ctx)$/;"	f	class:EventQueue
Purge	Event/Poll/Queue.cpp	/^EventQueue::Purge(Event::Type type)$/;"	f	class:EventQueue
Purge	Event/Poll/Queue.cpp	/^EventQueue::Purge(bool (*match)(const Event &event, void *ctx), void *ctx)$/;"	f	class:EventQueue
Purge	Event/SDL/Queue.cpp	/^EventQueue::Purge(EventLoop::Callback callback, void *ctx)$/;"	f	class:EventQueue
Purge	Event/SDL/Queue.cpp	/^EventQueue::Purge(Uint32 event,$/;"	f	class:EventQueue
Push	Engine/Route/AStar.hpp	/^  void Push(const Node &node, const Node &parent,$/;"	f	class:AStar
Push	Event/Android/Queue.cpp	/^EventQueue::Push(const Event &event)$/;"	f	class:EventQueue
Push	Event/Android/Queue.hpp	/^  void Push(Event::Callback callback, void *ctx) {$/;"	f	class:EventQueue
Push	Event/Poll/Queue.cpp	/^EventQueue::Push(const Event &event)$/;"	f	class:EventQueue
Push	Event/Poll/Queue.hpp	/^  void Push(Event::Callback callback, void *ctx) {$/;"	f	class:final
Push	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::Push(const Event &event)$/;"	f	class:WaylandEventQueue
Push	Event/SDL/Queue.cpp	/^EventQueue::Push(EventLoop::Callback callback, void *ctx)$/;"	f	class:EventQueue
Push	Lua/Geo.cpp	/^void Push(lua_State *L, Angle value) {$/;"	f	namespace:Lua
Push	Lua/Geo.cpp	/^void Push(lua_State *L, GeoPoint value) {$/;"	f	namespace:Lua
Push	Lua/Util.hxx	/^Push(lua_State *L, _Lambda<T> l)$/;"	f	struct:Lua::StackIndex::LightUserData
Push	Lua/Util.hxx	/^Push(lua_State *L, const std::tuple<T...> &t)$/;"	f	struct:Lua::StackIndex::LightUserData
Push	Lua/Value.hxx	/^	void Push() const {$/;"	f	class:Lua::Value
Push	Lua/Value.hxx	/^Push(lua_State *, const Value &value)$/;"	f	namespace:Lua
Push	Math/DifferentialWindowFilter.hpp	/^  void Push(double x, double y) {$/;"	f	class:DifferentialWindowFilter
Push	Tracking/SkyLines/Queue.hpp	/^  void Push(const FixPacket &packet) {$/;"	f	class:SkyLinesTracking::Queue
PushKeyPress	Event/Poll/Queue.cpp	/^EventQueue::PushKeyPress(unsigned key_code)$/;"	f	class:EventQueue
PushOptional	Lua/Blackboard.cpp	/^static void PushOptional(lua_State *L, bool available, V &&value) {$/;"	f	namespace:Lua
PushTable	Lua/InputEvent.cpp	/^  bool PushTable() {$/;"	f	class:final	file:
PushTuple	Lua/Util.hxx	/^	static void PushTuple(lua_State *, const T &) {$/;"	f	struct:Lua::StackIndex::LightUserData::_PushTuple
PushTuple	Lua/Util.hxx	/^	static void PushTuple(lua_State *L, const T &t) {$/;"	f	struct:Lua::StackIndex::LightUserData::_PushTuple
Put	Device/Driver/ATR833.cpp	/^  void Put(uint8_t byte) {$/;"	f	class:ATRBuffer
Put	Util/Cache.hxx	/^	void Put(K &&key, U &&data) {$/;"	f	class:Cache
PutActiveFrequency	Device/Descriptor.cpp	/^DeviceDescriptor::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:DeviceDescriptor
PutActiveFrequency	Device/Driver.cpp	/^AbstractDevice::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:AbstractDevice
PutActiveFrequency	Device/Driver/ATR833.cpp	/^ATR833Device::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:ATR833Device
PutActiveFrequency	Device/Driver/KRT2.cpp	/^KRT2Device::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:KRT2Device
PutActiveFrequency	Device/Driver/XCOM760.cpp	/^XCOM760Device::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:XCOM760Device
PutActiveFrequency	Device/MultipleDevices.cpp	/^MultipleDevices::PutActiveFrequency(RadioFrequency frequency,$/;"	f	class:MultipleDevices
PutBallast	Device/Descriptor.cpp	/^DeviceDescriptor::PutBallast(double fraction, double overload,$/;"	f	class:DeviceDescriptor
PutBallast	Device/Driver.cpp	/^AbstractDevice::PutBallast(double fraction, double overload,$/;"	f	class:AbstractDevice
PutBallast	Device/Driver/BorgeltB50.cpp	/^B50Device::PutBallast(double fraction, gcc_unused double overload,$/;"	f	class:B50Device
PutBallast	Device/Driver/CAI302/PocketNav.cpp	/^CAI302::PutBallast(Port &port, double fraction, OperationEnvironment &env)$/;"	f	class:CAI302
PutBallast	Device/Driver/CAI302/Settings.cpp	/^CAI302Device::PutBallast(double fraction, gcc_unused double overload,$/;"	f	class:CAI302Device
PutBallast	Device/Driver/LX/Settings.cpp	/^LXDevice::PutBallast(gcc_unused double fraction, double overload,$/;"	f	class:LXDevice
PutBallast	Device/Driver/LXERA/Settings.cpp	/^LXEraDevice::PutBallast(gcc_unused double fraction, double overload,$/;"	f	class:LXEraDevice
PutBallast	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutBallast(double fraction, double overload, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
PutBallast	Device/Driver/Vaulter.cpp	/^VaulterDevice::PutBallast(double fraction, double overload, OperationEnvironment &env)$/;"	f	class:VaulterDevice
PutBallast	Device/MultipleDevices.cpp	/^MultipleDevices::PutBallast(double fraction, double overload,$/;"	f	class:MultipleDevices
PutBugs	Device/Descriptor.cpp	/^DeviceDescriptor::PutBugs(double value, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
PutBugs	Device/Driver.cpp	/^AbstractDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:AbstractDevice
PutBugs	Device/Driver/BorgeltB50.cpp	/^B50Device::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:B50Device
PutBugs	Device/Driver/CAI302/PocketNav.cpp	/^CAI302::PutBugs(Port &port, double bugs, OperationEnvironment &env)$/;"	f	class:CAI302
PutBugs	Device/Driver/CAI302/Settings.cpp	/^CAI302Device::PutBugs(double Bugs, OperationEnvironment &env)$/;"	f	class:CAI302Device
PutBugs	Device/Driver/LX/Settings.cpp	/^LXDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:LXDevice
PutBugs	Device/Driver/LXERA/Settings.cpp	/^LXEraDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:LXEraDevice
PutBugs	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
PutBugs	Device/Driver/Westerboer.cpp	/^WesterboerDevice::PutBugs(double _bugs, OperationEnvironment &env)$/;"	f	class:WesterboerDevice
PutBugs	Device/MultipleDevices.cpp	/^MultipleDevices::PutBugs(double bugs, OperationEnvironment &env)$/;"	f	class:MultipleDevices
PutFrequency	Device/Driver/KRT2.cpp	/^KRT2Device::PutFrequency(char cmd,$/;"	f	class:KRT2Device
PutIdealPolar	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutIdealPolar(const DerivedInfo &calculated,$/;"	f	class:OpenVarioDevice
PutMacCready	Device/Descriptor.cpp	/^DeviceDescriptor::PutMacCready(double value, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
PutMacCready	Device/Driver.cpp	/^AbstractDevice::PutMacCready(double MacCready, OperationEnvironment &env)$/;"	f	class:AbstractDevice
PutMacCready	Device/Driver/BorgeltB50.cpp	/^B50Device::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:B50Device
PutMacCready	Device/Driver/CAI302/PocketNav.cpp	/^CAI302::PutMacCready(Port &port, double mc, OperationEnvironment &env)$/;"	f	class:CAI302
PutMacCready	Device/Driver/CAI302/Settings.cpp	/^CAI302Device::PutMacCready(double MacCready, OperationEnvironment &env)$/;"	f	class:CAI302Device
PutMacCready	Device/Driver/LX/Settings.cpp	/^LXDevice::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:LXDevice
PutMacCready	Device/Driver/LXERA/Settings.cpp	/^LXEraDevice::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:LXEraDevice
PutMacCready	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutMacCready(double mc, OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
PutMacCready	Device/Driver/Vaulter.cpp	/^VaulterDevice::PutMacCready(double mc, OperationEnvironment &env)$/;"	f	class:VaulterDevice
PutMacCready	Device/Driver/Vega/Settings.cpp	/^VegaDevice::PutMacCready(double _mc, OperationEnvironment &env)$/;"	f	class:VegaDevice
PutMacCready	Device/Driver/Westerboer.cpp	/^WesterboerDevice::PutMacCready(double _mac_cready, OperationEnvironment &env)$/;"	f	class:WesterboerDevice
PutMacCready	Device/MultipleDevices.cpp	/^MultipleDevices::PutMacCready(double mac_cready, OperationEnvironment &env)$/;"	f	class:MultipleDevices
PutOrReplace	Util/Cache.hxx	/^	void PutOrReplace(K &&key, U &&data) {$/;"	f	class:Cache
PutOverviewTile	Terrain/RasterTileCache.cpp	/^RasterTileCache::PutOverviewTile(unsigned index,$/;"	f	class:RasterTileCache
PutQNH	Device/Descriptor.cpp	/^DeviceDescriptor::PutQNH(const AtmosphericPressure &value,$/;"	f	class:DeviceDescriptor
PutQNH	Device/Driver.cpp	/^AbstractDevice::PutQNH(const AtmosphericPressure &pres,$/;"	f	class:AbstractDevice
PutQNH	Device/Driver/AirControlDisplay.cpp	/^ACDDevice::PutQNH(const AtmosphericPressure &pres, OperationEnvironment &env)$/;"	f	class:ACDDevice
PutQNH	Device/Driver/LX/Settings.cpp	/^LXDevice::PutQNH(const AtmosphericPressure &pres, OperationEnvironment &env)$/;"	f	class:LXDevice
PutQNH	Device/Driver/LXERA/Settings.cpp	/^LXEraDevice::PutQNH(const AtmosphericPressure &pres, OperationEnvironment &env)$/;"	f	class:LXEraDevice
PutQNH	Device/Driver/Vega/Settings.cpp	/^VegaDevice::PutQNH(const AtmosphericPressure& pres, OperationEnvironment &env)$/;"	f	class:VegaDevice
PutQNH	Device/MultipleDevices.cpp	/^MultipleDevices::PutQNH(const AtmosphericPressure &pres,$/;"	f	class:MultipleDevices
PutRealPolar	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::PutRealPolar(const DerivedInfo &calculated,$/;"	f	class:OpenVarioDevice
PutStandbyFrequency	Device/Descriptor.cpp	/^DeviceDescriptor::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:DeviceDescriptor
PutStandbyFrequency	Device/Driver.cpp	/^AbstractDevice::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:AbstractDevice
PutStandbyFrequency	Device/Driver/ATR833.cpp	/^ATR833Device::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:ATR833Device
PutStandbyFrequency	Device/Driver/AirControlDisplay.cpp	/^ACDDevice::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:ACDDevice
PutStandbyFrequency	Device/Driver/KRT2.cpp	/^KRT2Device::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:KRT2Device
PutStandbyFrequency	Device/Driver/XCOM760.cpp	/^XCOM760Device::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:XCOM760Device
PutStandbyFrequency	Device/MultipleDevices.cpp	/^MultipleDevices::PutStandbyFrequency(RadioFrequency frequency,$/;"	f	class:MultipleDevices
PutTileData	Terrain/Loader.cpp	/^TerrainLoader::PutTileData(unsigned index,$/;"	f	class:TerrainLoader
PutTileData	Terrain/RasterTileCache.cpp	/^RasterTileCache::PutTileData(unsigned index,$/;"	f	class:RasterTileCache
PutTurnPoint	Device/Driver/AltairPro.cpp	/^AltairProDevice::PutTurnPoint(const TCHAR *propertyName,$/;"	f	class:AltairProDevice
PutVolume	Device/Descriptor.cpp	/^DeviceDescriptor::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
PutVolume	Device/Driver.cpp	/^AbstractDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:AbstractDevice
PutVolume	Device/Driver/AirControlDisplay.cpp	/^ACDDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:ACDDevice
PutVolume	Device/Driver/LX/Settings.cpp	/^LXDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:LXDevice
PutVolume	Device/Driver/LXERA/Settings.cpp	/^LXEraDevice::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:LXEraDevice
PutVolume	Device/Driver/XCOM760.cpp	/^XCOM760Device::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:XCOM760Device
PutVolume	Device/MultipleDevices.cpp	/^MultipleDevices::PutVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:MultipleDevices
QMFB_JOINBUFSIZE	Terrain/jasper/jpc/jpc_qmfb.c	94;"	d	file:
QMFB_SPLITBUFSIZE	Terrain/jasper/jpc/jpc_qmfb.c	93;"	d	file:
QNH	Dialogs/Settings/dlgBasicSettings.cpp	/^  QNH,$/;"	e	enum:ControlIndex	file:
QNHAltitudeToPressureAltitude	Atmosphere/Pressure.cpp	/^AtmosphericPressure::QNHAltitudeToPressureAltitude(const double alt) const$/;"	f	class:AtmosphericPressure
QNHAltitudeToStaticPressure	Atmosphere/Pressure.cpp	/^AtmosphericPressure::QNHAltitudeToStaticPressure(const double alt) const$/;"	f	class:AtmosphericPressure
QNHProcessTimer	ApplyExternalSettings.cpp	/^QNHProcessTimer()$/;"	f	file:
QNH_TIME	Computer/AutoQNH.hpp	/^  const unsigned QNH_TIME;$/;"	m	class:AutoQNH
QUADRATIC_HPP	Math/Quadratic.hpp	24;"	d
QUADRILATERAL_HPP	Math/Quadrilateral.hpp	24;"	d
QUAD_TREE_HXX	Util/QuadTree.hxx	32;"	d
QUIT	Dialogs/SimulatorPromptWindow.hpp	/^    QUIT,$/;"	e	enum:final::Buttons
QUOTE	Form/DigitEntry.hpp	/^      QUOTE,$/;"	m	class:CoordinateFormat::Column::Type
QuadBucket	Util/QuadTree.hxx	/^	struct QuadBucket {$/;"	s
QuadTree	Util/QuadTree.hxx	/^class QuadTree {$/;"	c
Quadratic	Math/Quadratic.hpp	/^class Quadratic {$/;"	c
QuarterCircle	Math/Angle.hpp	/^  static Angle QuarterCircle() {$/;"	f	class:Angle
QueryAll	Engine/Airspace/Airspaces.hpp	/^  const_iterator_range QueryAll() const {$/;"	f	class:Airspaces
QueryInside	Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryInside(const AircraftState &aircraft) const$/;"	f	class:Airspaces
QueryInside	Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryInside(const GeoPoint &loc) const$/;"	f	class:Airspaces
QueryIntersecting	Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryIntersecting(const GeoPoint &a, const GeoPoint &b) const$/;"	f	class:Airspaces
QueryWithinRange	Cloud/Client.cpp	/^CloudClientContainer::QueryWithinRange(GeoPoint location, double range) const$/;"	f	class:CloudClientContainer
QueryWithinRange	Cloud/Thermal.cpp	/^CloudThermalContainer::QueryWithinRange(GeoPoint location, double range) const$/;"	f	class:CloudThermalContainer
QueryWithinRange	Engine/Airspace/Airspaces.cpp	/^Airspaces::QueryWithinRange(const GeoPoint &location, double range) const$/;"	f	class:Airspaces
QuestionWidget	Widget/QuestionWidget.cpp	/^QuestionWidget::QuestionWidget(const TCHAR *_message,$/;"	f	class:QuestionWidget
QuestionWidget	Widget/QuestionWidget.hpp	/^class QuestionWidget : public SolidWidget {$/;"	c
Queue	Tracking/SkyLines/Queue.hpp	/^class Queue {$/;"	c	namespace:SkyLinesTracking
QueueSize	Engine/Route/AStar.hpp	/^  unsigned QueueSize() const {$/;"	f	class:AStar
QuickMenu	Dialogs/dlgQuickMenu.cpp	/^  QuickMenu(WndForm &_dialog, const Menu &_menu)$/;"	f	class:final
QuickMenuButtonRenderer	Dialogs/dlgQuickMenu.cpp	/^  explicit QuickMenuButtonRenderer(const DialogLook &_look,$/;"	f	class:final
QuickRedraw	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::QuickRedraw()$/;"	f	class:GlueMapWindow
QuietOperationEnvironment	Operation/Operation.hpp	/^class QuietOperationEnvironment : public NullOperationEnvironment {$/;"	c
Quit	Event/Android/Queue.hpp	/^  void Quit() {$/;"	f	class:EventQueue
Quit	Event/Poll/Queue.hpp	/^  void Quit() {$/;"	f	class:final
Quit	Event/SDL/Queue.hpp	/^  void Quit() {$/;"	f	class:EventQueue
R1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD R1:18;$/;"	m	struct:IMI::TObservationZone
R2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD R2:18;$/;"	m	struct:IMI::TObservationZone
RACING	Engine/Task/Factory/TaskFactoryType.hpp	/^  RACING,$/;"	m	class:TaskFactoryType
RADIO	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    RADIO,$/;"	e	enum:final::Controls	file:
RADIUS	Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^  RADIUS,$/;"	e	enum:Controls	file:
RADIUS	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^  RADIUS,$/;"	e	enum:Controls	file:
RADIUS	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  RADIUS,$/;"	e	enum:Controls	file:
RADIUS	Engine/Airspace/AbstractAirspace.cpp	219;"	d	file:
RADIX_TREE_HPP	Util/RadixTree.hpp	31;"	d
RAD_TO_DEG	Math/Constants.hpp	/^static constexpr double RAD_TO_DEG = 57.2957795131;$/;"	v
RANGE	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  RANGE,$/;"	e	enum:Controls	file:
RANGE	Dialogs/Traffic/TeamCodeDialog.cpp	/^    RANGE,$/;"	e	enum:final::Buttons	file:
RANGE_HPP	Util/Range.hpp	31;"	d
RASP	MapWindow/Items/MapItem.hpp	/^    RASP,$/;"	e	enum:TaskPointType::Type
RASP_FILENAME	Weather/Rasp/RaspStore.hpp	38;"	d
RASP_FORMAT	Weather/Rasp/RaspStore.cpp	43;"	d	file:
RASTER_SLOPE_FACT	Terrain/RasterTileCache.hpp	38;"	d
RATE	Dialogs/ReplayDialog.cpp	/^    RATE,$/;"	e	enum:final::Controls	file:
RAW_GPS_DATA	Device/Driver.hpp	/^    RAW_GPS_DATA = 0x40,$/;"	e	enum:DeviceRegister::__anon196
REACHFAN_HPP	Engine/Route/ReachFan.hpp	24;"	d
REACHFAN_PARMS_HPP	Engine/Route/ReachFanParms.hpp	24;"	d
REACH_BUFFER	Engine/Route/FlatTriangleFanTree.cpp	30;"	d	file:
REACH_MAX_DEPTH	Engine/Route/FlatTriangleFanTree.cpp	33;"	d	file:
REACH_MAX_FANS	Engine/Route/FlatTriangleFanTree.hpp	/^  static constexpr unsigned REACH_MAX_FANS = 300;$/;"	m	class:FlatTriangleFanTree
REACH_MAX_VERTICES	Engine/Route/FlatTriangleFanTree.cpp	35;"	d	file:
REACH_MIN_STEP	Engine/Route/FlatTriangleFanTree.cpp	34;"	d	file:
REACH_SWEEP	Engine/Route/FlatTriangleFanTree.cpp	31;"	d	file:
READER_HXX	IO/Reader.hxx	31;"	d
READY	Device/Port/Port.hpp	/^    READY,$/;"	m	class:Port::WaitResult
READY	Device/Port/State.hpp	/^  READY,$/;"	m	class:PortState
READ_FLIGHT_LIST	Device/Driver/LX/Protocol.hpp	/^    READ_FLIGHT_LIST = 0xcd,$/;"	e	enum:LX::Command
READ_FLIGHT_LIST	Device/Driver/LXERA/Protocol.hpp	/^    READ_FLIGHT_LIST = 0xcd,$/;"	e	enum:LXEra::Command
READ_LOGGER_DATA	Device/Driver/LX/Protocol.hpp	/^    READ_LOGGER_DATA = 0xe6,$/;"	e	enum:LX::Command
READ_LOGGER_DATA	Device/Driver/LXERA/Protocol.hpp	/^    READ_LOGGER_DATA = 0xe6,$/;"	e	enum:LXEra::Command
READ_MEMORY_SECTION	Device/Driver/LX/Protocol.hpp	/^    READ_MEMORY_SECTION = 0xcc,$/;"	e	enum:LX::Command
READ_MEMORY_SECTION	Device/Driver/LXERA/Protocol.hpp	/^    READ_MEMORY_SECTION = 0xcc,$/;"	e	enum:LXEra::Command
REAL	Form/DataField/Base.hpp	/^    REAL,$/;"	m	class:DataField::Type
REAL_TIME_KINEMATIC	NMEA/GPSState.hpp	/^  REAL_TIME_KINEMATIC,$/;"	m	class:FixQuality
REARTH	Geo/FAISphere.hpp	/^  static constexpr unsigned REARTH = 6371000;$/;"	m	namespace:FAISphere
REBOOT	Kobo/SystemDialog.cpp	/^    REBOOT,$/;"	e	enum:final::Buttons	file:
RECEIVE_SETTINGS	Device/Driver.hpp	/^    RECEIVE_SETTINGS = 0x80,$/;"	e	enum:DeviceRegister::__anon196
RECINT	Dialogs/Device/LX/NanoConfigWidget.hpp	/^    RECINT,$/;"	e	enum:final::Controls
RECONNECT	Dialogs/Device/DeviceListDialog.cpp	/^    RECONNECT, FLIGHT, EDIT, MANAGE, MONITOR,$/;"	e	enum:final::Buttons	file:
RECONNECT	Dialogs/Device/PortMonitor.cpp	/^  RECONNECT,$/;"	e	enum:Buttons	file:
REDUCED_FUNCTIONALITY	FLARM/Error.hpp	/^    REDUCED_FUNCTIONALITY = 0x02,$/;"	m	struct:FlarmError	typeref:enum:FlarmError::
REFERENCE_MASS	Dialogs/Plane/PlanePolarDialog.cpp	/^    REFERENCE_MASS,$/;"	e	enum:final::Controls	file:
REGISTRATION	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    REGISTRATION,$/;"	e	enum:final::Controls	file:
RELATIVE_BEARING	Dialogs/Traffic/TeamCodeDialog.cpp	/^    RELATIVE_BEARING,$/;"	e	enum:final::Buttons	file:
RELOCATE	Dialogs/Task/OptionalStartsDialog.cpp	/^    RELOCATE,$/;"	e	enum:OptionStartsWidget::Buttons	file:
RELOCATE	Dialogs/Task/TaskPointDialog.cpp	/^    DETAILS, REMOVE, RELOCATE,$/;"	e	enum:final::Buttons	file:
RELOCATE	InfoBoxes/Panel/ATCReference.cpp	/^  RELOCATE,$/;"	e	enum:Controls	file:
REMAINING	Widget/RowFormWidget.hpp	/^      REMAINING,$/;"	m	class:RowFormWidget::Row::Type
REMOVE	Dialogs/Task/OptionalStartsDialog.cpp	/^    REMOVE,$/;"	e	enum:OptionStartsWidget::Buttons	file:
REMOVE	Dialogs/Task/TaskPointDialog.cpp	/^    DETAILS, REMOVE, RELOCATE,$/;"	e	enum:final::Buttons	file:
REMOVE	Dialogs/Weather/NOAADetails.cpp	/^    REMOVE,$/;"	e	enum:final::Buttons	file:
REMOVE	Dialogs/Weather/NOAAList.cpp	/^    REMOVE,$/;"	e	enum:final::Buttons	file:
REMOVE_FROM_TASK	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  REMOVE_FROM_TASK,$/;"	e	enum:Commands	file:
RENAME	Dialogs/Task/Manager/TaskListPanel.cpp	/^    RENAME,$/;"	e	enum:final::Buttons	file:
RENDERBUFFER	Screen/OpenGL/FBO.hpp	/^  static constexpr GLenum RENDERBUFFER = GL_RENDERBUFFER_OES;$/;"	m	namespace:FBO
REPEAT	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    REPEAT,$/;"	e	enum:SwitchesLeft::Controls	file:
REPLACE_IN_TASK	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  REPLACE_IN_TASK,$/;"	e	enum:Commands	file:
REPLAY_HPP	Replay/Replay.hpp	25;"	d
REPOSITORY_URI	Repository/Glue.cpp	30;"	d	file:
REQUEST_EXPIRY	Cloud/Main.cpp	/^static constexpr std::chrono::steady_clock::duration REQUEST_EXPIRY = std::chrono::minutes(5);$/;"	v	file:
REQUIRED_GR	Renderer/WaypointRendererSettings.hpp	/^    REQUIRED_GR,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
REQUIRED_GR_AND_TERRAIN	Renderer/WaypointRendererSettings.hpp	/^    REQUIRED_GR_AND_TERRAIN,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
RESERVABLE_PRIORITY_QUEUE_HPP	Util/ReservablePriorityQueue.hpp	29;"	d
RESET_VALUE	Time/GPSClock.hpp	/^  static constexpr int RESET_VALUE = -99999;$/;"	m	class:GPSClock
RESIZE	Event/Shared/Event.hpp	/^    RESIZE,$/;"	e	enum:Event::Type
RESTRICT	Engine/Airspace/AirspaceClass.hpp	/^  RESTRICT,$/;"	e	enum:uint8_t
RESUME	Event/Shared/Event.hpp	/^    RESUME,$/;"	e	enum:Event::Type
RETROSPECTIVE_HPP	Engine/Contest/Solvers/Retrospective.hpp	24;"	d
REUSABLE_ARRAY_HPP	Util/ReusableArray.hpp	31;"	d
REVERSE	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  REVERSE,$/;"	e	enum:Buttons	file:
REVERSE_LANDSCAPE	Android/NativeView.hpp	/^    REVERSE_LANDSCAPE = 8,$/;"	m	class:NativeView::ScreenOrientation
REVERSE_LANDSCAPE	DisplayOrientation.hpp	/^  REVERSE_LANDSCAPE,$/;"	m	class:DisplayOrientation
REVERSE_PORTRAIT	Android/NativeView.hpp	/^    REVERSE_PORTRAIT = 9,$/;"	m	class:NativeView::ScreenOrientation
REVERSE_PORTRAIT	DisplayOrientation.hpp	/^  REVERSE_PORTRAIT,$/;"	m	class:DisplayOrientation
REVERT	Dialogs/Task/Manager/TaskClosePanel.hpp	/^    REVERT,$/;"	e	enum:final::Buttons
RFCOMM	Device/Config.hpp	/^    RFCOMM,$/;"	m	class:DeviceConfig::PortType
RFCOMM_SERVER	Device/Config.hpp	/^    RFCOMM_SERVER,$/;"	m	class:DeviceConfig::PortType
RFW	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
RF_COMMUNICATION	FLARM/Error.hpp	/^    RF_COMMUNICATION = 0x41,$/;"	e	enum:uint8_t
RGB	Screen/Custom/UncompressedImage.hpp	/^    RGB,$/;"	m	class:UncompressedImage::Format
RGB555Color	Screen/PortableColor.hpp	/^  constexpr RGB555Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:RGB555Color
RGB555Color	Screen/PortableColor.hpp	/^class RGB555Color {$/;"	c
RGB565Color	Screen/PortableColor.hpp	/^  constexpr RGB565Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:RGB565Color
RGB565Color	Screen/PortableColor.hpp	/^class RGB565Color {$/;"	c
RGB8Color	Screen/PortableColor.hpp	/^  constexpr RGB8Color(uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	class:RGB8Color
RGB8Color	Screen/PortableColor.hpp	/^class RGB8Color {$/;"	c
RGB8_BLACK	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_BLACK = RGB8Color(0x00, 0x00, 0x00);$/;"	v
RGB8_BLUE	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_BLUE = RGB8Color(0x00, 0x00, 0xff);$/;"	v
RGB8_BROWN	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_BROWN = RGB8Color(0xb7, 0x64, 0x1e);$/;"	v
RGB8_CYAN	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_CYAN = RGB8Color(0x00, 0xff, 0xff);$/;"	v
RGB8_DARK_GRAY	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_DARK_GRAY = RGB8Color(0x40, 0x40, 0x40);$/;"	v
RGB8_GRAY	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_GRAY = RGB8Color(0x80, 0x80, 0x80);$/;"	v
RGB8_GREEN	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_GREEN = RGB8Color(0x00, 0xff, 0x00);$/;"	v
RGB8_LIGHT_GRAY	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_LIGHT_GRAY = RGB8Color(0xc0, 0xc0, 0xc0);$/;"	v
RGB8_MAGENTA	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_MAGENTA = RGB8Color(0xff, 0x00, 0xff);$/;"	v
RGB8_ORANGE	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_ORANGE = RGB8Color(0xff, 0xa2, 0x00);$/;"	v
RGB8_RED	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_RED = RGB8Color(0xff, 0x00, 0x00);$/;"	v
RGB8_VERY_LIGHT_GRAY	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_VERY_LIGHT_GRAY = RGB8Color(0xd8, 0xd8, 0xd8);$/;"	v
RGB8_WHITE	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_WHITE = RGB8Color(0xff, 0xff, 0xff);$/;"	v
RGB8_YELLOW	Screen/PortableColor.hpp	/^static constexpr RGB8Color RGB8_YELLOW = RGB8Color(0xff, 0xff, 0x00);$/;"	v
RGBA	Screen/Custom/UncompressedImage.hpp	/^    RGBA,$/;"	m	class:UncompressedImage::Format
RGBAImageBegin	Screen/Custom/LibTiff.cpp	/^  void RGBAImageBegin(TIFFRGBAImage &img) {$/;"	f	class:TiffLoader
RGBPixelReader	Screen/Memory/UncompressedImage.hpp	/^struct RGBPixelReader {$/;"	s
RHW	Device/Driver/Volkslogger/vlconv.cpp	/^  char A[10], DTE[10], FXA[10], PLT[80], GTY[50], GID[50], RFW[10], RHW[10],$/;"	m	struct:IGCHEADER	file:
RIGHT	Dialogs/KnobTextEntry.cpp	/^  RIGHT,$/;"	e	enum:Buttons	file:
RIGHT	Form/GridView.hpp	/^    RIGHT,$/;"	m	class:GridView::Direction
RIGHT	Renderer/SymbolRenderer.hpp	/^    RIGHT,$/;"	e	enum:SymbolRenderer::Direction
RIGHT	Renderer/TextInBox.hpp	/^    RIGHT,$/;"	m	struct:TextInBoxMode	typeref:enum:TextInBoxMode::
RIGHT_16	InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_16 = 19,$/;"	m	class:InfoBoxSettings::Geometry
RIGHT_24	InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_24 = 9,$/;"	m	class:InfoBoxSettings::Geometry
RIGHT_5	InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_5 = 7,$/;"	m	class:InfoBoxSettings::Geometry
RIGHT_9_VARIO	InfoBoxes/InfoBoxSettings.hpp	/^    RIGHT_9_VARIO = 6,$/;"	m	class:InfoBoxSettings::Geometry
RIGID_WING_FAI5	Tracking/LiveTrack24.hpp	/^    RIGID_WING_FAI5 = 4,$/;"	m	class:LiveTrack24::VehicleType
RLEDecompress	Device/Driver/IMI/Protocol/Communication.cpp	/^RLEDecompress(IMI::IMIBYTE* dest, const IMI::IMIBYTE *src, unsigned size,$/;"	f	file:
RMC	Device/Parser.cpp	/^NMEAParser::RMC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
RMZ	Device/Parser.cpp	/^NMEAParser::RMZ(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:NMEAParser
RMZ	Engine/Airspace/AirspaceClass.hpp	/^  RMZ,$/;"	e	enum:uint8_t
ROAMING	Net/State.hpp	/^  ROAMING,$/;"	m	class:NetState
ROUGH_TIME	Form/DataField/Base.hpp	/^    ROUGH_TIME,$/;"	m	class:DataField::Type
ROUND	Topography/shapelib/mapprimitive.c	43;"	d	file:
ROUNDED_BLACK	Renderer/LabelShape.hpp	/^  ROUNDED_BLACK,$/;"	m	class:LabelShape
ROUNDED_WHITE	Renderer/LabelShape.hpp	/^  ROUNDED_WHITE,$/;"	m	class:LabelShape
ROUND_PROGRESS_BAR	Screen/ProgressBar.cpp	76;"	d	file:
ROUTE	Device/Driver/Volkslogger/vlapi2.h	/^  struct ROUTE {$/;"	s	class:VLAPI_DATA
ROUTECONFIGPANEL_HPP	Dialogs/Settings/Panels/RouteConfigPanel.hpp	25;"	d
ROUTELINK_HPP	Engine/Route/RouteLink.hpp	24;"	d
ROUTEPOLARS_HPP	Engine/Route/RoutePolars.hpp	24;"	d
ROUTEPOLAR_HPP	Engine/Route/RoutePolar.hpp	23;"	d
ROUTEPOLAR_POINTS	Engine/Route/RoutePolar.hpp	38;"	d
ROUTEPOLAR_Q0	Engine/Route/RoutePolar.hpp	34;"	d
ROUTEPOLAR_Q1	Engine/Route/RoutePolar.hpp	35;"	d
ROUTEPOLAR_Q2	Engine/Route/RoutePolar.hpp	36;"	d
ROUTEPOLAR_Q3	Engine/Route/RoutePolar.hpp	37;"	d
ROUTE_MIN_STEP	Engine/Route/RouteLink.cpp	86;"	d	file:
ROUTE_PLANNER_GLUE_HPP	Task/RoutePlannerGlue.hpp	24;"	d
ROUTE_PLANNER_HPP	Engine/Route/RoutePlanner.hpp	24;"	d
ROUTINELENGTH	Topography/shapelib/maperror.h	91;"	d
RTDistanceSort	Terrain/RasterTileCache.cpp	/^  RTDistanceSort(RasterTileCache &_rtc):rtc(_rtc) {}$/;"	f	struct:RTDistanceSort
RTDistanceSort	Terrain/RasterTileCache.cpp	/^struct RTDistanceSort {$/;"	s	file:
RTTaskFactory	Engine/Task/Factory/RTTaskFactory.cpp	/^RTTaskFactory::RTTaskFactory(OrderedTask& _task,$/;"	f	class:RTTaskFactory
RTTaskFactory	Engine/Task/Factory/RTTaskFactory.hpp	/^class RTTaskFactory: $/;"	c
RT_TASK_FACTORY_HPP	Engine/Task/Factory/RTTaskFactory.hpp	23;"	d
RUN	Tracking/LiveTrack24.hpp	/^    RUN = 16386,$/;"	m	class:LiveTrack24::VehicleType
Radians	Math/Angle.hpp	/^  constexpr double Radians() const {$/;"	f	class:Angle
Radians	Math/Angle.hpp	/^  static constexpr Angle Radians(const double _value) {$/;"	f	class:Angle
RadioFrequency	RadioFrequency.hpp	/^  constexpr RadioFrequency(unsigned _value):value(_value) {}$/;"	f	class:RadioFrequency
RadioFrequency	RadioFrequency.hpp	/^class RadioFrequency {$/;"	c
RadioOffsetButtons	InfoBoxes/Panel/RadioEdit.cpp	/^  RadioOffsetButtons(bool active_freq):OffsetButtonsWidget(UIGlobals::GetDialogLook().button, _T("%.0f KHz"), 5, 1000),set_active_freq(active_freq) {}$/;"	f	class:final
RadioProcess	ApplyExternalSettings.cpp	/^RadioProcess()$/;"	f	file:
RadioSettings	Computer/Settings.hpp	/^struct RadioSettings {$/;"	s
RadixTree	Util/RadixTree.hpp	/^  RadixTree():root(_T("")) {}$/;"	f	class:RadixTree
RadixTree	Util/RadixTree.hpp	/^class RadixTree {$/;"	c
Raise	Lua/Error.cxx	/^Raise(lua_State *L, std::exception_ptr e)$/;"	f	namespace:Lua
Raise	Widget/OverlappedWidget.cpp	/^OverlappedWidget::Raise()$/;"	f	class:OverlappedWidget
RaiseCurrent	Lua/Error.cxx	/^RaiseCurrent(lua_State *L)$/;"	f	namespace:Lua
RandomPointInTask	Engine/Task/TaskManager.cpp	/^TaskManager::RandomPointInTask(const unsigned index, const double mag) const$/;"	f	class:TaskManager
Range	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Range,$/;"	e	enum:final::Controls
Range	Util/Range.hpp	/^  Range(I _begin, I _end)$/;"	f	class:Range
Range	Util/Range.hpp	/^class Range {$/;"	c
Range	Weather/NOAAFormatter.cpp	/^  typedef std::pair<const TCHAR *, unsigned> Range;$/;"	t	class:NOAALineSplitter	file:
RangeAndRadial	Engine/Task/Ordered/Points/AATPoint.hpp	/^struct RangeAndRadial {$/;"	s
RangeMaxWidth	Form/ButtonPanel.cpp	/^ButtonPanel::RangeMaxWidth(unsigned start, unsigned end) const$/;"	f	class:ButtonPanel
RangeScale	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::RangeScale(double d) const$/;"	f	class:FlarmTrafficWindow
Rank	Engine/Airspace/AirspaceIntersectSort.hpp	/^  struct Rank : public std::binary_function<Intersection, Intersection, bool> {$/;"	s	class:AirspaceIntersectSort
Rank	Engine/PathSolvers/Dijkstra.hpp	/^  struct Rank : public std::binary_function<Value, Value, bool> {$/;"	s	class:Dijkstra
Rank	Engine/Route/AStar.hpp	/^  struct Rank: public std::binary_function<NodeValue, NodeValue, bool>$/;"	s	class:AStar
RaspCache	Weather/Rasp/RaspCache.hpp	/^  RaspCache(const RaspStore &_store, unsigned _parameter)$/;"	f	class:RaspCache
RaspCache	Weather/Rasp/RaspCache.hpp	/^class RaspCache {$/;"	c
RaspMapItem	MapWindow/Items/RaspMapItem.hpp	/^  explicit RaspMapItem(const TCHAR *_label)$/;"	f	struct:RaspMapItem
RaspMapItem	MapWindow/Items/RaspMapItem.hpp	/^struct RaspMapItem : public MapItem$/;"	s
RaspProvider	Weather/Rasp/Providers.hpp	/^struct RaspProvider {$/;"	s
RaspProviderRenderer	Dialogs/Weather/RASPDialog.cpp	/^class RaspProviderRenderer : public ListItemRenderer {$/;"	c	file:
RaspRenderer	Weather/Rasp/RaspRenderer.hpp	/^  RaspRenderer(const RaspStore &_store, unsigned parameter)$/;"	f	class:RaspRenderer
RaspRenderer	Weather/Rasp/RaspRenderer.hpp	/^class RaspRenderer {$/;"	c
RaspStore	Weather/Rasp/RaspStore.hpp	/^  explicit RaspStore(AllocatedPath &&_path)$/;"	f	class:RaspStore
RaspStore	Weather/Rasp/RaspStore.hpp	/^class RaspStore {$/;"	c
RaspStyle	Weather/Rasp/RaspStyle.hpp	/^struct RaspStyle {$/;"	s
RasterBuffer	Terrain/RasterBuffer.hpp	/^  RasterBuffer(unsigned _width, unsigned _height)$/;"	f	class:RasterBuffer
RasterBuffer	Terrain/RasterBuffer.hpp	/^class RasterBuffer {$/;"	c
RasterCanvas	Screen/Memory/RasterCanvas.hpp	/^  RasterCanvas(WritableImageBuffer<PixelTraits> _buffer,$/;"	f	class:RasterCanvas
RasterCanvas	Screen/Memory/RasterCanvas.hpp	/^class RasterCanvas : private PixelTraits {$/;"	c
RasterLocation	Terrain/RasterLocation.hpp	/^  constexpr RasterLocation(Args&&... args)$/;"	f	struct:RasterLocation
RasterLocation	Terrain/RasterLocation.hpp	/^struct RasterLocation : Point2D<unsigned> {$/;"	s
RasterMap	Terrain/RasterMap.hpp	/^class RasterMap {$/;"	c
RasterProjection	Terrain/RasterProjection.hpp	/^class RasterProjection {$/;"	c
RasterRenderer	Terrain/RasterRenderer.cpp	/^RasterRenderer::RasterRenderer()$/;"	f	class:RasterRenderer
RasterRenderer	Terrain/RasterRenderer.hpp	/^class RasterRenderer {$/;"	c
RasterTerrain	Terrain/RasterTerrain.hpp	/^  explicit RasterTerrain(ZipArchive &&_archive)$/;"	f	class:RasterTerrain
RasterTerrain	Terrain/RasterTerrain.hpp	/^class RasterTerrain : public Guard<RasterMap> {$/;"	c
RasterTile	Terrain/RasterTile.hpp	/^class RasterTile {$/;"	c
RasterTileCache	Terrain/RasterTileCache.hpp	/^  RasterTileCache() {$/;"	f	class:RasterTileCache
RasterTileCache	Terrain/RasterTileCache.hpp	/^class RasterTileCache {$/;"	c
RasterTraits	Terrain/RasterTraits.hpp	/^namespace RasterTraits {$/;"	n
RateLimitedBlackboardListener	Blackboard/RateLimitedBlackboardListener.hpp	/^class RateLimitedBlackboardListener$/;"	c
RateLimiter	RateLimiter.hpp	/^class RateLimiter {$/;"	c
RatioAndDistance	Computer/WaveComputer.cpp	/^struct RatioAndDistance {$/;"	s	file:
RawBitmap	Screen/GDI/RawBitmap.cpp	/^RawBitmap::RawBitmap(unsigned nWidth, unsigned nHeight)$/;"	f	class:RawBitmap
RawBitmap	Screen/Memory/RawBitmap.cpp	/^RawBitmap::RawBitmap(unsigned nWidth, unsigned nHeight)$/;"	f	class:RawBitmap
RawBitmap	Screen/OpenGL/RawBitmap.cpp	/^RawBitmap::RawBitmap(unsigned nWidth, unsigned nHeight)$/;"	f	class:RawBitmap
RawColor	Screen/RawBitmap.hpp	/^  constexpr RawColor(uint8_t R, uint8_t G, uint8_t B)$/;"	f	struct:RawColor
RawColor	Screen/RawBitmap.hpp	/^struct RawColor$/;"	s
ReClick	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::ReClick()$/;"	f	class:TaskActionsPanel
ReClick	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::ReClick()$/;"	f	class:TaskClosePanel
ReClick	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::ReClick()$/;"	f	class:TaskEditPanel
ReClick	Dialogs/Task/Manager/TaskMiscPanel.cpp	/^TaskMiscPanel::ReClick()$/;"	f	class:TaskMiscPanel
ReClick	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::ReClick()$/;"	f	class:TaskPropertiesPanel
ReClick	Widget/ActionWidget.cpp	/^ActionWidget::ReClick()$/;"	f	class:ActionWidget
ReClick	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::ReClick()$/;"	f	class:ButtonPanelWidget
ReClick	Widget/CallbackWidget.cpp	/^CallbackWidget::ReClick()$/;"	f	class:CallbackWidget
ReClick	Widget/PagerWidget.cpp	/^PagerWidget::ReClick()$/;"	f	class:PagerWidget
ReClick	Widget/SolidWidget.cpp	/^SolidWidget::ReClick()$/;"	f	class:SolidWidget
ReClick	Widget/TwoWidgets.cpp	/^TwoWidgets::ReClick()$/;"	f	class:TwoWidgets
ReClick	Widget/Widget.cpp	/^NullWidget::ReClick()$/;"	f	class:NullWidget
Reach	Computer/RouteComputer.cpp	/^RouteComputer::Reach(const MoreData &basic, DerivedInfo &calculated,$/;"	f	class:RouteComputer
ReachFan	Engine/Route/ReachFan.hpp	/^  ReachFan():terrain_base(0) {}$/;"	f	class:ReachFan
ReachFan	Engine/Route/ReachFan.hpp	/^class ReachFan$/;"	c
ReachFanParms	Engine/Route/ReachFanParms.hpp	/^  ReachFanParms(const RoutePolars& _rpolars,$/;"	f	struct:ReachFanParms
ReachFanParms	Engine/Route/ReachFanParms.hpp	/^struct ReachFanParms {$/;"	s
ReachIntercept	Engine/Route/ReachFanParms.hpp	/^  FlatGeoPoint ReachIntercept(int index, const AFlatGeoPoint &flat_origin,$/;"	f	struct:ReachFanParms
ReachIntercept	Engine/Route/RoutePolars.cpp	/^RoutePolars::ReachIntercept(const int index, const AFlatGeoPoint &flat_origin,$/;"	f	class:RoutePolars
ReachIntersectionTest	Task/ProtectedTaskManager.hpp	/^  ReachIntersectionTest():route(nullptr) {};$/;"	f	class:ReachIntersectionTest
ReachIntersectionTest	Task/ProtectedTaskManager.hpp	/^class ReachIntersectionTest: public AbortIntersectionTest {$/;"	c
ReachMode	Engine/Route/Config.hpp	/^  enum class ReachMode {$/;"	c	struct:RoutePlannerConfig
ReachPolarMode	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  ReachPolarMode,$/;"	e	enum:ControlIndex	file:
ReachPolarMode	Profile/ProfileKeys.cpp	/^const char ReachPolarMode[] = "ReachPolarMode";$/;"	m	namespace:ProfileKeys	file:
ReachResult	Engine/Route/ReachResult.hpp	/^struct ReachResult {$/;"	s
Reachability	Renderer/WaypointIconRenderer.hpp	/^  enum Reachability$/;"	g	class:WaypointIconRenderer
Reachability	Renderer/WaypointRenderer.hpp	/^  enum Reachability$/;"	g	class:WaypointRenderer
ReachableStraight	Renderer/WaypointIconRenderer.hpp	/^    ReachableStraight,$/;"	e	enum:WaypointIconRenderer::Reachability
ReachableStraight	Renderer/WaypointRenderer.hpp	/^    ReachableStraight,$/;"	e	enum:WaypointRenderer::Reachability
ReachableTerrain	Renderer/WaypointIconRenderer.hpp	/^    ReachableTerrain,$/;"	e	enum:WaypointIconRenderer::Reachability
ReachableTerrain	Renderer/WaypointRenderer.hpp	/^    ReachableTerrain,$/;"	e	enum:WaypointRenderer::Reachability
Read	Device/Port/BufferedPort.cpp	/^BufferedPort::Read(void *dest, size_t length)$/;"	f	class:BufferedPort
Read	Device/Port/DumpPort.cpp	/^DumpPort::Read(void *buffer, size_t size)$/;"	f	class:DumpPort
Read	Device/Port/K6BtPort.cpp	/^K6BtPort::Read(void *Buffer, size_t Size)$/;"	f	class:K6BtPort
Read	Device/Port/NullPort.cpp	/^NullPort::Read(void *Buffer, size_t Size)$/;"	f	class:NullPort
Read	Event/Poll/Linux/Input.cpp	/^LinuxInputDevice::Read()$/;"	f	class:LinuxInputDevice
Read	IO/CSVLine.cpp	/^CSVLine::Read(char *dest, size_t size)$/;"	f	class:CSVLine
Read	IO/CSVLine.cpp	/^CSVLine::Read(double default_value)$/;"	f	class:CSVLine
Read	IO/CSVLine.cpp	/^CSVLine::Read(long default_value)$/;"	f	class:CSVLine
Read	IO/CSVLine.hpp	/^  int Read(bool default_value) {$/;"	f	class:CSVLine
Read	IO/CSVLine.hpp	/^  int Read(int default_value) {$/;"	f	class:CSVLine
Read	IO/FileHandle.hpp	/^  size_t Read(void *ptr, size_t size, size_t nmemb) {$/;"	f	class:FileHandle
Read	IO/FileReader.cxx	/^FileReader::Read(void *data, size_t size)$/;"	f	class:FileReader
Read	IO/GunzipReader.cxx	/^GunzipReader::Read(void *data, size_t size)$/;"	f	class:GunzipReader
Read	IO/KeyValueFileReader.cpp	/^KeyValueFileReader::Read(KeyValuePair &pair)$/;"	f	class:KeyValueFileReader
Read	IO/ZipReader.cpp	/^ZipReader::Read(void *data, size_t size)$/;"	f	class:ZipReader
Read	Logger/FlightParser.cpp	/^FlightParser::Read(FlightInfo &flight)$/;"	f	class:FlightParser
Read	OS/EventPipe.cpp	/^EventPipe::Read()$/;"	f	class:EventPipe
Read	Plane/PlaneFileGlue.cpp	/^PlaneGlue::Read(Plane &plane, KeyValueFileReader &reader)$/;"	f	class:PlaneGlue
Read	Screen/Memory/UncompressedImage.hpp	/^  typename PixelTraits::color_type Read(PixelTraits) {$/;"	f	struct:GrayPixelReader
Read	Screen/Memory/UncompressedImage.hpp	/^  typename PixelTraits::color_type Read(PixelTraits) {$/;"	f	struct:RGBPixelReader
Read	Units/UnitsStore.cpp	/^Units::Store::Read(unsigned i)$/;"	f	class:Units::Store
Read16	Cloud/Serialiser.hpp	/^  uint16_t Read16() {$/;"	f	class:Deserialiser
Read32	Cloud/Serialiser.hpp	/^  uint32_t Read32() {$/;"	f	class:Deserialiser
Read64	Cloud/Serialiser.hpp	/^  uint64_t Read64() {$/;"	f	class:Deserialiser
Read8	Cloud/Serialiser.hpp	/^  uint8_t Read8() {$/;"	f	class:Deserialiser
ReadAcceleration	Device/Driver/Eye.cpp	/^EyeDevice::ReadAcceleration(NMEAInputLine &line, AccelerationState &value_r)$/;"	f	class:EyeDevice
ReadActivePilot	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadActivePilot(CAI302::Pilot &pilot, OperationEnvironment &env)$/;"	f	class:CAI302Device
ReadAirspace	Airspace/AirspaceGlue.cpp	/^ReadAirspace(Airspaces &airspaces,$/;"	f
ReadAllFlights	Device/Driver/Volkslogger/Protocol.hpp	/^  ReadAllFlights(Port &port, unsigned baud_rate, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadAltitude	Airspace/AirspaceParser.cpp	/^ReadAltitude(StringParser<TCHAR> &input, AirspaceAltitude &altitude)$/;"	f	file:
ReadAltitude	Device/Driver/AltairPro.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAltitude	Device/Driver/EWMicroRecorder.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAltitude	Device/Driver/IMI/Internal.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAltitude	Device/Parser.cpp	/^ReadAltitude(NMEAInputLine &line, double &value_r)$/;"	f	file:
ReadAssetNumber	Asset.cpp	/^ReadAssetNumber()$/;"	f
ReadBearing	Device/Driver/FLARM/StaticParser.cpp	/^ReadBearing(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadBearing	Device/Parser.cpp	/^ReadBearing(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadBlackboard	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ReadBlackboard(const DerivedInfo &derived_info)$/;"	f	class:DeviceBlackboard
ReadBlackboard	Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::ReadBlackboard(const MoreData &nmea_info)$/;"	f	class:GlideComputerBlackboard
ReadBlackboard	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::ReadBlackboard(const MoreData &_gps_info,$/;"	f	class:CrossSectionRenderer
ReadBlackboard	CrossSection/CrossSectionWindow.hpp	/^  void ReadBlackboard(const MoreData &basic,$/;"	f	class:CrossSectionWindow
ReadBlackboard	HorizonWidget.cpp	/^  void ReadBlackboard(const AttitudeState _attitude) {$/;"	f	class:HorizonWindow
ReadBlackboard	MapWindow/MapWindow.cpp	/^MapWindow::ReadBlackboard(const MoreData &nmea_info,$/;"	f	class:MapWindow
ReadBlackboard	MapWindow/MapWindowBlackboard.cpp	/^MapWindowBlackboard::ReadBlackboard(const MoreData &nmea_info,$/;"	f	class:MapWindowBlackboard
ReadBlackboardBasic	Blackboard/InterfaceBlackboard.cpp	/^InterfaceBlackboard::ReadBlackboardBasic(const MoreData &nmea_info)$/;"	f	class:InterfaceBlackboard
ReadBlackboardBasic	Interface.hpp	/^  static inline void ReadBlackboardBasic(const MoreData &nmea_info) {$/;"	f	namespace:CommonInterface
ReadBlackboardCalculated	Blackboard/InterfaceBlackboard.cpp	/^InterfaceBlackboard::ReadBlackboardCalculated(const DerivedInfo &derived_info)$/;"	f	class:InterfaceBlackboard
ReadBlackboardCalculated	Interface.hpp	/^  static inline void ReadBlackboardCalculated(const DerivedInfo &derived_info) {$/;"	f	namespace:CommonInterface
ReadBufferedLine	Util/TextFile.hxx	/^ReadBufferedLine(B &buffer)$/;"	f
ReadBuiltinLanguage	Language/LanguageGlue.cpp	/^ReadBuiltinLanguage(char dummy)$/;"	f	file:
ReadBuiltinLanguage	Language/LanguageGlue.cpp	/^ReadBuiltinLanguage(const BuiltinLanguage &language)$/;"	f	file:
ReadBulk	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::ReadBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
ReadCRC	Device/Driver/LX/Protocol.cpp	/^LX::ReadCRC(Port &port, void *buffer, size_t length, OperationEnvironment &env,$/;"	f	class:LX
ReadCRC	Device/Driver/LXERA/Protocol.cpp	/^LXEra::ReadCRC(Port &port, void *buffer, size_t length, OperationEnvironment &env,$/;"	f	class:LXEra
ReadChecked	IO/CSVLine.cpp	/^CSVLine::ReadChecked(double &value_r)$/;"	f	class:CSVLine
ReadChecked	IO/CSVLine.cpp	/^CSVLine::ReadChecked(int &value_r)$/;"	f	class:CSVLine
ReadChecked	IO/CSVLine.cpp	/^CSVLine::ReadChecked(long &value_r)$/;"	f	class:CSVLine
ReadChecked	IO/CSVLine.cpp	/^CSVLine::ReadChecked(unsigned &value_r)$/;"	f	class:CSVLine
ReadChecked	IO/CSVLine.cpp	/^CSVLine::ReadChecked(unsigned long &value_r)$/;"	f	class:CSVLine
ReadCheckedCompare	IO/CSVLine.cpp	/^CSVLine::ReadCheckedCompare(double &value_r, const char *string)$/;"	f	class:CSVLine
ReadCheckedRange	Device/Driver/XCTracer/Parser.cpp	/^ReadCheckedRange(NMEAInputLine &line, unsigned &value_r, unsigned min, unsigned max)$/;"	f	file:
ReadCheckedRange	Device/Driver/XCTracer/Parser.cpp	/^ReadCheckedRange(NMEAInputLine &line,double &value_r, double min, double max)$/;"	f	file:
ReadCommonStats	Blackboard/InterfaceBlackboard.hpp	/^  inline void ReadCommonStats(const CommonStats &common_stats) {$/;"	f	class:InterfaceBlackboard
ReadCommonStats	Interface.hpp	/^  static inline void ReadCommonStats(const CommonStats &common_stats) {$/;"	f	namespace:CommonInterface
ReadCompare	IO/CSVLine.cpp	/^CSVLine::ReadCompare(const char *value)$/;"	f	class:CSVLine
ReadComputerSettings	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ReadComputerSettings(const ComputerSettings &settings)$/;"	f	class:DeviceBlackboard
ReadComputerSettings	Blackboard/InterfaceBlackboard.cpp	/^InterfaceBlackboard::ReadComputerSettings(const ComputerSettings$/;"	f	class:InterfaceBlackboard
ReadComputerSettings	Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::ReadComputerSettings(const ComputerSettings &settings)$/;"	f	class:GlideComputerBlackboard
ReadComputerSettings	MapWindow/MapWindowBlackboard.cpp	/^MapWindowBlackboard::ReadComputerSettings(const ComputerSettings$/;"	f	class:MapWindowBlackboard
ReadCoords	Airspace/AirspaceParser.cpp	/^ReadCoords(StringParser<TCHAR> &input, GeoPoint &point)$/;"	f	file:
ReadDatabase	Device/Driver/Volkslogger/Protocol.hpp	/^  ReadDatabase(Port &port, unsigned baud_rate, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadDate	Device/Driver/LX/NanoLogger.cpp	/^ReadDate(NMEAInputLine &line, BrokenDate &date)$/;"	f	file:
ReadDate	Device/Parser.cpp	/^NMEAParser::ReadDate(NMEAInputLine &line, BrokenDate &date)$/;"	f	class:NMEAParser
ReadDouble	Cloud/Serialiser.hpp	/^  double ReadDouble() {$/;"	f	class:Deserialiser
ReadDouble	Plane/PlaneFileGlue.cpp	/^ReadDouble(const char *string, double &out)$/;"	f	file:
ReadDouble	Util/StringParser.hxx	/^	bool ReadDouble(double &value_r) {$/;"	f	class:StringParser
ReadDoubleAndChar	Device/Parser.cpp	/^ReadDoubleAndChar(NMEAInputLine &line, double &d, char &ch)$/;"	f	file:
ReadFile	Plane/PlaneFileGlue.cpp	/^PlaneGlue::ReadFile(Plane &plane, Path path)$/;"	f	class:PlaneGlue
ReadFile	Waypoint/WaypointDetailsReader.cpp	/^WaypointDetails::ReadFile(TLineReader &reader, Waypoints &way_points,$/;"	f	class:WaypointDetails
ReadFileFromProfile	Waypoint/WaypointDetailsReader.cpp	/^WaypointDetails::ReadFileFromProfile(Waypoints &way_points,$/;"	f	class:WaypointDetails
ReadFilename	Device/Driver/LX/NanoLogger.cpp	/^ReadFilename(NMEAInputLine &line, RecordedFlightInfo &info)$/;"	f	file:
ReadFirstChar	IO/CSVLine.cpp	/^CSVLine::ReadFirstChar()$/;"	f	class:CSVLine
ReadFlight	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::ReadFlight(Port &port, unsigned databaud,$/;"	f	class:Volkslogger
ReadFlightInfo	Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::ReadFlightInfo(RecordedFlightInfo &flight,$/;"	f	class:FlarmDevice
ReadFlightList	Device/Descriptor.cpp	/^DeviceDescriptor::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:DeviceDescriptor
ReadFlightList	Device/Driver.cpp	/^AbstractDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:AbstractDevice
ReadFlightList	Device/Driver/CAI302/Logger.cpp	/^CAI302Device::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:CAI302Device
ReadFlightList	Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:FlarmDevice
ReadFlightList	Device/Driver/Flytec/Logger.cpp	/^FlytecDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:FlytecDevice
ReadFlightList	Device/Driver/IMI/Logger.cpp	/^IMIDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:IMIDevice
ReadFlightList	Device/Driver/IMI/Protocol/Protocol.cpp	/^IMI::ReadFlightList(Port &port, RecordedFlightList &flight_list,$/;"	f	class:IMI
ReadFlightList	Device/Driver/LX/Logger.cpp	/^LXDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:LXDevice
ReadFlightList	Device/Driver/LX/NanoLogger.cpp	/^Nano::ReadFlightList(Port &port, RecordedFlightList &flight_list,$/;"	f	class:Nano
ReadFlightList	Device/Driver/Volkslogger/Logger.cpp	/^VolksloggerDevice::ReadFlightList(RecordedFlightList &flight_list,$/;"	f	class:VolksloggerDevice
ReadFlightList	Device/Driver/Volkslogger/Protocol.hpp	/^  ReadFlightList(Port &port, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadFlightListInner	Device/Driver/CAI302/Logger.cpp	/^ReadFlightListInner(Port &port, RecordedFlightList &flight_list,$/;"	f	file:
ReadFlightListInner	Device/Driver/LX/Logger.cpp	/^ReadFlightListInner(Port &port, RecordedFlightList &flight_list,$/;"	f	file:
ReadFlightListInner	Device/Driver/Volkslogger/Logger.cpp	/^ReadFlightListInner(Port &port,$/;"	f	file:
ReadFlightListJob	Logger/ExternalLogger.cpp	/^  ReadFlightListJob(DeviceDescriptor &_device,$/;"	f	class:ReadFlightListJob
ReadFlightListJob	Logger/ExternalLogger.cpp	/^class ReadFlightListJob {$/;"	c	file:
ReadFloat	Cloud/Serialiser.hpp	/^  float ReadFloat() {$/;"	f	class:Deserialiser
ReadFromFile	Kobo/Model.cpp	/^ReadFromFile(const char *path, off_t offset, void *buffer, size_t size)$/;"	f	file:
ReadFull	IO/BufferedReader.cxx	/^BufferedReader::ReadFull(WritableBuffer<void> _dest)$/;"	f	class:BufferedReader
ReadFull	IO/BufferedReader.cxx	/^BufferedReader::ReadFull(size_t size)$/;"	f	class:BufferedReader
ReadGRecordFromFile	Logger/GRecord.cpp	/^GRecord::ReadGRecordFromFile(Path path,$/;"	f	class:GRecord
ReadGeneralInfo	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadGeneralInfo(CAI302::GeneralInfo &data,$/;"	f	class:CAI302Device
ReadGeoAngle	Device/Parser.cpp	/^ReadGeoAngle(NMEAInputLine &line, Angle &a)$/;"	f	file:
ReadGeoPoint	Device/Parser.cpp	/^NMEAParser::ReadGeoPoint(NMEAInputLine &line, GeoPoint &value_r)$/;"	f	class:NMEAParser
ReadHex	IO/CSVLine.cpp	/^CSVLine::ReadHex(unsigned default_value)$/;"	f	class:CSVLine
ReadHexChecked	IO/CSVLine.cpp	/^CSVLine::ReadHexChecked(unsigned &value_r)$/;"	f	class:CSVLine
ReadIGCDeclaration	Task/TaskFileIGC.cpp	/^ReadIGCDeclaration(Path path, IGCDeclarationHeader &header,$/;"	f	file:
ReadIGCMetaData	Logger/ExternalLogger.cpp	/^ReadIGCMetaData(Path path, IGCHeader &header, BrokenDate &date)$/;"	f	file:
ReadInfo	Device/Driver/Volkslogger/Protocol.hpp	/^  ReadInfo(Port &port, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
ReadLanguageFile	Language/LanguageGlue.cpp	/^ReadLanguageFile()$/;"	f
ReadLargeReply	Device/Driver/CAI302/Protocol.cpp	/^CAI302::ReadLargeReply(Port &port, void *buffer, unsigned max_size,$/;"	f	class:CAI302
ReadLatitude	Device/Parser.cpp	/^ReadLatitude(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadLine	Device/Util/NMEAReader.cpp	/^PortNMEAReader::ReadLine(TimeoutClock timeout)$/;"	f	class:PortNMEAReader
ReadLine	IO/BufferedReader.cxx	/^BufferedReader::ReadLine()$/;"	f	class:BufferedReader
ReadLine	IO/ConvertLineReader.cpp	/^ConvertLineReader::ReadLine()$/;"	f	class:ConvertLineReader
ReadLine	IO/FileLineReader.cpp	/^FileLineReaderA::ReadLine()$/;"	f	class:FileLineReaderA
ReadLine	IO/ZipLineReader.cpp	/^ZipLineReaderA::ReadLine()$/;"	f	class:ZipLineReaderA
ReadLine	Logger/FlightParser.cpp	/^FlightParser::ReadLine()$/;"	f	class:FlightParser
ReadLine	Logger/FlightParser.cpp	/^FlightParser::ReadLine(BrokenDateTime &dt)$/;"	f	class:FlightParser
ReadLine	Terrain/WorldFile.cpp	/^ReadLine(NLineReader &reader, double &value_r)$/;"	f	file:
ReadLogbookContent	Device/Driver/LX/NanoLogger.cpp	/^ReadLogbookContent(PortNMEAReader &reader, RecordedFlightInfo &info,$/;"	f	file:
ReadLogbookContents	Device/Driver/LX/NanoLogger.cpp	/^ReadLogbookContents(PortNMEAReader &reader, RecordedFlightList &flight_list,$/;"	f	file:
ReadLogbookLine	Device/Driver/LX/NanoLogger.cpp	/^ReadLogbookLine(PortNMEAReader &reader, TimeoutClock timeout)$/;"	f	file:
ReadLongitude	Device/Parser.cpp	/^ReadLongitude(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadMapSettings	MapWindow/MapWindowBlackboard.cpp	/^MapWindowBlackboard::ReadMapSettings(const MapSettings$/;"	f	class:MapWindowBlackboard
ReadNavpoint	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadNavpoint(unsigned index, CAI302::Navpoint &navpoint,$/;"	f	class:CAI302Device
ReadNavpointCount	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadNavpointCount(OperationEnvironment &env)$/;"	f	class:CAI302Device
ReadNonNegativeAngle	Airspace/AirspaceParser.cpp	/^ReadNonNegativeAngle(StringParser<TCHAR> &input, double max_degrees)$/;"	f	file:
ReadNonNegativeAngleTNP	Airspace/AirspaceParser.cpp	/^ReadNonNegativeAngleTNP(StringParser<TCHAR> &input, Angle &value_r,$/;"	f	file:
ReadOneChar	IO/CSVLine.cpp	/^CSVLine::ReadOneChar()$/;"	f	class:CSVLine
ReadPilotList	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::ReadPilotList(std::vector<CAI302::Pilot> &list,$/;"	f	class:CAI302Device
ReadPixel	Screen/Memory/PixelTraits.hpp	/^  static color_type ReadPixel(const_pointer p) {$/;"	f	struct:BGRAPixelTraits
ReadPixel	Screen/Memory/PixelTraits.hpp	/^  static color_type ReadPixel(const_pointer p) {$/;"	f	struct:GreyscalePixelTraits
ReadPoint	Replay/IgcReplay.cpp	/^IgcReplay::ReadPoint(IGCFix &fix, NMEAInfo &basic)$/;"	f	class:IgcReplay
ReadPolar	Plane/PlaneFileGlue.cpp	/^ReadPolar(const char *string, Plane &plane)$/;"	f	file:
ReadPolarFileFromProfile	Polar/PolarGlue.cpp	/^ReadPolarFileFromProfile(PolarInfo &polar)$/;"	f	file:
ReadPortType	Profile/DeviceConfig.cpp	/^ReadPortType(const ProfileMap &map, unsigned n, DeviceConfig::PortType &type)$/;"	f	file:
ReadResourceLanguageFile	Language/LanguageGlue.cpp	/^ReadResourceLanguageFile(const TCHAR *resource)$/;"	f	file:
ReadShortReply	Device/Driver/CAI302/Protocol.cpp	/^CAI302::ReadShortReply(Port &port, void *buffer, unsigned max_size,$/;"	f	class:CAI302
ReadSpeedVector	Device/Driver/CAI302/Parser.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	Device/Driver/Condor.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	Device/Driver/Eye.cpp	/^EyeDevice::ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	class:EyeDevice
ReadSpeedVector	Device/Driver/ILEC.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	Device/Driver/LX/Parser.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	Device/Driver/LXERA/Parser.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadSpeedVector	Device/Driver/Leonardo.cpp	/^ReadSpeedVector(NMEAInputLine &line, SpeedVector &value_r)$/;"	f	file:
ReadString	Cloud/Serialiser.cpp	/^Deserialiser::ReadString()$/;"	f	class:Deserialiser
ReadString	Device/Driver/LX/Parser.cpp	/^ReadString(NMEAInputLine &line, NarrowString<N> &value)$/;"	f	file:
ReadString	Device/Driver/LXERA/Parser.cpp	/^ReadString(NMEAInputLine &line, NarrowString<N> &value)$/;"	f	file:
ReadString	OS/FileUtil.cpp	/^File::ReadString(Path path, char *buffer, size_t size)$/;"	f	class:File
ReadT	Cloud/Serialiser.hpp	/^  void ReadT(T &value) {$/;"	f	class:Deserialiser
ReadTextFile	XML/Parser.cpp	/^ReadTextFile(Path path, tstring &buffer)$/;"	f	file:
ReadTime	Device/Driver/LX/NanoLogger.cpp	/^ReadTime(NMEAInputLine &line, BrokenTime &time)$/;"	f	file:
ReadTime	Device/Parser.cpp	/^NMEAParser::ReadTime(NMEAInputLine &line, BrokenTime &broken_time,$/;"	f	class:NMEAParser
ReadTimeout	Kobo/WPASupplicant.cpp	/^WPASupplicant::ReadTimeout(void *buffer, size_t length, int timeout_ms)$/;"	f	class:WPASupplicant
ReadUIState	MapWindow/MapWindowBlackboard.hpp	/^  void ReadUIState(const UIState &new_value) {$/;"	f	class:MapWindowBlackboard
ReadUnalignedBE16	OS/ByteOrder.hpp	/^ReadUnalignedBE16(const uint16_t *p)$/;"	f
ReadUnalignedBE32	OS/ByteOrder.hpp	/^ReadUnalignedBE32(const uint32_t *p)$/;"	f
ReadUnalignedLE16	OS/ByteOrder.hpp	/^ReadUnalignedLE16(const uint16_t *p)$/;"	f
ReadUnalignedLE32	OS/ByteOrder.hpp	/^ReadUnalignedLE32(const uint32_t *p)$/;"	f
ReadUnsigned	Plane/PlaneFileGlue.cpp	/^ReadUnsigned(const char *string, unsigned &out)$/;"	f	file:
ReadUnsigned	Util/StringParser.hxx	/^	bool ReadUnsigned(unsigned &value_r, int base=10) {$/;"	f	class:StringParser
ReadUntilRMC	Replay/NmeaReplay.cpp	/^NmeaReplay::ReadUntilRMC(NMEAInfo &data)$/;"	f	class:NmeaReplay
ReadValues	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::ReadValues()$/;"	f	class:TaskPropertiesPanel
ReadValues	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::ReadValues()$/;"	f	class:TaskPointWidget
ReadVariation	Device/Parser.cpp	/^ReadVariation(NMEAInputLine &line, Angle &value_r)$/;"	f	file:
ReadWaypointFile	Waypoint/WaypointReader.cpp	/^ReadWaypointFile(Path path, WaypointFileType file_type,$/;"	f
ReadWaypointFile	Waypoint/WaypointReader.cpp	/^ReadWaypointFile(Path path, Waypoints &way_points,$/;"	f
ReadWaypointFile	Waypoint/WaypointReader.cpp	/^ReadWaypointFile(struct zzip_dir *dir, const char *path,$/;"	f
ReadWorldFile	Terrain/WorldFile.cpp	/^ReadWorldFile(NLineReader &reader, WorldFileData &data)$/;"	f	file:
ReadWorldFile	Terrain/WorldFile.cpp	/^ReadWorldFile(struct zzip_dir *dir, const char *path, WorldFileData &data)$/;"	f	file:
Reader	IO/Reader.hxx	/^class Reader {$/;"	c
Ready	Replay/CatmullRomInterpolator.hpp	/^  Ready() const$/;"	f	class:CatmullRomInterpolator
Ready_Time_Check	Computer/ConditionMonitor/ConditionMonitor.cpp	/^ConditionMonitor::Ready_Time_Check(double T, bool *restart)$/;"	f	class:ConditionMonitor
Ready_Time_Notification	Computer/ConditionMonitor/ConditionMonitor.cpp	/^ConditionMonitor::Ready_Time_Notification(double T)$/;"	f	class:ConditionMonitor
RealPath	LocalPath.cpp	/^RealPath(Path path)$/;"	f	file:
RealState	Blackboard/DeviceBlackboard.hpp	/^  const NMEAInfo &RealState() const { return real_data; }$/;"	f	class:DeviceBlackboard
RealState	Blackboard/DeviceBlackboard.hpp	/^  const NMEAInfo &RealState(unsigned i) const {$/;"	f	class:DeviceBlackboard
Realize	Audio/SLES/Object.hpp	/^    SLresult Realize(bool async) {$/;"	f	class:SLES::Object
Reboot	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::Reboot(OperationEnvironment &env)$/;"	f	class:CAI302Device
Reboot	Device/Driver/CAI302/Protocol.cpp	/^CAI302::Reboot(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
Reboot	Dialogs/Device/ManageCAI302Dialog.cpp	/^    Reboot,$/;"	e	enum:final::Controls	file:
Reboot	Dialogs/Device/ManageFlarmDialog.cpp	/^    Reboot,$/;"	e	enum:final::Controls	file:
Receive	Device/Driver/FLARM/TextProtocol.cpp	/^FlarmDevice::Receive(const char *prefix, char *buffer, size_t length,$/;"	f	class:FlarmDevice
Receive	Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::Receive(Port &port, OperationEnvironment &env,$/;"	f	class:IMI
ReceiveCalculated	ActionInterface.cpp	/^XCSoarInterface::ReceiveCalculated()$/;"	f	class:XCSoarInterface
ReceiveEscaped	Device/Driver/FLARM/BinaryProtocol.cpp	/^FLARM::ReceiveEscaped(Port &port, void *buffer, size_t length,$/;"	f	class:FLARM
ReceiveEscaped	Device/Driver/FLARM/Device.hpp	/^  bool ReceiveEscaped(void *data, size_t length,$/;"	f	class:FlarmDevice
ReceiveFrameHeader	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::ReceiveFrameHeader(FLARM::FrameHeader &header,$/;"	f	class:FlarmDevice
ReceiveGPS	ActionInterface.cpp	/^XCSoarInterface::ReceiveGPS()$/;"	f	class:XCSoarInterface
ReceiveLine	Device/Driver/Flytec/Logger.cpp	/^ReceiveLine(Port &port, char *buffer, size_t length,$/;"	f	file:
ReceivePacket	Device/Driver/LX/Protocol.cpp	/^LX::ReceivePacket(Port &port, Command command,$/;"	f	class:LX
ReceivePacket	Device/Driver/LXERA/Protocol.cpp	/^LXEra::ReceivePacket(Port &port, Command command,$/;"	f	class:LXEra
ReceivePacketRetry	Device/Driver/LX/Protocol.cpp	/^LX::ReceivePacketRetry(Port &port, Command command,$/;"	f	class:LX
ReceivePacketRetry	Device/Driver/LXERA/Protocol.cpp	/^LXEra::ReceivePacketRetry(Port &port, Command command,$/;"	f	class:LXEra
ReceiveSomeUnescape	Device/Driver/FLARM/BinaryProtocol.cpp	/^ReceiveSomeUnescape(Port &port, uint8_t *buffer, size_t length,$/;"	f	file:
Reciprocal	Geo/SpeedVector.hpp	/^  SpeedVector Reciprocal() const {$/;"	f	struct:SpeedVector
Reciprocal	Math/Angle.cpp	/^Angle::Reciprocal() const$/;"	f	class:Angle
Reconnect	Dialogs/Device/PortMonitor.cpp	/^PortMonitorWidget::Reconnect()$/;"	f	class:PortMonitorWidget
ReconnectCurrent	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::ReconnectCurrent()$/;"	f	class:DeviceListWidget
Record	Computer/GlideRatioCalculator.hpp	/^  struct Record {$/;"	s	class:GlideRatioCalculator
Record	FLARM/NameDatabase.hpp	/^    Record(FlarmId _id, const TCHAR *_name)$/;"	f	struct:FlarmNameDatabase::Record
Record	FLARM/NameDatabase.hpp	/^  struct Record {$/;"	s	class:FlarmNameDatabase
Record	Replay/CatmullRomInterpolator.hpp	/^  struct Record {$/;"	s	class:CatmullRomInterpolator
RecordMap	FLARM/FlarmNetDatabase.hpp	/^  typedef std::map<FlarmId, FlarmNetRecord> RecordMap;$/;"	t	class:FlarmNetDatabase
RecordedFlightInfo	Device/RecordedFlight.hpp	/^struct RecordedFlightInfo : FlightInfo {$/;"	s
RecordedFlightList	Device/RecordedFlight.hpp	/^class RecordedFlightList : public StaticArray<RecordedFlightInfo, 128u> {$/;"	c
Rectangle	Screen/GDI/Canvas.hpp	/^  void Rectangle(int left, int top, int right, int bottom) {$/;"	f	class:Canvas
Rectangle	Screen/Memory/Canvas.hpp	/^  void Rectangle(int left, int top, int right, int bottom) {$/;"	f	class:Canvas
Rectangle	Screen/OpenGL/Canvas.hpp	/^  void Rectangle(int left, int top, int right, int bottom) {$/;"	f	class:Canvas
Rectangle	Util/QuadTree.hxx	/^	struct Rectangle {$/;"	s	class:QuadTree
RecursivelySuspensibleThread	Thread/RecursivelySuspensibleThread.hpp	/^  RecursivelySuspensibleThread(const char *_name)$/;"	f	class:RecursivelySuspensibleThread
RecursivelySuspensibleThread	Thread/RecursivelySuspensibleThread.hpp	/^class RecursivelySuspensibleThread : public SuspensibleThread {$/;"	c
Recycle	Android/Bitmap.hpp	/^  static void Recycle(JNIEnv *env, jobject bitmap) {$/;"	f	class:AndroidBitmap
Red	Screen/GDI/Color.hpp	/^  uint8_t Red() const$/;"	f	class:Color
Red	Screen/Memory/Color.hpp	/^  uint8_t Red() const$/;"	f	class:Color
Red	Screen/OpenGL/Color.hpp	/^  Red() const$/;"	f	class:Color
Red	Screen/PortableColor.hpp	/^  constexpr uint8_t Red() const {$/;"	f	class:BGR8Color
Red	Screen/PortableColor.hpp	/^  constexpr uint8_t Red() const {$/;"	f	class:BGRA8Color
Red	Screen/PortableColor.hpp	/^  constexpr uint8_t Red() const {$/;"	f	class:RGB8Color
Refresh	Cloud/Client.cpp	/^CloudClientContainer::Refresh(CloudClient &client,$/;"	f	class:CloudClientContainer
Refresh	Cloud/Client.hpp	/^  void Refresh(const boost::asio::ip::udp::endpoint &_endpoint) {$/;"	f	struct:CloudClient
Refresh	Dialogs/StatusPanels/FlightStatusPanel.cpp	/^FlightStatusPanel::Refresh()$/;"	f	class:FlightStatusPanel
Refresh	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^RulesStatusPanel::Refresh()$/;"	f	class:RulesStatusPanel
Refresh	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^SystemStatusPanel::Refresh()$/;"	f	class:SystemStatusPanel
Refresh	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^TaskStatusPanel::Refresh()$/;"	f	class:TaskStatusPanel
Refresh	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^TimesStatusPanel::Refresh()$/;"	f	class:TimesStatusPanel
Refresh	FLARM/Traffic.hpp	/^  bool Refresh(double Time) {$/;"	f	class:FlarmTraffic::AircraftType
Refresh	GliderLink/Traffic.hpp	/^  bool Refresh(double Time) {$/;"	f	struct:GliderLinkTraffic
Refresh	InfoBoxes/Panel/AltitudeInfo.cpp	/^AltitudeInfoPanel::Refresh()$/;"	f	class:AltitudeInfoPanel
RefreshAltitudeControl	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::RefreshAltitudeControl()$/;"	f	class:FlightSetupPanel
RefreshCalculator	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::RefreshCalculator()$/;"	f	class:TargetWidget
RefreshEditContent	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::RefreshEditContent()$/;"	f	class:InfoBoxesConfigWidget
RefreshEditContentDescription	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::RefreshEditContentDescription()$/;"	f	class:InfoBoxesConfigWidget
RefreshLayout	Form/GridView.cpp	/^GridView::RefreshLayout()$/;"	f	class:GridView
RefreshList	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::RefreshList()$/;"	f	class:DeviceListWidget
RefreshList	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::RefreshList()$/;"	f	class:DownloadFilePickerWidget
RefreshList	Dialogs/FileManager.cpp	/^ManagedFileListWidget::RefreshList()$/;"	f	class:ManagedFileListWidget
RefreshPasteButton	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void RefreshPasteButton() {$/;"	f	class:final
RefreshStatus	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::RefreshStatus()$/;"	f	class:TaskClosePanel
RefreshTargetPoint	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::RefreshTargetPoint()$/;"	f	class:TargetWidget
RefreshView	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::RefreshView()$/;"	f	class:TaskEditPanel
RefreshView	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::RefreshView()$/;"	f	class:TaskListPanel
RefreshView	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::RefreshView()$/;"	f	class:TaskPropertiesPanel
RefreshView	Dialogs/Task/OptionalStartsDialog.cpp	/^  void RefreshView() {$/;"	f	class:OptionStartsWidget
RefreshView	Dialogs/Task/TaskPointDialog.cpp	/^TaskPointWidget::RefreshView()$/;"	f	class:TaskPointWidget
Register	Lua/Class.hxx	/^	static void Register(lua_State *L) {$/;"	f	struct:Lua::Class
Register	Lua/InputEvent.cpp	/^  void Register(int this_idx) {$/;"	f	class:final	file:
RegisterCallback	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLresult RegisterCallback(slAndroidSimpleBufferQueueCallback callback,$/;"	f	class:SLES::AndroidSimpleBufferQueue
RegistryHandler	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::RegistryHandler(struct wl_registry *registry, uint32_t id,$/;"	f	class:WaylandEventQueue
RegistryKey	Config/Registry.hpp	/^  RegistryKey(HKEY hParent, const TCHAR *key, bool read_only) {$/;"	f	class:RegistryKey
RegistryKey	Config/Registry.hpp	/^  RegistryKey(RegistryKey &&other):hKey(other.hKey) {$/;"	f	class:RegistryKey
RegistryKey	Config/Registry.hpp	/^class RegistryKey {$/;"	c
Reinitialise	Look/AirspaceLook.cpp	/^AirspaceLook::Reinitialise(const AirspaceRendererSettings &settings)$/;"	f	class:AirspaceLook
Reinitialise	Look/WaypointLook.cpp	/^WaypointLook::Reinitialise(const WaypointRendererSettings &settings)$/;"	f	class:WaypointLook
ReinitialiseLayout	Dialogs/WidgetDialog.cpp	/^WidgetDialog::ReinitialiseLayout(const PixelRect &parent_rc)$/;"	f	class:WidgetDialog
ReinitialiseLayout	Form/Form.cpp	/^WndForm::ReinitialiseLayout(const PixelRect &parent_rc)$/;"	f	class:WndForm
ReinitialiseLayout	Look/InfoBoxLook.cpp	/^InfoBoxLook::ReinitialiseLayout(unsigned width)$/;"	f	class:InfoBoxLook
ReinitialiseLayout	Look/Look.cpp	/^Look::ReinitialiseLayout(unsigned infobox_width)$/;"	f	class:Look
ReinitialiseLayout	MainWindow.cpp	/^MainWindow::ReinitialiseLayout()$/;"	f	class:MainWindow
ReinitialiseLayoutTA	MainWindow.cpp	/^MainWindow::ReinitialiseLayoutTA(PixelRect rc,$/;"	f	class:MainWindow
ReinitialiseLayout_flarm	MainWindow.cpp	/^MainWindow::ReinitialiseLayout_flarm(PixelRect rc,$/;"	f	class:MainWindow
ReinitialiseLayout_vario	MainWindow.cpp	/^MainWindow::ReinitialiseLayout_vario(const InfoBoxLayout::Layout &layout)$/;"	f	class:MainWindow
RelativePath	LocalPath.cpp	/^RelativePath(Path path)$/;"	f
RelativeTo	OS/Path.cpp	/^Path::RelativeTo(Path parent) const$/;"	f	class:Path
RelativeTo	OS/Path.hpp	/^  Path RelativeTo(Path parent) const {$/;"	f	class:AllocatedPath
Reload	Weather/Rasp/RaspCache.cpp	/^RaspCache::Reload(BrokenTime time_local, OperationEnvironment &operation)$/;"	f	class:RaspCache
ReloadFlarmDatabases	FLARM/Glue.cpp	/^ReloadFlarmDatabases()$/;"	f
Relocate	Dialogs/Task/OptionalStartsDialog.cpp	/^OptionStartsWidget::Relocate(unsigned ItemIndex)$/;"	f	class:OptionStartsWidget
Relocate	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Relocate(const unsigned position, $/;"	f	class:AbstractTaskFactory
Relocate	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Relocate(const unsigned position, WaypointPtr &&waypoint)$/;"	f	class:OrderedTask
RelocateOptionalStart	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RelocateOptionalStart(const unsigned position,$/;"	f	class:OrderedTask
Remaining	Engine/GlideSolvers/GlueGlideState.cpp	/^GlideState::Remaining(const TaskPoint &tp,$/;"	f	class:GlideState
RemainingDistance	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  RemainingDistance,$/;"	e	enum:Controls	file:
RemainingPercent	Android/Battery.cpp	/^    unsigned RemainingPercent = 0;$/;"	m	namespace:Power::Battery	file:
RemainingPercent	Hardware/Battery.cpp	/^    unsigned RemainingPercent = 0;$/;"	m	namespace:Power::Battery	file:
RemainingPercentValid	Android/Battery.cpp	/^    bool RemainingPercentValid = false;$/;"	m	namespace:Power::Battery	file:
RemainingPercentValid	Hardware/Battery.cpp	/^    bool RemainingPercentValid = false;$/;"	m	namespace:Power::Battery	file:
RemainingTime	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  RemainingTime,$/;"	e	enum:Controls	file:
Remove	Cloud/Client.cpp	/^CloudClientContainer::Remove(CloudClient &client)$/;"	f	class:CloudClientContainer
Remove	Cloud/Thermal.cpp	/^CloudThermalContainer::Remove(CloudThermal &thermal)$/;"	f	class:CloudThermalContainer
Remove	Dialogs/Task/OptionalStartsDialog.cpp	/^OptionStartsWidget::Remove(unsigned i)$/;"	f	class:OptionStartsWidget
Remove	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Remove(const unsigned position, $/;"	f	class:AbstractTaskFactory
Remove	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Remove(const unsigned position)$/;"	f	class:OrderedTask
Remove	Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::Remove(const WaypointPtr &wp)$/;"	f	class:Waypoints::WaypointNameTree
Remove	FLARM/ColorDatabase.hpp	/^  void Remove(FlarmId id) {$/;"	f	class:FlarmColorDatabase
Remove	Lua/InputEvent.cpp	/^  bool Remove(const LuaInputEvent* code) {$/;"	f	class:LuaEventRegistry
Remove	Math/LeastSquares.cpp	/^LeastSquares::Remove(const unsigned i)$/;"	f	class:LeastSquares
Remove	Net/HTTP/Multi.cpp	/^Net::CurlMulti::Remove(CURL *easy)$/;"	f	class:Net::CurlMulti
Remove	Net/HTTP/Session.hpp	/^    void Remove(CURL *easy) {$/;"	f	class:Net::Session
Remove	Screen/Custom/WList.hpp	/^  void Remove(Window &w) {$/;"	f	class:WindowList
Remove	Util/Cache.hxx	/^	void Remove(K &&key) {$/;"	f	class:Cache
Remove	Util/RadixTree.hpp	/^    bool Remove(const T &value) {$/;"	f	struct:RadixTree::LeafList
Remove	Util/RadixTree.hpp	/^  bool Remove(const TCHAR *key, const T &value) {$/;"	f	class:RadixTree
Remove	Util/RadixTree.hpp	/^  void Remove(const TCHAR *key) {$/;"	f	class:RadixTree
RemoveAllPoints	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RemoveAllPoints()$/;"	f	class:OrderedTask
RemoveClicked	Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::RemoveClicked()$/;"	f	class:NOAADetailsWidget
RemoveClicked	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::RemoveClicked()$/;"	f	class:NOAAListWidget
RemoveExcessTPsPerTaskType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::RemoveExcessTPsPerTaskType()$/;"	f	class:AbstractTaskFactory
RemoveFromTask	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^RemoveFromTask(ProtectedTaskManager &task_manager,$/;"	f	file:
RemoveFromTask	Task/MapTaskManager.cpp	/^MapTaskManager::RemoveFromTask(const Waypoint &wp)$/;"	f	class:MapTaskManager
RemoveFromTask	Task/MapTaskManager.cpp	/^RemoveFromTask(OrderedTask *task, const Waypoint &waypoint)$/;"	f	file:
RemoveIf	Util/Cache.hxx	/^	void RemoveIf(P &&p) {$/;"	f	class:Cache
RemoveListener	Android/DownloadManager.cpp	/^AndroidDownloadManager::RemoveListener(Net::DownloadListener &listener)$/;"	f	class:AndroidDownloadManager
RemoveListener	Blackboard/LiveBlackboard.cpp	/^LiveBlackboard::RemoveListener(BlackboardListener &listener)$/;"	f	class:LiveBlackboard
RemoveListener	Interface.hpp	/^  static inline void RemoveListener(BlackboardListener &listener) {$/;"	f	namespace:CommonInterface
RemoveListener	Net/HTTP/DownloadManager.cpp	/^  void RemoveListener(Net::DownloadListener &listener) {$/;"	f	class:final
RemoveListener	Net/HTTP/DownloadManager.cpp	/^Net::DownloadManager::RemoveListener(DownloadListener &listener)$/;"	f	class:Net::DownloadManager
RemoveNetwork	Kobo/WPASupplicant.cpp	/^WPASupplicant::RemoveNetwork(unsigned id)$/;"	f	class:WPASupplicant
RemoveOldest	Util/Cache.hxx	/^	Item &RemoveOldest() {$/;"	f	class:Cache
RemoveOptionalStart	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RemoveOptionalStart(const unsigned position)$/;"	f	class:OrderedTask
RemovePersistent	Lua/InputEvent.cpp	/^  void RemovePersistent() {$/;"	f	class:final
RemovePersistent	Lua/Persistent.cpp	/^Lua::RemovePersistent(lua_State *L, void *p)$/;"	f	class:Lua
RemovePointer	Event/Poll/Linux/MergeMouse.hpp	/^  void RemovePointer() {$/;"	f	class:final
RemovePortListener	Device/MultipleDevices.cpp	/^MultipleDevices::RemovePortListener(PortListener &listener)$/;"	f	class:MultipleDevices
RemoveSource	Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::RemoveSource(PCMDataSource &source)$/;"	f	class:PCMMixerDataSource
RemoveSurfaceListener	Screen/OpenGL/Surface.cpp	/^RemoveSurfaceListener(GLSurfaceListener &listener)$/;"	f
RemoveValue	Util/RadixTree.hpp	/^    bool RemoveValue(const T &value) {$/;"	f	struct:RadixTree::Node
RemoveValue	Util/RadixTree.hpp	/^    bool RemoveValue(const TCHAR *key, const T &value) {$/;"	f	struct:RadixTree::Node
RemoveValues	Util/RadixTree.hpp	/^    void RemoveValues() {$/;"	f	struct:RadixTree::Node
RemoveValues	Util/RadixTree.hpp	/^    void RemoveValues(const TCHAR *key) {$/;"	f	struct:RadixTree::Node
Rename	OS/FileUtil.hpp	/^  Rename(Path oldpath, Path newpath)$/;"	f	namespace:File
RenameTask	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::RenameTask()$/;"	f	class:TaskListPanel
Render	CrossSection/AirspaceXSRenderer.cpp	/^AirspaceIntersectionVisitorSlice::Render(const AbstractAirspace &as) const$/;"	f	class:AirspaceIntersectionVisitorSlice
Render	MapWindow/GlueMapWindowEvents.cpp	/^GlueMapWindow::Render(Canvas &canvas, const PixelRect &rc)$/;"	f	class:GlueMapWindow
Render	MapWindow/MapWindowRender.cpp	/^MapWindow::Render(Canvas &canvas, const PixelRect &rc)$/;"	f	class:MapWindow
Render	PopupMessage.cpp	/^PopupMessage::Render()$/;"	f	class:PopupMessage
Render	Screen/Apple/Font.cpp	/^Font::Render(const TCHAR *text, const PixelSize size, void *buffer) const$/;"	f	class:Font
Render	Screen/FreeType/Font.cpp	/^Font::Render(const TCHAR *text, const PixelSize size, void *_buffer) const$/;"	f	class:Font
RenderAirspace	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderAirspace(Canvas &canvas)$/;"	f	class:MapWindow
RenderAirspace	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderAirspace(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderAxis	Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::RenderAxis(ChartRenderer &chart,$/;"	f	class:TraceHistoryRenderer
RenderBarograph	Renderer/BarographRenderer.cpp	/^RenderBarograph(Canvas &canvas, const PixelRect rc,$/;"	f
RenderBarographSpark	Renderer/BarographRenderer.cpp	/^RenderBarographSpark(Canvas &canvas, const PixelRect rc,$/;"	f
RenderBox	CrossSection/AirspaceXSRenderer.cpp	/^AirspaceIntersectionVisitorSlice::RenderBox(const PixelRect rc,$/;"	f	class:AirspaceIntersectionVisitorSlice
RenderClimbChart	Renderer/ClimbChartRenderer.cpp	/^RenderClimbChart(Canvas &canvas, const PixelRect rc,$/;"	f
RenderFAISector	Renderer/FAITriangleAreaRenderer.cpp	/^RenderFAISector(Canvas &canvas, const WindowProjection &projection,$/;"	f
RenderFAISectors	Gauge/TaskView.cpp	/^RenderFAISectors(Canvas &canvas, const WindowProjection &projection,$/;"	f	file:
RenderFAISectors	MapWindow/MapWindowContest.cpp	/^RenderFAISectors(Canvas &canvas, const WindowProjection &projection,$/;"	f	file:
RenderFinalGlideShading	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderFinalGlideShading(Canvas &canvas)$/;"	f	class:MapWindow
RenderGlide	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderGlide(Canvas &canvas)$/;"	f	class:MapWindow
RenderGlidePolar	Renderer/GlidePolarRenderer.cpp	/^RenderGlidePolar(Canvas &canvas, const PixelRect rc,$/;"	f
RenderGlidePolarInfo	Renderer/GlidePolarInfoRenderer.cpp	/^RenderGlidePolarInfo(Canvas &canvas, const PixelRect rc,$/;"	f
RenderGlyph	Screen/FreeType/Font.cpp	/^RenderGlyph(uint8_t *buffer, size_t width, size_t height,$/;"	f	file:
RenderGlyph	Screen/FreeType/Font.cpp	/^RenderGlyph(uint8_t *buffer, unsigned buffer_width, unsigned buffer_height,$/;"	f	file:
RenderMacCready	Renderer/MacCreadyRenderer.cpp	/^RenderMacCready(Canvas &canvas, const PixelRect rc,$/;"	f
RenderMapScale	Renderer/MapScaleRenderer.cpp	/^RenderMapScale(Canvas &canvas,$/;"	f
RenderNOAAStations	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderNOAAStations(Canvas &canvas)$/;"	f	class:MapWindow
RenderOLC	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::RenderOLC(Canvas &canvas, const PixelRect rc,$/;"	f	class:FlightStatisticsRenderer
RenderOverlays	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderOverlays(Canvas &canvas)$/;"	f	class:MapWindow
RenderRasp	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderRasp(Canvas &canvas)$/;"	f	class:MapWindow
RenderShadowedText	Renderer/TextInBox.cpp	/^RenderShadowedText(Canvas &canvas, const TCHAR *text,$/;"	f	file:
RenderSpeed	Renderer/TaskSpeedRenderer.cpp	/^RenderSpeed(Canvas &canvas, const PixelRect rc,$/;"	f
RenderTask	Renderer/FlightStatisticsRenderer.cpp	/^FlightStatisticsRenderer::RenderTask(Canvas &canvas, const PixelRect rc,$/;"	f	class:FlightStatisticsRenderer
RenderTaskLegs	Renderer/TaskLegRenderer.cpp	/^RenderTaskLegs(ChartRenderer &chart,$/;"	f
RenderTemperatureChart	Renderer/CuRenderer.cpp	/^RenderTemperatureChart(Canvas &canvas, const PixelRect rc,$/;"	f
RenderTerrain	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTerrain(Canvas &canvas)$/;"	f	class:MapWindow
RenderTerrain	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTerrain(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderTerrainAbove	MapWindow/MapWindowGlideRange.cpp	/^MapWindow::RenderTerrainAbove(Canvas &canvas, bool working)$/;"	f	class:MapWindow
RenderText	Screen/Memory/Canvas.cpp	/^RenderText(const Font *font, const TCHAR *text)$/;"	f	file:
RenderTopography	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTopography(Canvas &canvas)$/;"	f	class:MapWindow
RenderTopography	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTopography(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderTopographyLabels	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTopographyLabels(Canvas &canvas)$/;"	f	class:MapWindow
RenderTopographyLabels	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTopographyLabels(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderTrackBearing	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::RenderTrackBearing(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:GlueMapWindow
RenderTrackBearing	MapWindow/MapWindowRender.cpp	/^MapWindow::RenderTrackBearing(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:MapWindow
RenderTrail	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::RenderTrail(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:GlueMapWindow
RenderTrail	MapWindow/MapWindowTrail.cpp	/^MapWindow::RenderTrail(Canvas &canvas, const PixelPoint aircraft_pos)$/;"	f	class:MapWindow
RenderTrail	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::RenderTrail(Canvas &canvas)$/;"	f	class:TargetMapWindow
RenderVario	Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::RenderVario(Canvas& canvas,$/;"	f	class:TraceHistoryRenderer
RenderVarioHistogram	Renderer/VarioHistogramRenderer.cpp	/^RenderVarioHistogram(Canvas &canvas, const PixelRect rc,$/;"	f
RenderWindChart	Renderer/WindChartRenderer.cpp	/^RenderWindChart(Canvas &canvas, const PixelRect rc,$/;"	f
RenderbufferStorage	Screen/OpenGL/FBO.cpp	/^FBO::RenderbufferStorage(GLenum target, GLenum internalformat,$/;"	f	class:FBO
RenderedText	Screen/Custom/Cache.cpp	/^  RenderedText(RenderedText &&other)$/;"	f	struct:RenderedText
RenderedText	Screen/Custom/Cache.cpp	/^  RenderedText(int id, unsigned width, unsigned height,$/;"	f	struct:RenderedText
RenderedText	Screen/Custom/Cache.cpp	/^  RenderedText(unsigned _width, unsigned _height, uint8_t *_data)$/;"	f	struct:RenderedText
RenderedText	Screen/Custom/Cache.cpp	/^  RenderedText(unsigned width, unsigned height, const uint8_t *buffer) {$/;"	f	struct:RenderedText
RenderedText	Screen/Custom/Cache.cpp	/^struct RenderedText {$/;"	s	file:
Reopen	Device/Descriptor.cpp	/^DeviceDescriptor::Reopen(OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
Repaint	Screen/DoubleBufferWindow.hpp	/^  void Repaint() {$/;"	f	class:DoubleBufferWindow
Repeat	PopupMessage.cpp	/^PopupMessage::Repeat(Type type)$/;"	f	class:PopupMessage
RepeatBallast	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatBallast(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatBugs	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatBugs(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatIdealPolar	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatIdealPolar(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatMacCready	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatMacCready(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepeatRealPolar	Device/Driver/OpenVario.cpp	/^OpenVarioDevice::RepeatRealPolar(OperationEnvironment &env)$/;"	f	class:OpenVarioDevice
RepetitiveSound	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  RepetitiveSound,$/;"	e	enum:ControlIndex	file:
RepetitiveSound	Profile/ProfileKeys.cpp	/^const char RepetitiveSound[] = "RepetitiveSound";$/;"	m	namespace:ProfileKeys	file:
Replace	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Replace(const OrderedTaskPoint &new_tp,$/;"	f	class:AbstractTaskFactory
Replace	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Replace(const OrderedTaskPoint &new_tp, const unsigned position)$/;"	f	class:OrderedTask
Replace	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Replace(const WaypointPtr &orig, Waypoint &&replacement)$/;"	f	class:Waypoints
Replace	GliderLink/List.hpp	/^  void Replace(const GliderLinkTrafficList &add) {$/;"	f	struct:GliderLinkTrafficList
Replace	OS/FileUtil.hpp	/^  Replace(Path oldpath, Path newpath)$/;"	f	namespace:File
Replace	Util/Cache.hxx	/^		void Replace(K &&_key, U &&_data) {$/;"	f	struct:Cache::Pair
Replace	Util/Cache.hxx	/^		void Replace(K &&_key, U &&value) {$/;"	f	class:Cache::Item
ReplaceBaseName	OS/PathName.cpp	/^ReplaceBaseName(TCHAR *path, const TCHAR *new_base)$/;"	f
ReplaceData	Util/Cache.hxx	/^		void ReplaceData(U &&_data) {$/;"	f	struct:Cache::Pair
ReplaceData	Util/Cache.hxx	/^		void ReplaceData(U &&value) {$/;"	f	class:Cache::Item
ReplaceHighestByte64	Tracking/SkyLines/Key.cpp	/^ReplaceHighestByte64(uint64_t value, uint64_t new_highest_byte)$/;"	f	file:
ReplaceInTask	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^ReplaceInTask(ProtectedTaskManager &task_manager,$/;"	f	file:
ReplaceInTask	Task/MapTaskManager.cpp	/^MapTaskManager::ReplaceInTask(WaypointPtr &&waypoint)$/;"	f	class:MapTaskManager
ReplaceInTask	Task/MapTaskManager.cpp	/^ReplaceInTask(OrderedTask *task, WaypointPtr &&waypoint)$/;"	f	file:
ReplaceOptionalStart	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ReplaceOptionalStart(const OrderedTaskPoint &new_tp,$/;"	f	class:OrderedTask
ReplaceProfilePathBase	Dialogs/Waypoint/WaypointList.cpp	/^ReplaceProfilePathBase(DataFieldEnum &df, unsigned i,$/;"	f	file:
Replay	Replay/Replay.hpp	/^  Replay(Logger *_logger, ProtectedTaskManager &_task_manager)$/;"	f	class:final
ReplayClock	Time/ReplayClock.hpp	/^class ReplayClock {$/;"	c
ReplayControlWidget	Dialogs/ReplayDialog.cpp	/^  ReplayControlWidget(const DialogLook &look)$/;"	f	class:final
Request	Net/HTTP/Request.cpp	/^Net::Request::Request(Session &_session, ResponseHandler &_handler,$/;"	f	class:Net::Request
Request	Net/HTTP/Request.hpp	/^  class Request {$/;"	c	namespace:Net
RequestAll	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^RequestAll(BlueFlyDevice &device)$/;"	f	file:
RequestAll	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::RequestAll()$/;"	f	class:VegaParametersWidget
RequestAllSettings	Dialogs/Device/FLARM/ConfigWidget.cpp	/^RequestAllSettings(FlarmDevice &device)$/;"	f	file:
RequestAllSettings	Dialogs/Device/LX/NanoConfigWidget.cpp	/^RequestAllSettings(LXDevice &device)$/;"	f	file:
RequestAllSettings	Dialogs/Device/LX/V7ConfigWidget.cpp	/^RequestAllSettings(LXDevice &device)$/;"	f	file:
RequestArm	Computer/GlideComputerInterface.cpp	/^GlideComputerTaskEvents::RequestArm(const TaskWaypoint &tp)$/;"	f	class:GlideComputerTaskEvents
RequestArm	Engine/Task/TaskEvents.hpp	/^  virtual void RequestArm(gcc_unused const TaskWaypoint &tp) {}$/;"	f	class:TaskEvents
RequestFlight	Device/Driver/LX/NanoLogger.cpp	/^RequestFlight(Port &port, const char *filename,$/;"	f	file:
RequestForwardedInfo	Device/Driver/LX/NanoProtocol.hpp	/^  RequestForwardedInfo(Port &port, OperationEnvironment &env)$/;"	f	namespace:Nano
RequestInfo	Device/Driver/LX/NanoProtocol.hpp	/^  RequestInfo(Port &port, OperationEnvironment &env)$/;"	f	namespace:Nano
RequestLogbookContents	Device/Driver/LX/NanoLogger.cpp	/^RequestLogbookContents(Port &port, unsigned start, unsigned end,$/;"	f	file:
RequestLogbookInfo	Device/Driver/LX/NanoLogger.cpp	/^RequestLogbookInfo(Port &port, OperationEnvironment &env)$/;"	f	file:
RequestNanoSetting	Device/Driver/LX/Settings.cpp	/^LXDevice::RequestNanoSetting(const char *name, OperationEnvironment &env)$/;"	f	class:LXDevice
RequestSetting	Device/Driver/FLARM/Settings.cpp	/^FlarmDevice::RequestSetting(const char *name, OperationEnvironment &env)$/;"	f	class:FlarmDevice
RequestSetting	Device/Driver/Vega/Settings.cpp	/^VegaDevice::RequestSetting(const char *name, OperationEnvironment &env)$/;"	f	class:VegaDevice
RequestSettings	Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::RequestSettings(OperationEnvironment &env)$/;"	f	class:BlueFlyDevice
RequestUserName	Tracking/SkyLines/Glue.hpp	/^  void RequestUserName(uint32_t user_id) {$/;"	f	class:SkyLinesTracking::Glue
RequestV7Setting	Device/Driver/LX/Settings.cpp	/^LXDevice::RequestV7Setting(const char *name, OperationEnvironment &env)$/;"	f	class:LXDevice
Reserve	Engine/Route/AStar.hpp	/^  void Reserve(unsigned size) {$/;"	f	class:AStar
Reset	Airspace/AirspaceParser.cpp	/^  Reset()$/;"	f	struct:TempAirspaceType
Reset	Atmosphere/CuSonde.cpp	/^CuSonde::Reset()$/;"	f	class:CuSonde
Reset	Atmosphere/CuSonde.hpp	/^    void Reset() {$/;"	f	struct:CuSonde::Level
Reset	Computer/AutoQNH.cpp	/^AutoQNH::Reset()$/;"	f	class:AutoQNH
Reset	Computer/AverageVarioComputer.cpp	/^AverageVarioComputer::Reset()$/;"	f	class:AverageVarioComputer
Reset	Computer/CirclingComputer.cpp	/^CirclingComputer::Reset()$/;"	f	class:CirclingComputer
Reset	Computer/ClimbAverageCalculator.cpp	/^ClimbAverageCalculator::Reset()$/;"	f	class:ClimbAverageCalculator
Reset	Computer/ClimbAverageCalculator.hpp	/^    void Reset() {$/;"	f	struct:ClimbAverageCalculator::HistoryItem
Reset	Computer/ContestComputer.hpp	/^  void Reset() {$/;"	f	class:ContestComputer
Reset	Computer/CuComputer.cpp	/^CuComputer::Reset()$/;"	f	class:CuComputer
Reset	Computer/Events.cpp	/^GlideComputerEvents::Reset()$/;"	f	class:GlideComputerEvents
Reset	Computer/FlyingComputer.cpp	/^FlyingComputer::Reset()$/;"	f	class:FlyingComputer
Reset	Computer/GlideRatioComputer.cpp	/^GlideRatioComputer::Reset()$/;"	f	class:GlideRatioComputer
Reset	Computer/LiftDatabaseComputer.cpp	/^LiftDatabaseComputer::Reset(LiftDatabase &lift_database,$/;"	f	class:LiftDatabaseComputer
Reset	Computer/LogComputer.cpp	/^LogComputer::Reset()$/;"	f	class:LogComputer
Reset	Computer/ThermalBandComputer.cpp	/^ThermalBandComputer::Reset()$/;"	f	class:ThermalBandComputer
Reset	Computer/ThermalLocator.cpp	/^ThermalLocator::Reset()$/;"	f	class:ThermalLocator
Reset	Computer/TraceComputer.cpp	/^TraceComputer::Reset()$/;"	f	class:TraceComputer
Reset	Computer/WarningComputer.hpp	/^  void Reset() {$/;"	f	class:WarningComputer
Reset	Computer/WaveComputer.hpp	/^  void Reset() {$/;"	f	class:WaveComputer
Reset	Computer/Wind/CirclingWind.cpp	/^CirclingWind::Reset()$/;"	f	class:CirclingWind
Reset	Computer/Wind/Computer.cpp	/^WindComputer::Reset()$/;"	f	class:WindComputer
Reset	Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::Reset()$/;"	f	class:WindMeasurementList
Reset	Computer/Wind/WindEKFGlue.cpp	/^WindEKFGlue::Reset()$/;"	f	class:WindEKFGlue
Reset	Device/Driver/IMI/Protocol/MessageParser.cpp	/^IMI::MessageParser::Reset()$/;"	f	class:IMI::MessageParser
Reset	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::Reset(Port &port, OperationEnvironment &env, unsigned n)$/;"	f	class:Volkslogger
Reset	Device/Driver/Volkslogger/Protocol.hpp	/^  static inline bool Reset(Port &port, OperationEnvironment &env) {$/;"	f	namespace:Volkslogger
Reset	Device/Parser.cpp	/^NMEAParser::Reset()$/;"	f	class:NMEAParser
Reset	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::Reset(const AircraftState &state)$/;"	f	class:AirspaceWarningManager
Reset	Engine/Contest/ContestManager.cpp	/^ContestManager::Reset()$/;"	f	class:ContestManager
Reset	Engine/Contest/ContestResult.hpp	/^  void Reset() {$/;"	f	struct:ContestResult
Reset	Engine/Contest/ContestStatistics.hpp	/^  void Reset() {$/;"	f	struct:ContestStatistics
Reset	Engine/GlideSolvers/GlideResult.cpp	/^GlideResult::Reset()$/;"	f	class:GlideResult
Reset	Engine/Navigation/Aircraft.cpp	/^AircraftState::Reset()$/;"	f	class:AircraftState
Reset	Engine/Navigation/Aircraft.cpp	/^AltitudeState::Reset()$/;"	f	class:AltitudeState
Reset	Engine/Navigation/Aircraft.hpp	/^  void Reset() {$/;"	f	struct:SpeedState
Reset	Engine/Navigation/Aircraft.hpp	/^  void Reset(){$/;"	f	struct:VarioState
Reset	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::Reset()$/;"	f	class:AirspaceRoute
Reset	Engine/Route/ReachFan.cpp	/^ReachFan::Reset()$/;"	f	class:ReachFan
Reset	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::Reset()$/;"	f	class:RoutePlanner
Reset	Engine/Task/AbstractTask.cpp	/^AbstractTask::Reset()$/;"	f	class:AbstractTask
Reset	Engine/Task/Computer/ElementStatComputer.cpp	/^ElementStatComputer::Reset(ElementStat &data)$/;"	f	class:ElementStatComputer
Reset	Engine/Task/Computer/IncrementalSpeedComputer.cpp	/^IncrementalSpeedComputer::Reset(DistanceStat &data)$/;"	f	class:IncrementalSpeedComputer
Reset	Engine/Task/Computer/TaskStatsComputer.cpp	/^TaskStatsComputer::Reset(TaskStats &data)$/;"	f	class:TaskStatsComputer
Reset	Engine/Task/Computer/WindowStatsComputer.hpp	/^  void Reset() {$/;"	f	class:WindowStatsComputer
Reset	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::Reset()$/;"	f	class:OrderedTask
Reset	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::Reset()$/;"	f	class:FinishPoint
Reset	Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::Reset()$/;"	f	class:TaskAdvance
Reset	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::Reset()$/;"	f	class:SampledTaskPoint
Reset	Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::Reset()$/;"	f	class:ScoredTaskPoint
Reset	Engine/Task/Stats/CommonStats.cpp	/^CommonStats::Reset()$/;"	f	class:CommonStats
Reset	Engine/Task/Stats/DistanceStat.hpp	/^  void Reset() {$/;"	f	class:DistanceStat
Reset	Engine/Task/Stats/ElementStat.cpp	/^ElementStat::Reset()$/;"	f	class:ElementStat
Reset	Engine/Task/Stats/StartStats.hpp	/^  void Reset() {$/;"	f	struct:StartStats
Reset	Engine/Task/Stats/TaskVario.hpp	/^  void Reset() {$/;"	f	class:TaskVario
Reset	Engine/Task/Stats/WindowStats.hpp	/^  void Reset() {$/;"	f	struct:WindowStats
Reset	Engine/Task/TaskManager.cpp	/^TaskManager::Reset()$/;"	f	class:TaskManager
Reset	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::Reset()$/;"	f	class:AbortTask
Reset	Engine/Task/Unordered/AlternateTask.cpp	/^AlternateTask::Reset()$/;"	f	class:AlternateTask
Reset	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Reset()$/;"	f	class:ThermalBand
Reset	Engine/ThermalBand/ThermalSlice.hpp	/^     void Reset() {$/;"	f	struct:ThermalSlice
Reset	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::Reset(const AircraftState &state)$/;"	f	class:AircraftStateFilter
Reset	FlightStatistics.cpp	/^void FlightStatistics::Reset() {$/;"	f	class:FlightStatistics
Reset	Form/ScrollBar.cpp	/^ScrollBar::Reset()$/;"	f	class:ScrollBar
Reset	Geo/Flat/TaskProjection.cpp	/^TaskProjection::Reset(const GeoPoint &ref)$/;"	f	class:TaskProjection
Reset	Logger/FlightLogger.cpp	/^FlightLogger::Reset()$/;"	f	class:FlightLogger
Reset	Logger/LoggerFRecord.cpp	/^LoggerFRecord::Reset()$/;"	f	class:LoggerFRecord
Reset	MapWindow/GlueMapWindowDisplayMode.cpp	/^OffsetHistory::Reset()$/;"	f	class:OffsetHistory
Reset	Math/AvFilter.hpp	/^  void Reset() {$/;"	f	class:AvFilter
Reset	Math/DiffFilter.cpp	/^DiffFilter::Reset(const double x0, const double y0)$/;"	f	class:DiffFilter
Reset	Math/Filter.cpp	/^Filter::Reset(const double _x)$/;"	f	class:Filter
Reset	Math/Histogram.cpp	/^void Histogram::Reset(double minx, double maxx)$/;"	f	class:Histogram
Reset	Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Reset()$/;"	f	class:KalmanFilter1d
Reset	Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Reset(const double x_abs_value)$/;"	f	class:KalmanFilter1d
Reset	Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Reset(const double x_abs_value, const double x_vel_value)$/;"	f	class:KalmanFilter1d
Reset	Math/LeastSquares.cpp	/^LeastSquares::Reset()$/;"	f	class:LeastSquares
Reset	Math/SelfTimingKalmanFilter1d.hpp	/^  void Reset() {$/;"	f	class:SelfTimingKalmanFilter1d
Reset	Math/SelfTimingKalmanFilter1d.hpp	/^  void Reset(const double x_abs_value) {$/;"	f	class:SelfTimingKalmanFilter1d
Reset	Math/SelfTimingKalmanFilter1d.hpp	/^  void Reset(const double x_abs_value, const double x_vel_value) {$/;"	f	class:SelfTimingKalmanFilter1d
Reset	Math/WindowFilter.hpp	/^  void Reset() {$/;"	f	class:WindowFilter
Reset	Monitor/AirspaceWarningMonitor.cpp	/^AirspaceWarningMonitor::Reset()$/;"	f	class:AirspaceWarningMonitor
Reset	Monitor/AllMonitors.hpp	/^  void Reset() {$/;"	f	class:final
Reset	Monitor/MatTaskMonitor.hpp	/^  void Reset() {$/;"	f	class:MatTaskMonitor
Reset	Monitor/TaskAdvanceMonitor.hpp	/^  void Reset() {$/;"	f	class:TaskAdvanceMonitor
Reset	Monitor/TaskConstraintsMonitor.hpp	/^  void Reset() {$/;"	f	class:TaskConstraintsMonitor
Reset	Monitor/WindMonitor.hpp	/^  void Reset() {$/;"	f	class:WindMonitor
Reset	NMEA/Acceleration.hpp	/^  void Reset() {$/;"	f	struct:AccelerationState
Reset	NMEA/Attitude.hpp	/^  void Reset() {$/;"	f	struct:AttitudeState
Reset	NMEA/Derived.cpp	/^DerivedInfo::Reset()$/;"	f	class:DerivedInfo
Reset	NMEA/FlyingState.cpp	/^FlyingState::Reset()$/;"	f	class:FlyingState
Reset	NMEA/GPSState.cpp	/^GPSState::Reset()$/;"	f	class:GPSState
Reset	NMEA/Info.cpp	/^NMEAInfo::Reset()$/;"	f	class:NMEAInfo
Reset	NMEA/MoreData.cpp	/^MoreData::Reset()$/;"	f	class:MoreData
Reset	NMEA/SwitchState.cpp	/^SwitchState::Reset()$/;"	f	class:SwitchState
Reset	NMEA/VegaSwitchState.hpp	/^  void Reset() {$/;"	f	struct:VegaSwitchState
Reset	Renderer/ChartRenderer.cpp	/^ChartRenderer::Axis::Reset()$/;"	f	class:ChartRenderer::Axis
Reset	Replay/CatmullRomInterpolator.hpp	/^  Reset()$/;"	f	class:CatmullRomInterpolator
Reset	Screen/Android/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	Screen/Custom/DoubleClick.hpp	/^  void Reset() {$/;"	f	class:DoubleClick
Reset	Screen/GDI/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	Screen/Icon.hpp	/^  void Reset() {$/;"	f	class:MaskedIcon
Reset	Screen/Memory/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	Screen/OpenGL/Bitmap.cpp	/^Bitmap::Reset()$/;"	f	class:Bitmap
Reset	Task/ProtectedRoutePlanner.hpp	/^  void Reset() {$/;"	f	class:ProtectedRoutePlanner
Reset	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::Reset()$/;"	f	class:ProtectedTaskManager
Reset	Task/RoutePlannerGlue.hpp	/^  void Reset() {$/;"	f	class:RoutePlannerGlue
Reset	Terrain/RasterBuffer.hpp	/^  void Reset() {$/;"	f	class:RasterBuffer
Reset	Terrain/RasterTileCache.cpp	/^RasterTileCache::Reset()$/;"	f	class:RasterTileCache
Reset	Thread/Trigger.hpp	/^  void Reset() {$/;"	f	class:Trigger
Reset	Time/DeltaTime.hpp	/^  void Reset() {$/;"	f	class:DeltaTime
Reset	Time/GPSClock.hpp	/^  void Reset() {$/;"	f	class:GPSClock
Reset	Time/PeriodClock.hpp	/^  void Reset() {$/;"	f	class:PeriodClock
Reset	Time/ReplayClock.hpp	/^  void Reset() {$/;"	f	class:ReplayClock
Reset	Time/WrapClock.hpp	/^  void Reset() {$/;"	f	class:WrapClock
Reset	Topography/TopographyStore.cpp	/^TopographyStore::Reset()$/;"	f	class:TopographyStore
Reset	Util/AllocatedGrid.hxx	/^	void Reset() {$/;"	f	class:AllocatedGrid
Reset	Weather/ParsedMETAR.hpp	/^  void Reset() {$/;"	f	struct:ParsedMETAR
ResetAutoMC	Engine/Task/AbstractTask.cpp	/^AbstractTask::ResetAutoMC()$/;"	f	class:AbstractTask
ResetBlackout	Computer/Wind/WindEKFGlue.hpp	/^  void ResetBlackout() {$/;"	f	class:WindEKFGlue
ResetCurrent	Computer/WaveComputer.cpp	/^WaveComputer::ResetCurrent()$/;"	f	class:WaveComputer
ResetDeviceDetection	Device/Driver/LX/Internal.hpp	/^  void ResetDeviceDetection() {$/;"	f	class:LXDevice
ResetDeviceDetection	Device/Driver/LXERA/Internal.hpp	/^  void ResetDeviceDetection() {$/;"	f	class:LXEraDevice
ResetFailureCounter	Device/Descriptor.hpp	/^  void ResetFailureCounter() {$/;"	f	class:final
ResetFlight	Computer/GlideComputer.cpp	/^GlideComputer::ResetFlight(const bool full)$/;"	f	class:GlideComputer
ResetFlight	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ResetFlight(DerivedInfo &calculated,$/;"	f	class:GlideComputerAirData
ResetFlight	Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::ResetFlight(const bool full)$/;"	f	class:GlideComputerBlackboard
ResetFlight	Computer/RouteComputer.cpp	/^RouteComputer::ResetFlight()$/;"	f	class:RouteComputer
ResetFlight	Computer/StatsComputer.cpp	/^StatsComputer::ResetFlight(const bool full)$/;"	f	class:StatsComputer
ResetFlight	Computer/TaskComputer.cpp	/^TaskComputer::ResetFlight(const bool full)$/;"	f	class:TaskComputer
ResetIncrementalSpeed	Engine/Task/Computer/DistanceStatComputer.hpp	/^  void ResetIncrementalSpeed(DistanceStat &data) {$/;"	f	class:DistanceStatComputer
ResetIndex	Renderer/TaskPointRenderer.hpp	/^  void ResetIndex() {$/;"	f	class:TaskPointRenderer
ResetPoints	Engine/Task/Ordered/OrderedTask.cpp	/^ResetPoints(OrderedTask::OrderedTaskPointVector &points)$/;"	f	file:
ResetScale	Renderer/ChartRenderer.cpp	/^ChartRenderer::ResetScale()$/;"	f	class:ChartRenderer
ResetSession	Tracking/TrackingGlue.hpp	/^    void ResetSession() {$/;"	f	struct:final::LiveTrack24State
ResetStats	Computer/CirclingComputer.cpp	/^CirclingComputer::ResetStats()$/;"	f	class:CirclingComputer
ResetStats	Computer/GlideComputerAirData.hpp	/^  void ResetStats() {$/;"	f	class:GlideComputerAirData
ResetTNP	Airspace/AirspaceParser.cpp	/^  ResetTNP()$/;"	f	struct:TempAirspaceType
ResetTask	Engine/Task/Stats/CommonStats.cpp	/^CommonStats::ResetTask()$/;"	f	class:CommonStats
ResetTask	Engine/Task/TaskManager.cpp	/^TaskManager::ResetTask()$/;"	f	class:TaskManager
ResetTask	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::ResetTask()$/;"	f	class:ProtectedTaskManager
ResetTaskView	Dialogs/Task/Manager/Internal.hpp	/^  void ResetTaskView() {$/;"	f	class:final
ResetUserIdle	Event/Idle.cpp	/^ResetUserIdle()$/;"	f
ResetVector	Engine/Airspace/AirspaceSorter.cpp	/^AirspaceSelectInfo::ResetVector()$/;"	f	class:AirspaceSelectInfo
ResetVector	Waypoint/WaypointList.cpp	/^WaypointListItem::ResetVector()$/;"	f	class:WaypointListItem
Resizable	Screen/TopWindow.hpp	/^  void Resizable() {$/;"	f	class:DisplayOrientation
Resize	Screen/GDI/BufferCanvas.cpp	/^BufferCanvas::Resize(PixelSize new_size)$/;"	f	class:BufferCanvas
Resize	Screen/GDI/Canvas.hpp	/^  void Resize(PixelSize new_size) {$/;"	f	class:Canvas
Resize	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::Resize(PixelSize new_size)$/;"	f	class:BufferCanvas
Resize	Screen/VirtualCanvas.hpp	/^  void Resize(PixelSize new_size) {$/;"	f	class:VirtualCanvas
Resize	Terrain/RasterBuffer.cpp	/^RasterBuffer::Resize(unsigned _width, unsigned _height)$/;"	f	class:RasterBuffer
ResizeButton	Widget/KeyboardWidget.cpp	/^KeyboardWidget::ResizeButton(unsigned ch,$/;"	f	class:KeyboardWidget
ResizeButtons	Widget/KeyboardWidget.cpp	/^KeyboardWidget::ResizeButtons()$/;"	f	class:KeyboardWidget
ResizeDiscard	Screen/OpenGL/Texture.cpp	/^GLTexture::ResizeDiscard(PixelSize new_size)$/;"	f	class:GLTexture
ResizeToHeight	Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::ResizeToHeight(const double height)$/;"	f	class:ThermalEncounterBand
ResourceId	ResourceId.hpp	/^  constexpr explicit ResourceId(const void *_begin, const size_t *_size_ptr)$/;"	f	class:ResourceId
ResourceId	ResourceId.hpp	/^  constexpr explicit ResourceId(unsigned _id)$/;"	f	class:ResourceId
ResourceId	ResourceId.hpp	/^class ResourceId {$/;"	c
ResourceLoader	ResourceLoader.hpp	/^namespace ResourceLoader {$/;"	n
ResourceLoaderInstance	ResourceLoader.cpp	/^static HINSTANCE ResourceLoaderInstance;$/;"	v	file:
ResponseData	Net/HTTP/Request.cpp	/^Net::Request::ResponseData(const uint8_t *ptr, size_t size)$/;"	f	class:Net::Request
ResponseHandler	Net/HTTP/Handler.hpp	/^  class ResponseHandler : public DataHandler {$/;"	c	namespace:Net
Rest	IO/CSVLine.hpp	/^  Range<const char *> Rest() const {$/;"	f	class:CSVLine
Restart	Audio/ToneSynthesiser.hpp	/^  void Restart() {$/;"	f	class:ToneSynthesiser
Restart	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::Restart(OperationEnvironment &env)$/;"	f	class:FlarmDevice
Restart	Engine/Route/AStar.hpp	/^  void Restart(const Node &node) {$/;"	f	class:AStar
Restore	PageActions.cpp	/^PageActions::Restore()$/;"	f	class:PageActions
RestoreBottom	PageActions.cpp	/^PageActions::RestoreBottom()$/;"	f	class:PageActions
RestoreExtra	Widget/TabWidget.cpp	/^TabWidget::RestoreExtra()$/;"	f	class:TabWidget
RestoreFinish	Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::RestoreFinish()$/;"	f	class:GlideComputerBlackboard
RestoreMapScale	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::RestoreMapScale()$/;"	f	class:GlueMapWindow
RestoreMapZoom	PageActions.cpp	/^PageActions::RestoreMapZoom()$/;"	f	class:PageActions
RestoreOrientation	Hardware/DisplayGlue.cpp	/^Display::RestoreOrientation()$/;"	f	class:Display
RestoreTaskView	Dialogs/Task/Manager/Internal.hpp	/^  void RestoreTaskView() {$/;"	f	class:final
Result	Computer/Wind/CirclingWind.hpp	/^    Result() {}$/;"	f	struct:CirclingWind::Result
Result	Computer/Wind/CirclingWind.hpp	/^    Result(unsigned _quality):quality(_quality) {}$/;"	f	struct:CirclingWind::Result
Result	Computer/Wind/CirclingWind.hpp	/^    Result(unsigned _quality, SpeedVector _wind)$/;"	f	struct:CirclingWind::Result
Result	Computer/Wind/CirclingWind.hpp	/^  struct Result$/;"	s	class:CirclingWind
Result	Computer/Wind/WindEKFGlue.hpp	/^    Result() {}$/;"	f	struct:WindEKFGlue::Result
Result	Computer/Wind/WindEKFGlue.hpp	/^    Result(int _quality):quality(_quality) {}$/;"	f	struct:WindEKFGlue::Result
Result	Computer/Wind/WindEKFGlue.hpp	/^  struct Result$/;"	s	class:WindEKFGlue
Result	Engine/GlideSolvers/MacCready.cpp	/^  GlideResult Result(const double v_init) {$/;"	f	class:MacCreadyVopt
Result	Math/SunEphemeris.hpp	/^  struct Result {$/;"	s	namespace:SunEphemeris
Result	Screen/Custom/Cache.hpp	/^  typedef GLTexture *Result;$/;"	t	namespace:TextCache
Results	XML/Parser.hpp	/^  struct Results {$/;"	s	namespace:XML
Resume	Engine/Task/TaskManager.hpp	/^  void Resume() {$/;"	f	class:TaskManager
Resume	Screen/OpenGL/TopCanvas.cpp	/^TopCanvas::Resume()$/;"	f	class:TopCanvas
Resume	Thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::Resume()$/;"	f	class:RecursivelySuspensibleThread
ResumeAllThreads	Protection.cpp	/^ResumeAllThreads()$/;"	f
ResumeThreads	MainWindow.cpp	/^MainWindow::ResumeThreads()$/;"	f	class:MainWindow
ResumeThreads	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::ResumeThreads()$/;"	f	class:GlueMapWindow
RethrowException	Java/Exception.cxx	/^Java::RethrowException(JNIEnv *env)$/;"	f	class:Java
Retrospective	Engine/Contest/Solvers/Retrospective.hpp	/^class Retrospective {$/;"	c
Return	Device/Descriptor.cpp	/^DeviceDescriptor::Return()$/;"	f	class:DeviceDescriptor
ReturnExtraButton	Dialogs/Settings/dlgConfiguration.cpp	/^ConfigPanel::ReturnExtraButton(unsigned i)$/;"	f	class:ConfigPanel
ReusableArray	Util/ReusableArray.hpp	/^  ReusableArray(ReusableArray<T> &&other)$/;"	f	class:ReusableArray
ReusableArray	Util/ReusableArray.hpp	/^  ReusableArray(size_type _length):array(_length) {}$/;"	f	class:ReusableArray
ReusableArray	Util/ReusableArray.hpp	/^class ReusableArray {$/;"	c
ReverseTask	Dialogs/Task/Manager/TaskEditPanel.cpp	/^void TaskEditPanel::ReverseTask()$/;"	f	class:TaskEditPanel
Revert	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::Revert()$/;"	f	class:VegaParametersWidget
Revert	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::Revert()$/;"	f	class:TaskManagerDialog
Rewind	IO/FileLineReader.hpp	/^  void Rewind() {$/;"	f	class:FileLineReader
Rewind	IO/FileLineReader.hpp	/^  void Rewind() {$/;"	f	class:FileLineReaderA
Rewind	IO/FileReader.hxx	/^	void Rewind() {$/;"	f	class:final
RiskFactor	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  RiskFactor,$/;"	e	enum:ControlIndex	file:
RiskGamma	Profile/ProfileKeys.cpp	/^const char RiskGamma[] = "RiskGamma";$/;"	m	namespace:ProfileKeys	file:
RmMod	Kobo/System.cpp	/^RmMod(const char *name)$/;"	f	file:
RootDC	Screen/GDI/RootDC.hpp	/^  RootDC()$/;"	f	class:RootDC
RootDC	Screen/GDI/RootDC.hpp	/^class RootDC {$/;"	c
Rotate	Geo/Flat/FlatLine.cpp	/^FlatLine::Rotate(const Angle theta)$/;"	f	class:FlatLine
Rotate	Geo/Flat/FlatPoint.cpp	/^FlatPoint::Rotate(const Angle angle)$/;"	f	class:FlatPoint
Rotate	Hardware/RotateDisplay.cpp	/^Display::Rotate(DisplayOrientation orientation)$/;"	f	class:Display
Rotate	Math/FastRotation.cpp	/^FastIntegerRotation::Rotate(int x, int y) const$/;"	f	class:FastIntegerRotation
Rotate	Math/FastRotation.cpp	/^FastRotation::Rotate(double x, double y) const$/;"	f	class:FastRotation
Rotate	Math/FastRotation.hpp	/^  Point Rotate(Point p) const {$/;"	f	class:FastIntegerRotation
Rotate	Math/FastRotation.hpp	/^  Point Rotate(Point p) const {$/;"	f	class:FastRotation
Rotate	Math/FastRotation.hpp	/^  Point Rotate(int x) const {$/;"	f	class:FastRowRotation
RotateInitialize	Hardware/RotateDisplay.cpp	/^Display::RotateInitialize()$/;"	f	class:Display
RotateOptionalStarts	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RotateOptionalStarts()$/;"	f	class:OrderedTask
RotatePointer	Event/Shared/RotatePointer.hpp	/^class RotatePointer {$/;"	c
RotateRestore	Hardware/RotateDisplay.cpp	/^Display::RotateRestore()$/;"	f	class:Display
RotateSupported	Hardware/RotateDisplay.cpp	/^Display::RotateSupported()$/;"	f	class:Display
RotatedPolygonRenderer	Renderer/RotatedPolygonRenderer.hpp	/^  RotatedPolygonRenderer(const BulkPixelPoint *src, unsigned n,$/;"	f	class:RotatedPolygonRenderer
RotatedPolygonRenderer	Renderer/RotatedPolygonRenderer.hpp	/^class RotatedPolygonRenderer {$/;"	c
RoughAltitude	Rough/RoughAltitude.hpp	/^  RoughAltitude(double _value) {$/;"	f	class:RoughAltitude
RoughAltitude	Rough/RoughAltitude.hpp	/^  RoughAltitude(int _value):value((short)_value) {}$/;"	f	class:RoughAltitude
RoughAltitude	Rough/RoughAltitude.hpp	/^  RoughAltitude(short _value):value(_value) {}$/;"	f	class:RoughAltitude
RoughAltitude	Rough/RoughAltitude.hpp	/^class RoughAltitude {$/;"	c
RoughAngle	Rough/RoughAngle.hpp	/^  RoughAngle(Angle _value):value(Import(_value)) {}$/;"	f	class:RoughAngle
RoughAngle	Rough/RoughAngle.hpp	/^  RoughAngle(int16_t _value):value(_value) {}$/;"	f	class:RoughAngle
RoughAngle	Rough/RoughAngle.hpp	/^class RoughAngle {$/;"	c
RoughDistance	Rough/RoughDistance.hpp	/^  RoughDistance(double _value):value(_value) {}$/;"	f	class:RoughDistance
RoughDistance	Rough/RoughDistance.hpp	/^class RoughDistance {$/;"	c
RoughSpeed	Rough/RoughSpeed.hpp	/^  RoughSpeed(double _value):value(Import(_value)) {}$/;"	f	class:RoughSpeed
RoughSpeed	Rough/RoughSpeed.hpp	/^class RoughSpeed {$/;"	c
RoughTime	Time/RoughTime.hpp	/^  constexpr RoughTime(uint16_t _value)$/;"	f	class:RoughTime
RoughTime	Time/RoughTime.hpp	/^  constexpr RoughTime(unsigned hour, unsigned minute)$/;"	f	class:RoughTime
RoughTime	Time/RoughTime.hpp	/^class RoughTime {$/;"	c
RoughTimeDataField	Form/DataField/RoughTime.hpp	/^  RoughTimeDataField(RoughTime _value, RoughTimeDelta _time_zone,$/;"	f	class:final
RoughTimeDelta	Time/RoughTime.hpp	/^  constexpr RoughTimeDelta(int16_t _value)$/;"	f	class:RoughTimeDelta
RoughTimeDelta	Time/RoughTime.hpp	/^class RoughTimeDelta {$/;"	c
RoughTimeSpan	Time/RoughTime.hpp	/^  constexpr RoughTimeSpan(RoughTime _start, RoughTime _end)$/;"	f	class:RoughTimeSpan
RoughTimeSpan	Time/RoughTime.hpp	/^class RoughTimeSpan {$/;"	c
RoughVSpeed	Rough/RoughVSpeed.hpp	/^  RoughVSpeed(double _value):value(Import(_value)) {}$/;"	f	class:RoughVSpeed
RoughVSpeed	Rough/RoughVSpeed.hpp	/^class RoughVSpeed {$/;"	c
RoundLocation	Geo/Flat/FlatGeoPoint.hpp	/^  void RoundLocation() {$/;"	f	struct:AFlatGeoPoint
RoundTime	Engine/Route/RoutePolars.cpp	/^RoutePolars::RoundTime(const unsigned val)$/;"	f	class:RoutePolars
RoundingRightShift	Math/Shift.hpp	/^RoundingRightShift(T value, unsigned bits)$/;"	f
RoundingRightShift	Terrain/RasterLocation.hpp	/^  constexpr RasterLocation RoundingRightShift(unsigned bits) const {$/;"	f	struct:RasterLocation
RoundingRightShift	Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation RoundingRightShift(unsigned bits) const {$/;"	f	struct:SignedRasterLocation
Route	Device/Driver/Volkslogger/Database.hpp	/^  struct Route {$/;"	s	namespace:Volkslogger
Route	Engine/Route/Route.hpp	/^typedef std::vector<AGeoPoint> Route;$/;"	t
RouteAirspaceIntersection	Engine/Route/AirspaceRoute.hpp	/^    RouteAirspaceIntersection(const AbstractAirspace *_airspace,$/;"	f	struct:AirspaceRoute::RouteAirspaceIntersection
RouteAirspaceIntersection	Engine/Route/AirspaceRoute.hpp	/^  struct RouteAirspaceIntersection {$/;"	s	class:AirspaceRoute
RouteComputer	Computer/RouteComputer.cpp	/^RouteComputer::RouteComputer(const Airspaces &airspace_database,$/;"	f	class:RouteComputer
RouteComputer	Computer/RouteComputer.hpp	/^class RouteComputer {$/;"	c
RouteConfigPanel	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RouteConfigPanel()$/;"	f	class:final
RouteLink	Engine/Route/RouteLink.cpp	/^RouteLink::RouteLink (const RouteLinkBase& _link, const FlatProjection &proj)$/;"	f	class:RouteLink
RouteLink	Engine/Route/RouteLink.cpp	/^RouteLink::RouteLink (const RoutePoint& _destination, const RoutePoint& _origin,$/;"	f	class:RouteLink
RouteLink	Engine/Route/RouteLink.hpp	/^struct RouteLink: public RouteLinkBase {$/;"	s
RouteLinkBase	Engine/Route/RouteLink.hpp	/^  constexpr RouteLinkBase(const RoutePoint _dest, const RoutePoint _origin)$/;"	f	struct:RouteLinkBase
RouteLinkBase	Engine/Route/RouteLink.hpp	/^struct RouteLinkBase {$/;"	s
RouteLinkBaseHasher	Engine/Route/RoutePlanner.hpp	/^  struct RouteLinkBaseHasher : std::unary_function<RouteLinkBase, size_t> {$/;"	s	class:RoutePlanner
RouteLinkQueue	Engine/Route/RoutePlanner.hpp	/^  typedef std::queue< RouteLink> RouteLinkQueue;$/;"	t	class:RoutePlanner
RouteLinkSet	Engine/Route/RoutePlanner.hpp	/^  typedef std::unordered_set<RouteLinkBase, RouteLinkBaseHasher> RouteLinkSet;$/;"	t	class:RoutePlanner
RoutePlanner	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::RoutePlanner()$/;"	f	class:RoutePlanner
RoutePlanner	Engine/Route/RoutePlanner.hpp	/^class RoutePlanner {$/;"	c
RoutePlannerAllowClimb	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RoutePlannerAllowClimb,$/;"	e	enum:ControlIndex	file:
RoutePlannerAllowClimb	Profile/ProfileKeys.cpp	/^const char RoutePlannerAllowClimb[] = "RoutePlannerAllowClimb";$/;"	m	namespace:ProfileKeys	file:
RoutePlannerConfig	Engine/Route/Config.hpp	/^struct RoutePlannerConfig$/;"	s
RoutePlannerGlue	Task/RoutePlannerGlue.hpp	/^  RoutePlannerGlue():terrain(nullptr) {}$/;"	f	class:RoutePlannerGlue
RoutePlannerGlue	Task/RoutePlannerGlue.hpp	/^class RoutePlannerGlue {$/;"	c
RoutePlannerMode	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RoutePlannerMode,$/;"	e	enum:ControlIndex	file:
RoutePlannerMode	Profile/ProfileKeys.cpp	/^const char RoutePlannerMode[] = "RoutePlannerMode";$/;"	m	namespace:ProfileKeys	file:
RoutePlannerUseCeiling	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  RoutePlannerUseCeiling,$/;"	e	enum:ControlIndex	file:
RoutePlannerUseCeiling	Profile/ProfileKeys.cpp	/^const char RoutePlannerUseCeiling[] = "RoutePlannerUseCeiling";$/;"	m	namespace:ProfileKeys	file:
RoutePoint	Engine/Route/Point.hpp	/^typedef AFlatGeoPoint RoutePoint;$/;"	t
RoutePointHasher	Engine/Route/RoutePlanner.hpp	/^  struct RoutePointHasher : std::unary_function<RoutePoint, size_t> {$/;"	s	class:RoutePlanner
RoutePolar	Engine/Route/RoutePolar.hpp	/^class RoutePolar$/;"	c
RoutePolarPoint	Engine/Route/RoutePolar.hpp	/^    RoutePolarPoint(double _slowness, double _gradient)$/;"	f	struct:RoutePolar::RoutePolarPoint
RoutePolarPoint	Engine/Route/RoutePolar.hpp	/^  struct RoutePolarPoint$/;"	s	class:RoutePolar
RoutePolars	Engine/Route/RoutePolars.hpp	/^class RoutePolars$/;"	c
Row	Widget/RowFormWidget.hpp	/^    Row(Type _type)$/;"	f	struct:RowFormWidget::Row
Row	Widget/RowFormWidget.hpp	/^    Row(Type _type, Window *_window)$/;"	f	struct:RowFormWidget::Row
Row	Widget/RowFormWidget.hpp	/^    Row(Widget *_widget)$/;"	f	struct:RowFormWidget::Row
Row	Widget/RowFormWidget.hpp	/^  struct Row {$/;"	s	class:RowFormWidget
RowFormWidget	Widget/RowFormWidget.cpp	/^RowFormWidget::RowFormWidget(const DialogLook &_look, bool _vertical)$/;"	f	class:RowFormWidget
RowFormWidget	Widget/RowFormWidget.hpp	/^class RowFormWidget : public WindowWidget {$/;"	c
RowLayout	Dialogs/Task/TargetDialog.cpp	/^  explicit constexpr RowLayout(PixelRect _rc):rc(_rc) {}$/;"	f	class:RowLayout
RowLayout	Dialogs/Task/TargetDialog.cpp	/^class RowLayout {$/;"	c	file:
Rows	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  enum Rows {$/;"	g	class:final	file:
RulesStatusPanel	Dialogs/StatusPanels/RulesStatusPanel.hpp	/^  RulesStatusPanel(const DialogLook &look):StatusPanel(look) {}$/;"	f	class:RulesStatusPanel
RulesStatusPanel	Dialogs/StatusPanels/RulesStatusPanel.hpp	/^class RulesStatusPanel : public StatusPanel {$/;"	c
RulesTab	Dialogs/Task/Manager/Internal.hpp	/^    RulesTab,$/;"	e	enum:final::Tabs
Run	Blackboard/RateLimitedBlackboardListener.cpp	/^RateLimitedBlackboardListener::Run()$/;"	f	class:RateLimitedBlackboardListener
Run	Computer/LogComputer.cpp	/^LogComputer::Run(const MoreData &basic, const DerivedInfo &calculated,$/;"	f	class:LogComputer
Run	Device/Descriptor.cpp	/^  virtual void Run(OperationEnvironment &env) {$/;"	f	class:final
Run	Dialogs/Device/CAI302/WaypointUploader.cpp	/^CAI302WaypointUploader::Run(OperationEnvironment &env)$/;"	f	class:CAI302WaypointUploader
Run	Dialogs/JobDialog.cpp	/^DialogJobRunner::Run(Job &job)$/;"	f	class:DialogJobRunner
Run	Job/TriStateJob.hpp	/^  virtual void Run(OperationEnvironment &env) {$/;"	f	class:final
Run	Logger/ExternalLogger.cpp	/^  bool Run(OperationEnvironment &env) {$/;"	f	class:DeclareJob
Run	Logger/ExternalLogger.cpp	/^  bool Run(OperationEnvironment &env) {$/;"	f	class:DownloadFlightJob
Run	Logger/ExternalLogger.cpp	/^  bool Run(OperationEnvironment &env) {$/;"	f	class:ReadFlightListJob
Run	Net/HTTP/ToBuffer.cpp	/^Net::DownloadToBufferJob::Run(OperationEnvironment &env)$/;"	f	class:Net::DownloadToBufferJob
Run	Net/HTTP/ToFile.cpp	/^Net::DownloadToFileJob::Run(OperationEnvironment &env)$/;"	f	class:Net::DownloadToFileJob
Run	OS/Process.cpp	/^Run(const char *const*argv)$/;"	f
Run	OS/Process.hpp	/^Run(const char *path, Args... args)$/;"	f
RunContest	Engine/Contest/ContestManager.cpp	/^RunContest(AbstractContest &_contest,$/;"	f	file:
RunDijsktraMax	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RunDijsktraMax()$/;"	f	class:OrderedTask
RunDijsktraMin	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::RunDijsktraMin(const GeoPoint &location)$/;"	f	class:OrderedTask
RunFile	Lua/RunFile.cxx	/^Lua::RunFile(lua_State *L, Path path)$/;"	f	class:Lua
RunFile	OS/RunFile.cpp	/^RunFile(const TCHAR *path)$/;"	f
RunNotification	Event/Notify.cpp	/^Notify::RunNotification()$/;"	f	class:Notify
RunValidate	VALI-XCS.cpp	/^RunValidate(Path path)$/;"	f	file:
Runway	Engine/Waypoint/Runway.hpp	/^  constexpr Runway(int _direction, unsigned _length)$/;"	f	class:Runway
Runway	Engine/Waypoint/Runway.hpp	/^class Runway {$/;"	c
SAFETY	Engine/Route/Config.hpp	/^    SAFETY,$/;"	m	class:RoutePlannerConfig::Polar
SAFETYFACTORSCONFIGPANEL_HPP	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.hpp	25;"	d
SAILING	Tracking/LiveTrack24.hpp	/^    SAILING = 16502,$/;"	m	class:LiveTrack24::VehicleType
SAMPLEDTASKPOINT_H	Engine/Task/Points/SampledTaskPoint.hpp	24;"	d
SAVE	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^    SAVE,$/;"	e	enum:final::BlueFlyWidgets	file:
SAVE	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    SAVE,$/;"	e	enum:final::Buttons	file:
SAVE	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^    SAVE,$/;"	e	enum:TaskActionsPanel::Controls
SAVE	Dialogs/Waypoint/Manager.cpp	/^    SAVE,$/;"	e	enum:final::Buttons	file:
SCALE_HIGHEND	Dialogs/Device/Vega/Types.hpp	75;"	d
SCALE_HIGHEND_NEG	Dialogs/Device/Vega/Types.hpp	78;"	d
SCALE_LINEAR	Dialogs/Device/Vega/Types.hpp	73;"	d
SCALE_LINEAR_NEG	Dialogs/Device/Vega/Types.hpp	76;"	d
SCALE_LOWEND	Dialogs/Device/Vega/Types.hpp	74;"	d
SCALE_LOWEND_NEG	Dialogs/Device/Vega/Types.hpp	77;"	d
SCAN	Kobo/WifiDialog.cpp	/^    SCAN,$/;"	e	enum:final::Buttons	file:
SCANTASKPOINT_HPP	Engine/PathSolvers/ScanTaskPoint.hpp	25;"	d
SCControlMode	Device/Driver/LX/LX1600.hpp	/^  enum class SCControlMode : uint8_t {$/;"	c	namespace:LX1600
SCControlMode	Device/Driver/LXERA/LXERA.hpp	/^  enum class SCControlMode : uint8_t {$/;"	c	namespace:LXEra
SCMode	Device/Driver/LX/LX1600.hpp	/^  enum class SCMode : uint8_t {$/;"	c	namespace:LX1600
SCMode	Device/Driver/LXERA/LXERA.hpp	/^  enum class SCMode : uint8_t {$/;"	c	namespace:LXEra
SCOPE_EXIT_HXX	Util/ScopeExit.hxx	31;"	d
SCOREDTASKPOINT_HPP	Engine/Task/Points/ScoredTaskPoint.hpp	24;"	d
SCORE_EXIT	Dialogs/Task/TaskPointDialog.cpp	/^    SCORE_EXIT,$/;"	e	enum:final::Buttons	file:
SCREEN_HEIGHT	Renderer/LabelBlock.hpp	/^  static constexpr unsigned SCREEN_HEIGHT = 2048;$/;"	m	class:LabelBlock
SCREEN_LABELBLOCK_HPP	Renderer/LabelBlock.hpp	25;"	d
SCROLL	Form/List.hpp	/^    SCROLL,$/;"	m	class:ListControl::DragMode
SDLPCMPlayer	Audio/SDLPCMPlayer.hpp	/^class SDLPCMPlayer : public PCMPlayer {$/;"	c
SDLRasterCanvas	Screen/Memory/Canvas.cpp	/^  SDLRasterCanvas(WritableImageBuffer<ActivePixelTraits> buffer)$/;"	f	class:SDLRasterCanvas
SDLRasterCanvas	Screen/Memory/Canvas.cpp	/^class SDLRasterCanvas : public RasterCanvas<ActivePixelTraits> {$/;"	c	file:
SEARCHPOINTVECTOR_HPP	Geo/SearchPointVector.hpp	24;"	d
SEARCH_POINT_HPP	Geo/SearchPoint.hpp	23;"	d
SECTOR	Device/Declaration.hpp	/^      SECTOR,$/;"	e	enum:Declaration::TurnPoint::Shape
SECTOR	Engine/Task/ObservationZones/ObservationZone.hpp	/^    SECTOR,$/;"	m	class:ObservationZone::Shape
SECTORZONE_HPP	Engine/Task/ObservationZones/SectorZone.hpp	25;"	d
SECURITY	Device/Driver/LX/LXN.hpp	/^    SECURITY = 0xf0,$/;"	e	enum:LXN::Command
SECURITY_7000	Device/Driver/LX/LXN.hpp	/^    SECURITY_7000 = 0xef,$/;"	e	enum:LXN::Command
SECURITY_HIGH	Device/Driver/LX/LXN.hpp	/^    SECURITY_HIGH = 0x0f,$/;"	e	enum:LXN::SecurityType
SECURITY_LOW	Device/Driver/LX/LXN.hpp	/^    SECURITY_LOW = 0x0d,$/;"	e	enum:LXN::SecurityType
SECURITY_MED	Device/Driver/LX/LXN.hpp	/^    SECURITY_MED = 0x0e,$/;"	e	enum:LXN::SecurityType
SECURITY_OLD	Device/Driver/LX/LXN.hpp	/^    SECURITY_OLD = 0xf5,$/;"	e	enum:LXN::Command
SEEK_MEMORY	Device/Driver/LX/Protocol.hpp	/^    SEEK_MEMORY = 0xce,$/;"	e	enum:LX::Command
SEEK_MEMORY	Device/Driver/LXERA/Protocol.hpp	/^    SEEK_MEMORY = 0xce,$/;"	e	enum:LXEra::Command
SEEYOU	Waypoint/WaypointFileType.hpp	/^  SEEYOU,$/;"	m	class:WaypointFileType
SELECT	Dialogs/Waypoint/WaypointList.cpp	/^  SELECT,$/;"	e	enum:Buttons	file:
SELF	MapWindow/Items/MapItem.hpp	/^    SELF,$/;"	e	enum:TaskPointType::Type
SEND_SETTINGS	Device/Driver.hpp	/^    SEND_SETTINGS = 0x100,$/;"	e	enum:DeviceRegister::__anon196
SENSOR	Android/NativeView.hpp	/^    SENSOR = 4,$/;"	m	class:NativeView::ScreenOrientation
SENTINEL	OS/Path.hpp	/^  static constexpr auto SENTINEL = value_type::SENTINEL;$/;"	m	class:AllocatedPath
SENTINEL	OS/Path.hpp	/^  static constexpr auto SENTINEL = value_type::SENTINEL;$/;"	m	class:Path
SENTINEL	Util/AllocatedString.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:AllocatedString
SENTINEL	Util/StaticString.hxx	/^	static constexpr value_type SENTINEL = Base::SENTINEL;$/;"	m	class:StaticStringBase
SENTINEL	Util/StringBuffer.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:BasicStringBuffer
SENTINEL	Util/StringBuilder.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:StringBuilder
SENTINEL	Util/StringParser.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:StringParser
SENTINEL	Util/StringPointer.hxx	/^	static constexpr value_type SENTINEL = '\\0';$/;"	m	class:StringPointer
SERIAL	Device/Config.hpp	/^    SERIAL,$/;"	m	class:DeviceConfig::PortType
SERIAL	Device/Driver/LX/LXN.hpp	/^    SERIAL = 0xf6,$/;"	e	enum:LXN::Command
SERIALISER_HPP	Task/Serialiser.hpp	23;"	d
SETACTIVE	Device/Driver/ATR833.cpp	/^  static constexpr uint8_t SETACTIVE = 0x13;$/;"	m	class:final	file:
SETPOWERMANAGEMENT	Hardware/VideoPower.h	29;"	d
SETSTANDBY	Device/Driver/ATR833.cpp	/^  static constexpr uint8_t SETSTANDBY = 0x12;$/;"	m	class:final	file:
SETTINGS	Dialogs/MapItemListDialog.cpp	/^    SETTINGS,$/;"	e	enum:final::Buttons	file:
SETTINGS	Dialogs/Task/AlternatesListDialog.cpp	/^    SETTINGS,$/;"	e	enum:final::Buttons	file:
SETUP	Dialogs/Device/LX/ManageNanoDialog.cpp	/^    SETUP,$/;"	e	enum:final::Controls	file:
SETUP	Dialogs/Device/LX/ManageV7Dialog.cpp	/^    SETUP,$/;"	e	enum:final::Controls	file:
SET_ACTIVE_FREQUENCY	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  SET_ACTIVE_FREQUENCY,$/;"	e	enum:Commands	file:
SET_CODE	Dialogs/Traffic/TeamCodeDialog.cpp	/^    SET_CODE,$/;"	e	enum:final::Controls	file:
SET_FLARM_LOCK	Dialogs/Traffic/TeamCodeDialog.cpp	/^    SET_FLARM_LOCK,$/;"	e	enum:final::Controls	file:
SET_HOME	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  SET_HOME,$/;"	e	enum:Commands	file:
SET_STANDBY_FREQUENCY	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^  SET_STANDBY_FREQUENCY,$/;"	e	enum:Commands	file:
SET_WAYPOINT	Dialogs/Traffic/TeamCodeDialog.cpp	/^    SET_WAYPOINT,$/;"	e	enum:final::Controls	file:
SHA256State	Crypto/SHA256.hxx	/^class SHA256State {$/;"	c
SHADED	InfoBoxes/InfoBoxSettings.hpp	/^    SHADED,$/;"	m	class:InfoBoxSettings::BorderStyle
SHAPE	Dialogs/Plane/PlanePolarDialog.cpp	/^    SHAPE,$/;"	e	enum:final::Controls	file:
SHAPE_RENDERER_HPP	Topography/ShapeRenderer.hpp	25;"	d
SHIFT	Widget/KeyboardWidget.hpp	/^    SHIFT,$/;"	e	enum:KeyboardWidget::Actions
SHORT	MapSettings.hpp	/^    SHORT,$/;"	m	class:TrailSettings::Length
SHOW_FAI_TRIANGLE_AREAS	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  SHOW_FAI_TRIANGLE_AREAS,$/;"	e	enum:ControlIndex	file:
SHOW_THERMALS	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  SHOW_THERMALS,$/;"	e	enum:ControlIndex	file:
SHPHandle	Topography/shapelib/mapshape.h	/^  typedef SHPInfo * SHPHandle;$/;"	t
SHPInfo	Topography/shapelib/mapshape.h	/^  } SHPInfo;$/;"	t	typeref:struct:__anon82
SHPTreeHandle	Topography/shapelib/maptree.h	/^  typedef SHPTreeInfo * SHPTreeHandle;$/;"	t
SHPTreeInfo	Topography/shapelib/maptree.h	/^  } SHPTreeInfo;$/;"	t	typeref:struct:__anon88
SHP_ARC	Topography/shapelib/mapshape.h	59;"	d
SHP_ARCM	Topography/shapelib/mapshape.h	69;"	d
SHP_ARCZ	Topography/shapelib/mapshape.h	64;"	d
SHP_MULTIPOINT	Topography/shapelib/mapshape.h	61;"	d
SHP_MULTIPOINTM	Topography/shapelib/mapshape.h	71;"	d
SHP_MULTIPOINTZ	Topography/shapelib/mapshape.h	66;"	d
SHP_POINT	Topography/shapelib/mapshape.h	58;"	d
SHP_POINTM	Topography/shapelib/mapshape.h	68;"	d
SHP_POINTZ	Topography/shapelib/mapshape.h	63;"	d
SHP_POLYGON	Topography/shapelib/mapshape.h	60;"	d
SHP_POLYGONM	Topography/shapelib/mapshape.h	70;"	d
SHP_POLYGONZ	Topography/shapelib/mapshape.h	65;"	d
SHRINK	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    MAGNIFY, SHRINK,$/;"	e	enum:final::Buttons	file:
SHX_BUFFER_PAGE	Topography/shapelib/mapshape.h	52;"	d
SIDE_INFO_RELATIVE_ALTITUDE	Gauge/FlarmTrafficWindow.hpp	/^    SIDE_INFO_RELATIVE_ALTITUDE,$/;"	e	enum:FlarmTrafficWindow::SideInfoType
SIDE_INFO_VARIO	Gauge/FlarmTrafficWindow.hpp	/^    SIDE_INFO_VARIO,$/;"	e	enum:FlarmTrafficWindow::SideInfoType
SIGN	Form/DigitEntry.hpp	/^      SIGN,$/;"	m	class:CoordinateFormat::Column::Type
SIMPLE	Engine/Task/TaskBehaviour.hpp	/^  SIMPLE,$/;"	m	class:AbortTaskMode
SIMPLE	MapSettings.hpp	/^  SIMPLE,$/;"	m	class:AircraftSymbol
SIMPLE	Renderer/LabelShape.hpp	/^  SIMPLE,$/;"	m	class:LabelShape
SIMPLE_LARGE	MapSettings.hpp	/^  SIMPLE_LARGE,$/;"	m	class:AircraftSymbol
SIMULATION	NMEA/GPSState.hpp	/^  SIMULATION,$/;"	m	class:FixQuality
SIMULATOR	Dialogs/SimulatorPromptWindow.hpp	/^    SIMULATOR,$/;"	e	enum:final::Buttons
SIMULATOR_AVAILABLE	Simulator.hpp	27;"	d
SIS_AT	Engine/Contest/Settings.hpp	/^  SIS_AT,$/;"	m	class:Contest
SITECONFIGPANEL_HPP	Dialogs/Settings/Panels/SiteConfigPanel.hpp	25;"	d
SIZE	Device/Driver/Volkslogger/dbbconv.h	/^  static constexpr size_t SIZE = DBB_SIZE + FRM_SIZE;$/;"	m	class:DBB
SIZE	NMEA/ClimbHistory.hpp	/^  static constexpr unsigned SIZE = 100;$/;"	m	class:ClimbHistory
SIZE	Screen/OpenGL/VertexArray.hpp	/^  static constexpr unsigned SIZE = n;$/;"	m	struct:GLVertexArray
SIZE_MAX	Topography/shapelib/mapserver.h	92;"	d
SIZE_MAX	Topography/shapelib/mapserver.h	94;"	d
SKI	Tracking/LiveTrack24.hpp	/^    SKI = 16601,$/;"	m	class:LiveTrack24::VehicleType
SKYLINES_TRAFFIC	MapWindow/Items/MapItem.hpp	/^    SKYLINES_TRAFFIC,$/;"	e	enum:TaskPointType::Type
SKYLINES_TRAFFIC_MAP_MODE	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  SKYLINES_TRAFFIC_MAP_MODE,$/;"	e	enum:ControlIndex	file:
SLES	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^namespace SLES {$/;"	n
SLES	Audio/SLES/Engine.hpp	/^namespace SLES {$/;"	n
SLES	Audio/SLES/Init.cpp	/^namespace SLES {$/;"	n	file:
SLES	Audio/SLES/Init.hpp	/^namespace SLES {$/;"	n
SLES	Audio/SLES/Object.hpp	/^namespace SLES {$/;"	n
SLES	Audio/SLES/Play.hpp	/^namespace SLES {$/;"	n
SLES_ANDROID_SIMPLE_BUFFER_QUEUE_HPP	Audio/SLES/AndroidSimpleBufferQueue.hpp	31;"	d
SLES_ENGINE_HPP	Audio/SLES/Engine.hpp	31;"	d
SLES_OBJECT_HPP	Audio/SLES/Object.hpp	31;"	d
SLES_PLAY_HPP	Audio/SLES/Play.hpp	31;"	d
SLICE_ALLOCATOR_HXX	Util/SliceAllocator.hxx	31;"	d
SL_ENABLED	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_ENABLED,$/;"	e	enum:ControlIndex	file:
SL_INTERVAL	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_INTERVAL,$/;"	e	enum:ControlIndex	file:
SL_KEY	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_KEY,$/;"	e	enum:ControlIndex	file:
SL_NEAR_TRAFFIC_ENABLED	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_NEAR_TRAFFIC_ENABLED,$/;"	e	enum:ControlIndex	file:
SL_ROAMING	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_ROAMING,$/;"	e	enum:ControlIndex	file:
SL_TRAFFIC_ENABLED	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SL_TRAFFIC_ENABLED,$/;"	e	enum:ControlIndex	file:
SMALL_CIRCLE_SIZE	Screen/OpenGL/Shapes.hpp	/^  static constexpr unsigned SMALL_CIRCLE_SIZE = 8;$/;"	m	namespace:OpenGL
SMALL_NUMBER	Topography/shapelib/mapsearch.c	373;"	d	file:
SNOWBOARD	Tracking/LiveTrack24.hpp	/^    SNOWBOARD = 16600,$/;"	m	class:LiveTrack24::VehicleType
SNOWKITE	Tracking/LiveTrack24.hpp	/^    SNOWKITE = 16602,$/;"	m	class:LiveTrack24::VehicleType
SOCKET_ADDRESS_HXX	Net/SocketAddress.hxx	31;"	d
SOCKET_DESCRIPTOR_HXX	Net/SocketDescriptor.hxx	31;"	d
SOCKET_ERROR_HPP	Net/SocketError.hpp	31;"	d
SOFTWARE_ROTATE_DISPLAY	Screen/OpenGL/Features.hpp	60;"	d
SOLID	Screen/Pen.hpp	/^    SOLID = PS_SOLID,$/;"	e	enum:Pen::Style
SOLID	Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	e	enum:ShapeRenderer::__anon89
SOLVE_ZERO	Engine/Task/Solvers/TaskSolveTravelled.cpp	46;"	d	file:
SOONEST_AIRSPACE_HPP	Engine/Airspace/SoonestAirspace.hpp	25;"	d
SORT_ASC	Topography/shapelib/mapserver.h	/^      SORT_ASC,$/;"	e	enum:__anon61
SORT_DESC	Topography/shapelib/mapserver.h	/^      SORT_DESC$/;"	e	enum:__anon61
SOURCE	Dialogs/Settings/WindSettingsPanel.hpp	/^    SOURCE,$/;"	e	enum:final::ControlIndex
SPACER	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  SPACER,$/;"	e	enum:ControlIndex	file:
SPACER	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  SPACER,$/;"	e	enum:ControlIndex	file:
SPACER	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  SPACER,$/;"	e	enum:ControlIndex	file:
SPACER1	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    SPACER1,$/;"	e	enum:final::Controls	file:
SPACER2	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  SPACER2,$/;"	e	enum:ControlIndex	file:
SPACER2	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    SPACER2,$/;"	e	enum:final::Controls	file:
SPEED_ACHIEVED	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  SPEED_ACHIEVED,$/;"	e	enum:Controls	file:
SPEED_COMMAND	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    SPEED_COMMAND,$/;"	e	enum:SwitchesLeft::Controls	file:
SPEED_REMAINING	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  SPEED_REMAINING,$/;"	e	enum:Controls	file:
SPLITRATIO	Topography/shapelib/maptree.c	55;"	d	file:
SPLIT_10	InfoBoxes/InfoBoxSettings.hpp	/^    SPLIT_10 = 23,$/;"	m	class:InfoBoxSettings::Geometry
SPLIT_3X4	InfoBoxes/InfoBoxSettings.hpp	/^    SPLIT_3X4 = 24,$/;"	m	class:InfoBoxSettings::Geometry
SPLIT_8	InfoBoxes/InfoBoxSettings.hpp	/^    SPLIT_8,$/;"	m	class:InfoBoxSettings::Geometry
SPLIT_THRESHOLD	Util/QuadTree.hxx	/^	static constexpr unsigned SPLIT_THRESHOLD = 16;$/;"	m	class:QuadTree
SPREAD	Math/Histogram.cpp	26;"	d	file:
SPR_FLY	Dialogs/dlgSimulatorPrompt.hpp	/^  SPR_FLY,$/;"	e	enum:SimulatorPromptResult
SPR_QUIT	Dialogs/dlgSimulatorPrompt.hpp	/^  SPR_QUIT,$/;"	e	enum:SimulatorPromptResult
SPR_SIMULATOR	Dialogs/dlgSimulatorPrompt.hpp	/^  SPR_SIMULATOR,$/;"	e	enum:SimulatorPromptResult
STA	Device/Driver/Volkslogger/vlconv.cpp	/^  C2 STA;$/;"	m	class:C_RECORD	file:
STANDARD	Screen/Bitmap.hpp	/^    STANDARD,$/;"	m	class:final::Type
START	Device/Driver/LX/LXN.hpp	/^    START = 0x80,$/;"	e	enum:LXN::Command
START	Dialogs/ReplayDialog.cpp	/^  START,$/;"	e	enum:Buttons	file:
START	Engine/Task/Points/Type.hpp	/^  START,$/;"	m	class:TaskPointType
START	Waypoint/WaypointFilter.hpp	/^  START,$/;"	m	class:TypeFilter
STARTPOINT_HPP	Engine/Task/Ordered/Points/StartPoint.hpp	26;"	d
START_ARMED	Engine/Task/Ordered/TaskAdvance.hpp	/^    START_ARMED,$/;"	e	enum:TaskAdvance::State
START_BGA	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_BGA,$/;"	m	class:TaskPointFactoryType
START_CLOSE_TIME	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_CLOSE_TIME,$/;"	e	enum:Controls	file:
START_CYLINDER	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_CYLINDER,$/;"	m	class:TaskPointFactoryType
START_DISARMED	Engine/Task/Ordered/TaskAdvance.hpp	/^    START_DISARMED,$/;"	e	enum:TaskAdvance::State
START_FRAME	Device/Driver/FLARM/BinaryProtocol.hpp	/^  static constexpr uint8_t START_FRAME = 0x73;$/;"	m	namespace:FLARM
START_HEIGHT_REF	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_HEIGHT_REF,$/;"	e	enum:Controls	file:
START_LINE	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_LINE,$/;"	m	class:TaskPointFactoryType
START_MAX_HEIGHT	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_MAX_HEIGHT,$/;"	e	enum:Controls	file:
START_MAX_SPEED	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_MAX_SPEED,$/;"	e	enum:Controls	file:
START_ONLY	Logger/Settings.hpp	/^    START_ONLY,$/;"	m	class:LoggerSettings::AutoLogger
START_OPEN_ARRIVAL_TIME	InfoBoxes/Content/Type.hpp	/^    START_OPEN_ARRIVAL_TIME,$/;"	e	enum:InfoBoxFactory::Type
START_OPEN_TIME	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_OPEN_TIME,$/;"	e	enum:Controls	file:
START_OPEN_TIME	InfoBoxes/Content/Type.hpp	/^    START_OPEN_TIME,$/;"	e	enum:InfoBoxFactory::Type
START_RADIAL	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^  START_RADIAL,$/;"	e	enum:Controls	file:
START_REQUIRES_ARM	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  START_REQUIRES_ARM,$/;"	e	enum:Controls	file:
START_SECTOR	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  START_SECTOR = 0,$/;"	m	class:TaskPointFactoryType
STATE_COMM_MSG	Device/Driver/IMI/Protocol/MessageParser.cpp	/^    STATE_COMM_MSG$/;"	e	enum:IMI::MessageParser::TState	file:
STATE_NOT_SYNC	Device/Driver/IMI/Protocol/MessageParser.cpp	/^    STATE_NOT_SYNC,$/;"	e	enum:IMI::MessageParser::TState	file:
STATIC_ARRAY_HXX	Util/StaticArray.hxx	31;"	d
STATIC_FIFO_BUFFER_HXX	Util/StaticFifoBuffer.hxx	31;"	d
STATIC_OBJECT	FLARM/Traffic.hpp	/^    STATIC_OBJECT = 15    \/\/!< static object$/;"	m	class:FlarmTraffic::AircraftType
STATIC_ONLY	Device/Config.hpp	/^    STATIC_ONLY,$/;"	m	class:DeviceConfig::PressureUse
STATIC_SOCKET_ADDRESS_HXX	Net/StaticSocketAddress.hxx	31;"	d
STATIC_STRING_HPP	Util/StaticString.hxx	31;"	d
STATIC_WITH_VARIO	Device/Config.hpp	/^    STATIC_WITH_VARIO,$/;"	m	class:DeviceConfig::PressureUse
STATUS_t	VALI-XCS.cpp	/^enum STATUS_t {$/;"	g	file:
STATUTE_MILES	Units/Unit.hpp	/^  STATUTE_MILES,$/;"	m	class:Unit
STATUTE_MILES_PER_HOUR	Units/Unit.hpp	/^  STATUTE_MILES_PER_HOUR,$/;"	m	class:Unit
STD	Geo/AltitudeReference.hpp	/^  STD,$/;"	m	class:AltitudeReference
STDIO_OUTPUT_STREAM_HXX	IO/StdioOutputStream.hxx	31;"	d
STENCIL_ATTACHMENT	Screen/OpenGL/FBO.hpp	/^  static constexpr GLenum STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT_OES;$/;"	m	namespace:FBO
STEPS	Engine/Task/Shapes/FAITriangleArea.cpp	/^static constexpr unsigned STEPS = FAI_TRIANGLE_SECTOR_MAX \/ 3 \/ 8;$/;"	v	file:
STEPS_MACCREADY	Renderer/MacCreadyRenderer.cpp	36;"	d	file:
STOP	Dialogs/ReplayDialog.cpp	/^  STOP,$/;"	e	enum:Buttons	file:
STRAIGHT	Engine/Route/Config.hpp	/^    STRAIGHT,$/;"	m	class:RoutePlannerConfig::ReachMode
STRING	Form/DataField/Base.hpp	/^    STRING,$/;"	m	class:DataField::Type
STRING_API_HXX	Util/StringAPI.hxx	31;"	d
STRING_BUFFER_HXX	Util/StringBuffer.hxx	31;"	d
STRING_BUILDER_HXX	Util/StringBuilder.hxx	31;"	d
STRING_COMPARE_HXX	Util/StringCompare.hxx	31;"	d
STRING_FORMAT_HPP	Util/StringFormat.hpp	31;"	d
STRING_PARSER_HXX	Util/StringParser.hxx	31;"	d
STRING_POINTER_HXX	Util/StringPointer.hxx	31;"	d
STRING_STRIP_HXX	Util/StringStrip.hxx	31;"	d
STRING_VIEW_HXX	Util/StringView.hxx	31;"	d
STX	Device/Driver/ATR833.cpp	/^static constexpr uint8_t STX = 0x02;$/;"	v	file:
STX	Device/Driver/KRT2.cpp	/^  static constexpr char STX = 0x02; \/\/!< Command start character.$/;"	m	class:final	file:
STX	Device/Driver/Volkslogger/Protocol.hpp	/^    STX = 0x02,$/;"	e	enum:Volkslogger::__anon202
STYLE_BLACK	Look/ChartLook.hpp	/^    STYLE_BLACK,$/;"	e	enum:ChartLook::Style
STYLE_BLUE	Look/ChartLook.hpp	/^    STYLE_BLUE,$/;"	e	enum:ChartLook::Style
STYLE_BLUEDASH	Look/ChartLook.hpp	/^    STYLE_BLUEDASH,$/;"	e	enum:ChartLook::Style
STYLE_BLUETHINDASH	Look/ChartLook.hpp	/^    STYLE_BLUETHINDASH,$/;"	e	enum:ChartLook::Style
STYLE_COUNT	Look/ChartLook.hpp	/^    STYLE_COUNT$/;"	e	enum:ChartLook::Style
STYLE_GREEN	Look/ChartLook.hpp	/^    STYLE_GREEN,$/;"	e	enum:ChartLook::Style
STYLE_GREENDASH	Look/ChartLook.hpp	/^    STYLE_GREENDASH,$/;"	e	enum:ChartLook::Style
STYLE_GRID	Look/ChartLook.hpp	/^    STYLE_GRID,$/;"	e	enum:ChartLook::Style
STYLE_GRIDMINOR	Look/ChartLook.hpp	/^    STYLE_GRIDMINOR,$/;"	e	enum:ChartLook::Style
STYLE_GRIDZERO	Look/ChartLook.hpp	/^    STYLE_GRIDZERO,$/;"	e	enum:ChartLook::Style
STYLE_RED	Look/ChartLook.hpp	/^    STYLE_RED,$/;"	e	enum:ChartLook::Style
STYLE_REDTHICKDASH	Look/ChartLook.hpp	/^    STYLE_REDTHICKDASH,$/;"	e	enum:ChartLook::Style
STYLE_WHITE	Look/ChartLook.hpp	/^    STYLE_WHITE,$/;"	e	enum:ChartLook::Style
SUBLANG_ENGLISH_AUS	Units/UnitsGlue.cpp	/^  SUBLANG_ENGLISH_AUS,$/;"	e	enum:__anon207	file:
SUBLANG_ENGLISH_UK	Units/UnitsGlue.cpp	/^  SUBLANG_ENGLISH_UK,$/;"	e	enum:__anon207	file:
SUBLANG_ENGLISH_US	Units/UnitsGlue.cpp	/^  SUBLANG_ENGLISH_US,$/;"	e	enum:__anon207	file:
SUBPIXEL_BITS	Terrain/RasterTraits.hpp	/^  constexpr unsigned SUBPIXEL_BITS = 8;$/;"	m	namespace:RasterTraits
SUCCESS	Job/TriStateJob.hpp	/^  SUCCESS, ERROR, CANCELLED$/;"	m	class:TriStateJobResult
SUCCESS	Task/MapTaskManager.hpp	/^    SUCCESS,$/;"	e	enum:MapTaskManager::TaskEditResult
SUN	Terrain/TerrainSettings.hpp	/^  SUN,$/;"	m	class:SlopeShading
SUN_DIAMETER	Math/SunEphemeris.cpp	/^static constexpr double SUN_DIAMETER = 0.53;$/;"	v	file:
SUN_EPHEMERIS_HPP	Math/SunEphemeris.hpp	25;"	d
SWAP	Topography/shapelib/mapprimitive.c	44;"	d	file:
SWAP_FOUR_BYTES	Topography/shapelib/mapshape.c	59;"	d	file:
SWITCH_INFO_BOX	Dialogs/dlgInfoBoxAccess.cpp	/^static constexpr int SWITCH_INFO_BOX = 100;$/;"	v	file:
SWITCH_KERNEL	Kobo/SystemDialog.cpp	/^    SWITCH_KERNEL,$/;"	e	enum:final::Buttons	file:
SYMBOL	MapSettings.hpp	/^  SYMBOL,$/;"	m	class:DisplaySkyLinesTrafficMapMode
SYMBOLSCONFIGPANEL_HPP	Dialogs/Settings/Panels/SymbolsConfigPanel.hpp	25;"	d
SYMBOL_NAME	MapSettings.hpp	/^  SYMBOL_NAME,$/;"	m	class:DisplaySkyLinesTrafficMapMode
SYMMETRICAL	Task/TaskFileSeeYou.cpp	/^    SYMMETRICAL,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
SYMMETRICSECTORZONE_HPP	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	25;"	d
SYMMETRIC_QUADRANT	Engine/Task/Factory/TaskPointFactoryType.hpp	/^  SYMMETRIC_QUADRANT,$/;"	m	class:TaskPointFactoryType
SYMMETRIC_QUADRANT	Engine/Task/ObservationZones/ObservationZone.hpp	/^    SYMMETRIC_QUADRANT,$/;"	m	class:ObservationZone::Shape
SYN	Device/Driver/LX/Protocol.hpp	/^    SYN = 0x16,$/;"	e	enum:LX::Command
SYN	Device/Driver/LXERA/Protocol.hpp	/^    SYN = 0x16,$/;"	e	enum:LXEra::Command
SYNC	Device/Driver/ATR833.cpp	/^static constexpr uint8_t SYNC = 'r';$/;"	v	file:
SYSTEM	Kobo/KoboMenu.cpp	/^  SYSTEM,$/;"	e	enum:Buttons	file:
SYSTEM_ERROR_HXX	OS/Error.hxx	31;"	d
SafetyAltitudeArrival	Profile/ProfileKeys.cpp	/^const char SafetyAltitudeArrival[] = "SafetyAltitudeArrival";$/;"	m	namespace:ProfileKeys	file:
SafetyAltitudeTerrain	Profile/ProfileKeys.cpp	/^const char SafetyAltitudeTerrain[] = "SafetyAltitudeTerrain";$/;"	m	namespace:ProfileKeys	file:
SafetyFactorsConfigPanel	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  SafetyFactorsConfigPanel()$/;"	f	class:final
SafetyMC	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  SafetyMC,$/;"	e	enum:ControlIndex	file:
SafetyMacCready	Profile/ProfileKeys.cpp	/^const char SafetyMacCready[] = "SafetyMacCready";$/;"	m	namespace:ProfileKeys	file:
SafteySpeed	Profile/ProfileKeys.cpp	/^const char SafteySpeed[] = "SafteySpeed";$/;"	m	namespace:ProfileKeys	file:
Sample	Computer/Wind/CirclingWind.hpp	/^  struct Sample$/;"	s	class:CirclingWind
Sample	Math/DifferentialWindowFilter.hpp	/^  struct Sample {$/;"	s	class:DifferentialWindowFilter
SampledTaskPoint	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::SampledTaskPoint(const GeoPoint &location,$/;"	f	class:SampledTaskPoint
SampledTaskPoint	Engine/Task/Points/SampledTaskPoint.hpp	/^class SampledTaskPoint {$/;"	c
SanitiseLine	Device/Util/LineSplitter.cpp	/^SanitiseLine(char *const begin, char *const end)$/;"	f	file:
Save	Cloud/Client.cpp	/^CloudClient::Save(Serialiser &s) const$/;"	f	class:CloudClient
Save	Cloud/Client.cpp	/^CloudClientContainer::Save(Serialiser &s) const$/;"	f	class:CloudClientContainer
Save	Cloud/Data.cpp	/^CloudData::Save(Serialiser &s) const$/;"	f	class:CloudData
Save	Cloud/Main.cpp	/^CloudServer::Save()$/;"	f	class:CloudServer
Save	Cloud/Thermal.cpp	/^CloudThermal::Save(Serialiser &s) const$/;"	f	class:CloudThermal
Save	Cloud/Thermal.cpp	/^CloudThermalContainer::Save(Serialiser &s) const$/;"	f	class:CloudThermalContainer
Save	Dialogs/Airspace/AirspaceCRendererSettingsPanel.cpp	/^AirspaceClassRendererSettingsPanel::Save(bool &changed)$/;"	f	class:AirspaceClassRendererSettingsPanel
Save	Dialogs/Device/CAI302/UnitsEditor.cpp	/^CAI302UnitsEditor::Save(bool &_changed)$/;"	f	class:CAI302UnitsEditor
Save	Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::Save(bool &_changed)$/;"	f	class:DeviceEditWidget
Save	Dialogs/Device/FLARM/ConfigWidget.cpp	/^FLARMConfigWidget::Save(bool &_changed)$/;"	f	class:FLARMConfigWidget
Save	Dialogs/Device/LX/NanoConfigWidget.cpp	/^NanoConfigWidget::Save(bool &_changed)$/;"	f	class:NanoConfigWidget
Save	Dialogs/Device/LX/V7ConfigWidget.cpp	/^V7ConfigWidget::Save(bool &_changed)$/;"	f	class:V7ConfigWidget
Save	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::Save(bool &changed_r)$/;"	f	class:VegaParametersWidget
Save	Dialogs/MapItemListSettingsPanel.cpp	/^MapItemListSettingsPanel::Save(bool &changed)$/;"	f	class:MapItemListSettingsPanel
Save	Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::Save(bool &_changed)$/;"	f	class:PlaneEditWidget
Save	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::Save(bool &_changed)$/;"	f	class:PlanePolarWidget
Save	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::Save(bool &_changed)$/;"	f	class:PolarShapeEditWidget
Save	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::Save(bool &_changed)$/;"	f	class:AirspaceConfigPanel
Save	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^AudioConfigPanel::Save(bool &changed)$/;"	f	class:AudioConfigPanel
Save	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^AudioVarioConfigPanel::Save(bool &changed)$/;"	f	class:AudioVarioConfigPanel
Save	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CloudConfigPanel::Save(bool &_changed)$/;"	f	class:CloudConfigPanel
Save	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^GaugesConfigPanel::Save(bool &_changed)$/;"	f	class:GaugesConfigPanel
Save	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^GlideComputerConfigPanel::Save(bool &_changed)$/;"	f	class:GlideComputerConfigPanel
Save	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^InfoBoxesConfigPanel::Save(bool &_changed)$/;"	f	class:InfoBoxesConfigPanel
Save	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^InterfaceConfigPanel::Save(bool &_changed)$/;"	f	class:InterfaceConfigPanel
Save	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^LayoutConfigPanel::Save(bool &_changed)$/;"	f	class:LayoutConfigPanel
Save	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^LoggerConfigPanel::Save(bool &changed)$/;"	f	class:LoggerConfigPanel
Save	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^MapDisplayConfigPanel::Save(bool &_changed)$/;"	f	class:MapDisplayConfigPanel
Save	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageListWidget::Save(bool &_changed)$/;"	f	class:PageListWidget
Save	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::Save(bool &_changed)$/;"	f	class:RouteConfigPanel
Save	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^SafetyFactorsConfigPanel::Save(bool &_changed)$/;"	f	class:SafetyFactorsConfigPanel
Save	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^ScoringConfigPanel::Save(bool &_changed)$/;"	f	class:ScoringConfigPanel
Save	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^SiteConfigPanel::Save(bool &_changed)$/;"	f	class:SiteConfigPanel
Save	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^SymbolsConfigPanel::Save(bool &_changed)$/;"	f	class:SymbolsConfigPanel
Save	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::Save(bool &_changed)$/;"	f	class:TaskDefaultsConfigPanel
Save	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^TaskRulesConfigPanel::Save(bool &_changed)$/;"	f	class:TaskRulesConfigPanel
Save	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::Save(bool &_changed)$/;"	f	class:TerrainDisplayConfigPanel
Save	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^TimeConfigPanel::Save(bool &_changed)$/;"	f	class:TimeConfigPanel
Save	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::Save(bool &_changed)$/;"	f	class:TrackingConfigPanel
Save	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::Save(bool &_changed)$/;"	f	class:UnitsConfigPanel
Save	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^VarioConfigPanel::Save(bool &_changed)$/;"	f	class:VarioConfigPanel
Save	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^WaypointDisplayConfigPanel::Save(bool &_changed)$/;"	f	class:WaypointDisplayConfigPanel
Save	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^WeatherConfigPanel::Save(bool &_changed)$/;"	f	class:WeatherConfigPanel
Save	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::Save(bool &_changed)$/;"	f	class:WindSettingsPanel
Save	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::Save(bool &changed)$/;"	f	class:FlightSetupPanel
Save	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::Save(bool &changed_r)$/;"	f	class:InfoBoxesConfigWidget
Save	Dialogs/StartupDialog.cpp	/^StartupWidget::Save(bool &changed)$/;"	f	class:StartupWidget
Save	Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp	/^CylinderZoneEditWidget::Save(bool &_changed)$/;"	f	class:CylinderZoneEditWidget
Save	Dialogs/Task/Widgets/KeyholeZoneEditWidget.cpp	/^KeyholeZoneEditWidget::Save(bool &_changed)$/;"	f	class:KeyholeZoneEditWidget
Save	Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp	/^LineSectorZoneEditWidget::Save(bool &_changed)$/;"	f	class:LineSectorZoneEditWidget
Save	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^SectorZoneEditWidget::Save(bool &_changed)$/;"	f	class:SectorZoneEditWidget
Save	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^WaypointEditWidget::Save(bool &_changed)$/;"	f	class:WaypointEditWidget
Save	Dialogs/Weather/RASPDialog.cpp	/^RASPSettingsPanel::Save(bool &_changed)$/;"	f	class:RASPSettingsPanel
Save	IO/FileCache.cpp	/^FileCache::Save(const TCHAR *name, Path original_path)$/;"	f	class:FileCache
Save	Profile/FlarmProfile.cpp	/^Profile::Save(ProfileMap &map, const FlarmColorDatabase &db)$/;"	f	class:Profile
Save	Profile/InfoBoxConfig.cpp	/^Profile::Save(ProfileMap &map,$/;"	f	class:Profile
Save	Profile/PageProfile.cpp	/^Profile::Save(ProfileMap &map, const PageLayout &page, const unsigned i)$/;"	f	class:Profile
Save	Profile/PageProfile.cpp	/^Profile::Save(ProfileMap &map, const PageSettings &settings)$/;"	f	class:Profile
Save	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Save(bool &changed)$/;"	f	class:ButtonPanelWidget
Save	Widget/PagerWidget.cpp	/^PagerWidget::Save(bool &changed)$/;"	f	class:PagerWidget
Save	Widget/SolidWidget.cpp	/^SolidWidget::Save(bool &changed)$/;"	f	class:SolidWidget
Save	Widget/TwoWidgets.cpp	/^TwoWidgets::Save(bool &changed)$/;"	f	class:TwoWidgets
Save	Widget/Widget.cpp	/^NullWidget::Save(bool &changed)$/;"	f	class:NullWidget
SaveCache	Terrain/RasterMap.hpp	/^  bool SaveCache(FILE *file) const {$/;"	f	class:RasterMap
SaveCache	Terrain/RasterTerrain.cpp	/^RasterTerrain::SaveCache(FileCache &cache, Path path) const$/;"	f	class:RasterTerrain
SaveCache	Terrain/RasterTile.cpp	/^RasterTile::SaveCache(FILE *file) const$/;"	f	class:RasterTile
SaveCache	Terrain/RasterTileCache.cpp	/^RasterTileCache::SaveCache(FILE *file) const$/;"	f	class:RasterTileCache
SaveConfig	Kobo/WPASupplicant.hpp	/^  bool SaveConfig() {$/;"	f	class:WPASupplicant
SaveDisplayModeScales	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SaveDisplayModeScales()$/;"	f	class:GlueMapWindow
SaveFile	Profile/File.cpp	/^Profile::SaveFile(const ProfileMap &map, Path path)$/;"	f	class:Profile
SaveFile	Profile/Profile.cpp	/^Profile::SaveFile(Path path)$/;"	f	class:Profile
SaveFinish	Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::SaveFinish()$/;"	f	class:GlideComputerBlackboard
SaveFlarmColors	FLARM/Glue.cpp	/^SaveFlarmColors()$/;"	f
SaveFlarmNameFile	FLARM/NameFile.cpp	/^SaveFlarmNameFile(BufferedOutputStream &writer, FlarmNameDatabase &db)$/;"	f
SaveFlarmNames	FLARM/Glue.cpp	/^SaveFlarmNames()$/;"	f
SaveHome	Waypoint/HomeGlue.cpp	/^WaypointGlue::SaveHome(ProfileMap &profile,$/;"	f	class:WaypointGlue
SaveKey	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^SaveKey(const RowFormWidget &form, unsigned idx, const char *profile_key,$/;"	f	file:
SaveLast	Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp	/^ConditionMonitorFinalGlide::SaveLast()$/;"	f	class:ConditionMonitorFinalGlide
SaveLast	Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp	/^ConditionMonitorLandableReachable::SaveLast()$/;"	f	class:ConditionMonitorLandableReachable
SaveLast	Computer/ConditionMonitor/ConditionMonitorWind.cpp	/^ConditionMonitorWind::SaveLast()$/;"	f	class:ConditionMonitorWind
SavePoint	Dialogs/Plane/PolarShapeEditWidget.cpp	/^SavePoint(const PolarShapeEditWidget::PointEditor &pe, PolarPoint &point)$/;"	f	file:
SaveSecondary	FLARM/Glue.cpp	/^SaveSecondary(FlarmNameDatabase &flarm_names)$/;"	f	file:
SaveSetting	Dialogs/Device/LX/NanoConfigWidget.cpp	/^NanoConfigWidget::SaveSetting(const char *name, unsigned idx,$/;"	f	class:NanoConfigWidget
SaveState	Engine/Airspace/AirspaceWarning.cpp	/^void AirspaceWarning::SaveState()$/;"	f	class:AirspaceWarning
SaveTask	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::SaveTask()$/;"	f	class:TaskActionsPanel
SaveTask	Task/SaveFile.cpp	/^SaveTask(Path path, const OrderedTask &task)$/;"	f
SaveTask	Task/Serialiser.cpp	/^SaveTask(WritableDataNode &node, const OrderedTask &task)$/;"	f
SaveToEEPROM	Device/Driver/LX/LX1600.hpp	/^  SaveToEEPROM(Port &port, OperationEnvironment &env)$/;"	f	namespace:LX1600
SaveToEEPROM	Device/Driver/LXERA/LXERA.hpp	/^  SaveToEEPROM(Port &port, OperationEnvironment &env)$/;"	f	namespace:LXEra
SaveToFile	Polar/PolarFileGlue.cpp	/^PolarGlue::SaveToFile(const PolarInfo &polar, BufferedOutputStream &writer)$/;"	f	class:PolarGlue
SaveToFile	Polar/PolarFileGlue.cpp	/^PolarGlue::SaveToFile(const PolarInfo &polar, Path path)$/;"	f	class:PolarGlue
SaveToProfile	Weather/NOAAGlue.cpp	/^NOAAStore::SaveToProfile()$/;"	f	class:NOAAStore
SaveValue	Dialogs/Plane/PolarShapeEditWidget.cpp	/^SaveValue(WndProperty &e, double &value_r, UnitGroup unit_group)$/;"	f	file:
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, Angle &value_r) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, RoughTime &value_r) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, TCHAR *string, size_t max_size) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, bool &value, bool negated) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, double &value) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, int &value) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, uint16_t &value) const$/;"	f	class:RowFormWidget
SaveValue	Widget/EditRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, uint8_t &value) const$/;"	f	class:RowFormWidget
SaveValue	Widget/ProfileRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, const char *registry_key,$/;"	f	class:RowFormWidget
SaveValue	Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, BasicStringBuffer<TCHAR, max> &value) const {$/;"	f	class:RowFormWidget
SaveValue	Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, const char *profile_key,$/;"	f	class:RowFormWidget
SaveValue	Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, const char *registry_key,$/;"	f	class:RowFormWidget
SaveValue	Widget/RowFormWidget.hpp	/^  bool SaveValue(unsigned i, unsigned &value) const {$/;"	f	class:RowFormWidget
SaveValue	Widget/UnitRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, UnitGroup unit_group, double &value) const$/;"	f	class:RowFormWidget
SaveValue	Widget/UnitRowFormWidget.cpp	/^RowFormWidget::SaveValue(unsigned i, UnitGroup unit_group,$/;"	f	class:RowFormWidget
SaveValueEnum	Widget/RowFormWidget.hpp	/^  bool SaveValueEnum(unsigned i, T &value) const {$/;"	f	class:RowFormWidget
SaveValueEnum	Widget/RowFormWidget.hpp	/^  bool SaveValueEnum(unsigned i, const char *registry_key, T &value) const {$/;"	f	class:RowFormWidget
SaveValueFileReader	Widget/ProfileRowFormWidget.cpp	/^RowFormWidget::SaveValueFileReader(unsigned i, const char *registry_key)$/;"	f	class:RowFormWidget
SaveWaypoint	Waypoint/SaveGlue.cpp	/^WaypointGlue::SaveWaypoint(const Waypoint &wp)$/;"	f	class:WaypointGlue
SaveWaypoints	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::SaveWaypoints()$/;"	f	class:WaypointManagerWidget
SaveWaypoints	Waypoint/SaveGlue.cpp	/^WaypointGlue::SaveWaypoints(const Waypoints &way_points)$/;"	f	class:WaypointGlue
SaveWidget	Widget/DockWindow.cpp	/^DockWindow::SaveWidget(bool &changed)$/;"	f	class:DockWindow
SbestLD	Engine/GlideSolvers/GlidePolar.hpp	/^  double SbestLD;$/;"	m	class:GlidePolar
Scale	Geo/GeoBounds.cpp	/^GeoBounds::Scale(double factor) const$/;"	f	class:GeoBounds
Scale	Screen/Layout.hpp	/^  Scale(int x)$/;"	f	namespace:Layout
Scale	Screen/Layout.hpp	/^  Scale(long x)$/;"	f	namespace:Layout
Scale	Screen/Layout.hpp	/^  Scale(unsigned x)$/;"	f	namespace:Layout
ScaleChart	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::ScaleChart(const DerivedInfo &calculated,$/;"	f	class:ThermalBandRenderer
ScaleChart	Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::ScaleChart(ChartRenderer &chart,$/;"	f	class:TraceHistoryRenderer
ScaleChartFromThermalBand	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::ScaleChartFromThermalBand(const ThermalBand &thermal_band,$/;"	f	class:ThermalBandRenderer
ScaleCopy	Screen/Canvas.cpp	/^Canvas::ScaleCopy(int dest_x, int dest_y,$/;"	f	class:Canvas
ScaleEnabled	Screen/Layout.hpp	/^  ScaleEnabled()$/;"	f	namespace:Layout
ScaleFinePenWidth	Screen/Layout.hpp	/^  ScaleFinePenWidth(unsigned width)$/;"	f	namespace:Layout
ScaleList	Projection/MapWindowProjection.cpp	/^static constexpr unsigned ScaleList[] = {$/;"	v	file:
ScaleListCount	Projection/MapWindowProjection.cpp	/^static constexpr unsigned ScaleListCount = ARRAY_SIZE(ScaleList);$/;"	v	file:
ScalePenWidth	Screen/Layout.hpp	/^  ScalePenWidth(unsigned width)$/;"	f	namespace:Layout
ScalePixels	Screen/Memory/RasterCanvas.hpp	/^  void ScalePixels(rpointer dest, unsigned dest_size,$/;"	f	class:RasterCanvas
ScaleRectangle	Screen/Memory/RasterCanvas.hpp	/^  void ScaleRectangle(int dest_x, int dest_y,$/;"	f	class:RasterCanvas
ScaleSupported	Screen/Layout.hpp	/^  ScaleSupported()$/;"	f	namespace:Layout
ScaleX	Terrain/ScanLine.cpp	/^ScaleX(const GridRay &ray, int x, int range)$/;"	f	file:
ScaleXFromData	Renderer/ChartRenderer.cpp	/^ChartRenderer::ScaleXFromData(const LeastSquares &lsdata)$/;"	f	class:ChartRenderer
ScaleXFromValue	Renderer/ChartRenderer.cpp	/^ChartRenderer::ScaleXFromValue(const double value)$/;"	f	class:ChartRenderer
ScaleY	Screen/Layout.hpp	/^  ScaleY(int y)$/;"	f	namespace:Layout
ScaleY	Terrain/ScanLine.cpp	/^ScaleY(const GridRay &ray, int y, int range)$/;"	f	file:
ScaleYFromData	Renderer/ChartRenderer.cpp	/^ChartRenderer::ScaleYFromData(const LeastSquares &lsdata)$/;"	f	class:ChartRenderer
ScaleYFromValue	Renderer/ChartRenderer.cpp	/^ChartRenderer::ScaleYFromValue(const double value)$/;"	f	class:ChartRenderer
Scan	Geo/Flat/TaskProjection.hpp	/^  bool Scan(const GeoPoint &ref) {$/;"	f	class:TaskProjection
Scan	Kobo/WPASupplicant.cpp	/^WPASupplicant::Scan()$/;"	f	class:WPASupplicant
Scan	Task/TaskStore.cpp	/^TaskStore::Scan(bool extra)$/;"	f	class:TaskStore
ScanActive	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::ScanActive(const OrderedTaskPoint &atp)$/;"	f	class:OrderedTaskPoint
ScanAll	Weather/Rasp/RaspStore.cpp	/^RaspStore::ScanAll()$/;"	f	class:RaspStore
ScanBluetoothLeWidget	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  explicit ScanBluetoothLeWidget(WidgetDialog &_dialog)$/;"	f	class:final
ScanBounds	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::ScanBounds(GeoBounds &bounds) const$/;"	f	class:OrderedTaskPoint
ScanBounds	Engine/Trace/Vector.cpp	/^TracePointVector::ScanBounds(GeoBounds &bounds) const$/;"	f	class:TracePointVector
ScanBounds	Renderer/TrailRenderer.hpp	/^  void ScanBounds(GeoBounds &bounds) const {$/;"	f	class:TrailRenderer
ScanBuffer	Replay/IgcReplay.cpp	/^IgcReplay::ScanBuffer(const char *buffer, IGCFix &fix, NMEAInfo &basic)$/;"	f	class:IgcReplay
ScanDirectories	OS/FileUtil.cpp	/^ScanDirectories(File::Visitor &visitor, bool recursive,$/;"	f	file:
ScanDirectoryTop	Form/DataField/File.cpp	/^FileDataField::ScanDirectoryTop(const TCHAR *filter)$/;"	f	class:FileDataField
ScanDistanceMax	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceMax()$/;"	f	class:OrderedTask
ScanDistanceMax	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceMax() const$/;"	f	class:TaskLeg
ScanDistanceMin	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceMin(const GeoPoint &location, bool full)$/;"	f	class:OrderedTask
ScanDistanceMin	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceMin() const$/;"	f	class:TaskLeg
ScanDistanceMinMax	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceMinMax(const GeoPoint &location, bool force,$/;"	f	class:OrderedTask
ScanDistanceMinMax	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanDistanceMinMax(const GeoPoint &location, bool full,$/;"	f	class:UnorderedTask
ScanDistanceNominal	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceNominal()$/;"	f	class:OrderedTask
ScanDistanceNominal	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceNominal() const$/;"	f	class:TaskLeg
ScanDistanceNominal	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanDistanceNominal()$/;"	f	class:UnorderedTask
ScanDistancePlanned	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistancePlanned()$/;"	f	class:OrderedTask
ScanDistancePlanned	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistancePlanned()$/;"	f	class:TaskLeg
ScanDistancePlanned	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanDistancePlanned()$/;"	f	class:UnorderedTask
ScanDistanceRemaining	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceRemaining(const GeoPoint &location)$/;"	f	class:OrderedTask
ScanDistanceRemaining	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceRemaining(const GeoPoint &ref)$/;"	f	class:TaskLeg
ScanDistanceRemaining	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanDistanceRemaining(const GeoPoint &location)$/;"	f	class:UnorderedTask
ScanDistanceScored	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceScored(const GeoPoint &location)$/;"	f	class:OrderedTask
ScanDistanceScored	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceScored(const GeoPoint &ref) const$/;"	f	class:TaskLeg
ScanDistanceScored	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanDistanceScored(const GeoPoint &location)$/;"	f	class:UnorderedTask
ScanDistanceTravelled	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanDistanceTravelled(const GeoPoint &location)$/;"	f	class:OrderedTask
ScanDistanceTravelled	Engine/Task/Points/TaskLeg.cpp	/^TaskLeg::ScanDistanceTravelled(const GeoPoint &ref)$/;"	f	class:TaskLeg
ScanDistanceTravelled	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanDistanceTravelled(const GeoPoint &location)$/;"	f	class:UnorderedTask
ScanFiles	OS/FileUtil.cpp	/^ScanFiles(File::Visitor &visitor, Path sPath,$/;"	f	file:
ScanHorizontalLine	Terrain/RasterBuffer.cpp	/^RasterBuffer::ScanHorizontalLine(unsigned ax, unsigned bx, unsigned y,$/;"	f	class:RasterBuffer
ScanLegStartTime	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanLegStartTime()$/;"	f	class:OrderedTask
ScanLegStartTime	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanLegStartTime()$/;"	f	class:UnorderedTask
ScanLine	Terrain/RasterBuffer.cpp	/^RasterBuffer::ScanLine(unsigned ax, unsigned ay, unsigned bx, unsigned by,$/;"	f	class:RasterBuffer
ScanLine	Terrain/RasterMap.cpp	/^RasterMap::ScanLine(const GeoPoint &start, const GeoPoint &end,$/;"	f	class:RasterMap
ScanLine	Terrain/RasterTile.hpp	/^  void ScanLine(unsigned ax, unsigned ay, unsigned bx, unsigned by,$/;"	f	class:RasterTile
ScanLine	Terrain/ScanLine.cpp	/^RasterTileCache::ScanLine(const RasterLocation _start,$/;"	f	class:RasterTileCache
ScanLineChecked	Terrain/RasterBuffer.cpp	/^RasterBuffer::ScanLineChecked(unsigned ax, unsigned ay,$/;"	f	class:RasterBuffer
ScanMap	Terrain/RasterRenderer.cpp	/^RasterRenderer::ScanMap(const RasterMap &map, const WindowProjection &projection)$/;"	f	class:RasterRenderer
ScanMapItem	Weather/Rasp/RaspStore.cpp	/^RaspStore::ScanMapItem(const ZipArchive &archive, MapItem &item)$/;"	f	class:RaspStore
ScanMultiplePatterns	Form/DataField/File.cpp	/^FileDataField::ScanMultiplePatterns(const TCHAR *patterns)$/;"	f	class:FileDataField
ScanResults	Kobo/WPASupplicant.cpp	/^WPASupplicant::ScanResults(WifiVisibleNetwork *dest, unsigned max)$/;"	f	class:WPASupplicant
ScanStartFinish	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanStartFinish()$/;"	f	class:OrderedTask
ScanTaskPoint	Engine/PathSolvers/ScanTaskPoint.hpp	/^class ScanTaskPoint {$/;"	c
ScanTileLine	Terrain/ScanLine.cpp	/^RasterTileCache::ScanTileLine(GridLocation start, GridLocation end,$/;"	f	class:RasterTileCache
ScanTotalStartTime	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::ScanTotalStartTime()$/;"	f	class:OrderedTask
ScanTotalStartTime	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::ScanTotalStartTime()$/;"	f	class:UnorderedTask
ScanVisibility	Topography/TopographyStore.cpp	/^TopographyStore::ScanVisibility(const WindowProjection &m_projection,$/;"	f	class:TopographyStore
Schedule	Monitor/AirspaceWarningMonitor.hpp	/^  void Schedule() {$/;"	f	class:AirspaceWarningMonitor
ScheduleExpire	Cloud/Main.cpp	/^  void ScheduleExpire() {$/;"	f	class:final	file:
ScheduleMerge	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::ScheduleMerge()$/;"	f	class:DeviceBlackboard
ScheduleOptimise	Engine/Waypoint/Waypoints.hpp	/^  void ScheduleOptimise() {$/;"	f	class:Waypoints
ScheduleSave	Cloud/Main.cpp	/^  void ScheduleSave() {$/;"	f	class:final	file:
Scissor	Screen/OpenGL/Scissor.hpp	/^  void Scissor(PixelRect rc) {$/;"	f	class:GLCanvasScissor
ScopeAlphaBlend	Screen/OpenGL/Scope.hpp	/^  ScopeAlphaBlend():GLBlend(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA) {}$/;"	f	class:ScopeAlphaBlend
ScopeAlphaBlend	Screen/OpenGL/Scope.hpp	/^class ScopeAlphaBlend : GLBlend {$/;"	c
ScopeBusyIndicator	Screen/Busy.hpp	/^  ScopeBusyIndicator()$/;"	f	class:ScopeBusyIndicator
ScopeBusyIndicator	Screen/Busy.hpp	/^class ScopeBusyIndicator {$/;"	c
ScopeCalculatedListener	Blackboard/ScopeCalculatedListener.hpp	/^  ScopeCalculatedListener(LiveBlackboard &_blackboard, Function _function)$/;"	f	class:ScopeCalculatedListener
ScopeCalculatedListener	Blackboard/ScopeCalculatedListener.hpp	/^class ScopeCalculatedListener : public NullBlackboardListener {$/;"	c
ScopeCheckStack	Lua/Assert.hxx	/^	explicit ScopeCheckStack(lua_State *_L, int offset = 0)$/;"	f	class:Lua::ScopeCheckStack
ScopeCheckStack	Lua/Assert.hxx	/^class ScopeCheckStack {$/;"	c	namespace:Lua
ScopeColorPointer	Screen/OpenGL/Color.hpp	/^  ScopeColorPointer(const Color *p) {$/;"	f	struct:ScopeColorPointer
ScopeColorPointer	Screen/OpenGL/Color.hpp	/^struct ScopeColorPointer {$/;"	s
ScopeExitCat	Util/ScopeExit.hxx	72;"	d
ScopeExitGuard	Util/ScopeExit.hxx	/^	ScopeExitGuard(ScopeExitGuard &&src)$/;"	f	class:ScopeExitGuard
ScopeExitGuard	Util/ScopeExit.hxx	/^	explicit ScopeExitGuard(F &&f):F(std::forward<F>(f)) {}$/;"	f	class:ScopeExitGuard
ScopeExitGuard	Util/ScopeExit.hxx	/^class ScopeExitGuard : F {$/;"	c
ScopeExitName	Util/ScopeExit.hxx	73;"	d
ScopeExitTag	Util/ScopeExit.hxx	/^struct ScopeExitTag {$/;"	s
ScopeGPSListener	Blackboard/ScopeGPSListener.hpp	/^  ScopeGPSListener(LiveBlackboard &_blackboard, Function _function)$/;"	f	class:ScopeGPSListener
ScopeGPSListener	Blackboard/ScopeGPSListener.hpp	/^class ScopeGPSListener : public NullBlackboardListener {$/;"	c
ScopeGlobalAsioThread	IO/Async/GlobalAsioThread.hpp	/^  ScopeGlobalAsioThread() {$/;"	f	class:ScopeGlobalAsioThread
ScopeGlobalAsioThread	IO/Async/GlobalAsioThread.hpp	/^class ScopeGlobalAsioThread {$/;"	c
ScopeGlobalPCMMixer	Audio/GlobalPCMMixer.hpp	/^  ScopeGlobalPCMMixer() {$/;"	f	class:final
ScopeGlobalPCMResourcePlayer	Audio/GlobalPCMResourcePlayer.hpp	/^  ScopeGlobalPCMResourcePlayer() {$/;"	f	class:final
ScopeGlobalVolumeController	Audio/GlobalVolumeController.hpp	/^  ScopeGlobalVolumeController() {$/;"	f	class:final
ScopeLockCPU	Hardware/CPU.hpp	/^  ScopeLockCPU() {$/;"	f	struct:ScopeLockCPU
ScopeLockCPU	Hardware/CPU.hpp	/^struct ScopeLockCPU {$/;"	s
ScopeReturnDevice	Device/Descriptor.cpp	/^  ScopeReturnDevice(DeviceDescriptor &_device, OperationEnvironment &_env)$/;"	f	struct:ScopeReturnDevice
ScopeReturnDevice	Device/Descriptor.cpp	/^struct ScopeReturnDevice {$/;"	s	file:
ScopeSuspendAllThreads	Protection.hpp	/^  ScopeSuspendAllThreads() { SuspendAllThreads(); }$/;"	f	class:ScopeSuspendAllThreads
ScopeSuspendAllThreads	Protection.hpp	/^class ScopeSuspendAllThreads {$/;"	c
ScopeTextureConstantAlpha	Screen/OpenGL/ConstantAlpha.cpp	/^ScopeTextureConstantAlpha::ScopeTextureConstantAlpha(bool use_texture_alpha,$/;"	f	class:ScopeTextureConstantAlpha
ScopeTextureConstantAlpha	Screen/OpenGL/ConstantAlpha.hpp	/^class ScopeTextureConstantAlpha {$/;"	c
ScopeUnlock	Thread/Mutex.hxx	/^class ScopeUnlock {$/;"	c
ScopeVertexPointer	Screen/OpenGL/VertexPointer.hpp	/^  ScopeVertexPointer() {$/;"	f	struct:ScopeVertexPointer
ScopeVertexPointer	Screen/OpenGL/VertexPointer.hpp	/^  ScopeVertexPointer(GLenum type, const void *p) {$/;"	f	struct:ScopeVertexPointer
ScopeVertexPointer	Screen/OpenGL/VertexPointer.hpp	/^  ScopeVertexPointer(const T *p) {$/;"	f	struct:ScopeVertexPointer
ScopeVertexPointer	Screen/OpenGL/VertexPointer.hpp	/^struct ScopeVertexPointer {$/;"	s
Score	Computer/Wind/MeasurementList.hpp	/^  constexpr unsigned Score(unsigned _time) const {$/;"	f	struct:WindMeasurement
ScoreAdjustment	Engine/Task/ObservationZones/CylinderZone.cpp	/^CylinderZone::ScoreAdjustment() const$/;"	f	class:CylinderZone
ScoreAdjustment	Engine/Task/ObservationZones/KeyholeZone.cpp	/^KeyholeZone::ScoreAdjustment() const$/;"	f	class:KeyholeZone
ScoreAdjustment	Engine/Task/ObservationZones/LineSectorZone.cpp	/^LineSectorZone::ScoreAdjustment() const$/;"	f	class:LineSectorZone
ScoreAdjustment	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::ScoreAdjustment() const$/;"	f	class:ObservationZoneClient
ScoreAdjustment	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::ScoreAdjustment() const$/;"	f	class:SectorZone
ScoreFirstEntry	Engine/Task/Points/ScoredTaskPoint.hpp	/^  virtual bool ScoreFirstEntry() const {$/;"	f	class:ScoredTaskPoint
ScoreLastExit	Engine/Task/Points/ScoredTaskPoint.hpp	/^  virtual bool ScoreLastExit() const {$/;"	f	class:ScoredTaskPoint
ScoredTaskPoint	Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::ScoredTaskPoint(const GeoPoint &location, bool b_scored)$/;"	f	class:ScoredTaskPoint
ScoredTaskPoint	Engine/Task/Points/ScoredTaskPoint.hpp	/^class ScoredTaskPoint : public SampledTaskPoint$/;"	c
ScoringConfigPanel	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  ScoringConfigPanel()$/;"	f	class:final
ScreenClosestPoint	Math/Screen.cpp	/^ScreenClosestPoint(const PixelPoint &p1, const PixelPoint &p2,$/;"	f
ScreenDeinitialized	Screen/Debug.cpp	/^ScreenDeinitialized()$/;"	f
ScreenDeinitialized	Screen/Debug.hpp	/^ScreenDeinitialized() {}$/;"	f
ScreenGlobalInit	Screen/EGL/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	Screen/FB/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	Screen/GDI/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	Screen/GLX/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenGlobalInit	Screen/Init.hpp	/^class ScreenGlobalInit {$/;"	c
ScreenGlobalInit	Screen/SDL/Init.cpp	/^ScreenGlobalInit::ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
ScreenInitialized	Screen/Debug.cpp	/^ScreenInitialized()$/;"	f
ScreenInitialized	Screen/Debug.hpp	/^ScreenInitialized() {}$/;"	f
ScreenOrientation	Android/NativeView.hpp	/^  enum class ScreenOrientation {$/;"	c	class:NativeView
ScreenStopWatch	Screen/StopWatch.hpp	/^class ScreenStopWatch {$/;"	c
ScreenToGeo	Projection/Projection.cpp	/^Projection::ScreenToGeo(int x, int y) const$/;"	f	class:Projection
ScreenToGeo	Projection/Projection.hpp	/^  GeoPoint ScreenToGeo(const PixelPoint &pt) const {$/;"	f	class:Projection
ScreenVisible	Projection/WindowProjection.cpp	/^WindowProjection::ScreenVisible(const PixelPoint &P) const$/;"	f	class:WindowProjection
ScreenX	Renderer/ChartRenderer.cpp	/^ChartRenderer::ScreenX(double _x) const$/;"	f	class:ChartRenderer
ScreenY	Renderer/ChartRenderer.cpp	/^ChartRenderer::ScreenY(double _y) const$/;"	f	class:ChartRenderer
ScriptFileVisitor	Kobo/ToolsDialog.cpp	/^  ScriptFileVisitor(std::vector<ListItem> &_list):list(_list) {}$/;"	f	class:ScriptFileVisitor
ScriptFileVisitor	Kobo/ToolsDialog.cpp	/^class ScriptFileVisitor: public File::Visitor$/;"	c	file:
Scroll	Screen/TerminalWindow.cpp	/^TerminalWindow::Scroll()$/;"	f	class:TerminalWindow
ScrollBar	Form/ScrollBar.cpp	/^ScrollBar::ScrollBar(const ButtonLook &_button_look)$/;"	f	class:ScrollBar
ScrollBar	Form/ScrollBar.hpp	/^class ScrollBar {$/;"	c
ScrollVertically	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::ScrollVertically(int delta_lines)$/;"	f	class:LargeTextWindow
ScrollVertically	Screen/GDI/LargeTextWindow.cpp	/^LargeTextWindow::ScrollVertically(int delta_lines)$/;"	f	class:LargeTextWindow
SearchPoint	Geo/SearchPoint.cpp	/^SearchPoint::SearchPoint(const FlatGeoPoint &floc, const FlatProjection &tp)$/;"	f	class:SearchPoint
SearchPoint	Geo/SearchPoint.cpp	/^SearchPoint::SearchPoint(const GeoPoint &loc, const FlatProjection &tp)$/;"	f	class:SearchPoint
SearchPoint	Geo/SearchPoint.hpp	/^  SearchPoint(const GeoPoint &_location, const FlatGeoPoint &_flat)$/;"	f	class:SearchPoint
SearchPoint	Geo/SearchPoint.hpp	/^  SearchPoint(const GeoPoint &loc)$/;"	f	class:SearchPoint
SearchPoint	Geo/SearchPoint.hpp	/^class SearchPoint$/;"	c
SearchPointVector	Geo/SearchPointVector.hpp	/^  SearchPointVector(Args&&... args)$/;"	f	class:SearchPointVector
SearchPointVector	Geo/SearchPointVector.hpp	/^class SearchPointVector: public std::vector<SearchPoint> {$/;"	c
SeatHandleCapabilities	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::SeatHandleCapabilities(bool has_pointer, bool has_keyboard,$/;"	f	class:WaylandEventQueue
SecondDriver	Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
SecondsUntil	InfoBoxes/Content/Task.cpp	/^SecondsUntil(unsigned now, RoughTime until)$/;"	f	file:
SectorDefaults	Engine/Task/TaskBehaviour.hpp	/^struct SectorDefaults$/;"	s
SectorZone	Engine/Task/ObservationZones/SectorZone.hpp	/^  SectorZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:SectorZone
SectorZone	Engine/Task/ObservationZones/SectorZone.hpp	/^  SectorZone(const GeoPoint &loc, const double _radius = 10000.0,$/;"	f	class:SectorZone
SectorZone	Engine/Task/ObservationZones/SectorZone.hpp	/^  SectorZone(const SectorZone &other, const GeoPoint &reference)$/;"	f	class:SectorZone
SectorZone	Engine/Task/ObservationZones/SectorZone.hpp	/^class SectorZone: public CylinderZone$/;"	c
SectorZoneEditWidget	Dialogs/Task/Widgets/SectorZoneEditWidget.cpp	/^SectorZoneEditWidget::SectorZoneEditWidget(SectorZone &_oz)$/;"	f	class:SectorZoneEditWidget
SectorZoneEditWidget	Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^class SectorZoneEditWidget : public ObservationZoneEditWidget {$/;"	c
Security	Device/Driver/LX/LXN.hpp	/^  struct Security {$/;"	s	namespace:LXN
Security7000	Device/Driver/LX/LXN.hpp	/^  struct Security7000 {$/;"	s	namespace:LXN
SecurityOld	Device/Driver/LX/LXN.hpp	/^  struct SecurityOld {$/;"	s	namespace:LXN
SecurityType	Device/Driver/LX/LXN.hpp	/^  enum SecurityType {$/;"	g	namespace:LXN
SeeYouTaskInformation	Task/TaskFileSeeYou.cpp	/^  SeeYouTaskInformation():$/;"	f	struct:SeeYouTaskInformation
SeeYouTaskInformation	Task/TaskFileSeeYou.cpp	/^struct SeeYouTaskInformation {$/;"	s	file:
SeeYouTurnpointInformation	Task/TaskFileSeeYou.cpp	/^  SeeYouTurnpointInformation():$/;"	f	struct:SeeYouTurnpointInformation
SeeYouTurnpointInformation	Task/TaskFileSeeYou.cpp	/^struct SeeYouTurnpointInformation {$/;"	s	file:
Seek	IO/FileHandle.hpp	/^  bool Seek(long offset, int whence) {$/;"	f	class:FileHandle
Seek	IO/FileReader.cxx	/^FileReader::Seek(off_t offset)$/;"	f	class:FileReader
SeekMemory	Device/Driver/LX/Protocol.hpp	/^  struct SeekMemory {$/;"	s	namespace:LX
SeekMemory	Device/Driver/LXERA/Protocol.hpp	/^  struct SeekMemory {$/;"	s	namespace:LXEra
SegmentNearestPoint	Geo/SearchPointVector.cpp	/^SegmentNearestPoint(const SearchPointVector& spv,$/;"	f	file:
Select	Computer/Wind/Computer.cpp	/^WindComputer::Select(const WindSettings &settings,$/;"	f	class:WindComputer
Select	Net/HTTP/Session.cpp	/^Net::Session::Select(int timeout_ms)$/;"	f	class:Net::Session
Select	Screen/GDI/Canvas.hpp	/^  void Select(const Brush &brush) {$/;"	f	class:Canvas
Select	Screen/GDI/Canvas.hpp	/^  void Select(const Font &font) {$/;"	f	class:Canvas
Select	Screen/GDI/Canvas.hpp	/^  void Select(const Pen &pen) {$/;"	f	class:Canvas
Select	Screen/Memory/Canvas.hpp	/^  void Select(const Brush &_brush) {$/;"	f	class:Canvas
Select	Screen/Memory/Canvas.hpp	/^  void Select(const Font &_font) {$/;"	f	class:Canvas
Select	Screen/Memory/Canvas.hpp	/^  void Select(const Pen &_pen) {$/;"	f	class:Canvas
Select	Screen/OpenGL/Canvas.hpp	/^  void Select(const Brush &_brush) {$/;"	f	class:Canvas
Select	Screen/OpenGL/Canvas.hpp	/^  void Select(const Font &_font) {$/;"	f	class:Canvas
Select	Screen/OpenGL/Canvas.hpp	/^  void Select(const Pen &_pen) {$/;"	f	class:Canvas
SelectAltitudeDifference	Engine/GlideSolvers/GlideResult.hpp	/^  double SelectAltitudeDifference(const GlideSettings &settings) const {$/;"	f	struct:GlideResult
SelectBlackBrush	Screen/GDI/Canvas.hpp	/^  void SelectBlackBrush() {$/;"	f	class:Canvas
SelectBlackBrush	Screen/Memory/Canvas.hpp	/^  void SelectBlackBrush() {$/;"	f	class:Canvas
SelectBlackBrush	Screen/OpenGL/Canvas.hpp	/^  void SelectBlackBrush() {$/;"	f	class:Canvas
SelectBlackPen	Screen/GDI/Canvas.hpp	/^  void SelectBlackPen() {$/;"	f	class:Canvas
SelectBlackPen	Screen/Memory/Canvas.hpp	/^  void SelectBlackPen() {$/;"	f	class:Canvas
SelectBlackPen	Screen/OpenGL/Canvas.hpp	/^  void SelectBlackPen() {$/;"	f	class:Canvas
SelectFlight	Device/Driver/FLARM/Logger.cpp	/^FlarmDevice::SelectFlight(uint8_t record_number, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SelectHollowBrush	Screen/GDI/Canvas.hpp	/^  void SelectHollowBrush() {$/;"	f	class:Canvas
SelectHollowBrush	Screen/Memory/Canvas.hpp	/^  void SelectHollowBrush() {$/;"	f	class:Canvas
SelectHollowBrush	Screen/OpenGL/Canvas.hpp	/^  void SelectHollowBrush() {$/;"	f	class:Canvas
SelectLuaFile	Input/InputEventsLua.cpp	/^SelectLuaFile(const TCHAR *path)$/;"	f	file:
SelectNearTarget	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::SelectNearTarget(PixelPoint p, int max_distance)$/;"	f	class:FlarmTrafficWindow
SelectNetwork	Kobo/WPASupplicant.cpp	/^WPASupplicant::SelectNetwork(unsigned id)$/;"	f	class:WPASupplicant
SelectNext	Form/ButtonPanel.cpp	/^ButtonPanel::SelectNext()$/;"	f	class:ButtonPanel
SelectNullPen	Screen/GDI/Canvas.hpp	/^  void SelectNullPen() {$/;"	f	class:Canvas
SelectNullPen	Screen/Memory/Canvas.hpp	/^  void SelectNullPen() {$/;"	f	class:Canvas
SelectNullPen	Screen/OpenGL/Canvas.hpp	/^  void SelectNullPen() {$/;"	f	class:Canvas
SelectObject	Screen/GDI/Canvas.hpp	/^  HGDIOBJ SelectObject(HGDIOBJ handle) {$/;"	f	class:Canvas
SelectOptimisedPixelOperations	Screen/Memory/Optimised.hpp	/^  constexpr SelectOptimisedPixelOperations(const SelectOptimisedPixelOperations<Optimised, N, Portable> &other)$/;"	f	class:SelectOptimisedPixelOperations
SelectOptimisedPixelOperations	Screen/Memory/Optimised.hpp	/^  explicit constexpr SelectOptimisedPixelOperations(Args... args)$/;"	f	class:SelectOptimisedPixelOperations
SelectOptimisedPixelOperations	Screen/Memory/Optimised.hpp	/^class SelectOptimisedPixelOperations$/;"	c
SelectOptionalStart	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SelectOptionalStart(unsigned pos)$/;"	f	class:OrderedTask
SelectPath	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::SelectPath(Path path)$/;"	f	class:ProfileListWidget
SelectPrevious	Form/ButtonPanel.cpp	/^ButtonPanel::SelectPrevious()$/;"	f	class:ButtonPanel
SelectProfile	Dialogs/StartupDialog.cpp	/^SelectProfile(Path path)$/;"	f	file:
SelectProfileCallback	Dialogs/StartupDialog.cpp	/^SelectProfileCallback(const TCHAR *caption, DataField &_df,$/;"	f	file:
SelectProfileDialog	Dialogs/ProfileListDialog.cpp	/^SelectProfileDialog(Path selected_path)$/;"	f
SelectStockObject	Screen/GDI/Canvas.hpp	/^  void SelectStockObject(int fnObject) {$/;"	f	class:Canvas
SelectWhiteBrush	Screen/GDI/Canvas.hpp	/^  void SelectWhiteBrush() {$/;"	f	class:Canvas
SelectWhiteBrush	Screen/Memory/Canvas.hpp	/^  void SelectWhiteBrush() {$/;"	f	class:Canvas
SelectWhiteBrush	Screen/OpenGL/Canvas.hpp	/^  void SelectWhiteBrush() {$/;"	f	class:Canvas
SelectWhitePen	Screen/GDI/Canvas.hpp	/^  void SelectWhitePen() {$/;"	f	class:Canvas
SelectWhitePen	Screen/Memory/Canvas.hpp	/^  void SelectWhitePen() {$/;"	f	class:Canvas
SelectWhitePen	Screen/OpenGL/Canvas.hpp	/^  void SelectWhitePen() {$/;"	f	class:Canvas
SelfMapItem	MapWindow/Items/MapItem.hpp	/^  SelfMapItem(const GeoPoint &_location, const Angle _bearing)$/;"	f	struct:SelfMapItem
SelfMapItem	MapWindow/Items/MapItem.hpp	/^struct SelfMapItem: public MapItem$/;"	s
SelfTimingKalmanFilter1d	Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::SelfTimingKalmanFilter1d(const double max_dt) {$/;"	f	class:SelfTimingKalmanFilter1d
SelfTimingKalmanFilter1d	Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::SelfTimingKalmanFilter1d(const double max_dt,$/;"	f	class:SelfTimingKalmanFilter1d
SelfTimingKalmanFilter1d	Math/SelfTimingKalmanFilter1d.hpp	/^class SelfTimingKalmanFilter1d {$/;"	c
Send	Device/Driver/ATR833.cpp	/^  bool Send(Port &port, OperationEnvironment &env) {$/;"	f	class:ATRBuffer
Send	Device/Driver/FLARM/TextProtocol.cpp	/^FlarmDevice::Send(const char *sentence, OperationEnvironment &env)$/;"	f	class:FlarmDevice
Send	Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::Send(Port &port, OperationEnvironment &env,$/;"	f	class:IMI
Send	Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::Send(Port &port, const TMsg &msg, OperationEnvironment &env)$/;"	f	class:IMI
Send	Device/Driver/KRT2.cpp	/^KRT2Device::Send(const uint8_t *msg, unsigned msg_size,$/;"	f	class:KRT2Device
Send	Net/HTTP/Request.cpp	/^Net::Request::Send(unsigned _timeout_ms)$/;"	f	class:Net::Request
SendBuffer	Tracking/SkyLines/Server.cpp	/^Server::SendBuffer(const boost::asio::ip::udp::endpoint &endpoint,$/;"	f	class:SkyLinesTracking::Server
SendCalculatedUpdate	MainWindow.hpp	/^  void SendCalculatedUpdate() {$/;"	f	class:MainWindow
SendCloudFix	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::SendCloudFix(const NMEAInfo &basic,$/;"	f	class:SkyLinesTracking::Glue
SendCommand	Device/Driver/CAI302/Protocol.cpp	/^CAI302::SendCommand(Port &port, const char *cmd,$/;"	f	class:CAI302
SendCommand	Device/Driver/LX/Protocol.hpp	/^  SendCommand(Port &port, Command command)$/;"	f	namespace:LX
SendCommand	Device/Driver/LXERA/Protocol.hpp	/^  SendCommand(Port &port, Command command)$/;"	f	namespace:LXEra
SendCommand	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommand(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendCommand	Device/Port/K6BtPort.cpp	/^K6BtPort::SendCommand(uint8_t cmd)$/;"	f	class:K6BtPort
SendCommand	Kobo/WPASupplicant.cpp	/^WPASupplicant::SendCommand(const char *cmd)$/;"	f	class:WPASupplicant
SendCommandQuick	Device/Driver/CAI302/Protocol.cpp	/^CAI302::SendCommandQuick(Port &port, const char *cmd,$/;"	f	class:CAI302
SendCommandReadBulk	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandReadBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendCommandReadBulk	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandReadBulk(Port &port, unsigned baud_rate,$/;"	f	class:Volkslogger
SendCommandReadBulk	Device/Driver/Volkslogger/Protocol.hpp	/^  static inline int SendCommandReadBulk(Port &port, unsigned baud_rate,$/;"	f	namespace:Volkslogger
SendCommandSwitchBaudRate	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandSwitchBaudRate(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendCommandSwitchBaudRate	Device/Driver/Volkslogger/Protocol.hpp	/^  static inline bool SendCommandSwitchBaudRate(Port &port,$/;"	f	namespace:Volkslogger
SendCommandWriteBulk	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::SendCommandWriteBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
SendEscaped	Device/Driver/FLARM/BinaryProtocol.cpp	/^FLARM::SendEscaped(Port &port, const void *buffer, size_t length,$/;"	f	class:FLARM
SendEscaped	Device/Driver/FLARM/Device.hpp	/^  bool SendEscaped(const void *data, size_t length,$/;"	f	class:FlarmDevice
SendFix	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendFix(const NMEAInfo &basic)$/;"	f	class:SkyLinesTracking::Client
SendFixes	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::SendFixes(const NMEAInfo &basic)$/;"	f	class:SkyLinesTracking::Glue
SendFrameHeader	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::SendFrameHeader(const FLARM::FrameHeader &header,$/;"	f	class:FlarmDevice
SendGPSUpdate	MainWindow.hpp	/^  void SendGPSUpdate() {$/;"	f	class:MainWindow
SendGetComputerSettings	ActionInterface.cpp	/^ActionInterface::SendGetComputerSettings()$/;"	f	class:ActionInterface
SendMapSettings	ActionInterface.cpp	/^ActionInterface::SendMapSettings(const bool trigger_draw)$/;"	f	class:ActionInterface
SendNanoSetting	Device/Driver/LX/Settings.cpp	/^LXDevice::SendNanoSetting(const char *name, const char *value,$/;"	f	class:LXDevice
SendNotification	Event/DelayedNotify.hpp	/^  void SendNotification() {$/;"	f	class:final
SendNotification	Event/Notify.cpp	/^Notify::SendNotification()$/;"	f	class:Notify
SendPacket	Device/Driver/LX/Protocol.cpp	/^LX::SendPacket(Port &port, Command command,$/;"	f	class:LX
SendPacket	Device/Driver/LXERA/Protocol.cpp	/^LXEra::SendPacket(Port &port, Command command,$/;"	f	class:LXEra
SendPacket	Tracking/SkyLines/Client.hpp	/^  void SendPacket(const P &packet) {$/;"	f	class:SkyLinesTracking::Client
SendPacket	Tracking/SkyLines/Server.hpp	/^  void SendPacket(const boost::asio::ip::udp::endpoint &endpoint,$/;"	f	class:SkyLinesTracking::Server
SendPing	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendPing(uint16_t id)$/;"	f	class:SkyLinesTracking::Client
SendPosition	Tracking/LiveTrack24.cpp	/^LiveTrack24::SendPosition(SessionID session, unsigned packet_id,$/;"	f	class:LiveTrack24
SendRequest	Tracking/LiveTrack24.cpp	/^LiveTrack24::SendRequest(const char *url, OperationEnvironment &env)$/;"	f	class:LiveTrack24
SendRet	Device/Driver/IMI/Protocol/Communication.cpp	/^IMI::SendRet(Port &port, OperationEnvironment &env,$/;"	f	class:IMI
SendSYN	Device/Driver/LX/Protocol.hpp	/^  SendSYN(Port &port)$/;"	f	namespace:LX
SendSYN	Device/Driver/LXERA/Protocol.hpp	/^  SendSYN(Port &port)$/;"	f	namespace:LXEra
SendSetBaudrate	Device/Port/K6BtPort.cpp	/^K6BtPort::SendSetBaudrate(unsigned _baud_rate)$/;"	f	class:K6BtPort
SendSetting	Device/Driver/FLARM/Settings.cpp	/^FlarmDevice::SendSetting(const char *name, const char *value,$/;"	f	class:FlarmDevice
SendSetting	Device/Driver/Vega/Settings.cpp	/^VegaDevice::SendSetting(const char *name, int value, OperationEnvironment &env)$/;"	f	class:VegaDevice
SendStartByte	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::SendStartByte()$/;"	f	class:FlarmDevice
SendThermal	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendThermal(uint32_t time,$/;"	f	class:SkyLinesTracking::Client
SendThermalRequest	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendThermalRequest()$/;"	f	class:SkyLinesTracking::Client
SendTimeoutS	Net/Option.hpp	/^  explicit constexpr SendTimeoutS(unsigned _value_s):value(_value_s * 1000) {}$/;"	f	class:SendTimeoutS
SendTimeoutS	Net/Option.hpp	/^  explicit constexpr SendTimeoutS(unsigned _value_s):value{time_t(_value_s), 0} {}$/;"	f	class:SendTimeoutS
SendTimeoutS	Net/Option.hpp	/^class SendTimeoutS {$/;"	c
SendTo	Device/Driver/Vega/Volatile.cpp	/^Vega::VolatileData::SendTo(Port &port, OperationEnvironment &env) const$/;"	f	class:Vega::VolatileData
SendTrafficRequest	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendTrafficRequest(bool followees, bool club,$/;"	f	class:SkyLinesTracking::Client
SendUIState	ActionInterface.cpp	/^ActionInterface::SendUIState()$/;"	f	class:ActionInterface
SendUIState	ActionInterface.cpp	/^ActionInterface::SendUIState(const bool trigger_draw)$/;"	f	class:ActionInterface
SendUserNameRequest	Tracking/SkyLines/Client.cpp	/^SkyLinesTracking::Client::SendUserNameRequest(uint32_t user_id)$/;"	f	class:SkyLinesTracking::Client
SendV7Setting	Device/Driver/LX/Settings.cpp	/^LXDevice::SendV7Setting(const char *name, const char *value,$/;"	f	class:LXDevice
SendWithCRC	Device/Driver/Volkslogger/Protocol.cpp	/^SendWithCRC(Port &port, const void *data, size_t length,$/;"	f	file:
Serial	Device/Driver/LX/LXN.hpp	/^  struct Serial {$/;"	s	namespace:LXN
Serial	Util/Serial.hpp	/^  Serial():value(0) {}$/;"	f	class:Serial
Serial	Util/Serial.hpp	/^class Serial {$/;"	c
SerialPort	Device/Port/SerialPort.cpp	/^SerialPort::SerialPort(PortListener *_listener, DataHandler &_handler)$/;"	f	class:SerialPort
SerialPort	Device/Port/SerialPort.hpp	/^class SerialPort : public BufferedPort, protected StoppableThread$/;"	c
Serialise	Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const GeoPoint &data)$/;"	f	file:
Serialise	Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const ObservationZonePoint &data)$/;"	f	file:
Serialise	Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const OrderedTaskPoint &data,$/;"	f	file:
Serialise	Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const OrderedTaskPoint &tp,$/;"	f	file:
Serialise	Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const OrderedTaskSettings &data)$/;"	f	file:
Serialise	Task/Serialiser.cpp	/^Serialise(WritableDataNode &node, const Waypoint &data)$/;"	f	file:
Serialise	XML/Writer.cpp	/^XMLNode::Serialise(BufferedOutputStream &os, bool format) const$/;"	f	class:XMLNode
Serialise	XML/Writer.cpp	/^XMLNode::Serialise(const Data &data, BufferedOutputStream &os, int format)$/;"	f	class:XMLNode
Serialiser	Cloud/Serialiser.hpp	/^  explicit Serialiser(OutputStream &_os):BufferedOutputStream(_os) {}$/;"	f	class:Serialiser
Serialiser	Cloud/Serialiser.hpp	/^class Serialiser : public BufferedOutputStream {$/;"	c
Server	Tracking/SkyLines/Server.cpp	/^Server::Server(boost::asio::io_context &io_context,$/;"	f	class:SkyLinesTracking::Server
Server	Tracking/SkyLines/Server.hpp	/^class Server {$/;"	c	namespace:SkyLinesTracking
Session	Net/HTTP/Session.hpp	/^  class Session {$/;"	c	namespace:Net
SessionID	Tracking/LiveTrack24.hpp	/^  typedef uint32_t SessionID;$/;"	t	namespace:LiveTrack24
Set	Device/SettingsMap.hpp	/^  void Set(const K &key, const V &value) {$/;"	f	class:DeviceSettingsMap
Set	Dialogs/Device/DeviceListDialog.cpp	/^    void Set(const DeviceConfig &config, const DeviceDescriptor &device,$/;"	f	struct:final::Flags
Set	Dialogs/Device/DeviceListDialog.cpp	/^    void Set(const DeviceConfig &config, const DeviceDescriptor &device,$/;"	f	union:final::Item
Set	Dialogs/FileManager.cpp	/^    void Set(const TCHAR *_name, const DownloadStatus *_download_status,$/;"	f	struct:ManagedFileListWidget::FileItem
Set	FLARM/ColorDatabase.hpp	/^  void Set(FlarmId id, FlarmColor color) {$/;"	f	class:FlarmColorDatabase
Set	FLARM/NameDatabase.cpp	/^FlarmNameDatabase::Set(FlarmId id, const TCHAR *name)$/;"	f	class:FlarmNameDatabase
Set	Form/DataField/Boolean.cpp	/^DataFieldBoolean::Set(bool Value)$/;"	f	class:DataFieldBoolean
Set	Form/DataField/Boolean.hpp	/^  void Set(int Value) {$/;"	f	class:final
Set	Form/DataField/Enum.cpp	/^DataFieldEnum::Entry::Set(unsigned _id, const TCHAR *_string,$/;"	f	class:DataFieldEnum::Entry
Set	Form/DataField/Enum.cpp	/^DataFieldEnum::Set(const TCHAR *text)$/;"	f	class:DataFieldEnum
Set	Form/DataField/Enum.cpp	/^DataFieldEnum::Set(unsigned Value)$/;"	f	class:DataFieldEnum
Set	Form/DataField/File.cpp	/^FileDataField::Item::Set(Path _path)$/;"	f	class:FileDataField::Item
Set	Form/DataField/File.cpp	/^FileDataField::Set(unsigned new_value)$/;"	f	class:FileDataField
Set	Form/DataField/Float.hpp	/^  void Set(double _value) {$/;"	f	class:final
Set	Form/DataField/Integer.hpp	/^  void Set(int _value) {$/;"	f	class:final
Set	Form/DataField/String.cpp	/^DataFieldString::Set(const TCHAR *Value)$/;"	f	class:DataFieldString
Set	Form/DataField/Time.hpp	/^  void Set(int _value) {$/;"	f	class:final
Set	Lua/Value.hxx	/^	void Set(V &&value) {$/;"	f	class:Lua::Value
Set	Menu/ButtonLabel.cpp	/^ButtonLabel::Set(const Menu &menu, const Menu *overlay, bool full)$/;"	f	class:ButtonLabel
Set	Profile/Map.cpp	/^ProfileMap::Set(const char *key, const char *value)$/;"	f	class:ProfileMap
Set	Profile/Map.hpp	/^  void Set(const char *key, bool value) {$/;"	f	class:ProfileMap
Set	Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, double value)$/;"	f	class:ProfileMap
Set	Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, int value)$/;"	f	class:ProfileMap
Set	Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, long value)$/;"	f	class:ProfileMap
Set	Profile/NumericValue.cpp	/^ProfileMap::Set(const char *key, unsigned value)$/;"	f	class:ProfileMap
Set	Profile/ProfileMap.cpp	/^Profile::Set(const char *key, const TCHAR *value)$/;"	f	class:Profile
Set	Profile/ProfileMap.cpp	/^Profile::Set(const char *key, const char *value)$/;"	f	class:Profile
Set	Profile/ProfileMap.cpp	/^Profile::Set(const char *key, double value)$/;"	f	class:Profile
Set	Profile/ProfileMap.cpp	/^Profile::Set(const char *key, int value)$/;"	f	class:Profile
Set	Profile/ProfileMap.cpp	/^Profile::Set(const char *key, long value)$/;"	f	class:Profile
Set	Profile/ProfileMap.cpp	/^Profile::Set(const char *key, unsigned value)$/;"	f	class:Profile
Set	Profile/ProfileMap.hpp	/^  static inline void Set(const char *key, bool value)$/;"	f	namespace:Profile
Set	Profile/StringValue.cpp	/^ProfileMap::Set(const char *key, const TCHAR *value)$/;"	f	class:ProfileMap
Set	Projection/ChartProjection.cpp	/^ChartProjection::Set(const PixelRect &rc, const GeoPoint &center,$/;"	f	class:ChartProjection
Set	Projection/ChartProjection.cpp	/^ChartProjection::Set(const PixelRect &rc, const OrderedTask &task)$/;"	f	class:ChartProjection
Set	Projection/ChartProjection.cpp	/^ChartProjection::Set(const PixelRect &rc, const OrderedTaskPoint &point)$/;"	f	class:ChartProjection
Set	Projection/ChartProjection.cpp	/^ChartProjection::Set(const PixelRect &rc,$/;"	f	class:ChartProjection
Set	Renderer/WaypointRenderer.cpp	/^  void Set(const WaypointPtr &_waypoint, PixelPoint &_point,$/;"	f	struct:VisibleWaypoint
Set	Screen/Android/Bitmap.cpp	/^Bitmap::Set(JNIEnv *env, jobject _bmp, Type _type, bool flipped)$/;"	f	class:Bitmap
Set	Screen/StopWatch.hpp	/^    void Set(const char *_text) {$/;"	f	struct:ScreenStopWatch::Marker
Set	Terrain/RasterProjection.cpp	/^RasterProjection::Set(const GeoBounds &bounds,$/;"	f	class:RasterProjection
Set	Terrain/RasterTile.hpp	/^  void Set(unsigned _xstart, unsigned _ystart,$/;"	f	class:RasterTile
Set	Widget/ManagedWidget.cpp	/^ManagedWidget::Set(Widget *_widget)$/;"	f	class:ManagedWidget
Set	Widget/TwoWidgets.hpp	/^  void Set(Widget *_first, Widget *_second) {$/;"	f	class:TwoWidgets
SetASCII	Util/StaticString.hxx	/^	void SetASCII(const char *src) {$/;"	f	class:StaticStringBase
SetASCII	Util/StaticString.hxx	/^	void SetASCII(const char *src, const char *src_end) {$/;"	f	class:StaticStringBase
SetASCII	Util/StaticString.hxx	/^	void SetASCII(const wchar_t *src) {$/;"	f	class:StaticStringBase
SetASCII	Util/StaticString.hxx	/^	void SetASCII(const wchar_t *src, const wchar_t *src_end) {$/;"	f	class:StaticStringBase
SetAccelerationVariance	Math/KalmanFilter1d.hpp	/^  void SetAccelerationVariance(double var_x_accel) {$/;"	f	class:KalmanFilter1d
SetAccelerationVariance	Math/SelfTimingKalmanFilter1d.hpp	/^  void SetAccelerationVariance(const double var_x_accel) {$/;"	f	class:SelfTimingKalmanFilter1d
SetActionListener	Form/DigitEntry.hpp	/^  void SetActionListener(ActionListener &listener, int id) {$/;"	f	class:CoordinateFormat
SetActive	Engine/Task/Unordered/AbortTask.hpp	/^  void SetActive(bool _active) {$/;"	f	class:AbortTask
SetActiveFrequency	ActionInterface.cpp	/^ActionInterface::SetActiveFrequency(const RadioFrequency & freq, const TCHAR * freq_name, bool to_devices)$/;"	f	class:ActionInterface
SetActiveFrequency	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetActiveFrequency(RadioFrequency frequency,$/;"	f	class:DeviceBlackboard
SetActiveIndex	Renderer/TaskPointRenderer.hpp	/^  void SetActiveIndex(unsigned _active_index) {$/;"	f	class:TaskPointRenderer
SetActiveTaskPoint	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetActiveTaskPoint(unsigned index)$/;"	f	class:OrderedTask
SetActiveTaskPoint	Engine/Task/TaskManager.cpp	/^TaskManager::SetActiveTaskPoint(unsigned index)$/;"	f	class:TaskManager
SetActiveTaskPoint	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::SetActiveTaskPoint(unsigned index)$/;"	f	class:AbortTask
SetActiveTaskPoint	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::SetActiveTaskPoint(unsigned index)$/;"	f	class:GotoTask
SetActiveTaskPoint	Replay/TaskAccessor.hpp	/^  void SetActiveTaskPoint(unsigned index) {$/;"	f	class:TaskAccessor
SetActivity	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::SetActivity(const AirspaceActivity mask) const$/;"	f	class:AbstractAirspace
SetActivity	Engine/Airspace/Airspace.cpp	/^Airspace::SetActivity(const AirspaceActivity mask) const$/;"	f	class:Airspace
SetActivity	Engine/Airspace/Airspaces.cpp	/^Airspaces::SetActivity(const AirspaceActivity mask)$/;"	f	class:Airspaces
SetAirfieldDetails	Waypoint/WaypointDetailsReader.cpp	/^SetAirfieldDetails(Waypoints &way_points, const TCHAR *name,$/;"	f	file:
SetAirspaceBorderColor	Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceBorderColor(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceBorderWidth	Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceBorderWidth(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceBrush	Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceBrush(ProfileMap &map, unsigned i, int brush_index)$/;"	f	class:Profile
SetAirspaceFillColor	Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceFillColor(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceFillMode	Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceFillMode(ProfileMap &map, unsigned i, uint8_t mode)$/;"	f	class:Profile
SetAirspaceMode	Profile/AirspaceConfig.cpp	/^Profile::SetAirspaceMode(ProfileMap &map,$/;"	f	class:Profile
SetAirspaceWarnings	Renderer/AirspaceLabelRenderer.hpp	/^  void SetAirspaceWarnings(const ProtectedAirspaceWarningManager *_warning_manager) {$/;"	f	class:AirspaceLabelRenderer
SetAirspaceWarnings	Renderer/AirspaceRenderer.hpp	/^  void SetAirspaceWarnings(const ProtectedAirspaceWarningManager *_warning_manager) {$/;"	f	class:AirspaceRenderer
SetAirspaces	CrossSection/CrossSectionRenderer.hpp	/^  void SetAirspaces(const Airspaces *_airspace_database) {$/;"	f	class:CrossSectionRenderer
SetAirspaces	CrossSection/CrossSectionWindow.hpp	/^  void SetAirspaces(const Airspaces *airspace_database) {$/;"	f	class:CrossSectionWindow
SetAirspaces	MapWindow/MapWindow.hpp	/^  void SetAirspaces(Airspaces *airspaces) {$/;"	f	class:MapWindow
SetAirspaces	MapWindow/TargetMapWindow.hpp	/^  void SetAirspaces(Airspaces *airspace_database) {$/;"	f	class:TargetMapWindow
SetAirspaces	Renderer/AirspaceLabelRenderer.hpp	/^  void SetAirspaces(const Airspaces *_airspaces) {$/;"	f	class:AirspaceLabelRenderer
SetAirspaces	Renderer/AirspaceRenderer.hpp	/^  void SetAirspaces(const Airspaces *_airspaces) {$/;"	f	class:AirspaceRenderer
SetAll	Engine/Airspace/AirspaceActivity.hpp	/^  void SetAll() {$/;"	f	class:AirspaceActivity
SetAllColors	InfoBoxes/Data.cpp	/^InfoBoxData::SetAllColors(unsigned color)$/;"	f	class:InfoBoxData
SetAllowedCharacters	Widget/KeyboardWidget.cpp	/^KeyboardWidget::SetAllowedCharacters(const TCHAR *allowed)$/;"	f	class:KeyboardWidget
SetAlpha	MapWindow/OverlayBitmap.hpp	/^  void SetAlpha(float _alpha) {$/;"	f	class:final
SetAltitude	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetAltitude(double val)$/;"	f	class:DeviceBlackboard
SetAltitudeOffset	Device/Driver/LX/LX1600.hpp	/^  SetAltitudeOffset(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetAltitudeOffset	Device/Driver/LXERA/LXERA.hpp	/^  SetAltitudeOffset(Port &port, OperationEnvironment &env,$/;"	f	namespace:LXEra
SetAltitudeUnit	Device/Driver/CAI302/Protocol.hpp	/^    void SetAltitudeUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetAngle	Math/FastRotation.cpp	/^FastIntegerRotation::SetAngle(Angle _angle)$/;"	f	class:FastIntegerRotation
SetAngle	Math/FastRotation.cpp	/^FastRotation::SetAngle(Angle _angle)$/;"	f	class:FastRotation
SetArmed	Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::SetArmed(const bool do_armed)$/;"	f	class:TaskAdvance
SetAsBoolean	Form/DataField/Boolean.cpp	/^DataFieldBoolean::SetAsBoolean(bool Value)$/;"	f	class:DataFieldBoolean
SetAsFloat	Form/DataField/Float.cpp	/^DataFieldFloat::SetAsFloat(double Value)$/;"	f	class:DataFieldFloat
SetAsInteger	Form/DataField/Angle.cpp	/^AngleDataField::SetAsInteger(int _value)$/;"	f	class:AngleDataField
SetAsInteger	Form/DataField/Base.cpp	/^DataField::SetAsInteger(gcc_unused int value)$/;"	f	class:DataField
SetAsInteger	Form/DataField/Boolean.cpp	/^DataFieldBoolean::SetAsInteger(int Value)$/;"	f	class:DataFieldBoolean
SetAsInteger	Form/DataField/Enum.cpp	/^DataFieldEnum::SetAsInteger(int Value)$/;"	f	class:DataFieldEnum
SetAsInteger	Form/DataField/File.cpp	/^FileDataField::SetAsInteger(int new_value)$/;"	f	class:FileDataField
SetAsInteger	Form/DataField/Float.cpp	/^DataFieldFloat::SetAsInteger(int Value)$/;"	f	class:DataFieldFloat
SetAsInteger	Form/DataField/Integer.cpp	/^DataFieldInteger::SetAsInteger(int _value)$/;"	f	class:DataFieldInteger
SetAsString	Form/DataField/Angle.cpp	/^AngleDataField::SetAsString(const TCHAR *_value)$/;"	f	class:AngleDataField
SetAsString	Form/DataField/Base.cpp	/^DataField::SetAsString(gcc_unused const TCHAR *value)$/;"	f	class:DataField
SetAsString	Form/DataField/Boolean.cpp	/^DataFieldBoolean::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldBoolean
SetAsString	Form/DataField/Enum.cpp	/^DataFieldEnum::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldEnum
SetAsString	Form/DataField/Float.cpp	/^DataFieldFloat::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldFloat
SetAsString	Form/DataField/Integer.cpp	/^DataFieldInteger::SetAsString(const TCHAR *_value)$/;"	f	class:DataFieldInteger
SetAsString	Form/DataField/String.cpp	/^DataFieldString::SetAsString(const TCHAR *Value)$/;"	f	class:DataFieldString
SetAttribute	XML/DataNode.cpp	/^WritableDataNode::SetAttribute(const TCHAR *name, Angle value)$/;"	f	class:WritableDataNode
SetAttribute	XML/DataNode.cpp	/^WritableDataNode::SetAttribute(const TCHAR *name, RoughTime value)$/;"	f	class:WritableDataNode
SetAttribute	XML/DataNode.cpp	/^WritableDataNode::SetAttribute(const TCHAR *name, bool value)$/;"	f	class:WritableDataNode
SetAttribute	XML/DataNode.cpp	/^WritableDataNode::SetAttribute(const TCHAR *name, double value)$/;"	f	class:WritableDataNode
SetAttribute	XML/DataNode.cpp	/^WritableDataNode::SetAttribute(const TCHAR *name, int value)$/;"	f	class:WritableDataNode
SetAttribute	XML/DataNode.cpp	/^WritableDataNode::SetAttribute(const TCHAR *name, unsigned value)$/;"	f	class:WritableDataNode
SetAttribute	XML/DataNodeXML.cpp	/^WritableDataNodeXML::SetAttribute(const TCHAR *name, const TCHAR *value)$/;"	f	class:WritableDataNodeXML
SetAutoZoom	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::SetAutoZoom(bool enabled)$/;"	f	class:FlarmTrafficControl
SetAutoZoom	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::SetAutoZoom(bool value)$/;"	f	class:TrafficWidget
SetBackgroundColor	Look/DialogLook.cpp	/^DialogLook::SetBackgroundColor(Color color)$/;"	f	class:DialogLook
SetBackgroundColor	Screen/GDI/Canvas.hpp	/^  void SetBackgroundColor(const Color c) {$/;"	f	class:Canvas
SetBackgroundColor	Screen/Memory/Canvas.hpp	/^  void SetBackgroundColor(const Color c) {$/;"	f	class:Canvas
SetBackgroundColor	Screen/OpenGL/Canvas.hpp	/^  void SetBackgroundColor(const Color c) {$/;"	f	class:Canvas
SetBackgroundColor	Screen/SolidContainerWindow.hpp	/^  void SetBackgroundColor(Color _color) {$/;"	f	class:SolidContainerWindow
SetBackgroundOpaque	Screen/GDI/Canvas.hpp	/^  void SetBackgroundOpaque() {$/;"	f	class:Canvas
SetBackgroundOpaque	Screen/Memory/Canvas.hpp	/^  void SetBackgroundOpaque() {$/;"	f	class:Canvas
SetBackgroundOpaque	Screen/OpenGL/Canvas.hpp	/^  void SetBackgroundOpaque() {$/;"	f	class:Canvas
SetBackgroundTransparent	Screen/GDI/Canvas.hpp	/^  void SetBackgroundTransparent() {$/;"	f	class:Canvas
SetBackgroundTransparent	Screen/Memory/Canvas.hpp	/^  void SetBackgroundTransparent() {$/;"	f	class:Canvas
SetBackgroundTransparent	Screen/OpenGL/Canvas.hpp	/^  void SetBackgroundTransparent() {$/;"	f	class:Canvas
SetBallast	ActionInterface.cpp	/^ActionInterface::SetBallast(double ballast, bool to_devices)$/;"	f	class:ActionInterface
SetBallast	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetBallast(double fraction, double overload,$/;"	f	class:DeviceBlackboard
SetBallast	Device/Driver/LX/LX1600.hpp	/^  SetBallast(Port &port, OperationEnvironment &env, double overload)$/;"	f	namespace:LX1600
SetBallast	Device/Driver/LX/V7.hpp	/^  SetBallast(Port &port, OperationEnvironment &env, double overload)$/;"	f	namespace:V7
SetBallast	Device/Driver/LXERA/LXERA.hpp	/^  SetBallast(Port &port, OperationEnvironment &env, double overload)$/;"	f	namespace:LXEra
SetBallast	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetBallast()$/;"	f	class:FlightSetupPanel
SetBallast	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetBallast(const double bal)$/;"	f	class:GlidePolar
SetBallastLitres	Dialogs/Settings/dlgBasicSettings.cpp	/^  void SetBallastLitres(double ballast_litres) {$/;"	f	class:final
SetBallastLitres	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetBallastLitres(const double litres)$/;"	f	class:GlidePolar
SetBallastRatio	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetBallastRatio(double _ballast_ratio) {$/;"	f	class:GlidePolar
SetBallastTimer	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetBallastTimer(bool active)$/;"	f	class:FlightSetupPanel
SetBasic	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetBasic() { return gps_info; }$/;"	f	class:DeviceBlackboard
SetBasicAuth	Net/HTTP/Easy.hxx	/^	void SetBasicAuth(const char *userpwd) {$/;"	f	class:CurlEasy
SetBasicAuth	Net/HTTP/Request.cpp	/^Net::Request::SetBasicAuth(const char *username, const char *password)$/;"	f	class:Net::Request
SetBasicAuth	Net/HTTP/ToBuffer.hpp	/^    void SetBasicAuth(const char *_username, const char *_password) {$/;"	f	class:Net::DownloadToBufferJob
SetBasicAuth	Net/HTTP/ToFile.hpp	/^    void SetBasicAuth(const char *_username, const char *_password) {$/;"	f	class:Net::DownloadToFileJob
SetBaudRate	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::SetBaudRate(unsigned baud_rate, OperationEnvironment &env)$/;"	f	class:CAI302Device
SetBaudRate	Device/Driver/CAI302/Protocol.cpp	/^CAI302::SetBaudRate(Port &port, unsigned baud_rate, OperationEnvironment &env)$/;"	f	class:CAI302
SetBaudRate	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetBaudRate(unsigned baud_id, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetBaudrate	Device/Port/AndroidPort.cpp	/^AndroidPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:AndroidPort
SetBaudrate	Device/Port/DumpPort.cpp	/^DumpPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:DumpPort
SetBaudrate	Device/Port/K6BtPort.cpp	/^K6BtPort::SetBaudrate(unsigned _baud_rate)$/;"	f	class:K6BtPort
SetBaudrate	Device/Port/NullPort.cpp	/^NullPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:NullPort
SetBaudrate	Device/Port/SerialPort.cpp	/^SerialPort::SetBaudrate(unsigned BaudRate)$/;"	f	class:SerialPort
SetBaudrate	Device/Port/TTYPort.cpp	/^TTYPort::SetBaudrate(unsigned baud_rate)$/;"	f	class:TTYPort
SetBitmap	Widget/ViewImageWidget.cpp	/^  void SetBitmap(const Bitmap *_bitmap) {$/;"	f	class:final
SetBitmap	Widget/ViewImageWidget.cpp	/^ViewImageWidget::SetBitmap(const Bitmap *_bitmap)$/;"	f	class:ViewImageWidget
SetBitmap	Widget/ViewImageWidget.hpp	/^  void SetBitmap(const Bitmap &_bitmap) {$/;"	f	class:ViewImageWidget
SetBlackout	Computer/Wind/WindEKFGlue.hpp	/^  void SetBlackout(const unsigned time) {$/;"	f	class:WindEKFGlue
SetBold	Look/FontDescription.hpp	/^  void SetBold(bool _bold=true) {$/;"	f	class:FontDescription
SetBold	Look/FontDescription.hpp	/^  void SetBold(bool bold=true) {$/;"	f	class:FontDescription
SetBottomMargin	MapWindow/GlueMapWindowOverlays.cpp	/^GlueMapWindow::SetBottomMargin(unsigned int margin_factor){$/;"	f	class:GlueMapWindow
SetBottomWidget	MainWindow.cpp	/^MainWindow::SetBottomWidget(Widget *_widget)$/;"	f	class:MainWindow
SetBoundingBox	Renderer/TaskPointRenderer.hpp	/^  void SetBoundingBox(const FlatBoundingBox &bb) {$/;"	f	class:TaskPointRenderer
SetBounds	Terrain/RasterTileCache.hpp	/^  void SetBounds(const GeoBounds &_bounds) {$/;"	f	class:RasterTileCache
SetBufferPens	Renderer/AirspaceRendererOther.cpp	/^  void SetBufferPens(const AbstractAirspace &airspace) {$/;"	f	class:final	file:
SetBugs	ActionInterface.cpp	/^ActionInterface::SetBugs(double bugs, bool to_devices)$/;"	f	class:ActionInterface
SetBugs	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetBugs(double bugs, OperationEnvironment &env)$/;"	f	class:DeviceBlackboard
SetBugs	Computer/Settings.hpp	/^  void SetBugs(double _bugs) {$/;"	f	struct:PolarSettings
SetBugs	Device/Driver/LX/LX1600.hpp	/^  SetBugs(Port &port, OperationEnvironment &env, unsigned bugs)$/;"	f	namespace:LX1600
SetBugs	Device/Driver/LX/V7.hpp	/^  SetBugs(Port &port, OperationEnvironment &env, unsigned bugs)$/;"	f	namespace:V7
SetBugs	Device/Driver/LXERA/LXERA.hpp	/^  SetBugs(Port &port, OperationEnvironment &env, unsigned bugs)$/;"	f	namespace:LXEra
SetBugs	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetBugs(double bugs) {$/;"	f	class:FlightSetupPanel
SetBugs	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetBugs(const double clean)$/;"	f	class:GlidePolar
SetButtonPanel	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:PageListWidget
SetButtonPanel	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:final
SetButtonPanel	Dialogs/Weather/MapOverlayWidget.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:final
SetButtonPanel	Dialogs/Weather/NOAAList.cpp	/^  void SetButtonPanel(ButtonPanelWidget &_buttons) {$/;"	f	class:final
SetButtons	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetButtons()$/;"	f	class:FlightSetupPanel
SetCPUFrequencyGovernor	Hardware/CPU.cpp	/^SetCPUFrequencyGovernor(const char *governor)$/;"	f	file:
SetCalcCaption	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::SetCalcCaption(const TCHAR *caption)$/;"	f	class:AnalysisWidget
SetCalcVisibility	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::SetCalcVisibility(bool visible)$/;"	f	class:AnalysisWidget
SetCalculated	Computer/GlideComputerBlackboard.hpp	/^  DerivedInfo& SetCalculated() { return calculated_info; }$/;"	f	class:GlideComputerBlackboard
SetCaption	Form/Button.cpp	/^Button::SetCaption(const TCHAR *caption)$/;"	f	class:Button
SetCaption	Form/Form.cpp	/^WndForm::SetCaption(const TCHAR *_caption)$/;"	f	class:WndForm
SetCaption	Renderer/TextButtonRenderer.hpp	/^  void SetCaption(StaticString<64>::const_pointer _caption) {$/;"	f	class:TextButtonRenderer
SetCatchCallback	Lua/Catch.cpp	/^Lua::SetCatchCallback(lua_State *L, CatchCallback callback)$/;"	f	class:Lua
SetCenter	Geo/Flat/FlatProjection.cpp	/^FlatProjection::SetCenter(const GeoPoint &_center)$/;"	f	class:FlatProjection
SetCenter	Renderer/TextRenderer.hpp	/^  void SetCenter(bool _center=true) {$/;"	f	class:TextRenderer
SetCharacter	Form/CharacterButton.cpp	/^CharacterButton::SetCharacter(unsigned _character)$/;"	f	class:CharacterButton
SetCharacterFunction	Form/Form.hpp	/^  void SetCharacterFunction(CharacterFunction function) {$/;"	f	class:WndForm
SetCharge100	Android/Nook.cpp	/^Nook::SetCharge100()$/;"	f	class:Nook
SetCharge500	Android/Nook.cpp	/^Nook::SetCharge500()$/;"	f	class:Nook
SetClearManualButton	Dialogs/Settings/WindSettingsPanel.hpp	/^  void SetClearManualButton(Button *_button) {$/;"	f	class:final
SetCoPilot	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetCoPilot(const TCHAR *copilot_name, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetCoefficients	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetCoefficients(PolarCoefficients coeff, bool update = true) {$/;"	f	class:GlidePolar
SetColor	Profile/Screen.cpp	/^ProfileMap::SetColor(const char *key, const RGB8Color color)$/;"	f	class:ProfileMap
SetColor	Widget/TextWidget.cpp	/^TextWidget::SetColor(Color _color)$/;"	f	class:TextWidget
SetColors	Renderer/AirspaceRendererSettings.hpp	/^  void SetColors(RGB8Color color) {$/;"	f	struct:AirspaceClassRendererSettings
SetComment	InfoBoxes/Data.cpp	/^InfoBoxData::SetComment(const TCHAR *_comment)$/;"	f	class:InfoBoxData
SetComment	InfoBoxes/Format.cpp	/^InfoBoxData::SetComment(Angle _value, const TCHAR *suffix)$/;"	f	class:InfoBoxData
SetCommentColor	InfoBoxes/Data.hpp	/^  void SetCommentColor(unsigned _color) {$/;"	f	struct:InfoBoxData
SetCommentFromAlternateAltitude	InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromAlternateAltitude(double new_value)$/;"	f	class:InfoBoxData
SetCommentFromBearingDifference	InfoBoxes/Format.cpp	/^InfoBoxData::SetCommentFromBearingDifference(Angle delta)$/;"	f	class:InfoBoxData
SetCommentFromDistance	InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromDistance(double new_value)$/;"	f	class:InfoBoxData
SetCommentFromPercent	InfoBoxes/Format.cpp	/^InfoBoxData::SetCommentFromPercent(double dd)$/;"	f	class:InfoBoxData
SetCommentFromSpeed	InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetCommentFromTaskSpeed	InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromTaskSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetCommentFromVerticalSpeed	InfoBoxes/Units.cpp	/^InfoBoxData::SetCommentFromVerticalSpeed(double new_value, bool include_sign)$/;"	f	class:InfoBoxData
SetCommentInvalid	InfoBoxes/Data.hpp	/^  void SetCommentInvalid() {$/;"	f	struct:InfoBoxData
SetCompetitionClass	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetCompetitionClass(const TCHAR *competition_class,$/;"	f	class:FlarmDevice
SetCompetitionId	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetCompetitionId(const TCHAR *competition_id,$/;"	f	class:FlarmDevice
SetComputer	Computer/GlideComputerInterface.cpp	/^GlideComputerTaskEvents::SetComputer(GlideComputer &_computer)$/;"	f	class:GlideComputerTaskEvents
SetComputerSettings	Blackboard/InterfaceBlackboard.hpp	/^  ComputerSettings& SetComputerSettings() {$/;"	f	class:InterfaceBlackboard
SetComputerSettings	CalculationThread.cpp	/^CalculationThread::SetComputerSettings(const ComputerSettings &new_value)$/;"	f	class:CalculationThread
SetComputerSettings	Interface.hpp	/^  static inline ComputerSettings &SetComputerSettings() {$/;"	f	namespace:CommonInterface
SetComputerSettings	MainWindow.cpp	/^MainWindow::SetComputerSettings(const ComputerSettings &settings_computer)$/;"	f	class:MainWindow
SetComputerSettings	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetComputerSettings(const ComputerSettings &new_value)$/;"	f	class:GlueMapWindow
SetConfig	Device/Descriptor.cpp	/^DeviceDescriptor::SetConfig(const DeviceConfig &_config)$/;"	f	class:DeviceDescriptor
SetConfig	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetConfig(const char *setting, const TCHAR *value,$/;"	f	class:FlarmDevice
SetConfig	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetConfig(const char *setting, const char *value,$/;"	f	class:FlarmDevice
SetConfig	Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::SetConfig(const DeviceConfig &_config)$/;"	f	class:DeviceEditWidget
SetConfig	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::SetConfig(const AirspaceWarningConfig &_config)$/;"	f	class:AirspaceWarningManager
SetConfig	Engine/Route/RoutePolars.cpp	/^RoutePolars::SetConfig(const RoutePlannerConfig& _config,$/;"	f	class:RoutePolars
SetConfig	Units/Units.cpp	/^Units::SetConfig(const UnitSetting &new_config)$/;"	f	class:Units
SetConnectTimeout	Net/HTTP/Easy.hxx	/^	void SetConnectTimeout(long timeout) {$/;"	f	class:CurlEasy
SetContentProvider	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::SetContentProvider(std::unique_ptr<InfoBoxContent> _content)$/;"	f	class:InfoBoxWindow
SetContest	Engine/Contest/ContestManager.hpp	/^  void SetContest(Contest _contest) {$/;"	f	class:ContestManager
SetContestIncremental	Computer/GlideComputer.hpp	/^  void SetContestIncremental(bool incremental) {$/;"	f	class:GlideComputer
SetContestIncremental	Computer/TaskComputer.hpp	/^  void SetContestIncremental(bool incremental) {$/;"	f	class:TaskComputer
SetControl	Renderer/TextRenderer.hpp	/^  void SetControl(bool _control=true) {$/;"	f	class:TextRenderer
SetCruiseEfficiency	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetCruiseEfficiency(const double _ce) {$/;"	f	class:GlidePolar
SetCurrent	Widget/PagerWidget.cpp	/^PagerWidget::SetCurrent(unsigned i, bool click)$/;"	f	class:PagerWidget
SetCurrentInfoBox	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^InfoBoxesConfigWidget::SetCurrentInfoBox(unsigned _current_preview)$/;"	f	class:InfoBoxesConfigWidget
SetCursor	Form/DigitEntry.cpp	/^DigitEntry::SetCursor(unsigned _cursor)$/;"	f	class:DigitEntry
SetCursor	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::SetCursor(unsigned i)$/;"	f	class:TabMenuDisplay
SetCustom	InfoBoxes/Data.hpp	/^  void SetCustom() {$/;"	f	struct:InfoBoxData
SetCustomBottom	PageActions.cpp	/^PageActions::SetCustomBottom(Widget *widget)$/;"	f	class:PageActions
SetDays	Engine/Airspace/AbstractAirspace.hpp	/^  void SetDays(const AirspaceActivity mask) {$/;"	f	class:AbstractAirspace
SetDeadBand	Audio/VarioSynthesiser.hpp	/^  void SetDeadBand(bool enabled) {$/;"	f	class:final
SetDeadBandRange	Audio/VarioSynthesiser.hpp	/^  void SetDeadBandRange(double min, double max) {$/;"	f	class:final
SetDefaultFocus	Dialogs/WidgetDialog.cpp	/^WidgetDialog::SetDefaultFocus()$/;"	f	class:WidgetDialog
SetDefaultFocus	Form/Form.cpp	/^WndForm::SetDefaultFocus()$/;"	f	class:WndForm
SetDefaultFocus	MainWindow.cpp	/^MainWindow::SetDefaultFocus()$/;"	f	class:MainWindow
SetDefaultHidden	Form/ButtonPanel.hpp	/^  void SetDefaultHidden() {$/;"	f	class:ButtonPanel
SetDefaultLocation	Replay/TaskAutoPilot.hpp	/^  void SetDefaultLocation(const GeoPoint& default_location) {$/;"	f	class:AbstractAutoPilot
SetDefaults	Airspace/AirspaceComputerSettings.cpp	/^AirspaceComputerSettings::SetDefaults()$/;"	f	class:AirspaceComputerSettings
SetDefaults	Audio/Settings.cpp	/^SoundSettings::SetDefaults()$/;"	f	class:SoundSettings
SetDefaults	Audio/VarioSettings.cpp	/^VarioSoundSettings::SetDefaults()$/;"	f	class:VarioSoundSettings
SetDefaults	Computer/Settings.cpp	/^ComputerSettings::SetDefaults()$/;"	f	class:ComputerSettings
SetDefaults	Computer/Settings.cpp	/^FeaturesSettings::SetDefaults()$/;"	f	class:FeaturesSettings
SetDefaults	Computer/Settings.cpp	/^PolarSettings::SetDefaults()$/;"	f	class:PolarSettings
SetDefaults	Computer/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:CirclingSettings
SetDefaults	Computer/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:PlacesOfInterestSettings
SetDefaults	Computer/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:RadioSettings
SetDefaults	Computer/WaveSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:WaveSettings
SetDefaults	Computer/Wind/Settings.cpp	/^WindSettings::SetDefaults()$/;"	f	class:WindSettings
SetDefaults	Dialogs/DialogSettings.cpp	/^DialogSettings::SetDefaults()$/;"	f	class:DialogSettings
SetDefaults	DisplaySettings.cpp	/^DisplaySettings::SetDefaults()$/;"	f	class:DisplaySettings
SetDefaults	Engine/Airspace/AirspaceWarningConfig.cpp	/^AirspaceWarningConfig::SetDefaults()$/;"	f	class:AirspaceWarningConfig
SetDefaults	Engine/Contest/Settings.cpp	/^ContestSettings::SetDefaults()$/;"	f	class:ContestSettings
SetDefaults	Engine/GlideSolvers/GlideSettings.cpp	/^GlideSettings::SetDefaults()$/;"	f	class:GlideSettings
SetDefaults	Engine/Route/Config.cpp	/^RoutePlannerConfig::SetDefaults()$/;"	f	class:RoutePlannerConfig
SetDefaults	Engine/Task/Ordered/FinishConstraints.cpp	/^FinishConstraints::SetDefaults()$/;"	f	class:FinishConstraints
SetDefaults	Engine/Task/Ordered/Settings.cpp	/^OrderedTaskSettings::SetDefaults()$/;"	f	class:OrderedTaskSettings
SetDefaults	Engine/Task/Ordered/StartConstraints.cpp	/^StartConstraints::SetDefaults()$/;"	f	class:StartConstraints
SetDefaults	Engine/Task/Shapes/FAITriangleSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:FAITriangleSettings
SetDefaults	Engine/Task/TaskBehaviour.cpp	/^SectorDefaults::SetDefaults()$/;"	f	class:SectorDefaults
SetDefaults	Engine/Task/TaskBehaviour.cpp	/^TaskBehaviour::SetDefaults()$/;"	f	class:TaskBehaviour
SetDefaults	Engine/Task/TaskBehaviour.cpp	/^TaskStartMargins::SetDefaults()$/;"	f	class:TaskStartMargins
SetDefaults	FormatSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:FormatSettings
SetDefaults	Gauge/TrafficSettings.cpp	/^TrafficSettings::SetDefaults()$/;"	f	class:TrafficSettings
SetDefaults	Gauge/VarioSettings.cpp	/^VarioSettings::SetDefaults()$/;"	f	class:VarioSettings
SetDefaults	InfoBoxes/InfoBoxSettings.cpp	/^InfoBoxSettings::SetDefaults()$/;"	f	class:InfoBoxSettings
SetDefaults	Input/InputConfig.cpp	/^InputConfig::SetDefaults()$/;"	f	class:InputConfig
SetDefaults	Logger/Settings.cpp	/^LoggerSettings::SetDefaults()$/;"	f	class:LoggerSettings
SetDefaults	MapSettings.cpp	/^MapItemListSettings::SetDefaults()$/;"	f	class:MapItemListSettings
SetDefaults	MapSettings.cpp	/^MapSettings::SetDefaults()$/;"	f	class:MapSettings
SetDefaults	MapSettings.cpp	/^TrailSettings::SetDefaults()$/;"	f	class:TrailSettings
SetDefaults	PageSettings.cpp	/^PageSettings::SetDefaults()$/;"	f	class:PageSettings
SetDefaults	PageSettings.hpp	/^    void SetDefaults() {$/;"	f	struct:PageLayout::InfoBoxConfig
SetDefaults	Renderer/AirspaceRendererSettings.cpp	/^AirspaceClassRendererSettings::SetDefaults()$/;"	f	class:AirspaceClassRendererSettings
SetDefaults	Renderer/AirspaceRendererSettings.cpp	/^AirspaceRendererSettings::SetDefaults()$/;"	f	class:AirspaceRendererSettings
SetDefaults	Renderer/WaypointRendererSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:WaypointRendererSettings
SetDefaults	SystemSettings.cpp	/^SystemSettings::SetDefaults()$/;"	f	class:SystemSettings
SetDefaults	TeamCode/Settings.cpp	/^TeamCodeSettings::SetDefaults()$/;"	f	class:TeamCodeSettings
SetDefaults	Terrain/TerrainSettings.cpp	/^TerrainRendererSettings::SetDefaults()$/;"	f	class:TerrainRendererSettings
SetDefaults	Tracking/LiveTrack24/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:LiveTrack24::Settings
SetDefaults	Tracking/SkyLines/CloudSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:SkyLinesTracking::CloudSettings
SetDefaults	Tracking/SkyLines/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:SkyLinesTracking::Settings
SetDefaults	Tracking/TrackingSettings.hpp	/^  void SetDefaults() {$/;"	f	struct:TrackingSettings
SetDefaults	UISettings.cpp	/^UISettings::SetDefaults()$/;"	f	class:UISettings
SetDefaults	Units/Settings.cpp	/^UnitSetting::SetDefaults()$/;"	f	class:UnitSetting
SetDefaults	Weather/PCMet/Settings.hpp	/^    void SetDefaults() {$/;"	f	struct:PCMetSettings::Credentials
SetDefaults	Weather/PCMet/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:PCMetSettings
SetDefaults	Weather/Settings.hpp	/^  void SetDefaults() {$/;"	f	struct:WeatherSettings
SetDegradationFactor	Computer/Settings.hpp	/^  void SetDegradationFactor(double _degradation_factor) {$/;"	f	struct:PolarSettings
SetDeviceConfig	Profile/DeviceConfig.cpp	/^Profile::SetDeviceConfig(ProfileMap &map,$/;"	f	class:Profile
SetDevices	Blackboard/DeviceBlackboard.hpp	/^  void SetDevices(MultipleDevices &_devices) {$/;"	f	class:DeviceBlackboard
SetDigits	Form/DigitEntry.cpp	/^DigitEntry::SetDigits(double degrees, CoordinateFormat format, bool isLatitude)$/;"	f	class:DigitEntry
SetDirection	CrossSection/CrossSectionRenderer.hpp	/^  void SetDirection(Angle bearing) {$/;"	f	class:CrossSectionRenderer
SetDirection	CrossSection/CrossSectionWindow.hpp	/^  void SetDirection(Angle bearing) {$/;"	f	class:CrossSectionWindow
SetDirection	Engine/Waypoint/Runway.hpp	/^  void SetDirection(Angle _direction) {$/;"	f	class:Runway
SetDirectionDegrees	Engine/Waypoint/Runway.hpp	/^  void SetDirectionDegrees(unsigned degrees) {$/;"	f	class:Runway
SetDirty	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::SetDirty()$/;"	f	class:InfoBoxManager
SetDirty	Screen/RawBitmap.hpp	/^  void SetDirty() {$/;"	f	class:final
SetDispatcher	Device/Descriptor.hpp	/^  void SetDispatcher(PortLineHandler *_dispatcher) {$/;"	f	class:final
SetDisplayOrientation	Event/Poll/InputQueue.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:DisplayOrientation
SetDisplayOrientation	Event/Poll/Linux/MergeMouse.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:final
SetDisplayOrientation	Event/Poll/Queue.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:final
SetDisplayOrientation	Event/Shared/RotatePointer.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) {$/;"	f	class:RotatePointer
SetDisplayOrientation	Screen/OpenGL/TopCanvas.cpp	/^TopCanvas::SetDisplayOrientation(DisplayOrientation orientation)$/;"	f	class:TopCanvas
SetDistance	Engine/Task/Stats/DistanceStat.hpp	/^  void SetDistance(const double d) {$/;"	f	class:DistanceStat
SetDistance	Gauge/FlarmTrafficWindow.hpp	/^  void SetDistance(double _distance) {$/;"	f	class:FlarmTrafficWindow
SetDistanceUnit	Device/Driver/CAI302/Protocol.hpp	/^    void SetDistanceUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetDown	Event/Poll/Linux/MergeMouse.cpp	/^MergeMouse::SetDown(bool new_down)$/;"	f	class:MergeMouse
SetDown	Form/Button.cpp	/^Button::SetDown(bool _down)$/;"	f	class:Button
SetDryMass	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetDryMass(double _dry_mass, bool update = true) {$/;"	f	class:GlidePolar
SetDumpButton	Dialogs/Settings/dlgBasicSettings.cpp	/^  void SetDumpButton(Button *_dump_button) {$/;"	f	class:final
SetEditor	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void SetEditor(PageLayoutEditWidget &_editor) {$/;"	f	class:PageListWidget
SetEnableDither	Screen/Custom/TopCanvas.hpp	/^  void SetEnableDither(bool _enable_dither) {$/;"	f	class:DisplayOrientation
SetEnabled	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^CloudConfigPanel::SetEnabled(bool enabled)$/;"	f	class:CloudConfigPanel
SetEndRadial	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::SetEndRadial(const Angle x)$/;"	f	class:SectorZone
SetEnum	Profile/Map.hpp	/^  void SetEnum(const char *key, T value) {$/;"	f	class:ProfileMap
SetEnum	Profile/ProfileMap.hpp	/^  static inline void SetEnum(const char *key, T value)$/;"	f	namespace:Profile
SetErrorBuffer	Net/HTTP/Easy.hxx	/^	void SetErrorBuffer(char *buf) {$/;"	f	class:CurlEasy
SetErrorMessage	Operation/MessageOperationEnvironment.cpp	/^MessageOperationEnvironment::SetErrorMessage(const TCHAR *text)$/;"	f	class:MessageOperationEnvironment
SetErrorMessage	Operation/Operation.cpp	/^NullOperationEnvironment::SetErrorMessage(const TCHAR *text)$/;"	f	class:NullOperationEnvironment
SetErrorMessage	Operation/PopupOperationEnvironment.cpp	/^PopupOperationEnvironment::SetErrorMessage(const TCHAR *text)$/;"	f	class:PopupOperationEnvironment
SetErrorMessage	Operation/ProxyOperationEnvironment.cpp	/^ProxyOperationEnvironment::SetErrorMessage(const TCHAR *text)$/;"	f	class:ProxyOperationEnvironment
SetErrorMessage	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::SetErrorMessage(const TCHAR *_error)$/;"	f	class:ThreadedOperationEnvironment
SetErrorMessage	Operation/ThreadedOperationEnvironment.hpp	/^    void SetErrorMessage(const TCHAR *_error) {$/;"	f	struct:ThreadedOperationEnvironment::Data
SetEvent	Menu/MenuBar.hpp	/^    void SetEvent(unsigned _event) {$/;"	f	class:MenuBar::Button
SetExpertRow	Widget/RowFormWidget.cpp	/^RowFormWidget::SetExpertRow(unsigned i)$/;"	f	class:RowFormWidget
SetExternalVolume	Audio/VolumeController.cpp	/^VolumeController::SetExternalVolume(unsigned vol_percent)$/;"	f	class:VolumeController
SetExternalVolumeNoLock	Audio/VolumeController.cpp	/^VolumeController::SetExternalVolumeNoLock(unsigned vol_percent)$/;"	f	class:VolumeController
SetExtra	Widget/TabWidget.hpp	/^  void SetExtra(Widget *_extra) {$/;"	f	class:TabWidget
SetFactory	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetFactory(const TaskFactoryType the_factory)$/;"	f	class:OrderedTask
SetFactory	Engine/Task/TaskManager.cpp	/^TaskManager::SetFactory(const TaskFactoryType _factory)$/;"	f	class:TaskManager
SetFaiFinishHeight	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetFaiFinishHeight(const double height)$/;"	f	class:FinishPoint
SetFailOnError	Net/HTTP/Easy.hxx	/^	void SetFailOnError(bool value=true) {$/;"	f	class:CurlEasy
SetFakeLocation	NMEA/Info.hpp	/^  void SetFakeLocation(const GeoPoint &_location, const double _altitude) {$/;"	f	struct:NMEAInfo
SetFastLogging	Computer/LogComputer.hpp	/^  void SetFastLogging() {$/;"	f	class:LogComputer
SetFileType	Form/DataField/File.hpp	/^  void SetFileType(FileType _file_type) {$/;"	f	class:final
SetFiles	Profile/Profile.cpp	/^Profile::SetFiles(Path override_path)$/;"	f	class:Profile
SetFillStencil	Renderer/AirspaceRendererGL.cpp	/^  void SetFillStencil() {$/;"	f	class:final	file:
SetFilters	Device/Driver/LX/LX1600.hpp	/^  SetFilters(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetFilters	Device/Driver/LXERA/LXERA.hpp	/^  SetFilters(Port &port, OperationEnvironment &env,$/;"	f	namespace:LXEra
SetFinishLabel	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::SetFinishLabel()$/;"	f	class:TaskDefaultsConfigPanel
SetFlavour	Input/InputEvents.cpp	/^InputEvents::SetFlavour(const TCHAR *_flavour)$/;"	f	class:InputEvents
SetFlightLevel	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::SetFlightLevel(const AtmosphericPressure &press)$/;"	f	class:AbstractAirspace
SetFlightLevel	Engine/Airspace/Airspace.cpp	/^Airspace::SetFlightLevel(const AtmosphericPressure &press) const$/;"	f	class:Airspace
SetFlightLevel	Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::SetFlightLevel(const AtmosphericPressure &press)$/;"	f	class:AirspaceAltitude
SetFlightLevels	Engine/Airspace/Airspaces.cpp	/^Airspaces::SetFlightLevels(const AtmosphericPressure &press)$/;"	f	class:Airspaces
SetFocus	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::SetFocus()$/;"	f	class:TaskClosePanel
SetFocus	Dialogs/dlgQuickMenu.cpp	/^QuickMenu::SetFocus()$/;"	f	class:QuickMenu
SetFocus	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::SetFocus()$/;"	f	class:BigThermalAssistantWidget
SetFocus	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::SetFocus()$/;"	f	class:TrafficWidget
SetFocus	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::SetFocus()$/;"	f	class:GaugeThermalAssistant
SetFocus	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::SetFocus()$/;"	f	class:ArrowPagerWidget
SetFocus	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::SetFocus()$/;"	f	class:ButtonPanelWidget
SetFocus	Widget/ButtonWidget.cpp	/^ButtonWidget::SetFocus()$/;"	f	class:ButtonWidget
SetFocus	Widget/ManagedWidget.cpp	/^ManagedWidget::SetFocus()$/;"	f	class:ManagedWidget
SetFocus	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::SetFocus()$/;"	f	class:OffsetButtonsWidget
SetFocus	Widget/PagerWidget.cpp	/^PagerWidget::SetFocus()$/;"	f	class:PagerWidget
SetFocus	Widget/RowFormWidget.cpp	/^RowFormWidget::SetFocus()$/;"	f	class:RowFormWidget
SetFocus	Widget/SolidWidget.cpp	/^SolidWidget::SetFocus()$/;"	f	class:SolidWidget
SetFocus	Widget/TabWidget.cpp	/^TabWidget::SetFocus()$/;"	f	class:TabWidget
SetFocus	Widget/TwoWidgets.cpp	/^TwoWidgets::SetFocus()$/;"	f	class:TwoWidgets
SetFocus	Widget/Widget.cpp	/^NullWidget::SetFocus()$/;"	f	class:NullWidget
SetFont	Screen/LargeTextWindow.hpp	/^  void SetFont(const Font &_font) {$/;"	f	class:LargeTextWindow
SetForceOpen	Form/Form.hpp	/^  void SetForceOpen(bool _force) {$/;"	f	class:WndForm
SetForcedDPI	Hardware/DisplayDPI.cpp	/^Display::SetForcedDPI(unsigned x_dpi, unsigned y_dpi)$/;"	f	class:Display
SetForecastTemperature	Atmosphere/CuSonde.cpp	/^CuSonde::SetForecastTemperature(Temperature val)$/;"	f	class:CuSonde
SetFormat	Form/DataField/Number.cpp	/^NumberDataField::SetFormat(const TCHAR *text)$/;"	f	class:NumberDataField
SetFreeMapScale	Projection/MapWindowProjection.cpp	/^MapWindowProjection::SetFreeMapScale(const double x)$/;"	f	class:MapWindowProjection
SetFrequencies	Audio/VarioSynthesiser.hpp	/^  void SetFrequencies(unsigned min, unsigned zero, unsigned max) {$/;"	f	class:final
SetFriendColor	FLARM/Friends.cpp	/^FlarmFriends::SetFriendColor(FlarmId id, FlarmColor color)$/;"	f	class:FlarmFriends
SetFromCombo	Form/DataField/Angle.cpp	/^AngleDataField::SetFromCombo(int i, gcc_unused const TCHAR *s)$/;"	f	class:AngleDataField
SetFromCombo	Form/DataField/Base.hpp	/^  virtual void SetFromCombo(int iDataFieldIndex,$/;"	f	class:DataField
SetFromCombo	Form/DataField/Float.cpp	/^DataFieldFloat::SetFromCombo(int iDataFieldIndex, const TCHAR *sValue)$/;"	f	class:DataFieldFloat
SetFromCombo	Form/DataField/Integer.cpp	/^DataFieldInteger::SetFromCombo(gcc_unused int index, const TCHAR *value)$/;"	f	class:DataFieldInteger
SetFromCombo	Form/DataField/Time.cpp	/^DataFieldTime::SetFromCombo(int data_field_index,$/;"	f	class:DataFieldTime
SetFullScreen	MainWindow.cpp	/^MainWindow::SetFullScreen(bool _full_screen)$/;"	f	class:MainWindow
SetGeoLocation	Projection/Projection.hpp	/^  void SetGeoLocation(GeoPoint g) {$/;"	f	class:Projection
SetGeoPoint	Profile/GeoValue.cpp	/^ProfileMap::SetGeoPoint(const char *key, const GeoPoint &value)$/;"	f	class:ProfileMap
SetGlideComputer	MapWindow/MapWindow.cpp	/^MapWindow::SetGlideComputer(GlideComputer *_gc)$/;"	f	class:MapWindow
SetGlideComputer	MapWindow/TargetMapWindow.hpp	/^  void SetGlideComputer(const GlideComputer *_gc) {$/;"	f	class:TargetMapWindow
SetGlidePolar	Engine/Task/TaskManager.cpp	/^TaskManager::SetGlidePolar(const GlidePolar &_glide_polar)$/;"	f	class:TaskManager
SetGlidePolar	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::SetGlidePolar(const GlidePolar &glide_polar)$/;"	f	class:ProtectedTaskManager
SetGroundLevel	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::SetGroundLevel(const double alt)$/;"	f	class:AbstractAirspace
SetGroundLevel	Engine/Airspace/Airspace.cpp	/^Airspace::SetGroundLevel(const double alt) const$/;"	f	class:Airspace
SetGroundLevel	Engine/Airspace/AirspaceAltitude.cpp	/^AirspaceAltitude::SetGroundLevel(const double alt)$/;"	f	class:AirspaceAltitude
SetGroundLevels	Engine/Airspace/AirspacesTerrain.cpp	/^Airspaces::SetGroundLevels(const RasterTerrain &terrain)$/;"	f	class:Airspaces
SetHandicap	Engine/Contest/ContestManager.cpp	/^ContestManager::SetHandicap(unsigned handicap)$/;"	f	class:ContestManager
SetHeaderFunction	Net/HTTP/Easy.hxx	/^	void SetHeaderFunction(size_t (*function)(char *buffer, size_t size,$/;"	f	class:CurlEasy
SetHeight	Look/FontDescription.hpp	/^  void SetHeight(unsigned _height) {$/;"	f	class:FontDescription
SetHome	Computer/Settings.cpp	/^PlacesOfInterestSettings::SetHome(const Waypoint &wp)$/;"	f	class:PlacesOfInterestSettings
SetHome	Dialogs/Waypoint/WaypointCommandsWidget.cpp	/^SetHome(const Waypoint &waypoint)$/;"	f	file:
SetHome	Engine/Waypoint/Waypoints.cpp	/^Waypoints::SetHome(const unsigned id)$/;"	f	class:Waypoints
SetHome	Waypoint/HomeGlue.cpp	/^WaypointGlue::SetHome(Waypoints &way_points, const RasterTerrain *terrain,$/;"	f	class:WaypointGlue
SetHttpPost	Net/HTTP/Easy.hxx	/^	void SetHttpPost(const struct curl_httppost *post) {$/;"	f	class:CurlEasy
SetIdeal	Replay/TaskAutoPilot.cpp	/^AutopilotParameters::SetIdeal()$/;"	f	class:AutopilotParameters
SetIncremental	Computer/ContestComputer.hpp	/^  void SetIncremental(bool incremental) {$/;"	f	class:ContestComputer
SetIncremental	Engine/Contest/ContestManager.cpp	/^ContestManager::SetIncremental(bool incremental)$/;"	f	class:ContestManager
SetIndex	Form/DataField/Enum.cpp	/^DataFieldEnum::SetIndex(unsigned new_value, bool invoke_callback)$/;"	f	class:DataFieldEnum
SetInnerRadius	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  void SetInnerRadius(const double new_radius) {$/;"	f	class:AnnularSectorZone
SetInnerRadius	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  void SetInnerRadius(double _radius) {$/;"	f	class:final
SetInternalVolume	Audio/VolumeController.cpp	/^VolumeController::SetInternalVolume(unsigned vol_percent$/;"	f	class:VolumeController
SetIntersectionTest	Engine/Task/TaskManager.cpp	/^TaskManager::SetIntersectionTest(AbortIntersectionTest *test)$/;"	f	class:TaskManager
SetIntersectionTest	Engine/Task/Unordered/AbortTask.hpp	/^  void SetIntersectionTest(AbortIntersectionTest *test) {$/;"	f	class:AbortTask
SetIntersections	Engine/Airspace/AirspaceIntersectionVisitor.hpp	/^  bool SetIntersections(AirspaceIntersectionVector &&p) {$/;"	f	class:AirspaceIntersectionVisitor
SetInvalid	CrossSection/CrossSectionRenderer.hpp	/^  void SetInvalid() {$/;"	f	class:CrossSectionRenderer
SetInvalid	CrossSection/CrossSectionWindow.hpp	/^  void SetInvalid() {$/;"	f	class:CrossSectionWindow
SetInvalid	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  void SetInvalid() {$/;"	f	struct:AirspaceInterceptSolution
SetInvalid	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetInvalid() {$/;"	f	class:GlidePolar
SetInvalid	Engine/GlideSolvers/PolarCoefficients.hpp	/^  void SetInvalid() {$/;"	f	struct:PolarCoefficients
SetInvalid	Form/DigitEntry.cpp	/^DigitEntry::SetInvalid()$/;"	f	class:DigitEntry
SetInvalid	Geo/Flat/FlatProjection.hpp	/^  void SetInvalid() {$/;"	f	class:FlatProjection
SetInvalid	Geo/GeoBounds.hpp	/^  void SetInvalid() {$/;"	f	class:GeoBounds
SetInvalid	Geo/GeoPoint.hpp	/^  void SetInvalid() {$/;"	f	struct:GeoPoint
SetInvalid	Geo/GeoVector.hpp	/^  void SetInvalid() {$/;"	f	struct:GeoVector
SetInvalid	Geo/SearchPoint.hpp	/^  void SetInvalid() {$/;"	f	class:SearchPoint
SetInvalid	InfoBoxes/Data.cpp	/^InfoBoxData::SetInvalid()$/;"	f	class:InfoBoxData
SetInvalid	Time/RoughTime.hpp	/^  void SetInvalid() {$/;"	f	class:RoughTime
SetInvert	Event/Shared/RotatePointer.hpp	/^  void SetInvert(bool _invert_x, bool _invert_y) {$/;"	f	class:RotatePointer
SetKey	Tracking/SkyLines/Client.hpp	/^  void SetKey(uint64_t _key) {$/;"	f	class:SkyLinesTracking::Client
SetKeyDownFunction	Form/Form.hpp	/^  void SetKeyDownFunction(KeyDownFunction function) {$/;"	f	class:WndForm
SetKeyEvent	Input/InputConfig.hpp	/^  void SetKeyEvent(unsigned mode, unsigned key_code, unsigned event_id) {$/;"	f	struct:InputConfig
SetKiloHertz	RadioFrequency.hpp	/^  void SetKiloHertz(unsigned khz) {$/;"	f	class:RadioFrequency
SetLabel	MapWindow/OverlayBitmap.hpp	/^  void SetLabel(T &&_label) {$/;"	f	class:final
SetLabelText	Menu/ButtonLabel.cpp	/^ButtonLabel::SetLabelText(unsigned index, const TCHAR *text, unsigned event)$/;"	f	class:ButtonLabel
SetLatLonBounds	Terrain/RasterTileCache.cpp	/^RasterTileCache::SetLatLonBounds(double _lon_min, double _lon_max,$/;"	f	class:RasterTileCache
SetLatitude	Form/DigitEntry.cpp	/^DigitEntry::SetLatitude(Angle value, CoordinateFormat format)$/;"	f	class:DigitEntry
SetLegacyAutoWindMode	Computer/Wind/Settings.hpp	/^  void SetLegacyAutoWindMode(unsigned mode) {$/;"	f	struct:WindSettings
SetLegs	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::SetLegs(const TaskPoint *previous,$/;"	f	class:ObservationZoneClient
SetLegs	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  virtual void SetLegs(gcc_unused const GeoPoint *previous,$/;"	f	class:ObservationZonePoint
SetLegs	Engine/Task/ObservationZones/SymmetricSectorZone.cpp	/^SymmetricSectorZone::SetLegs(const GeoPoint *previous, const GeoPoint *next)$/;"	f	class:SymmetricSectorZone
SetLength	Engine/Task/ObservationZones/LineSectorZone.hpp	/^  void SetLength(const double new_length) {$/;"	f	class:LineSectorZone
SetLength	Engine/Waypoint/Runway.hpp	/^  void SetLength(unsigned _length) {$/;"	f	class:Runway
SetList	Dialogs/Airspace/AirspaceList.cpp	/^  void SetList(ActionListener *_list) {$/;"	f	class:final
SetList	Dialogs/Traffic/TrafficList.cpp	/^  void SetList(ActionListener *_list) {$/;"	f	class:TrafficListButtons
SetList	Dialogs/Waypoint/WaypointList.cpp	/^  void SetList(ActionListener *_list) {$/;"	f	class:WaypointListButtons
SetListener	Dialogs/Airspace/AirspaceList.cpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:final
SetListener	Dialogs/Device/DeviceEditWidget.hpp	/^  void SetListener(Listener *_listener) {$/;"	f	class:DeviceEditWidget
SetListener	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void SetListener(ActionListener &_listener) {$/;"	f	class:final
SetListener	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  void SetListener(Listener *_listener) {$/;"	f	class:ObservationZoneEditWidget
SetListener	Dialogs/Traffic/TrafficList.cpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:TrafficFilterWidget
SetListener	Dialogs/Waypoint/WaypointList.cpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:WaypointFilterWidget
SetListener	Form/Button.hpp	/^  void SetListener(ActionListener &_listener, int _id) {$/;"	f	class:Button
SetListener	Form/CheckBox.hpp	/^  void SetListener(ActionListener &_listener) {$/;"	f	class:CheckBoxControl
SetListener	Form/DataField/Base.hpp	/^  void SetListener(DataFieldListener *_listener) {$/;"	f	class:DataField
SetLiveTrack24Enabled	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::SetLiveTrack24Enabled(bool enabled)$/;"	f	class:TrackingConfigPanel
SetLocalTime	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^TimeConfigPanel::SetLocalTime(RoughTimeDelta utc_offset)$/;"	f	class:TimeConfigPanel
SetLocation	Device/Driver/Volkslogger/Database.cpp	/^Volkslogger::Waypoint::SetLocation(GeoPoint gp)$/;"	f	class:Volkslogger::Waypoint
SetLocation	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetLocation(const GeoPoint location)$/;"	f	class:GlueMapWindow
SetLocation	MapWindow/MapWindow.hpp	/^  void SetLocation(const GeoPoint location) {$/;"	f	class:MapWindow
SetLocationLazy	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetLocationLazy(const GeoPoint location)$/;"	f	class:GlueMapWindow
SetLogger	Computer/GlideComputer.hpp	/^  void SetLogger(Logger *logger) {$/;"	f	class:GlideComputer
SetLogger	Computer/LogComputer.hpp	/^  void SetLogger(Logger *_logger) {$/;"	f	class:LogComputer
SetLongitude	Form/DigitEntry.cpp	/^DigitEntry::SetLongitude(Angle value, CoordinateFormat format)$/;"	f	class:DigitEntry
SetLook	MainWindow.hpp	/^  Look &SetLook() {$/;"	f	class:MainWindow
SetMC	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetMC(double mc, OperationEnvironment &env)$/;"	f	class:DeviceBlackboard
SetMC	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SetMC(const double _mc)$/;"	f	class:GlidePolar
SetMacCready	ActionInterface.cpp	/^ActionInterface::SetMacCready(double mc, bool to_devices)$/;"	f	class:ActionInterface
SetMacCready	Device/Driver/LX/LX1600.hpp	/^  SetMacCready(Port &port, OperationEnvironment &env, double mc)$/;"	f	namespace:LX1600
SetMacCready	Device/Driver/LX/V7.hpp	/^  SetMacCready(Port &port, OperationEnvironment &env, double mc)$/;"	f	namespace:V7
SetMacCready	Device/Driver/LXERA/LXERA.hpp	/^  SetMacCready(Port &port, OperationEnvironment &env, double mc)$/;"	f	namespace:LXEra
SetManualMacCready	ActionInterface.cpp	/^void ActionInterface::SetManualMacCready(double mc, bool to_devices)$/;"	f	class:ActionInterface
SetMapRect	Projection/WindowProjection.hpp	/^  void SetMapRect(const PixelRect &rc) {$/;"	f	class:WindowProjection
SetMapScale	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetMapScale(double scale)$/;"	f	class:GlueMapWindow
SetMapScale	MapWindow/MapWindow.hpp	/^  void SetMapScale(const double x) {$/;"	f	class:MapWindow
SetMapScale	Projection/MapWindowProjection.cpp	/^MapWindowProjection::SetMapScale(const double x)$/;"	f	class:MapWindowProjection
SetMapSettings	Interface.hpp	/^  static inline MapSettings &SetMapSettings() {$/;"	f	namespace:CommonInterface
SetMapSettings	MainWindow.cpp	/^MainWindow::SetMapSettings(const MapSettings &settings_map)$/;"	f	class:MainWindow
SetMapSettings	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetMapSettings(const MapSettings &new_value)$/;"	f	class:GlueMapWindow
SetMax	Form/DataField/Float.hpp	/^  void SetMax(double v) {$/;"	f	class:final
SetMax	Form/DataField/Integer.hpp	/^  void SetMax(int _max) {$/;"	f	class:final
SetMax	Form/DataField/Time.hpp	/^  void SetMax(int _max) {$/;"	f	class:final
SetMaxDt	Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::SetMaxDt(const double max_dt)$/;"	f	class:SelfTimingKalmanFilter1d
SetMaxSize	Net/StaticSocketAddress.hxx	/^	void SetMaxSize() {$/;"	f	class:StaticSocketAddress
SetMaxTokenNumber	Form/DataField/Time.hpp	/^  void SetMaxTokenNumber(unsigned _max_tokens) {$/;"	f	class:final
SetMessage	ProgressWindow.cpp	/^ProgressWindow::SetMessage(const TCHAR *text)$/;"	f	class:ProgressWindow
SetMessage	Widget/QuestionWidget.cpp	/^QuestionWidget::SetMessage(const TCHAR *_message)$/;"	f	class:QuestionWidget
SetMin	Form/DataField/Float.hpp	/^  void SetMin(double v) {$/;"	f	class:final
SetMin	Form/DataField/Integer.hpp	/^  void SetMin(int _min) {$/;"	f	class:final
SetMin	Form/DataField/Time.hpp	/^  void SetMin(int _min) {$/;"	f	class:final
SetMixCopy	Screen/GDI/Canvas.hpp	/^  void SetMixCopy() {$/;"	f	class:Canvas
SetMixMask	Screen/GDI/Canvas.hpp	/^  void SetMixMask() {$/;"	f	class:Canvas
SetModalResult	Dialogs/Task/Manager/Internal.hpp	/^  void SetModalResult(int r) {$/;"	f	class:final
SetModalResult	Form/Form.hpp	/^  void SetModalResult(int Value) {$/;"	f	class:WndForm
SetMode	Engine/Airspace/AirspaceWarningManager.cpp	/^  void SetMode(bool m) {$/;"	f	class:final
SetMode	Engine/Task/TaskManager.cpp	/^TaskManager::SetMode(const TaskType _mode)$/;"	f	class:TaskManager
SetModeOptional	Renderer/TaskPointRenderer.hpp	/^  void SetModeOptional(const bool mode) {$/;"	f	class:TaskPointRenderer
SetModeless	Form/Form.hpp	/^  void SetModeless() {$/;"	f	class:WndForm
SetModified	Profile/Map.hpp	/^  void SetModified(bool _modified=true) {$/;"	f	class:ProfileMap
SetModified	Profile/ProfileMap.cpp	/^Profile::SetModified(bool _modified)$/;"	f	class:Profile
SetMonitor	Device/Descriptor.hpp	/^  void SetMonitor(DataHandler  *_monitor) {$/;"	f	class:final
SetMoreData	Blackboard/DeviceBlackboard.hpp	/^  MoreData &SetMoreData() { return gps_info; }$/;"	f	class:DeviceBlackboard
SetMultiLineText	Widget/RowFormWidget.cpp	/^RowFormWidget::SetMultiLineText(unsigned i, const TCHAR *text)$/;"	f	class:RowFormWidget
SetNOAAStore	MapWindow/MapWindow.hpp	/^  void SetNOAAStore(NOAAStore *_noaa_store) {$/;"	f	class:MapWindow
SetName	Engine/Task/Ordered/OrderedTask.hpp	/^  void SetName(const StaticString<64> &name_) {$/;"	f	class:final
SetNegative	Form/DigitEntry.hpp	/^    void SetNegative(bool is_negative) {$/;"	f	struct:CoordinateFormat::Column
SetNeighbours	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetNeighbours(unsigned position)$/;"	f	class:OrderedTask
SetNeighbours	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetNeighbours(OrderedTaskPoint *_prev, OrderedTaskPoint *_next)$/;"	f	class:FinishPoint
SetNeighbours	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::SetNeighbours(OrderedTaskPoint *_previous,$/;"	f	class:OrderedTaskPoint
SetNeighbours	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::SetNeighbours(OrderedTaskPoint *_prev, OrderedTaskPoint *_next)$/;"	f	class:StartPoint
SetNetworkID	Kobo/WPASupplicant.cpp	/^WPASupplicant::SetNetworkID(unsigned id,$/;"	f	class:WPASupplicant
SetNetworkPSK	Kobo/WPASupplicant.hpp	/^  bool SetNetworkPSK(unsigned id, const char *psk) {$/;"	f	class:WPASupplicant
SetNetworkSSID	Kobo/WPASupplicant.hpp	/^  bool SetNetworkSSID(unsigned id, const char *ssid) {$/;"	f	class:WPASupplicant
SetNetworkString	Kobo/WPASupplicant.cpp	/^WPASupplicant::SetNetworkString(unsigned id,$/;"	f	class:WPASupplicant
SetNoBody	Net/HTTP/Easy.hxx	/^	void SetNoBody(bool value=true) {$/;"	f	class:CurlEasy
SetNoProgress	Net/HTTP/Easy.hxx	/^	void SetNoProgress(bool value=true) {$/;"	f	class:CurlEasy
SetNoSignal	Net/HTTP/Easy.hxx	/^	void SetNoSignal(bool value=true) {$/;"	f	class:CurlEasy
SetNorthUp	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::SetNorthUp(bool enabled)$/;"	f	class:FlarmTrafficControl
SetNorthUp	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::SetNorthUp(bool value)$/;"	f	class:TrafficWidget
SetOffset	Topography/XShape.hpp	/^  void SetOffset(unsigned _offset) const {$/;"	f	class:XShape
SetOption	Net/HTTP/Easy.hxx	/^	void SetOption(CURLoption option, T value) {$/;"	f	class:CurlEasy
SetOrderedTaskSettings	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetOrderedTaskSettings(const OrderedTaskSettings& ob)$/;"	f	class:OrderedTask
SetOrderedTaskSettings	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetOrderedTaskSettings(const OrderedTaskSettings &otb)$/;"	f	class:FinishPoint
SetOrderedTaskSettings	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual void SetOrderedTaskSettings(gcc_unused const OrderedTaskSettings &otb) {}$/;"	f	class:OrderedTaskPoint
SetOrderedTaskSettings	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::SetOrderedTaskSettings(const OrderedTaskSettings &settings)$/;"	f	class:StartPoint
SetOrderedTaskSettings	Engine/Task/TaskManager.cpp	/^TaskManager::SetOrderedTaskSettings(const OrderedTaskSettings &otb)$/;"	f	class:TaskManager
SetOverlay	Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::SetOverlay(Path path, const TCHAR *label)$/;"	f	class:WeatherMapOverlayListWidget
SetOverlay	MapWindow/MapWindow.cpp	/^MapWindow::SetOverlay(std::unique_ptr<MapOverlay> &&_overlay)$/;"	f	class:MapWindow
SetPadding	Renderer/ChartRenderer.cpp	/^ChartRenderer::SetPadding(bool do_pad)$/;"	f	class:ChartRenderer
SetPageFlippedCallback	Widget/PagerWidget.hpp	/^  void SetPageFlippedCallback(PageFlippedCallback &&_page_flipped_callback) {$/;"	f	class:PagerWidget
SetPan	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SetPan(bool enable)$/;"	f	class:GlueMapWindow
SetParameters	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::SetParameters(snd_pcm_t &alsa_handle, unsigned sample_rate,$/;"	f	class:ALSAPCMPlayer
SetParametersScheme	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^SetParametersScheme(PagerWidget &pager, int schemetype)$/;"	f	file:
SetParent	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void SetParent(InfoBoxesConfigWidget &_parent, unsigned _i) {$/;"	f	class:InfoBoxPreview
SetPast	Engine/Task/Points/SampledTaskPoint.hpp	/^  void SetPast(bool _past) {$/;"	f	class:SampledTaskPoint
SetPath	IO/FileTransaction.hpp	/^  void SetPath(P &&_path) {$/;"	f	class:FileTransaction
SetPath	Logger/FlightLogger.hpp	/^  void SetPath(Path _path) {$/;"	f	class:FlightLogger
SetPath	Profile/PathValue.cpp	/^ProfileMap::SetPath(const char *key, Path value)$/;"	f	class:ProfileMap
SetPath	Profile/Profile.cpp	/^Profile::SetPath(const char *key, Path value)$/;"	f	class:Profile
SetPeriods	Audio/VarioSynthesiser.hpp	/^  void SetPeriods(unsigned min, unsigned max) {$/;"	f	class:final
SetPersistentCallback	Lua/Persistent.cpp	/^Lua::SetPersistentCallback(lua_State *L, PersistentCallback callback)$/;"	f	class:Lua
SetPilot	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetPilot(const TCHAR *pilot_name, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetPlaneRegistration	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetPlaneRegistration(const TCHAR *registration,$/;"	f	class:FlarmDevice
SetPlaneType	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetPlaneType(const TCHAR *plane_type, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetPlayState	Audio/SLES/Play.hpp	/^    SLresult SetPlayState(SLuint32 state) {$/;"	f	class:SLES::Play
SetPointSearchMax	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetPointSearchMax(unsigned tp, const SearchPoint &sol)$/;"	f	class:OrderedTask
SetPointSearchMin	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetPointSearchMin(unsigned tp, const SearchPoint &sol)$/;"	f	class:OrderedTask
SetPointType	Dialogs/Task/MutateTaskPointDialog.cpp	/^SetPointType(OrderedTask &task, unsigned index,$/;"	f	file:
SetPolar	Device/Driver/LX/LX1600.hpp	/^  SetPolar(Port &port, OperationEnvironment &env, const PolarCoefficients &polar)$/;"	f	namespace:LX1600
SetPolar	Device/Driver/LX/LX1600.hpp	/^  SetPolar(Port &port, OperationEnvironment &env, double a, double b, double c)$/;"	f	namespace:LX1600
SetPolar	Device/Driver/LXERA/LXERA.hpp	/^  SetPolar(Port &port, OperationEnvironment &env, const PolarCoefficients &polar)$/;"	f	namespace:LXEra
SetPolar	Device/Driver/LXERA/LXERA.hpp	/^  SetPolar(Port &port, OperationEnvironment &env, double a, double b, double c)$/;"	f	namespace:LXEra
SetPolarShape	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::SetPolarShape(const PolarShape &_shape)$/;"	f	class:PolarShapeEditWidget
SetPolars	Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SetPolars(const GlideSettings &settings,$/;"	f	class:ProtectedRoutePlanner
SetPort	Dialogs/Device/DeviceEditWidget.cpp	/^SetPort(DataFieldEnum &df, DeviceConfig::PortType type, const TCHAR *value)$/;"	f	file:
SetPort	Dialogs/Device/DeviceEditWidget.cpp	/^SetPort(DataFieldEnum &df, const DeviceConfig &config)$/;"	f	file:
SetPost	Net/HTTP/Easy.hxx	/^	void SetPost(bool value=true) {$/;"	f	class:CurlEasy
SetPredecessor	Engine/Route/AStar.hpp	/^  void SetPredecessor(const Node &node, const Node &parent) {$/;"	f	class:AStar
SetPredicted	Computer/ContestComputer.hpp	/^  void SetPredicted(const TracePoint &predicted) {$/;"	f	class:ContestComputer
SetPredicted	Engine/Contest/ContestManager.cpp	/^ContestManager::SetPredicted(const TracePoint &predicted)$/;"	f	class:ContestManager
SetPredictionTimeFilter	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::SetPredictionTimeFilter(double time)$/;"	f	class:AirspaceWarningManager
SetPredictionTimeGlide	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::SetPredictionTimeGlide(double time)$/;"	f	class:AirspaceWarningManager
SetPressed	Form/CheckBox.cpp	/^CheckBoxControl::SetPressed(bool value)$/;"	f	class:CheckBoxControl
SetPressed	Gauge/GaugeFLARM.cpp	/^  void SetPressed(bool _pressed) {$/;"	f	class:SmallTrafficWindow	file:
SetPressed	Gauge/GaugeThermalAssistant.cpp	/^  void SetPressed(bool _pressed) {$/;"	f	class:GaugeThermalAssistantWindow	file:
SetPressed	InfoBoxes/InfoBoxWindow.hpp	/^  void SetPressed(bool _pressed) {$/;"	f	class:InfoBoxWindow
SetPressureUnit	Device/Driver/CAI302/Protocol.hpp	/^    void SetPressureUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetPreview	Dialogs/Weather/MapOverlayWidget.cpp	/^  void SetPreview(ViewImageWidget &_preview_widget) {$/;"	f	class:final
SetPrimaryDataPath	LocalPath.cpp	/^SetPrimaryDataPath(Path path)$/;"	f
SetPrivate	Net/HTTP/Easy.hxx	/^	void SetPrivate(void *pointer) {$/;"	f	class:CurlEasy
SetProfilePasswordDialog	Dialogs/ProfilePasswordDialog.cpp	/^SetProfilePasswordDialog(ProfileMap &map)$/;"	f
SetProgressPosition	Operation/ConsoleOperationEnvironment.cpp	/^ConsoleOperationEnvironment::SetProgressPosition(unsigned position)$/;"	f	class:ConsoleOperationEnvironment
SetProgressPosition	Operation/Operation.cpp	/^NullOperationEnvironment::SetProgressPosition(unsigned position)$/;"	f	class:NullOperationEnvironment
SetProgressPosition	Operation/ProxyOperationEnvironment.cpp	/^ProxyOperationEnvironment::SetProgressPosition(unsigned position)$/;"	f	class:ProxyOperationEnvironment
SetProgressPosition	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::SetProgressPosition(unsigned position)$/;"	f	class:ThreadedOperationEnvironment
SetProgressPosition	Operation/ThreadedOperationEnvironment.hpp	/^    bool SetProgressPosition(unsigned position) {$/;"	f	struct:ThreadedOperationEnvironment::Data
SetProgressPosition	Operation/VerboseOperationEnvironment.cpp	/^VerboseOperationEnvironment::SetProgressPosition(unsigned position)$/;"	f	class:VerboseOperationEnvironment
SetProgressRange	Operation/ConsoleOperationEnvironment.cpp	/^ConsoleOperationEnvironment::SetProgressRange(unsigned _range)$/;"	f	class:ConsoleOperationEnvironment
SetProgressRange	Operation/Operation.cpp	/^NullOperationEnvironment::SetProgressRange(unsigned range)$/;"	f	class:NullOperationEnvironment
SetProgressRange	Operation/ProxyOperationEnvironment.cpp	/^ProxyOperationEnvironment::SetProgressRange(unsigned range)$/;"	f	class:ProxyOperationEnvironment
SetProgressRange	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::SetProgressRange(unsigned range)$/;"	f	class:ThreadedOperationEnvironment
SetProgressRange	Operation/ThreadedOperationEnvironment.hpp	/^    bool SetProgressRange(unsigned range) {$/;"	f	struct:ThreadedOperationEnvironment::Data
SetProgressRange	Operation/VerboseOperationEnvironment.cpp	/^VerboseOperationEnvironment::SetProgressRange(unsigned range)$/;"	f	class:VerboseOperationEnvironment
SetProperties	Engine/Airspace/AbstractAirspace.hpp	/^  void SetProperties(tstring &&_name, const AirspaceClass _Type,$/;"	f	class:AbstractAirspace
SetQNH	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetQNH(AtmosphericPressure qnh, OperationEnvironment &env)$/;"	f	class:DeviceBlackboard
SetQNH	Device/Driver/LX/LX1600.hpp	/^  SetQNH(Port &port, OperationEnvironment &env, const AtmosphericPressure &qnh)$/;"	f	namespace:LX1600
SetQNH	Device/Driver/LX/V7.hpp	/^  SetQNH(Port &port, OperationEnvironment &env, const AtmosphericPressure &qnh)$/;"	f	namespace:V7
SetQNH	Device/Driver/LXERA/LXERA.hpp	/^  SetQNH(Port &port, OperationEnvironment &env, const AtmosphericPressure &qnh)$/;"	f	namespace:LXEra
SetQNH	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::SetQNH(AtmosphericPressure qnh)$/;"	f	class:FlightSetupPanel
SetRadio	Engine/Airspace/AbstractAirspace.hpp	/^  void SetRadio(const tstring &_Radio) {$/;"	f	class:AbstractAirspace
SetRadius	Engine/Task/ObservationZones/CylinderZone.hpp	/^  virtual void SetRadius(double new_radius) {$/;"	f	class:CylinderZone
SetRange	CrossSection/CrossSectionRenderer.hpp	/^  void SetRange(double range) {$/;"	f	class:CrossSectionRenderer
SetRange	CrossSection/CrossSectionWindow.hpp	/^  void SetRange(double range) {$/;"	f	class:CrossSectionWindow
SetRange	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetRange(unsigned range, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetRange	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::SetRange(const double p, const bool force_if_current)$/;"	f	class:AATPoint
SetRange	ProgressGlue.cpp	/^ProgressGlue::SetRange(unsigned value)$/;"	f	class:ProgressGlue
SetRange	ProgressWindow.cpp	/^ProgressWindow::SetRange(unsigned min_value, unsigned max_value)$/;"	f	class:ProgressWindow
SetRange	Screen/ProgressBar.cpp	/^ProgressBar::SetRange(unsigned min_value, unsigned max_value)$/;"	f	class:ProgressBar
SetRasp	DataGlobals.cpp	/^DataGlobals::SetRasp(std::shared_ptr<RaspStore> rasp)$/;"	f	class:DataGlobals
SetRasp	MapWindow/MapWindow.cpp	/^MapWindow::SetRasp(const std::shared_ptr<RaspStore> &_rasp_store)$/;"	f	class:MapWindow
SetReadOnly	Widget/RowFormWidget.hpp	/^  void SetReadOnly(unsigned i, bool read_only=true) {$/;"	f	class:RowFormWidget
SetReal	Device/Parser.hpp	/^  void SetReal(bool _real) {$/;"	f	class:NMEAParser
SetRealState	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetRealState(unsigned i) {$/;"	f	class:DeviceBlackboard
SetRealistic	Replay/TaskAutoPilot.cpp	/^AutopilotParameters::SetRealistic()$/;"	f	class:AutopilotParameters
SetReferenceMass	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetReferenceMass(double _reference_mass, bool update = true) {$/;"	f	class:GlidePolar
SetReplayState	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetReplayState() { return replay_data; }$/;"	f	class:DeviceBlackboard
SetRequest	Terrain/RasterTile.hpp	/^  void SetRequest() {$/;"	f	class:RasterTile
SetRequestBody	Net/HTTP/Easy.hxx	/^	void SetRequestBody(const void *data, size_t size) {$/;"	f	class:CurlEasy
SetRequestBody	Net/HTTP/Request.cpp	/^Net::Request::SetRequestBody(const MultiPartFormData &body)$/;"	f	class:Net::Request
SetRequestHeaders	Net/HTTP/Easy.hxx	/^	void SetRequestHeaders(struct curl_slist *headers) {$/;"	f	class:CurlEasy
SetRoute	Task/ProtectedTaskManager.hpp	/^  void SetRoute(const RoutePlannerGlue *_route) {$/;"	f	class:ReachIntersectionTest
SetRoutePlanner	MapWindow/MapWindow.hpp	/^  void SetRoutePlanner(const ProtectedRoutePlanner *_route_planner) {$/;"	f	class:MapWindow
SetRoutePlanner	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::SetRoutePlanner(const RoutePlannerGlue *_route) {$/;"	f	class:ProtectedTaskManager
SetRowAvailable	Widget/RowFormWidget.cpp	/^RowFormWidget::SetRowAvailable(unsigned i, bool available)$/;"	f	class:RowFormWidget
SetRowEnabled	Widget/RowFormWidget.hpp	/^  void SetRowEnabled(unsigned i, bool enabled) {$/;"	f	class:RowFormWidget
SetRowVisible	Widget/RowFormWidget.cpp	/^RowFormWidget::SetRowVisible(unsigned i, bool visible)$/;"	f	class:RowFormWidget
SetRxTimeout	Device/Port/SerialPort.cpp	/^SerialPort::SetRxTimeout(unsigned Timeout)$/;"	f	class:SerialPort
SetSCSettings	Device/Driver/LX/LX1600.hpp	/^  SetSCSettings(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetSCSettings	Device/Driver/LXERA/LXERA.hpp	/^  SetSCSettings(Port &port, OperationEnvironment &env,$/;"	f	namespace:LXEra
SetSample	Engine/ThermalBand/ThermalSlice.hpp	/^     void SetSample(double _time) {$/;"	f	struct:ThermalSlice
SetScale	Projection/Projection.cpp	/^Projection::SetScale(const double _scale)$/;"	f	class:Projection
SetScaleFromRadius	Projection/WindowProjection.cpp	/^WindowProjection::SetScaleFromRadius(double radius)$/;"	f	class:WindowProjection
SetScoreExit	Engine/Task/Ordered/Points/ASTPoint.hpp	/^  void SetScoreExit(bool _score_exit) {$/;"	f	class:final
SetScreenAngle	Projection/Projection.hpp	/^  void SetScreenAngle(Angle angle) {$/;"	f	class:Projection
SetScreenDistanceMeters	CalculationThread.cpp	/^CalculationThread::SetScreenDistanceMeters(double new_value)$/;"	f	class:CalculationThread
SetScreenOrigin	Projection/Projection.hpp	/^  void SetScreenOrigin(PixelPoint pt) {$/;"	f	class:Projection
SetScreenOrigin	Projection/Projection.hpp	/^  void SetScreenOrigin(int x, int y) {$/;"	f	class:Projection
SetScreenSize	Event/Poll/InputQueue.hpp	/^  void SetScreenSize(unsigned width, unsigned height) {$/;"	f	class:DisplayOrientation
SetScreenSize	Event/Poll/LibInput/LibInputHandler.hpp	/^  void SetScreenSize(unsigned _width, unsigned _height) {$/;"	f	class:final
SetScreenSize	Event/Poll/Linux/MergeMouse.cpp	/^MergeMouse::SetScreenSize(unsigned width, unsigned height)$/;"	f	class:MergeMouse
SetScreenSize	Event/Poll/Queue.hpp	/^  void SetScreenSize(unsigned width, unsigned height) {$/;"	f	class:final
SetScreenSize	Projection/WindowProjection.hpp	/^  void SetScreenSize(PixelSize new_size) {$/;"	f	class:WindowProjection
SetSearchMax	Engine/Task/Points/SampledTaskPoint.hpp	/^  void SetSearchMax(const SearchPoint &locmax) {$/;"	f	class:SampledTaskPoint
SetSearchMin	Engine/Task/Points/SampledTaskPoint.hpp	/^  void SetSearchMin(const SearchPoint &locmin) {$/;"	f	class:SampledTaskPoint
SetSectorAngle	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  void SetSectorAngle(Angle _angle) {$/;"	f	class:SymmetricSectorZone
SetSelected	Form/Button.cpp	/^Button::SetSelected(bool _selected)$/;"	f	class:Button
SetSelectedIndex	Form/ButtonPanel.cpp	/^ButtonPanel::SetSelectedIndex(unsigned _index)$/;"	f	class:ButtonPanel
SetServer	Tracking/LiveTrack24.cpp	/^LiveTrack24::SetServer(const TCHAR * _server)$/;"	f	class:LiveTrack24
SetSettings	CrossSection/AirspaceXSRenderer.hpp	/^  void SetSettings(const AirspaceRendererSettings &_settings) {$/;"	f	class:AirspaceXSRenderer
SetSettings	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  void SetSettings(const TerrainRendererSettings &settings) {$/;"	f	class:TerrainPreviewWindow
SetSettings	Terrain/TerrainRenderer.hpp	/^  void SetSettings(const TerrainRendererSettings &_settings) {$/;"	f	class:TerrainRenderer
SetSettings	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::SetSettings(const Settings &settings)$/;"	f	class:SkyLinesTracking::Glue
SetSettings	Tracking/TrackingGlue.cpp	/^TrackingGlue::SetSettings(const TrackingSettings &_settings)$/;"	f	class:TrackingGlue
SetShadingAngle	Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::SetShadingAngle(const WindowProjection& projection,$/;"	f	class:BackgroundRenderer
SetSilence	Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::SetSilence()$/;"	f	class:VarioSynthesiser
SetSimulatorLocation	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetSimulatorLocation(const GeoPoint &location)$/;"	f	class:DeviceBlackboard
SetSimulatorState	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo &SetSimulatorState() { return simulator_data; }$/;"	f	class:DeviceBlackboard
SetSinkTone	Device/Driver/CAI302/Protocol.hpp	/^    void SetSinkTone(unsigned v) {$/;"	f	struct:CAI302::Pilot
SetSize	Android/NativeView.hpp	/^  void SetSize(unsigned _width, unsigned _height) {$/;"	f	class:NativeView
SetSize	Event/Shared/RotatePointer.hpp	/^  void SetSize(unsigned _width, unsigned _height) {$/;"	f	class:RotatePointer
SetSize	Form/ScrollBar.cpp	/^ScrollBar::SetSize(const PixelSize size)$/;"	f	class:ScrollBar
SetSize	Terrain/HeightMatrix.cpp	/^HeightMatrix::SetSize(size_t _size)$/;"	f	class:HeightMatrix
SetSize	Terrain/HeightMatrix.cpp	/^HeightMatrix::SetSize(unsigned _width, unsigned _height)$/;"	f	class:HeightMatrix
SetSize	Terrain/HeightMatrix.cpp	/^HeightMatrix::SetSize(unsigned width, unsigned height,$/;"	f	class:HeightMatrix
SetSize	Terrain/Loader.cpp	/^TerrainLoader::SetSize(unsigned _width, unsigned _height,$/;"	f	class:TerrainLoader
SetSize	Terrain/RasterTileCache.cpp	/^RasterTileCache::SetSize(unsigned _width, unsigned _height,$/;"	f	class:RasterTileCache
SetSkyLinesData	MapWindow/MapWindow.hpp	/^  void SetSkyLinesData(const SkyLinesTracking::Data *_data) {$/;"	f	class:MapWindow
SetSkyLinesEnabled	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^TrackingConfigPanel::SetSkyLinesEnabled(bool enabled)$/;"	f	class:TrackingConfigPanel
SetSlider	Form/ScrollBar.cpp	/^ScrollBar::SetSlider(unsigned size, unsigned view_size,$/;"	f	class:ScrollBar
SetSmartDiffFilter	Device/Driver/LX/LX1600.hpp	/^  SetSmartDiffFilter(Port &port, OperationEnvironment &env, double filter)$/;"	f	namespace:LX1600
SetSmartDiffFilter	Device/Driver/LXERA/LXERA.hpp	/^  SetSmartDiffFilter(Port &port, OperationEnvironment &env, double filter)$/;"	f	namespace:LXEra
SetSpeed	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetSpeed(double val)$/;"	f	class:DeviceBlackboard
SetSpeedFactor	Replay/TaskAutoPilot.hpp	/^  void SetSpeedFactor(double f) {$/;"	f	class:TaskAutoPilot
SetSpeedUnit	Device/Driver/CAI302/Protocol.hpp	/^    void SetSpeedUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetStandbyFrequency	ActionInterface.cpp	/^ActionInterface::SetStandbyFrequency(const RadioFrequency & freq, const TCHAR * freq_name, bool to_devices)$/;"	f	class:ActionInterface
SetStandbyFrequency	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetStandbyFrequency(RadioFrequency frequency,$/;"	f	class:DeviceBlackboard
SetStart	CrossSection/CrossSectionRenderer.hpp	/^  void SetStart(GeoPoint _start) {$/;"	f	class:CrossSectionRenderer
SetStart	CrossSection/CrossSectionWindow.hpp	/^  void SetStart(GeoPoint start) {$/;"	f	class:CrossSectionWindow
SetStartLabel	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^TaskDefaultsConfigPanel::SetStartLabel()$/;"	f	class:TaskDefaultsConfigPanel
SetStartRadial	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::SetStartRadial(const Angle x)$/;"	f	class:SectorZone
SetStarted	Engine/Task/Stats/StartStats.cpp	/^StartStats::SetStarted(const AircraftState &aircraft)$/;"	f	class:StartStats
SetStartupLocation	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetStartupLocation(const GeoPoint &loc, const double alt)$/;"	f	class:DeviceBlackboard
SetState	Form/CheckBox.cpp	/^CheckBoxControl::SetState(bool value)$/;"	f	class:CheckBoxControl
SetStealthMode	Device/Driver/FLARM/Device.cpp	/^FlarmDevice::SetStealthMode(bool enabled, OperationEnvironment &env)$/;"	f	class:FlarmDevice
SetStep	Form/DataField/Float.hpp	/^  void SetStep(double v) {$/;"	f	class:final
SetStep	Form/DataField/Time.hpp	/^  void SetStep(unsigned _step) {$/;"	f	class:final
SetStep	ProgressGlue.cpp	/^ProgressGlue::SetStep(int step)$/;"	f	class:ProgressGlue
SetStep	ProgressWindow.cpp	/^ProgressWindow::SetStep(unsigned size)$/;"	f	class:ProgressWindow
SetStep	Screen/ProgressBar.cpp	/^ProgressBar::SetStep(unsigned size)$/;"	f	class:ProgressBar
SetString	Form/DataField/Enum.cpp	/^DataFieldEnum::Entry::SetString(const TCHAR *_string)$/;"	f	class:DataFieldEnum::Entry
SetStringAutoAdd	Form/DataField/Enum.cpp	/^DataFieldEnum::SetStringAutoAdd(const TCHAR *text)$/;"	f	class:DataFieldEnum
SetSwap	Event/Shared/RotatePointer.hpp	/^  void SetSwap(bool _swap) {$/;"	f	class:RotatePointer
SetSystemSettings	Blackboard/InterfaceBlackboard.hpp	/^  SystemSettings &SetSystemSettings() {$/;"	f	class:InterfaceBlackboard
SetSystemSettings	Interface.hpp	/^  static inline SystemSettings &SetSystemSettings() {$/;"	f	namespace:CommonInterface
SetSystemTimeFromGPS	Profile/ProfileKeys.cpp	/^const char SetSystemTimeFromGPS[] = "SetSystemTimeFromGPS";$/;"	m	namespace:ProfileKeys	file:
SetTarget	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::SetTarget()$/;"	f	class:TargetWidget
SetTarget	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::SetTarget(RangeAndRadial rar, const FlatProjection &proj)$/;"	f	class:AATPoint
SetTarget	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::SetTarget(const GeoPoint &loc, const bool override_lock)$/;"	f	class:AATPoint
SetTarget	Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::SetTarget(const double p)$/;"	f	class:TaskOptTarget
SetTarget	Engine/Task/TaskManager.cpp	/^TaskManager::SetTarget(const unsigned index, RangeAndRadial rar)$/;"	f	class:TaskManager
SetTarget	Engine/Task/TaskManager.cpp	/^TaskManager::SetTarget(const unsigned index, const GeoPoint &loc,$/;"	f	class:TaskManager
SetTarget	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::SetTarget(int i)$/;"	f	class:FlarmTrafficWindow
SetTarget	Gauge/FlarmTrafficWindow.hpp	/^  void SetTarget(const FlarmId &id) {$/;"	f	class:FlarmTrafficWindow
SetTarget	Gauge/FlarmTrafficWindow.hpp	/^  void SetTarget(const FlarmTraffic *traffic) {$/;"	f	class:FlarmTrafficWindow
SetTarget	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::SetTarget(unsigned index)$/;"	f	class:TargetMapWindow
SetTask	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  void SetTask(const OrderedTask *_task) {$/;"	f	class:TaskMapButtonRenderer
SetTask	MapWindow/MapWindow.hpp	/^  void SetTask(ProtectedTaskManager *_task) {$/;"	f	class:MapWindow
SetTask	MapWindow/TargetMapWindow.hpp	/^  void SetTask(ProtectedTaskManager *_task) {$/;"	f	class:TargetMapWindow
SetTaskAdvance	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskAdvance &SetTaskAdvance() {$/;"	f	class:final
SetTaskAdvance	Engine/Task/TaskManager.cpp	/^TaskManager::SetTaskAdvance()$/;"	f	class:TaskManager
SetTaskBehaviour	Engine/Task/AbstractTask.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) {$/;"	f	class:AbstractTask
SetTaskBehaviour	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:OrderedTask
SetTaskBehaviour	Engine/Task/Ordered/OrderedTask.cpp	/^SetTaskBehaviour(OrderedTask::OrderedTaskPointVector &vector,$/;"	f	file:
SetTaskBehaviour	Engine/Task/Ordered/Points/FinishPoint.cpp	/^FinishPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:FinishPoint
SetTaskBehaviour	Engine/Task/Ordered/Points/IntermediatePoint.cpp	/^IntermediateTaskPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:IntermediateTaskPoint
SetTaskBehaviour	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual void SetTaskBehaviour(gcc_unused const TaskBehaviour &tb) {}$/;"	f	class:OrderedTaskPoint
SetTaskBehaviour	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:StartPoint
SetTaskBehaviour	Engine/Task/TaskManager.cpp	/^TaskManager::SetTaskBehaviour(const TaskBehaviour &behaviour)$/;"	f	class:TaskManager
SetTaskBehaviour	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:AbortTask
SetTaskBehaviour	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:GotoTask
SetTaskBehaviour	Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::SetTaskBehaviour(const TaskBehaviour &tb)$/;"	f	class:UnorderedTaskPoint
SetTaskDestination	Engine/Task/Unordered/AlternateTask.cpp	/^AlternateTask::SetTaskDestination(const GeoPoint &_destination)$/;"	f	class:AlternateTask
SetTaskEvents	Engine/Task/AbstractTask.hpp	/^  void SetTaskEvents(TaskEvents &_task_events) {$/;"	f	class:AbstractTask
SetTaskEvents	Engine/Task/TaskManager.cpp	/^TaskManager::SetTaskEvents(TaskEvents &_task_events)$/;"	f	class:TaskManager
SetTaskFinished	Renderer/TaskPointRenderer.hpp	/^  void SetTaskFinished(bool _task_finished) {$/;"	f	class:TaskPointRenderer
SetTaskValid	Renderer/WaypointRenderer.cpp	/^  void SetTaskValid() {$/;"	f	class:final
SetTemperatureUnit	Device/Driver/CAI302/Protocol.hpp	/^    void SetTemperatureUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetTerrain	Computer/GlideComputer.cpp	/^GlideComputer::SetTerrain(RasterTerrain* _terrain)$/;"	f	class:GlideComputer
SetTerrain	Computer/GlideComputerAirData.hpp	/^  void SetTerrain(const RasterTerrain* _terrain) {$/;"	f	class:GlideComputerAirData
SetTerrain	Computer/TaskComputer.cpp	/^TaskComputer::SetTerrain(const RasterTerrain* _terrain)$/;"	f	class:TaskComputer
SetTerrain	CrossSection/CrossSectionRenderer.hpp	/^  void SetTerrain(const RasterTerrain *_terrain) {$/;"	f	class:CrossSectionRenderer
SetTerrain	CrossSection/CrossSectionWindow.hpp	/^  void SetTerrain(const RasterTerrain *terrain) {$/;"	f	class:CrossSectionWindow
SetTerrain	Engine/Route/RoutePlanner.hpp	/^  void SetTerrain(const RasterMap *_terrain) {$/;"	f	class:RoutePlanner
SetTerrain	MainWindow.cpp	/^MainWindow::SetTerrain(RasterTerrain *terrain)$/;"	f	class:MainWindow
SetTerrain	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetTerrain(RasterTerrain *_terrain)$/;"	f	class:GlueMapWindow
SetTerrain	MapWindow/MapWindow.cpp	/^MapWindow::SetTerrain(RasterTerrain *_terrain)$/;"	f	class:MapWindow
SetTerrain	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::SetTerrain(RasterTerrain *terrain)$/;"	f	class:TargetMapWindow
SetTerrain	Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::SetTerrain(const RasterTerrain *_terrain)$/;"	f	class:BackgroundRenderer
SetTerrain	Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SetTerrain(const RasterTerrain *terrain)$/;"	f	class:ProtectedRoutePlanner
SetTerrain	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::SetTerrain(const RasterTerrain *_terrain)$/;"	f	class:RoutePlannerGlue
SetText	Operation/ConsoleOperationEnvironment.cpp	/^ConsoleOperationEnvironment::SetText(const TCHAR *text)$/;"	f	class:ConsoleOperationEnvironment
SetText	Operation/Operation.cpp	/^NullOperationEnvironment::SetText(const TCHAR *text)$/;"	f	class:NullOperationEnvironment
SetText	Operation/ProxyOperationEnvironment.cpp	/^ProxyOperationEnvironment::SetText(const TCHAR *text)$/;"	f	class:ProxyOperationEnvironment
SetText	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::SetText(const TCHAR *_text)$/;"	f	class:ThreadedOperationEnvironment
SetText	Operation/ThreadedOperationEnvironment.hpp	/^    void SetText(const TCHAR *_text) {$/;"	f	struct:ThreadedOperationEnvironment::Data
SetText	Operation/VerboseOperationEnvironment.cpp	/^VerboseOperationEnvironment::SetText(const TCHAR *text)$/;"	f	class:VerboseOperationEnvironment
SetText	Screen/Custom/LargeTextWindow.cpp	/^LargeTextWindow::SetText(const TCHAR *text)$/;"	f	class:LargeTextWindow
SetText	Screen/GDI/LargeTextWindow.cpp	/^LargeTextWindow::SetText(const TCHAR *text)$/;"	f	class:LargeTextWindow
SetText	Widget/LargeTextWidget.cpp	/^LargeTextWidget::SetText(const TCHAR *text)$/;"	f	class:LargeTextWidget
SetText	Widget/RowFormWidget.hpp	/^  void SetText(unsigned i, const TCHAR *text) {$/;"	f	class:RowFormWidget
SetText	Widget/TextWidget.cpp	/^TextWidget::SetText(const TCHAR *text)$/;"	f	class:TextWidget
SetTextColor	Screen/GDI/Canvas.hpp	/^  void SetTextColor(const Color c) {$/;"	f	class:Canvas
SetTextColor	Screen/Memory/Canvas.hpp	/^  void SetTextColor(const Color c) {$/;"	f	class:Canvas
SetTextColor	Screen/OpenGL/Canvas.hpp	/^  void SetTextColor(const Color c) {$/;"	f	class:Canvas
SetTexturePowerOfTwo	Android/NativeView.hpp	/^  void SetTexturePowerOfTwo(bool value) {$/;"	f	class:NativeView
SetThreadIdlePriority	Thread/Util.hpp	/^SetThreadIdlePriority()$/;"	f
SetThreadName	Thread/Name.hpp	/^SetThreadName(const char *name)$/;"	f
SetThreadRealtime	Thread/Util.hpp	/^SetThreadRealtime()$/;"	f
SetTime	Weather/Rasp/RaspCache.cpp	/^RaspCache::SetTime(BrokenTime t)$/;"	f	class:RaspCache
SetTime	Weather/Rasp/RaspRenderer.hpp	/^  void SetTime(BrokenTime t) {$/;"	f	class:RaspRenderer
SetTimeOffset	Device/Driver/LX/LX1600.hpp	/^  SetTimeOffset(Port &port, OperationEnvironment &env, int offset)$/;"	f	namespace:LX1600
SetTimeOffset	Device/Driver/LXERA/LXERA.hpp	/^  SetTimeOffset(Port &port, OperationEnvironment &env, int offset)$/;"	f	namespace:LXEra
SetTimeScale	Replay/Replay.hpp	/^  void SetTimeScale(const double _time_scale) {$/;"	f	class:final
SetTimeZone	Form/DataField/RoughTime.hpp	/^  void SetTimeZone(RoughTimeDelta _time_zone) {$/;"	f	class:final
SetTimes	Engine/Task/Stats/ElementStat.cpp	/^ElementStat::SetTimes(const double until_start_s, const double ts,$/;"	f	class:ElementStat
SetTitle	Dialogs/Weather/WeatherDialog.cpp	/^SetTitle(WndForm &form, const TabWidget &pager)$/;"	f	file:
SetTitle	Dialogs/dlgStatus.cpp	/^SetTitle(WndForm &form, const TabWidget &pager)$/;"	f	file:
SetTitle	InfoBoxes/Data.cpp	/^InfoBoxData::SetTitle(const TCHAR *_title)$/;"	f	class:InfoBoxData
SetTitle	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::SetTitle(const TCHAR *_title)$/;"	f	class:InfoBoxWindow
SetTitleColor	InfoBoxes/Data.hpp	/^  void SetTitleColor(unsigned _color) {$/;"	f	struct:InfoBoxData
SetTone	Audio/ToneSynthesiser.cpp	/^ToneSynthesiser::SetTone(unsigned tone_hz)$/;"	f	class:ToneSynthesiser
SetTopograpgy	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::SetTopograpgy(TopographyStore *topography)$/;"	f	class:TargetMapWindow
SetTopography	MainWindow.cpp	/^MainWindow::SetTopography(TopographyStore *topography)$/;"	f	class:MainWindow
SetTopography	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetTopography(TopographyStore *_topography)$/;"	f	class:GlueMapWindow
SetTopography	MapWindow/MapWindow.cpp	/^MapWindow::SetTopography(TopographyStore *_topography)$/;"	f	class:MapWindow
SetTrack	Blackboard/DeviceBlackboard.cpp	/^DeviceBlackboard::SetTrack(Angle val)$/;"	f	class:DeviceBlackboard
SetTwoWidgets	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void SetTwoWidgets(TwoWidgets &_two_widgets) {$/;"	f	class:TaskEditPanel
SetTwoWidgets	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void SetTwoWidgets(TwoWidgets &_two_widgets) {$/;"	f	class:final
SetType	Dialogs/Weather/PCMetDialog.cpp	/^  void SetType(const PCMet::ImageType *_type) {$/;"	f	class:final
SetUISettings	Blackboard/InterfaceBlackboard.hpp	/^  UISettings &SetUISettings() {$/;"	f	class:InterfaceBlackboard
SetUISettings	Interface.hpp	/^  static inline UISettings &SetUISettings() {$/;"	f	namespace:CommonInterface
SetUIState	Interface.hpp	/^  static inline UIState &SetUIState() {$/;"	f	namespace:CommonInterface
SetUIState	MainWindow.cpp	/^MainWindow::SetUIState(const UIState &ui_state)$/;"	f	class:MainWindow
SetUIState	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SetUIState(const UIState &new_value)$/;"	f	class:GlueMapWindow
SetURL	Net/HTTP/Easy.hxx	/^	void SetURL(const char *value) {$/;"	f	class:CurlEasy
SetUTF8	Util/StaticString.hxx	/^	bool SetUTF8(const char *src) {$/;"	f	class:StaticStringBase
SetUndefined	PageSettings.hpp	/^  void SetUndefined() {$/;"	f	struct:PageLayout
SetUnitBits	Device/Driver/CAI302/Protocol.hpp	/^    void SetUnitBits(unsigned bit, unsigned n, unsigned value) {$/;"	f	struct:CAI302::Pilot
SetUnits	Form/DataField/Float.hpp	/^  void SetUnits(const TCHAR *text) {$/;"	f	class:final
SetUserAgent	Net/HTTP/Easy.hxx	/^	void SetUserAgent(const char *value) {$/;"	f	class:CurlEasy
SetUserCoordinateFormat	Formatter/UserGeoPointFormatter.cpp	/^SetUserCoordinateFormat(CoordinateFormat _fmt)$/;"	f
SetVCenter	Renderer/TextRenderer.hpp	/^  void SetVCenter(bool _vcenter=true) {$/;"	f	class:TextRenderer
SetVMax	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetVMax(double _v_max, bool update = true) {$/;"	f	class:GlidePolar
SetVSpeed	InfoBoxes/Content/MacCready.cpp	/^SetVSpeed(InfoBoxData &data, double value)$/;"	f	file:
SetVSpeed	InfoBoxes/Content/Thermal.cpp	/^SetVSpeed(InfoBoxData &data, double value)$/;"	f	file:
SetVSpeedComment	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentSpark::SetVSpeedComment(InfoBoxData &data,$/;"	f	class:InfoBoxContentSpark
SetValue	Audio/VarioGlue.cpp	/^AudioVarioGlue::SetValue(double vario)$/;"	f	class:AudioVarioGlue
SetValue	Config/Registry.hpp	/^  bool SetValue(const TCHAR *name, DWORD type,$/;"	f	class:RegistryKey
SetValue	Config/Registry.hpp	/^  bool SetValue(const TCHAR *name, DWORD value) {$/;"	f	class:RegistryKey
SetValue	Config/Registry.hpp	/^  bool SetValue(const TCHAR *name, const TCHAR *value) {$/;"	f	class:RegistryKey
SetValue	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageLayoutEditWidget::SetValue(const PageLayout &_value)$/;"	f	class:PageLayoutEditWidget
SetValue	Form/DataField/Angle.hpp	/^  void SetValue(Angle _value) {$/;"	f	class:final
SetValue	Form/DataField/Angle.hpp	/^  void SetValue(int _value) {$/;"	f	class:final
SetValue	Form/DataField/Angle.hpp	/^  void SetValue(unsigned _value) {$/;"	f	class:final
SetValue	Form/DataField/GeoPoint.hpp	/^  void SetValue(GeoPoint _value) {$/;"	f	class:final
SetValue	Form/DataField/RoughTime.hpp	/^  void SetValue(RoughTime _value) {$/;"	f	class:final
SetValue	Form/DataField/Time.hpp	/^  void SetValue(int _value) {$/;"	f	class:final
SetValue	Form/DigitEntry.cpp	/^DigitEntry::SetValue(Angle value)$/;"	f	class:DigitEntry
SetValue	Form/DigitEntry.cpp	/^DigitEntry::SetValue(RoughTime value)$/;"	f	class:DigitEntry
SetValue	Form/DigitEntry.cpp	/^DigitEntry::SetValue(double value)$/;"	f	class:DigitEntry
SetValue	Form/DigitEntry.cpp	/^DigitEntry::SetValue(int value)$/;"	f	class:DigitEntry
SetValue	Form/DigitEntry.cpp	/^DigitEntry::SetValue(unsigned value)$/;"	f	class:DigitEntry
SetValue	InfoBoxes/Data.cpp	/^InfoBoxData::SetValue(const TCHAR *_value)$/;"	f	class:InfoBoxData
SetValue	InfoBoxes/Format.cpp	/^InfoBoxData::SetValue(Angle _value, const TCHAR *suffix)$/;"	f	class:InfoBoxData
SetValue	InfoBoxes/Format.cpp	/^InfoBoxData::SetValue(const TCHAR *format, double value)$/;"	f	class:InfoBoxData
SetValue	ProgressGlue.cpp	/^ProgressGlue::SetValue(unsigned value)$/;"	f	class:ProgressGlue
SetValue	ProgressWindow.cpp	/^ProgressWindow::SetValue(unsigned value)$/;"	f	class:ProgressWindow
SetValue	Screen/ProgressBar.cpp	/^ProgressBar::SetValue(unsigned value)$/;"	f	class:ProgressBar
SetValueColor	InfoBoxes/Data.hpp	/^  void SetValueColor(unsigned _color) {$/;"	f	struct:InfoBoxData
SetValueFromAltDiff	InfoBoxes/Content/Task.cpp	/^SetValueFromAltDiff(InfoBoxData &data, const TaskStats &task_stats,$/;"	f	file:
SetValueFromAltitude	InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromAltitude(double new_value)$/;"	f	class:InfoBoxData
SetValueFromArrival	InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromArrival(double new_value)$/;"	f	class:InfoBoxData
SetValueFromBearingDifference	InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromBearingDifference(Angle delta)$/;"	f	class:InfoBoxData
SetValueFromDistance	InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromDistance(double new_value)$/;"	f	class:InfoBoxData
SetValueFromGlideRatio	InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromGlideRatio(double gr)$/;"	f	class:InfoBoxData
SetValueFromPercent	InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromPercent(double dd)$/;"	f	class:InfoBoxData
SetValueFromSpeed	InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetValueFromTaskSpeed	InfoBoxes/Units.cpp	/^InfoBoxData::SetValueFromTaskSpeed(double new_value, bool precision)$/;"	f	class:InfoBoxData
SetValueFromTimeTwoLines	InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromTimeTwoLines(int dd)$/;"	f	class:InfoBoxData
SetValueFromVoltage	InfoBoxes/Format.cpp	/^InfoBoxData::SetValueFromVoltage(double dd)$/;"	f	class:InfoBoxData
SetValueInvalid	InfoBoxes/Data.cpp	/^InfoBoxData::SetValueInvalid()$/;"	f	class:InfoBoxData
SetValueUnit	InfoBoxes/Data.hpp	/^  void SetValueUnit(Unit _value_unit) {$/;"	f	struct:InfoBoxData
SetVario	Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::SetVario(double vario)$/;"	f	class:VarioSynthesiser
SetVarioSettings	Device/Driver/LX/LX1600.hpp	/^  SetVarioSettings(Port &port, OperationEnvironment &env,$/;"	f	namespace:LX1600
SetVarioSettings	Device/Driver/LXERA/LXERA.hpp	/^  SetVarioSettings(Port &port, OperationEnvironment &env,$/;"	f	namespace:LXEra
SetVarioUnit	Device/Driver/CAI302/Protocol.hpp	/^    void SetVarioUnit(unsigned unit) {$/;"	f	struct:CAI302::Pilot
SetVisible	Widget/ManagedWidget.cpp	/^ManagedWidget::SetVisible(bool _visible)$/;"	f	class:ManagedWidget
SetVisible	Widget/RowFormWidget.cpp	/^RowFormWidget::Row::SetVisible(ContainerWindow &parent, bool _visible)$/;"	f	class:RowFormWidget::Row
SetVolume	Audio/PCMMixer.hpp	/^  void SetVolume(unsigned vol_percent) {$/;"	f	class:final
SetVolume	Audio/PCMMixerDataSource.cpp	/^PCMMixerDataSource::SetVolume(unsigned _vol_percent)$/;"	f	class:PCMMixerDataSource
SetVolume	Audio/ToneSynthesiser.hpp	/^  void SetVolume(unsigned _volume) {$/;"	f	class:ToneSynthesiser
SetVolume	Audio/VolumeController.cpp	/^VolumeController::SetVolume(unsigned vol_percent)$/;"	f	class:VolumeController
SetVolume	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::SetVolume(unsigned volume, OperationEnvironment &env)$/;"	f	class:CAI302Device
SetVolume	Device/Driver/CAI302/Protocol.cpp	/^CAI302::SetVolume(Port &port, unsigned volume, OperationEnvironment &env)$/;"	f	class:CAI302
SetVolume	Device/Driver/LX/LX1600.hpp	/^  SetVolume(Port &port, OperationEnvironment &env, unsigned volume)$/;"	f	namespace:LX1600
SetVolume	Device/Driver/LXERA/LXERA.hpp	/^  SetVolume(Port &port, OperationEnvironment &env, unsigned volume)$/;"	f	namespace:LXEra
SetWaypoints	MapWindow/MapWindow.hpp	/^  void SetWaypoints(const Waypoints *_waypoints) {$/;"	f	class:MapWindow
SetWaypoints	MapWindow/TargetMapWindow.hpp	/^  void SetWaypoints(const Waypoints *way_points) {$/;"	f	class:TargetMapWindow
SetWeekdays	Engine/Airspace/AirspaceActivity.hpp	/^  void SetWeekdays() {$/;"	f	class:AirspaceActivity
SetWeekend	Engine/Airspace/AirspaceActivity.hpp	/^  void SetWeekend() {$/;"	f	class:AirspaceActivity
SetWidget	MainWindow.cpp	/^MainWindow::SetWidget(Widget *_widget)$/;"	f	class:MainWindow
SetWidget	Widget/DockWindow.cpp	/^DockWindow::SetWidget(Widget *_widget)$/;"	f	class:DockWindow
SetWind	Replay/AircraftSim.cpp	/^AircraftSim::SetWind(const double speed, const Angle direction)$/;"	f	class:AircraftSim
SetWindow	Widget/WindowWidget.hpp	/^  void SetWindow(Window *_window) {$/;"	f	class:WindowWidget
SetWingArea	Engine/GlideSolvers/GlidePolar.hpp	/^  void SetWingArea(double _wing_area) {$/;"	f	class:GlidePolar
SetWriteFunction	Net/HTTP/Easy.hxx	/^	void SetWriteFunction(size_t (*function)(char *ptr, size_t size,$/;"	f	class:CurlEasy
SetZoom	Gauge/BigTrafficWidget.cpp	/^  void SetZoom(unsigned _zoom) {$/;"	f	class:FlarmTrafficControl
SettingExists	Dialogs/Device/FLARM/ConfigWidget.cpp	/^SettingExists(FlarmDevice &device, const char *name)$/;"	f	file:
SettingExists	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^SettingExists(VegaDevice &device, const char *name)$/;"	f	file:
Settings	Tracking/LiveTrack24/Settings.hpp	/^struct Settings {$/;"	s	namespace:LiveTrack24
Settings	Tracking/SkyLines/Settings.hpp	/^struct Settings {$/;"	s	namespace:SkyLinesTracking
SettingsBlackboard	Blackboard/SettingsBlackboard.hpp	/^class SettingsBlackboard : public ComputerSettingsBlackboard {$/;"	c
SettingsEnter	UtilsSettings.cpp	/^SettingsEnter()$/;"	f	file:
SettingsLeave	UtilsSettings.cpp	/^SettingsLeave(const UISettings &old_ui_settings)$/;"	f	file:
SettingsProcessTimer	ProcessTimer.cpp	/^SettingsProcessTimer()$/;"	f	file:
Setup	Dialogs/Device/ManageFlarmDialog.cpp	/^    Setup,$/;"	e	enum:final::Controls	file:
SetupCanvas	Renderer/AirspaceRendererOther.cpp	/^  bool SetupCanvas(const AbstractAirspace &airspace) {$/;"	f	class:final
SetupContext	Screen/OpenGL/Init.cpp	/^OpenGL::SetupContext()$/;"	f	class:OpenGL
SetupInterior	Renderer/AirspaceRendererGL.cpp	/^  bool SetupInterior(const AbstractAirspace &airspace) {$/;"	f	class:final	file:
SetupInterior	Renderer/AirspaceRendererGL.cpp	/^  void SetupInterior(const AbstractAirspace &airspace,$/;"	f	class:final	file:
SetupNMEA	Device/Driver/LX/LX1600.hpp	/^  SetupNMEA(Port &port, OperationEnvironment &env)$/;"	f	namespace:LX1600
SetupNMEA	Device/Driver/LX/V7.hpp	/^  SetupNMEA(Port &port, OperationEnvironment &env)$/;"	f	namespace:V7
SetupNMEA	Device/Driver/LXERA/LXERA.hpp	/^  SetupNMEA(Port &port, OperationEnvironment &env)$/;"	f	namespace:LXEra
SetupOutline	Renderer/AirspaceRendererGL.cpp	/^  bool SetupOutline(const AbstractAirspace &airspace) {$/;"	f	class:final	file:
SetupOverlay	Dialogs/Weather/MapOverlayWidget.cpp	/^SetupOverlay(MapOverlayBitmap &bmp, Path::const_pointer name)$/;"	f	file:
SetupViewport	Screen/OpenGL/Init.cpp	/^OpenGL::SetupViewport(UnsignedPoint2D size)$/;"	f	class:OpenGL
SetupViewport	Screen/OpenGL/TopCanvas.cpp	/^TopCanvas::SetupViewport(PixelSize native_size)$/;"	f	class:TopCanvas
SfRealloc	Topography/shapelib/mapshape.c	/^static void * SfRealloc( void * pMem, int nNewSize )$/;"	f	file:
SfRealloc	Topography/shapelib/maptree.c	/^static void * SfRealloc( void * pMem, int nNewSize )$/;"	f	file:
SfRealloc	Topography/shapelib/mapxbase.c	/^static void * SfRealloc( void * pMem, int nNewSize )$/;"	f	file:
Shadow	Screen/GDI/Color.hpp	/^  constexpr Color Shadow() const {$/;"	f	class:Color
Shadow	Screen/Memory/Color.hpp	/^  constexpr Color Shadow() const {$/;"	f	class:Color
Shadow	Screen/OpenGL/Color.hpp	/^  constexpr Color Shadow() const {$/;"	f	class:Color
Shape	Device/Declaration.hpp	/^    enum Shape {$/;"	g	struct:Declaration::TurnPoint
Shape	Engine/Airspace/AbstractAirspace.hpp	/^  enum class Shape: uint8_t {$/;"	c	class:AbstractAirspace
Shape	Engine/Task/ObservationZones/ObservationZone.hpp	/^  enum class Shape : uint8_t {$/;"	c	class:ObservationZone
ShapeList	Topography/TopographyFile.hpp	/^    ShapeList() {}$/;"	f	struct:TopographyFile::ShapeList
ShapeList	Topography/TopographyFile.hpp	/^    ShapeList(const XShape *_shape):shape(_shape) {}$/;"	f	struct:TopographyFile::ShapeList
ShapeList	Topography/TopographyFile.hpp	/^  struct ShapeList {$/;"	s	class:TopographyFile
ShapePoint	Topography/XShapePoint.hpp	/^  constexpr ShapePoint(Args&&... args):FloatPoint2D(args...) {}$/;"	f	struct:ShapePoint
ShapePoint	Topography/XShapePoint.hpp	/^struct ShapePoint : FloatPoint2D {$/;"	s
ShapeRenderer	Topography/ShapeRenderer.hpp	/^class ShapeRenderer : private NonCopyable {$/;"	c
ShapeScalar	Topography/XShapePoint.hpp	/^typedef ShapePoint::scalar_type ShapeScalar;$/;"	t
Shift	Geo/Flat/FlatBoundingBox.hpp	/^  void Shift(const FlatGeoPoint &offset) {$/;"	f	struct:FlatBoundingBox
ShouldReopen	Device/Descriptor.hpp	/^  bool ShouldReopen() const {$/;"	f	class:final
ShouldReopenDriverOnTimeout	Device/Descriptor.cpp	/^DeviceDescriptor::ShouldReopenDriverOnTimeout() const$/;"	f	class:DeviceDescriptor
ShouldReopenOnTimeout	Device/Config.cpp	/^DeviceConfig::ShouldReopenOnTimeout() const$/;"	f	class:DeviceConfig
ShouldReopenOnTimeout	Device/Descriptor.hpp	/^  bool ShouldReopenOnTimeout() const {$/;"	f	class:final
Show	CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::Show(const PixelRect &rc)$/;"	f	class:CrossSectionWidget
Show	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::Show(const PixelRect &rc)$/;"	f	class:AirspaceWarningListWidget
Show	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::Show(const PixelRect &rc)$/;"	f	class:VegaParametersWidget
Show	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::Show(const PixelRect &rc)$/;"	f	class:PlanePolarWidget
Show	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::Show(const PixelRect &rc)$/;"	f	class:AirspaceConfigPanel
Show	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^PageListWidget::Show(const PixelRect &rc)$/;"	f	class:PageListWidget
Show	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::Show(const PixelRect &rc)$/;"	f	class:WindSettingsPanel
Show	Dialogs/StatusPanels/StatusPanel.cpp	/^StatusPanel::Show(const PixelRect &rc)$/;"	f	class:StatusPanel
Show	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^SystemStatusPanel::Show(const PixelRect &rc)$/;"	f	class:SystemStatusPanel
Show	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::Show(const PixelRect &rc)$/;"	f	class:TaskClosePanel
Show	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::Show(const PixelRect &rc)$/;"	f	class:TaskEditPanel
Show	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::Show(const PixelRect &rc)$/;"	f	class:TaskListPanel
Show	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::Show(const PixelRect &rc)$/;"	f	class:TaskManagerDialog
Show	Dialogs/Task/Manager/TaskMiscPanel.cpp	/^TaskMiscPanel::Show(const PixelRect &rc)$/;"	f	class:TaskMiscPanel
Show	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::Show(const PixelRect &rc)$/;"	f	class:TaskPropertiesPanel
Show	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::Show(const PixelRect &rc)$/;"	f	class:FlarmTrafficDetailsWidget
Show	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::Show(const PixelRect &rc)$/;"	f	class:TeamCodeWidget
Show	Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::Show(const PixelRect &rc)$/;"	f	class:NOAADetailsWidget
Show	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::Show(const PixelRect &rc)$/;"	f	class:BigThermalAssistantWidget
Show	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::Show(const PixelRect &rc)$/;"	f	class:TrafficWidget
Show	Gauge/GaugeFLARM.cpp	/^GaugeFLARM::Show(const PixelRect &rc)$/;"	f	class:GaugeFLARM
Show	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::Show(const PixelRect &rc)$/;"	f	class:GaugeThermalAssistant
Show	Gauge/GlueGaugeVario.cpp	/^GlueGaugeVario::Show(const PixelRect &rc)$/;"	f	class:GlueGaugeVario
Show	HorizonWidget.cpp	/^HorizonWidget::Show(const PixelRect &rc)$/;"	f	class:HorizonWidget
Show	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::Show()$/;"	f	class:InfoBoxManager
Show	InfoBoxes/Panel/AltitudeInfo.cpp	/^AltitudeInfoPanel::Show(const PixelRect &rc)$/;"	f	class:AltitudeInfoPanel
Show	InfoBoxes/Panel/MacCreadySetup.cpp	/^MacCreadySetupPanel::Show(const PixelRect &rc)$/;"	f	class:MacCreadySetupPanel
Show	Widget/ActionWidget.cpp	/^ActionWidget::Show(const PixelRect &rc)$/;"	f	class:ActionWidget
Show	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::Show(const PixelRect &rc)$/;"	f	class:ArrowPagerWidget
Show	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Show(const PixelRect &rc)$/;"	f	class:ButtonPanelWidget
Show	Widget/CallbackWidget.cpp	/^CallbackWidget::Show(const PixelRect &rc)$/;"	f	class:CallbackWidget
Show	Widget/KeyboardWidget.cpp	/^KeyboardWidget::Show(const PixelRect &rc)$/;"	f	class:KeyboardWidget
Show	Widget/ManagedWidget.cpp	/^ManagedWidget::Show()$/;"	f	class:ManagedWidget
Show	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::Show(const PixelRect &total_rc)$/;"	f	class:OffsetButtonsWidget
Show	Widget/PagerWidget.cpp	/^PagerWidget::Show(const PixelRect &rc)$/;"	f	class:PagerWidget
Show	Widget/RowFormWidget.cpp	/^RowFormWidget::Row::Show(ContainerWindow &parent)$/;"	f	class:RowFormWidget::Row
Show	Widget/RowFormWidget.cpp	/^RowFormWidget::Show(const PixelRect &rc)$/;"	f	class:RowFormWidget
Show	Widget/SolidWidget.cpp	/^SolidWidget::Show(const PixelRect &rc)$/;"	f	class:SolidWidget
Show	Widget/TabWidget.cpp	/^TabWidget::Show(const PixelRect &rc)$/;"	f	class:TabWidget
Show	Widget/TwoWidgets.cpp	/^TwoWidgets::Show(const PixelRect &rc)$/;"	f	class:TwoWidgets
Show	Widget/WindowWidget.cpp	/^WindowWidget::Show(const PixelRect &rc)$/;"	f	class:WindowWidget
ShowAirspaceClassRendererSettingsDialog	Dialogs/Airspace/AirspaceCRendererSettingsDialog.cpp	/^ShowAirspaceClassRendererSettingsDialog(AirspaceClass selected)$/;"	f
ShowAirspaceListDialog	Dialogs/Airspace/AirspaceList.cpp	/^ShowAirspaceListDialog(const Airspaces &_airspaces,$/;"	f
ShowAll	Form/ButtonPanel.cpp	/^ButtonPanel::ShowAll()$/;"	f	class:ButtonPanel
ShowAltitude	Dialogs/Settings/dlgBasicSettings.cpp	/^FlightSetupPanel::ShowAltitude(double altitude)$/;"	f	class:FlightSetupPanel
ShowAnalysis8	InfoBoxes/Content/Contest.cpp	/^ShowAnalysis8()$/;"	f	file:
ShowAnalysisBarograph	InfoBoxes/Content/Trace.cpp	/^ShowAnalysisBarograph()$/;"	f	file:
ShowButton	Menu/MenuBar.cpp	/^MenuBar::ShowButton(unsigned i, bool enabled, const TCHAR *text,$/;"	f	class:MenuBar
ShowColorListDialog	Dialogs/ColorListDialog.cpp	/^ShowColorListDialog(RGB8Color &color)$/;"	f
ShowDeviceList	Dialogs/Device/DeviceListDialog.cpp	/^ShowDeviceList()$/;"	f
ShowDialog	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::ShowDialog()$/;"	f	class:InfoBoxWindow
ShowDisplayControls	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::ShowDisplayControls(AirspaceDisplayMode mode)$/;"	f	class:AirspaceConfigPanel
ShowFAITriangleAreas	Profile/ProfileKeys.cpp	/^const char ShowFAITriangleAreas[] = "ShowFAITriangleAreas";$/;"	m	namespace:ProfileKeys	file:
ShowFAITriangleControls	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^ScoringConfigPanel::ShowFAITriangleControls(bool show)$/;"	f	class:ScoringConfigPanel
ShowFileManager	Dialogs/FileManager.cpp	/^ShowFileManager()$/;"	f
ShowFileManager2	Dialogs/FileManager.cpp	/^ShowFileManager2()$/;"	f	file:
ShowFlightList	Logger/ExternalLogger.cpp	/^ShowFlightList(const RecordedFlightList &flight_list)$/;"	f	file:
ShowHorizon	UIActions.cpp	/^UIActions::ShowHorizon()$/;"	f	class:UIActions
ShowInfoBoxPicker	InfoBoxes/InfoBoxManager.cpp	/^InfoBoxManager::ShowInfoBoxPicker(const int i)$/;"	f	class:InfoBoxManager
ShowLockBox	Dialogs/LockScreen.cpp	/^ShowLockBox()$/;"	f
ShowMap	PageActions.cpp	/^PageActions::ShowMap()$/;"	f	class:PageActions
ShowMapItemDialog	Dialogs/MapItemListDialog.cpp	/^ShowMapItemDialog(const MapItem &item,$/;"	f	file:
ShowMapItemListDialog	Dialogs/MapItemListDialog.cpp	/^ShowMapItemListDialog(const MapItemList &list,$/;"	f
ShowMapItemListDialog	Dialogs/MapItemListDialog.cpp	/^ShowMapItemListDialog(const MapItemList &list,$/;"	f	file:
ShowMapItemListSettingsDialog	Dialogs/MapItemListSettingsDialog.cpp	/^ShowMapItemListSettingsDialog()$/;"	f
ShowMapItems	MapWindow/GlueMapWindowItems.cpp	/^GlueMapWindow::ShowMapItems(const GeoPoint &location,$/;"	f	class:GlueMapWindow
ShowMenu	Input/InputEvents.cpp	/^InputEvents::ShowMenu()$/;"	f	class:InputEvents
ShowMenuButton	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  ShowMenuButton,$/;"	e	enum:ControlIndex	file:
ShowMenuButton	Menu/ShowMenuButton.hpp	/^class ShowMenuButton : public Button {$/;"	c
ShowMenuButton	Profile/ProfileKeys.cpp	/^const char ShowMenuButton[] = "ShowMenuButton";$/;"	m	namespace:ProfileKeys	file:
ShowMenuButtonRenderer	Menu/ShowMenuButton.cpp	/^class ShowMenuButtonRenderer : public ButtonRenderer {$/;"	c	file:
ShowMessageBox	Dialogs/Message.cpp	/^ShowMessageBox(const TCHAR *text, const TCHAR *caption, unsigned flags)$/;"	f
ShowModal	Dialogs/WidgetDialog.cpp	/^WidgetDialog::ShowModal()$/;"	f	class:WidgetDialog
ShowModal	Form/Form.cpp	/^WndForm::ShowModal()$/;"	f	class:WndForm
ShowNetworkDialog	Kobo/NetworkDialog.cpp	/^ShowNetworkDialog()$/;"	f
ShowNextPage	Form/GridView.cpp	/^GridView::ShowNextPage(Direction direction)$/;"	f	class:GridView
ShowNextWaypointDetails	InfoBoxes/Content/Task.cpp	/^ShowNextWaypointDetails()$/;"	f	file:
ShowOnlyMap	PageActions.cpp	/^PageActions::ShowOnlyMap()$/;"	f	class:PageActions
ShowParseWarning	Airspace/AirspaceParser.cpp	/^ShowParseWarning(int line, const TCHAR *str, OperationEnvironment &operation)$/;"	f	file:
ShowPortMonitor	Dialogs/Device/PortMonitor.cpp	/^ShowPortMonitor(DeviceDescriptor &device)$/;"	f
ShowReachControls	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::ShowReachControls(bool show)$/;"	f	class:RouteConfigPanel
ShowReplayDialog	Dialogs/ReplayDialog.cpp	/^ShowReplayDialog()$/;"	f
ShowRouteControls	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^RouteConfigPanel::ShowRouteControls(bool show)$/;"	f	class:RouteConfigPanel
ShowRow	Widget/RowFormWidget.hpp	/^  void ShowRow(unsigned i) {$/;"	f	class:RowFormWidget
ShowSystemDialog	Kobo/SystemDialog.cpp	/^ShowSystemDialog()$/;"	f
ShowTaskView	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::ShowTaskView(const OrderedTask *_task)$/;"	f	class:TaskManagerDialog
ShowTeamCodeDialog	InfoBoxes/Content/Team.cpp	/^ShowTeamCodeDialog()$/;"	f	file:
ShowTerrainControls	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::ShowTerrainControls()$/;"	f	class:TerrainDisplayConfigPanel
ShowThermalAssistant	PageActions.cpp	/^PageActions::ShowThermalAssistant()$/;"	f	class:PageActions
ShowThermalAssistant	UIActions.cpp	/^UIActions::ShowThermalAssistant()$/;"	f	class:UIActions
ShowToolsDialog	Kobo/ToolsDialog.cpp	/^ShowToolsDialog()$/;"	f
ShowTrafficRadar	PageActions.cpp	/^PageActions::ShowTrafficRadar()$/;"	f	class:PageActions
ShowTrafficRadar	UIActions.cpp	/^UIActions::ShowTrafficRadar()$/;"	f	class:UIActions
ShowTrailControls	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^SymbolsConfigPanel::ShowTrailControls(bool show)$/;"	f	class:SymbolsConfigPanel
ShowWarningControls	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^AirspaceConfigPanel::ShowWarningControls(bool visible)$/;"	f	class:AirspaceConfigPanel
ShowWaypointListDialog	Dialogs/Waypoint/WaypointList.cpp	/^ShowWaypointListDialog(const GeoPoint &_location,$/;"	f
ShowWeatherDialog	Dialogs/Weather/WeatherDialog.cpp	/^ShowWeatherDialog(const TCHAR *page)$/;"	f
ShowWifiDialog	Kobo/WifiDialog.cpp	/^ShowWifiDialog()$/;"	f
ShowWindSettingsDialog	Dialogs/Settings/WindSettingsDialog.cpp	/^ShowWindSettingsDialog()$/;"	f
Shutdown	Logger/NMEALogger.cpp	/^NMEALogger::Shutdown()$/;"	f	class:NMEALogger
Shutdown	Startup.cpp	/^Shutdown()$/;"	f
SiblingPath	Kobo/System.cpp	/^SiblingPath(const char *name, char *buffer, size_t size)$/;"	f	file:
SiblingsHook	Screen/Window.hpp	/^  typedef boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>> SiblingsHook;$/;"	t	class:Window
SideInfoType	Gauge/FlarmTrafficWindow.hpp	/^  enum SideInfoType {$/;"	g	class:FlarmTrafficWindow
Sigmoid	Math/Util.hpp	/^Sigmoid(double x)$/;"	f
Sign	Geo/ConvexHull/GrahamScan.cpp	/^Sign(double value, double tolerance)$/;"	f	file:
Sign	IGC/IGCWriter.cpp	/^IGCWriter::Sign()$/;"	f	class:IGCWriter
Signal	OS/EventPipe.cpp	/^EventPipe::Signal()$/;"	f	class:EventPipe
Signal	Thread/Trigger.hpp	/^  void Signal() {$/;"	f	class:Trigger
SignalListener	IO/Async/SignalListener.hpp	/^  explicit SignalListener(boost::asio::io_context &io_context)$/;"	f	class:SignalListener
SignalListener	IO/Async/SignalListener.hpp	/^class SignalListener {$/;"	c
SignalShutdown	UIActions.cpp	/^UIActions::SignalShutdown(bool force)$/;"	f	class:UIActions
Signature	Device/Driver/IMI/Protocol/Types.hpp	/^  struct Signature$/;"	s	namespace:IMI
SignedRasterLocation	Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation(Args&&... args)$/;"	f	struct:SignedRasterLocation
SignedRasterLocation	Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation(RasterLocation other)$/;"	f	struct:SignedRasterLocation
SignedRasterLocation	Terrain/RasterLocation.hpp	/^struct SignedRasterLocation : Point2D<int> {$/;"	s
Simple	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  struct Simple {};$/;"	s	class:AirspaceAircraftPerformance
SimpleDistance	Projection/CompareProjection.cpp	/^SimpleDistance(const GeoPoint &a, const GeoPoint &b,$/;"	f	file:
Simulator	Device/Simulator.hpp	/^class Simulator {$/;"	c
SimulatorPromptResult	Dialogs/dlgSimulatorPrompt.hpp	/^enum SimulatorPromptResult {$/;"	g
SimulatorPromptWidget	Dialogs/dlgSimulatorPrompt.cpp	/^  SimulatorPromptWidget(const DialogLook &_look,$/;"	f	class:final
SimulatorPromptWindow	Dialogs/SimulatorPromptWindow.hpp	/^  SimulatorPromptWindow(const DialogLook &_look,$/;"	f	class:final
SinCos	Math/Angle.hpp	/^  std::pair<double, double> SinCos() const {$/;"	f	class:Angle
SinceInMinutes	Dialogs/Traffic/TrafficList.cpp	/^SinceInMinutes(double now_s, uint32_t past_ms)$/;"	f	file:
SinceInMinutes	Renderer/MapItemListRenderer.cpp	/^SinceInMinutes(double now_s, uint32_t past_ms)$/;"	f	file:
SingleWindow	Screen/SingleWindow.hpp	/^class SingleWindow : public TopWindow {$/;"	c
SinkRate	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SinkRate(const double V) const$/;"	f	class:GlidePolar
SinkRate	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SinkRate(const double V, const double n) const$/;"	f	class:GlidePolar
SinkTone	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    SinkTone,$/;"	e	enum:final::Controls
SiteConfigPanel	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  SiteConfigPanel()$/;"	f	class:final
Size	Device/Declaration.hpp	/^  unsigned Size() const {$/;"	f	struct:Declaration
Size	Task/TaskStore.hpp	/^  size_t Size() const {$/;"	f	class:TaskStore
Skip	IO/CSVLine.cpp	/^CSVLine::Skip()$/;"	f	class:CSVLine
Skip	IO/CSVLine.hpp	/^  void Skip(unsigned n) {$/;"	f	class:CSVLine
Skip	IO/FileReader.cxx	/^FileReader::Skip(off_t offset)$/;"	f	class:FileReader
Skip	OS/Args.hpp	/^  void Skip() {$/;"	f	class:Args
Skip	Util/StringParser.hxx	/^	void Skip(size_t n=1) {$/;"	f	class:StringParser
SkipMarkerSegment	Terrain/Loader.cpp	/^TerrainLoader::SkipMarkerSegment(long file_offset) const$/;"	f	class:TerrainLoader
SkipMatch	Util/StringParser.hxx	/^	bool SkipMatch(const_pointer value, size_t size) {$/;"	f	class:StringParser
SkipMatch	Util/StringParser.hxx	/^	bool SkipMatch(value_type value) {$/;"	f	class:StringParser
SkipMatchIgnoreCase	Util/StringParser.hxx	/^	bool SkipMatchIgnoreCase(const_pointer value, size_t size) {$/;"	f	class:StringParser
SkipWhitespace	Util/StringParser.hxx	/^	bool SkipWhitespace() {$/;"	f	class:StringParser
SkipWord	Util/StringParser.hxx	/^	bool SkipWord() {$/;"	f	class:StringParser
SkyLinesNearTrafficEnabled	Profile/ProfileKeys.cpp	/^const char SkyLinesNearTrafficEnabled[] = "SkyLinesNearTrafficEnabled";$/;"	m	namespace:ProfileKeys	file:
SkyLinesRoaming	Profile/ProfileKeys.cpp	/^const char SkyLinesRoaming[] = "SkyLinesRoaming";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTracking	Cloud/Thermal.hpp	/^namespace SkyLinesTracking { struct Thermal; }$/;"	n
SkyLinesTracking	MapWindow/MapWindow.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Renderer/WaveRenderer.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Assemble.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Client.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/CloudSettings.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Data.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Export.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Glue.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Handler.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Import.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Key.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Protocol.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Queue.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Server.cpp	/^namespace SkyLinesTracking {$/;"	n	file:
SkyLinesTracking	Tracking/SkyLines/Server.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTracking	Tracking/SkyLines/Settings.hpp	/^namespace SkyLinesTracking {$/;"	n
SkyLinesTrackingEnabled	Profile/ProfileKeys.cpp	/^const char SkyLinesTrackingEnabled[] = "SkyLinesTrackingEnabled";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrackingInterval	Profile/ProfileKeys.cpp	/^const char SkyLinesTrackingInterval[] = "SkyLinesTrackingInterval";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrackingKey	Profile/ProfileKeys.cpp	/^const char SkyLinesTrackingKey[] = "SkyLinesTrackingKey";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrafficEnabled	Profile/ProfileKeys.cpp	/^const char SkyLinesTrafficEnabled[] = "SkyLinesTrafficEnabled";$/;"	m	namespace:ProfileKeys	file:
SkyLinesTrafficMapItem	MapWindow/Items/MapItem.hpp	/^  SkyLinesTrafficMapItem(uint32_t _id, uint32_t _time_of_day_ms,$/;"	f	struct:SkyLinesTrafficMapItem
SkyLinesTrafficMapItem	MapWindow/Items/MapItem.hpp	/^struct SkyLinesTrafficMapItem : public MapItem$/;"	s
SkyLinesTrafficMapMode	Profile/ProfileKeys.cpp	/^const char SkyLinesTrafficMapMode[] = "SkyLinesTrafficMapMode";$/;"	m	namespace:ProfileKeys	file:
Sleep	OS/Sleep.h	/^Sleep(unsigned ms)$/;"	f
SliceAllocator	Util/SliceAllocator.hxx	/^	SliceAllocator():head(nullptr) {}$/;"	f	class:SliceAllocator
SliceAllocator	Util/SliceAllocator.hxx	/^	SliceAllocator(const SliceAllocator &):head(nullptr) {}$/;"	f	class:SliceAllocator
SliceAllocator	Util/SliceAllocator.hxx	/^class SliceAllocator {$/;"	c
SlopeShading	Profile/ProfileKeys.cpp	/^const char SlopeShading[] = "SlopeShading";$/;"	m	namespace:ProfileKeys	file:
SlopeShading	Terrain/TerrainSettings.hpp	/^enum class SlopeShading: uint8_t {$/;"	c
SlopeShadingType	Profile/ProfileKeys.cpp	/^const char SlopeShadingType[] = "SlopeShadingType";$/;"	m	namespace:ProfileKeys	file:
Slot	Math/XYDataStore.hpp	/^    Slot(double _x, double _y, double _weight)$/;"	f	struct:XYDataStore::Slot
Slot	Math/XYDataStore.hpp	/^  struct Slot {$/;"	s	class:XYDataStore
SlotAltitude	Computer/Wind/Store.cpp	/^WindStore::SlotAltitude(const MoreData &info, DerivedInfo &derived)$/;"	f	class:WindStore
SlotMeasurement	Computer/Wind/Store.cpp	/^WindStore::SlotMeasurement(const MoreData &info,$/;"	f	class:WindStore
SmallScale	Screen/Layout.hpp	/^  SmallScale(int x)$/;"	f	namespace:Layout
SmallTrafficWindow	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::SmallTrafficWindow(ContainerWindow &parent,$/;"	f	class:SmallTrafficWindow
SmallTrafficWindow	Gauge/GaugeFLARM.cpp	/^class SmallTrafficWindow : public FlarmTrafficWindow {$/;"	c	file:
SmartTaskAdvance	Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::SmartTaskAdvance()$/;"	f	class:SmartTaskAdvance
Smax	Engine/GlideSolvers/GlidePolar.hpp	/^  double Smax;$/;"	m	class:GlidePolar
Smin	Engine/GlideSolvers/GlidePolar.hpp	/^  double Smin;$/;"	m	class:GlidePolar
SnailTrail	Profile/ProfileKeys.cpp	/^const char SnailTrail[] = "SnailTrail";$/;"	m	namespace:ProfileKeys	file:
SnailType	Profile/ProfileKeys.cpp	/^const char SnailType[] = "SnailType";$/;"	m	namespace:ProfileKeys	file:
SnailWidthScale	Profile/ProfileKeys.cpp	/^const char SnailWidthScale[] = "SnailWidthScale";$/;"	m	namespace:ProfileKeys	file:
SocketAddress	Net/SocketAddress.hxx	/^class SocketAddress {$/;"	c
SocketDescriptor	Net/SocketDescriptor.hxx	/^class SocketDescriptor : protected FileDescriptor {$/;"	c
SolidContainerWindow	Screen/SolidContainerWindow.hpp	/^class SolidContainerWindow : public ContainerWindow {$/;"	c
SolidWidget	Widget/SolidWidget.hpp	/^  explicit SolidWidget(Widget *_widget):widget(_widget) {}$/;"	f	class:SolidWidget
SolidWidget	Widget/SolidWidget.hpp	/^class SolidWidget : public WindowWidget {$/;"	c
SolutionExists	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionExists(double distance_max,$/;"	f	class:AirspaceAircraftPerformance
SolutionGeneral	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionGeneral(double distance, double dh) const$/;"	f	class:AirspaceAircraftPerformance
SolutionHorizontal	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionHorizontal(double distance_min,$/;"	f	class:AirspaceAircraftPerformance
SolutionVertical	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^AirspaceAircraftPerformance::SolutionVertical(double distance, double altitude,$/;"	f	class:AirspaceAircraftPerformance
Solve	Computer/ContestComputer.cpp	/^ContestComputer::Solve(const ContestSettings &settings,$/;"	f	class:ContestComputer
Solve	Engine/GlideSolvers/GlideState.cpp	/^  double Solve() const {$/;"	f	class:AverageSpeedSolver
Solve	Engine/GlideSolvers/MacCready.cpp	/^MacCready::Solve(const GlideSettings &settings, const GlidePolar &glide_polar,$/;"	f	class:MacCready
Solve	Engine/GlideSolvers/MacCready.cpp	/^MacCready::Solve(const GlideState &task) const$/;"	f	class:MacCready
Solve	Engine/Route/ReachFan.cpp	/^ReachFan::Solve(const AGeoPoint origin, const RoutePolars &rpolars,$/;"	f	class:ReachFan
Solve	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::Solve(const AGeoPoint &origin, const AGeoPoint &destination,$/;"	f	class:RoutePlanner
Solve	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::Solve(const AGeoPoint &origin,$/;"	f	class:RoutePlannerGlue
SolveCruise	Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveCruise(const GlideState &task) const$/;"	f	class:MacCready
SolveExhaustive	Computer/ContestComputer.cpp	/^ContestComputer::SolveExhaustive(const ContestSettings &settings,$/;"	f	class:ContestComputer
SolveExhaustive	Engine/Contest/ContestManager.hpp	/^  bool SolveExhaustive() {$/;"	f	class:ContestManager
SolveExhaustive	Engine/Contest/ContestManager.hpp	/^  bool SolveExhaustive(unsigned max_iterations, unsigned max_tree_size) {$/;"	f	class:ContestManager
SolveGlide	Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveGlide(const GlideState &task, const double v_set,$/;"	f	class:MacCready
SolvePoint	Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::SolvePoint(const TaskPoint &tp,$/;"	f	class:TaskMacCreadyRemaining
SolvePoint	Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::SolvePoint(const TaskPoint &tp,$/;"	f	class:TaskMacCreadyTotal
SolvePoint	Engine/Task/Solvers/TaskMacCreadyTravelled.cpp	/^TaskMacCreadyTravelled::SolvePoint(const TaskPoint &tp,$/;"	f	class:TaskMacCreadyTravelled
SolveReach	Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SolveReach(const AGeoPoint &origin,$/;"	f	class:ProtectedRoutePlanner
SolveReach	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::SolveReach(const AGeoPoint &origin,$/;"	f	class:RoutePlannerGlue
SolveReachTerrain	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::SolveReachTerrain(const AGeoPoint &origin,$/;"	f	class:RoutePlanner
SolveReachWorking	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::SolveReachWorking(const AGeoPoint &origin,$/;"	f	class:RoutePlanner
SolveRoute	Task/ProtectedRoutePlanner.cpp	/^ProtectedRoutePlanner::SolveRoute(const AGeoPoint &dest,$/;"	f	class:ProtectedRoutePlanner
SolveSink	Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveSink(const GlideSettings &settings,$/;"	f	class:MacCready
SolveSink	Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveSink(const GlideState &task, const double sink_rate) const$/;"	f	class:MacCready
SolveStraight	Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveStraight(const GlideState &task) const$/;"	f	class:MacCready
SolveTask	Engine/Route/RoutePolar.cpp	/^RoutePolar::SolveTask(const GlideSettings &settings,$/;"	f	class:RoutePolar
SolveVertical	Engine/GlideSolvers/MacCready.cpp	/^MacCready::SolveVertical(const GlideState &task) const$/;"	f	class:MacCready
SolverResult	Engine/PathSolvers/SolverResult.hpp	/^enum class SolverResult {$/;"	c
SoonestAirspace	Engine/Airspace/SoonestAirspace.cpp	/^  SoonestAirspace(const AbstractAirspace &_airspace,$/;"	f	struct:SoonestAirspace
SoonestAirspace	Engine/Airspace/SoonestAirspace.cpp	/^struct SoonestAirspace {$/;"	s	file:
Sort	Form/DataField/ComboList.cpp	/^ComboList::Sort()$/;"	f	class:ComboList
Sort	Form/DataField/Enum.cpp	/^DataFieldEnum::Sort(unsigned startindex)$/;"	f	class:DataFieldEnum
Sort	Form/DataField/File.cpp	/^FileDataField::Sort()$/;"	f	class:FileDataField
Sort	Geo/Flat/FlatGeoPoint.hpp	/^  bool Sort(const AFlatGeoPoint &sp) const {$/;"	f	struct:AFlatGeoPoint
Sort	Geo/Flat/FlatGeoPoint.hpp	/^  bool Sort(const FlatGeoPoint& sp) const {$/;"	f	struct:FlatGeoPoint
Sort	Geo/GeoPoint.cpp	/^GeoPoint::Sort(const GeoPoint &sp) const$/;"	f	class:GeoPoint
Sort	Geo/SearchPoint.hpp	/^  bool Sort(const SearchPoint &other) const {$/;"	f	class:SearchPoint
Sort	MapWindow/Items/List.cpp	/^MapItemList::Sort()$/;"	f	class:MapItemList
Sort	Renderer/AirspaceLabelList.cpp	/^AirspaceLabelList::Sort(const AirspaceWarningConfig &config)$/;"	f	class:AirspaceLabelList
Sort	Renderer/WaypointLabelList.cpp	/^WaypointLabelList::Sort()$/;"	f	class:WaypointLabelList
SortByDistance	Engine/Airspace/AirspaceSorter.cpp	/^SortByDistance(AirspaceSelectInfoVector &vec, const GeoPoint &location,$/;"	f	file:
SortByDistance	Waypoint/WaypointList.cpp	/^void WaypointList::SortByDistance(const GeoPoint &location) {$/;"	f	class:WaypointList
SortByName	Engine/Airspace/AirspaceSorter.cpp	/^SortByName(AirspaceSelectInfoVector &vec)$/;"	f	file:
SortHighest	Engine/Airspace/AirspaceAltitude.hpp	/^  static bool SortHighest(const AirspaceAltitude &a, const AirspaceAltitude &b) {$/;"	f	struct:AirspaceAltitude
SoundAudioVario	Profile/ProfileKeys.cpp	/^const char SoundAudioVario[] = "AudioVario2";$/;"	m	namespace:ProfileKeys	file:
SoundDeadband	Profile/ProfileKeys.cpp	/^const char SoundDeadband[] = "SoundDeadband";$/;"	m	namespace:ProfileKeys	file:
SoundModes	Profile/ProfileKeys.cpp	/^const char SoundModes[] = "SoundModes";$/;"	m	namespace:ProfileKeys	file:
SoundSettings	Audio/Settings.hpp	/^struct SoundSettings {$/;"	s
SoundTask	Profile/ProfileKeys.cpp	/^const char SoundTask[] = "SoundTask";$/;"	m	namespace:ProfileKeys	file:
SoundUtil	Android/SoundUtil.cpp	/^namespace SoundUtil {$/;"	n	file:
SoundUtil	Android/SoundUtil.hpp	/^namespace SoundUtil {$/;"	n
SoundVolume	Profile/ProfileKeys.cpp	/^const char SoundVolume[] = "SoundVolume";$/;"	m	namespace:ProfileKeys	file:
Source	Screen/OpenGL/Program.hpp	/^  void Source(const char *_source) {$/;"	f	class:GLShader
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PixelTraits SourcePixelTraits;$/;"	t	struct:ConditionalWritePixel
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PixelTraits SourcePixelTraits;$/;"	t	struct:PixelIntegerAdapter
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef PixelTraits SourcePixelTraits;$/;"	t	struct:PixelPerChannelAdapter
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef SPT SourcePixelTraits;$/;"	t	struct:PixelColoredAlpha
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef SPT SourcePixelTraits;$/;"	t	struct:PixelOpaqueAlpha
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef SPT SourcePixelTraits;$/;"	t	struct:PixelOpaqueText
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename Operation::SourcePixelTraits SourcePixelTraits;$/;"	t	struct:BinaryWritePixel
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename Operation::SourcePixelTraits SourcePixelTraits;$/;"	t	struct:UnaryWritePixel
SourcePixelTraits	Screen/Memory/PixelOperations.hpp	/^  typedef typename WritePixelOperation::SourcePixelTraits SourcePixelTraits;$/;"	t	struct:PerPixelOperations
SpaceDiagonal	Math/Util.hpp	/^SpaceDiagonal(double a, double b, double c)$/;"	f
Speed	Dialogs/Settings/WindSettingsPanel.hpp	/^    Speed,$/;"	e	enum:final::ControlIndex
SpeedState	Engine/Navigation/Aircraft.hpp	/^struct SpeedState $/;"	s
SpeedToFly	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SpeedToFly(const AircraftState &state,$/;"	f	class:GlidePolar
SpeedToFly	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::SpeedToFly(const double stf_sink_rate, const double head_wind) const$/;"	f	class:GlidePolar
SpeedUnit	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    SpeedUnit,$/;"	e	enum:final::Controls
SpeedUnitsValue	Profile/ProfileKeys.cpp	/^const char SpeedUnitsValue[] = "SpeedUnit";$/;"	m	namespace:ProfileKeys	file:
SpeedUp	Form/DataField/Float.cpp	/^DataFieldFloat::SpeedUp(bool keyup)$/;"	f	class:DataFieldFloat
SpeedUp	Form/DataField/Integer.cpp	/^DataFieldInteger::SpeedUp(bool keyup)$/;"	f	class:DataFieldInteger
SpeedUp	Form/DataField/Time.cpp	/^DataFieldTime::SpeedUp(bool key_up)$/;"	f	class:DataFieldTime
SpeedVector	Geo/SpeedVector.hpp	/^  SpeedVector(Angle _bearing, double _norm):bearing(_bearing), norm(_norm) {}$/;"	f	struct:SpeedVector
SpeedVector	Geo/SpeedVector.hpp	/^  SpeedVector(double x, double y)$/;"	f	struct:SpeedVector
SpeedVector	Geo/SpeedVector.hpp	/^struct SpeedVector {$/;"	s
Split	Util/RadixTree.hpp	/^    void Split(size_t length) {$/;"	f	struct:RadixTree::Node
SplitB2Fix	Device/Driver/IMI/Protocol/IGC.cpp	/^SplitB2Fix(const IMI::FixB2 *fixB2, const IMI::FixB *fixFull,$/;"	f	file:
SplitRow	Dialogs/Task/TargetDialog.cpp	/^SplitRow(PixelRect &left)$/;"	f	file:
Square	Math/Util.hpp	/^Square(T a)$/;"	f
SquareDistanceTo	Geo/Flat/FlatBoundingBox.cpp	/^FlatBoundingBox::SquareDistanceTo(FlatGeoPoint p) const$/;"	f	class:FlatBoundingBox
SquareDistanceTo	Math/Line2D.hpp	/^  constexpr product_type SquareDistanceTo(Point p) const {$/;"	f	struct:Line2D
StackIndex	Lua/Util.hxx	/^struct StackIndex {$/;"	s	namespace:Lua
Standard	Atmosphere/Pressure.hpp	/^  AtmosphericPressure Standard() {$/;"	f	class:AtmosphericPressure
StandbyThread	Thread/StandbyThread.cpp	/^StandbyThread::StandbyThread(const char *_name)$/;"	f	class:StandbyThread
StandbyThread	Thread/StandbyThread.hpp	/^class StandbyThread : private Thread {$/;"	c
Start	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::Start(PCMDataSource &_source)$/;"	f	class:ALSAPCMPlayer
Start	Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::Start(PCMSynthesiser &_source)$/;"	f	class:AndroidPCMPlayer
Start	Audio/MixerPCMPlayer.cpp	/^MixerPCMPlayer::Start(PCMDataSource &_source)$/;"	f	class:MixerPCMPlayer
Start	Audio/PCMMixer.cpp	/^PCMMixer::Start(PCMDataSource &source)$/;"	f	class:PCMMixer
Start	Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::Start(PCMDataSource &_source)$/;"	f	class:SDLPCMPlayer
Start	CalculationThread.hpp	/^  bool Start(bool suspended=false) {$/;"	f	class:final
Start	Device/Driver/LX/LXN.hpp	/^  struct Start {$/;"	s	namespace:LXN
Start	Engine/ThermalBand/ThermalEncounterBand.cpp	/^ThermalEncounterBand::Start(const double time,$/;"	f	class:ThermalEncounterBand
Start	IO/Async/AsioThread.cpp	/^AsioThread::Start()$/;"	f	class:AsioThread
Start	Job/Async.cpp	/^AsyncJobRunner::Start(Job *_job, OperationEnvironment &_env, Notify *_notify)$/;"	f	class:AsyncJobRunner
Start	Job/Thread.cpp	/^JobThread::Start()$/;"	f	class:JobThread
Start	Logger/NMEALogger.cpp	/^NMEALogger::Start()$/;"	f	class:NMEALogger
Start	MergeThread.hpp	/^  bool Start(bool suspended=false) {$/;"	f	class:final
Start	OS/Process.cpp	/^Start(const char *const*argv)$/;"	f
Start	OS/Process.hpp	/^Start(const char *path, Args... args)$/;"	f
Start	Replay/AircraftSim.cpp	/^AircraftSim::Start(const GeoPoint& location_start,$/;"	f	class:AircraftSim
Start	Replay/DemoReplay.cpp	/^DemoReplay::Start(const TaskAccessor& task, const GeoPoint& default_location)$/;"	f	class:DemoReplay
Start	Replay/Replay.cpp	/^Replay::Start(Path _path)$/;"	f	class:Replay
Start	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::Start(const TaskAccessor& task)$/;"	f	class:TaskAutoPilot
Start	Thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::Start(bool suspended)$/;"	f	class:RecursivelySuspensibleThread
Start	Thread/StoppableThread.hpp	/^  bool Start() {$/;"	f	class:StoppableThread
Start	UIUtil/GestureManager.cpp	/^GestureManager::Start(PixelPoint p, int _threshold)$/;"	f	class:GestureManager
Start	UIUtil/TrackingGestureManager.cpp	/^TrackingGestureManager::Start(PixelPoint p, int threshold)$/;"	f	class:TrackingGestureManager
StartConstraints	Engine/Task/Ordered/StartConstraints.hpp	/^struct StartConstraints {$/;"	s
StartDeclaration	IGC/IGCWriter.cpp	/^IGCWriter::StartDeclaration(const BrokenDateTime &date_time,$/;"	f	class:IGCWriter
StartEventHandling	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::StartEventHandling()$/;"	f	class:ALSAPCMPlayer
StartFile	Lua/StartFile.cpp	/^Lua::StartFile(Path path)$/;"	f	class:Lua
StartHeight	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartHeight,$/;"	e	enum:Controls	file:
StartHeightRef	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartHeightRef,$/;"	e	enum:ControlIndex	file:
StartHeightRef	Profile/ProfileKeys.cpp	/^const char StartHeightRef[] = "StartHeightRef";$/;"	m	namespace:ProfileKeys	file:
StartLeScan	Android/BluetoothHelper.cpp	/^BluetoothHelper::StartLeScan(JNIEnv *env, LeScanCallback &_cb)$/;"	f	class:BluetoothHelper
StartLogger	Dialogs/Device/ManageCAI302Dialog.cpp	/^    StartLogger,$/;"	e	enum:final::Controls	file:
StartLogger	Logger/LoggerImpl.cpp	/^LoggerImpl::StartLogger(const NMEAInfo &gps_info,$/;"	f	class:LoggerImpl
StartLogging	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::StartLogging(OperationEnvironment &env)$/;"	f	class:CAI302Device
StartLogging	Device/Driver/CAI302/Protocol.cpp	/^CAI302::StartLogging(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
StartMaxHeight	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxHeight,$/;"	e	enum:ControlIndex	file:
StartMaxHeight	Profile/ProfileKeys.cpp	/^const char StartMaxHeight[] = "StartMaxHeight";$/;"	m	namespace:ProfileKeys	file:
StartMaxHeightMargin	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxHeightMargin,$/;"	e	enum:ControlIndex	file:
StartMaxHeightMargin	Profile/ProfileKeys.cpp	/^const char StartMaxHeightMargin[] = "StartMaxHeightMargin";$/;"	m	namespace:ProfileKeys	file:
StartMaxSpeed	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxSpeed,$/;"	e	enum:ControlIndex	file:
StartMaxSpeed	Profile/ProfileKeys.cpp	/^const char StartMaxSpeed[] = "StartMaxSpeed";$/;"	m	namespace:ProfileKeys	file:
StartMaxSpeedMargin	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  StartMaxSpeedMargin,$/;"	e	enum:ControlIndex	file:
StartMaxSpeedMargin	Profile/ProfileKeys.cpp	/^const char StartMaxSpeedMargin[] = "StartMaxSpeedMargin";$/;"	m	namespace:ProfileKeys	file:
StartPoint	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartPoint,$/;"	e	enum:Controls	file:
StartPoint	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::StartPoint(ObservationZonePoint *_oz,$/;"	f	class:StartPoint
StartRadius	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  StartRadius,$/;"	e	enum:ControlIndex	file:
StartRadius	Profile/ProfileKeys.cpp	/^const char StartRadius[] = "StartRadius";$/;"	m	namespace:ProfileKeys	file:
StartRxThread	Device/Port/BufferedPort.cpp	/^BufferedPort::StartRxThread()$/;"	f	class:BufferedPort
StartRxThread	Device/Port/DumpPort.cpp	/^DumpPort::StartRxThread()$/;"	f	class:DumpPort
StartRxThread	Device/Port/K6BtPort.cpp	/^K6BtPort::StartRxThread(void)$/;"	f	class:K6BtPort
StartRxThread	Device/Port/NullPort.cpp	/^NullPort::StartRxThread()$/;"	f	class:NullPort
StartSpeed	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartSpeed,$/;"	e	enum:Controls	file:
StartStats	Engine/Task/Stats/StartStats.hpp	/^struct StartStats {$/;"	s
StartTask	Computer/GlideComputerBlackboard.cpp	/^GlideComputerBlackboard::StartTask()$/;"	f	class:GlideComputerBlackboard
StartTask	Computer/LogComputer.cpp	/^LogComputer::StartTask(const NMEAInfo &basic)$/;"	f	class:LogComputer
StartTask	Computer/StatsComputer.cpp	/^StatsComputer::StartTask(const NMEAInfo &basic)$/;"	f	class:StatsComputer
StartTask	FlightStatistics.cpp	/^FlightStatistics::StartTask()$/;"	f	class:FlightStatistics
StartTile	Terrain/Loader.cpp	/^TerrainLoader::StartTile(unsigned index)$/;"	f	class:TerrainLoader
StartTile	Terrain/RasterTileCache.hpp	/^  void StartTile(unsigned index) {$/;"	f	class:RasterTileCache
StartTime	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  StartTime,$/;"	e	enum:Controls	file:
StartTracking	Tracking/LiveTrack24.cpp	/^LiveTrack24::StartTracking(SessionID session, const TCHAR *username,$/;"	f	class:LiveTrack24
StartType	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  StartType,$/;"	e	enum:ControlIndex	file:
StartType	Profile/ProfileKeys.cpp	/^const char StartType[] = "StartType";$/;"	m	namespace:ProfileKeys	file:
StartsWith	Util/StaticString.hxx	/^	bool StartsWith(const_pointer prefix) const {$/;"	f	class:StaticStringBase
Startup	Startup.cpp	/^Startup()$/;"	f
StartupLogFreeRamAndStorage	UtilsSystem.cpp	/^StartupLogFreeRamAndStorage()$/;"	f
StartupWidget	Dialogs/StartupDialog.cpp	/^  StartupWidget(const DialogLook &look, ActionListener &_action_listener,$/;"	f	class:final
State	Engine/Task/Ordered/TaskAdvance.hpp	/^  enum State {$/;"	g	class:TaskAdvance
State	Util/MD5.hpp	/^  struct State {$/;"	s	class:MD5
StateChanged	Device/Port/Port.cpp	/^Port::StateChanged()$/;"	f	class:Port
StateClock	Computer/StateClock.hpp	/^class StateClock {$/;"	c
StateDeleter	Lua/Ptr.hpp	/^struct StateDeleter {$/;"	s	namespace:Lua
StateLook	Look/ButtonLook.hpp	/^  struct StateLook {$/;"	s	struct:ButtonLook
StateLook	Look/CheckBoxLook.hpp	/^  struct StateLook {$/;"	s	struct:CheckBoxLook
StaticArray	Util/StaticArray.hxx	/^	StaticArray(): TrivialArray<T, max>(0) {}$/;"	f	class:StaticArray
StaticArray	Util/StaticArray.hxx	/^	StaticArray(I _begin, I _end)$/;"	f	class:StaticArray
StaticArray	Util/StaticArray.hxx	/^	StaticArray(std::initializer_list<U> init):TrivialArray<T, max>(init) {}$/;"	f	class:StaticArray
StaticArray	Util/StaticArray.hxx	/^	StaticArray(typename TrivialArray<T, max>::size_type _size, const T &value)$/;"	f	class:StaticArray
StaticArray	Util/StaticArray.hxx	/^class StaticArray: public TrivialArray<T, max> {$/;"	c
StaticEnumChoice	Form/DataField/Enum.hpp	/^struct StaticEnumChoice {$/;"	s
StaticFifoBuffer	Util/StaticFifoBuffer.hxx	/^class StaticFifoBuffer {$/;"	c
StaticParameter	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  struct StaticParameter {$/;"	s	class:VegaParametersWidget
StaticPressureToPressureAltitude	Atmosphere/Pressure.cpp	/^AtmosphericPressure::StaticPressureToPressureAltitude(const AtmosphericPressure ps)$/;"	f	class:AtmosphericPressure
StaticPressureToQNHAltitude	Atmosphere/Pressure.cpp	/^AtmosphericPressure::StaticPressureToQNHAltitude(const AtmosphericPressure ps) const$/;"	f	class:AtmosphericPressure
StaticRoute	Engine/Route/Route.hpp	/^struct StaticRoute : public TrivialArray<Route::value_type, 64u> {$/;"	s
StaticSocketAddress	Net/StaticSocketAddress.hxx	/^class StaticSocketAddress {$/;"	c
StaticString	Util/StaticString.hxx	/^	explicit StaticString(const_pointer value):Base(value) {}$/;"	f	class:StaticString
StaticString	Util/StaticString.hxx	/^class StaticString: public StaticStringBase<wchar_t, max>$/;"	c
StaticString	Util/StaticString.hxx	380;"	d
StaticStringBase	Util/StaticString.hxx	/^	explicit StaticStringBase(const_pointer value) {$/;"	f	class:StaticStringBase
StaticStringBase	Util/StaticString.hxx	/^class StaticStringBase : public BasicStringBuffer<T, max> {$/;"	c
StationContainer	Weather/NOAAStore.hpp	/^  typedef std::list<Item> StationContainer;$/;"	t	class:NOAAStore
Stationary	Computer/FlyingComputer.cpp	/^FlyingComputer::Stationary(FlyingState &state, double time, double dt,$/;"	f	class:FlyingComputer
StatsComputer	Computer/StatsComputer.hpp	/^class StatsComputer {$/;"	c
StatsValid	Engine/Task/TaskManager.hpp	/^  bool StatsValid() const {$/;"	f	class:TaskManager
Status	Android/Battery.cpp	/^    externalstatus Status = UNKNOWN;$/;"	m	namespace:Power::External	file:
Status	Hardware/Battery.cpp	/^    batterystatus Status = UNKNOWN;$/;"	m	namespace:Power::Battery	file:
Status	Hardware/Battery.cpp	/^    externalstatus Status = UNKNOWN;$/;"	m	namespace:Power::External	file:
Status	Kobo/WPASupplicant.cpp	/^WPASupplicant::Status(WifiStatus &status)$/;"	f	class:WPASupplicant
Status	XML/Parser.cpp	/^  enum Status {$/;"	g	namespace:XML	file:
StatusMessage	StatusMessage.hpp	/^struct StatusMessage {$/;"	s
StatusPanel	Dialogs/StatusPanels/StatusPanel.hpp	/^  StatusPanel(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:StatusPanel
StatusPanel	Dialogs/StatusPanels/StatusPanel.hpp	/^class StatusPanel : public RowFormWidget {$/;"	c
Steal	Util/LightString.hxx	/^	pointer Steal() {$/;"	f	class:LightString
Steal	Widget/ManagedWidget.hpp	/^  Widget *Steal() {$/;"	f	class:ManagedWidget
StealWidget	Dialogs/WidgetDialog.hpp	/^  Widget *StealWidget() {$/;"	f	class:WidgetDialog
StencilMapCanvas	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::StencilMapCanvas(Canvas &_buffer, Canvas &_stencil,$/;"	f	class:StencilMapCanvas
StencilMapCanvas	MapWindow/StencilMapCanvas.cpp	/^StencilMapCanvas::StencilMapCanvas(const StencilMapCanvas &other)$/;"	f	class:StencilMapCanvas
StencilMapCanvas	MapWindow/StencilMapCanvas.hpp	/^class StencilMapCanvas$/;"	c
Step	ProgressGlue.cpp	/^ProgressGlue::Step()$/;"	f	class:ProgressGlue
Step	ProgressWindow.cpp	/^ProgressWindow::Step()$/;"	f	class:ProgressWindow
Step	Screen/ProgressBar.cpp	/^ProgressBar::Step()$/;"	f	class:ProgressBar
StepMapScale	Projection/MapWindowProjection.cpp	/^MapWindowProjection::StepMapScale(const double scale, int Step) const$/;"	f	class:MapWindowProjection
Stop	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::Stop()$/;"	f	class:ALSAPCMPlayer
Stop	Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::Stop()$/;"	f	class:AndroidPCMPlayer
Stop	Audio/MixerPCMPlayer.cpp	/^MixerPCMPlayer::Stop()$/;"	f	class:MixerPCMPlayer
Stop	Audio/PCMMixer.cpp	/^PCMMixer::Stop(PCMDataSource &source)$/;"	f	class:PCMMixer
Stop	Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::Stop()$/;"	f	class:SDLPCMPlayer
Stop	IO/Async/AsioThread.cpp	/^AsioThread::Stop()$/;"	f	class:AsioThread
Stop	Replay/Replay.cpp	/^Replay::Stop()$/;"	f	class:Replay
Stop	Thread/StandbyThread.hpp	/^  void Stop() {$/;"	f	class:StandbyThread
StopAllBackground	Lua/Background.cpp	/^Lua::StopAllBackground()$/;"	f	class:Lua
StopAsync	Net/HTTP/DownloadManager.cpp	/^  void StopAsync() {$/;"	f	class:final
StopAsync	Thread/StandbyThread.cpp	/^StandbyThread::StopAsync()$/;"	f	class:StandbyThread
StopAsync	Tracking/TrackingGlue.cpp	/^TrackingGlue::StopAsync()$/;"	f	class:TrackingGlue
StopDragging	Gauge/BigThermalAssistantWindow.hpp	/^  void StopDragging() {$/;"	f	class:BigThermalAssistantWindow
StopDragging	Gauge/BigTrafficWidget.cpp	/^  void StopDragging() {$/;"	f	class:FlarmTrafficControl
StopDragging	MainWindow.cpp	/^MainWindow::StopDragging()$/;"	f	class:MainWindow
StopEventHandling	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::StopEventHandling()$/;"	f	class:ALSAPCMPlayer
StopLeScan	Android/BluetoothHelper.cpp	/^BluetoothHelper::StopLeScan(JNIEnv *env, jobject cb)$/;"	f	class:BluetoothHelper
StopLogger	Dialogs/Device/ManageCAI302Dialog.cpp	/^    StopLogger,$/;"	e	enum:final::Controls	file:
StopLogger	Logger/LoggerImpl.cpp	/^LoggerImpl::StopLogger(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
StopLogging	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::StopLogging(OperationEnvironment &env)$/;"	f	class:CAI302Device
StopLogging	Device/Driver/CAI302/Protocol.cpp	/^CAI302::StopLogging(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
StopReplay	Blackboard/DeviceBlackboard.cpp	/^void DeviceBlackboard::StopReplay() {$/;"	f	class:DeviceBlackboard
StopRxThread	Device/Port/BufferedPort.cpp	/^BufferedPort::StopRxThread()$/;"	f	class:BufferedPort
StopRxThread	Device/Port/DumpPort.cpp	/^DumpPort::StopRxThread()$/;"	f	class:DumpPort
StopRxThread	Device/Port/K6BtPort.cpp	/^K6BtPort::StopRxThread()$/;"	f	class:K6BtPort
StopRxThread	Device/Port/NullPort.cpp	/^NullPort::StopRxThread()$/;"	f	class:NullPort
StoppableThread	Thread/StoppableThread.hpp	/^  StoppableThread(const char *_name):Thread(_name) {}$/;"	f	class:StoppableThread
StoppableThread	Thread/StoppableThread.hpp	/^class StoppableThread : public Thread {$/;"	c
Storage	Screen/OpenGL/RenderBuffer.hpp	/^  static void Storage(GLenum internalformat,$/;"	f	class:GLRenderBuffer
Store	Units/UnitsStore.hpp	/^  namespace Store$/;"	n	namespace:Units
StoreAdd	Math/XYDataStore.cpp	/^XYDataStore::StoreAdd(double x, double y, double weight)$/;"	f	class:XYDataStore
StoreRemove	Math/XYDataStore.cpp	/^XYDataStore::StoreRemove(const unsigned i)$/;"	f	class:XYDataStore
StoreReset	Math/XYDataStore.cpp	/^XYDataStore::StoreReset()$/;"	f	class:XYDataStore
Stretch	Screen/GDI/Canvas.cpp	/^Canvas::Stretch(const Bitmap &src)$/;"	f	class:Canvas
Stretch	Screen/GDI/Canvas.cpp	/^Canvas::Stretch(const Canvas &src,$/;"	f	class:Canvas
Stretch	Screen/GDI/Canvas.cpp	/^Canvas::Stretch(int dest_x, int dest_y,$/;"	f	class:Canvas
Stretch	Screen/GDI/Canvas.hpp	/^  void Stretch(const Bitmap &src,$/;"	f	class:Canvas
Stretch	Screen/GDI/Canvas.hpp	/^  void Stretch(int dest_x, int dest_y,$/;"	f	class:Canvas
Stretch	Screen/Memory/Canvas.cpp	/^Canvas::Stretch(const Canvas &src,$/;"	f	class:Canvas
Stretch	Screen/Memory/Canvas.cpp	/^Canvas::Stretch(int dest_x, int dest_y,$/;"	f	class:Canvas
Stretch	Screen/Memory/Canvas.hpp	/^  void Stretch(ConstImageBuffer src) {$/;"	f	class:Canvas
Stretch	Screen/Memory/Canvas.hpp	/^  void Stretch(const Bitmap &src) {$/;"	f	class:Canvas
Stretch	Screen/Memory/Canvas.hpp	/^  void Stretch(int dest_x, int dest_y,$/;"	f	class:Canvas
Stretch	Screen/OpenGL/Canvas.cpp	/^Canvas::Stretch(int dest_x, int dest_y,$/;"	f	class:Canvas
Stretch	Screen/OpenGL/Canvas.hpp	/^  void Stretch(const Bitmap &src) {$/;"	f	class:Canvas
StretchMono	Screen/GDI/Canvas.cpp	/^Canvas::StretchMono(int dest_x, int dest_y,$/;"	f	class:Canvas
StretchMono	Screen/Memory/Canvas.cpp	/^Canvas::StretchMono(int dest_x, int dest_y,$/;"	f	class:Canvas
StretchMono	Screen/OpenGL/Canvas.cpp	/^Canvas::StretchMono(int dest_x, int dest_y,$/;"	f	class:Canvas
StretchNot	Screen/GDI/Canvas.cpp	/^Canvas::StretchNot(const Bitmap &src)$/;"	f	class:Canvas
StretchNot	Screen/Memory/Canvas.cpp	/^Canvas::StretchNot(const Bitmap &_src)$/;"	f	class:Canvas
StretchNot	Screen/OpenGL/Canvas.cpp	/^Canvas::StretchNot(const Bitmap &src)$/;"	f	class:Canvas
StretchTo	Screen/GDI/RawBitmap.cpp	/^RawBitmap::StretchTo(unsigned width, unsigned height,$/;"	f	class:RawBitmap
StretchTo	Screen/Memory/RawBitmap.cpp	/^RawBitmap::StretchTo(unsigned width, unsigned height,$/;"	f	class:RawBitmap
StretchTo	Screen/OpenGL/RawBitmap.cpp	/^RawBitmap::StretchTo(unsigned width, unsigned height,$/;"	f	class:RawBitmap
StretchTransparentWhite	Screen/Memory/Canvas.cpp	/^Canvas::StretchTransparentWhite(int dest_x, int dest_y,$/;"	f	class:Canvas
String	Device/Driver/LX/LXN.hpp	/^  struct String {$/;"	s	namespace:LXN
String	Java/String.hxx	/^	class String : public LocalRef<jstring> {$/;"	c	namespace:Java
StringBuffer	Util/StringBuffer.hxx	/^class StringBuffer : public BasicStringBuffer<char, CAPACITY> {};$/;"	c
StringBuilder	Util/StringBuilder.hxx	/^	constexpr StringBuilder(pointer _p, pointer _end):p(_p), end(_end) {}$/;"	f	class:StringBuilder
StringBuilder	Util/StringBuilder.hxx	/^	constexpr StringBuilder(pointer _p, size_type size)$/;"	f	class:StringBuilder
StringBuilder	Util/StringBuilder.hxx	/^class StringBuilder {$/;"	c
StringFormat	Util/StringFormat.hpp	/^StringFormat(char *buffer, size_t size, const char *fmt, Args&&... args)$/;"	f
StringFormat	Util/WStringFormat.hpp	/^StringFormat(wchar_t *buffer, size_t size, const wchar_t *fmt, Args&&... args)$/;"	f
StringFormatUnsafe	Util/StringFormat.hpp	/^StringFormatUnsafe(char *buffer, const char *fmt, Args&&... args)$/;"	f
StringFormatUnsafe	Util/WStringFormat.hpp	/^StringFormatUnsafe(wchar_t *buffer, const wchar_t *fmt, Args&&... args)$/;"	f
StringHash	Screen/Custom/Cache.cpp	/^  struct StringHash {$/;"	s	struct:TextCacheKey	file:
StringLength	Util/StringView.hxx	/^				_data != nullptr ? StringLength(_data) : 0) {}$/;"	f	struct:BasicStringView
StringParser	Util/StringParser.hxx	/^	constexpr explicit StringParser(const_pointer _p):p(_p) {}$/;"	f	class:StringParser
StringParser	Util/StringParser.hxx	/^class StringParser {$/;"	c
StringPointer	Util/StringPointer.hxx	/^class StringPointer {$/;"	c
StringToPortType	Profile/DeviceConfig.cpp	/^StringToPortType(const char *value, DeviceConfig::PortType &type)$/;"	f	file:
StringView	Util/IterableSplitString.hxx	/^	typedef BasicStringView<T> StringView;$/;"	t	class:BasicIterableSplitString
StringView	Util/StringView.hxx	/^struct StringView : BasicStringView<char> {$/;"	s
Strip	Util/StringParser.hxx	/^	void Strip() {$/;"	f	class:StringParser
Style	Look/ChartLook.hpp	/^  enum Style {$/;"	g	struct:ChartLook
Style	Screen/Pen.hpp	/^  enum Style {$/;"	g	class:Pen
Style	Task/TaskFileSeeYou.cpp	/^  enum Style {$/;"	g	struct:SeeYouTurnpointInformation	file:
SubCanvas	Screen/Memory/SubCanvas.cpp	/^SubCanvas::SubCanvas(Canvas &canvas, PixelPoint _offset, PixelSize _size)$/;"	f	class:SubCanvas
SubCanvas	Screen/OpenGL/SubCanvas.cpp	/^SubCanvas::SubCanvas(Canvas &canvas, PixelPoint _offset, PixelSize _size)$/;"	f	class:SubCanvas
SubCanvas	Screen/SubCanvas.hpp	/^class SubCanvas : public Canvas {$/;"	c
SubMenuButton	Form/TabMenuDisplay.hpp	/^  struct SubMenuButton {$/;"	s	class:final
Subtract	Computer/StateClock.hpp	/^  void Subtract(double delta) {$/;"	f	class:StateClock
Subtract	Engine/Route/ReachResult.hpp	/^  void Subtract(int delta) {$/;"	f	struct:ReachResult
Suggest	Util/RadixTree.hpp	/^    TCHAR *Suggest(const TCHAR *prefix, TCHAR *dest, size_t max_length) const {$/;"	f	struct:RadixTree::Node
Suggest	Util/RadixTree.hpp	/^  TCHAR *Suggest(const TCHAR *prefix, TCHAR *dest, size_t max_length) const {$/;"	f	class:RadixTree
SuggestNamePrefix	Engine/Waypoint/Waypoints.hpp	/^  TCHAR *SuggestNamePrefix(const TCHAR *prefix,$/;"	f	class:Waypoints
SuggestNormalisedPrefix	Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::SuggestNormalisedPrefix(const TCHAR *prefix,$/;"	f	class:Waypoints::WaypointNameTree
SunEphemeris	Math/SunEphemeris.cpp	/^namespace SunEphemeris$/;"	n	file:
SunEphemeris	Math/SunEphemeris.hpp	/^namespace SunEphemeris$/;"	n
SupportsBulkBaudRate	Device/Driver.hpp	/^  bool SupportsBulkBaudRate() const {$/;"	f	struct:DeviceRegister
SupportsBulkBaudRate	Dialogs/Device/DeviceEditWidget.cpp	/^SupportsBulkBaudRate(const DataField &df)$/;"	f	file:
SupportsCombolist	Form/DataField/Base.hpp	/^  bool SupportsCombolist() const {$/;"	f	class:DataField
SupportsNonPowerOfTwoTextures	Screen/OpenGL/Init.cpp	/^SupportsNonPowerOfTwoTextures()$/;"	f	file:
SupportsNonPowerOfTwoTexturesGLES	Screen/OpenGL/Init.cpp	/^SupportsNonPowerOfTwoTexturesGLES()$/;"	f	file:
SurfaceCreated	Screen/Android/Bitmap.cpp	/^Bitmap::SurfaceCreated()$/;"	f	class:Bitmap
SurfaceCreated	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::SurfaceCreated()$/;"	f	class:BufferCanvas
SurfaceCreated	Screen/OpenGL/RawBitmap.cpp	/^RawBitmap::SurfaceCreated()$/;"	f	class:RawBitmap
SurfaceCreated	Screen/OpenGL/Surface.cpp	/^SurfaceCreated()$/;"	f
SurfaceCreated	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::SurfaceCreated()$/;"	f	class:TopographyFileRenderer
SurfaceDestroyed	Screen/Android/Bitmap.cpp	/^Bitmap::SurfaceDestroyed()$/;"	f	class:Bitmap
SurfaceDestroyed	Screen/OpenGL/BufferCanvas.cpp	/^BufferCanvas::SurfaceDestroyed()$/;"	f	class:BufferCanvas
SurfaceDestroyed	Screen/OpenGL/RawBitmap.cpp	/^RawBitmap::SurfaceDestroyed()$/;"	f	class:RawBitmap
SurfaceDestroyed	Screen/OpenGL/Surface.cpp	/^SurfaceDestroyed()$/;"	f
SurfaceDestroyed	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::SurfaceDestroyed()$/;"	f	class:TopographyFileRenderer
Suspend	Thread/RecursivelySuspensibleThread.cpp	/^RecursivelySuspensibleThread::Suspend()$/;"	f	class:RecursivelySuspensibleThread
Suspend	Thread/WorkerThread.hpp	/^  void Suspend() {$/;"	f	class:WorkerThread
SuspendAllThreads	Protection.cpp	/^SuspendAllThreads()$/;"	f
SuspendAppendSaveWaypoint	Input/InputEventsActions.cpp	/^SuspendAppendSaveWaypoint(Waypoint &&wp)$/;"	f	file:
SuspendAppendWaypoint	Input/InputEventsActions.cpp	/^SuspendAppendWaypoint(Waypoint &&wp)$/;"	f	file:
SuspendThreads	MainWindow.cpp	/^MainWindow::SuspendThreads()$/;"	f	class:MainWindow
SuspendThreads	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::SuspendThreads()$/;"	f	class:GlueMapWindow
SuspensibleThread	Thread/SuspensibleThread.hpp	/^class SuspensibleThread : public Thread {$/;"	c
Swap	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Swap(const unsigned position, const bool auto_mutate)$/;"	f	class:AbstractTaskFactory
Swap	Util/RadixTree.hpp	/^    void Swap(LeafList &other) {$/;"	f	struct:RadixTree::LeafList
SwapWord	Topography/shapelib/mapshape.c	/^static void SwapWord( int length, void * wordP )$/;"	f	file:
SwapWord	Topography/shapelib/maptree.c	/^static void SwapWord( int length, void * wordP )$/;"	f	file:
SweepList	Kobo/WifiDialog.cpp	/^WifiListWidget::SweepList()$/;"	f	class:WifiListWidget
SwitchData	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::SwitchData()$/;"	f	class:FlarmTrafficControl
SwitchData	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::SwitchData()$/;"	f	class:TrafficWidget
SwitchKernel	Kobo/SystemDialog.cpp	/^SystemWidget::SwitchKernel()$/;"	f	class:SystemWidget
SwitchState	NMEA/SwitchState.hpp	/^struct SwitchState$/;"	s
SwitchToEditTab	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::SwitchToEditTab()$/;"	f	class:TaskManagerDialog
SwitchToPropertiesPanel	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::SwitchToPropertiesPanel()$/;"	f	class:TaskManagerDialog
SwitchZoomClimb	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::SwitchZoomClimb()$/;"	f	class:GlueMapWindow
SwitchesDialog	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  SwitchesDialog(const DialogLook &look)$/;"	f	class:SwitchesDialog
SwitchesDialog	Dialogs/Device/Vega/SwitchesDialog.cpp	/^class SwitchesDialog : public TwoWidgets, private NullBlackboardListener {$/;"	c	file:
SwitchesLeft	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  SwitchesLeft(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:SwitchesLeft
SwitchesLeft	Dialogs/Device/Vega/SwitchesDialog.cpp	/^class SwitchesLeft : public RowFormWidget {$/;"	c	file:
SwitchesRight	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  SwitchesRight(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:SwitchesRight
SwitchesRight	Dialogs/Device/Vega/SwitchesDialog.cpp	/^class SwitchesRight : public RowFormWidget {$/;"	c	file:
SymbolButtonRenderer	Renderer/SymbolButtonRenderer.hpp	/^  SymbolButtonRenderer(const ButtonLook &_look,$/;"	f	class:SymbolButtonRenderer
SymbolButtonRenderer	Renderer/SymbolButtonRenderer.hpp	/^class SymbolButtonRenderer : public ButtonRenderer {$/;"	c
SymbolRenderer	Renderer/SymbolRenderer.hpp	/^namespace SymbolRenderer$/;"	n
SymbolsConfigPanel	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  SymbolsConfigPanel()$/;"	f	class:final
SymmetricSectorZone	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  SymmetricSectorZone(Shape _shape, bool _can_start_through_top,$/;"	f	class:SymmetricSectorZone
SymmetricSectorZone	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  SymmetricSectorZone(const GeoPoint &loc,$/;"	f	class:SymmetricSectorZone
SymmetricSectorZone	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  SymmetricSectorZone(const SymmetricSectorZone &other,$/;"	f	class:SymmetricSectorZone
SymmetricSectorZone	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^class SymmetricSectorZone: public SectorZone$/;"	c
SyncFromDevice	Dialogs/Device/DeviceEditWidget.cpp	/^  SyncFromDevice, SyncToDevice,$/;"	e	enum:ControlIndex	file:
SyncPoints	Engine/Trace/Trace.cpp	/^Trace::SyncPoints(TracePointerVector &v) const$/;"	f	class:Trace
SyncToDevice	Dialogs/Device/DeviceEditWidget.cpp	/^  SyncFromDevice, SyncToDevice,$/;"	e	enum:ControlIndex	file:
Synchronise	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::Synchronise(const Airspaces &master,$/;"	f	class:AirspaceRoute
Synchronise	Task/RoutePlannerGlue.cpp	/^RoutePlannerGlue::Synchronise(const Airspaces &master,$/;"	f	class:RoutePlannerGlue
SynchroniseInRange	Engine/Airspace/Airspaces.cpp	/^Airspaces::SynchroniseInRange(const Airspaces &master,$/;"	f	class:Airspaces
Synchronize	Plane/PlaneGlue.cpp	/^PlaneGlue::Synchronize(const Plane &plane, ComputerSettings &settings,$/;"	f	class:PlaneGlue
Synthesise	Audio/ToneSynthesiser.cpp	/^ToneSynthesiser::Synthesise(int16_t *buffer, size_t n)$/;"	f	class:ToneSynthesiser
Synthesise	Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::Synthesise(int16_t *buffer, size_t n)$/;"	f	class:VarioSynthesiser
SystemClockTimer	ProcessTimer.cpp	/^SystemClockTimer()$/;"	f	file:
SystemConfiguration	UtilsSettings.cpp	/^SystemConfiguration()$/;"	f
SystemLoadCPU	OS/SystemLoad.cpp	/^SystemLoadCPU()$/;"	f
SystemLoadCPU	OS/SystemLoad.cpp	/^unsigned SystemLoadCPU()$/;"	f
SystemProcessTimer	ProcessTimer.cpp	/^SystemProcessTimer()$/;"	f	file:
SystemSettings	SystemSettings.hpp	/^struct SystemSettings {$/;"	s
SystemStatusPanel	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  SystemStatusPanel(const DialogLook &look)$/;"	f	class:final
SystemTimeFromGPS	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  SystemTimeFromGPS$/;"	e	enum:ControlIndex	file:
SystemWidget	Kobo/SystemDialog.cpp	/^  SystemWidget(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:final
SystemWindowSize	UtilsSystem.cpp	/^SystemWindowSize()$/;"	f
TAB	InfoBoxes/InfoBoxSettings.hpp	/^    TAB,$/;"	m	class:InfoBoxSettings::BorderStyle
TAF	Weather/TAF.hpp	/^struct TAF$/;"	s
TAF_HPP	Weather/TAF.hpp	25;"	d
TAKEOFF_DISTANCE	InfoBoxes/Content/Type.hpp	/^    TAKEOFF_DISTANCE,$/;"	e	enum:InfoBoxFactory::Type
TAPosition	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  TAPosition,$/;"	e	enum:ControlIndex	file:
TAPosition	Profile/ProfileKeys.cpp	/^const char TAPosition[] = "TAPosition";$/;"	m	namespace:ProfileKeys	file:
TARGET	Version.cpp	33;"	d	file:
TARGET	Version.cpp	35;"	d	file:
TARGET	Version.cpp	37;"	d	file:
TARGET	Version.cpp	41;"	d	file:
TARGET	Version.cpp	43;"	d	file:
TARGET	Version.cpp	46;"	d	file:
TARGET	Version.cpp	48;"	d	file:
TARGET_UP	MapSettings.hpp	/^  TARGET_UP,$/;"	m	class:MapOrientation
TASK	Device/Driver/LX/LXN.hpp	/^    TASK = 0xf7,$/;"	e	enum:LXN::Command
TASK	Device/Driver/Volkslogger/vlapi2.h	/^    struct TASK {$/;"	s	struct:VLAPI_DATA::DECLARATION
TASK	Dialogs/dlgAnalysis.hpp	/^  TASK,$/;"	m	class:AnalysisPage
TASK	Engine/Route/Config.hpp	/^    TASK,$/;"	m	class:RoutePlannerConfig::Polar
TASK	Engine/Task/TaskBehaviour.hpp	/^  TASK,$/;"	m	class:AbortTaskMode
TASK	Renderer/WaypointRendererSettings.hpp	/^    TASK,$/;"	m	class:WaypointRendererSettings::LabelSelection
TASKADVANCE_HPP	Engine/Task/Ordered/TaskAdvance.hpp	24;"	d
TASKBESTMC_HPP	Engine/Task/Solvers/TaskBestMc.hpp	24;"	d
TASKDEFAULTSCONFIGPANEL_HPP	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.hpp	25;"	d
TASKEVENTS_HPP	Engine/Task/TaskEvents.hpp	24;"	d
TASKGLIDEREQUIRED_HPP	Engine/Task/Solvers/TaskGlideRequired.hpp	23;"	d
TASKINTERFACE_H	Engine/Task/TaskInterface.hpp	24;"	d
TASKLEG_H	Engine/Task/Points/TaskLeg.hpp	24;"	d
TASKLEG_RENDERER_HPP	Renderer/TaskLegRenderer.hpp	25;"	d
TASKMACCREADYREMAINING_HPP	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	23;"	d
TASKMACCREADYTOTAL_HPP	Engine/Task/Solvers/TaskMacCreadyTotal.hpp	23;"	d
TASKMACCREADYTRAVELLED_HPP	Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	23;"	d
TASKMANAGER_H	Engine/Task/TaskManager.hpp	24;"	d
TASKMINTARGET_HPP	Engine/Task/Solvers/TaskMinTarget.hpp	23;"	d
TASKOPTTARGET_HPP	Engine/Task/Solvers/TaskOptTarget.hpp	24;"	d
TASKPOINTVISITOR_HPP	Engine/Task/Visitors/TaskPointVisitor.hpp	23;"	d
TASKPOINT_HPP	Engine/Task/Points/TaskPoint.hpp	25;"	d
TASKPROJECTION_H	Geo/Flat/TaskProjection.hpp	24;"	d
TASKRULESCONFIGPANEL_HPP	Dialogs/Settings/Panels/TaskRulesConfigPanel.hpp	25;"	d
TASKSOLVETRAVELLED_HPP	Engine/Task/Solvers/TaskSolveTravelled.hpp	23;"	d
TASKSPEED_RENDERER_HPP	Renderer/TaskSpeedRenderer.hpp	25;"	d
TASKSTATS_HPP	Engine/Task/Stats/TaskStats.hpp	23;"	d
TASKWAYPOINT_HPP	Engine/Task/Points/TaskWaypoint.hpp	26;"	d
TASK_AND_AIRFIELD	Renderer/WaypointRendererSettings.hpp	/^    TASK_AND_AIRFIELD,$/;"	m	class:WaypointRendererSettings::LabelSelection
TASK_AND_LANDABLE	Renderer/WaypointRendererSettings.hpp	/^    TASK_AND_LANDABLE,$/;"	m	class:WaypointRendererSettings::LabelSelection
TASK_AUTOPILOT_HPP	Replay/TaskAutoPilot.hpp	23;"	d
TASK_BEHAVIOUR_HPP	Engine/Task/TaskBehaviour.hpp	24;"	d
TASK_CRUISE_EFFICIENCY_HPP	Engine/Task/Solvers/TaskCruiseEfficiency.hpp	23;"	d
TASK_DIJKSTRA_HPP	Engine/Task/PathSolvers/TaskDijkstra.hpp	24;"	d
TASK_DIJKSTRA_MAX_HPP	Engine/Task/PathSolvers/TaskDijkstraMax.hpp	24;"	d
TASK_DIJKSTRA_MIN_HPP	Engine/Task/PathSolvers/TaskDijkstraMin.hpp	24;"	d
TASK_LOAD_FILE_HPP	Task/LoadFile.hpp	24;"	d
TASK_MACCREADY_HPP	Engine/Task/Solvers/TaskMacCready.hpp	23;"	d
TASK_NOT_CLOSED	Engine/Task/Factory/ValidationError.hpp	/^  TASK_NOT_CLOSED,$/;"	m	class:TaskValidationErrorType
TASK_NOT_HOMOGENEOUS	Engine/Task/Factory/ValidationError.hpp	/^  TASK_NOT_HOMOGENEOUS,$/;"	m	class:TaskValidationErrorType
TASK_OZ	MapWindow/Items/MapItem.hpp	/^    TASK_OZ,$/;"	e	enum:TaskPointType::Type
TASK_PROGRESS_RENDERER_HPP	Renderer/TaskProgressRenderer.hpp	25;"	d
TASK_SAVE_FILE_HPP	Task/SaveFile.hpp	24;"	d
TASK_SOLUTION_HPP	Engine/Task/Solvers/TaskSolution.hpp	24;"	d
TASK_SOLVE_TRAVELLED_HPP	Engine/Task/Solvers/TaskEffectiveMacCready.hpp	23;"	d
TASK_SPEED	Dialogs/dlgAnalysis.hpp	/^  TASK_SPEED,$/;"	m	class:AnalysisPage
TASK_SPEED	Units/Group.hpp	/^  TASK_SPEED,$/;"	m	class:UnitGroup
TASK_SPEED_HOUR	InfoBoxes/Content/Type.hpp	/^    TASK_SPEED_HOUR,$/;"	e	enum:InfoBoxFactory::Type
TASK_STORE_HPP	Task/TaskStore.hpp	25;"	d
TASK_SUMMARY_HPP	Engine/Task/Stats/TaskSummary.hpp	23;"	d
TASK_TYPE	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^  TASK_TYPE,$/;"	e	enum:Controls	file:
TASK_VARIO_HPP	Engine/Task/Stats/TaskVario.hpp	2;"	d
TASTER	Device/Driver/LX/LX1600.hpp	/^    TASTER = 2,$/;"	m	class:LX1600::SCControlMode
TASTER	Device/Driver/LXERA/LXERA.hpp	/^    TASTER = 2,$/;"	m	class:LXEra::SCControlMode
TCHAR	unix/tchar.h	/^typedef char TCHAR;$/;"	t
TCHAR_H	unix/tchar.h	25;"	d
TCPClientPort	Device/Port/TCPClientPort.cpp	/^TCPClientPort::TCPClientPort(boost::asio::io_context &io_context,$/;"	f	class:TCPClientPort
TCPPort	Device/Port/TCPPort.cpp	/^TCPPort::TCPPort(boost::asio::io_context &io_context,$/;"	f	class:TCPPort
TCPPort	Dialogs/Device/DeviceEditWidget.cpp	/^  TCPPort,$/;"	e	enum:ControlIndex	file:
TCP_CLIENT	Device/Config.hpp	/^    TCP_CLIENT,$/;"	m	class:DeviceConfig::PortType
TCP_LISTENER	Device/Config.hpp	/^    TCP_LISTENER,$/;"	m	class:DeviceConfig::PortType
TDECL	Device/Driver/Volkslogger/vlconv.cpp	/^  BrokenDateTime TDECL;$/;"	m	class:C_RECORD	file:
TDeclaration	Device/Driver/IMI/Protocol/Types.hpp	/^  struct TDeclaration {$/;"	s	namespace:IMI
TDeclarationHeader	Device/Driver/IMI/Protocol/Types.hpp	/^  struct TDeclarationHeader {$/;"	s	namespace:IMI
TDeviceInfo	Device/Driver/IMI/Protocol/Types.hpp	/^  struct TDeviceInfo {$/;"	s	namespace:IMI
TEAM	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    TEAM,$/;"	e	enum:final::Buttons	file:
TEAMCODE_COMBINATIONS	TeamCode/TeamCode.cpp	/^static constexpr unsigned TEAMCODE_COMBINATIONS = BASE * BASE;$/;"	v	file:
TEK_PRESSURE	Device/Config.hpp	/^    TEK_PRESSURE,$/;"	m	class:DeviceConfig::PressureUse
TELNET	Kobo/NetworkDialog.cpp	/^    TELNET,$/;"	e	enum:final::Buttons	file:
TEMPERATURE	Units/Group.hpp	/^  TEMPERATURE,$/;"	m	class:UnitGroup
TEMPTRACE	Dialogs/dlgAnalysis.hpp	/^  TEMPTRACE,$/;"	m	class:AnalysisPage
TEMP_USE_AMBIENT	Screen/FB/mxcfb.h	108;"	d
TERRAIN	Engine/Route/Config.hpp	/^    TERRAIN,$/;"	m	class:RoutePlannerConfig::Mode
TERRAIN	Renderer/WaypointRendererSettings.hpp	/^    TERRAIN,$/;"	m	class:WaypointRendererSettings::ArrivalHeightDisplay
TERRAINDISPLAYCONFIGPANEL_HPP	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.hpp	25;"	d
TERRAIN_CROSS_SECTION_RENDERER_HPP	CrossSection/TerrainXSRenderer.hpp	25;"	d
TERRAIN_LINE	Computer/Settings.hpp	/^    TERRAIN_LINE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
TERRAIN_ROUTE_HPP	Engine/Route/TerrainRoute.hpp	23;"	d
TERRAIN_SHADE	Computer/Settings.hpp	/^    TERRAIN_SHADE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
TEXCOORD	Screen/OpenGL/Attribute.hpp	/^    static constexpr GLuint TEXCOORD = 2;$/;"	m	namespace:OpenGL::Attribute
TEXT	Device/Driver/FLARM/Device.hpp	/^    TEXT,$/;"	m	class:FlarmDevice::Mode
TEXT_BALLAST	Gauge/GaugeVario.cpp	36;"	d	file:
TEXT_BUG	Gauge/GaugeVario.cpp	35;"	d	file:
TEXT_FILE_HXX	Util/TextFile.hxx	31;"	d
TE_altitude	NMEA/MoreData.hpp	/^  double TE_altitude;$/;"	m	struct:MoreData
THERMAL	MapWindow/Items/MapItem.hpp	/^    THERMAL,$/;"	e	enum:TaskPointType::Type
THERMALBASE_HPP	Computer/ThermalBase.hpp	25;"	d
THERMALLOCATOR_H	Computer/ThermalLocator.hpp	25;"	d
THERMAL_ASSISTANT	InfoBoxes/Content/Type.hpp	/^    THERMAL_ASSISTANT,$/;"	e	enum:InfoBoxFactory::Type
THERMAL_ASSISTANT	PageSettings.hpp	/^    THERMAL_ASSISTANT,$/;"	m	class:PageLayout::Main
THERMAL_ASSISTANT_WINDOW_LOOK_HPP	Look/ThermalAssistantLook.hpp	25;"	d
THERMAL_ASSISTENT_RENDERER_HPP	Gauge/ThermalAssistantRenderer.hpp	25;"	d
THERMAL_ASSISTENT_WINDOW_HPP	Gauge/ThermalAssistantWindow.hpp	25;"	d
THERMAL_BAND	Dialogs/dlgAnalysis.hpp	/^  THERMAL_BAND,$/;"	m	class:AnalysisPage
THERMAL_BAND_HPP	Engine/ThermalBand/ThermalBand.hpp	23;"	d
THERMAL_BAND_LOOK_HPP	Look/ThermalBandLook.hpp	25;"	d
THERMAL_BAND_RENDERER_HPP	Renderer/ThermalBandRenderer.hpp	25;"	d
THERMAL_ENCOUNTER_BAND_HPP	Engine/ThermalBand/ThermalEncounterBand.hpp	23;"	d
THERMAL_ENCOUNTER_COLLECTION	Engine/ThermalBand/ThermalEncounterCollection.hpp	23;"	d
THERMAL_HOTSPOT	Engine/Waypoint/Waypoint.hpp	/^    THERMAL_HOTSPOT,$/;"	m	class:Waypoint::Type
THERMAL_RANGE	Cloud/Main.cpp	/^static constexpr double THERMAL_RANGE = 50000;$/;"	v	file:
THERMAL_REQUEST	Tracking/SkyLines/Protocol.hpp	/^  THERMAL_REQUEST = 12,$/;"	e	enum:SkyLinesTracking::Type
THERMAL_RESPONSE	Tracking/SkyLines/Protocol.hpp	/^  THERMAL_RESPONSE = 13,$/;"	e	enum:SkyLinesTracking::Type
THERMAL_SHEAR_RATIO_MAX	Computer/GlideComputerAirData.cpp	/^static constexpr double THERMAL_SHEAR_RATIO_MAX = 10;$/;"	v	file:
THERMAL_SLICE_HPP	Engine/ThermalBand/ThermalSlice.hpp	23;"	d
THERMAL_SUBMIT	Tracking/SkyLines/Protocol.hpp	/^  THERMAL_SUBMIT = 11,$/;"	e	enum:SkyLinesTracking::Type
THERMAL_TIME_MIN	Computer/GlideComputerAirData.cpp	/^static constexpr double THERMAL_TIME_MIN = 45;$/;"	v	file:
THINNING_LEVELS	Topography/XShape.hpp	/^  static constexpr unsigned THINNING_LEVELS = 4;$/;"	m	class:XShape
THREAD_COND_HXX	Thread/Cond.hxx	31;"	d
THREAD_CRITICAL_SECTION_HXX	Thread/CriticalSection.hxx	31;"	d
THREAD_MUTEX_HXX	Thread/Mutex.hxx	31;"	d
THREAD_UTIL_HXX	Thread/Util.hpp	31;"	d
THREAD_WINDOWS_COND_HXX	Thread/WindowsCond.hxx	31;"	d
THREAD_WINDOWS_SHARED_MUTEX_HXX	Thread/WindowsSharedMutex.hxx	31;"	d
TID	Device/Driver/Volkslogger/vlconv.cpp	/^  unsigned TID;$/;"	m	class:C_RECORD	file:
TIME	Dialogs/Weather/RASPDialog.cpp	/^    TIME,$/;"	e	enum:final::Controls	file:
TIME	Form/DataField/Base.hpp	/^    TIME,$/;"	m	class:DataField::Type
TIME	Renderer/ChartRenderer.hpp	/^    TIME$/;"	e	enum:ChartRenderer::UnitFormat
TIMECONFIGPANEL_HPP	Dialogs/Settings/Panels/TimeConfigPanel.hpp	25;"	d
TIMEOUT	Device/Port/Port.hpp	/^    TIMEOUT,$/;"	m	class:Port::WaitResult
TIMEOUT	OS/OverlappedEvent.hpp	/^    TIMEOUT,$/;"	e	enum:OverlappedEvent::WaitResult
TIME_CAST_HXX	Time/Cast.hxx	31;"	d
TINY	Engine/Task/Solvers/TaskBestMc.cpp	51;"	d	file:
TITHRESHOLD	Atmosphere/CuSonde.cpp	43;"	d	file:
TKF	Device/Driver/Volkslogger/vlconv.cpp	/^  C2 TKF;$/;"	m	class:C_RECORD	file:
TLOCATOR_NMAX	Computer/ThermalLocator.hpp	/^  static constexpr unsigned TLOCATOR_NMAX = 60;$/;"	m	class:ThermalLocator
TLOCATOR_NMIN	Computer/ThermalLocator.hpp	/^  static constexpr unsigned TLOCATOR_NMIN = 5;$/;"	m	class:ThermalLocator
TLineReader	IO/LineReader.hpp	/^class TLineReader : public LineReader<TCHAR> {};$/;"	c
TMZ	Engine/Airspace/AirspaceClass.hpp	/^  TMZ,$/;"	e	enum:uint8_t
TMsg	Device/Driver/IMI/Protocol/Types.hpp	/^  struct TMsg {$/;"	s	namespace:IMI
TMsgType	Device/Driver/IMI/Protocol/Types.hpp	/^  enum TMsgType {$/;"	g	namespace:IMI
TNP	Airspace/AirspaceParser.cpp	/^  TNP,$/;"	m	class:AirspaceFileType	file:
TOGGLE_WIFI	Kobo/NetworkDialog.cpp	/^    TOGGLE_WIFI,$/;"	e	enum:final::Buttons	file:
TOLERANCES_HPP	Engine/Util/Tolerances.hpp	23;"	d
TOLERANCE_BEST_MC	Engine/Util/Tolerances.hpp	29;"	d
TOLERANCE_CRUISE_EFFICIENCY	Engine/Util/Tolerances.hpp	27;"	d
TOLERANCE_GLIDE_REQUIRED	Engine/Util/Tolerances.hpp	35;"	d
TOLERANCE_ISOLINE_CROSSING	Engine/Util/Tolerances.hpp	26;"	d
TOLERANCE_MC_OPT_GLIDE	Engine/Util/Tolerances.hpp	25;"	d
TOLERANCE_MIN_TARGET	Engine/Util/Tolerances.hpp	36;"	d
TOLERANCE_OPT_TARGET	Engine/Util/Tolerances.hpp	37;"	d
TOLERANCE_POLAR_BESTLD	Engine/Util/Tolerances.hpp	32;"	d
TOLERANCE_POLAR_DOLPHIN	Engine/Util/Tolerances.hpp	33;"	d
TOLERANCE_POLAR_MINSINK	Engine/Util/Tolerances.hpp	31;"	d
TOOLS	Kobo/KoboMenu.cpp	/^  TOOLS,$/;"	e	enum:Buttons	file:
TOPOGRAPHY_CONVERT_HPP	Topography/Convert.hpp	25;"	d
TOPOGRAPHY_FILE_RENDERER_HPP	Topography/TopographyFileRenderer.hpp	25;"	d
TOPOGRAPHY_GLUE_H	Topography/TopographyGlue.hpp	25;"	d
TOPOGRAPHY_HPP	Topography/TopographyFile.hpp	26;"	d
TOPOGRAPHY_RENDERER_HPP	Topography/TopographyRenderer.hpp	25;"	d
TOPOGRAPHY_STORE_HPP	Topography/TopographyStore.hpp	25;"	d
TOPOGRAPHY_XSHAPE_HPP	Topography/XShape.hpp	26;"	d
TOPOGRAPHY_XSHAPE_POINT_HPP	Topography/XShapePoint.hpp	26;"	d
TOP_8_VARIO	InfoBoxes/InfoBoxSettings.hpp	/^    TOP_8_VARIO = 18,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT	UISettings.hpp	/^    TOP_LEFT,$/;"	m	class:UISettings::PopupMessagePosition
TOP_LEFT_10	InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_10 = 21,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT_12	InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_12 = 11,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT_4	InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_4 = 14,$/;"	m	class:InfoBoxSettings::Geometry
TOP_LEFT_8	InfoBoxes/InfoBoxSettings.hpp	/^    TOP_LEFT_8 = 2,$/;"	m	class:InfoBoxSettings::Geometry
TORR	Units/Unit.hpp	/^  TORR,$/;"	m	class:Unit
TOUCH	Kobo/Model.hpp	/^  TOUCH,$/;"	m	class:KoboModel
TOUCH2	Kobo/Model.hpp	/^  TOUCH2,$/;"	m	class:KoboModel
TOURING	Engine/Task/Factory/TaskFactoryType.hpp	/^  TOURING,$/;"	m	class:TaskFactoryType
TOURING_TASK_FACTORY_HPP	Engine/Task/Factory/TouringTaskFactory.hpp	23;"	d
TOWER	Engine/Waypoint/Waypoint.hpp	/^    TOWER,$/;"	m	class:Waypoint::Type
TOW_PLANE	FLARM/Traffic.hpp	/^    TOW_PLANE = 2,        \/\/!< tow \/ tug plane$/;"	m	class:FlarmTraffic::AircraftType
TO_NEXT_POINT	Task/TaskFileSeeYou.cpp	/^    TO_NEXT_POINT,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
TO_PREVIOUS_POINT	Task/TaskFileSeeYou.cpp	/^    TO_PREVIOUS_POINT,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
TO_START_POINT	Task/TaskFileSeeYou.cpp	/^    TO_START_POINT,$/;"	e	enum:SeeYouTurnpointInformation::Style	file:
TObservationZone	Device/Driver/IMI/Protocol/Types.hpp	/^  struct TObservationZone {$/;"	s	namespace:IMI
TP	Device/Driver/Volkslogger/vlconv.cpp	/^  C2 TP[12];$/;"	m	class:C_RECORD	file:
TPTypeItemHelp	Dialogs/Task/MutateTaskPointDialog.cpp	/^TPTypeItemHelp(unsigned i)$/;"	f	file:
TRACEHISTORY_HPP	Engine/Navigation/TraceHistory.hpp	24;"	d
TRACE_HISTORY_LOOK_HPP	Look/TraceHistoryLook.hpp	25;"	d
TRACE_HISTORY_RENDERER_HPP	Renderer/TraceHistoryRenderer.hpp	25;"	d
TRACE_HPP	Engine/Trace/Trace.hpp	25;"	d
TRACE_MANAGER_HPP	Engine/Contest/Solvers/TraceManager.hpp	25;"	d
TRACE_POINT_HPP	Engine/Trace/Point.hpp	25;"	d
TRACK	MapSettings.hpp	/^  TRACK,$/;"	m	class:MapShiftBias
TRACKING_CONFIGPANEL_HPP	Dialogs/Settings/Panels/TrackingConfigPanel.hpp	25;"	d
TRACKING_GESTURE_MANAGER_HPP	UIUtil/TrackingGestureManager.hpp	31;"	d
TRACK_UP	MapSettings.hpp	/^  TRACK_UP,$/;"	m	class:MapOrientation
TRAFFIC	MapWindow/Items/MapItem.hpp	/^    TRAFFIC,$/;"	e	enum:TaskPointType::Type
TRAFFIC_LIGHTS	Renderer/WaypointRendererSettings.hpp	/^    TRAFFIC_LIGHTS,$/;"	m	class:WaypointRendererSettings::LandableStyle
TRAFFIC_RANGE	Cloud/Main.cpp	/^static constexpr double TRAFFIC_RANGE = 50000;$/;"	v	file:
TRAFFIC_REQUEST	Tracking/SkyLines/Protocol.hpp	/^  TRAFFIC_REQUEST = 4,$/;"	e	enum:SkyLinesTracking::Type
TRAFFIC_RESPONSE	Tracking/SkyLines/Protocol.hpp	/^  TRAFFIC_RESPONSE = 5,$/;"	e	enum:SkyLinesTracking::Type
TRAIL_DRIFT	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_DRIFT,$/;"	e	enum:ControlIndex	file:
TRAIL_LENGTH	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_LENGTH,$/;"	e	enum:ControlIndex	file:
TRAIL_TYPE	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_TYPE,$/;"	e	enum:ControlIndex	file:
TRAIL_WIDTH	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  TRAIL_WIDTH,$/;"	e	enum:ControlIndex	file:
TRANSLATE	Screen/OpenGL/Attribute.hpp	/^    static constexpr GLuint TRANSLATE = 0;$/;"	m	namespace:OpenGL::Attribute
TRANSPARENT	Screen/Memory/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon91
TRANSPARENT	Screen/Memory/Canvas.hpp	44;"	d
TRANSPARENT	Screen/Memory/Color.hpp	/^  static constexpr uint8_t TRANSPARENT = 0x00;$/;"	m	class:Color
TRANSPARENT	Screen/Memory/Color.hpp	40;"	d
TRANSPARENT	Screen/OpenGL/Canvas.hpp	/^    OPAQUE, TRANSPARENT$/;"	e	enum:Canvas::__anon93
TRANSPARENT	Screen/OpenGL/Canvas.hpp	47;"	d
TRANSPONDER_RECEIVER	FLARM/Error.hpp	/^    TRANSPONDER_RECEIVER = 0xa1,$/;"	e	enum:uint8_t
TRIANGLE_CONTEST_HPP	Engine/Contest/Solvers/TriangleContest.hpp	24;"	d
TRIKE	Tracking/LiveTrack24.hpp	/^    TRIKE = 32,$/;"	m	class:LiveTrack24::VehicleType
TRIVIAL_ARRAY_HXX	Util/TrivialArray.hxx	31;"	d
TRI_STATE_HPP	Util/TriState.hpp	31;"	d
TRUE	Util/TriState.hpp	/^  FALSE, TRUE, UNKNOWN$/;"	m	class:TriState
TRUE	Util/TriState.hpp	44;"	d
TSTRING_HPP	Util/tstring.hpp	2;"	d
TSTRING_VIEW_HXX	Util/TStringView.hxx	31;"	d
TState	Device/Driver/IMI/Protocol/MessageParser.cpp	/^  enum TState {$/;"	g	namespace:IMI::MessageParser	file:
TStringView	Util/TStringView.hxx	/^struct TStringView : StringView {$/;"	s	struct:TStringView
TStringView	Util/TStringView.hxx	/^struct TStringView : WStringView {$/;"	s
TTYEnumerator	Device/Port/TTYEnumerator.hpp	/^  TTYEnumerator()$/;"	f	class:TTYEnumerator
TTYEnumerator	Device/Port/TTYEnumerator.hpp	/^class TTYEnumerator {$/;"	c
TTYPort	Device/Port/TTYPort.cpp	/^TTYPort::TTYPort(boost::asio::io_context &io_context,$/;"	f	class:TTYPort
TTYPort	Device/Port/TTYPort.hpp	/^class TTYPort : public BufferedPort$/;"	c
TUNNEL	Engine/Waypoint/Waypoint.hpp	/^    TUNNEL,$/;"	m	class:Waypoint::Type
TURNING	Engine/Route/Config.hpp	/^    TURNING,$/;"	m	class:RoutePlannerConfig::ReachMode
TURNPOINT	Waypoint/WaypointFilter.hpp	/^  TURNPOINT,$/;"	m	class:TypeFilter
TURNPOINTS_NOT_UNIQUE	Engine/Task/Factory/ValidationError.hpp	/^  TURNPOINTS_NOT_UNIQUE,$/;"	m	class:TaskValidationErrorType
TURN_ARMED	Engine/Task/Ordered/TaskAdvance.hpp	/^    TURN_ARMED,$/;"	e	enum:TaskAdvance::State
TURN_DISARMED	Engine/Task/Ordered/TaskAdvance.hpp	/^    TURN_DISARMED$/;"	e	enum:TaskAdvance::State
TWaypoint	Device/Driver/IMI/Protocol/Types.hpp	/^  struct TWaypoint {$/;"	s	namespace:IMI
TYPE	Dialogs/Airspace/AirspaceList.cpp	/^  TYPE,$/;"	e	enum:Controls	file:
TYPE	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    TYPE,$/;"	e	enum:final::Controls	file:
TYPE	Dialogs/Waypoint/WaypointList.cpp	/^  TYPE,$/;"	e	enum:Controls	file:
TYPE	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^    TYPE,$/;"	e	enum:final::Rows	file:
TYPE	Screen/OpenGL/Color.hpp	/^  static constexpr GLenum TYPE = GL_FIXED;$/;"	m	class:Color
TYPE	Screen/OpenGL/Color.hpp	/^  static constexpr GLenum TYPE = GL_UNSIGNED_BYTE;$/;"	m	class:Color
TYPE_ACCELEROMETER	Android/InternalSensors.hpp	/^  static constexpr int TYPE_ACCELEROMETER = 0x1;$/;"	m	class:InternalSensors
TYPE_GYROSCOPE	Android/InternalSensors.hpp	/^  static constexpr int TYPE_GYROSCOPE = 0x4;$/;"	m	class:InternalSensors
TYPE_MAGNETIC_FIELD	Android/InternalSensors.hpp	/^  static constexpr int TYPE_MAGNETIC_FIELD = 0x2;$/;"	m	class:InternalSensors
TYPE_PRESSURE	Android/InternalSensors.hpp	/^  static constexpr int TYPE_PRESSURE = 0x6;$/;"	m	class:InternalSensors
TYPE_TRAITS_HPP	Util/TypeTraits.hpp	31;"	d
TZN	Device/Driver/Volkslogger/vlconv.cpp	/^       FTY[50], DTM[10], CID[50], CCL[50], TZN[20];$/;"	m	struct:IGCHEADER	file:
T_FDT	Device/Driver/Volkslogger/vlconv.cpp	/^  BrokenDateTime T_FDT;$/;"	m	class:C_RECORD	file:
T_slCreateEngine	Audio/SLES/Init.cpp	/^typedef SLresult (*T_slCreateEngine)(SLObjectItf *pEngine,$/;"	t	file:
TabButton	Form/TabDisplay.hpp	/^  TabButton(const TCHAR *_caption, const MaskedIcon *_icon)$/;"	f	class:TabButton
TabButton	Form/TabDisplay.hpp	/^class TabButton {$/;"	c
TabDialogStyle	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  TabDialogStyle,$/;"	e	enum:ControlIndex	file:
TabDisplay	Form/TabDisplay.cpp	/^TabDisplay::TabDisplay(TabWidget &_pager, const DialogLook &_look,$/;"	f	class:TabDisplay
TabMenuDisplay	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::TabMenuDisplay(PagerWidget &_pager,$/;"	f	class:TabMenuDisplay
TabMenuGroup	Form/TabMenuData.hpp	/^struct TabMenuGroup {$/;"	s
TabMenuPage	Form/TabMenuData.hpp	/^struct TabMenuPage {$/;"	s
TabRenderer	Renderer/TabRenderer.hpp	/^  TabRenderer() {$/;"	f	class:TabRenderer
TabRenderer	Renderer/TabRenderer.hpp	/^class TabRenderer {$/;"	c
TabStyle	Dialogs/DialogSettings.hpp	/^  enum class TabStyle : uint8_t {$/;"	c	struct:DialogSettings
TabWidget	Widget/TabWidget.hpp	/^  explicit TabWidget(Orientation _orientation=Orientation::AUTO,$/;"	f	class:TabWidget
TabWidget	Widget/TabWidget.hpp	/^class TabWidget : public PagerWidget {$/;"	c
TableHeader	Device/Driver/Volkslogger/Database.hpp	/^  struct TableHeader {$/;"	s	namespace:Volkslogger
Tabs	Dialogs/Task/Manager/Internal.hpp	/^  enum Tabs {$/;"	g	class:final
TakeoffAutotask	Engine/Task/TaskManager.cpp	/^TaskManager::TakeoffAutotask(const GeoPoint &loc, const double terrain_alt)$/;"	f	class:TaskManager
TakeoffAutotask	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::TakeoffAutotask(const GeoPoint& location, const double terrain_alt)$/;"	f	class:GotoTask
TakeoffLanding	Computer/GlideComputer.cpp	/^GlideComputer::TakeoffLanding(bool last_flying)$/;"	f	class:GlideComputer
TakeoffTime	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  TakeoffTime,$/;"	e	enum:Controls	file:
TargetDialogMapWindow	Dialogs/Task/TargetDialog.cpp	/^  TargetDialogMapWindow(TargetWidget &_widget,$/;"	f	class:TargetDialogMapWindow
TargetDialogMapWindow	Dialogs/Task/TargetDialog.cpp	/^class TargetDialogMapWindow : public TargetMapWindow {$/;"	c	file:
TargetDragged	MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::TargetDragged(PixelPoint p)$/;"	f	class:TargetMapWindow
TargetIsLocked	Engine/Task/TaskManager.cpp	/^TaskManager::TargetIsLocked(const unsigned index) const$/;"	f	class:TaskManager
TargetLock	Engine/Task/TaskManager.cpp	/^TaskManager::TargetLock(const unsigned index, bool do_lock)$/;"	f	class:TaskManager
TargetLock	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::TargetLock(const unsigned index, bool do_lock)$/;"	f	class:ProtectedTaskManager
TargetMapWindow	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::TargetMapWindow(const WaypointLook &waypoint_look,$/;"	f	class:TargetMapWindow
TargetMapWindow	MapWindow/TargetMapWindow.hpp	/^class TargetMapWindow : public BufferWindow {$/;"	c
TargetPaintDrag	MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::TargetPaintDrag(Canvas &canvas, const PixelPoint drag_last)$/;"	f	class:TargetMapWindow
TargetVisibility	Renderer/TaskPointRenderer.hpp	/^  enum TargetVisibility {$/;"	g	class:TaskPointRenderer
TargetWidget	Dialogs/Task/TargetDialog.cpp	/^  TargetWidget(ActionListener &_dialog,$/;"	f	class:TargetWidget
TargetWidget	Dialogs/Task/TargetDialog.cpp	/^class TargetWidget$/;"	c	file:
Task	Device/Driver/LX/LXN.hpp	/^  struct Task {$/;"	s	namespace:LXN
TaskAccessor	Replay/TaskAccessor.hpp	/^  TaskAccessor(TaskManager &_task_manager, double _floor_alt)$/;"	f	class:TaskAccessor
TaskAccessor	Replay/TaskAccessor.hpp	/^class TaskAccessor {$/;"	c
TaskActionsPanel	Dialogs/Task/Manager/TaskActionsPanel.cpp	/^TaskActionsPanel::TaskActionsPanel(TaskManagerDialog &_dialog,$/;"	f	class:TaskActionsPanel
TaskActionsPanel	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^class TaskActionsPanel : public RowFormWidget, ActionListener {$/;"	c
TaskAdvance	Engine/Task/Ordered/TaskAdvance.hpp	/^class TaskAdvance$/;"	c
TaskAdvanceMonitor	Monitor/TaskAdvanceMonitor.hpp	/^  TaskAdvanceMonitor():widget(nullptr) {}$/;"	f	class:TaskAdvanceMonitor
TaskAdvanceMonitor	Monitor/TaskAdvanceMonitor.hpp	/^class TaskAdvanceMonitor {$/;"	c
TaskAdvanceWidget	Monitor/TaskAdvanceMonitor.cpp	/^  TaskAdvanceWidget(TaskAdvanceMonitor &_monitor)$/;"	f	class:final
TaskAutoPilot	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::TaskAutoPilot(const AutopilotParameters &_parms)$/;"	f	class:TaskAutoPilot
TaskAutoPilot	Replay/TaskAutoPilot.hpp	/^class TaskAutoPilot: public AbstractAutoPilot {$/;"	c
TaskBehaviour	Engine/Task/TaskBehaviour.hpp	/^struct TaskBehaviour {$/;"	s
TaskBestMc	Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::TaskBestMc(TaskPoint *tp,$/;"	f	class:TaskBestMc
TaskBestMc	Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::TaskBestMc(const std::vector<OrderedTaskPoint *> &tps,$/;"	f	class:TaskBestMc
TaskClone	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskClone() const$/;"	f	class:ProtectedTaskManager
TaskClosePanel	Dialogs/Task/Manager/TaskClosePanel.cpp	/^TaskClosePanel::TaskClosePanel(TaskManagerDialog &_dialog,$/;"	f	class:TaskClosePanel
TaskCommit	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskCommit(const OrderedTask& that)$/;"	f	class:ProtectedTaskManager
TaskComputer	Computer/TaskComputer.cpp	/^TaskComputer::TaskComputer(ProtectedTaskManager &_task,$/;"	f	class:TaskComputer
TaskComputer	Computer/TaskComputer.hpp	/^class TaskComputer$/;"	c
TaskConstraintsMonitor	Monitor/TaskConstraintsMonitor.hpp	/^class TaskConstraintsMonitor {$/;"	c
TaskCruiseEfficiency	Engine/Task/Solvers/TaskCruiseEfficiency.cpp	/^TaskCruiseEfficiency::TaskCruiseEfficiency(const std::vector<OrderedTaskPoint *> &tps,$/;"	f	class:TaskCruiseEfficiency
TaskDefaultsConfigPanel	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TaskDefaultsConfigPanel()$/;"	f	class:final
TaskDijkstra	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^class TaskDijkstra : protected NavDijkstra$/;"	c
TaskDijkstra	Engine/Task/PathSolvers/TaskDijkstraMax.hpp	/^    :TaskDijkstra(false) {}$/;"	f	class:final
TaskDijkstra	Engine/Task/PathSolvers/TaskDijkstraMin.hpp	/^    :TaskDijkstra(true) {}$/;"	f	class:final
TaskDistance	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  TaskDistance,$/;"	e	enum:Controls	file:
TaskEditButtons	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TaskEditButtons()$/;"	f	class:final
TaskEditPanel	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TaskEditPanel(TaskManagerDialog &_dialog,$/;"	f	class:TaskEditPanel
TaskEditPanel	Dialogs/Task/Manager/TaskEditPanel.cpp	/^class TaskEditPanel$/;"	c	file:
TaskEditResult	Task/MapTaskManager.hpp	/^  enum TaskEditResult {$/;"	g	namespace:MapTaskManager
TaskEffectiveMacCready	Engine/Task/Solvers/TaskEffectiveMacCready.cpp	/^TaskEffectiveMacCready::TaskEffectiveMacCready(const std::vector<OrderedTaskPoint *> &tps,$/;"	f	class:TaskEffectiveMacCready
TaskEventObserver	Input/TaskEventObserver.hpp	/^  constexpr TaskEventObserver()$/;"	f	class:final
TaskEvents	Engine/Task/TaskEvents.hpp	/^class TaskEvents$/;"	c
TaskFactoryConstraints	Engine/Task/Factory/Constraints.hpp	/^struct TaskFactoryConstraints {$/;"	s
TaskFactoryType	Engine/Task/Factory/TaskFactoryType.hpp	/^enum class TaskFactoryType: uint8_t {$/;"	c
TaskFile	Task/TaskFile.hpp	/^  TaskFile(Path _path)$/;"	f	class:TaskFile
TaskFile	Task/TaskFile.hpp	/^class TaskFile$/;"	c
TaskFileIGC	Task/TaskFileIGC.hpp	/^  explicit TaskFileIGC(Path _path):TaskFile(_path) {}$/;"	f	class:TaskFileIGC
TaskFileIGC	Task/TaskFileIGC.hpp	/^class TaskFileIGC: public TaskFile$/;"	c
TaskFileSeeYou	Task/TaskFileSeeYou.hpp	/^  explicit TaskFileSeeYou(Path _path):TaskFile(_path) {}$/;"	f	class:TaskFileSeeYou
TaskFileSeeYou	Task/TaskFileSeeYou.hpp	/^class TaskFileSeeYou: public TaskFile$/;"	c
TaskFileVisitor	Task/TaskStore.cpp	/^  TaskFileVisitor(TaskStore::ItemVector &_store):$/;"	f	class:TaskFileVisitor
TaskFileVisitor	Task/TaskStore.cpp	/^class TaskFileVisitor: public File::Visitor$/;"	c	file:
TaskFileXCSoar	Task/TaskFileXCSoar.hpp	/^  explicit TaskFileXCSoar(Path _path):TaskFile(_path) {}$/;"	f	class:TaskFileXCSoar
TaskFileXCSoar	Task/TaskFileXCSoar.hpp	/^class TaskFileXCSoar: public TaskFile$/;"	c
TaskFinish	Computer/GlideComputerInterface.cpp	/^GlideComputerTaskEvents::TaskFinish()$/;"	f	class:GlideComputerTaskEvents
TaskFinish	Engine/Task/TaskEvents.hpp	/^  virtual void TaskFinish() {}$/;"	f	class:TaskEvents
TaskGlideRequired	Engine/Task/Solvers/TaskGlideRequired.cpp	/^TaskGlideRequired::TaskGlideRequired(TaskPoint* tp,$/;"	f	class:TaskGlideRequired
TaskGlideRequired	Engine/Task/Solvers/TaskGlideRequired.cpp	/^TaskGlideRequired::TaskGlideRequired(const std::vector<OrderedTaskPoint *> &tps,$/;"	f	class:TaskGlideRequired
TaskInterface	Engine/Task/TaskInterface.hpp	/^  TaskInterface(const TaskType _type):type(_type) {}$/;"	f	class:TaskInterface
TaskInterface	Engine/Task/TaskInterface.hpp	/^class TaskInterface$/;"	c
TaskLeg	Engine/Task/Points/TaskLeg.hpp	/^  TaskLeg(OrderedTaskPoint &_destination)$/;"	f	class:TaskLeg
TaskLeg	Engine/Task/Points/TaskLeg.hpp	/^class TaskLeg {$/;"	c
TaskListPanel	Dialogs/Task/Manager/TaskListPanel.cpp	/^  TaskListPanel(TaskManagerDialog &_dialog,$/;"	f	class:final
TaskLook	Look/TaskLook.hpp	/^struct TaskLook {$/;"	s
TaskMacCready	Engine/Task/Solvers/TaskMacCready.hpp	/^  TaskMacCready(TaskPoint* tp,$/;"	f	class:TaskMacCready
TaskMacCready	Engine/Task/Solvers/TaskMacCready.hpp	/^  TaskMacCready(const I tps_begin, const I tps_end,$/;"	f	class:TaskMacCready
TaskMacCready	Engine/Task/Solvers/TaskMacCready.hpp	/^class TaskMacCready : private NonCopyable$/;"	c
TaskMacCreadyRemaining	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  TaskMacCreadyRemaining(TaskPoint* tp,$/;"	f	class:final
TaskMacCreadyRemaining	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  TaskMacCreadyRemaining(const I tps_begin, const I tps_end,$/;"	f	class:final
TaskMacCreadyTotal	Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^  TaskMacCreadyTotal(const I tps_begin, const I tps_end,$/;"	f	class:final
TaskMacCreadyTravelled	Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^  TaskMacCreadyTravelled(const I tps_begin,$/;"	f	class:final
TaskManager	Engine/Task/TaskManager.cpp	/^TaskManager::TaskManager(const TaskBehaviour &_task_behaviour,$/;"	f	class:TaskManager
TaskManager	Engine/Task/TaskManager.hpp	/^class TaskManager: $/;"	c
TaskManagerDialog	Dialogs/Task/Manager/Internal.hpp	/^  explicit TaskManagerDialog(WndForm &_dialog)$/;"	f	class:final
TaskMapButtonRenderer	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  explicit TaskMapButtonRenderer(const MapLook &_look)$/;"	f	class:TaskMapButtonRenderer
TaskMapButtonRenderer	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^class TaskMapButtonRenderer : public ButtonRenderer {$/;"	c
TaskMinTarget	Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::TaskMinTarget(const std::vector<OrderedTaskPoint*>& tps,$/;"	f	class:TaskMinTarget
TaskMiscPanel	Dialogs/Task/Manager/TaskMiscPanel.cpp	/^TaskMiscPanel::TaskMiscPanel(TaskManagerDialog &dialog,$/;"	f	class:TaskMiscPanel
TaskOZMapItem	MapWindow/Items/MapItem.cpp	/^TaskOZMapItem::TaskOZMapItem(int _index, const ObservationZonePoint &_oz,$/;"	f	class:TaskOZMapItem
TaskOZMapItem	MapWindow/Items/MapItem.hpp	/^struct TaskOZMapItem: public MapItem$/;"	s
TaskOptTarget	Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::TaskOptTarget(const std::vector<OrderedTaskPoint*>& tps,$/;"	f	class:TaskOptTarget
TaskPoint	Engine/Task/Points/TaskPoint.hpp	/^  TaskPoint(TaskPointType _type, const GeoPoint &_location)$/;"	f	class:TaskPoint
TaskPoint	Engine/Task/Points/TaskPoint.hpp	/^class TaskPoint$/;"	c
TaskPointConstVisitor	Engine/Task/Visitors/TaskPointVisitor.hpp	/^class TaskPointConstVisitor {$/;"	c
TaskPointFactoryType	Engine/Task/Factory/TaskPointFactoryType.hpp	/^enum class TaskPointFactoryType : uint8_t {$/;"	c
TaskPointRenderer	Renderer/TaskPointRenderer.cpp	/^TaskPointRenderer::TaskPointRenderer(Canvas &_canvas,$/;"	f	class:TaskPointRenderer
TaskPointRenderer	Renderer/TaskPointRenderer.hpp	/^class TaskPointRenderer$/;"	c
TaskPointType	Engine/Task/Points/Type.hpp	/^enum class TaskPointType : uint8_t {$/;"	c
TaskPointType	MapWindow/Items/MapItem.hpp	/^enum class TaskPointType : uint8_t;$/;"	c
TaskPointWidget	Dialogs/Task/TaskPointDialog.cpp	/^  TaskPointWidget(WidgetDialog &_dialog,$/;"	f	class:final
TaskProgressRenderer	Renderer/TaskProgressRenderer.hpp	/^  TaskProgressRenderer(const TaskLook &_look):look(_look) {}$/;"	f	class:TaskProgressRenderer
TaskProgressRenderer	Renderer/TaskProgressRenderer.hpp	/^class TaskProgressRenderer {$/;"	c
TaskProjection	Geo/Flat/TaskProjection.cpp	/^TaskProjection::TaskProjection(const GeoBounds &_bounds)$/;"	f	class:TaskProjection
TaskProjection	Geo/Flat/TaskProjection.hpp	/^  TaskProjection():bounds(GeoBounds::Invalid()) {}$/;"	f	class:TaskProjection
TaskProjection	Geo/Flat/TaskProjection.hpp	/^class TaskProjection : public FlatProjection {$/;"	c
TaskPropertiesPanel	Dialogs/Task/Manager/TaskPropertiesPanel.cpp	/^TaskPropertiesPanel::TaskPropertiesPanel(TaskManagerDialog &_dialog,$/;"	f	class:TaskPropertiesPanel
TaskRenderer	Renderer/TaskRenderer.cpp	/^TaskRenderer::TaskRenderer(TaskPointRenderer &_tpv, GeoBounds _screen_bounds)$/;"	f	class:TaskRenderer
TaskRenderer	Renderer/TaskRenderer.hpp	/^class TaskRenderer$/;"	c
TaskRulesConfigPanel	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  TaskRulesConfigPanel()$/;"	f	class:final
TaskSave	Task/FileProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskSave(Path path)$/;"	f	class:ProtectedTaskManager
TaskSaveDefault	Task/FileProtectedTaskManager.cpp	/^ProtectedTaskManager::TaskSaveDefault()$/;"	f	class:ProtectedTaskManager
TaskSize	Engine/Task/TaskManager.cpp	/^TaskManager::TaskSize() const$/;"	f	class:TaskManager
TaskSize	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::TaskSize() const$/;"	f	class:AbortTask
TaskSize	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::TaskSize() const$/;"	f	class:GotoTask
TaskSolution	Engine/Task/Solvers/TaskSolution.hpp	/^namespace TaskSolution$/;"	n
TaskSolveTravelled	Engine/Task/Solvers/TaskSolveTravelled.cpp	/^TaskSolveTravelled::TaskSolveTravelled(const std::vector<OrderedTaskPoint *> &tps,$/;"	f	class:TaskSolveTravelled
TaskSolveTravelled	Engine/Task/Solvers/TaskSolveTravelled.hpp	/^class TaskSolveTravelled : protected ZeroFinder {$/;"	c
TaskSpeedCaption	Renderer/TaskSpeedRenderer.cpp	/^TaskSpeedCaption(TCHAR *sTmp,$/;"	f
TaskSpeedUnitsValue	Profile/ProfileKeys.cpp	/^const char TaskSpeedUnitsValue[] = "TaskSpeedUnit";$/;"	m	namespace:ProfileKeys	file:
TaskStart	Computer/GlideComputerInterface.cpp	/^GlideComputerTaskEvents::TaskStart()$/;"	f	class:GlideComputerTaskEvents
TaskStart	Engine/Task/TaskEvents.hpp	/^  virtual void TaskStart() {}$/;"	f	class:TaskEvents
TaskStartMargins	Engine/Task/TaskBehaviour.hpp	/^struct TaskStartMargins {$/;"	s
TaskStarted	Engine/Task/AbstractTask.hpp	/^  virtual bool TaskStarted(gcc_unused bool soft = false) const {$/;"	f	class:AbstractTask
TaskStarted	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::TaskStarted(bool soft) const$/;"	f	class:OrderedTask
TaskStats	Engine/Task/Stats/TaskStats.hpp	/^class TaskStats $/;"	c
TaskStatsComputer	Engine/Task/Computer/TaskStatsComputer.hpp	/^class TaskStatsComputer {$/;"	c
TaskStatusPanel	Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  TaskStatusPanel(const DialogLook &look):StatusPanel(look) {}$/;"	f	class:TaskStatusPanel
TaskStatusPanel	Dialogs/StatusPanels/TaskStatusPanel.hpp	/^class TaskStatusPanel : public StatusPanel, DataFieldListener {$/;"	c
TaskStore	Task/TaskStore.hpp	/^class TaskStore $/;"	c
TaskSummary	Engine/Task/Stats/TaskSummary.hpp	/^struct TaskSummary {$/;"	s
TaskSummaryPoint	Engine/Task/Stats/TaskSummary.hpp	/^struct TaskSummaryPoint {$/;"	s
TaskSummaryPointVector	Engine/Task/Stats/TaskSummary.hpp	/^  typedef TrivialArray<TaskSummaryPoint, 32u> TaskSummaryPointVector;$/;"	t	struct:TaskSummary
TaskSummaryShape	Dialogs/Task/dlgTaskHelpers.cpp	/^TaskSummaryShape(const OrderedTask *task, TCHAR *text)$/;"	f	file:
TaskTime	Dialogs/StatusPanels/TaskStatusPanel.cpp	/^  TaskTime,$/;"	e	enum:Controls	file:
TaskType	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TaskType,$/;"	e	enum:ControlIndex	file:
TaskType	Engine/Task/TaskType.hpp	/^enum class TaskType : uint8_t {$/;"	c
TaskType	Profile/ProfileKeys.cpp	/^const char TaskType[] = "TaskType";$/;"	m	namespace:ProfileKeys	file:
TaskValidationErrorSet	Engine/Task/Factory/ValidationError.hpp	/^typedef EnumBitSet<TaskValidationErrorType> TaskValidationErrorSet;$/;"	t
TaskValidationErrorType	Engine/Task/Factory/ValidationError.hpp	/^enum class TaskValidationErrorType : uint8_t {$/;"	c
TaskVario	Engine/Task/Stats/TaskVario.hpp	/^class TaskVario$/;"	c
TaskVarioComputer	Engine/Task/Computer/TaskVarioComputer.cpp	/^TaskVarioComputer::TaskVarioComputer()$/;"	f	class:TaskVarioComputer
TaskVarioComputer	Engine/Task/Computer/TaskVarioComputer.hpp	/^class TaskVarioComputer$/;"	c
TaskViewClicked	Dialogs/Task/Manager/Internal.hpp	/^  void TaskViewClicked() {$/;"	f	class:final
TaskWaypoint	Engine/Task/Points/TaskWaypoint.hpp	/^  TaskWaypoint(TaskPointType _type, WaypointPtr &&wp)$/;"	f	class:TaskWaypoint
TaskWaypoint	Engine/Task/Points/TaskWaypoint.hpp	/^class TaskWaypoint :$/;"	c
TeamActions	TeamActions.hpp	/^namespace TeamActions {$/;"	n
TeamCode	TeamCode/TeamCode.hpp	/^class TeamCode$/;"	c
TeamCodeSettings	TeamCode/Settings.hpp	/^struct TeamCodeSettings {$/;"	s
TeamCodeWidget	Dialogs/Traffic/TeamCodeDialog.cpp	/^  TeamCodeWidget(const DialogLook &look)$/;"	f	class:final
TeamInfo	NMEA/Derived.hpp	/^struct TeamInfo$/;"	s
TeamcodeRefWaypoint	Profile/ProfileKeys.cpp	/^const char TeamcodeRefWaypoint[] = "TeamcodeRefWaypoint";$/;"	m	namespace:ProfileKeys	file:
Tell	IO/ConvertLineReader.cpp	/^ConvertLineReader::Tell() const$/;"	f	class:ConvertLineReader
Tell	IO/FileHandle.hpp	/^  long Tell() {$/;"	f	class:FileHandle
Tell	IO/FileLineReader.cpp	/^FileLineReaderA::Tell() const$/;"	f	class:FileLineReaderA
Tell	IO/LineReader.hpp	/^  virtual long Tell() const {$/;"	f	class:LineReader
Tell	IO/ZipLineReader.cpp	/^ZipLineReaderA::Tell() const$/;"	f	class:ZipLineReaderA
TempAirspaceType	Airspace/AirspaceParser.cpp	/^  TempAirspaceType() {$/;"	f	struct:TempAirspaceType
TempAirspaceType	Airspace/AirspaceParser.cpp	/^struct TempAirspaceType$/;"	s	file:
Temperature	Atmosphere/Temperature.hpp	/^  explicit constexpr Temperature(double kelvin_value):value(kelvin_value) {}$/;"	f	class:Temperature
Temperature	Atmosphere/Temperature.hpp	/^class Temperature {$/;"	c
Temperature	Dialogs/Settings/dlgBasicSettings.cpp	/^  Temperature,$/;"	e	enum:ControlIndex	file:
Temperature	Hardware/Battery.cpp	/^    unsigned Temperature = 0;$/;"	m	namespace:Power::Battery	file:
TemperatureChartCaption	Renderer/CuRenderer.cpp	/^TemperatureChartCaption(TCHAR *sTmp, const CuSonde &cu_sonde)$/;"	f
TemperatureUnit	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    TemperatureUnit,$/;"	e	enum:final::Controls
TemperatureUnitsValue	Profile/ProfileKeys.cpp	/^const char TemperatureUnitsValue[] = "TemperatureUnit";$/;"	m	namespace:ProfileKeys	file:
TemplateCopyASCII	Util/WASCII.cxx	/^TemplateCopyASCII(D *dest, size_t dest_size, const S *src, const S *src_end)$/;"	f	file:
TerminalLook	Look/TerminalLook.hpp	/^struct TerminalLook {$/;"	s
TerminalWindow	Screen/TerminalWindow.hpp	/^  TerminalWindow(const TerminalLook &_look):look(_look) {}$/;"	f	class:TerminalWindow
TerminalWindow	Screen/TerminalWindow.hpp	/^class TerminalWindow : public PaintWindow {$/;"	c
TerrainBrightness	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainBrightness,$/;"	e	enum:ControlIndex	file:
TerrainBrightness	Profile/ProfileKeys.cpp	/^const char TerrainBrightness[] = "TerrainBrightness";$/;"	m	namespace:ProfileKeys	file:
TerrainCollision	InfoBoxes/Content/Type.hpp	/^    TerrainCollision,$/;"	e	enum:InfoBoxFactory::Type
TerrainColors	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainColors,$/;"	e	enum:ControlIndex	file:
TerrainContours	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainContours,$/;"	e	enum:ControlIndex	file:
TerrainContours	Profile/ProfileKeys.cpp	/^const char TerrainContours[] = "TerrainContours";$/;"	m	namespace:ProfileKeys	file:
TerrainContrast	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainContrast,$/;"	e	enum:ControlIndex	file:
TerrainContrast	Profile/ProfileKeys.cpp	/^const char TerrainContrast[] = "TerrainContrast";$/;"	m	namespace:ProfileKeys	file:
TerrainDisplayConfigPanel	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainDisplayConfigPanel()$/;"	f	class:final
TerrainHeight	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::TerrainHeight(const MoreData &basic,$/;"	f	class:GlideComputerAirData
TerrainHeight	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  TerrainHeight,$/;"	e	enum:ControlIndex	file:
TerrainHeight	Terrain/Height.hpp	/^  explicit constexpr TerrainHeight(int16_t _value):value(_value) {}$/;"	f	class:TerrainHeight
TerrainHeight	Terrain/Height.hpp	/^class TerrainHeight {$/;"	c
TerrainInfo	NMEA/Derived.hpp	/^struct TerrainInfo$/;"	s
TerrainLoader	Terrain/Loader.hpp	/^  TerrainLoader(SharedMutex &_mutex, RasterTileCache &_rtc,$/;"	f	class:TerrainLoader
TerrainLoader	Terrain/Loader.hpp	/^class TerrainLoader {$/;"	c
TerrainPreview	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainPreview,$/;"	e	enum:ControlIndex	file:
TerrainPreviewWindow	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainPreviewWindow(const RasterTerrain &terrain)$/;"	f	class:TerrainPreviewWindow
TerrainPreviewWindow	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^class TerrainPreviewWindow : public PaintWindow {$/;"	c	file:
TerrainRamp	Profile/ProfileKeys.cpp	/^const char TerrainRamp[] = "TerrainRamp";$/;"	m	namespace:ProfileKeys	file:
TerrainRenderer	Terrain/TerrainRenderer.cpp	/^TerrainRenderer::TerrainRenderer(const RasterTerrain &_terrain)$/;"	f	class:TerrainRenderer
TerrainRenderer	Terrain/TerrainRenderer.hpp	/^class TerrainRenderer {$/;"	c
TerrainRendererSettings	Terrain/TerrainSettings.hpp	/^struct TerrainRendererSettings {$/;"	s
TerrainRoute	Engine/Route/TerrainRoute.cpp	/^TerrainRoute::TerrainRoute():$/;"	f	class:TerrainRoute
TerrainRoute	Engine/Route/TerrainRoute.hpp	/^class TerrainRoute: public RoutePlanner$/;"	c
TerrainShading	Terrain/RasterRenderer.cpp	/^TerrainShading(const int illum, RGB8Color color)$/;"	f
TerrainSlopeShading	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainSlopeShading,$/;"	e	enum:ControlIndex	file:
TerrainThread	Terrain/Thread.cpp	/^TerrainThread::TerrainThread(RasterTerrain &_terrain,$/;"	f	class:TerrainThread
TerrainType	Terrain/Height.hpp	/^enum class TerrainType : uint8_t {$/;"	c
TerrainWarning	Computer/RouteComputer.cpp	/^RouteComputer::TerrainWarning(const MoreData &basic,$/;"	f	class:RouteComputer
TerrainXSRenderer	CrossSection/TerrainXSRenderer.hpp	/^  TerrainXSRenderer(const CrossSectionLook &_look): look(_look) {}$/;"	f	class:TerrainXSRenderer
TerrainXSRenderer	CrossSection/TerrainXSRenderer.hpp	/^class TerrainXSRenderer$/;"	c
Test	Thread/Trigger.hpp	/^  bool Test() const {$/;"	f	class:Trigger
TestFAITriangle	Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^FAITrianglePointValidator::TestFAITriangle(const double d1, const double d2,$/;"	f	class:FAITrianglePointValidator
Text	Dialogs/DialogSettings.hpp	/^    Text,$/;"	m	class:DialogSettings::TabStyle
Text2Event	Input/InputLookup.cpp	/^static constexpr Text2EventSTRUCT Text2Event[] = {$/;"	v	file:
Text2EventSTRUCT	Input/InputLookup.cpp	/^struct Text2EventSTRUCT {$/;"	s	file:
Text2GCE	Input/InputLookup.cpp	/^static const TCHAR *const Text2GCE[] = {$/;"	v	file:
Text2NE	Input/InputLookup.cpp	/^static const TCHAR *const Text2NE[] = {$/;"	v	file:
TextAutoClipped	Screen/GDI/Canvas.hpp	/^  void TextAutoClipped(int x, int y, const TCHAR *t) {$/;"	f	class:Canvas
TextAutoClipped	Screen/Memory/Canvas.hpp	/^  void TextAutoClipped(int x, int y, const TCHAR *t) {$/;"	f	class:Canvas
TextAutoClipped	Screen/OpenGL/Canvas.hpp	/^  void TextAutoClipped(int x, int y, const TCHAR *t) {$/;"	f	class:Canvas
TextButtonRenderer	Renderer/TextButtonRenderer.hpp	/^  TextButtonRenderer(const ButtonLook &_look,$/;"	f	class:TextButtonRenderer
TextButtonRenderer	Renderer/TextButtonRenderer.hpp	/^  explicit TextButtonRenderer(const ButtonLook &_look)$/;"	f	class:TextButtonRenderer
TextButtonRenderer	Renderer/TextButtonRenderer.hpp	/^class TextButtonRenderer : public ButtonRenderer {$/;"	c
TextCache	Screen/Custom/Cache.hpp	/^namespace TextCache {$/;"	n
TextCacheKey	Screen/Custom/Cache.cpp	/^  TextCacheKey(TextCacheKey &&other)$/;"	f	struct:TextCacheKey
TextCacheKey	Screen/Custom/Cache.cpp	/^  TextCacheKey(const Font &_font, const char *_text)$/;"	f	struct:TextCacheKey
TextCacheKey	Screen/Custom/Cache.cpp	/^struct TextCacheKey {$/;"	s	file:
TextEntryDialog	Dialogs/TextEntry.cpp	/^TextEntryDialog(TCHAR *text, size_t width,$/;"	f
TextEntryDialog	Dialogs/TextEntry.hpp	/^TextEntryDialog(BasicStringBuffer<TCHAR, N> &text,$/;"	f
TextInBox	Renderer/TextInBox.cpp	/^TextInBox(Canvas &canvas, const TCHAR *text, int x, int y,$/;"	f
TextInBoxMode	Renderer/TextInBox.hpp	/^struct TextInBoxMode {$/;"	s
TextInBoxMoveInView	Renderer/TextInBox.cpp	/^TextInBoxMoveInView(PixelRect &rc, const PixelRect &map_rc)$/;"	f	file:
TextInput	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  TextInput,$/;"	e	enum:ControlIndex	file:
TextInputStyle	Dialogs/DialogSettings.hpp	/^  enum class TextInputStyle : uint8_t {$/;"	c	struct:DialogSettings
TextListWidget	Widget/TextListWidget.hpp	/^class TextListWidget : public ListWidget {$/;"	c
TextMode	Device/Driver/FLARM/TextProtocol.cpp	/^FlarmDevice::TextMode(OperationEnvironment &env)$/;"	f	class:FlarmDevice
TextRenderer	Renderer/TextRenderer.hpp	/^class TextRenderer {$/;"	c
TextRowRenderer	Renderer/TextRowRenderer.hpp	/^class TextRowRenderer {$/;"	c
TextSize	Screen/Android/Font.cpp	/^Font::TextSize(const TCHAR *text) const$/;"	f	class:Font
TextSize	Screen/Apple/Font.cpp	/^Font::TextSize(const TCHAR *text) const$/;"	f	class:Font
TextSize	Screen/FreeType/Font.cpp	/^Font::TextSize(const TCHAR *text) const$/;"	f	class:Font
TextSize	Screen/GDI/Font.cpp	/^Font::TextSize(const TCHAR *text) const$/;"	f	class:Font
TextTextureGL	Screen/Android/Font.cpp	/^Font::TextTextureGL(const TCHAR *text, PixelSize &size,$/;"	f	class:Font
TextUtil	Android/TextUtil.cpp	/^TextUtil::TextUtil(jobject _obj)$/;"	f	class:TextUtil
TextUtil	Android/TextUtil.hpp	/^class TextUtil : protected Java::GlobalObject {$/;"	c
TextWidget	Widget/TextWidget.hpp	/^class TextWidget : public WindowWidget {$/;"	c
TextWriter	IO/TextWriter.cpp	/^TextWriter::TextWriter(Path path, bool append)$/;"	f	class:TextWriter
TextWriter	IO/TextWriter.hpp	/^  TextWriter(TextWriter &&other)$/;"	f	class:TextWriter
TextWriter	IO/TextWriter.hpp	/^class TextWriter {$/;"	c
Texture	Android/TextUtil.hpp	/^    Texture(unsigned _id, unsigned _width, unsigned _height,$/;"	f	struct:TextUtil::Texture
Texture	Android/TextUtil.hpp	/^  struct Texture {$/;"	s	class:TextUtil
Thermal	Tracking/SkyLines/Data.hpp	/^    Thermal(const AGeoPoint &_bottom, const AGeoPoint &_top, double _lift)$/;"	f	struct:SkyLinesTracking::Data::Thermal
Thermal	Tracking/SkyLines/Data.hpp	/^  struct Thermal {$/;"	s	struct:SkyLinesTracking::Data
Thermal	Tracking/SkyLines/Protocol.hpp	/^struct Thermal {$/;"	s	namespace:SkyLinesTracking
ThermalAssistantLook	Look/ThermalAssistantLook.hpp	/^struct ThermalAssistantLook {$/;"	s
ThermalAssistantPosition	UISettings.hpp	/^  enum class ThermalAssistantPosition: uint8_t {$/;"	c	struct:UISettings
ThermalAssistantRenderer	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::ThermalAssistantRenderer(const ThermalAssistantLook &_look,$/;"	f	class:ThermalAssistantRenderer
ThermalAssistantRenderer	Gauge/ThermalAssistantRenderer.hpp	/^class ThermalAssistantRenderer$/;"	c
ThermalAssistantWindow	Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::ThermalAssistantWindow(const ThermalAssistantLook &_look,$/;"	f	class:ThermalAssistantWindow
ThermalAssistantWindow	Gauge/ThermalAssistantWindow.hpp	/^class ThermalAssistantWindow : public AntiFlickerWindow$/;"	c
ThermalBand	Engine/ThermalBand/ThermalBand.hpp	/^class ThermalBand {$/;"	c
ThermalBandComputer	Computer/ThermalBandComputer.hpp	/^class ThermalBandComputer {$/;"	c
ThermalBandLook	Look/ThermalBandLook.hpp	/^struct ThermalBandLook {$/;"	s
ThermalBandRenderer	Renderer/ThermalBandRenderer.hpp	/^  ThermalBandRenderer(const ThermalBandLook &_look,$/;"	f	class:ThermalBandRenderer
ThermalBandRenderer	Renderer/ThermalBandRenderer.hpp	/^class ThermalBandRenderer {$/;"	c
ThermalEncounterBand	Engine/ThermalBand/ThermalEncounterBand.hpp	/^class ThermalEncounterBand: public ThermalBand$/;"	c
ThermalEncounterCollection	Engine/ThermalBand/ThermalEncounterCollection.hpp	/^class ThermalEncounterCollection: public ThermalBand {$/;"	c
ThermalExpressCreateOnPort	Device/Driver/ThermalExpress/Driver.cpp	/^ThermalExpressCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ThermalExpressDevice	Device/Driver/ThermalExpress/Driver.hpp	/^class ThermalExpressDevice : public AbstractDevice {$/;"	c
ThermalLocator	Computer/ThermalLocator.hpp	/^class ThermalLocator {$/;"	c
ThermalLocatorInfo	NMEA/ThermalLocator.hpp	/^struct ThermalLocatorInfo$/;"	s
ThermalMapItem	MapWindow/Items/MapItem.hpp	/^  ThermalMapItem(const ThermalSource &_thermal)$/;"	f	struct:ThermalMapItem
ThermalMapItem	MapWindow/Items/MapItem.hpp	/^struct ThermalMapItem: public MapItem$/;"	s
ThermalRequestPacket	Tracking/SkyLines/Protocol.hpp	/^struct ThermalRequestPacket {$/;"	s	namespace:SkyLinesTracking
ThermalResponsePacket	Tracking/SkyLines/Protocol.hpp	/^struct ThermalResponsePacket {$/;"	s	namespace:SkyLinesTracking
ThermalResponseSender	Cloud/Sender.hpp	/^  ThermalResponseSender(SkyLinesTracking::Server &_server,$/;"	f	class:ThermalResponseSender
ThermalResponseSender	Cloud/Sender.hpp	/^class ThermalResponseSender {$/;"	c
ThermalSlice	Engine/ThermalBand/ThermalSlice.hpp	/^struct ThermalSlice {$/;"	s
ThermalSource	NMEA/ThermalLocator.hpp	/^struct ThermalSource$/;"	s
ThermalSources	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::ThermalSources(const MoreData &basic,$/;"	f	class:GlideComputerAirData
ThermalSubmitPacket	Tracking/SkyLines/Protocol.hpp	/^struct ThermalSubmitPacket {$/;"	s	namespace:SkyLinesTracking
Thin	Engine/Trace/Trace.cpp	/^Trace::Thin()$/;"	f	class:Trace
Thin2	Engine/Trace/Trace.cpp	/^Trace::Thin2()$/;"	f	class:Trace
ThinToSize	Geo/SearchPointVector.cpp	/^SearchPointVector::ThinToSize(const unsigned max_size)$/;"	f	class:SearchPointVector
Thre	Dialogs/Device/FLARM/ConfigWidget.hpp	/^    Thre,$/;"	e	enum:final::Controls
Thread	Thread/SuspensibleThread.hpp	/^  SuspensibleThread(const char *_name) noexcept:Thread(_name) {}$/;"	f	class:SuspensibleThread
Thread	Thread/Thread.hpp	/^class Thread {$/;"	c
ThreadHandle	Thread/Handle.hpp	/^class ThreadHandle {$/;"	c
ThreadedOperationEnvironment	Operation/ThreadedOperationEnvironment.cpp	/^ThreadedOperationEnvironment::ThreadedOperationEnvironment(OperationEnvironment &_other)$/;"	f	class:ThreadedOperationEnvironment
ThreadedOperationEnvironment	Operation/ThreadedOperationEnvironment.hpp	/^class ThreadedOperationEnvironment$/;"	c
Threshold	Engine/Task/Shapes/FAITriangleSettings.hpp	/^  enum class Threshold : uint8_t {$/;"	c	struct:FAITriangleSettings
ThrowError	Lua/Catch.cpp	/^Lua::ThrowError(lua_State *L, Error &&error)$/;"	f	class:Lua
ThrowException	Util/Exception.hxx	/^ThrowException(T &&t)$/;"	f
ThrowException	Util/Exception.hxx	/^ThrowException(std::exception_ptr ep)$/;"	f
Tick	Device/MultipleDevices.cpp	/^MultipleDevices::Tick()$/;"	f	class:MultipleDevices
Tick	Logger/FlightLogger.cpp	/^FlightLogger::Tick(const MoreData &basic, const DerivedInfo &calculated)$/;"	f	class:FlightLogger
Tick	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::Tick(const NMEAInfo &basic,$/;"	f	class:SkyLinesTracking::Glue
TickInternal	Logger/FlightLogger.cpp	/^FlightLogger::TickInternal(const MoreData &basic,$/;"	f	class:FlightLogger
TiffLoader	Screen/Custom/LibTiff.cpp	/^  explicit TiffLoader(Path path)$/;"	f	class:TiffLoader
TiffLoader	Screen/Custom/LibTiff.cpp	/^class TiffLoader {$/;"	c	file:
TiffOpen	Screen/Custom/LibTiff.cpp	/^TiffOpen(Path path, const char *mode)$/;"	f	file:
TiffPixelToGeoPoint	Screen/Custom/LibTiff.cpp	/^TiffPixelToGeoPoint(GTIF &gtif, GTIFDefn &defn, double x, double y)$/;"	f	file:
TimeConfigPanel	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  TimeConfigPanel()$/;"	f	class:final
TimeEntryDialog	Dialogs/TimeEntry.cpp	/^TimeEntryDialog(const TCHAR *caption, RoughTime &value,$/;"	f
TimeHasAdvanced	Device/Parser.cpp	/^NMEAParser::TimeHasAdvanced(double this_time, NMEAInfo &info)$/;"	f	class:NMEAParser
TimeHasAdvanced	Device/Parser.cpp	/^NMEAParser::TimeHasAdvanced(double this_time, double &last_time, NMEAInfo &info)$/;"	f	class:NMEAParser
TimeHasAdvanced	Device/Parser.cpp	/^TimeHasAdvanced(double this_time, double last_time)$/;"	f	file:
TimeLocal	Time/LocalTime.cpp	/^TimeLocal(int localtime, RoughTimeDelta utc_offset)$/;"	f
TimeMetric	Engine/Trace/Trace.hpp	/^    static unsigned TimeMetric(const TracePoint &last, const TracePoint &node,$/;"	f	struct:Trace::TraceDelta
TimeUnderStartMaxHeight	Engine/Task/Stats/CommonStats.hpp	/^  double TimeUnderStartMaxHeight;$/;"	m	class:CommonStats
TimeoutClock	Time/TimeoutClock.hpp	/^class TimeoutClock : private PeriodClock {$/;"	c
TimerQueue	Event/Shared/TimerQueue.hpp	/^class TimerQueue {$/;"	c
TimerRecord	Event/Shared/TimerQueue.hpp	/^  struct TimerRecord {$/;"	s	class:TimerQueue
TimesStatusPanel	Dialogs/StatusPanels/TimesStatusPanel.hpp	/^  TimesStatusPanel(const DialogLook &look):StatusPanel(look) {}$/;"	f	class:TimesStatusPanel
TimesStatusPanel	Dialogs/StatusPanels/TimesStatusPanel.hpp	/^class TimesStatusPanel : public StatusPanel {$/;"	c
ToASCII	Device/Driver/CAI302/Manage.cpp	/^ToASCII(char *dest, size_t dest_size, const TCHAR *src)$/;"	f	file:
ToAbsoluteFloat	Math/Angle.hpp	/^    constexpr double ToAbsoluteFloat() const {$/;"	f	struct:Angle::DMS
ToAbsolutePathChecked	Android/Environment.cpp	/^ToAbsolutePathChecked(JNIEnv *env, jobject file)$/;"	f	file:
ToAircraftState	NMEA/Aircraft.cpp	/^ToAircraftState(const MoreData &info, const DerivedInfo &calculated)$/;"	f
ToAngle	Lua/Geo.cpp	/^Angle ToAngle(lua_State *L, int idx) {$/;"	f	namespace:Lua
ToArrayQuadrilateral	MapWindow/OverlayBitmap.cpp	/^ToArrayQuadrilateral(const GeoQuadrilateral q)$/;"	f	file:
ToBE16	OS/ByteOrder.hpp	/^ToBE16(uint16_t value)$/;"	f
ToBE32	OS/ByteOrder.hpp	/^ToBE32(uint32_t value)$/;"	f
ToBE64	OS/ByteOrder.hpp	/^ToBE64(uint64_t value)$/;"	f
ToBox	MapWindow/OverlayBitmap.cpp	/^ToBox(const GeoBounds b)$/;"	f	file:
ToBrokenDateTime	Time/BrokenDateTime.cpp	/^ToBrokenDateTime(const FILETIME &ft)$/;"	f	file:
ToBrokenDateTime	Time/BrokenDateTime.cpp	/^ToBrokenDateTime(const SYSTEMTIME st)$/;"	f	file:
ToBrokenDateTime	Time/BrokenDateTime.cpp	/^ToBrokenDateTime(const struct tm &tm)$/;"	f	file:
ToCelsius	Atmosphere/Temperature.hpp	/^  constexpr double ToCelsius() const {$/;"	f	class:Temperature
ToDMM	Math/Angle.cpp	/^Angle::ToDMM(unsigned &dd, unsigned &mm, unsigned &mmm,$/;"	f	class:Angle
ToDMS	Math/Angle.cpp	/^Angle::ToDMS() const$/;"	f	class:Angle
ToDouble	Terrain/Height.hpp	/^  constexpr double ToDouble(double invalid_value,$/;"	f	class:TerrainHeight
ToFileTime	Time/BrokenDateTime.cpp	/^ToFileTime(const BrokenDateTime &dt)$/;"	f	file:
ToFilter	Dialogs/Waypoint/WaypointList.cpp	/^  void ToFilter(WaypointFilter &filter, Angle heading) const {$/;"	f	struct:WaypointListDialogState
ToFix	Tracking/SkyLines/Assemble.cpp	/^SkyLinesTracking::ToFix(uint64_t key, const NMEAInfo &basic)$/;"	f	class:SkyLinesTracking
ToFloat	Math/Angle.hpp	/^    constexpr double ToFloat() const {$/;"	f	struct:Angle::DMS
ToGLM	Screen/OpenGL/Geo.cpp	/^ToGLM(const WindowProjection &projection, const GeoPoint &reference)$/;"	f
ToGLexact	Screen/OpenGL/Types.hpp	/^ToGLexact(GLvalue value)$/;"	f
ToGeoBounds	Terrain/WorldFile.cpp	/^  GeoBounds ToGeoBounds(unsigned width, unsigned height) const {$/;"	f	struct:WorldFileData
ToGeoPoint	Geo/UTM.cpp	/^UTM::ToGeoPoint() const$/;"	f	class:UTM
ToGeoPoint	Lua/Geo.cpp	/^GeoPoint ToGeoPoint(lua_State *L, int idx) {$/;"	f	namespace:Lua
ToGeoPoint	Topography/TopographyFile.hpp	/^  GeoPoint ToGeoPoint(const ShapePoint &p) const {$/;"	f	class:TopographyFile
ToHalfHours	Weather/Rasp/RaspCache.cpp	/^ToHalfHours(BrokenTime t)$/;"	f	file:
ToInteger	Screen/Memory/PixelTraits.hpp	/^  static constexpr integer_type ToInteger(color_type c) {$/;"	f	struct:BGRAPixelTraits
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const AGeoPoint p)$/;"	f	file:
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudClient &client)$/;"	f	file:
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudClientContainer &clients)$/;"	f	file:
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudData &data)$/;"	f	file:
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudThermal &thermal)$/;"	f	file:
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const CloudThermalContainer &thermals)$/;"	f	file:
ToKML	Cloud/ToKML.cpp	/^ToKML(BufferedOutputStream &os, const GeoPoint p)$/;"	f	file:
ToKelvin	Atmosphere/Temperature.hpp	/^  constexpr double ToKelvin() const {$/;"	f	class:Temperature
ToLE16	OS/ByteOrder.hpp	/^ToLE16(uint16_t value)$/;"	f
ToLE32	OS/ByteOrder.hpp	/^ToLE32(uint32_t value)$/;"	f
ToLE64	OS/ByteOrder.hpp	/^ToLE64(uint64_t value)$/;"	f
ToMask	Util/EnumBitSet.hpp	/^  static constexpr I ToMask(E e) {$/;"	f	class:EnumBitSet
ToMask	Util/EnumBitSet.hpp	/^  static constexpr I ToMask(E e, Args&&... args) {$/;"	f	class:EnumBitSet
ToNative	Atmosphere/Temperature.hpp	/^  constexpr double ToNative() const {$/;"	f	class:Temperature
ToOrigin	Form/ScrollBar.cpp	/^ScrollBar::ToOrigin(unsigned size, unsigned view_size, int y) const$/;"	f	class:ScrollBar
ToOrigin	Widget/SolidWidget.cpp	/^ToOrigin(PixelRect rc)$/;"	f	file:
ToOverview	Terrain/RasterTraits.hpp	/^  constexpr unsigned ToOverview(unsigned x) {$/;"	f	namespace:RasterTraits
ToOverviewCeil	Terrain/RasterTraits.hpp	/^  constexpr unsigned ToOverviewCeil(unsigned x) {$/;"	f	namespace:RasterTraits
ToPolarInfo	Polar/PolarStore.cpp	/^PolarStore::Item::ToPolarInfo() const$/;"	f	class:PolarStore::Item
ToPolarShape	Polar/PolarStore.cpp	/^PolarStore::Item::ToPolarShape() const$/;"	f	class:PolarStore::Item
ToRGB565	Screen/Memory/Export.hpp	/^ToRGB565(BGRA8Color c)$/;"	f
ToScreen	Renderer/ChartRenderer.cpp	/^ChartRenderer::Axis::ToScreen(double value) const$/;"	f	class:ChartRenderer::Axis
ToScreen	Renderer/ChartRenderer.hpp	/^  PixelPoint ToScreen(double x, double y) const {$/;"	f	class:ChartRenderer
ToString	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^ToString(NetState state)$/;"	f	file:
ToString	FLARM/Error.cpp	/^FlarmError::ToString(Code code)$/;"	f	class:FlarmError
ToString	FLARM/Error.cpp	/^FlarmError::ToString(Severity severity)$/;"	f	class:FlarmError
ToString	Java/Exception.cxx	/^	:std::runtime_error(Java::String(env, Object::toString(env, e)).ToString())$/;"	f
ToSysAltitude	Units/Units.hpp	/^  ToSysAltitude(double value)$/;"	f	namespace:Units
ToSysDistance	Units/Units.hpp	/^  ToSysDistance(double value)$/;"	f	namespace:Units
ToSysPressure	Units/Units.hpp	/^  ToSysPressure(double Value)$/;"	f	namespace:Units
ToSysSpeed	Units/Units.hpp	/^  ToSysSpeed(double value)$/;"	f	namespace:Units
ToSysTaskSpeed	Units/Units.hpp	/^  ToSysTaskSpeed(double value)$/;"	f	namespace:Units
ToSysUnit	Units/System.cpp	/^Units::ToSysUnit(double value, Unit unit)$/;"	f	class:Units
ToSysVSpeed	Units/Units.hpp	/^  ToSysVSpeed(double value)$/;"	f	namespace:Units
ToSysWindSpeed	Units/Units.hpp	/^  ToSysWindSpeed(double value)$/;"	f	namespace:Units
ToSystemTime	Time/BrokenDateTime.cpp	/^ToSystemTime(const BrokenDateTime &dt)$/;"	f	file:
ToUTF8	OS/Path.cpp	/^Path::ToUTF8() const$/;"	f	class:Path
ToUTF8	OS/Path.hpp	/^  std::string ToUTF8() const {$/;"	f	class:AllocatedPath
ToUnixTimeUTC	Time/BrokenDateTime.cpp	/^BrokenDateTime::ToUnixTimeUTC() const$/;"	f	class:BrokenDateTime
ToUser	Units/Temperature.cpp	/^Temperature::ToUser() const$/;"	f	class:Temperature
ToUserAltitude	Units/Units.hpp	/^  ToUserAltitude(double value)$/;"	f	namespace:Units
ToUserDistance	Units/Units.hpp	/^  ToUserDistance(double value)$/;"	f	namespace:Units
ToUserPressure	Units/Units.cpp	/^Units::ToUserPressure(AtmosphericPressure value)$/;"	f	class:Units
ToUserPressure	Units/Units.hpp	/^  ToUserPressure(double Value)$/;"	f	namespace:Units
ToUserSpeed	Units/Units.hpp	/^  ToUserSpeed(double value)$/;"	f	namespace:Units
ToUserTaskSpeed	Units/Units.hpp	/^  ToUserTaskSpeed(double value)$/;"	f	namespace:Units
ToUserUnit	Units/System.cpp	/^Units::ToUserUnit(double value, Unit unit)$/;"	f	class:Units
ToUserVSpeed	Units/Units.hpp	/^  ToUserVSpeed(double value)$/;"	f	namespace:Units
ToUserWindSpeed	Units/Units.hpp	/^  ToUserWindSpeed(double value)$/;"	f	namespace:Units
ToViewport	Screen/OpenGL/Rotate.cpp	/^OpenGL::ToViewport(PixelRect &rc)$/;"	f	class:OpenGL
ToZero	Audio/ToneSynthesiser.cpp	/^ToneSynthesiser::ToZero() const$/;"	f	class:ToneSynthesiser
TodayUTC	Time/BrokenDate.cpp	/^BrokenDate::TodayUTC()$/;"	f	class:BrokenDate
ToggleArmed	Engine/Task/Ordered/TaskAdvance.cpp	/^TaskAdvance::ToggleArmed()$/;"	f	class:TaskAdvance
ToggleAutoZoom	Gauge/BigTrafficWidget.cpp	/^  void ToggleAutoZoom() {$/;"	f	class:FlarmTrafficControl
ToggleAutoZoom	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::ToggleAutoZoom()$/;"	f	class:TrafficWidget
ToggleForceFLARMRadar	MainWindow.cpp	/^MainWindow::ToggleForceFLARMRadar()$/;"	f	class:MainWindow
ToggleLargeExtra	Widget/TabWidget.hpp	/^  void ToggleLargeExtra() {$/;"	f	class:TabWidget
ToggleNorthUp	Gauge/BigTrafficWidget.cpp	/^  void ToggleNorthUp() {$/;"	f	class:FlarmTrafficControl
ToggleNorthUp	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::ToggleNorthUp()$/;"	f	class:TrafficWidget
TogglePan	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::TogglePan()$/;"	f	class:GlueMapWindow
TogglePan	Pan.cpp	/^TogglePan()$/;"	f
TogglePause	Dialogs/Device/PortMonitor.cpp	/^PortMonitorWidget::TogglePause()$/;"	f	class:PortMonitorWidget
ToggleSuppressFLARMRadar	MainWindow.cpp	/^MainWindow::ToggleSuppressFLARMRadar()$/;"	f	class:MainWindow
ToggleWifi	Kobo/NetworkDialog.cpp	/^NetworkWidget::ToggleWifi()$/;"	f	class:NetworkWidget
TokenTypeTag	XML/Parser.cpp	/^  enum TokenTypeTag {$/;"	g	namespace:XML	file:
ToneClimbComparisonType	Dialogs/Device/Vega/Schemes.hpp	/^  int ToneClimbComparisonType;$/;"	m	struct:VEGA_SCHEME
ToneLiftComparisonType	Dialogs/Device/Vega/Schemes.hpp	/^  int ToneLiftComparisonType;$/;"	m	struct:VEGA_SCHEME
ToneSynthesiser	Audio/ToneSynthesiser.hpp	/^  explicit ToneSynthesiser(unsigned _sample_rate) : sample_rate(_sample_rate) {$/;"	f	class:ToneSynthesiser
ToneSynthesiser	Audio/ToneSynthesiser.hpp	/^class ToneSynthesiser : public PCMSynthesiser {$/;"	c
TooClose	Engine/Route/FlatTriangleFanTree.cpp	/^TooClose(const FlatGeoPoint p1, const FlatGeoPoint p2)$/;"	f	file:
ToolsWidget	Kobo/ToolsDialog.cpp	/^  ToolsWidget(const DialogLook &look):RowFormWidget(look) {}$/;"	f	class:final
TopCanvas	Screen/Custom/TopCanvas.hpp	/^  TopCanvas()$/;"	f	class:DisplayOrientation
TopCanvas	Screen/Custom/TopCanvas.hpp	/^  TopCanvas():tty_fd(-1) {}$/;"	f	class:DisplayOrientation
TopLeft	Gauge/TrafficSettings.hpp	/^    TopLeft,$/;"	m	class:TrafficSettings::GaugeLocation
TopRight	Gauge/TrafficSettings.hpp	/^    TopRight,$/;"	m	class:TrafficSettings::GaugeLocation
TopWindow	Screen/TopWindow.hpp	/^class TopWindow : public ContainerWindow {$/;"	c
TopWindowStyle	Screen/TopWindow.hpp	/^  TopWindowStyle()$/;"	f	class:DisplayOrientation
TopWindowStyle	Screen/TopWindow.hpp	/^  TopWindowStyle(const WindowStyle other)$/;"	f	class:DisplayOrientation
TopographyFile	Topography/TopographyFile.cpp	/^TopographyFile::TopographyFile(zzip_dir *_dir, const char *filename,$/;"	f	class:TopographyFile
TopographyFile	Topography/TopographyFile.hpp	/^class TopographyFile {$/;"	c
TopographyFileRenderer	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::TopographyFileRenderer(const TopographyFile &_file,$/;"	f	class:TopographyFileRenderer
TopographyLook	Look/TopographyLook.hpp	/^struct TopographyLook {$/;"	s
TopographyRenderer	Topography/TopographyRenderer.cpp	/^TopographyRenderer::TopographyRenderer(const TopographyStore &_store,$/;"	f	class:TopographyRenderer
TopographyRenderer	Topography/TopographyRenderer.hpp	/^class TopographyRenderer : private NonCopyable {$/;"	c
TopographyStore	Topography/TopographyStore.hpp	/^  TopographyStore():serial(0) {}$/;"	f	class:TopographyStore
TopographyStore	Topography/TopographyStore.hpp	/^class TopographyStore : private NonCopyable {$/;"	c
TopographyThread	Topography/Thread.cpp	/^TopographyThread::TopographyThread(TopographyStore &_store,$/;"	f	class:TopographyThread
Touch	Device/Simulator.cpp	/^Simulator::Touch(NMEAInfo &basic)$/;"	f	class:Simulator
Touch	OS/FileUtil.cpp	/^File::Touch(Path path)$/;"	f	class:File
TouchTextEntry	Dialogs/TouchTextEntry.cpp	/^TouchTextEntry(TCHAR *text, size_t width,$/;"	f
TouringTaskFactory	Engine/Task/Factory/TouringTaskFactory.cpp	/^TouringTaskFactory::TouringTaskFactory(OrderedTask& _task,$/;"	f	class:TouringTaskFactory
TouringTaskFactory	Engine/Task/Factory/TouringTaskFactory.hpp	/^class TouringTaskFactory: $/;"	c
Trace	Engine/Trace/Trace.cpp	/^Trace::Trace(const unsigned _no_thin_time, const unsigned max_time,$/;"	f	class:Trace
Trace	Engine/Trace/Trace.hpp	/^class Trace : private NonCopyable$/;"	c
TraceComputer	Computer/TraceComputer.cpp	/^TraceComputer::TraceComputer()$/;"	f	class:TraceComputer
TraceComputer	Computer/TraceComputer.hpp	/^class TraceComputer {$/;"	c
TraceDelta	Engine/Trace/Trace.hpp	/^    TraceDelta(const TracePoint &p_last, const TracePoint &p,$/;"	f	struct:Trace::TraceDelta
TraceDelta	Engine/Trace/Trace.hpp	/^    explicit TraceDelta(const TracePoint &p)$/;"	f	struct:Trace::TraceDelta
TraceDelta	Engine/Trace/Trace.hpp	/^  struct TraceDelta$/;"	s	class:Trace
TraceHistory	Engine/Navigation/TraceHistory.hpp	/^class TraceHistory {$/;"	c
TraceHistoryLook	Look/TraceHistoryLook.hpp	/^struct TraceHistoryLook {$/;"	s
TraceHistoryRenderer	Renderer/TraceHistoryRenderer.hpp	/^  TraceHistoryRenderer(const TraceHistoryLook &_look,$/;"	f	class:TraceHistoryRenderer
TraceHistoryRenderer	Renderer/TraceHistoryRenderer.hpp	/^class TraceHistoryRenderer {$/;"	c
TraceManager	Engine/Contest/Solvers/TraceManager.hpp	/^class TraceManager {$/;"	c
TracePoint	Engine/Trace/Point.cpp	/^TracePoint::TracePoint(const AircraftState &state):$/;"	f	class:TracePoint
TracePoint	Engine/Trace/Point.cpp	/^TracePoint::TracePoint(const MoreData &basic)$/;"	f	class:TracePoint
TracePoint	Engine/Trace/Point.hpp	/^  TracePoint(const GeoPoint &location, unsigned _time,$/;"	f	class:TracePoint
TracePoint	Engine/Trace/Point.hpp	/^class TracePoint : public SearchPoint$/;"	c
TracePointVector	Engine/Trace/Vector.hpp	/^class TracePointVector : public std::vector<TracePoint> {$/;"	c
TracePointerVector	Engine/Trace/Vector.hpp	/^class TracePointerVector : public std::vector<const TracePoint *> {$/;"	c
TraceVariableHistory	Engine/Navigation/TraceHistory.hpp	/^class TraceVariableHistory: public TrivialOverwritingRingBuffer<double, 30> {};$/;"	c
TrackFlarm	TeamActions.cpp	/^TeamActions::TrackFlarm(FlarmId id, const TCHAR *callsign)$/;"	f	class:TeamActions
TrackFlarm	TeamCode/Settings.cpp	/^TeamCodeSettings::TrackFlarm(FlarmId id, const TCHAR *name)$/;"	f	class:TeamCodeSettings
TrackLineRenderer	Renderer/TrackLineRenderer.hpp	/^  TrackLineRenderer(const MapLook &_look):look(_look) {}$/;"	f	class:TrackLineRenderer
TrackLineRenderer	Renderer/TrackLineRenderer.hpp	/^class TrackLineRenderer {$/;"	c
TrackingConfigPanel	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  TrackingConfigPanel()$/;"	f	class:final
TrackingGestureManager	UIUtil/TrackingGestureManager.hpp	/^class TrackingGestureManager: public GestureManager$/;"	c
TrackingGlue	Tracking/TrackingGlue.cpp	/^TrackingGlue::TrackingGlue(boost::asio::io_context &io_context)$/;"	f	class:TrackingGlue
TrackingSettings	Tracking/TrackingSettings.hpp	/^struct TrackingSettings {$/;"	s
Traffic	Tracking/SkyLines/Data.hpp	/^    constexpr Traffic(uint32_t _time, GeoPoint _location,$/;"	f	struct:SkyLinesTracking::Data::Traffic
Traffic	Tracking/SkyLines/Data.hpp	/^  struct Traffic {$/;"	s	struct:SkyLinesTracking::Data
Traffic	Tracking/SkyLines/Protocol.hpp	/^  struct Traffic {$/;"	s	struct:SkyLinesTracking::TrafficResponsePacket
TrafficDatabases	FLARM/TrafficDatabases.hpp	/^  TrafficDatabases()$/;"	f	struct:TrafficDatabases
TrafficDatabases	FLARM/TrafficDatabases.hpp	/^struct TrafficDatabases {$/;"	s
TrafficFilterWidget	Dialogs/Traffic/TrafficList.cpp	/^  TrafficFilterWidget(const DialogLook &look)$/;"	f	class:TrafficFilterWidget
TrafficFilterWidget	Dialogs/Traffic/TrafficList.cpp	/^class TrafficFilterWidget : public RowFormWidget {$/;"	c	file:
TrafficIndex	FLARM/List.hpp	/^  unsigned TrafficIndex(const FlarmTraffic *t) const {$/;"	f	struct:TrafficList
TrafficList	FLARM/List.hpp	/^struct TrafficList {$/;"	s
TrafficListButtons	Dialogs/Traffic/TrafficList.cpp	/^  TrafficListButtons(const DialogLook &look, ActionListener &_dialog)$/;"	f	class:TrafficListButtons
TrafficListButtons	Dialogs/Traffic/TrafficList.cpp	/^class TrafficListButtons : public RowFormWidget {$/;"	c	file:
TrafficListDialog	Dialogs/Traffic/TrafficList.cpp	/^TrafficListDialog()$/;"	f
TrafficListWidget	Dialogs/Traffic/TrafficList.cpp	/^  TrafficListWidget(ActionListener &_action_listener,$/;"	f	class:TrafficListWidget
TrafficListWidget	Dialogs/Traffic/TrafficList.cpp	/^class TrafficListWidget : public ListWidget, public DataFieldListener,$/;"	c	file:
TrafficLook	Look/TrafficLook.hpp	/^struct TrafficLook {$/;"	s
TrafficMapItem	MapWindow/Items/MapItem.hpp	/^  TrafficMapItem(FlarmId _id, FlarmColor _color)$/;"	f	struct:TrafficMapItem
TrafficMapItem	MapWindow/Items/MapItem.hpp	/^struct TrafficMapItem: public MapItem$/;"	s
TrafficRenderer	Renderer/TrafficRenderer.hpp	/^namespace TrafficRenderer$/;"	n
TrafficRequestPacket	Tracking/SkyLines/Protocol.hpp	/^struct TrafficRequestPacket {$/;"	s	namespace:SkyLinesTracking
TrafficResponsePacket	Tracking/SkyLines/Protocol.hpp	/^struct TrafficResponsePacket {$/;"	s	namespace:SkyLinesTracking
TrafficResponseSender	Cloud/Sender.hpp	/^  TrafficResponseSender(SkyLinesTracking::Server &_server,$/;"	f	class:TrafficResponseSender
TrafficResponseSender	Cloud/Sender.hpp	/^class TrafficResponseSender {$/;"	c
TrafficSettings	Gauge/TrafficSettings.hpp	/^struct TrafficSettings {$/;"	s
TrafficWidget	Gauge/BigTrafficWidget.hpp	/^class TrafficWidget : public ContainerWidget,$/;"	c
TrailDrift	Dialogs/Settings/WindSettingsPanel.hpp	/^    TrailDrift,$/;"	e	enum:final::ControlIndex
TrailDrift	Profile/ProfileKeys.cpp	/^const char TrailDrift[] = "TrailDrift";$/;"	m	namespace:ProfileKeys	file:
TrailLook	Look/TrailLook.hpp	/^struct TrailLook {$/;"	s
TrailRenderer	Renderer/TrailRenderer.hpp	/^  TrailRenderer(const TrailLook &_look):look(_look) {}$/;"	f	class:TrailRenderer
TrailRenderer	Renderer/TrailRenderer.hpp	/^class TrailRenderer {$/;"	c
TrailSettings	MapSettings.hpp	/^struct TrailSettings {$/;"	s
TransformChannels	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type a, color_type b, F f) {$/;"	f	struct:BGRAPixelTraits
TransformChannels	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type a, color_type b, F f) {$/;"	f	struct:GreyscalePixelTraits
TransformChannels	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type c, F f) {$/;"	f	struct:BGRAPixelTraits
TransformChannels	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformChannels(color_type c, F f) {$/;"	f	struct:GreyscalePixelTraits
TransformInteger	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type a, color_type b, F f) {$/;"	f	struct:BGRAPixelTraits
TransformInteger	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type a, color_type b, F f) {$/;"	f	struct:GreyscalePixelTraits
TransformInteger	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type c, F f) {$/;"	f	struct:BGRAPixelTraits
TransformInteger	Screen/Memory/PixelTraits.hpp	/^  static color_type TransformInteger(color_type c, F f) {$/;"	f	struct:GreyscalePixelTraits
TransitionConstraint	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::TransitionConstraint(const GeoPoint &location,$/;"	f	class:ObservationZoneClient
TransitionEnter	Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::TransitionEnter(const AircraftState &ref_now,$/;"	f	class:ScoredTaskPoint
TransitionExit	Engine/Task/Points/ScoredTaskPoint.cpp	/^ScoredTaskPoint::TransitionExit(const AircraftState &ref_now,$/;"	f	class:ScoredTaskPoint
TranslateDefaultDisplayOrientation	DisplayOrientation.hpp	/^TranslateDefaultDisplayOrientation(DisplayOrientation orientation)$/;"	f
TranslateDimension	Screen/FB/TopCanvas.cpp	/^TranslateDimension(unsigned value)$/;"	f	file:
TranslateKeyCode	Android/EventBridge.cpp	/^TranslateKeyCode(unsigned key_code)$/;"	f	file:
TranslateKeyCode	Event/Poll/Linux/Translate.hpp	/^TranslateKeyCode(unsigned key_code, bool &is_char)$/;"	f
Transparent	Screen/Memory/Color.hpp	/^  static constexpr Color Transparent() {$/;"	f	class:Color
Transparent	Screen/OpenGL/Color.hpp	/^  static constexpr Color Transparent() {$/;"	f	class:Color
TransparentInvertPixelOperations	Screen/Memory/PixelOperations.hpp	/^  constexpr TransparentInvertPixelOperations(color_type _key):key(_key) {}$/;"	f	class:TransparentInvertPixelOperations
TransparentInvertPixelOperations	Screen/Memory/PixelOperations.hpp	/^class TransparentInvertPixelOperations$/;"	c
TransparentPixelOperations	Screen/Memory/Optimised.hpp	/^  explicit constexpr TransparentPixelOperations(const color_type key)$/;"	f	struct:TransparentPixelOperations
TransparentPixelOperations	Screen/Memory/Optimised.hpp	/^struct TransparentPixelOperations$/;"	s
TransparentPixelOperations	Screen/Memory/Optimised.hpp	/^struct TransparentPixelOperations<GreyscalePixelTraits>$/;"	s
TransparentRendererCache	Renderer/TransparentRendererCache.hpp	/^class TransparentRendererCache {$/;"	c
Tree	Cloud/Client.hpp	/^                                        CloudClientIndexable> Tree;$/;"	t	class:CloudClientContainer
Tree	Cloud/Thermal.hpp	/^                                        CloudThermalIndexable> Tree;$/;"	t	class:CloudThermalContainer
TriState	Util/TriState.hpp	/^enum class TriState : uint8_t {$/;"	c
TriStateJob	Job/TriStateJob.hpp	/^  explicit TriStateJob(Args&&... args)$/;"	f	class:final
TriStateJobResult	Job/TriStateJob.hpp	/^enum class TriStateJobResult {$/;"	c
TriangleCompound	MapWindow/MapWindowGlideRange.cpp	/^  TriangleCompound(const FlatProjection &_flat_projection,$/;"	f	class:final
TriangleContest	Engine/Contest/Solvers/OLCFAI.cpp	/^  :TriangleContest(_trace, predict, 1000)$/;"	f
TriangleContest	Engine/Contest/Solvers/TriangleContest.hpp	/^class TriangleContest : public AbstractContest, public TraceManager {$/;"	c
TriangleEmpty	Screen/OpenGL/Triangulate.cpp	/^TriangleEmpty(const PT &a, const PT &b, const PT &c)$/;"	f	file:
TriangleToStrip	Screen/OpenGL/Triangulate.cpp	/^TriangleToStrip(GLushort *triangles, unsigned index_count,$/;"	f
Trigger	RateLimiter.cpp	/^RateLimiter::Trigger()$/;"	f	class:RateLimiter
Trigger	Terrain/Thread.cpp	/^TerrainThread::Trigger(const WindowProjection &projection)$/;"	f	class:TerrainThread
Trigger	Thread/StandbyThread.cpp	/^StandbyThread::Trigger()$/;"	f	class:StandbyThread
Trigger	Thread/Trigger.hpp	/^  Trigger():handle(::CreateEvent(nullptr, true, false, nullptr)) {}$/;"	f	class:Trigger
Trigger	Thread/Trigger.hpp	/^class Trigger {$/;"	c
Trigger	Thread/WorkerThread.hpp	/^  void Trigger() {$/;"	f	class:WorkerThread
Trigger	Topography/Thread.cpp	/^TopographyThread::Trigger(const WindowProjection &_projection)$/;"	f	class:TopographyThread
TriggerCalculatedUpdate	Protection.cpp	/^TriggerCalculatedUpdate()$/;"	f
TriggerCommand	Thread/StandbyThread.hpp	/^  void TriggerCommand() {$/;"	f	class:StandbyThread
TriggerDone	Thread/StandbyThread.hpp	/^  void TriggerDone() {$/;"	f	class:StandbyThread
TriggerGPSUpdate	Protection.cpp	/^TriggerGPSUpdate()$/;"	f
TriggerMapUpdate	Protection.cpp	/^TriggerMapUpdate()$/;"	f
TriggerMergeThread	Protection.cpp	/^TriggerMergeThread()$/;"	f
TriggerRedraw	DrawThread.hpp	/^  void TriggerRedraw() {$/;"	f	class:final
TriggerVarioUpdate	Protection.cpp	/^TriggerVarioUpdate()$/;"	f
TrivialArray	Util/TrivialArray.hxx	/^	TrivialArray(I _begin, I _end):the_size(0) {$/;"	f	class:TrivialArray
TrivialArray	Util/TrivialArray.hxx	/^	TrivialArray(size_type _size):the_size(_size) {}$/;"	f	class:TrivialArray
TrivialArray	Util/TrivialArray.hxx	/^	TrivialArray(size_type _size, const T &value):the_size(_size) {$/;"	f	class:TrivialArray
TrivialArray	Util/TrivialArray.hxx	/^	TrivialArray(std::initializer_list<U> init)$/;"	f	class:TrivialArray
TrivialArray	Util/TrivialArray.hxx	/^class TrivialArray {$/;"	c
TrivialClass	Java/Class.hxx	/^	class TrivialClass : public TrivialRef<jclass> {$/;"	c	namespace:Java
TrivialOverwritingRingBuffer	Util/OverwritingRingBuffer.hpp	/^  TrivialOverwritingRingBuffer(unsigned _head, unsigned _tail)$/;"	f	class:TrivialOverwritingRingBuffer
TrivialOverwritingRingBuffer	Util/OverwritingRingBuffer.hpp	/^class TrivialOverwritingRingBuffer$/;"	c
TrivialRef	Java/Ref.hxx	/^	class TrivialRef {$/;"	c	namespace:Java
Truncate	Util/StaticString.hxx	/^	void Truncate(size_type new_length) {$/;"	f	class:StaticStringBase
TryConnect	Device/Driver/EW.cpp	/^EWDevice::TryConnect(OperationEnvironment &env)$/;"	f	class:EWDevice
TryConnect	Device/Driver/EWMicroRecorder.cpp	/^TryConnect(Port &port, char *user_data, size_t max_user_data,$/;"	f	file:
TryConnectRetry	Device/Driver/EWMicroRecorder.cpp	/^TryConnectRetry(Port &port, char *user_data, size_t max_user_data,$/;"	f	file:
TryMountPoint	LocalPath.cpp	/^TryMountPoint(const TCHAR *mnt)$/;"	f	file:
TryRecoverFromError	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::TryRecoverFromError(snd_pcm_t &alsa_handle, int error)$/;"	f	class:ALSAPCMPlayer
TryRecoverFromError	Audio/ALSAPCMPlayer.hpp	/^  bool TryRecoverFromError(int error) {$/;"	f	class:ALSAPCMPlayer
TurnPoint	Device/Declaration.cpp	/^Declaration::TurnPoint::TurnPoint(const OrderedTaskPoint &tp)$/;"	f	class:Declaration::TurnPoint
TurnPoint	Device/Declaration.hpp	/^    TurnPoint(const Waypoint &_waypoint)$/;"	f	struct:Declaration::TurnPoint
TurnPoint	Device/Declaration.hpp	/^  struct TurnPoint {$/;"	s	struct:Declaration
TurnPointRange	Engine/Contest/Solvers/TriangleContest.hpp	/^  struct TurnPointRange {$/;"	s	class:TriangleContest
TurnRate	Computer/CirclingComputer.cpp	/^CirclingComputer::TurnRate(CirclingInfo &circling_info,$/;"	f	class:CirclingComputer
Turning	Computer/CirclingComputer.cpp	/^CirclingComputer::Turning(CirclingInfo &circling_info,$/;"	f	class:CirclingComputer
Turning	Computer/GlideComputerAirData.cpp	/^GlideComputerAirData::Turning(const MoreData &basic,$/;"	f	class:GlideComputerAirData
TurningLeft	NMEA/CirclingInfo.hpp	/^  bool TurningLeft() const {$/;"	f	struct:CirclingInfo
TurningReach	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  TurningReach,$/;"	e	enum:ControlIndex	file:
TurningReach	Profile/ProfileKeys.cpp	/^const char TurningReach[] = "TurningReach";$/;"	m	namespace:ProfileKeys	file:
TurnpointRadius	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TurnpointRadius,$/;"	e	enum:ControlIndex	file:
TurnpointRadius	Profile/ProfileKeys.cpp	/^const char TurnpointRadius[] = "TurnpointRadius";$/;"	m	namespace:ProfileKeys	file:
TurnpointTab	Dialogs/Task/Manager/Internal.hpp	/^    TurnpointTab,$/;"	e	enum:final::Tabs
TurnpointType	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  TurnpointType,$/;"	e	enum:ControlIndex	file:
TurnpointType	Profile/ProfileKeys.cpp	/^const char TurnpointType[] = "TurnpointType";$/;"	m	namespace:ProfileKeys	file:
TwoTextRowsRenderer	Renderer/TwoTextRowsRenderer.hpp	/^class TwoTextRowsRenderer {$/;"	c
TwoWidgets	Widget/TwoWidgets.hpp	/^  TwoWidgets(Widget *_first, Widget *_second, bool _vertical=true)$/;"	f	class:TwoWidgets
TwoWidgets	Widget/TwoWidgets.hpp	/^  TwoWidgets(bool _vertical=true):vertical(_vertical) {}$/;"	f	class:TwoWidgets
TwoWidgets	Widget/TwoWidgets.hpp	/^class TwoWidgets : public NullWidget {$/;"	c
Type	Engine/Waypoint/Waypoint.hpp	/^  enum class Type: uint8_t {$/;"	c	struct:Waypoint
Type	Event/Shared/Event.hpp	/^  enum Type {$/;"	g	struct:Event
Type	Form/DataField/Base.hpp	/^  enum class Type : uint8_t {$/;"	c	class:DataField
Type	Form/DigitEntry.hpp	/^    enum class Type : uint8_t {$/;"	c	struct:CoordinateFormat::Column
Type	InfoBoxes/Content/Type.hpp	/^  enum Type {$/;"	g	namespace:InfoBoxFactory
Type	MapSettings.hpp	/^  enum class Type: uint8_t {$/;"	c	struct:TrailSettings
Type	MapWindow/Items/MapItem.hpp	/^  enum Type {$/;"	g	class:TaskPointType
Type	PopupMessage.hpp	/^  enum Type {$/;"	g	class:PopupMessage
Type	Screen/Bitmap.hpp	/^  enum class Type {$/;"	c	class:final
Type	Tracking/SkyLines/Protocol.hpp	/^enum Type {$/;"	g	namespace:SkyLinesTracking
Type	Weather/PCMet/Overlays.hpp	/^  enum class Type {$/;"	c	struct:PCMet::OverlayInfo
Type	Widget/RowFormWidget.hpp	/^    enum class Type : uint8_t {$/;"	c	struct:RowFormWidget::Row
TypeFilter	Waypoint/WaypointFilter.hpp	/^enum class TypeFilter: uint8_t {$/;"	c
U	Screen/Memory/PixelTraits.hpp	/^    constexpr U(color_type _c):c(_c) {}$/;"	f	union:BGRAPixelTraits::U
U	Screen/Memory/PixelTraits.hpp	/^    constexpr U(integer_type _i):i(_i) {}$/;"	f	union:BGRAPixelTraits::U
U	Screen/Memory/PixelTraits.hpp	/^  union U {$/;"	u	struct:BGRAPixelTraits
UAV	FLARM/Traffic.hpp	/^    UAV = 13,             \/\/!< unmanned aerial vehicle$/;"	m	class:FlarmTraffic::AircraftType
UDEV_DEFAULT_SEAT	Event/Poll/LibInput/UdevContext.hpp	/^static constexpr const char *UDEV_DEFAULT_SEAT = "seat0";$/;"	v
UDPPort	Device/Port/UDPPort.cpp	/^UDPPort::UDPPort(boost::asio::io_context &io_context,$/;"	f	class:UDPPort
UDP_LISTENER	Device/Config.hpp	/^    UDP_LISTENER,$/;"	m	class:DeviceConfig::PortType
UIActions	UIActions.hpp	/^namespace UIActions {$/;"	n
UIGlobals	UIGlobals.hpp	/^namespace UIGlobals {$/;"	n
UIReceiveCalculatedData	UIReceiveBlackboard.cpp	/^UIReceiveCalculatedData()$/;"	f
UIReceiveSensorData	UIReceiveBlackboard.cpp	/^UIReceiveSensorData()$/;"	f
UIScale	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  UIScale,$/;"	e	enum:ControlIndex	file:
UIScale	Profile/ProfileKeys.cpp	/^const char UIScale[] = "UIScale";$/;"	m	namespace:ProfileKeys	file:
UISettings	UISettings.hpp	/^struct UISettings {$/;"	s
UIState	UIState.hpp	/^struct UIState {$/;"	s
UNDEFINED	Units/Unit.hpp	/^  UNDEFINED,$/;"	m	class:Unit
UNDEFINED_VALUE	FLARM/FlarmId.hpp	/^  static constexpr uint32_t UNDEFINED_VALUE = 0;$/;"	m	class:FlarmId
UNDER_MIN_TURNPOINTS	Engine/Task/Factory/ValidationError.hpp	/^  UNDER_MIN_TURNPOINTS,$/;"	m	class:TaskValidationErrorType
UNIQUE_FILE_DESCRIPTOR_HXX	OS/UniqueFileDescriptor.hxx	31;"	d
UNIT	Form/DigitEntry.hpp	/^      UNIT,$/;"	m	class:CoordinateFormat::Column::Type
UNITSCONFIGPANEL_HPP	Dialogs/Settings/Panels/UnitsConfigPanel.hpp	25;"	d
UNKNOWN	Airspace/AirspaceParser.cpp	/^  UNKNOWN,$/;"	m	class:AirspaceFileType	file:
UNKNOWN	Device/Driver/CAI302/Internal.hpp	/^    UNKNOWN,$/;"	m	class:CAI302Device::Mode
UNKNOWN	Device/Driver/FLARM/Device.hpp	/^    UNKNOWN,$/;"	m	class:FlarmDevice::Mode
UNKNOWN	Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const UNKNOWN = "Unknown";$/;"	m	class:IMI	file:
UNKNOWN	Device/Driver/LX/Internal.hpp	/^    UNKNOWN,$/;"	m	class:LXDevice::Mode
UNKNOWN	Device/Driver/LXERA/Internal.hpp	/^    UNKNOWN,$/;"	m	class:LXEraDevice::Mode
UNKNOWN	FLARM/Traffic.hpp	/^    UNKNOWN = 0,          \/\/!< unknown$/;"	m	class:FlarmTraffic::AircraftType
UNKNOWN	Hardware/Battery.hpp	/^      UNKNOWN$/;"	e	enum:Power::Battery::batterystatus
UNKNOWN	Hardware/Battery.hpp	/^      UNKNOWN$/;"	e	enum:Power::External::externalstatus
UNKNOWN	Kobo/Model.hpp	/^  UNKNOWN,$/;"	m	class:KoboModel
UNKNOWN	NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::AirbrakeState
UNKNOWN	NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::FlapPosition
UNKNOWN	NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::FlightMode
UNKNOWN	NMEA/SwitchState.hpp	/^    UNKNOWN,$/;"	m	class:SwitchState::UserSwitch
UNKNOWN	Net/State.hpp	/^  UNKNOWN,$/;"	m	class:NetState
UNKNOWN	Repository/FileType.hpp	/^  UNKNOWN,$/;"	m	class:FileType
UNKNOWN	Terrain/Height.hpp	/^  UNKNOWN, GROUND, WATER$/;"	m	class:TerrainType
UNKNOWN	Waypoint/WaypointFileType.hpp	/^  UNKNOWN,$/;"	m	class:WaypointFileType
UNKNOWN_ELEVATION	MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION = -1e5;$/;"	m	struct:ArrivalAltitudeMapItem
UNKNOWN_ELEVATION	MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION = -1e5;$/;"	m	struct:LocationMapItem
UNKNOWN_ELEVATION_THRESHOLD	MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION_THRESHOLD = -1e4;$/;"	m	struct:ArrivalAltitudeMapItem
UNKNOWN_ELEVATION_THRESHOLD	MapWindow/Items/MapItem.hpp	/^  static constexpr double UNKNOWN_ELEVATION_THRESHOLD = -1e4;$/;"	m	struct:LocationMapItem
UNLIKELY	Topography/shapelib/mapserver.h	76;"	d
UNLIKELY	Topography/shapelib/mapserver.h	80;"	d
UNMODIFIED	Task/MapTaskManager.hpp	/^    UNMODIFIED,$/;"	e	enum:MapTaskManager::TaskEditResult
UNORDERED	Engine/Task/Points/Type.hpp	/^  UNORDERED,$/;"	m	class:TaskPointType
UNORDEREDTASKPOINT_HPP	Engine/Task/Unordered/UnorderedTaskPoint.hpp	26;"	d
UNORDEREDTASK_H	Engine/Task/Unordered/UnorderedTask.hpp	23;"	d
UNPROTECTED	Dialogs/ProfilePasswordDialog.hpp	/^  UNPROTECTED,$/;"	m	class:ProfilePasswordResult
UNREACHABLE	Engine/Route/ReachResult.hpp	/^    UNREACHABLE,$/;"	m	class:ReachResult::Validity
UNSPECIFIED	Android/NativeView.hpp	/^    UNSPECIFIED = -1,$/;"	m	class:NativeView::ScreenOrientation
UP	Dialogs/KnobTextEntry.cpp	/^  UP,$/;"	e	enum:Buttons	file:
UP	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  UP,$/;"	e	enum:Buttons	file:
UP	Form/GridView.hpp	/^    UP,$/;"	m	class:GridView::Direction
UP	NMEA/SwitchState.hpp	/^    UP,$/;"	m	class:SwitchState::UserSwitch
UP	Renderer/SymbolRenderer.hpp	/^    UP,$/;"	e	enum:SymbolRenderer::Direction
UPDATE	Dialogs/FileManager.cpp	/^    UPDATE,$/;"	e	enum:ManagedFileListWidget::Buttons	file:
UPDATE	Dialogs/Weather/MapOverlayWidget.cpp	/^    UPDATE,$/;"	e	enum:final::Buttons	file:
UPDATE	Dialogs/Weather/NOAADetails.cpp	/^    UPDATE,$/;"	e	enum:final::Buttons	file:
UPDATE	Dialogs/Weather/NOAAList.cpp	/^    UPDATE,$/;"	e	enum:final::Buttons	file:
UPDATE_MODE_FULL	Screen/FB/mxcfb.h	83;"	d
UPDATE_MODE_PARTIAL	Screen/FB/mxcfb.h	82;"	d
UPDATE_SCHEME_QUEUE	Screen/FB/mxcfb.h	79;"	d
UPDATE_SCHEME_QUEUE_AND_MERGE	Screen/FB/mxcfb.h	80;"	d
UPDATE_SCHEME_SNAPSHOT	Screen/FB/mxcfb.h	78;"	d
UPLOAD	Device/Driver/CAI302/Internal.hpp	/^    UPLOAD,$/;"	m	class:CAI302Device::Mode
URGENT	FLARM/Traffic.hpp	/^    URGENT = 3,$/;"	m	class:FlarmTraffic::AlarmType
URL	Java/URL.hxx	/^	class URL {$/;"	c	namespace:Java
URLConnection	Java/URL.hxx	/^	class URLConnection {$/;"	c	namespace:Java
USB_STORAGE	Kobo/SystemDialog.cpp	/^    USB_STORAGE,$/;"	e	enum:final::Buttons	file:
USE	Dialogs/Weather/MapOverlayWidget.cpp	/^    USE,$/;"	e	enum:final::Buttons	file:
USER	Android/NativeView.hpp	/^    USER = 2,$/;"	m	class:NativeView::ScreenOrientation
USER	Engine/Waypoint/Origin.hpp	/^  USER,$/;"	m	class:WaypointOrigin
USER	Waypoint/WaypointFilter.hpp	/^  USER,$/;"	m	class:TypeFilter
USER_NAME_REQUEST	Tracking/SkyLines/Protocol.hpp	/^  USER_NAME_REQUEST = 6,$/;"	e	enum:SkyLinesTracking::Type
USER_NAME_RESPONSE	Tracking/SkyLines/Protocol.hpp	/^  USER_NAME_RESPONSE = 7,$/;"	e	enum:SkyLinesTracking::Type
USER_SWITCH	Dialogs/Device/Vega/SwitchesDialog.cpp	/^    USER_SWITCH,$/;"	e	enum:SwitchesRight::Controls	file:
USE_LIBINTL	Language/Language.hpp	28;"	d
USE_MMAP	zzip/__mmap.h	30;"	d
USE_MMAP	zzip/__mmap.h	43;"	d
USE_MMAP	zzip/__mmap.h	84;"	d
USE_MSFREE	Topography/shapelib/mapserver.h	66;"	d
USE_POSIX_MMAP	zzip/__mmap.h	18;"	d
USE_TTY	Screen/Custom/TopCanvas.hpp	88;"	d
USE_WIN32_MMAP	zzip/__mmap.h	21;"	d
UTCDate	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  UTCDate,$/;"	e	enum:Controls	file:
UTCOffset	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  UTCOffset,$/;"	e	enum:ControlIndex	file:
UTCOffset	Profile/ProfileKeys.cpp	/^const char UTCOffset[] = "UTCOffset";$/;"	m	namespace:ProfileKeys	file:
UTCOffsetSigned	Profile/ProfileKeys.cpp	/^const char UTCOffsetSigned[] = "UTCOffsetSigned";$/;"	m	namespace:ProfileKeys	file:
UTCTime	Dialogs/StatusPanels/TimesStatusPanel.cpp	/^  UTCTime,$/;"	e	enum:Controls	file:
UTF8	IO/Charset.hpp	/^  UTF8,$/;"	m	class:Charset
UTF8ToWideConverter	Util/ConvertString.hpp	/^  UTF8ToWideConverter(const char *_value)$/;"	f	class:UTF8ToWideConverter
UTF8ToWideConverter	Util/ConvertString.hpp	/^  UTF8ToWideConverter(const_pointer _value):value(_value) {$/;"	f	class:UTF8ToWideConverter
UTF8ToWideConverter	Util/ConvertString.hpp	/^class UTF8ToWideConverter {$/;"	c
UTM	Geo/CoordinateFormat.hpp	/^  UTM,$/;"	m	class:CoordinateFormat
UTM	Geo/UTM.hpp	/^  constexpr UTM(unsigned char _zone_number, char _zone_letter,$/;"	f	struct:UTM
UTM	Geo/UTM.hpp	/^struct UTM {$/;"	s
UTM_HPP	Geo/UTM.hpp	25;"	d
UdevContext	Event/Poll/LibInput/UdevContext.cpp	/^UdevContext::UdevContext(const UdevContext &other)$/;"	f	class:UdevContext
UdevContext	Event/Poll/LibInput/UdevContext.hpp	/^  UdevContext():ud(nullptr) {}$/;"	f	class:UdevContext
UdevContext	Event/Poll/LibInput/UdevContext.hpp	/^  UdevContext(UdevContext &&other)$/;"	f	class:UdevContext
UdevContext	Event/Poll/LibInput/UdevContext.hpp	/^  explicit UdevContext(struct udev *_ud):ud(_ud) {}$/;"	f	class:UdevContext
UdevContext	Event/Poll/LibInput/UdevContext.hpp	/^class UdevContext {$/;"	c
UnaryWritePixel	Screen/Memory/PixelOperations.hpp	/^  explicit constexpr UnaryWritePixel(Args&&... args)$/;"	f	struct:UnaryWritePixel
UnaryWritePixel	Screen/Memory/PixelOperations.hpp	/^struct UnaryWritePixel : private Operation {$/;"	s
Unbind	Screen/OpenGL/Buffer.hpp	/^  static void Unbind() {$/;"	f	class:GLBuffer
Unbind	Screen/OpenGL/FrameBuffer.hpp	/^  static void Unbind() {$/;"	f	class:GLFrameBuffer
Unbind	Screen/OpenGL/RenderBuffer.hpp	/^  static void Unbind() {$/;"	f	class:GLRenderBuffer
Unbind	Screen/Pen.hpp	/^  void Unbind() const {$/;"	f	class:Pen
UnblockAllSignals	OS/Process.cpp	/^UnblockAllSignals()$/;"	f	file:
UncheckedFirst	Util/EnumBitSet.hpp	/^  E UncheckedFirst() const {$/;"	f	class:EnumBitSet
UncompressedImage	Screen/Custom/UncompressedImage.hpp	/^  UncompressedImage(Format _format, unsigned _pitch,$/;"	f	class:UncompressedImage
UncompressedImage	Screen/Custom/UncompressedImage.hpp	/^class UncompressedImage {$/;"	c
Undefined	Computer/WaveResult.hpp	/^  static WaveInfo Undefined() {$/;"	f	struct:WaveInfo
Undefined	FLARM/FlarmId.hpp	/^  static FlarmId Undefined() {$/;"	f	class:FlarmId
Undefined	Geo/Quadrilateral.hpp	/^  static constexpr GeoQuadrilateral Undefined() {$/;"	f	struct:GeoQuadrilateral
Undefined	OS/UniqueFileDescriptor.hxx	/^		:FileDescriptor(FileDescriptor::Undefined()) {}$/;"	f	class:UniqueFileDescriptor
Undefined	PageSettings.hpp	/^  static PageLayout Undefined() {$/;"	f	struct:PageLayout
UnescapeBackslash	Util/EscapeBackslash.cpp	/^UnescapeBackslash(const TCHAR* old_string)$/;"	f
Uniform	Screen/OpenGL/Color.hpp	/^  void Uniform(GLint location) const {$/;"	f	class:Color
UniqueFileDescriptor	OS/UniqueFileDescriptor.hxx	/^class UniqueFileDescriptor : public FileDescriptor {$/;"	c
Unit	Units/Unit.hpp	/^enum class Unit: uint8_t {$/;"	c
UnitDescriptor	Units/Descriptor.hpp	/^struct UnitDescriptor$/;"	s
UnitFormat	Renderer/ChartRenderer.hpp	/^  enum UnitFormat {$/;"	g	class:ChartRenderer
UnitGroup	Units/Group.hpp	/^enum class UnitGroup: uint8_t$/;"	c
UnitSetting	Units/Settings.hpp	/^struct UnitSetting$/;"	s
UnitStoreItem	Units/UnitsStore.cpp	/^struct UnitStoreItem$/;"	s	file:
UnitSymbolRenderer	Renderer/UnitSymbolRenderer.hpp	/^namespace UnitSymbolRenderer$/;"	n
UnitSymbolStrings	Renderer/UnitSymbolRenderer.cpp	/^struct UnitSymbolStrings {$/;"	s	file:
Units	Dialogs/Device/ManageCAI302Dialog.cpp	/^    Units,$/;"	e	enum:final::Controls	file:
Units	Units/Descriptor.hpp	/^namespace Units$/;"	n
Units	Units/System.hpp	/^namespace Units$/;"	n
Units	Units/Units.hpp	/^namespace Units$/;"	n
Units	Units/UnitsGlue.hpp	/^namespace Units$/;"	n
Units	Units/UnitsStore.cpp	/^  UnitSetting Units;$/;"	m	struct:UnitStoreItem	file:
Units	Units/UnitsStore.hpp	/^namespace Units$/;"	n
UnitsAltitude	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsAltitude,$/;"	e	enum:ControlIndex	file:
UnitsConfigPanel	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsConfigPanel()$/;"	f	class:final
UnitsDistance	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsDistance,$/;"	e	enum:ControlIndex	file:
UnitsLatLon	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsLatLon$/;"	e	enum:ControlIndex	file:
UnitsLift	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsLift,$/;"	e	enum:ControlIndex	file:
UnitsMass	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsMass,$/;"	e	enum:ControlIndex	file:
UnitsPreset	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsPreset,$/;"	e	enum:ControlIndex	file:
UnitsPressure	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsPressure,$/;"	e	enum:ControlIndex	file:
UnitsSpeed	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsSpeed,$/;"	e	enum:ControlIndex	file:
UnitsTaskSpeed	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsTaskSpeed,$/;"	e	enum:ControlIndex	file:
UnitsTemperature	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsTemperature,$/;"	e	enum:ControlIndex	file:
UnitsWingLoading	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  UnitsWingLoading,$/;"	e	enum:ControlIndex	file:
Unlock	Screen/FB/TopCanvas.cpp	/^TopCanvas::Unlock()$/;"	f	class:TopCanvas
Unlock	Screen/SDL/TopCanvas.cpp	/^TopCanvas::Unlock()$/;"	f	class:TopCanvas
UnlockCPU	Hardware/CPU.cpp	/^UnlockCPU()$/;"	f
Unmap	Screen/OpenGL/Buffer.hpp	/^  static void Unmap() {$/;"	f	class:GLBuffer
UnorderedTask	Engine/Task/Unordered/UnorderedTask.cpp	/^UnorderedTask::UnorderedTask(const TaskType _type,$/;"	f	class:UnorderedTask
UnorderedTask	Engine/Task/Unordered/UnorderedTask.hpp	/^class UnorderedTask : public AbstractTask {$/;"	c
UnorderedTaskPoint	Engine/Task/Unordered/UnorderedTaskPoint.cpp	/^UnorderedTaskPoint::UnorderedTaskPoint(WaypointPtr &&wp,$/;"	f	class:UnorderedTaskPoint
Unpause	Net/HTTP/Easy.hxx	/^	bool Unpause() {$/;"	f	class:CurlEasy
Unprepare	CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::Unprepare()$/;"	f	class:CrossSectionWidget
Unprepare	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^ScanBluetoothLeWidget::Unprepare()$/;"	f	class:ScanBluetoothLeWidget
Unprepare	Dialogs/DownloadFilePicker.cpp	/^DownloadFilePickerWidget::Unprepare()$/;"	f	class:DownloadFilePickerWidget
Unprepare	Dialogs/FileManager.cpp	/^ManagedFileListWidget::Unprepare()$/;"	f	class:ManagedFileListWidget
Unprepare	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::Unprepare()$/;"	f	class:PlaneListWidget
Unprepare	Dialogs/Plane/PolarShapeEditWidget.cpp	/^PolarShapeEditWidget::Unprepare()$/;"	f	class:PolarShapeEditWidget
Unprepare	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::Unprepare()$/;"	f	class:TaskListPanel
Unprepare	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::Unprepare()$/;"	f	class:WaypointDetailsWidget
Unprepare	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::Unprepare()$/;"	f	class:NOAAListWidget
Unprepare	Dialogs/dlgQuickMenu.cpp	/^QuickMenu::Unprepare()$/;"	f	class:QuickMenu
Unprepare	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::Unprepare()$/;"	f	class:BigThermalAssistantWidget
Unprepare	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::Unprepare()$/;"	f	class:TrafficWidget
Unprepare	Gauge/GaugeFLARM.cpp	/^GaugeFLARM::Unprepare()$/;"	f	class:GaugeFLARM
Unprepare	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::Unprepare()$/;"	f	class:GaugeThermalAssistant
Unprepare	Gauge/GlueGaugeVario.cpp	/^GlueGaugeVario::Unprepare()$/;"	f	class:GlueGaugeVario
Unprepare	HorizonWidget.cpp	/^HorizonWidget::Unprepare()$/;"	f	class:HorizonWidget
Unprepare	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::Unprepare()$/;"	f	class:ButtonPanelWidget
Unprepare	Widget/CreateWindowWidget.cpp	/^CreateWindowWidget::Unprepare()$/;"	f	class:CreateWindowWidget
Unprepare	Widget/LargeTextWidget.cpp	/^LargeTextWidget::Unprepare()$/;"	f	class:LargeTextWidget
Unprepare	Widget/ManagedWidget.cpp	/^ManagedWidget::Unprepare()$/;"	f	class:ManagedWidget
Unprepare	Widget/OffsetButtonsWidget.cpp	/^OffsetButtonsWidget::Unprepare()$/;"	f	class:OffsetButtonsWidget
Unprepare	Widget/PagerWidget.cpp	/^PagerWidget::Unprepare()$/;"	f	class:PagerWidget
Unprepare	Widget/PanelWidget.cpp	/^PanelWidget::Unprepare()$/;"	f	class:PanelWidget
Unprepare	Widget/RowFormWidget.cpp	/^RowFormWidget::Unprepare()$/;"	f	class:RowFormWidget
Unprepare	Widget/RowFormWidget.hpp	/^    void Unprepare() {$/;"	f	struct:RowFormWidget::Row
Unprepare	Widget/SolidWidget.cpp	/^SolidWidget::Unprepare()$/;"	f	class:SolidWidget
Unprepare	Widget/TabWidget.cpp	/^TabWidget::Unprepare()$/;"	f	class:TabWidget
Unprepare	Widget/TextListWidget.cpp	/^TextListWidget::Unprepare()$/;"	f	class:TextListWidget
Unprepare	Widget/TextWidget.cpp	/^TextWidget::Unprepare()$/;"	f	class:TextWidget
Unprepare	Widget/TwoWidgets.cpp	/^TwoWidgets::Unprepare()$/;"	f	class:TwoWidgets
Unprepare	Widget/ViewImageWidget.cpp	/^ViewImageWidget::Unprepare()$/;"	f	class:ViewImageWidget
Unprepare	Widget/Widget.cpp	/^NullWidget::Unprepare()$/;"	f	class:NullWidget
UnprepareFill	Renderer/AirspacePreviewRenderer.cpp	/^AirspacePreviewRenderer::UnprepareFill(Canvas &canvas)$/;"	f	class:AirspacePreviewRenderer
UnprepareWidget	Widget/DockWindow.cpp	/^DockWindow::UnprepareWidget()$/;"	f	class:DockWindow
Unproject	Geo/Flat/FlatProjection.cpp	/^FlatProjection::Unproject(const FlatBoundingBox &bb) const$/;"	f	class:FlatProjection
Unproject	Geo/Flat/FlatProjection.cpp	/^FlatProjection::Unproject(const FlatGeoPoint &fp) const$/;"	f	class:FlatProjection
Unproject	Geo/Flat/FlatProjection.cpp	/^FlatProjection::Unproject(const FlatPoint &fp) const$/;"	f	class:FlatProjection
UnprojectCoarse	Terrain/RasterProjection.hpp	/^  constexpr GeoPoint UnprojectCoarse(SignedRasterLocation coords) const {$/;"	f	class:RasterProjection
UnprojectFine	Terrain/RasterProjection.hpp	/^  constexpr GeoPoint UnprojectFine(SignedRasterLocation coords) const {$/;"	f	class:RasterProjection
UnprotectedLease	Thread/Guard.hpp	/^  class UnprotectedLease {$/;"	c	class:Guard
Unreachable	Renderer/WaypointIconRenderer.hpp	/^    Unreachable,$/;"	e	enum:WaypointIconRenderer::Reachability
Unreachable	Renderer/WaypointRenderer.hpp	/^    Unreachable,$/;"	e	enum:WaypointRenderer::Reachability
UnsafeAppendASCII	Util/StaticString.hxx	/^	void UnsafeAppendASCII(const char *p) {$/;"	f	class:StaticStringBase
UnsafeBuildString	Util/StringBuilder.hxx	/^UnsafeBuildString(T *buffer, Args&&... args)$/;"	f
UnsafeFormat	Util/StaticString.hxx	/^	void UnsafeFormat(const T *fmt, Args&&... args) {$/;"	f	class:StaticStringBase
UnsafeFormatComment	InfoBoxes/Data.hpp	/^  void UnsafeFormatComment(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
UnsafeFormatValue	InfoBoxes/Data.hpp	/^  void UnsafeFormatValue(const TCHAR *fmt, Args&&... args) {$/;"	f	struct:InfoBoxData
UnsafeRadiansToIntAngle	Math/FastTrig.hpp	/^UnsafeRadiansToIntAngle(double radians)$/;"	f
UnsafeSetSilence	Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::UnsafeSetSilence()$/;"	f	class:VarioSynthesiser
UnsignedPoint2D	Math/Point2D.hpp	/^struct UnsignedPoint2D : Point2D<unsigned> {$/;"	s
Update	Computer/ConditionMonitor/ConditionMonitor.cpp	/^ConditionMonitor::Update(const NMEAInfo &basic, const DerivedInfo &calculated,$/;"	f	class:ConditionMonitor
Update	Computer/ThermalLocator.cpp	/^ThermalLocator::Update(const double t_0,$/;"	f	class:ThermalLocator
Update	Computer/TraceComputer.cpp	/^TraceComputer::Update(const ComputerSettings &settings_computer,$/;"	f	class:TraceComputer
Update	Computer/WarningComputer.cpp	/^WarningComputer::Update(const ComputerSettings &settings_computer,$/;"	f	class:WarningComputer
Update	Computer/Wind/WindEKF.cpp	/^WindEKF::Update(const double airspeed, const float gps_vel[2])$/;"	f	class:WindEKF
Update	Computer/Wind/WindEKFGlue.cpp	/^WindEKFGlue::Update(const NMEAInfo &basic, const DerivedInfo &derived)$/;"	f	class:WindEKFGlue
Update	CrossSection/CrossSectionWidget.cpp	/^CrossSectionWidget::Update(const MoreData &basic,$/;"	f	class:CrossSectionWidget
Update	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceFilterWidget::Update()$/;"	f	class:AirspaceFilterWidget
Update	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Update(const SwitchState &switches) {$/;"	f	class:SwitchesDialog
Update	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Update(const SwitchState &switches) {$/;"	f	class:SwitchesLeft
Update	Dialogs/Device/Vega/SwitchesDialog.cpp	/^  void Update(const SwitchState &switches) {$/;"	f	class:SwitchesRight
Update	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::Update()$/;"	f	class:PlanePolarWidget
Update	Dialogs/Task/AlternatesListDialog.cpp	/^  bool Update() {$/;"	f	class:final
Update	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void Update(bool _edit, bool _mutate, bool _down, bool _up, bool _reverse) {$/;"	f	class:final
Update	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::Update()$/;"	f	class:FlarmTrafficDetailsWidget
Update	Dialogs/Traffic/TeamCodeDialog.cpp	/^TeamCodeWidget::Update(const MoreData &basic, const DerivedInfo &calculated)$/;"	f	class:TeamCodeWidget
Update	Dialogs/Waypoint/WaypointList.cpp	/^WaypointFilterWidget::Update(Angle _last_heading)$/;"	f	class:WaypointFilterWidget
Update	Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::Update()$/;"	f	class:NOAADetailsWidget
Update	Dialogs/dlgAnalysis.cpp	/^AnalysisWidget::Update()$/;"	f	class:AnalysisWidget
Update	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::Update(const AircraftState& state,$/;"	f	class:AirspaceWarningManager
Update	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::Update()$/;"	f	class:GlidePolar
Update	Engine/Task/AbstractTask.cpp	/^AbstractTask::Update(const AircraftState &state, $/;"	f	class:AbstractTask
Update	Engine/Task/TaskManager.cpp	/^TaskManager::Update(const AircraftState &state,$/;"	f	class:TaskManager
Update	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Update(const unsigned index)$/;"	f	class:ThermalBand
Update	Engine/ThermalBand/ThermalSlice.cpp	/^ThermalSlice::Update(const ThermalSlice& o, const double dh)$/;"	f	class:ThermalSlice
Update	Engine/Trace/Trace.hpp	/^    void Update(const TracePoint &p_last, const TracePoint &p_next) {$/;"	f	struct:Trace::TraceDelta
Update	Engine/Util/AircraftStateFilter.cpp	/^AircraftStateFilter::Update(const AircraftState &state)$/;"	f	class:AircraftStateFilter
Update	FLARM/Traffic.cpp	/^FlarmTraffic::Update(const FlarmTraffic &other)$/;"	f	class:FlarmTraffic
Update	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::Update(const AttitudeState &attitude,$/;"	f	class:BigThermalAssistantWidget
Update	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::Update(Angle new_direction, const TrafficList &new_data,$/;"	f	class:FlarmTrafficControl
Update	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::Update()$/;"	f	class:TrafficWidget
Update	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::Update(Angle new_direction, const TrafficList &new_data,$/;"	f	class:FlarmTrafficWindow
Update	Gauge/GaugeFLARM.cpp	/^GaugeFLARM::Update(const NMEAInfo &basic)$/;"	f	class:GaugeFLARM
Update	Gauge/GaugeFLARM.cpp	/^SmallTrafficWindow::Update(const NMEAInfo &gps_info,$/;"	f	class:SmallTrafficWindow
Update	Gauge/GaugeThermalAssistant.cpp	/^GaugeThermalAssistant::Update(const AttitudeState &attitude,$/;"	f	class:GaugeThermalAssistant
Update	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::Update(const AttitudeState &attitude,$/;"	f	class:ThermalAssistantRenderer
Update	Gauge/ThermalAssistantWindow.cpp	/^ThermalAssistantWindow::Update(const AttitudeState &attitude,$/;"	f	class:ThermalAssistantWindow
Update	Geo/Flat/TaskProjection.cpp	/^TaskProjection::Update()$/;"	f	class:TaskProjection
Update	HorizonWidget.cpp	/^HorizonWidget::Update(const MoreData &basic)$/;"	f	class:HorizonWidget
Update	InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateGR::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentAlternateGR
Update	InfoBoxes/Content/Alternate.cpp	/^InfoBoxContentAlternateName::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentAlternateName
Update	InfoBoxes/Content/Altitude.cpp	/^InfoBoxContentAltitudeGPS::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentAltitudeGPS
Update	InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLC::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentOLC
Update	InfoBoxes/Content/Contest.cpp	/^InfoBoxContentOLCSpeed::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentOLCSpeed
Update	InfoBoxes/Content/Direction.cpp	/^InfoBoxContentTrack::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTrack
Update	InfoBoxes/Content/MacCready.cpp	/^InfoBoxContentMacCready::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentMacCready
Update	InfoBoxes/Content/Other.cpp	/^InfoBoxContentHorizon::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentHorizon
Update	InfoBoxes/Content/Radio.cpp	/^InfoBoxContentActiveRadioFrequency::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentActiveRadioFrequency
Update	InfoBoxes/Content/Radio.cpp	/^InfoBoxContentStandbyRadioFrequency::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentStandbyRadioFrequency
Update	InfoBoxes/Content/Speed.cpp	/^InfoBoxContentSpeedGround::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentSpeedGround
Update	InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextArrow::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentNextArrow
Update	InfoBoxes/Content/Task.cpp	/^InfoBoxContentNextWaypoint::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentNextWaypoint
Update	InfoBoxes/Content/Team.cpp	/^InfoBoxContentTeamCode::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTeamCode
Update	InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentClimbPercent::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentClimbPercent
Update	InfoBoxes/Content/Thermal.cpp	/^InfoBoxContentThermalAssistant::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentThermalAssistant
Update	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentBarogram::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentBarogram
Update	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentCirclingAverageSpark::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentCirclingAverageSpark
Update	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentNettoVarioSpark::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentNettoVarioSpark
Update	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentTaskProgress::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTaskProgress
Update	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentThermalBand::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentThermalBand
Update	InfoBoxes/Content/Trace.cpp	/^InfoBoxContentVarioSpark::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentVarioSpark
Update	InfoBoxes/Content/Weather.cpp	/^InfoBoxContentTemperatureForecast::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentTemperatureForecast
Update	InfoBoxes/Content/Weather.cpp	/^InfoBoxContentWindArrow::Update(InfoBoxData &data)$/;"	f	class:InfoBoxContentWindArrow
Update	Logger/LoggerFRecord.cpp	/^LoggerFRecord::Update(const GPSState &gps, double time, bool nav_warning)$/;"	f	class:LoggerFRecord
Update	Math/AvFilter.hpp	/^  bool Update(const double x0) {$/;"	f	class:AvFilter
Update	Math/DiffFilter.cpp	/^DiffFilter::Update(const double x0)$/;"	f	class:DiffFilter
Update	Math/Filter.cpp	/^Filter::Update(const double _x)$/;"	f	class:Filter
Update	Math/KalmanFilter1d.cpp	/^KalmanFilter1d::Update(const double z_abs, const double var_z_abs,$/;"	f	class:KalmanFilter1d
Update	Math/LeastSquares.cpp	/^LeastSquares::Update(double x, double y, double weight)$/;"	f	class:LeastSquares
Update	Math/LeastSquares.cpp	/^LeastSquares::Update(double y)$/;"	f	class:LeastSquares
Update	Math/SelfTimingKalmanFilter1d.cpp	/^SelfTimingKalmanFilter1d::Update(const double z_abs, const double var_z_abs)$/;"	f	class:SelfTimingKalmanFilter1d
Update	Math/WindowFilter.hpp	/^  bool Update(const double x0) {$/;"	f	class:WindowFilter
Update	Monitor/AirspaceWarningMonitor.cpp	/^  bool Update(const AbstractAirspace &_airspace,$/;"	f	class:final
Update	NMEA/Validity.hpp	/^  void Update(double now) {$/;"	f	class:Validity
Update	PageActions.cpp	/^PageActions::Update()$/;"	f	class:PageActions
Update	Replay/AircraftSim.cpp	/^AircraftSim::Update(const Angle heading, const double timestep)$/;"	f	class:AircraftSim
Update	Replay/CatmullRomInterpolator.hpp	/^  Update(double t, GeoPoint location, double alt, double palt)$/;"	f	class:CatmullRomInterpolator
Update	Replay/DemoReplay.cpp	/^DemoReplay::Update(double time_scale, TaskAccessor& task)$/;"	f	class:DemoReplay
Update	Replay/DemoReplayGlue.cpp	/^DemoReplayGlue::Update(NMEAInfo &data)$/;"	f	class:DemoReplayGlue
Update	Replay/IgcReplay.cpp	/^IgcReplay::Update(NMEAInfo &basic)$/;"	f	class:IgcReplay
Update	Replay/NmeaReplay.cpp	/^NmeaReplay::Update(NMEAInfo &data)$/;"	f	class:NmeaReplay
Update	Replay/Replay.cpp	/^Replay::Update()$/;"	f	class:Replay
Update	Screen/OpenGL/VertexPointer.hpp	/^  void Update(GLenum type, GLsizei stride, const void *p) {$/;"	f	struct:ScopeVertexPointer
Update	Screen/OpenGL/VertexPointer.hpp	/^  void Update(GLenum type, const void *p) {$/;"	f	struct:ScopeVertexPointer
Update	Screen/OpenGL/VertexPointer.hpp	/^  void Update(const BulkPixelPoint *p) {$/;"	f	struct:ScopeVertexPointer
Update	Screen/OpenGL/VertexPointer.hpp	/^  void Update(const ExactPixelPoint *p) {$/;"	f	struct:ScopeVertexPointer
Update	Screen/OpenGL/VertexPointer.hpp	/^  void Update(const FloatPoint2D *p) {$/;"	f	struct:ScopeVertexPointer
Update	TeamCode/TeamCode.cpp	/^TeamCode::Update(Angle bearing, double range)$/;"	f	class:TeamCode
Update	TeamCode/TeamCode.cpp	/^TeamCode::Update(const TCHAR* _code)$/;"	f	class:TeamCode
Update	Time/DeltaTime.cpp	/^DeltaTime::Update(double current_time, double min_delta, double warp_tolerance)$/;"	f	class:DeltaTime
Update	Time/GPSClock.hpp	/^  void Update(double now) {$/;"	f	class:GPSClock
Update	Time/PeriodClock.hpp	/^  void Update() {$/;"	f	class:PeriodClock
Update	Time/PeriodClock.hpp	/^  void Update(Stamp now) {$/;"	f	class:PeriodClock
Update	Topography/TopographyFile.cpp	/^TopographyFile::Update(const WindowProjection &map_projection)$/;"	f	class:TopographyFile
Update	UIUtil/GestureManager.cpp	/^GestureManager::Update(PixelPoint p)$/;"	f	class:GestureManager
Update	UIUtil/TrackingGestureManager.cpp	/^TrackingGestureManager::Update(PixelPoint p)$/;"	f	class:TrackingGestureManager
Update	Weather/NOAAUpdater.cpp	/^NOAAUpdater::Update(NOAAStore &store, JobRunner &runner)$/;"	f	class:NOAAUpdater
Update	Weather/NOAAUpdater.cpp	/^NOAAUpdater::Update(NOAAStore::Item &item, JobRunner &runner)$/;"	f	class:NOAAUpdater
Update	Weather/NOAAUpdater.cpp	/^NOAAUpdater::Update(NOAAStore::Item &item,$/;"	f	class:NOAAUpdater
Update	Weather/Rasp/RaspRenderer.hpp	/^  void Update(BrokenTime time_local, OperationEnvironment &operation) {$/;"	f	class:RaspRenderer
UpdateActiveIndex	Dialogs/Weather/MapOverlayWidget.cpp	/^  void UpdateActiveIndex() {$/;"	f	class:final	file:
UpdateAll	MapWindow/MapWindow.hpp	/^  void UpdateAll() {$/;"	f	class:MapWindow
UpdateAllowedCharacters	Dialogs/TouchTextEntry.cpp	/^UpdateAllowedCharacters()$/;"	f	file:
UpdateArrayBuffer	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::UpdateArrayBuffer()$/;"	f	class:TopographyFileRenderer
UpdateAutoMC	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateAutoMC(GlidePolar &glide_polar,$/;"	f	class:AbstractTask
UpdateAutoMC	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateAutoMC(const AircraftState &state_now,$/;"	f	class:TaskManager
UpdateAutopilot	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateAutopilot(TaskAccessor &task, const AircraftState &state)$/;"	f	class:TaskAutoPilot
UpdateAvailable	Dialogs/FileManager.cpp	/^UpdateAvailable(const FileRepository &repository, const TCHAR *name)$/;"	f	file:
UpdateBatteryInfo	Hardware/Battery.cpp	/^UpdateBatteryInfo()$/;"	f
UpdateBatteryInfo	Hardware/Battery.hpp	/^UpdateBatteryInfo()$/;"	f
UpdateBestLD	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::UpdateBestLD()$/;"	f	class:GlidePolar
UpdateBoundingBox	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateBoundingBox(const FlatProjection &projection)$/;"	f	class:OrderedTaskPoint
UpdateButtons	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::UpdateButtons()$/;"	f	class:AirspaceWarningListWidget
UpdateButtons	Dialogs/Device/DeviceListDialog.cpp	/^DeviceListWidget::UpdateButtons()$/;"	f	class:DeviceListWidget
UpdateButtons	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void UpdateButtons() {$/;"	f	class:final
UpdateButtons	Dialogs/DownloadFilePicker.cpp	/^  void UpdateButtons() {$/;"	f	class:final
UpdateButtons	Dialogs/FileManager.cpp	/^ManagedFileListWidget::UpdateButtons()$/;"	f	class:ManagedFileListWidget
UpdateButtons	Dialogs/MapItemListDialog.cpp	/^  void UpdateButtons() {$/;"	f	class:final
UpdateButtons	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void UpdateButtons() {$/;"	f	class:PageListWidget
UpdateButtons	Dialogs/Task/Manager/TaskEditPanel.cpp	/^TaskEditPanel::UpdateButtons()$/;"	f	class:TaskEditPanel
UpdateButtons	Dialogs/Task/OptionalStartsDialog.cpp	/^  void UpdateButtons() {$/;"	f	class:OptionStartsWidget
UpdateButtons	Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::UpdateButtons()$/;"	f	class:TrafficListWidget
UpdateButtons	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::UpdateButtons()$/;"	f	class:WaypointManagerWidget
UpdateButtons	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::UpdateButtons()$/;"	f	class:TrafficWidget
UpdateButtons	Kobo/NetworkDialog.cpp	/^NetworkWidget::UpdateButtons()$/;"	f	class:NetworkWidget
UpdateButtons	Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateButtons()$/;"	f	class:WifiListWidget
UpdateCRC16CCITT	Util/CRC.hpp	/^UpdateCRC16CCITT(const uint8_t *data, const uint8_t *end, uint16_t crc)$/;"	f
UpdateCRC16CCITT	Util/CRC.hpp	/^UpdateCRC16CCITT(const void *data, size_t length, uint16_t crc)$/;"	f
UpdateCRC16CCITT	Util/CRC.hpp	/^UpdateCRC16CCITT(uint8_t octet, uint16_t crc)$/;"	f
UpdateCaption	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^UpdateCaption(WndForm &form, unsigned page)$/;"	f	file:
UpdateCaption	Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::UpdateCaption()$/;"	f	class:PlaneEditWidget
UpdateCaption	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::UpdateCaption()$/;"	f	class:TaskManagerDialog
UpdateCaption	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^UpdateCaption(WndForm *form, const Waypoint &waypoint)$/;"	f	file:
UpdateCaption	Dialogs/dlgChecklist.cpp	/^UpdateCaption(WndForm &form, unsigned page)$/;"	f	file:
UpdateCaption	Dialogs/dlgQuickMenu.cpp	/^QuickMenu::UpdateCaption()$/;"	f	class:QuickMenu
UpdateChanging	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^FlarmTrafficDetailsWidget::UpdateChanging(const MoreData &basic)$/;"	f	class:FlarmTrafficDetailsWidget
UpdateClicked	Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::UpdateClicked()$/;"	f	class:WeatherMapOverlayListWidget
UpdateClicked	Dialogs/Weather/NOAADetails.cpp	/^NOAADetailsWidget::UpdateClicked()$/;"	f	class:NOAADetailsWidget
UpdateClicked	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::UpdateClicked()$/;"	f	class:NOAAListWidget
UpdateClock	NMEA/Info.cpp	/^NMEAInfo::UpdateClock()$/;"	f	class:NMEAInfo
UpdateCommonStats	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStats(const AircraftState &state)$/;"	f	class:TaskManager
UpdateCommonStatsPolar	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsPolar(const AircraftState &state)$/;"	f	class:TaskManager
UpdateCommonStatsTask	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsTask()$/;"	f	class:TaskManager
UpdateCommonStatsTimes	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsTimes(const AircraftState &state)$/;"	f	class:TaskManager
UpdateCommonStatsWaypoints	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateCommonStatsWaypoints(const AircraftState &state)$/;"	f	class:TaskManager
UpdateComputer	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateComputer(TaskAccessor& task, const AircraftState& state)$/;"	f	class:TaskAutoPilot
UpdateConfigured	Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateConfigured()$/;"	f	class:WifiListWidget
UpdateContent	InfoBoxes/InfoBoxWindow.cpp	/^InfoBoxWindow::UpdateContent()$/;"	f	class:InfoBoxWindow
UpdateConvex	Math/ConvexFilter.cpp	/^ConvexFilter::UpdateConvex(double x, double y, int csign)$/;"	f	class:ConvexFilter
UpdateConvexNegative	Math/ConvexFilter.hpp	/^  void UpdateConvexNegative(double x, double y) {$/;"	f	class:ConvexFilter
UpdateConvexPositive	Math/ConvexFilter.hpp	/^  void UpdateConvexPositive(double x, double y) {$/;"	f	class:ConvexFilter
UpdateCrossSection	Dialogs/dlgAnalysis.cpp	/^ChartControl::UpdateCrossSection(const MoreData &basic,$/;"	f	class:ChartControl
UpdateCruiseBearing	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateCruiseBearing(const TaskAccessor& task,$/;"	f	class:TaskAutoPilot
UpdateCursor	Dialogs/KnobTextEntry.cpp	/^  void UpdateCursor() {$/;"	f	class:final	file:
UpdateDelta	Engine/Trace/Trace.cpp	/^Trace::UpdateDelta(TraceDelta &td)$/;"	f	class:Trace
UpdateDisplayMode	ActionInterface.cpp	/^ActionInterface::UpdateDisplayMode()$/;"	f	class:ActionInterface
UpdateDisplayMode	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateDisplayMode()$/;"	f	class:GlueMapWindow
UpdateError	Math/LeastSquares.cpp	/^LeastSquares::UpdateError()$/;"	f	class:LeastSquares
UpdateFiles	Dialogs/FileManager.cpp	/^ManagedFileListWidget::UpdateFiles() {$/;"	f	class:ManagedFileListWidget
UpdateFilter	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateFilter(const AircraftState& state, const bool circling)$/;"	f	class:AirspaceWarningManager
UpdateFlightMode	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateFlightMode()$/;"	f	class:AbstractTask
UpdateGR	Computer/GlideRatioCalculator.cpp	/^UpdateGR(double gr, double leg_distance, double height_above_leg,$/;"	f
UpdateGaugeVisibility	MainWindow.cpp	/^MainWindow::UpdateGaugeVisibility()$/;"	f	class:MainWindow
UpdateGeometry	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::UpdateGeometry()$/;"	f	class:AbstractTaskFactory
UpdateGeometry	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateGeometry()$/;"	f	class:OrderedTask
UpdateGeometry	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateGeometry()$/;"	f	class:OrderedTaskPoint
UpdateGlide	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateGlide(const AircraftState &state,$/;"	f	class:AirspaceWarningManager
UpdateGlideSolutions	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateGlideSolutions(const AircraftState &state,$/;"	f	class:AbstractTask
UpdateHelp	Dialogs/ListPicker.cpp	/^  void UpdateHelp(unsigned index) {$/;"	f	class:ListPickerWidget
UpdateHistogram	Math/Histogram.cpp	/^Histogram::UpdateHistogram(double x)$/;"	f	class:Histogram
UpdateIdle	Engine/Contest/ContestManager.cpp	/^ContestManager::UpdateIdle(bool exhaustive)$/;"	f	class:ContestManager
UpdateIdle	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateIdle(const AircraftState &state,$/;"	f	class:AbstractTask
UpdateIdle	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateIdle(const AircraftState &state,$/;"	f	class:OrderedTask
UpdateIdle	Engine/Task/TaskManager.cpp	/^TaskManager::UpdateIdle(const AircraftState &state)$/;"	f	class:TaskManager
UpdateInfoBoxATCRadial	InfoBoxes/Content/Places.cpp	/^UpdateInfoBoxATCRadial(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeAGL	InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeAGL(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeBaro	InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeBaro(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeFlightLevel	InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeFlightLevel(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeNav	InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeNav(InfoBoxData &data)$/;"	f
UpdateInfoBoxAltitudeQFE	InfoBoxes/Content/Altitude.cpp	/^UpdateInfoBoxAltitudeQFE(InfoBoxData &data)$/;"	f
UpdateInfoBoxBattery	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxBattery(InfoBoxData &data)$/;"	f
UpdateInfoBoxBearing	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxBearing(InfoBoxData &data)$/;"	f
UpdateInfoBoxBearingDiff	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxBearingDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxCPULoad	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxCPULoad(InfoBoxData &data)$/;"	f
UpdateInfoBoxCircleDiameter	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxCircleDiameter(InfoBoxData &data)$/;"	f
UpdateInfoBoxCruiseEfficiency	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxCruiseEfficiency(InfoBoxData &data)$/;"	f
UpdateInfoBoxExperimental1	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxExperimental1(InfoBoxData &data)$/;"	f
UpdateInfoBoxExperimental2	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxExperimental2(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalAltitudeDiff	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalAltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalAltitudeRequire	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalAltitudeRequire(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalDistance	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalETA	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalETA(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalETE	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalETE(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalETEVMG	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalETEVMG(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalGR	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalGR(InfoBoxData &data)$/;"	f
UpdateInfoBoxFinalMC0AltitudeDiff	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxFinalMC0AltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxFreeRAM	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxFreeRAM(InfoBoxData &data)$/;"	f
UpdateInfoBoxFrequency	InfoBoxes/Content/Radio.cpp	/^UpdateInfoBoxFrequency(InfoBoxData & data, const RadioFrequency & freq, const TCHAR * freq_name)$/;"	f	file:
UpdateInfoBoxGLoad	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxGLoad(InfoBoxData &data)$/;"	f
UpdateInfoBoxGRAvg	InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxGRAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxGRCruise	InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxGRCruise(InfoBoxData &data)$/;"	f
UpdateInfoBoxGRInstant	InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxGRInstant(InfoBoxData &data)$/;"	f
UpdateInfoBoxHeadWind	InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxHeadWind(InfoBoxData &data)$/;"	f
UpdateInfoBoxHeadWindSimplified	InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxHeadWindSimplified(InfoBoxData &data)$/;"	f
UpdateInfoBoxHomeDistance	InfoBoxes/Content/Places.cpp	/^UpdateInfoBoxHomeDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxHumidity	InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxHumidity(InfoBoxData &data)$/;"	f
UpdateInfoBoxLDVario	InfoBoxes/Content/Glide.cpp	/^UpdateInfoBoxLDVario(InfoBoxData &data)$/;"	f
UpdateInfoBoxNbrSat	InfoBoxes/Content/Other.cpp	/^UpdateInfoBoxNbrSat(InfoBoxData &data)$/;"	f
UpdateInfoBoxNearestAirspaceHorizontal	InfoBoxes/Content/Airspace.cpp	/^UpdateInfoBoxNearestAirspaceHorizontal(InfoBoxData &data)$/;"	f
UpdateInfoBoxNearestAirspaceVertical	InfoBoxes/Content/Airspace.cpp	/^UpdateInfoBoxNearestAirspaceVertical(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextAltitudeArrival	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextAltitudeArrival(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextAltitudeDiff	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextAltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextAltitudeRequire	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextAltitudeRequire(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextDistance	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextDistanceNominal	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextDistanceNominal(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETA	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETA(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETAVMG	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETAVMG(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETE	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETE(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextETEVMG	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextETEVMG(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextGR	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextGR(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextLegEqThermal	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxNextLegEqThermal(InfoBoxData &data)$/;"	f
UpdateInfoBoxNextMC0AltitudeDiff	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxNextMC0AltitudeDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxNonCirclingClimbRatio	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxNonCirclingClimbRatio(InfoBoxData &data)$/;"	f
UpdateInfoBoxRadial	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxRadial(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeed	InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeed(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeedDolphin	InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeedDolphin(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeedIndicated	InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeedIndicated(InfoBoxData &data)$/;"	f
UpdateInfoBoxSpeedMacCready	InfoBoxes/Content/Speed.cpp	/^UpdateInfoBoxSpeedMacCready(InfoBoxData &data)$/;"	f
UpdateInfoBoxStartOpen	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxStartOpen(InfoBoxData &data)$/;"	f
UpdateInfoBoxStartOpenArrival	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxStartOpenArrival(InfoBoxData &data)$/;"	f
UpdateInfoBoxTakeoffDistance	InfoBoxes/Content/Places.cpp	/^UpdateInfoBoxTakeoffDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAADistance	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAADistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAADistanceMax	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAADistanceMax(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAADistanceMin	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAADistanceMin(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAASpeed	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAASpeed(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAASpeedMax	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAASpeedMax(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAASpeedMin	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAASpeedMin(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAATime	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAATime(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskAATimeDelta	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskAATimeDelta(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeed	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeed(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeedAchieved	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeedAchieved(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeedHour	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeedHour(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskSpeedInstant	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskSpeedInstant(InfoBoxData &data)$/;"	f
UpdateInfoBoxTaskTimeUnderMaxHeight	InfoBoxes/Content/Task.cpp	/^UpdateInfoBoxTaskTimeUnderMaxHeight(InfoBoxData &data)$/;"	f
UpdateInfoBoxTeamBearing	InfoBoxes/Content/Team.cpp	/^UpdateInfoBoxTeamBearing(InfoBoxData &data)$/;"	f
UpdateInfoBoxTeamBearingDiff	InfoBoxes/Content/Team.cpp	/^UpdateInfoBoxTeamBearingDiff(InfoBoxData &data)$/;"	f
UpdateInfoBoxTeamDistance	InfoBoxes/Content/Team.cpp	/^UpdateInfoBoxTeamDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxTemperature	InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxTemperature(InfoBoxData &data)$/;"	f
UpdateInfoBoxTerrainCollision	InfoBoxes/Content/Terrain.cpp	/^UpdateInfoBoxTerrainCollision(InfoBoxData &data)$/;"	f
UpdateInfoBoxTerrainHeight	InfoBoxes/Content/Terrain.cpp	/^UpdateInfoBoxTerrainHeight(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermal30s	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermal30s(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalAllAvg	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalAllAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalAvg	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalGain	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalGain(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalLastAvg	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalLastAvg(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalLastGain	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalLastGain(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalLastTime	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalLastTime(InfoBoxData &data)$/;"	f
UpdateInfoBoxThermalRatio	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxThermalRatio(InfoBoxData &data)$/;"	f
UpdateInfoBoxTimeFlight	InfoBoxes/Content/Time.cpp	/^UpdateInfoBoxTimeFlight(InfoBoxData &data)$/;"	f
UpdateInfoBoxTimeLocal	InfoBoxes/Content/Time.cpp	/^UpdateInfoBoxTimeLocal(InfoBoxData &data)$/;"	f
UpdateInfoBoxTimeUTC	InfoBoxes/Content/Time.cpp	/^UpdateInfoBoxTimeUTC(InfoBoxData &data)$/;"	f
UpdateInfoBoxVario	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxVario(InfoBoxData &data)$/;"	f
UpdateInfoBoxVarioDistance	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxVarioDistance(InfoBoxData &data)$/;"	f
UpdateInfoBoxVarioNetto	InfoBoxes/Content/Thermal.cpp	/^UpdateInfoBoxVarioNetto(InfoBoxData &data)$/;"	f
UpdateInfoBoxWindBearing	InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxWindBearing(InfoBoxData &data)$/;"	f
UpdateInfoBoxWindSpeed	InfoBoxes/Content/Weather.cpp	/^UpdateInfoBoxWindSpeed(InfoBoxData &data)$/;"	f
UpdateInside	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateInside(const AircraftState& state,$/;"	f	class:AirspaceWarningManager
UpdateInvalidLabel	Dialogs/Plane/PlanePolarDialog.cpp	/^PlanePolarWidget::UpdateInvalidLabel()$/;"	f	class:PlanePolarWidget
UpdateLayout	Form/ButtonPanel.cpp	/^ButtonPanel::UpdateLayout()$/;"	f	class:ButtonPanel
UpdateLayout	Form/ButtonPanel.cpp	/^ButtonPanel::UpdateLayout(const PixelRect rc)$/;"	f	class:ButtonPanel
UpdateLayout	Form/Form.cpp	/^WndForm::UpdateLayout()$/;"	f	class:WndForm
UpdateLayout	Form/TabDisplay.cpp	/^TabDisplay::UpdateLayout(const PixelRect &rc, bool _vertical)$/;"	f	class:TabDisplay
UpdateLayout	Form/TabMenuDisplay.cpp	/^TabMenuDisplay::UpdateLayout()$/;"	f	class:TabMenuDisplay
UpdateLayout	Gauge/BigThermalAssistantWidget.cpp	/^BigThermalAssistantWidget::UpdateLayout()$/;"	f	class:BigThermalAssistantWidget
UpdateLayout	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::UpdateLayout()$/;"	f	class:TrafficWidget
UpdateLayout	Gauge/ThermalAssistantRenderer.cpp	/^ThermalAssistantRenderer::UpdateLayout(const PixelRect &rc)$/;"	f	class:ThermalAssistantRenderer
UpdateLayout	Operation/VerboseOperationEnvironment.cpp	/^VerboseOperationEnvironment::UpdateLayout()$/;"	f	class:VerboseOperationEnvironment
UpdateLayout	PopupMessage.cpp	/^PopupMessage::UpdateLayout(PixelRect _rc)$/;"	f	class:PopupMessage
UpdateLayout	ProgressWindow.cpp	/^ProgressWindow::UpdateLayout(PixelRect rc)$/;"	f	class:ProgressWindow
UpdateLayout	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::UpdateLayout(const PixelRect &rc)$/;"	f	class:ButtonPanelWidget
UpdateLayout	Widget/RowFormWidget.cpp	/^RowFormWidget::Row::UpdateLayout(ContainerWindow &parent,$/;"	f	class:RowFormWidget::Row
UpdateLayout	Widget/RowFormWidget.cpp	/^RowFormWidget::UpdateLayout()$/;"	f	class:RowFormWidget
UpdateLayout	Widget/TwoWidgets.cpp	/^TwoWidgets::UpdateLayout()$/;"	f	class:TwoWidgets
UpdateList	Dialogs/Airspace/AirspaceList.cpp	/^AirspaceListWidget::UpdateList()$/;"	f	class:AirspaceListWidget
UpdateList	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^AirspaceWarningListWidget::UpdateList()$/;"	f	class:AirspaceWarningListWidget
UpdateList	Dialogs/Plane/PlaneListDialog.cpp	/^PlaneListWidget::UpdateList()$/;"	f	class:PlaneListWidget
UpdateList	Dialogs/ProfileListDialog.cpp	/^ProfileListWidget::UpdateList()$/;"	f	class:ProfileListWidget
UpdateList	Dialogs/Task/OptionalStartsDialog.cpp	/^  void UpdateList() {$/;"	f	class:OptionStartsWidget
UpdateList	Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::UpdateList()$/;"	f	class:TrafficListWidget
UpdateList	Dialogs/Waypoint/Manager.cpp	/^WaypointManagerWidget::UpdateList()$/;"	f	class:WaypointManagerWidget
UpdateList	Dialogs/Waypoint/WaypointList.cpp	/^WaypointListWidget::UpdateList()$/;"	f	class:WaypointListWidget
UpdateList	Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::UpdateList()$/;"	f	class:WeatherMapOverlayListWidget
UpdateList	Dialogs/Weather/NOAAList.cpp	/^NOAAListWidget::UpdateList()$/;"	f	class:NOAAListWidget
UpdateList	Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateList()$/;"	f	class:WifiListWidget
UpdateMapScale	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateMapScale()$/;"	f	class:GlueMapWindow
UpdateMeasurements	Atmosphere/CuSonde.cpp	/^CuSonde::UpdateMeasurements(const NMEAInfo &basic,$/;"	f	class:CuSonde
UpdateMode	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateMode(const TaskAccessor& task, const AircraftState& state)$/;"	f	class:TaskAutoPilot
UpdateNameButton	Dialogs/Task/TargetDialog.cpp	/^TargetWidget::UpdateNameButton()$/;"	f	class:TargetWidget
UpdateOZ	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateOZ(const FlatProjection &projection)$/;"	f	class:OrderedTaskPoint
UpdateOZ	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::UpdateOZ(const FlatProjection &projection,$/;"	f	class:SampledTaskPoint
UpdateObservationZones	Engine/Task/Ordered/OrderedTask.cpp	/^UpdateObservationZones(OrderedTask::OrderedTaskPointVector &points,$/;"	f	file:
UpdateOrderedTaskSettings	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::UpdateOrderedTaskSettings(OrderedTaskSettings &to)$/;"	f	class:AbstractTaskFactory
UpdateOrderedTaskSettings	Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::UpdateOrderedTaskSettings(OrderedTaskSettings& to)$/;"	f	class:FAITaskFactory
UpdateOrderedTaskSettings	Engine/Task/Factory/TouringTaskFactory.cpp	/^TouringTaskFactory::UpdateOrderedTaskSettings(OrderedTaskSettings& to)$/;"	f	class:TouringTaskFactory
UpdateOverlayMode	Input/InputEvents.cpp	/^InputEvents::UpdateOverlayMode()$/;"	f	class:InputEvents
UpdatePage	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::UpdatePage()$/;"	f	class:WaypointDetailsWidget
UpdatePan	Input/InputEvents.cpp	/^InputEvents::UpdatePan()$/;"	f	class:InputEvents
UpdatePolar	Engine/Route/RoutePlanner.cpp	/^RoutePlanner::UpdatePolar(const GlideSettings &settings,$/;"	f	class:RoutePlanner
UpdatePolar	Task/RoutePlannerGlue.hpp	/^  void UpdatePolar(const GlideSettings &settings,$/;"	f	class:RoutePlannerGlue
UpdatePolarButton	Dialogs/Plane/PlaneDetailsDialog.cpp	/^PlaneEditWidget::UpdatePolarButton()$/;"	f	class:PlaneEditWidget
UpdatePolarLabel	Dialogs/Plane/PlanePolarDialog.cpp	/^  void UpdatePolarLabel() {$/;"	f	class:final	file:
UpdatePositions	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void UpdatePositions(const PixelRect &rc) {$/;"	f	class:final	file:
UpdatePredicted	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdatePredicted(const AircraftState& state, $/;"	f	class:AirspaceWarningManager
UpdatePreview	Dialogs/Weather/MapOverlayWidget.cpp	/^  void UpdatePreview() {$/;"	f	class:final	file:
UpdatePreview	Dialogs/Weather/MapOverlayWidget.cpp	/^  void UpdatePreview(Path path) {$/;"	f	class:final	file:
UpdateProjection	Engine/Task/Points/SampledTaskPoint.cpp	/^SampledTaskPoint::UpdateProjection(const FlatProjection &projection)$/;"	f	class:SampledTaskPoint
UpdateProjection	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateProjection()$/;"	f	class:GlueMapWindow
UpdateProjection	Terrain/RasterMap.cpp	/^RasterMap::UpdateProjection()$/;"	f	class:RasterMap
UpdateQuantisation	Terrain/RasterRenderer.cpp	/^RasterRenderer::UpdateQuantisation()$/;"	f	class:RasterRenderer
UpdateSMax	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::UpdateSMax()$/;"	f	class:GlidePolar
UpdateSMin	Engine/GlideSolvers/GlidePolar.cpp	/^GlidePolar::UpdateSMin()$/;"	f	class:GlidePolar
UpdateSample	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateSample(const AircraftState &state,$/;"	f	class:OrderedTask
UpdateSample	Engine/Task/Unordered/AbortTask.cpp	/^AbortTask::UpdateSample(const AircraftState &state,$/;"	f	class:AbortTask
UpdateSample	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::UpdateSample(gcc_unused const AircraftState &state,$/;"	f	class:GotoTask
UpdateSampleFar	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::UpdateSampleFar(const AircraftState& state,$/;"	f	class:AATPoint
UpdateSampleFar	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual bool UpdateSampleFar(gcc_unused const AircraftState &state,$/;"	f	class:OrderedTaskPoint
UpdateSampleNear	Engine/Task/Ordered/Points/AATPoint.cpp	/^AATPoint::UpdateSampleNear(const AircraftState& state,$/;"	f	class:AATPoint
UpdateSampleNear	Engine/Task/Ordered/Points/OrderedTaskPoint.cpp	/^OrderedTaskPoint::UpdateSampleNear(const AircraftState &state,$/;"	f	class:OrderedTaskPoint
UpdateScanResults	Kobo/WifiDialog.cpp	/^WifiListWidget::UpdateScanResults()$/;"	f	class:WifiListWidget
UpdateScreenAngle	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateScreenAngle()$/;"	f	class:GlueMapWindow
UpdateScreenBounds	MapWindow/GlueMapWindowDisplayMode.cpp	/^GlueMapWindow::UpdateScreenBounds()$/;"	f	class:GlueMapWindow
UpdateScreenBounds	MapWindow/MapWindow.hpp	/^  void UpdateScreenBounds() {$/;"	f	class:MapWindow
UpdateScreenBounds	Projection/WindowProjection.cpp	/^WindowProjection::UpdateScreenBounds()$/;"	f	class:WindowProjection
UpdateSector	Engine/Task/ObservationZones/SectorZone.cpp	/^SectorZone::UpdateSector() $/;"	f	class:SectorZone
UpdateSelector	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::UpdateSelector(const FlarmId id, const PixelPoint pt)$/;"	f	class:FlarmTrafficWindow
UpdateShaderProjectionMatrix	Screen/OpenGL/Shaders.cpp	/^OpenGL::UpdateShaderProjectionMatrix()$/;"	f	class:OpenGL
UpdateShiftState	Widget/KeyboardWidget.cpp	/^KeyboardWidget::UpdateShiftState()$/;"	f	class:KeyboardWidget
UpdateSolution	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::UpdateSolution(const State _state,$/;"	f	class:AirspaceWarning
UpdateStartTransition	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateStartTransition(const AircraftState &state,$/;"	f	class:OrderedTask
UpdateState	Engine/Task/Ordered/SmartTaskAdvance.cpp	/^SmartTaskAdvance::UpdateState()$/;"	f	class:SmartTaskAdvance
UpdateState	Replay/TaskAutoPilot.cpp	/^TaskAutoPilot::UpdateState(const TaskAccessor& task, AircraftState& state,$/;"	f	class:TaskAutoPilot
UpdateStatsDistances	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateStatsDistances(const GeoPoint &location,$/;"	f	class:AbstractTask
UpdateStatsGeometry	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::UpdateStatsGeometry()$/;"	f	class:AbstractTaskFactory
UpdateStatsGeometry	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateStatsGeometry()$/;"	f	class:OrderedTask
UpdateStatsGlide	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateStatsGlide(const AircraftState &state,$/;"	f	class:AbstractTask
UpdateStatsSpeeds	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateStatsSpeeds(const double time)$/;"	f	class:AbstractTask
UpdateStatsTimes	Engine/Task/AbstractTask.cpp	/^AbstractTask::UpdateStatsTimes(const double time)$/;"	f	class:AbstractTask
UpdateSummary	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::UpdateSummary(TaskSummary& ordered_summary) const$/;"	f	class:OrderedTask
UpdateTask	Engine/Airspace/AirspaceWarningManager.cpp	/^AirspaceWarningManager::UpdateTask(const AircraftState &state,$/;"	f	class:AirspaceWarningManager
UpdateTaskDirection	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::UpdateTaskDirection(bool show_task_direction, Angle bearing)$/;"	f	class:FlarmTrafficControl
UpdateTemps	Atmosphere/CuSonde.cpp	/^CuSonde::Level::UpdateTemps(bool humidity_valid, double humidity, Temperature temperature)$/;"	f	class:CuSonde::Level
UpdateTerrain	CrossSection/CrossSectionRenderer.cpp	/^CrossSectionRenderer::UpdateTerrain(TerrainHeight *elevations) const$/;"	f	class:CrossSectionRenderer
UpdateTerrain	MapWindow/MapWindow.cpp	/^MapWindow::UpdateTerrain()$/;"	f	class:MapWindow
UpdateTerrainBase	Engine/Route/FlatTriangleFanTree.cpp	/^FlatTriangleFanTree::UpdateTerrainBase(const FlatGeoPoint o,$/;"	f	class:FlatTriangleFanTree
UpdateTerrainPreview	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^TerrainDisplayConfigPanel::UpdateTerrainPreview()$/;"	f	class:TerrainDisplayConfigPanel
UpdateTerrainTiles	Terrain/Loader.cpp	/^UpdateTerrainTiles(struct zzip_dir *dir, const char *path,$/;"	f
UpdateTerrainTiles	Terrain/Loader.hpp	/^UpdateTerrainTiles(struct zzip_dir *dir,$/;"	f
UpdateTextAndLayout	PopupMessage.cpp	/^PopupMessage::UpdateTextAndLayout()$/;"	f	class:PopupMessage
UpdateTextboxProp	Dialogs/TouchTextEntry.cpp	/^UpdateTextboxProp()$/;"	f	file:
UpdateThermalIndex	Atmosphere/CuSonde.cpp	/^CuSonde::Level::UpdateThermalIndex(double h_agl,$/;"	f	class:CuSonde::Level
UpdateTiles	Terrain/Loader.cpp	/^TerrainLoader::UpdateTiles(struct zzip_dir *dir, const char *path,$/;"	f	class:TerrainLoader
UpdateTiles	Terrain/RasterTerrain.cpp	/^RasterTerrain::UpdateTiles(const GeoPoint &location, double radius)$/;"	f	class:RasterTerrain
UpdateTimes	Engine/ThermalBand/ThermalEncounterCollection.cpp	/^ThermalEncounterCollection::UpdateTimes()$/;"	f	class:ThermalEncounterCollection
UpdateTopography	MapWindow/MapWindow.cpp	/^MapWindow::UpdateTopography(unsigned max_update)$/;"	f	class:MapWindow
UpdateTrafficGaugeVisibility	MainWindow.cpp	/^MainWindow::UpdateTrafficGaugeVisibility()$/;"	f	class:MainWindow
UpdateUI	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^VegaParametersWidget::UpdateUI()$/;"	f	class:VegaParametersWidget
UpdateUnitFields	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^UnitsConfigPanel::UpdateUnitFields(const UnitSetting &units)$/;"	f	class:UnitsConfigPanel
UpdateValues	InfoBoxes/Panel/ATCReference.cpp	/^ATCReferencePanel::UpdateValues()$/;"	f	class:ATCReferencePanel
UpdateVarioGaugeVisibility	MainWindow.cpp	/^MainWindow::UpdateVarioGaugeVisibility()$/;"	f	class:MainWindow
UpdateVector	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::UpdateVector()$/;"	f	class:WindSettingsPanel
UpdateVisibilities	Dialogs/Device/DeviceEditWidget.cpp	/^DeviceEditWidget::UpdateVisibilities()$/;"	f	class:DeviceEditWidget
UpdateVisibilities	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^MapDisplayConfigPanel::UpdateVisibilities()$/;"	f	class:MapDisplayConfigPanel
UpdateVisibilities	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^WaypointDisplayConfigPanel::UpdateVisibilities()$/;"	f	class:WaypointDisplayConfigPanel
UpdateVisibility	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void UpdateVisibility() {$/;"	f	class:final	file:
UpdateVisibleShapes	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::UpdateVisibleShapes(const WindowProjection &projection)$/;"	f	class:TopographyFileRenderer
UpdateVolatile	Dialogs/Traffic/TrafficList.cpp	/^TrafficListWidget::UpdateVolatile()$/;"	f	class:TrafficListWidget
UpdateWarnings	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::UpdateWarnings()$/;"	f	class:FlarmTrafficWindow
UpdateZoomControls	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^WaypointDetailsWidget::UpdateZoomControls()$/;"	f	class:WaypointDetailsWidget
UploadFileASCII	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileASCII(Port &port, unsigned i, FileASCII &data,$/;"	f	class:CAI302
UploadFileBinary	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileBinary(Port &port, unsigned i, FileBinary &data,$/;"	f	class:CAI302
UploadFileData	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileData(Port &port, bool next, void *data, unsigned length,$/;"	f	class:CAI302
UploadFileList	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileList(Port &port, unsigned i, FileList &data,$/;"	f	class:CAI302
UploadFileSignatureASCII	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadFileSignatureASCII(Port &port, FileSignatureASCII &data,$/;"	f	class:CAI302
UploadGeneralInfo	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadGeneralInfo(Port &port, GeneralInfo &data,$/;"	f	class:CAI302
UploadLarge	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadLarge(Port &port, const char *command,$/;"	f	class:CAI302
UploadMode	Device/Driver/CAI302/Mode.cpp	/^CAI302Device::UploadMode(OperationEnvironment &env)$/;"	f	class:CAI302Device
UploadMode	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadMode(Port &port, OperationEnvironment &env)$/;"	f	class:CAI302
UploadNavpoint	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadNavpoint(Port &port, unsigned i, Navpoint &data,$/;"	f	class:CAI302
UploadNavpointMeta	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadNavpointMeta(Port &port, NavpointMeta &data,$/;"	f	class:CAI302
UploadPilot	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilot(Port &port, unsigned i, Pilot &data,$/;"	f	class:CAI302
UploadPilotBlock	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilotBlock(Port &port, unsigned start, unsigned count,$/;"	f	class:CAI302
UploadPilotMeta	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilotMeta(Port &port, PilotMeta &data, OperationEnvironment &env)$/;"	f	class:CAI302
UploadPilotMetaActive	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPilotMetaActive(Port &port, PilotMetaActive &data,$/;"	f	class:CAI302
UploadPolar	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPolar(Port &port, Polar &data, OperationEnvironment &env)$/;"	f	class:CAI302
UploadPolarMeta	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadPolarMeta(Port &port, PolarMeta &data, OperationEnvironment &env)$/;"	f	class:CAI302
UploadShort	Device/Driver/CAI302/Protocol.cpp	/^CAI302::UploadShort(Port &port, const char *command,$/;"	f	class:CAI302
UploadWaypoints	Dialogs/Device/ManageCAI302Dialog.cpp	/^UploadWaypoints(const DialogLook &look, CAI302Device &device)$/;"	f	file:
UpmixMonoPCM	Audio/AudioAlgorithms.hpp	/^inline void UpmixMonoPCM(T *pcm_stream_buffer, size_t num_mono_frames,$/;"	f
Usage	XCSoar.cpp	/^static const char *const Usage = "\\n"$/;"	v	file:
UsageError	OS/Args.hpp	/^  void UsageError() {$/;"	f	class:Args
Use	Profile/Settings.cpp	/^Profile::Use(const ProfileMap &map)$/;"	f	class:Profile
Use	Screen/OpenGL/Program.hpp	/^  void Use() {$/;"	f	class:GLProgram
UseBlackOutline	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  UseBlackOutline,$/;"	e	enum:ControlIndex	file:
UseClicked	Dialogs/Weather/MapOverlayWidget.cpp	/^WeatherMapOverlayListWidget::UseClicked(unsigned i)$/;"	f	class:WeatherMapOverlayListWidget
UseFinalGlideDisplayMode	Profile/ProfileKeys.cpp	/^const char UseFinalGlideDisplayMode[] = "UseFinalGlideDisplayMode";$/;"	m	namespace:ProfileKeys	file:
UseRecommendedCaptionWidths	Dialogs/Task/TargetDialog.cpp	/^UseRecommendedCaptionWidths(Args&&... args)$/;"	f	file:
UseSecondDriver	Dialogs/Device/DeviceEditWidget.cpp	/^  I2CBus, I2CAddr, PressureUsage, Driver, UseSecondDriver, SecondDriver,$/;"	e	enum:ControlIndex	file:
UserID	Tracking/LiveTrack24.hpp	/^  typedef uint32_t UserID;$/;"	t	namespace:LiveTrack24
UserLevel	Profile/ProfileKeys.cpp	/^const char UserLevel[] = "UserLevel";$/;"	m	namespace:ProfileKeys	file:
UserNameRequestPacket	Tracking/SkyLines/Protocol.hpp	/^struct UserNameRequestPacket {$/;"	s	namespace:SkyLinesTracking
UserNameResponsePacket	Tracking/SkyLines/Protocol.hpp	/^struct UserNameResponsePacket {$/;"	s	namespace:SkyLinesTracking
UserSwitch	NMEA/SwitchState.hpp	/^  enum class UserSwitch : uint8_t {$/;"	c	struct:SwitchState
UsesCalibration	Device/Config.hpp	/^  bool UsesCalibration() const {$/;"	f	struct:DeviceConfig
UsesCalibration	Device/Config.hpp	/^  static bool UsesCalibration(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesDriver	Device/Config.hpp	/^  bool UsesDriver() const {$/;"	f	struct:DeviceConfig
UsesDriver	Device/Config.hpp	/^  static bool UsesDriver(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesI2C	Device/Config.hpp	/^  bool UsesI2C() const {$/;"	f	struct:DeviceConfig
UsesI2C	Device/Config.hpp	/^  static bool UsesI2C(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesIPAddress	Device/Config.hpp	/^  bool UsesIPAddress() const {$/;"	f	struct:DeviceConfig
UsesIPAddress	Device/Config.hpp	/^  static bool UsesIPAddress(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesPort	Device/Config.hpp	/^  bool UsesPort() const {$/;"	f	struct:DeviceConfig
UsesPort	Device/Config.hpp	/^  static bool UsesPort(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesRawData	Device/Driver.hpp	/^  bool UsesRawData() const {$/;"	f	struct:DeviceRegister
UsesSpeed	Device/Config.hpp	/^  bool UsesSpeed() const {$/;"	f	struct:DeviceConfig
UsesSpeed	Device/Config.hpp	/^  static bool UsesSpeed(PortType port_type) {$/;"	f	struct:DeviceConfig
UsesTCPPort	Device/Config.hpp	/^  bool UsesTCPPort() const {$/;"	f	struct:DeviceConfig
UsesTCPPort	Device/Config.hpp	/^  static bool UsesTCPPort(PortType port_type) {$/;"	f	struct:DeviceConfig
V7	Device/Driver/LX/V7.hpp	/^namespace V7 {$/;"	n
V7ConfigWidget	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  V7ConfigWidget(const DialogLook &look, LXDevice &_device)$/;"	f	class:final
VALID	Engine/PathSolvers/SolverResult.hpp	/^  VALID,$/;"	m	class:SolverResult
VALID	Engine/Route/ReachResult.hpp	/^    VALID,$/;"	m	class:ReachResult::Validity
VARIO	Device/Driver/FlymasterF1.cpp	/^VARIO(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
VARIO	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^    VARIO,$/;"	e	enum:final::Controls	file:
VARIO	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    VARIO,$/;"	e	enum:final::Controls	file:
VARIOCONFIGPANEL_HPP	Dialogs/Settings/Panels/VarioConfigPanel.hpp	25;"	d
VARIO_1	MapSettings.hpp	/^    VARIO_1,$/;"	m	class:TrailSettings::Type
VARIO_1_DOTS	MapSettings.hpp	/^    VARIO_1_DOTS,$/;"	m	class:TrailSettings::Type
VARIO_2	MapSettings.hpp	/^    VARIO_2,$/;"	m	class:TrailSettings::Type
VARIO_2_DOTS	MapSettings.hpp	/^    VARIO_2_DOTS,$/;"	m	class:TrailSettings::Type
VARIO_DOTS_AND_LINES	MapSettings.hpp	/^    VARIO_DOTS_AND_LINES,$/;"	m	class:TrailSettings::Type
VARIO_HISTOGRAM	Dialogs/dlgAnalysis.hpp	/^  VARIO_HISTOGRAM,$/;"	m	class:AnalysisPage
VARIO_HISTOGRAM_RENDERER_HPP	Renderer/VarioHistogramRenderer.hpp	25;"	d
VECTOR_HPP	Math/Vector.hpp	25;"	d
VEGA_SCHEME	Dialogs/Device/Vega/Schemes.hpp	/^struct VEGA_SCHEME$/;"	s
VERSION	Device/Driver/LX/LXN.hpp	/^    VERSION = 0x7f,$/;"	e	enum:LXN::Command
VERSION	Terrain/RasterTileCache.hpp	/^    static constexpr unsigned VERSION = 0xb;$/;"	m	struct:RasterTileCache::CacheHeader
VERSION	Version.cpp	30;"	d	file:
VERSION_SUFFIX	Version.cpp	51;"	d	file:
VERTICAL	Weather/PCMet/Overlays.hpp	/^    VERTICAL,$/;"	m	class:PCMet::OverlayInfo::Type
VERTICAL	Widget/TabWidget.hpp	/^    VERTICAL,$/;"	m	class:TabWidget::Orientation
VERTICAL_SPEED	Units/Group.hpp	/^  VERTICAL_SPEED,$/;"	m	class:UnitGroup
VIDEO_POWER_MANAGEMENT	Hardware/VideoPower.h	/^struct VIDEO_POWER_MANAGEMENT {$/;"	s
VIDEO_POWER_STATE	Hardware/VideoPower.h	/^enum VIDEO_POWER_STATE {$/;"	g
VLAPI2_H	Device/Driver/Volkslogger/vlapi2.h	19;"	d
VLAPIHLP_H	Device/Driver/Volkslogger/vlapihlp.h	19;"	d
VLAPI_DATA	Device/Driver/Volkslogger/vlapi2.h	/^class VLAPI_DATA {$/;"	c
VLAPI_LOG_MEMSIZE	Device/Driver/Volkslogger/Logger.cpp	/^static constexpr size_t VLAPI_LOG_MEMSIZE = 81920L;$/;"	v	file:
VLCONV_H	Device/Driver/Volkslogger/vlconv.h	19;"	d
VOLT	Units/Unit.hpp	/^  VOLT,$/;"	m	class:Unit
VOLUME	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^    VOLUME,$/;"	e	enum:final::BlueFlyWidgets	file:
VOLUME_MAX	Device/Driver/BlueFly/Internal.hpp	/^    static constexpr unsigned VOLUME_MAX = 1000;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
VOLUME_MULTIPLIER	Device/Driver/BlueFly/Internal.hpp	/^    static constexpr unsigned VOLUME_MULTIPLIER = 1000;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
VOLUME_NAME	Device/Driver/BlueFly/Internal.hpp	/^    static const char VOLUME_NAME[];$/;"	m	struct:BlueFlyDevice::BlueFlySettings
VOLUME_NAME	Device/Driver/BlueFly/Settings.cpp	/^const char BlueFlyDevice::BlueFlySettings::VOLUME_NAME[] = "BVL";$/;"	m	class:BlueFlyDevice::BlueFlySettings	file:
V_block	Engine/Task/Stats/CommonStats.hpp	/^  double V_block;$/;"	m	class:CommonStats
V_dolphin	Engine/Task/Stats/CommonStats.hpp	/^  double V_dolphin;$/;"	m	class:CommonStats
V_stf	NMEA/Derived.hpp	/^  double V_stf;$/;"	m	struct:DerivedInfo
Valid	Engine/ThermalBand/ThermalBand.cpp	/^ThermalBand::Valid() const$/;"	f	class:ThermalBand
ValidAbstractType	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::ValidAbstractType(LegalAbstractPointType type, $/;"	f	class:AbstractTaskFactory
ValidDistanceUnit	Profile/UnitsConfig.cpp	/^ValidDistanceUnit(Unit unit)$/;"	f	file:
ValidFinish	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  ValidFinish,$/;"	e	enum:Controls	file:
ValidMassUnit	Profile/UnitsConfig.cpp	/^ValidMassUnit(Unit unit)$/;"	f	file:
ValidPressureUnit	Profile/UnitsConfig.cpp	/^ValidPressureUnit(Unit unit)$/;"	f	file:
ValidSpeedUnit	Profile/UnitsConfig.cpp	/^ValidSpeedUnit(Unit unit)$/;"	f	file:
ValidStart	Dialogs/StatusPanels/RulesStatusPanel.cpp	/^  ValidStart,$/;"	e	enum:Controls	file:
ValidString	Device/Driver/LX/Convert.cpp	/^ValidString(const char *p, size_t size)$/;"	f	file:
ValidTemperatureUnit	Profile/UnitsConfig.cpp	/^ValidTemperatureUnit(Unit unit)$/;"	f	file:
ValidWingLoadingUnit	Profile/UnitsConfig.cpp	/^ValidWingLoadingUnit(Unit unit)$/;"	f	file:
Validate	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::Validate()$/;"	f	class:AbstractTaskFactory
Validate	Engine/Task/Factory/FAITaskFactory.cpp	/^FAITaskFactory::Validate()$/;"	f	class:FAITaskFactory
Validate	Engine/Task/Factory/FAITriangleTaskFactory.cpp	/^FAITriangleTaskFactory::Validate()$/;"	f	class:FAITriangleTaskFactory
Validate	Engine/Task/Factory/RTTaskFactory.cpp	/^RTTaskFactory::Validate()$/;"	f	class:RTTaskFactory
Validate	Engine/Task/Shapes/FAITriangleTask.cpp	/^FAITriangleValidator::Validate(const OrderedTask &task)$/;"	f	class:FAITriangleValidator
Validate	Screen/OpenGL/Program.hpp	/^  void Validate() {$/;"	f	class:GLProgram
ValidateFAIOZs	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::ValidateFAIOZs()$/;"	f	class:AbstractTaskFactory
ValidateGeometry	InfoBoxes/InfoBoxLayout.cpp	/^InfoBoxLayout::ValidateGeometry(InfoBoxSettings::Geometry geometry,$/;"	f	class:InfoBoxLayout
ValidateMATOZs	Engine/Task/Factory/AbstractTaskFactory.cpp	/^AbstractTaskFactory::ValidateMATOZs()$/;"	f	class:AbstractTaskFactory
ValidateTextureSize	Screen/OpenGL/Texture.cpp	/^ValidateTextureSize(PixelSize size)$/;"	f	file:
ValidateTextureSize	Screen/OpenGL/Texture.cpp	/^ValidateTextureSize(unsigned i)$/;"	f	file:
ValidateXCS	VALI-XCS.cpp	/^ValidateXCS(Path path, GRecord &oGRecord)$/;"	f	file:
Validity	Engine/GlideSolvers/GlideResult.hpp	/^  enum class Validity : uint8_t {$/;"	c	struct:GlideResult
Validity	Engine/Route/ReachResult.hpp	/^  enum class Validity : uint8_t {$/;"	c	struct:ReachResult
Validity	NMEA/Validity.hpp	/^class Validity {$/;"	c
Value	Engine/PathSolvers/Dijkstra.hpp	/^  struct Value$/;"	s	class:Dijkstra
Value	Lua/Value.hxx	/^	Value(lua_State *_L, V &&value):L(_L) {$/;"	f	class:Lua::Value
Value	Lua/Value.hxx	/^	explicit Value(lua_State *_L):L(_L) {}$/;"	f	class:Lua::Value
Value	Lua/Value.hxx	/^Value::Value(const Value &src)$/;"	f	class:Lua::Value
Value	Lua/Value.hxx	/^class Value {$/;"	c	namespace:Lua
Value	OS/ConvertPathName.hpp	/^  typedef LightString<char> Value;$/;"	t	class:NarrowPathName
Value	OS/ConvertPathName.hpp	/^  typedef LightString<wchar_t> Value;$/;"	t	class:PathName
Value	Util/ConvertString.hpp	/^  typedef AllocatedString<> Value;$/;"	t	class:WideToACPConverter
Value	Util/ConvertString.hpp	/^  typedef AllocatedString<> Value;$/;"	t	class:WideToUTF8Converter
Value	Util/ConvertString.hpp	/^  typedef AllocatedString<TCHAR> Value;$/;"	t	class:UTF8ToWideConverter
Vario	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^  Vario,$/;"	e	enum:Controls	file:
VarioBarLook	Look/VarioBarLook.hpp	/^struct VarioBarLook {$/;"	s
VarioBarRenderer	Renderer/VarioBarRenderer.hpp	/^  VarioBarRenderer(const VarioBarLook &_look)$/;"	f	class:VarioBarRenderer
VarioBarRenderer	Renderer/VarioBarRenderer.hpp	/^class VarioBarRenderer {$/;"	c
VarioConfigPanel	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  VarioConfigPanel()$/;"	f	class:final
VarioDeadBandEnabled	Profile/ProfileKeys.cpp	/^const char VarioDeadBandEnabled[] = "VarioDeadBandEnabled";$/;"	m	namespace:ProfileKeys	file:
VarioDeadBandMax	Profile/ProfileKeys.cpp	/^const char VarioDeadBandMax[] = "VarioDeadBandMax";$/;"	m	namespace:ProfileKeys	file:
VarioDeadBandMin	Profile/ProfileKeys.cpp	/^const char VarioDeadBandMin[] = "VarioDeadBandMin";$/;"	m	namespace:ProfileKeys	file:
VarioGauge	Profile/ProfileKeys.cpp	/^const char VarioGauge[] = "VarioGauge";$/;"	m	namespace:ProfileKeys	file:
VarioInfo	NMEA/VarioInfo.hpp	/^struct VarioInfo$/;"	s
VarioLook	Look/VarioLook.hpp	/^struct VarioLook {$/;"	s
VarioMaxFrequency	Profile/ProfileKeys.cpp	/^const char VarioMaxFrequency[] = "VarioMaxFrequency";$/;"	m	namespace:ProfileKeys	file:
VarioMaxPeriod	Profile/ProfileKeys.cpp	/^const char VarioMaxPeriod[] = "VarioMaxPeriod";$/;"	m	namespace:ProfileKeys	file:
VarioMinFrequency	Profile/ProfileKeys.cpp	/^const char VarioMinFrequency[] = "VarioMinFrequency";$/;"	m	namespace:ProfileKeys	file:
VarioMinPeriod	Profile/ProfileKeys.cpp	/^const char VarioMinPeriod[] = "VarioMinPeriod";$/;"	m	namespace:ProfileKeys	file:
VarioSettings	Gauge/VarioSettings.hpp	/^struct VarioSettings {$/;"	s
VarioSoundSettings	Audio/VarioSettings.hpp	/^struct VarioSoundSettings {$/;"	s
VarioState	Engine/Navigation/Aircraft.hpp	/^struct VarioState$/;"	s
VarioSynthesiser	Audio/VarioSynthesiser.hpp	/^  explicit VarioSynthesiser(unsigned sample_rate)$/;"	f	class:final
VarioToFrequency	Audio/VarioSynthesiser.cpp	/^VarioSynthesiser::VarioToFrequency(int ivario)$/;"	f	class:VarioSynthesiser
VarioUnit	Dialogs/Device/CAI302/UnitsEditor.hpp	/^    VarioUnit,$/;"	e	enum:final::Controls
VarioWriteNMEA	Device/device.cpp	/^VarioWriteNMEA(const TCHAR *text, OperationEnvironment &env)$/;"	f
VarioZeroFrequency	Profile/ProfileKeys.cpp	/^const char VarioZeroFrequency[] = "VarioZeroFrequency";$/;"	m	namespace:ProfileKeys	file:
VaulterCreateOnPort	Device/Driver/Vaulter.cpp	/^VaulterCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
VaulterDevice	Device/Driver/Vaulter.cpp	/^  VaulterDevice(Port &_port):port(_port) {}$/;"	f	class:VaulterDevice
VaulterDevice	Device/Driver/Vaulter.cpp	/^class VaulterDevice : public AbstractDevice {$/;"	c	file:
VbestLD	Engine/GlideSolvers/GlidePolar.hpp	/^  double VbestLD;$/;"	m	class:GlidePolar
Vector	Math/Vector.hpp	/^  Vector(Angle bearing, double norm) {$/;"	f	struct:Vector
Vector	Math/Vector.hpp	/^  Vector(const SpeedVector speed) {$/;"	f	struct:Vector
Vector	Math/Vector.hpp	/^  constexpr Vector(double _x, double _y):DoublePoint2D(_x, _y) {}$/;"	f	struct:Vector
Vector	Math/Vector.hpp	/^struct Vector : DoublePoint2D {$/;"	s
Vega	Device/Driver/Vega/Volatile.hpp	/^namespace Vega {$/;"	n
VegaAudioParametersWidget	Dialogs/Device/Vega/AudioParameters.hpp	/^  VegaAudioParametersWidget(const DialogLook &look, VegaDevice &device,$/;"	f	class:VegaAudioParametersWidget
VegaAudioParametersWidget	Dialogs/Device/Vega/AudioParameters.hpp	/^class VegaAudioParametersWidget : public VegaParametersWidget {$/;"	c
VegaConfigurationExtraButtons	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  VegaConfigurationExtraButtons(WidgetDialog &_dialog)$/;"	f	class:final
VegaCreateOnPort	Device/Driver/Vega/Register.cpp	/^VegaCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
VegaDemoAudioClimb	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^static bool VegaDemoAudioClimb = true;$/;"	v	file:
VegaDemoV	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^static double VegaDemoV = 0;$/;"	v	file:
VegaDemoW	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^static double VegaDemoW = 0;$/;"	v	file:
VegaDemoWidget	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  VegaDemoWidget(const DialogLook &_look)$/;"	f	class:final
VegaDevice	Device/Driver/Vega/Internal.hpp	/^  VegaDevice(Port &_port)$/;"	f	class:VegaDevice
VegaDevice	Device/Driver/Vega/Internal.hpp	/^class VegaDevice : public AbstractDevice {$/;"	c
VegaParametersWidget	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  VegaParametersWidget(const DialogLook &look, VegaDevice &_device,$/;"	f	class:VegaParametersWidget
VegaParametersWidget	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^class VegaParametersWidget : public RowFormWidget {$/;"	c
VegaSchemeButtonsPage	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  VegaSchemeButtonsPage(PagerWidget &_pager, const DialogLook &look)$/;"	f	class:VegaSchemeButtonsPage
VegaSchemeButtonsPage	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^class VegaSchemeButtonsPage : public RowFormWidget, ActionListener {$/;"	c	file:
VegaSchemes	Dialogs/Device/Vega/Schemes.hpp	/^static constexpr VEGA_SCHEME VegaSchemes[4]= {$/;"	v
VegaSwitchState	NMEA/VegaSwitchState.hpp	/^struct VegaSwitchState {$/;"	s
VegaWriteDemo	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^VegaWriteDemo()$/;"	f	file:
VehicleType	Tracking/LiveTrack24.hpp	/^  enum class VehicleType {$/;"	c	namespace:LiveTrack24
VehicleType	Tracking/LiveTrack24/Settings.hpp	/^  enum class VehicleType {$/;"	c	struct:LiveTrack24::Settings
VerboseOperationEnvironment	Operation/VerboseOperationEnvironment.hpp	/^class VerboseOperationEnvironment : public MessageOperationEnvironment {$/;"	c
VerifyFormat	Waypoint/WaypointFileType.cpp	/^VerifyFormat(Path path)$/;"	f	file:
VerifyFormat	Waypoint/WaypointReaderCompeGPS.cpp	/^WaypointReaderCompeGPS::VerifyFormat(TLineReader &reader)$/;"	f	class:WaypointReaderCompeGPS
VerifyFormat	Waypoint/WaypointReaderFS.cpp	/^WaypointReaderFS::VerifyFormat(TLineReader &reader)$/;"	f	class:WaypointReaderFS
VerifyFormat	Waypoint/WaypointReaderOzi.cpp	/^WaypointReaderOzi::VerifyFormat(TLineReader &reader)$/;"	f	class:WaypointReaderOzi
VerifyGRecordInFile	Logger/GRecord.cpp	/^GRecord::VerifyGRecordInFile(Path path)$/;"	f	class:GRecord
VerifyNMEAChecksum	NMEA/Checksum.cpp	/^VerifyNMEAChecksum(const char *p)$/;"	f
Version	Device/Driver/LX/LXN.hpp	/^  struct Version {$/;"	s	namespace:LXN
VertexAttrib	Screen/OpenGL/Color.hpp	/^  void VertexAttrib(GLint index) const {$/;"	f	class:Color
VertexVector	Engine/Route/FlatTriangleFan.hpp	/^  typedef std::vector<FlatGeoPoint> VertexVector;$/;"	t	class:FlatTriangleFan
VerticalRange	Form/ButtonPanel.cpp	/^ButtonPanel::VerticalRange(PixelRect rc, unsigned start, unsigned end)$/;"	f	class:ButtonPanel
Vibrate	Android/Vibrator.cpp	/^Vibrator::Vibrate(JNIEnv *env, unsigned duration_ms)$/;"	f	class:Vibrator
VibrateShort	Hardware/Vibrator.cpp	/^VibrateShort()$/;"	f
Vibrator	Android/Vibrator.hpp	/^  Vibrator(JNIEnv *env, jobject obj):object(env, obj) {}$/;"	f	class:Vibrator
Vibrator	Android/Vibrator.hpp	/^class Vibrator {$/;"	c
VideoPowerOff	Hardware/VideoPower.h	/^  VideoPowerOff$/;"	e	enum:VIDEO_POWER_STATE
VideoPowerOn	Hardware/VideoPower.h	/^  VideoPowerOn = 1,$/;"	e	enum:VIDEO_POWER_STATE
VideoPowerStandBy	Hardware/VideoPower.h	/^  VideoPowerStandBy,$/;"	e	enum:VIDEO_POWER_STATE
VideoPowerSuspend	Hardware/VideoPower.h	/^  VideoPowerSuspend,$/;"	e	enum:VIDEO_POWER_STATE
ViewImageWidget	Widget/ViewImageWidget.hpp	/^  explicit ViewImageWidget(const Bitmap &_bitmap)$/;"	f	class:ViewImageWidget
ViewImageWidget	Widget/ViewImageWidget.hpp	/^  explicit ViewImageWidget(const Bitmap *_bitmap=nullptr)$/;"	f	class:ViewImageWidget
ViewImageWidget	Widget/ViewImageWidget.hpp	/^class ViewImageWidget : public WindowWidget {$/;"	c
ViewImageWindow	Widget/ViewImageWidget.cpp	/^  explicit ViewImageWindow(const Bitmap *_bitmap):bitmap(_bitmap) {}$/;"	f	class:final
VirtualCanvas	Screen/GDI/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	Screen/GDI/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	Screen/Memory/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	Screen/Memory/VirtualCanvas.cpp	/^VirtualCanvas::VirtualCanvas(const Canvas &canvas, PixelSize new_size)$/;"	f	class:VirtualCanvas
VirtualCanvas	Screen/VirtualCanvas.hpp	/^class VirtualCanvas : public Canvas {$/;"	c
VisibilityChanged	Terrain/RasterTile.cpp	/^RasterTile::VisibilityChanged(int view_x, int view_y, unsigned view_radius)$/;"	f	class:RasterTile
VisibleProjection	MapWindow/MapWindow.hpp	/^  const MapWindowProjection &VisibleProjection() const {$/;"	f	class:MapWindow
VisibleWaypoint	Renderer/WaypointRenderer.cpp	/^struct VisibleWaypoint {$/;"	s	file:
Visit	Airspace/AirspaceWarningCopy.hpp	/^  void Visit(const AirspaceWarning& as) {$/;"	f	class:AirspaceWarningCopy
Visit	Airspace/AirspaceWarningCopy.hpp	/^  void Visit(const AirspaceWarningManager &awm) {$/;"	f	class:AirspaceWarningCopy
Visit	Airspace/AirspaceWarningCopy.hpp	/^  void Visit(const ProtectedAirspaceWarningManager &awm) {$/;"	f	class:AirspaceWarningCopy
Visit	Engine/Task/Ordered/OrderedTask.cpp	/^Visit(const OrderedTask::OrderedTaskPointVector &points,$/;"	f	file:
Visit	Engine/Waypoint/Waypoints.cpp	/^  Visit(const WaypointPtr &wp)$/;"	f	class:WaypointEnvelopeVisitor
Visit	Renderer/AirspaceRendererGL.cpp	/^  void Visit(const AbstractAirspace &airspace) {$/;"	f	class:final
Visit	Renderer/AirspaceRendererOther.cpp	/^  void Visit(const AbstractAirspace &airspace) {$/;"	f	class:final
Visit	Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const AnnularSectorZone &data)$/;"	f	file:
Visit	Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const CylinderZone &data)$/;"	f	file:
Visit	Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const LineSectorZone &data)$/;"	f	file:
Visit	Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const SectorZone &data)$/;"	f	file:
Visit	Task/Serialiser.cpp	/^Visit(WritableDataNode &node, const SymmetricSectorZone &data)$/;"	f	file:
Visit	Util/RadixTree.hpp	/^    void Visit(const TCHAR *key, V &visitor) const {$/;"	f	struct:RadixTree::Node
Visit	Util/RadixTree.hpp	/^    void Visit(const TCHAR *key, V &visitor) {$/;"	f	struct:RadixTree::Node
Visit	Util/RadixTree.hpp	/^  void Visit(const TCHAR *key, V &visitor) const {$/;"	f	class:RadixTree
Visit	Util/RadixTree.hpp	/^  void Visit(const TCHAR *key, V &visitor) {$/;"	f	class:RadixTree
Visit	Waypoint/WaypointListBuilder.cpp	/^WaypointListBuilder::Visit(const WaypointPtr &waypoint)$/;"	f	class:WaypointListBuilder
Visit	Waypoint/WaypointListBuilder.cpp	/^void WaypointListBuilder::Visit(const Waypoints &waypoints) {$/;"	f	class:WaypointListBuilder
VisitAll	Util/RadixTree.hpp	/^    void VisitAll(V &visitor) const {$/;"	f	struct:RadixTree::LeafList
VisitAll	Util/RadixTree.hpp	/^    void VisitAll(V &visitor) {$/;"	f	struct:RadixTree::LeafList
VisitAll	Util/RadixTree.hpp	/^  void VisitAll(V &visitor) const {$/;"	f	class:RadixTree
VisitAll	Util/RadixTree.hpp	/^  void VisitAll(V &visitor) {$/;"	f	class:RadixTree
VisitAllChildren	Util/RadixTree.hpp	/^    void VisitAllChildren(V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitAllChildren	Util/RadixTree.hpp	/^    void VisitAllChildren(V &visitor) {$/;"	f	struct:RadixTree::Node
VisitAllChildren	Util/RadixTree.hpp	/^    void VisitAllChildren(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitAllPairs	Util/RadixTree.hpp	/^  void VisitAllPairs(V &visitor) const {$/;"	f	class:RadixTree
VisitChildren	Util/RadixTree.hpp	/^    void VisitChildren(const TCHAR *key, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitChildren	Util/RadixTree.hpp	/^    void VisitChildren(const TCHAR *key, V &visitor) {$/;"	f	struct:RadixTree::Node
VisitCircle	Renderer/AirspaceRendererGL.cpp	/^  void VisitCircle(const AirspaceCircle &airspace) {$/;"	f	class:final	file:
VisitCircle	Renderer/AirspaceRendererOther.cpp	/^  void VisitCircle(const AirspaceCircle &airspace) {$/;"	f	class:final	file:
VisitDataFiles	LocalPath.cpp	/^VisitDataFiles(const TCHAR* filter, File::Visitor &visitor)$/;"	f
VisitFiles	OS/FileUtil.cpp	/^Directory::VisitFiles(Path path, File::Visitor &visitor, bool recursive)$/;"	f	class:Directory
VisitIntersecting	Engine/Airspace/Airspaces.cpp	/^Airspaces::VisitIntersecting(const GeoPoint &loc, const GeoPoint &end,$/;"	f	class:Airspaces
VisitIntersecting	Engine/Airspace/Airspaces.hpp	/^  void VisitIntersecting(const GeoPoint &location, const GeoPoint &end,$/;"	f	class:Airspaces
VisitNamePrefix	Engine/Waypoint/Waypoints.cpp	/^Waypoints::VisitNamePrefix(const TCHAR *prefix,$/;"	f	class:Waypoints
VisitNormalisedPrefix	Engine/Waypoint/Waypoints.cpp	/^Waypoints::WaypointNameTree::VisitNormalisedPrefix(const TCHAR *prefix,$/;"	f	class:Waypoints::WaypointNameTree
VisitPolygon	Renderer/AirspaceRendererGL.cpp	/^  void VisitPolygon(const AirspacePolygon &airspace) {$/;"	f	class:final	file:
VisitPolygon	Renderer/AirspaceRendererOther.cpp	/^  void VisitPolygon(const AirspacePolygon &airspace) {$/;"	f	class:final	file:
VisitPrefix	Util/RadixTree.hpp	/^    void VisitPrefix(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitPrefix	Util/RadixTree.hpp	/^    void VisitPrefix(const TCHAR *prefix, V &visitor) {$/;"	f	struct:RadixTree::Node
VisitPrefix	Util/RadixTree.hpp	/^  void VisitPrefix(const TCHAR *prefix, V &visitor) const {$/;"	f	class:RadixTree
VisitPrefix	Util/RadixTree.hpp	/^  void VisitPrefix(const TCHAR *prefix, V &visitor) {$/;"	f	class:RadixTree
VisitPrefixChildren	Util/RadixTree.hpp	/^    void VisitPrefixChildren(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitPrefixChildren	Util/RadixTree.hpp	/^    void VisitPrefixChildren(const TCHAR *prefix, V &visitor) {$/;"	f	struct:RadixTree::Node
VisitSpecificFiles	OS/FileUtil.cpp	/^Directory::VisitSpecificFiles(Path path, const TCHAR* filter,$/;"	f	class:Directory
VisitValues	Util/RadixTree.hpp	/^    void VisitValues(V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitValues	Util/RadixTree.hpp	/^    void VisitValues(V &visitor) {$/;"	f	struct:RadixTree::Node
VisitValues	Util/RadixTree.hpp	/^    void VisitValues(const TCHAR *prefix, V &visitor) const {$/;"	f	struct:RadixTree::Node
VisitWithinRange	Engine/Waypoint/Waypoints.cpp	/^Waypoints::VisitWithinRange(const GeoPoint &loc, const double range,$/;"	f	class:Waypoints
VisitWithinRange	Util/QuadTree.hxx	/^		void VisitWithinRange(const Point location, distance_type square_range,$/;"	f	struct:LeafList
VisitWithinRange	Util/QuadTree.hxx	/^		void VisitWithinRange(const Rectangle &bounds,$/;"	f	struct:Bucket
VisitWithinRange	Util/QuadTree.hxx	/^		void VisitWithinRange(const Rectangle &bounds,$/;"	f	struct:QuadBucket
VisitWithinRange	Util/QuadTree.hxx	/^	void VisitWithinRange(const Point location, distance_type range,$/;"	f
VisitWithinRange	Util/QuadTree.hxx	/^	void VisitWithinRange(const T &value, distance_type range,$/;"	f
Visitor	OS/FileUtil.hpp	/^  class Visitor$/;"	c	namespace:File
VisitorAdapter	Engine/Waypoint/Waypoints.cpp	/^  VisitorAdapter(WaypointVisitor &_visitor):visitor(_visitor) {}$/;"	f	struct:VisitorAdapter
VisitorAdapter	Engine/Waypoint/Waypoints.cpp	/^struct VisitorAdapter {$/;"	s	file:
Vmax	Engine/GlideSolvers/GlidePolar.hpp	/^  double Vmax;$/;"	m	class:GlidePolar
Vmin	Engine/GlideSolvers/GlidePolar.hpp	/^  double Vmin;$/;"	m	class:GlidePolar
VolatileData	Device/Driver/Vega/Volatile.hpp	/^    constexpr VolatileData()$/;"	f	struct:Vega::VolatileData
VolatileData	Device/Driver/Vega/Volatile.hpp	/^  struct VolatileData {$/;"	s	namespace:Vega
Volkslogger	Device/Driver/Volkslogger/Database.hpp	/^namespace Volkslogger {$/;"	n
Volkslogger	Device/Driver/Volkslogger/Protocol.hpp	/^namespace Volkslogger {$/;"	n
VolksloggerCreateOnPort	Device/Driver/Volkslogger/Register.cpp	/^VolksloggerCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
VolksloggerDevice	Device/Driver/Volkslogger/Internal.hpp	/^  VolksloggerDevice(Port &_port, unsigned const _bulkrate)$/;"	f	class:VolksloggerDevice
VolksloggerDevice	Device/Driver/Volkslogger/Internal.hpp	/^class VolksloggerDevice : public AbstractDevice {$/;"	c
VoltageDevice	Android/VoltageDevice.cpp	/^VoltageDevice::VoltageDevice(unsigned _index,$/;"	f	class:VoltageDevice
VoltageListener	Android/VoltageListener.hpp	/^class VoltageListener {$/;"	c
Volume	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  Volume,$/;"	e	enum:ControlIndex	file:
VptScale	Screen/Layout.hpp	/^  VptScale(unsigned pt)$/;"	f	namespace:Layout
WALK	Tracking/LiveTrack24.hpp	/^    WALK = 16385,$/;"	m	class:LiveTrack24::VehicleType
WARN1	zzip/__debug.h	60;"	d
WARN2	zzip/__debug.h	61;"	d
WARN3	zzip/__debug.h	62;"	d
WARN4	zzip/__debug.h	63;"	d
WARN5	zzip/__debug.h	64;"	d
WARN6	zzip/__debug.h	65;"	d
WARN_UNUSED	Topography/shapelib/mapserver.h	74;"	d
WARN_UNUSED	Topography/shapelib/mapserver.h	78;"	d
WASCII_HXX	Util/WASCII.hxx	31;"	d
WATCHED	Engine/Waypoint/Origin.hpp	/^  WATCHED,$/;"	m	class:WaypointOrigin
WATER_THRESHOLD	Terrain/Height.hpp	/^  static constexpr int16_t WATER_THRESHOLD = -30000;$/;"	m	class:TerrainHeight
WAVE	Engine/Airspace/AirspaceClass.hpp	/^  WAVE,$/;"	e	enum:uint8_t
WAVEFORM_MODE_A2	Screen/FB/mxcfb.h	91;"	d
WAVEFORM_MODE_AUTO	Screen/FB/mxcfb.h	106;"	d
WAVEFORM_MODE_DU	Screen/FB/mxcfb.h	87;"	d
WAVEFORM_MODE_DU4	Screen/FB/mxcfb.h	96;"	d
WAVEFORM_MODE_GC16	Screen/FB/mxcfb.h	88;"	d
WAVEFORM_MODE_GC16_FAST	Screen/FB/mxcfb.h	90;"	d
WAVEFORM_MODE_GC4	Screen/FB/mxcfb.h	89;"	d
WAVEFORM_MODE_GL16	Screen/FB/mxcfb.h	92;"	d
WAVEFORM_MODE_GL16_FAST	Screen/FB/mxcfb.h	93;"	d
WAVEFORM_MODE_GL16_INV	Screen/FB/mxcfb.h	104;"	d
WAVEFORM_MODE_GL4	Screen/FB/mxcfb.h	103;"	d
WAVEFORM_MODE_INIT	Screen/FB/mxcfb.h	86;"	d
WAVEFORM_MODE_REAGL	Screen/FB/mxcfb.h	99;"	d
WAVEFORM_MODE_REAGLD	Screen/FB/mxcfb.h	100;"	d
WAVE_REQUEST	Tracking/SkyLines/Protocol.hpp	/^  WAVE_REQUEST = 9,$/;"	e	enum:SkyLinesTracking::Type
WAVE_RESPONSE	Tracking/SkyLines/Protocol.hpp	/^  WAVE_RESPONSE = 10,$/;"	e	enum:SkyLinesTracking::Type
WAVE_SUBMIT	Tracking/SkyLines/Protocol.hpp	/^  WAVE_SUBMIT = 8,$/;"	e	enum:SkyLinesTracking::Type
WAYPOINT	InfoBoxes/Panel/ATCReference.cpp	/^  WAYPOINT,$/;"	e	enum:Controls	file:
WAYPOINT	MapWindow/Items/MapItem.hpp	/^    WAYPOINT,$/;"	e	enum:TaskPointType::Type
WAYPOINT	Repository/FileType.hpp	/^  WAYPOINT,$/;"	m	class:FileType
WAYPOINTDETAILS	Repository/FileType.hpp	/^  WAYPOINTDETAILS,$/;"	m	class:FileType
WAYPOINTDISPLAYCONFIGPANEL_HPP	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.hpp	25;"	d
WAYPOINTFILEFS_HPP	Waypoint/WaypointReaderFS.hpp	25;"	d
WAYPOINTFILESEEYOU_HPP	Waypoint/WaypointReaderSeeYou.hpp	26;"	d
WAYPOINTFILEWINPILOT_HPP	Waypoint/WaypointReaderWinPilot.hpp	26;"	d
WAYPOINTFILEZANDER_HPP	Waypoint/WaypointReaderZander.hpp	25;"	d
WAYPOINTFILE_COMPEGPS_HPP	Waypoint/WaypointReaderCompeGPS.hpp	25;"	d
WAYPOINTFILE_HPP	Waypoint/WaypointReaderBase.hpp	26;"	d
WAYPOINTFILE_OZI_HPP	Waypoint/WaypointReaderOzi.hpp	25;"	d
WAYPOINTS_HPP	Engine/Waypoint/Waypoints.hpp	23;"	d
WAYPOINT_DETAILS_READER_HPP	Waypoint/WaypointDetailsReader.hpp	25;"	d
WAYPOINT_EDITOR	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^    WAYPOINT_EDITOR,$/;"	e	enum:final::Buttons	file:
WAYPOINT_FACTORY_HPP	Waypoint/Factory.hpp	24;"	d
WAYPOINT_FILE_ID_HPP	Engine/Waypoint/Origin.hpp	24;"	d
WAYPOINT_FILE_PATTERNS	Waypoint/Patterns.hpp	29;"	d
WAYPOINT_FILE_TYPE_HPP	Waypoint/WaypointFileType.hpp	25;"	d
WAYPOINT_HPP	Engine/Waypoint/Waypoint.hpp	24;"	d
WAYPOINT_LOOK_HPP	Look/WaypointLook.hpp	25;"	d
WAYPOINT_PTR_HPP	Engine/Waypoint/Ptr.hpp	24;"	d
WAYPOINT_READER_HPP	Waypoint/WaypointReader.hpp	26;"	d
WAYPOINT_WRITER_HPP	Waypoint/CupWriter.hpp	25;"	d
WCHAR_UTIL_HXX	Util/WCharUtil.hxx	31;"	d
WEATHER	MapWindow/Items/MapItem.hpp	/^    WEATHER,$/;"	e	enum:TaskPointType::Type
WEATHER_CONFIGPANEL_HPP	Dialogs/Settings/Panels/WeatherConfigPanel.hpp	25;"	d
WEATHER_FEATURES_HPP	Weather/Features.hpp	25;"	d
WEP_SECURITY	Kobo/WPASupplicant.hpp	/^  WEP_SECURITY,$/;"	e	enum:WifiSecurity
WGS84	Geo/WGS84.hpp	/^namespace WGS84 {$/;"	n
WHITESPACE	Util/tstring.cpp	5;"	d	file:
WIDGET	Widget/RowFormWidget.hpp	/^      WIDGET,$/;"	m	class:RowFormWidget::Row::Type
WIFI	Kobo/NetworkDialog.cpp	/^    WIFI,$/;"	e	enum:final::Buttons	file:
WILDCARD	Dialogs/Airspace/AirspaceList.cpp	/^static constexpr unsigned WILDCARD = 0x7fff;$/;"	v	file:
WIND	Dialogs/dlgAnalysis.hpp	/^  WIND,$/;"	m	class:AnalysisPage
WIND	Terrain/TerrainSettings.hpp	/^  WIND,$/;"	m	class:SlopeShading
WINDCONFIGPANEL_HPP	Dialogs/Settings/Panels/WindConfigPanel.hpp	25;"	d
WINDEF_H	unix/windef.h	25;"	d
WINDEKF_GLUE_HPP	Computer/Wind/WindEKFGlue.hpp	25;"	d
WINDEKF_HPP	Computer/Wind/WindEKF.hpp	25;"	d
WINDOW_FILTER_HPP	Math/WindowFilter.hpp	24;"	d
WINDSURF	Tracking/LiveTrack24.hpp	/^    WINDSURF = 16500,$/;"	m	class:LiveTrack24::VehicleType
WINDVECTORMAG	Renderer/WindChartRenderer.cpp	95;"	d	file:
WIND_ARROW	InfoBoxes/Content/Type.hpp	/^    WIND_ARROW,$/;"	e	enum:InfoBoxFactory::Type
WIND_ARROW_STYLE	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  WIND_ARROW_STYLE,$/;"	e	enum:ControlIndex	file:
WIND_EXCESSIVE	Engine/GlideSolvers/GlideResult.hpp	/^    WIND_EXCESSIVE,$/;"	m	class:GlideResult::Validity
WIND_K0	Computer/Wind/WindEKF.cpp	30;"	d	file:
WIND_K1	Computer/Wind/WindEKF.cpp	31;"	d	file:
WIND_SPEED	Units/Group.hpp	/^  WIND_SPEED,$/;"	m	class:UnitGroup
WIND_UP	MapSettings.hpp	/^  WIND_UP,$/;"	m	class:MapOrientation
WING_AREA	Dialogs/Plane/PlaneDetailsDialog.cpp	/^    WING_AREA,$/;"	e	enum:final::Controls	file:
WING_LOADING	Units/Group.hpp	/^  WING_LOADING,$/;"	m	class:UnitGroup
WINPILOT	Waypoint/WaypointFileType.hpp	/^  WINPILOT,$/;"	m	class:WaypointFileType
WINUSER_H	unix/winuser.h	25;"	d
WORDS_BIGENDIAN	zzip/_config.h	210;"	d
WORKING	Computer/Settings.hpp	/^    WORKING,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
WORKING_TERRAIN_LINE	Computer/Settings.hpp	/^    WORKING_TERRAIN_LINE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
WORKING_TERRAIN_SHADE	Computer/Settings.hpp	/^    WORKING_TERRAIN_SHADE,$/;"	m	class:FeaturesSettings::FinalGlideTerrain
WPASupplicant	Kobo/WPASupplicant.hpp	/^  WPASupplicant():fd(SocketDescriptor::Undefined()) {}$/;"	f	class:WPASupplicant
WPASupplicant	Kobo/WPASupplicant.hpp	/^class WPASupplicant {$/;"	c
WPA_SECURITY	Kobo/WPASupplicant.hpp	/^  WPA_SECURITY,$/;"	e	enum:WifiSecurity
WPCIRCLESIZE	Renderer/WaypointLabelList.cpp	/^static constexpr int WPCIRCLESIZE = 2;$/;"	v	file:
WPT	Device/Driver/Volkslogger/vlapi2.h	/^  struct WPT {$/;"	s	class:VLAPI_DATA
WPTTYP	Device/Driver/Volkslogger/vlapi2.h	/^    enum WPTTYP {$/;"	g	struct:VLAPI_DATA::WPT
WPTTYP_A	Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_A = 4,$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WPTTYP_C	Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_C = 8$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WPTTYP_H	Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_H = 2,$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WPTTYP_L	Device/Driver/Volkslogger/vlapi2.h	/^      WPTTYP_L = 1,$/;"	e	enum:VLAPI_DATA::WPT::WPTTYP
WP_NOMINAL_DIST	InfoBoxes/Content/Type.hpp	/^    WP_NOMINAL_DIST, \/* The nominal distance to the currently selected waypoint. For AAT tasks, this is the distance to the origin of the AAT sector *\/$/;"	e	enum:InfoBoxFactory::Type
WRITABLE_BUFFER_HXX	Util/WritableBuffer.hxx	31;"	d
WRITE_CONTEST_CLASS	Device/Driver/LX/Protocol.hpp	/^    WRITE_CONTEST_CLASS = 0xD0,$/;"	e	enum:LX::Command
WRITE_CONTEST_CLASS	Device/Driver/LXERA/Protocol.hpp	/^    WRITE_CONTEST_CLASS = 0xD0,$/;"	e	enum:LXEra::Command
WRITE_FLIGHT_INFO	Device/Driver/LX/Protocol.hpp	/^    WRITE_FLIGHT_INFO = 0xCA,$/;"	e	enum:LX::Command
WRITE_FLIGHT_INFO	Device/Driver/LXERA/Protocol.hpp	/^    WRITE_FLIGHT_INFO = 0xCA,$/;"	e	enum:LXEra::Command
WSTRING_API_HXX	Util/WStringAPI.hxx	31;"	d
WSTRING_COMPARE_HXX	Util/WStringCompare.hxx	31;"	d
WSTRING_FORMAT_HPP	Util/WStringFormat.hpp	31;"	d
WSTRING_STRIP_HXX	Util/WStringStrip.hxx	31;"	d
WSTRING_UTIL_HPP	Util/WStringUtil.hpp	25;"	d
WSTRING_VIEW_HXX	Util/WStringView.hxx	31;"	d
WStringView	Util/WStringView.hxx	/^struct WStringView : BasicStringView<wchar_t> {$/;"	s
WT_DOSCALE	Terrain/jasper/jpc/jpc_qmfb.c	75;"	d	file:
WT_LENONE	Terrain/jasper/jpc/jpc_qmfb.c	74;"	d	file:
Wait	Device/SettingsMap.hpp	/^  const_iterator Wait(std::unique_lock<Mutex> &lock,$/;"	f	class:DeviceSettingsMap
Wait	Event/Android/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:EventQueue
Wait	Event/Poll/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:EventQueue
Wait	Event/SDL/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:EventQueue
Wait	Event/Windows/Queue.cpp	/^EventQueue::Wait(Event &event)$/;"	f	class:EventQueue
Wait	Job/Async.cpp	/^AsyncJobRunner::Wait()$/;"	f	class:AsyncJobRunner
Wait	OS/OverlappedEvent.hpp	/^  WaitResult Wait(unsigned timeout_ms=INFINITE) {$/;"	f	class:OverlappedEvent
Wait	OS/Process.cpp	/^Wait(pid_t pid)$/;"	f	file:
Wait	Screen/FB/TopCanvas.cpp	/^TopCanvas::Wait()$/;"	f	class:TopCanvas
Wait	Thread/Trigger.hpp	/^  bool Wait(unsigned timeout_ms) {$/;"	f	class:Trigger
Wait	Thread/Trigger.hpp	/^  void Wait() {$/;"	f	class:Trigger
WaitAndRead	Device/Port/Port.cpp	/^Port::WaitAndRead(void *buffer, size_t length,$/;"	f	class:Port
WaitBoolValue	Dialogs/Device/LX/NanoConfigWidget.cpp	/^WaitBoolValue(LXDevice &device, const char *name,$/;"	f	file:
WaitCommandPrompt	Device/Driver/CAI302/Protocol.cpp	/^WaitCommandPrompt(Port &port, OperationEnvironment &env,$/;"	f	file:
WaitConnected	Device/Port/DumpPort.cpp	/^DumpPort::WaitConnected(OperationEnvironment &env)$/;"	f	class:DumpPort
WaitConnected	Device/Port/K6BtPort.cpp	/^K6BtPort::WaitConnected(OperationEnvironment &env)$/;"	f	class:K6BtPort
WaitConnected	Device/Port/Port.cpp	/^Port::WaitConnected(OperationEnvironment &env)$/;"	f	class:Port
WaitDataPending	Device/Port/SerialPort.cpp	/^SerialPort::WaitDataPending(OverlappedEvent &overlapped,$/;"	f	class:SerialPort
WaitDownloadPrompt	Device/Driver/CAI302/Protocol.cpp	/^WaitDownloadPrompt(Port &port, OperationEnvironment &env,$/;"	f	file:
WaitForACK	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::WaitForACK(uint16_t sequence_number,$/;"	f	class:FlarmDevice
WaitForACK	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::WaitForACK(Port &port, OperationEnvironment &env)$/;"	f	class:Volkslogger
WaitForACKOrNACK	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::WaitForACKOrNACK(uint16_t sequence_number,$/;"	f	class:FlarmDevice
WaitForChar	Device/Port/Port.cpp	/^Port::WaitForChar(const char token, OperationEnvironment &env,$/;"	f	class:Port
WaitForSetting	Dialogs/Device/FLARM/ConfigWidget.cpp	/^WaitForSetting(FlarmDevice &device, const char *name, unsigned timeout_ms)$/;"	f	file:
WaitForSetting	Dialogs/Device/Vega/VegaParametersWidget.cpp	/^WaitForSetting(VegaDevice &device, const char *name, unsigned timeout_ms)$/;"	f	file:
WaitForSettings	Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::WaitForSettings(unsigned int timeout)$/;"	f	class:BlueFlyDevice
WaitForStartByte	Device/Driver/FLARM/BinaryProtocol.cpp	/^FlarmDevice::WaitForStartByte(OperationEnvironment &env,$/;"	f	class:FlarmDevice
WaitForStopped	Thread/StoppableThread.hpp	/^  bool WaitForStopped(unsigned timeout_ms) {$/;"	f	class:StoppableThread
WaitNanoSetting	Device/Driver/LX/Settings.cpp	/^LXDevice::WaitNanoSetting(const char *name, OperationEnvironment &env,$/;"	f	class:LXDevice
WaitRead	Device/Port/BufferedPort.cpp	/^BufferedPort::WaitRead(std::chrono::steady_clock::duration _timeout)$/;"	f	class:BufferedPort
WaitRead	Device/Port/DumpPort.cpp	/^DumpPort::WaitRead(std::chrono::steady_clock::duration timeout)$/;"	f	class:DumpPort
WaitRead	Device/Port/K6BtPort.cpp	/^K6BtPort::WaitRead(std::chrono::steady_clock::duration timeout)$/;"	f	class:K6BtPort
WaitRead	Device/Port/NullPort.cpp	/^NullPort::WaitRead(std::chrono::steady_clock::duration timeout)$/;"	f	class:NullPort
WaitRead	Device/Port/Port.cpp	/^Port::WaitRead(OperationEnvironment &env,$/;"	f	class:Port
WaitResult	Device/Port/Port.hpp	/^  enum class WaitResult {$/;"	c	class:Port
WaitResult	OS/OverlappedEvent.hpp	/^  enum WaitResult {$/;"	g	class:OverlappedEvent
WaitStopped	Net/HTTP/DownloadManager.cpp	/^  void WaitStopped() {$/;"	f	class:final
WaitStopped	Thread/StandbyThread.cpp	/^StandbyThread::WaitStopped()$/;"	f	class:StandbyThread
WaitStopped	Tracking/TrackingGlue.cpp	/^TrackingGlue::WaitStopped()$/;"	f	class:TrackingGlue
WaitUnsignedValue	Dialogs/Device/LX/NanoConfigWidget.cpp	/^WaitUnsignedValue(LXDevice &device, const char *name,$/;"	f	file:
WaitUnsignedValue	Dialogs/Device/LX/V7ConfigWidget.cpp	/^WaitUnsignedValue(LXDevice &device, const char *name,$/;"	f	file:
WaitUploadPrompt	Device/Driver/CAI302/Protocol.cpp	/^WaitUploadPrompt(Port &port, OperationEnvironment &env,$/;"	f	file:
WaitV7Setting	Device/Driver/LX/Settings.cpp	/^LXDevice::WaitV7Setting(const char *name, OperationEnvironment &env,$/;"	f	class:LXDevice
WaitWrite	Device/Port/TTYPort.cpp	/^TTYPort::WaitWrite(unsigned timeout_ms)$/;"	f	class:TTYPort
WakeUp	Event/Poll/Queue.hpp	/^  void WakeUp() {$/;"	f	class:final
WakeUp	Event/Windows/Queue.hpp	/^  void WakeUp() {$/;"	f	class:EventQueue
WarningComputer	Computer/WarningComputer.cpp	/^WarningComputer::WarningComputer(const AirspaceWarningConfig &_config,$/;"	f	class:WarningComputer
WarningComputer	Computer/WarningComputer.hpp	/^class WarningComputer {$/;"	c
WarningDialog	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  WarningDialog,$/;"	e	enum:ControlIndex	file:
WarningItem	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  WarningItem(const AirspaceWarning &warning)$/;"	f	struct:WarningItem
WarningItem	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^struct WarningItem$/;"	s	file:
WarningLive	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::WarningLive(const unsigned ack_time, const unsigned dt)$/;"	f	class:AirspaceWarning
WarningMode	Gauge/FlarmTrafficWindow.cpp	/^FlarmTrafficWindow::WarningMode() const$/;"	f	class:FlarmTrafficWindow
WarningTime	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  WarningTime,$/;"	e	enum:ControlIndex	file:
WarningTime	Profile/ProfileKeys.cpp	/^const char WarningTime[] = "WarnTime";$/;"	m	namespace:ProfileKeys	file:
WasCtrlClick	Event/Poll/Queue.hpp	/^  bool WasCtrlClick() const {$/;"	f	class:final
WasCtrlClick	Event/Poll/X11Queue.hpp	/^  bool WasCtrlClick() const {$/;"	f	class:X11EventQueue
WatchedWaypointFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  WatchedWaypointFile,$/;"	e	enum:ControlIndex	file:
WatchedWaypointFile	Profile/ProfileKeys.cpp	/^const char WatchedWaypointFile[] = "WatchedWPFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
Wave	Tracking/SkyLines/Data.hpp	/^    constexpr Wave(uint32_t _time, GeoPoint _a, GeoPoint _b)$/;"	f	struct:SkyLinesTracking::Data::Wave
Wave	Tracking/SkyLines/Data.hpp	/^  struct Wave {$/;"	s	struct:SkyLinesTracking::Data
Wave	Tracking/SkyLines/Protocol.hpp	/^struct Wave {$/;"	s	namespace:SkyLinesTracking
WaveAssistant	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  WaveAssistant,$/;"	e	enum:ControlIndex	file:
WaveAssistant	Profile/ProfileKeys.cpp	/^const char WaveAssistant[] = "WaveAssistant";$/;"	m	namespace:ProfileKeys	file:
WaveComputer	Computer/WaveComputer.hpp	/^class WaveComputer {$/;"	c
WaveInfo	Computer/WaveResult.hpp	/^struct WaveInfo {$/;"	s
WaveLook	Look/WaveLook.hpp	/^struct WaveLook {$/;"	s
WaveRenderer	Renderer/WaveRenderer.hpp	/^  WaveRenderer(const WaveLook &_look):look(_look) {}$/;"	f	class:WaveRenderer
WaveRenderer	Renderer/WaveRenderer.hpp	/^class WaveRenderer {$/;"	c
WaveRequestPacket	Tracking/SkyLines/Protocol.hpp	/^struct WaveRequestPacket {$/;"	s	namespace:SkyLinesTracking
WaveResponsePacket	Tracking/SkyLines/Protocol.hpp	/^struct WaveResponsePacket {$/;"	s	namespace:SkyLinesTracking
WaveResult	Computer/WaveResult.hpp	/^struct WaveResult {$/;"	s
WaveSettings	Computer/WaveSettings.hpp	/^struct WaveSettings {$/;"	s
WaveSubmitPacket	Tracking/SkyLines/Protocol.hpp	/^struct WaveSubmitPacket {$/;"	s	namespace:SkyLinesTracking
WaylandEventQueue	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::WaylandEventQueue(boost::asio::io_context &io_context,$/;"	f	class:WaylandEventQueue
WaylandPointerAxis	Event/Poll/WaylandQueue.cpp	/^WaylandPointerAxis(void *data, struct wl_pointer *wl_pointer,$/;"	f	file:
WaylandPointerButton	Event/Poll/WaylandQueue.cpp	/^WaylandPointerButton(void *data, struct wl_pointer *wl_pointer,$/;"	f	file:
WaylandPointerEnter	Event/Poll/WaylandQueue.cpp	/^WaylandPointerEnter(void *data, struct wl_pointer *wl_pointer, uint32_t serial,$/;"	f	file:
WaylandPointerLeave	Event/Poll/WaylandQueue.cpp	/^WaylandPointerLeave(void *data, struct wl_pointer *wl_pointer, uint32_t serial,$/;"	f	file:
WaylandPointerMotion	Event/Poll/WaylandQueue.cpp	/^WaylandPointerMotion(void *data, struct wl_pointer *wl_pointer, uint32_t time,$/;"	f	file:
WaylandRegistryGlobal	Event/Poll/WaylandQueue.cpp	/^WaylandRegistryGlobal(void *data, struct wl_registry *registry, uint32_t id,$/;"	f	file:
WaylandRegistryGlobalRemove	Event/Poll/WaylandQueue.cpp	/^WaylandRegistryGlobalRemove(void *data, struct wl_registry *registry,$/;"	f	file:
WaylandSeatHandleCapabilities	Event/Poll/WaylandQueue.cpp	/^WaylandSeatHandleCapabilities(void *data, struct wl_seat *seat, uint32_t caps)$/;"	f	file:
Waypoint	Device/Driver/Volkslogger/Database.hpp	/^  struct Waypoint {$/;"	s	namespace:Volkslogger
Waypoint	Engine/Waypoint/Waypoint.cpp	/^Waypoint::Waypoint(const GeoPoint &_location)$/;"	f	class:Waypoint
Waypoint	Engine/Waypoint/Waypoint.hpp	/^  Waypoint()$/;"	f	struct:Waypoint
Waypoint	Engine/Waypoint/Waypoint.hpp	/^struct Waypoint {$/;"	s
WaypointAccessor	Engine/Waypoint/Waypoints.hpp	/^  struct WaypointAccessor {$/;"	s	class:Waypoints
WaypointArrivalHeightDisplay	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointArrivalHeightDisplay,$/;"	e	enum:ControlIndex	file:
WaypointArrivalHeightDisplay	Profile/ProfileKeys.cpp	/^const char WaypointArrivalHeightDisplay[] = "WaypointArrivalHeightDisplay";$/;"	m	namespace:ProfileKeys	file:
WaypointCommandsWidget	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  WaypointCommandsWidget(const DialogLook &look, WndForm *_form,$/;"	f	class:final
WaypointDetails	Waypoint/WaypointDetailsReader.hpp	/^namespace WaypointDetails$/;"	n
WaypointDetailsWidget	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WaypointDetailsWidget(WidgetDialog &_dialog, WaypointPtr _waypoint,$/;"	f	class:final
WaypointDisplayConfigPanel	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointDisplayConfigPanel()$/;"	f	class:final
WaypointDistanceCompare	Waypoint/WaypointList.cpp	/^  WaypointDistanceCompare(const GeoPoint &_location):location(_location) {}$/;"	f	class:WaypointDistanceCompare
WaypointDistanceCompare	Waypoint/WaypointList.cpp	/^class WaypointDistanceCompare$/;"	c	file:
WaypointEditWidget	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  WaypointEditWidget(const DialogLook &look, Waypoint _value)$/;"	f	class:final
WaypointEnvelopeVisitor	Engine/Waypoint/Waypoints.cpp	/^  WaypointEnvelopeVisitor(WaypointVisitor* wve):waypoint_visitor(wve) {};$/;"	f	class:WaypointEnvelopeVisitor
WaypointEnvelopeVisitor	Engine/Waypoint/Waypoints.cpp	/^class WaypointEnvelopeVisitor {$/;"	c	file:
WaypointExternalFileListHandler	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  explicit WaypointExternalFileListHandler(WaypointPtr _waypoint)$/;"	f	class:final
WaypointFactory	Waypoint/Factory.hpp	/^  explicit WaypointFactory(WaypointOrigin _origin,$/;"	f	class:WaypointFactory
WaypointFactory	Waypoint/Factory.hpp	/^class WaypointFactory {$/;"	c
WaypointFile	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  WaypointFile,$/;"	e	enum:ControlIndex	file:
WaypointFile	Profile/ProfileKeys.cpp	/^const char WaypointFile[] = "WPFile"; \/\/ pL$/;"	m	namespace:ProfileKeys	file:
WaypointFileChanged	UtilsSettings.cpp	/^bool WaypointFileChanged = false;$/;"	v
WaypointFileType	Waypoint/WaypointFileType.hpp	/^enum class WaypointFileType: uint8_t {$/;"	c
WaypointFilter	Waypoint/WaypointFilter.hpp	/^struct WaypointFilter$/;"	s
WaypointFilterWidget	Dialogs/Waypoint/WaypointList.cpp	/^  WaypointFilterWidget(const DialogLook &look, Angle _heading)$/;"	f	class:WaypointFilterWidget
WaypointFilterWidget	Dialogs/Waypoint/WaypointList.cpp	/^class WaypointFilterWidget : public RowFormWidget {$/;"	c	file:
WaypointGlue	Waypoint/WaypointGlue.hpp	/^namespace WaypointGlue {$/;"	n
WaypointIDList	Waypoint/LastUsed.hpp	/^class WaypointIDList: public std::list<unsigned> {};$/;"	c
WaypointIconRenderer	Renderer/WaypointIconRenderer.hpp	/^  WaypointIconRenderer(const WaypointRendererSettings &_settings,$/;"	f	class:WaypointIconRenderer
WaypointIconRenderer	Renderer/WaypointIconRenderer.hpp	/^class WaypointIconRenderer$/;"	c
WaypointInScaleFilter	Projection/MapWindowProjection.cpp	/^MapWindowProjection::WaypointInScaleFilter(const Waypoint &way_point) const$/;"	f	class:MapWindowProjection
WaypointInfoWidget	Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  WaypointInfoWidget(const DialogLook &look, WaypointPtr _waypoint)$/;"	f	struct:WaypointInfoWidget
WaypointInfoWidget	Dialogs/Waypoint/WaypointInfoWidget.hpp	/^struct WaypointInfoWidget : public RowFormWidget {$/;"	s
WaypointLabelList	Renderer/WaypointLabelList.hpp	/^  WaypointLabelList(unsigned _width, unsigned _height)$/;"	f	class:WaypointLabelList
WaypointLabelList	Renderer/WaypointLabelList.hpp	/^class WaypointLabelList : private NonCopyable {$/;"	c
WaypointLabelSelection	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointLabelSelection,$/;"	e	enum:ControlIndex	file:
WaypointLabelSelection	Profile/ProfileKeys.cpp	/^const char WaypointLabelSelection[] = "WayPointLabelSelection";$/;"	m	namespace:ProfileKeys	file:
WaypointLabelStyle	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointLabelStyle,$/;"	e	enum:ControlIndex	file:
WaypointLabelStyle	Profile/ProfileKeys.cpp	/^const char WaypointLabelStyle[] = "WayPointLabelStyle";$/;"	m	namespace:ProfileKeys	file:
WaypointLabels	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  WaypointLabels,$/;"	e	enum:ControlIndex	file:
WaypointList	Waypoint/WaypointList.hpp	/^class WaypointList: public std::vector<WaypointListItem>$/;"	c
WaypointListBuilder	Waypoint/WaypointListBuilder.hpp	/^  WaypointListBuilder(const WaypointFilter &_filter,$/;"	f	class:final
WaypointListBuilderVisitor	MapWindow/Items/Builder.cpp	/^  WaypointListBuilderVisitor(MapItemList &_list):list(_list) {}$/;"	f	class:WaypointListBuilderVisitor
WaypointListBuilderVisitor	MapWindow/Items/Builder.cpp	/^class WaypointListBuilderVisitor:$/;"	c	file:
WaypointListButtons	Dialogs/Waypoint/WaypointList.cpp	/^  WaypointListButtons(const DialogLook &look, ActionListener &_dialog)$/;"	f	class:WaypointListButtons
WaypointListButtons	Dialogs/Waypoint/WaypointList.cpp	/^class WaypointListButtons : public RowFormWidget {$/;"	c	file:
WaypointListDialogState	Dialogs/Waypoint/WaypointList.cpp	/^struct WaypointListDialogState$/;"	s	file:
WaypointListItem	Waypoint/WaypointList.hpp	/^  explicit WaypointListItem(W &&_waypoint):$/;"	f	struct:WaypointListItem
WaypointListItem	Waypoint/WaypointList.hpp	/^struct WaypointListItem$/;"	s
WaypointListRenderer	Renderer/WaypointListRenderer.hpp	/^namespace WaypointListRenderer$/;"	n
WaypointListWidget	Dialogs/Waypoint/WaypointList.cpp	/^  WaypointListWidget(ActionListener &_action_listener,$/;"	f	class:final
WaypointLook	Look/WaypointLook.hpp	/^struct WaypointLook {$/;"	s
WaypointManagerWidget	Dialogs/Waypoint/Manager.cpp	/^  WaypointManagerWidget():modified(false) {}$/;"	f	class:final
WaypointMapItem	MapWindow/Items/MapItem.hpp	/^  WaypointMapItem(const WaypointPtr &_waypoint)$/;"	f	struct:WaypointMapItem
WaypointMapItem	MapWindow/Items/MapItem.hpp	/^struct WaypointMapItem: public MapItem$/;"	s
WaypointNameAllowedCharacters	Dialogs/Waypoint/WaypointList.cpp	/^WaypointNameAllowedCharacters(const TCHAR *prefix)$/;"	f	file:
WaypointNameTree	Engine/Waypoint/Waypoints.hpp	/^  class WaypointNameTree : public RadixTree<WaypointPtr> {$/;"	c	class:Waypoints
WaypointNames	Device/Driver/LX/Protocol.hpp	/^    char WaypointNames[NUMTPS][9];$/;"	m	struct:LX::Declaration
WaypointNames	Device/Driver/LXERA/Protocol.hpp	/^    char WaypointNames[NUMTPS][9];$/;"	m	struct:LXEra::Declaration
WaypointOrigin	Engine/Waypoint/Origin.hpp	/^enum class WaypointOrigin : uint8_t {$/;"	c
WaypointPtr	Engine/Waypoint/Ptr.hpp	/^typedef std::shared_ptr<const Waypoint> WaypointPtr;$/;"	t
WaypointReaderBase	Waypoint/WaypointReaderBase.hpp	/^  explicit WaypointReaderBase(WaypointFactory _factory)$/;"	f	class:WaypointReaderBase
WaypointReaderBase	Waypoint/WaypointReaderBase.hpp	/^class WaypointReaderBase $/;"	c
WaypointReaderCompeGPS	Waypoint/WaypointReaderCompeGPS.hpp	/^  explicit WaypointReaderCompeGPS(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderFS	Waypoint/WaypointReaderFS.hpp	/^  explicit WaypointReaderFS(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderOzi	Waypoint/WaypointReaderOzi.hpp	/^  explicit WaypointReaderOzi(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderSeeYou	Waypoint/WaypointReaderSeeYou.hpp	/^  explicit WaypointReaderSeeYou(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderWinPilot	Waypoint/WaypointReaderWinPilot.hpp	/^  explicit WaypointReaderWinPilot(WaypointFactory _factory)$/;"	f	class:final
WaypointReaderZander	Waypoint/WaypointReaderZander.hpp	/^  explicit WaypointReaderZander(WaypointFactory _factory)$/;"	f	class:final
WaypointRenderer	Renderer/WaypointRenderer.hpp	/^  WaypointRenderer(const Waypoints *_way_points,$/;"	f	class:WaypointRenderer
WaypointRenderer	Renderer/WaypointRenderer.hpp	/^class WaypointRenderer : private NonCopyable {$/;"	c
WaypointRendererSettings	Renderer/WaypointRendererSettings.hpp	/^struct WaypointRendererSettings {$/;"	s
WaypointTree	Engine/Waypoint/Waypoints.hpp	/^  typedef QuadTree<WaypointPtr, WaypointAccessor> WaypointTree;$/;"	t	class:Waypoints
WaypointVisitor	Engine/Waypoint/WaypointVisitor.hpp	/^class WaypointVisitor {$/;"	c
WaypointVisitorMap	Renderer/WaypointRenderer.cpp	/^  WaypointVisitorMap(const MapWindowProjection &_projection,$/;"	f	class:final
WaypointVisitorVector	Engine/Task/Unordered/AbortTask.cpp	/^  WaypointVisitorVector(AlternateList &wpv):vector(wpv) {}$/;"	f	class:final
Waypoint_VISITOR_HPP	Engine/Waypoint/WaypointVisitor.hpp	23;"	d
Waypoints	Dialogs/Device/ManageCAI302Dialog.cpp	/^    Waypoints,$/;"	e	enum:final::Controls	file:
Waypoints	Engine/Waypoint/Waypoints.cpp	/^Waypoints::Waypoints()$/;"	f	class:Waypoints
Waypoints	Engine/Waypoint/Waypoints.hpp	/^class Waypoints {$/;"	c
WeatherConfigPanel	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  WeatherConfigPanel()$/;"	f	class:final
WeatherDescriptors	Weather/Rasp/RaspStore.cpp	/^static constexpr RaspStore::MapInfo WeatherDescriptors[] = {$/;"	v	file:
WeatherSettings	Weather/Settings.hpp	/^struct WeatherSettings {$/;"	s
WeatherStationMapItem	MapWindow/Items/MapItem.hpp	/^  WeatherStationMapItem(const NOAAStore::iterator &_station)$/;"	f	struct:WeatherStationMapItem
WeatherStationMapItem	MapWindow/Items/MapItem.hpp	/^struct WeatherStationMapItem: public MapItem$/;"	s
WeatherStations	Profile/ProfileKeys.cpp	/^const char WeatherStations[] = "WeatherStations";$/;"	m	namespace:ProfileKeys	file:
WeatherUIState	Weather/WeatherUIState.hpp	/^struct WeatherUIState {$/;"	s
WesterboerCreateOnPort	Device/Driver/Westerboer.cpp	/^WesterboerCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
WesterboerDevice	Device/Driver/Westerboer.cpp	/^  WesterboerDevice(Port &_port):port(_port) {}$/;"	f	class:WesterboerDevice
WesterboerDevice	Device/Driver/Westerboer.cpp	/^class WesterboerDevice : public AbstractDevice {$/;"	c	file:
WideToACPConverter	Util/ConvertString.hpp	/^  WideToACPConverter(const TCHAR *_value)$/;"	f	class:WideToACPConverter
WideToACPConverter	Util/ConvertString.hpp	/^  WideToACPConverter(const_pointer _value):value(_value) {$/;"	f	class:WideToACPConverter
WideToACPConverter	Util/ConvertString.hpp	/^class WideToACPConverter {$/;"	c
WideToUTF8Converter	Util/ConvertString.hpp	/^  WideToUTF8Converter(const TCHAR *_value)$/;"	f	class:WideToUTF8Converter
WideToUTF8Converter	Util/ConvertString.hpp	/^  WideToUTF8Converter(const_pointer _value):value(_value) {$/;"	f	class:WideToUTF8Converter
WideToUTF8Converter	Util/ConvertString.hpp	/^class WideToUTF8Converter {$/;"	c
Wideline	Screen/Memory/Murphy.hpp	/^  void Wideline(int x1, int y1, int x2, int y2, uint8_t width, uint8_t miter) {$/;"	f	struct:MurphyIterator
Widget	Widget/Widget.hpp	/^class Widget {$/;"	c
WidgetDialog	Dialogs/WidgetDialog.cpp	/^  :WidgetDialog(tag, parent, look, caption)$/;"	f
WidgetDialog	Dialogs/WidgetDialog.cpp	/^WidgetDialog::WidgetDialog(const DialogLook &look)$/;"	f	class:WidgetDialog
WidgetDialog	Dialogs/WidgetDialog.hpp	/^class WidgetDialog : public WndForm {$/;"	c
Width	Form/ButtonPanel.cpp	/^ButtonPanel::Width(unsigned i) const$/;"	f	class:ButtonPanel
WidthToAngle	Terrain/RasterProjection.hpp	/^  constexpr Angle WidthToAngle(double pixels) const {$/;"	f	class:RasterProjection
WifiConfiguredNetworkInfo	Kobo/WPASupplicant.hpp	/^struct WifiConfiguredNetworkInfo {$/;"	s
WifiConnect	Kobo/WifiDialog.cpp	/^WifiConnect(enum WifiSecurity security, WPASupplicant &wpa_supplicant, const char *ssid, const char *psk)$/;"	f	file:
WifiSecurity	Kobo/WPASupplicant.hpp	/^enum WifiSecurity {$/;"	g
WifiStatus	Kobo/WPASupplicant.hpp	/^struct WifiStatus {$/;"	s
WifiVisibleNetwork	Kobo/WPASupplicant.hpp	/^struct WifiVisibleNetwork {$/;"	s
WindArrowLook	Look/WindArrowLook.hpp	/^struct WindArrowLook$/;"	s
WindArrowRenderer	Renderer/WindArrowRenderer.hpp	/^  WindArrowRenderer(const WindArrowLook &_look):look(_look) {}$/;"	f	class:WindArrowRenderer
WindArrowRenderer	Renderer/WindArrowRenderer.hpp	/^class WindArrowRenderer {$/;"	c
WindArrowStyle	MapSettings.hpp	/^enum class WindArrowStyle: uint8_t {$/;"	c
WindArrowStyle	Profile/ProfileKeys.cpp	/^const char WindArrowStyle[] = "WindArrowStyle";$/;"	m	namespace:ProfileKeys	file:
WindComputer	Computer/Wind/Computer.hpp	/^class WindComputer {$/;"	c
WindEKF	Computer/Wind/WindEKF.hpp	/^class WindEKF {$/;"	c
WindEKFGlue	Computer/Wind/WindEKFGlue.hpp	/^class WindEKFGlue$/;"	c
WindMeasurement	Computer/Wind/MeasurementList.hpp	/^struct WindMeasurement$/;"	s
WindMeasurementList	Computer/Wind/MeasurementList.hpp	/^class WindMeasurementList$/;"	c
WindMonitor	Monitor/WindMonitor.hpp	/^class WindMonitor {$/;"	c
WindSettings	Computer/Wind/Settings.hpp	/^struct WindSettings {$/;"	s
WindSettingsPanel	Dialogs/Settings/WindSettingsPanel.cpp	/^WindSettingsPanel::WindSettingsPanel(bool _edit_manual_wind,$/;"	f	class:WindSettingsPanel
WindSource	NMEA/Derived.hpp	/^  enum class WindSource : uint8_t {$/;"	c	struct:DerivedInfo
WindStore	Computer/Wind/Store.hpp	/^class WindStore$/;"	c
Window	Event/Poll/X11Queue.cpp	31;"	d	file:
Window	Event/Poll/X11Queue.cpp	38;"	d	file:
Window	Event/Poll/X11Queue.hpp	32;"	d
Window	Event/Poll/X11Queue.hpp	38;"	d
Window	Hardware/DisplayDPI.cpp	37;"	d	file:
Window	Hardware/DisplayDPI.cpp	41;"	d	file:
Window	Hardware/DisplaySize.cpp	34;"	d	file:
Window	Hardware/DisplaySize.cpp	38;"	d	file:
Window	Screen/Custom/TopCanvas.hpp	56;"	d
Window	Screen/Custom/TopCanvas.hpp	60;"	d
Window	Screen/EGL/System.hpp	34;"	d
Window	Screen/EGL/System.hpp	46;"	d
Window	Screen/GLX/System.hpp	29;"	d
Window	Screen/GLX/System.hpp	35;"	d
Window	Screen/OpenGL/Function.hpp	36;"	d
Window	Screen/OpenGL/Function.hpp	42;"	d
Window	Screen/TopWindow.hpp	62;"	d
Window	Screen/TopWindow.hpp	70;"	d
Window	Screen/Window.hpp	/^class Window {$/;"	c
WindowCanvas	Screen/GDI/WindowCanvas.cpp	/^WindowCanvas::WindowCanvas(PaintWindow &window)$/;"	f	class:WindowCanvas
WindowCanvas	Screen/WindowCanvas.hpp	/^  explicit WindowCanvas(Window &window) {$/;"	f	class:WindowCanvas
WindowCanvas	Screen/WindowCanvas.hpp	/^class WindowCanvas : public Canvas {$/;"	c
WindowControl	Form/Control.hpp	/^class WindowControl : public PaintWindow {$/;"	c
WindowFilter	Math/WindowFilter.hpp	/^class WindowFilter : public AvFilter<max>$/;"	c
WindowList	Screen/Custom/WList.hpp	/^class WindowList {$/;"	c
WindowProjection	Projection/WindowProjection.hpp	/^  WindowProjection():screen_size_initialised(false) {}$/;"	f	class:WindowProjection
WindowProjection	Projection/WindowProjection.hpp	/^class WindowProjection:$/;"	c
WindowReference	Screen/Custom/Reference.hpp	/^  WindowReference():window(nullptr) {}$/;"	f	class:WindowReference
WindowReference	Screen/Custom/Reference.hpp	/^  WindowReference(const ContainerWindow &root, Window &_window)$/;"	f	class:WindowReference
WindowReference	Screen/Custom/Reference.hpp	/^class WindowReference {$/;"	c
WindowStats	Engine/Task/Stats/WindowStats.hpp	/^struct WindowStats {$/;"	s
WindowStatsComputer	Engine/Task/Computer/WindowStatsComputer.hpp	/^class WindowStatsComputer {$/;"	c
WindowStyle	Screen/Window.hpp	/^class WindowStyle {$/;"	c
WindowWidget	Widget/WindowWidget.cpp	/^WindowWidget::WindowWidget(Window *_window)$/;"	f	class:WindowWidget
WindowWidget	Widget/WindowWidget.hpp	/^  WindowWidget():window(nullptr) {}$/;"	f	class:WindowWidget
WindowWidget	Widget/WindowWidget.hpp	/^class WindowWidget : public NullWidget {$/;"	c
WindowsCond	Thread/WindowsCond.hxx	/^class WindowsCond {$/;"	c
WindowsSharedMutex	Thread/WindowsSharedMutex.hxx	/^class WindowsSharedMutex {$/;"	c
WingLoading	Dialogs/Settings/dlgBasicSettings.cpp	/^  WingLoading,$/;"	e	enum:ControlIndex	file:
WingLoadingUnitValue	Profile/ProfileKeys.cpp	/^const char WingLoadingUnitValue[] = "WingLoadingUnit";$/;"	m	namespace:ProfileKeys	file:
WithAlpha	Screen/Memory/Color.hpp	/^  WithAlpha(uint8_t alpha) const {$/;"	f	class:Color
WithAlpha	Screen/OpenGL/Color.hpp	/^  WithAlpha(uint8_t alpha) const {$/;"	f	class:Color
WithBold	Look/FontDescription.hpp	/^  FontDescription WithBold(bool bold=true) const {$/;"	f	class:FontDescription
WithBold	Look/FontDescription.hpp	/^  constexpr FontDescription WithBold(bool _bold=true) const {$/;"	f	class:FontDescription
WithExtension	OS/Path.cpp	/^Path::WithExtension(const_pointer new_extension) const$/;"	f	class:Path
WithExtension	OS/Path.hpp	/^  AllocatedPath WithExtension(const_pointer new_extension) const {$/;"	f	class:AllocatedPath
WithHeight	Look/FontDescription.hpp	/^  FontDescription WithHeight(unsigned _height) const {$/;"	f	class:FontDescription
WithHeight	Look/FontDescription.hpp	/^  constexpr FontDescription WithHeight(unsigned _height) const {$/;"	f	class:FontDescription
WndForm	Form/Form.cpp	/^  :WndForm(main_window, _look, main_window.GetClientRect(), caption, style)$/;"	f
WndForm	Form/Form.cpp	/^WndForm::WndForm(SingleWindow &main_window, const DialogLook &_look,$/;"	f	class:WndForm
WndForm	Form/Form.cpp	/^WndForm::WndForm(const DialogLook &_look)$/;"	f	class:WndForm
WndForm	Form/Form.hpp	/^class WndForm : public ContainerWindow,$/;"	c
WndFrame	Form/Frame.hpp	/^class WndFrame : public PaintWindow {$/;"	c
WndOwnerDrawFrame	Form/Draw.hpp	/^class WndOwnerDrawFrame : public PaintWindow {$/;"	c
WndProperty	Form/Edit.hpp	/^class WndProperty : public WindowControl {$/;"	c
WorkerThread	Thread/WorkerThread.cpp	/^WorkerThread::WorkerThread(const char *_name,$/;"	f	class:WorkerThread
WorkerThread	Thread/WorkerThread.hpp	/^class WorkerThread : public SuspensibleThread {$/;"	c
WorldFileData	Terrain/WorldFile.cpp	/^struct WorldFileData {$/;"	s	file:
WrapAirspacePredicate	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^WrapAirspacePredicate(const P &p)$/;"	f
WrapClock	Time/WrapClock.hpp	/^class WrapClock {$/;"	c
WrapPort	Device/Port/ConfiguredPort.cpp	/^WrapPort(const DeviceConfig &config, PortListener *listener,$/;"	f	file:
WrappedAirspacePredicate	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  WrappedAirspacePredicate(Args&&... args):P(args...) {}$/;"	f	class:final
WritableBuffer	Util/WritableBuffer.hxx	/^struct WritableBuffer {$/;"	s
WritableBuffer	Util/WritableBuffer.hxx	/^struct WritableBuffer<void> {$/;"	s
WritableDataNode	XML/DataNode.hpp	/^class WritableDataNode {$/;"	c
WritableDataNodeXML	XML/DataNodeXML.hpp	/^  explicit WritableDataNodeXML(XMLNode &_node)$/;"	f	class:final
WritableImageBuffer	Screen/Memory/Buffer.hpp	/^struct WritableImageBuffer {$/;"	s
Write	Device/Driver/LX/Protocol.hpp	/^    bool Write(const void *data, size_t length,$/;"	f	class:LX::CRCWriter
Write	Device/Driver/LX/Protocol.hpp	/^    bool Write(uint8_t value) {$/;"	f	class:LX::CRCWriter
Write	Device/Driver/LXERA/Protocol.hpp	/^    bool Write(const void *data, size_t length,$/;"	f	class:LXEra::CRCWriter
Write	Device/Driver/LXERA/Protocol.hpp	/^    bool Write(uint8_t value) {$/;"	f	class:LXEra::CRCWriter
Write	Device/Port/AndroidPort.cpp	/^AndroidPort::Write(const void *data, size_t length)$/;"	f	class:AndroidPort
Write	Device/Port/DumpPort.cpp	/^DumpPort::Write(const void *data, size_t length)$/;"	f	class:DumpPort
Write	Device/Port/K6BtPort.cpp	/^K6BtPort::Write(const void *_data, size_t length)$/;"	f	class:K6BtPort
Write	Device/Port/NullPort.cpp	/^NullPort::Write(const void *data, size_t length)$/;"	f	class:NullPort
Write	Device/Port/Port.cpp	/^Port::Write(const char *s)$/;"	f	class:Port
Write	Device/Port/Port.hpp	/^  bool Write(char ch) {$/;"	f	class:Port
Write	Device/Port/SerialPort.cpp	/^SerialPort::Write(const void *data, size_t length)$/;"	f	class:SerialPort
Write	Device/Port/TCPClientPort.cpp	/^TCPClientPort::Write(const void *data, size_t length)$/;"	f	class:TCPClientPort
Write	Device/Port/TCPPort.cpp	/^TCPPort::Write(const void *data, size_t length)$/;"	f	class:TCPPort
Write	Device/Port/TTYPort.cpp	/^TTYPort::Write(const void *data, size_t length)$/;"	f	class:TTYPort
Write	Device/Port/UDPPort.cpp	/^UDPPort::Write(const void *data, size_t length)$/;"	f	class:UDPPort
Write	IO/BufferedOutputStream.cxx	/^BufferedOutputStream::Write(const char *p)$/;"	f	class:BufferedOutputStream
Write	IO/BufferedOutputStream.cxx	/^BufferedOutputStream::Write(const void *data, size_t size)$/;"	f	class:BufferedOutputStream
Write	IO/BufferedOutputStream.cxx	/^BufferedOutputStream::Write(const wchar_t *p)$/;"	f	class:BufferedOutputStream
Write	IO/BufferedOutputStream.hxx	/^	void Write(const char &ch) {$/;"	f	class:BufferedOutputStream
Write	IO/BufferedOutputStream.hxx	/^	void Write(const wchar_t &ch) {$/;"	f	class:BufferedOutputStream
Write	IO/FileHandle.hpp	/^  int Write(const char *s) {$/;"	f	class:FileHandle
Write	IO/FileHandle.hpp	/^  int Write(int ch) {$/;"	f	class:FileHandle
Write	IO/FileHandle.hpp	/^  size_t Write(const void *s, size_t size, size_t length) {$/;"	f	class:FileHandle
Write	IO/FileOutputStream.cxx	/^FileOutputStream::Write(const void *data, size_t size)$/;"	f	class:FileOutputStream
Write	IO/KeyValueFileWriter.cpp	/^KeyValueFileWriter::Write(const char *key, const TCHAR *value)$/;"	f	class:KeyValueFileWriter
Write	IO/KeyValueFileWriter.cpp	/^KeyValueFileWriter::Write(const char *key, const char *value)$/;"	f	class:KeyValueFileWriter
Write	IO/TextWriter.cpp	/^TextWriter::Write(const TCHAR *s)$/;"	f	class:TextWriter
Write	IO/TextWriter.cpp	/^TextWriter::Write(const TCHAR *s, size_t src_length)$/;"	f	class:TextWriter
Write	IO/TextWriter.hpp	/^  bool Write(const char *s) {$/;"	f	class:TextWriter
Write	IO/TextWriter.hpp	/^  bool Write(const char *s, size_t length) {$/;"	f	class:TextWriter
Write	IO/TextWriter.hpp	/^  void Write(char ch) {$/;"	f	class:TextWriter
Write	Plane/PlaneFileGlue.cpp	/^PlaneGlue::Write(const Plane &plane, KeyValueFileWriter &writer)$/;"	f	class:PlaneGlue
Write	Screen/TerminalWindow.cpp	/^TerminalWindow::Write(const char *p, size_t length)$/;"	f	class:TerminalWindow
Write16	Cloud/Serialiser.hpp	/^  void Write16(uint16_t value) {$/;"	f	class:Serialiser
Write32	Cloud/Serialiser.hpp	/^  void Write32(uint32_t value) {$/;"	f	class:Serialiser
Write64	Cloud/Serialiser.hpp	/^  void Write64(uint64_t value) {$/;"	f	class:Serialiser
Write8	Cloud/Serialiser.hpp	/^  void Write8(uint8_t value) {$/;"	f	class:Serialiser
WriteActivePilot	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::WriteActivePilot(const CAI302::Pilot &pilot,$/;"	f	class:CAI302Device
WriteAltitude	Waypoint/CupWriter.cpp	/^WriteAltitude(BufferedOutputStream &writer, double altitude)$/;"	f	file:
WriteAngle	JSON/GeoWriter.hpp	/^  static inline void WriteAngle(BufferedOutputStream &writer, Angle value) {$/;"	f	namespace:JSON
WriteAngleDMM	Waypoint/CupWriter.cpp	/^WriteAngleDMM(BufferedOutputStream &writer, const Angle angle, bool is_latitude)$/;"	f	file:
WriteBulk	Device/Driver/Volkslogger/Protocol.cpp	/^Volkslogger::WriteBulk(Port &port, OperationEnvironment &env,$/;"	f	class:Volkslogger
WriteCallback	Net/HTTP/Request.cpp	/^Net::Request::WriteCallback(char *ptr, size_t size, size_t nmemb,$/;"	f	class:Net::Request
WriteCleanString	Device/Driver/EWMicroRecorder.cpp	/^WriteCleanString(Port &port, const TCHAR *p,$/;"	f	file:
WriteCup	Waypoint/CupWriter.cpp	/^WriteCup(BufferedOutputStream &writer, const Waypoint &wp)$/;"	f
WriteCup	Waypoint/CupWriter.cpp	/^WriteCup(BufferedOutputStream &writer, const Waypoints &waypoints,$/;"	f
WriteDatabase	Device/Driver/Volkslogger/Protocol.hpp	/^  WriteDatabase(Port &port, OperationEnvironment &env,$/;"	f	namespace:Volkslogger
WriteDeviceSetting	Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::WriteDeviceSetting(const char *name, int value,$/;"	f	class:BlueFlyDevice
WriteDeviceSettings	Device/Driver/BlueFly/Settings.cpp	/^BlueFlyDevice::WriteDeviceSettings(const BlueFlySettings &new_settings,$/;"	f	class:BlueFlyDevice
WriteDouble	Cloud/Serialiser.hpp	/^  void WriteDouble(double value) {$/;"	f	class:Serialiser
WriteDouble	JSON/GeoWriter.hpp	/^  static inline void WriteDouble(BufferedOutputStream &writer, double value) {$/;"	f	namespace:JSON
WriteElement	JSON/Writer.hpp	/^    void WriteElement(T callback, Args... args) {$/;"	f	class:JSON::ArrayWriter
WriteElement	JSON/Writer.hpp	/^    void WriteElement(const char *name, T callback, Args... args) {$/;"	f	class:JSON::ObjectWriter
WriteExisting	OS/FileUtil.cpp	/^File::WriteExisting(Path path, const char *value)$/;"	f	class:File
WriteFile	Plane/PlaneFileGlue.cpp	/^PlaneGlue::WriteFile(const Plane &plane, Path path)$/;"	f	class:PlaneGlue
WriteFix	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteFix(BufferedOutputStream &os, const Fix &fix, bool fromB2, int no_enl)$/;"	f	class:IMI
WriteFloat	Cloud/Serialiser.hpp	/^  void WriteFloat(float value) {$/;"	f	class:Serialiser
WriteFormatted	IO/FileHandle.hpp	/^  void WriteFormatted(const char *format, Args&&... args) {$/;"	f	class:FileHandle
WriteFrames	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::WriteFrames(snd_pcm_t &alsa_handle, int16_t *buffer,$/;"	f	class:ALSAPCMPlayer
WriteFrames	Audio/ALSAPCMPlayer.hpp	/^  bool WriteFrames(size_t n, bool try_recover_on_error = true) {$/;"	f	class:ALSAPCMPlayer
WriteGeoPoint	Device/Driver/EWMicroRecorder.cpp	/^WriteGeoPoint(Port &port, const GeoPoint &value, OperationEnvironment &env)$/;"	f	file:
WriteGeoPoint	JSON/GeoWriter.hpp	/^  static inline void WriteGeoPoint(BufferedOutputStream &writer,$/;"	f	namespace:JSON
WriteGeoPointAttributes	JSON/GeoWriter.hpp	/^  static inline void WriteGeoPointAttributes(JSON::ObjectWriter &object,$/;"	f	namespace:JSON
WriteHeader	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteHeader(BufferedOutputStream &os, const TDeclaration &decl, IMIBYTE tampered)$/;"	f	class:IMI
WriteHeader	IGC/IGCWriter.cpp	/^IGCWriter::WriteHeader(const BrokenDateTime &date_time,$/;"	f	class:IGCWriter
WriteIndent	XML/Writer.cpp	/^WriteIndent(BufferedOutputStream &os, unsigned n)$/;"	f	file:
WriteInteger	JSON/Writer.hpp	/^  static inline void WriteInteger(BufferedOutputStream &writer, int value) {$/;"	f	namespace:JSON
WriteLE64	Util/MD5.cpp	/^WriteLE64(void *p, uint64_t value)$/;"	f	file:
WriteLabel	Device/Driver/EWMicroRecorder.cpp	/^WriteLabel(Port &port, const char *name, OperationEnvironment &env)$/;"	f	file:
WriteLine	IGC/IGCWriter.cpp	/^IGCWriter::WriteLine(const char *a, const TCHAR *b)$/;"	f	class:IGCWriter
WriteLine	IGC/IGCWriter.cpp	/^IGCWriter::WriteLine(const char *line)$/;"	f	class:IGCWriter
WriteLine	IO/TextWriter.hpp	/^  bool WriteLine(const TCHAR *s) {$/;"	f	class:TextWriter
WriteLine	IO/TextWriter.hpp	/^  bool WriteLine(const char *s) {$/;"	f	class:TextWriter
WriteLong	JSON/Writer.hpp	/^  static inline void WriteLong(BufferedOutputStream &writer, long value) {$/;"	f	namespace:JSON
WriteNMEA	Device/Descriptor.cpp	/^DeviceDescriptor::WriteNMEA(const TCHAR *line, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
WriteNMEA	Device/Descriptor.cpp	/^DeviceDescriptor::WriteNMEA(const char *line, OperationEnvironment &env)$/;"	f	class:DeviceDescriptor
WriteNavpoint	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::WriteNavpoint(unsigned id, const Waypoint &wp,$/;"	f	class:CAI302Device
WriteNull	JSON/Writer.hpp	/^  static inline void WriteNull(BufferedOutputStream &writer) {$/;"	f	namespace:JSON
WritePair	Device/Driver/EWMicroRecorder.cpp	/^WritePair(Port &port, const char *name, const TCHAR *value,$/;"	f	file:
WritePilot	Device/Driver/CAI302/Manage.cpp	/^CAI302Device::WritePilot(unsigned index, const CAI302::Pilot &pilot,$/;"	f	class:CAI302Device
WritePixel	Screen/Memory/PixelOperations.hpp	/^  inline void WritePixel(pointer p, source_color_type c) const {$/;"	f	struct:BinaryWritePixel
WritePixel	Screen/Memory/PixelOperations.hpp	/^  inline void WritePixel(pointer p, source_color_type c) const {$/;"	f	struct:PerPixelOperations
WritePixel	Screen/Memory/PixelOperations.hpp	/^  inline void WritePixel(pointer p, source_color_type c) const {$/;"	f	struct:UnaryWritePixel
WritePixel	Screen/Memory/PixelOperations.hpp	/^  void WritePixel(pointer p, color_type c) const {$/;"	f	class:TransparentInvertPixelOperations
WritePixel	Screen/Memory/PixelOperations.hpp	/^  void WritePixel(rpointer p, color_type c) const {$/;"	f	struct:ConditionalWritePixel
WritePixel	Screen/Memory/PixelTraits.hpp	/^  static void WritePixel(pointer p, color_type c) {$/;"	f	struct:BGRAPixelTraits
WritePixel	Screen/Memory/PixelTraits.hpp	/^  static void WritePixel(pointer p, color_type c) {$/;"	f	struct:GreyscalePixelTraits
WritePoint	Logger/LoggerImpl.cpp	/^LoggerImpl::WritePoint(const NMEAInfo &gps_info)$/;"	f	class:LoggerImpl
WritePortType	Profile/DeviceConfig.cpp	/^WritePortType(ProfileMap &map, unsigned n, DeviceConfig::PortType type)$/;"	f	file:
WriteSeeYouFlags	Waypoint/CupWriter.cpp	/^WriteSeeYouFlags(BufferedOutputStream &writer, const Waypoint &wp)$/;"	f	file:
WriteSerialNumber	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteSerialNumber(BufferedOutputStream &os, IMIWORD sn)$/;"	f	class:IMI
WriteSignature	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteSignature(BufferedOutputStream &os, const Signature &sig, IMIWORD sn)$/;"	f	class:IMI
WriteString	Cloud/Serialiser.cpp	/^Serialiser::WriteString(const char *s)$/;"	f	class:Serialiser
WriteString	Cloud/Serialiser.hpp	/^  void WriteString(const std::string &s) {$/;"	f	class:Serialiser
WriteString	Device/Driver/CAI302/Protocol.cpp	/^CAI302::WriteString(Port &port, const char *p, OperationEnvironment &env)$/;"	f	class:CAI302
WriteString	Device/Driver/IMI/Protocol/IGC.cpp	/^IMI::WriteString(BufferedOutputStream &os, const char *buffer, size_t max_length)$/;"	f	class:IMI
WriteString	JSON/Writer.cpp	/^JSON::WriteString(BufferedOutputStream &writer, const char *value)$/;"	f	class:JSON
WriteT	Cloud/Serialiser.hpp	/^  void WriteT(const T &value) {$/;"	f	class:Serialiser
WriteTo	Logger/GRecord.cpp	/^GRecord::WriteTo(BufferedOutputStream &writer) const$/;"	f	class:GRecord
WriteUnalignedBE16	OS/ByteOrder.hpp	/^WriteUnalignedBE16(uint16_t *p, uint16_t value)$/;"	f
WriteUnalignedLE16	OS/ByteOrder.hpp	/^WriteUnalignedLE16(uint16_t *p, uint16_t value)$/;"	f
WriteUnsigned	JSON/Writer.hpp	/^  static inline void WriteUnsigned(BufferedOutputStream &writer, unsigned value) {$/;"	f	namespace:JSON
WriteWideToUTF8	IO/BufferedOutputStream.cxx	/^BufferedOutputStream::WriteWideToUTF8(const wchar_t *src, size_t src_length)$/;"	f	class:BufferedOutputStream
WriteWithChecksum	Device/Driver/EW.cpp	/^WriteWithChecksum(Port &port, const char *String)$/;"	f	file:
WriteXMLChar	XML/Writer.cpp	/^WriteXMLChar(BufferedOutputStream &os, TCHAR ch)$/;"	f	file:
WriteXMLString	XML/Writer.cpp	/^WriteXMLString(BufferedOutputStream &os, const tstring &source)$/;"	f	file:
X	Computer/Wind/WindEKF.hpp	/^  float X[3];$/;"	m	class:WindEKF
X11EventQueue	Event/Poll/X11Queue.cpp	/^X11EventQueue::X11EventQueue(boost::asio::io_context &io_context, EventQueue &_queue)$/;"	f	class:X11EventQueue
X11EventQueue	Event/Poll/X11Queue.hpp	/^class X11EventQueue {$/;"	c
XAtY	Terrain/ScanLine.cpp	/^XAtY(const GridRay &ray, int y)$/;"	f	file:
XCOM760CreateOnPort	Device/Driver/XCOM760.cpp	/^XCOM760CreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
XCOM760Device	Device/Driver/XCOM760.cpp	/^  XCOM760Device(Port &_port):port(_port) {}$/;"	f	class:XCOM760Device
XCOM760Device	Device/Driver/XCOM760.cpp	/^class XCOM760Device : public AbstractDevice {$/;"	c	file:
XCONTEST	Engine/Contest/Settings.hpp	/^  XCONTEST,$/;"	m	class:Contest
XCONTEST_FREE_HPP	Engine/Contest/Solvers/XContestFree.hpp	24;"	d
XCONTEST_TRIANGLE_HPP	Engine/Contest/Solvers/XContestTriangle.hpp	24;"	d
XCSCHKLIST	Dialogs/dlgChecklist.cpp	36;"	d	file:
XCSDATADIR	LocalPath.cpp	64;"	d	file:
XCSOAR_ABORT_INTERSECTION_TEST_HPP	Engine/Task/Unordered/AbortIntersectionTest.hpp	25;"	d
XCSOAR_ACCELERATION_HPP	NMEA/Acceleration.hpp	25;"	d
XCSOAR_ACTION_INTERFACE_HPP	ActionInterface.hpp	25;"	d
XCSOAR_ACTION_WIDGET_HPP	Widget/ActionWidget.hpp	25;"	d
XCSOAR_ACTIVE_AIRSPACE_PREDICATE_HPP	Airspace/ActivePredicate.hpp	24;"	d
XCSOAR_AIRCRAFT_RENDERER_HPP	Renderer/AircraftRenderer.hpp	25;"	d
XCSOAR_AIRSPACES_HPP	Engine/Airspace/Airspaces.hpp	24;"	d
XCSOAR_AIRSPACE_AT_POINT_DIALOG_HPP	Dialogs/MapItemListDialog.hpp	25;"	d
XCSOAR_AIRSPACE_CLASS_RENDERER_SETTINGS_PANEL_HPP	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	25;"	d
XCSOAR_AIRSPACE_COMPUTER_SETTINGS_HPP	Airspace/AirspaceComputerSettings.hpp	25;"	d
XCSOAR_AIRSPACE_FORMATTER_HPP	Formatter/AirspaceFormatter.hpp	25;"	d
XCSOAR_AIRSPACE_GLUE_HPP	Airspace/AirspaceGlue.hpp	25;"	d
XCSOAR_AIRSPACE_LABEL_LIST_HPP	Renderer/AirspaceLabelList.hpp	25;"	d
XCSOAR_AIRSPACE_LABEL_RENDERER_HPP	Renderer/AirspaceLabelRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_LIST_RENDERER_HPP	Renderer/AirspaceListRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_LOOK_HPP	Look/AirspaceLook.hpp	25;"	d
XCSOAR_AIRSPACE_PARSER_HPP	Airspace/AirspaceParser.hpp	25;"	d
XCSOAR_AIRSPACE_PREVIEW_RENDERER_HPP	Renderer/AirspacePreviewRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_RENDERER_HPP	Renderer/AirspaceRenderer.hpp	25;"	d
XCSOAR_AIRSPACE_RENDERER_SETTINGS_HPP	Renderer/AirspaceRendererSettings.hpp	25;"	d
XCSOAR_AIRSPACE_ROUTE_HPP	Engine/Route/AirspaceRoute.hpp	24;"	d
XCSOAR_AIRSPACE_WARNING_COPY_HPP	Airspace/AirspaceWarningCopy.hpp	25;"	d
XCSOAR_AIRSPACE_WARNING_DIALOG_HPP	Dialogs/Airspace/AirspaceWarningDialog.hpp	25;"	d
XCSOAR_AIRSPACE_WARNING_MONITOR_HPP	Monitor/AirspaceWarningMonitor.hpp	25;"	d
XCSOAR_ALL_MONITORS_HPP	Monitor/AllMonitors.hpp	25;"	d
XCSOAR_ALTERNATE_LIST_HPP	Engine/Task/Unordered/AlternateList.hpp	24;"	d
XCSOAR_ALTERNATE_POINT_HPP	Engine/Task/Unordered/AlternatePoint.hpp	24;"	d
XCSOAR_ALTITUDE_INFO_PANEL_HPP	InfoBoxes/Panel/AltitudeInfo.hpp	25;"	d
XCSOAR_ALTITUDE_REFERENCE_HPP	Geo/AltitudeReference.hpp	24;"	d
XCSOAR_ALTITUDE_SETUP_PANEL_HPP	InfoBoxes/Panel/AltitudeSetup.hpp	25;"	d
XCSOAR_ALTITUDE_SIMULATOR_PANEL_HPP	InfoBoxes/Panel/AltitudeSimulator.hpp	25;"	d
XCSOAR_ANALYSIS_DIALOG_HPP	Dialogs/dlgAnalysis.hpp	25;"	d
XCSOAR_ANDROID_BITMAP_HPP	Android/Bitmap.hpp	25;"	d
XCSOAR_ANDROID_BLUETOOTH_HELPER_HPP	Android/BluetoothHelper.hpp	25;"	d
XCSOAR_ANDROID_BMP085_DEVICE_HPP	Android/BMP085Device.hpp	25;"	d
XCSOAR_ANDROID_BMP085_LISTENER_HPP	Android/BMP085Listener.hpp	25;"	d
XCSOAR_ANDROID_CONTEXT_HPP	Android/Context.hpp	25;"	d
XCSOAR_ANDROID_DOWNLOAD_MANAGER_HPP	Android/DownloadManager.hpp	25;"	d
XCSOAR_ANDROID_ENVIRONMENT_HPP	Android/Environment.hpp	25;"	d
XCSOAR_ANDROID_GLIDER_LINK_HPP	Android/GliderLink.hpp	27;"	d
XCSOAR_ANDROID_I2CBARO_DEVICE_HPP	Android/I2CbaroDevice.hpp	25;"	d
XCSOAR_ANDROID_I2CBARO_LISTENER_HPP	Android/I2CbaroListener.hpp	25;"	d
XCSOAR_ANDROID_INTERNAL_SENSORS_HPP	Android/InternalSensors.hpp	25;"	d
XCSOAR_ANDROID_IOIOHELPER_HPP	Android/IOIOHelper.hpp	25;"	d
XCSOAR_ANDROID_LE_SCAN_CALLBACK_HPP	Android/LeScanCallback.hpp	25;"	d
XCSOAR_ANDROID_MAIN_HPP	Android/Main.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_BMP085_LISTENER_HPP	Android/NativeBMP085Listener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_I2CBARO_LISTENER_HPP	Android/NativeI2CbaroListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_INPUT_LISTENER_HPP	Android/NativeInputListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_LE_SCAN_CALLBACK_HPP	Android/NativeLeScanCallback.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_NUNCHUCK_LISTENER_HPP	Android/NativeNunchuckListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_PORT_LISTENER_HPP	Android/NativePortListener.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_VIEW_HPP	Android/NativeView.hpp	25;"	d
XCSOAR_ANDROID_NATIVE_VOLTAGE_LISTENER_HPP	Android/NativeVoltageListener.hpp	25;"	d
XCSOAR_ANDROID_NOOK_HPP	Android/Nook.hpp	25;"	d
XCSOAR_ANDROID_NUNCHUCK_DEVICE_HPP	Android/NunchuckDevice.hpp	25;"	d
XCSOAR_ANDROID_NUNCHUCK_LISTENER_HPP	Android/NunchuckListener.hpp	25;"	d
XCSOAR_ANDROID_PORT_BRIDGE_HPP	Android/PortBridge.hpp	25;"	d
XCSOAR_ANDROID_PRODUCT_HPP	Android/Product.hpp	25;"	d
XCSOAR_ANDROID_SOUND_UTIL_HPP	Android/SoundUtil.hpp	25;"	d
XCSOAR_ANDROID_TEXT_UTIL_HPP	Android/TextUtil.hpp	25;"	d
XCSOAR_ANDROID_VIBRATOR_HPP	Android/Vibrator.hpp	25;"	d
XCSOAR_ANDROID_VOLTAGE_DEVICE_HPP	Android/VoltageDevice.hpp	25;"	d
XCSOAR_ANDROID_VOLTAGE_LISTENER_HPP	Android/VoltageListener.hpp	25;"	d
XCSOAR_ANGLE_FORMATTER_HPP	Formatter/AngleFormatter.hpp	25;"	d
XCSOAR_ANGLE_RANGE_HPP	Math/ARange.hpp	25;"	d
XCSOAR_APPLE_INTERNAL_SENSORS_HPP	Apple/InternalSensors.hpp	25;"	d
XCSOAR_APPLY_EXTERNAL_SETTINGS_HPP	ApplyExternalSettings.hpp	25;"	d
XCSOAR_APPLY_VEGA_SWITCHES_HPP	ApplyVegaSwitches.hpp	25;"	d
XCSOAR_ARROW_PAGER_WIDGET_HPP	Widget/ArrowPagerWidget.hpp	25;"	d
XCSOAR_ASIO_THREAD_HPP	IO/Async/AsioThread.hpp	25;"	d
XCSOAR_ASIO_UTIL_HPP	IO/Async/AsioUtil.hpp	25;"	d
XCSOAR_ASYNC_JOB_RUNNER_HPP	Job/Async.hpp	25;"	d
XCSOAR_ATC_REFERENCE_PANEL_HPP	InfoBoxes/Panel/ATCReference.hpp	25;"	d
XCSOAR_ATMOSPHERE_AIRDENSITY_H	Atmosphere/AirDensity.hpp	25;"	d
XCSOAR_ATMOSPHERE_CUSONDE_HPP	Atmosphere/CuSonde.hpp	25;"	d
XCSOAR_ATMOSPHERE_PRESSURE_H	Atmosphere/Pressure.hpp	25;"	d
XCSOAR_ATMOSPHERE_TEMPERATURE_HPP	Atmosphere/Temperature.hpp	25;"	d
XCSOAR_ATTITUDE_HPP	NMEA/Attitude.hpp	25;"	d
XCSOAR_AUDIO_ALGORITHMS_HPP	Audio/AudioAlgorithms.hpp	25;"	d
XCSOAR_AUDIO_ALSA_ENV_HPP	Audio/ALSAEnv.hpp	25;"	d
XCSOAR_AUDIO_ALSA_PCM_PLAYER_HPP	Audio/ALSAPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_ANDROID_PCM_PLAYER_HPP	Audio/AndroidPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_FEATURES_HPP	Audio/Features.hpp	31;"	d
XCSOAR_AUDIO_GLOBAL_PCM_MIXER_HPP	Audio/GlobalPCMMixer.hpp	25;"	d
XCSOAR_AUDIO_GLOBAL_PCM_RESOURCE_PLAYER_HPP	Audio/GlobalPCMResourcePlayer.hpp	25;"	d
XCSOAR_AUDIO_GLOBAL_VOLUME_CONTROLLER_HPP	Audio/GlobalVolumeController.hpp	25;"	d
XCSOAR_AUDIO_MIXER_PCM_PLAYER_HPP	Audio/MixerPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_PCM_BUFFER_DATA_SOURCE_HPP	Audio/PCMBufferDataSource.hpp	25;"	d
XCSOAR_AUDIO_PCM_DATA_SOURCE_HPP	Audio/PCMDataSource.hpp	25;"	d
XCSOAR_AUDIO_PCM_MIXER_DATA_SOURCE_HPP	Audio/PCMMixerDataSource.hpp	25;"	d
XCSOAR_AUDIO_PCM_MIXER_HPP	Audio/PCMMixer.hpp	25;"	d
XCSOAR_AUDIO_PCM_PLAYER_FACTORY_HPP	Audio/PCMPlayerFactory.hpp	25;"	d
XCSOAR_AUDIO_PCM_PLAYER_HPP	Audio/PCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_PCM_RESOURCE_PLAYER_HPP	Audio/PCMResourcePlayer.hpp	25;"	d
XCSOAR_AUDIO_PCM_SYNTHESISER_HPP	Audio/PCMSynthesiser.hpp	25;"	d
XCSOAR_AUDIO_SDL_PCM_PLAYER_HPP	Audio/SDLPCMPlayer.hpp	25;"	d
XCSOAR_AUDIO_SLES_INIT_HPP	Audio/SLES/Init.hpp	33;"	d
XCSOAR_AUDIO_SOUND_HPP	Audio/Sound.hpp	25;"	d
XCSOAR_AUDIO_TONE_SYNTHESISER_HPP	Audio/ToneSynthesiser.hpp	25;"	d
XCSOAR_AUDIO_VARIO_GLUE_HPP	Audio/VarioGlue.hpp	25;"	d
XCSOAR_AUDIO_VARIO_SYNTHESISER_HPP	Audio/VarioSynthesiser.hpp	25;"	d
XCSOAR_AUDIO_VOLUME_CONTROLLER_HPP	Audio/VolumeController.hpp	25;"	d
XCSOAR_AUTO_FONT_HPP	Look/AutoFont.hpp	25;"	d
XCSOAR_AUTO_QNH_HPP	Computer/AutoQNH.hpp	25;"	d
XCSOAR_AVAILABLE_FILE_HPP	Repository/AvailableFile.hpp	25;"	d
XCSOAR_AVERAGE_VARIO_COMPUTER_HPP	Computer/AverageVarioComputer.hpp	25;"	d
XCSOAR_BACKGROUND_RENDERER_HPP	Renderer/BackgroundRenderer.hpp	25;"	d
XCSOAR_BAROGRAPH_RENDERER_HPP	Renderer/BarographRenderer.hpp	25;"	d
XCSOAR_BASE_BLACKBOARD_HPP	Blackboard/BaseBlackboard.hpp	25;"	d
XCSOAR_BATTERY_TIMER_HPP	BatteryTimer.hpp	25;"	d
XCSOAR_BEST_CRUISE_ARROW_RENDERER_HPP	Renderer/BestCruiseArrowRenderer.hpp	25;"	d
XCSOAR_BIG_THERMAL_ASSISTANT_WIDGET_HPP	Gauge/BigThermalAssistantWidget.hpp	25;"	d
XCSOAR_BIG_THERMAL_ASSISTENT_WINDOW_HPP	Gauge/BigThermalAssistantWindow.hpp	25;"	d
XCSOAR_BITMAP_BUTTON_RENDERER_HPP	Renderer/BitmapButtonRenderer.hpp	25;"	d
XCSOAR_BLACKBOARD_LISTENER_HPP	Blackboard/BlackboardListener.hpp	25;"	d
XCSOAR_BLUEFLYVARIO_INTERNAL_HPP	Device/Driver/BlueFly/Internal.hpp	25;"	d
XCSOAR_BOOST_FLAT_BOUNDING_BOX_HPP	Geo/Flat/BoostFlatBoundingBox.hpp	24;"	d
XCSOAR_BOOST_FLAT_GEO_POINT_HPP	Geo/Flat/BoostFlatGeoPoint.hpp	24;"	d
XCSOAR_BOOST_FLAT_POINT_HPP	Geo/Flat/BoostFlatPoint.hpp	24;"	d
XCSOAR_BOOST_GEO_POINT_HPP	Geo/Boost/GeoPoint.hpp	24;"	d
XCSOAR_BOOST_RANGE_BOX_HPP	Geo/Boost/RangeBox.hpp	25;"	d
XCSOAR_BRESENHAM_HPP	Screen/Memory/Bresenham.hpp	25;"	d
XCSOAR_BROKEN_DATE_HPP	Time/BrokenDate.hpp	25;"	d
XCSOAR_BROKEN_DATE_TIME_HPP	Time/BrokenDateTime.hpp	25;"	d
XCSOAR_BROKEN_TIME_HPP	Time/BrokenTime.hpp	25;"	d
XCSOAR_BUTTON_LOOK_HPP	Look/ButtonLook.hpp	25;"	d
XCSOAR_BUTTON_PANEL_WIDGET_HPP	Widget/ButtonPanelWidget.hpp	25;"	d
XCSOAR_BUTTON_RENDERER_HPP	Renderer/ButtonRenderer.hpp	25;"	d
XCSOAR_BUTTON_WIDGET_HPP	Widget/ButtonWidget.hpp	25;"	d
XCSOAR_BYTE_ORDER_HPP	OS/ByteOrder.hpp	32;"	d
XCSOAR_BYTE_SIZE_FORMATTER_HPP	Formatter/ByteSizeFormatter.hpp	25;"	d
XCSOAR_CACHED_RENDERER_HPP	Renderer/TransparentRendererCache.hpp	25;"	d
XCSOAR_CACHED_TOPOGRAPHY_RENDERER_HPP	Topography/CachedTopographyRenderer.hpp	25;"	d
XCSOAR_CAI302_INTERNAL_HPP	Device/Driver/CAI302/Internal.hpp	25;"	d
XCSOAR_CAI302_POCKET_NAV_HPP	Device/Driver/CAI302/PocketNav.hpp	25;"	d
XCSOAR_CAI302_PROTOCOL_HPP	Device/Driver/CAI302/Protocol.hpp	25;"	d
XCSOAR_CAI302_UNITS_EDITOR_HPP	Dialogs/Device/CAI302/UnitsEditor.hpp	25;"	d
XCSOAR_CAI302_WAYPOINT_UPLOADER_HPP	Dialogs/Device/CAI302/WaypointUploader.hpp	25;"	d
XCSOAR_CALCULATION_THREAD_HPP	CalculationThread.hpp	25;"	d
XCSOAR_CALLBACK_WIDGET_HPP	Widget/CallbackWidget.hpp	25;"	d
XCSOAR_CATMULL_ROM_INTERPOLATOR_HPP	Replay/CatmullRomInterpolator.hpp	25;"	d
XCSOAR_CHARACTER_BUTTON_HPP	Form/CharacterButton.hpp	25;"	d
XCSOAR_CHART_RENDERER_HPP	Renderer/ChartRenderer.hpp	25;"	d
XCSOAR_CHECK_BOX_LOOK_HPP	Look/CheckBoxLook.hpp	25;"	d
XCSOAR_CIRCLING_COMPUTER_HPP	Computer/CirclingComputer.hpp	25;"	d
XCSOAR_CIRCLING_INFO_HPP	NMEA/CirclingInfo.hpp	25;"	d
XCSOAR_CIRCLING_WIND_HPP	Computer/Wind/CirclingWind.hpp	25;"	d
XCSOAR_CLIMB_CHART_RENDERER_HPP	Renderer/ClimbChartRenderer.hpp	25;"	d
XCSOAR_CLIMB_HISTORY_HPP	NMEA/ClimbHistory.hpp	25;"	d
XCSOAR_CLIMB_INFO_HPP	NMEA/ClimbInfo.hpp	25;"	d
XCSOAR_CLIMB_PERCENT_LOOK_HPP	Look/ClimbPercentLook.hpp	25;"	d
XCSOAR_CLOUD_CLIENT_HPP	Cloud/Client.hpp	25;"	d
XCSOAR_CLOUD_DATA_HPP	Cloud/Data.hpp	25;"	d
XCSOAR_CLOUD_DUMP_HPP	Cloud/Dump.hpp	25;"	d
XCSOAR_CLOUD_SENDER_HPP	Cloud/Sender.hpp	25;"	d
XCSOAR_CLOUD_THERMAL_HPP	Cloud/Thermal.hpp	25;"	d
XCSOAR_COLOR_BUTTON_RENDERER_HPP	Renderer/ColorButtonRenderer.hpp	25;"	d
XCSOAR_COLOR_LIST_DIALOG_HPP	Dialogs/ColorListDialog.hpp	25;"	d
XCSOAR_COMPARE_PROJECTION_HPP	Projection/CompareProjection.hpp	25;"	d
XCSOAR_COMPASS_RENDERER_HPP	Renderer/CompassRenderer.hpp	25;"	d
XCSOAR_COMPATIBILITY_PATH_H	Compatibility/path.h	25;"	d
XCSOAR_COMPAT_GDI_H	Compatibility/gdi.h	32;"	d
XCSOAR_COMPONENTS_HPP	Components.hpp	25;"	d
XCSOAR_COMPUTER_PROFILE_HPP	Profile/ComputerProfile.hpp	25;"	d
XCSOAR_COMPUTER_SETTINGS_HPP	Computer/Settings.hpp	25;"	d
XCSOAR_CONDITION_MONITORS_HPP	Computer/ConditionMonitor/ConditionMonitors.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_AAT_TIME_HPP	Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_FINAL_GLIDE_HPP	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_GLIDE_TERRAIN_HPP	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_HPP	Computer/ConditionMonitor/ConditionMonitor.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_LANDABLE_REACHABLE_HPP	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_SUNSET_HPP	Computer/ConditionMonitor/ConditionMonitorSunset.hpp	25;"	d
XCSOAR_CONDITION_MONITOR_WIND_HPP	Computer/ConditionMonitor/ConditionMonitorWind.hpp	25;"	d
XCSOAR_CONFIG_REGISTRY_HPP	Config/Registry.hpp	25;"	d
XCSOAR_CONSOLE_OPERATION_ENVIRONMENT_HPP	Operation/ConsoleOperationEnvironment.hpp	25;"	d
XCSOAR_CONTAINER_WIDGET_HPP	Widget/ContainerWidget.hpp	25;"	d
XCSOAR_CONTEST_CAST_HPP	Engine/Contest/Solvers/Cast.hpp	24;"	d
XCSOAR_CONTEST_COMPUTER_HPP	Computer/ContestComputer.hpp	25;"	d
XCSOAR_CONTEST_DMST_QUAD_HPP	Engine/Contest/Solvers/DMStQuad.hpp	24;"	d
XCSOAR_CONTEST_PROFILE_HPP	Profile/ContestProfile.hpp	25;"	d
XCSOAR_CONTEST_SETTINGS_HPP	Engine/Contest/Settings.hpp	24;"	d
XCSOAR_CONTEST_TRACE_HPP	Engine/Contest/ContestTrace.hpp	24;"	d
XCSOAR_CONVERT_STRING_HPP	Util/ConvertString.hpp	25;"	d
XCSOAR_CRC_HPP	Util/CRC.hpp	25;"	d
XCSOAR_CREATE_WINDOW_WIDGET_HPP	Widget/CreateWindowWidget.hpp	25;"	d
XCSOAR_CROSS_SECTION_WIDGET_HPP	CrossSection/CrossSectionWidget.hpp	25;"	d
XCSOAR_CSV_LINE_HPP	IO/CSVLine.hpp	25;"	d
XCSOAR_CU_COMPUTER_HPP	Computer/CuComputer.hpp	25;"	d
XCSOAR_CU_RENDERER_HPP	Renderer/CuRenderer.hpp	25;"	d
XCSOAR_CYLINDER_ZONE_EDIT_WIDGET_HPP	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	25;"	d
XCSOAR_DATA_FIELD_ANGLE_HPP	Form/DataField/Angle.hpp	25;"	d
XCSOAR_DATA_FIELD_BASE_HPP	Form/DataField/Base.hpp	25;"	d
XCSOAR_DATA_FIELD_BOOLEAN_HPP	Form/DataField/Boolean.hpp	25;"	d
XCSOAR_DATA_FIELD_COMBO_LIST_HPP	Form/DataField/ComboList.hpp	25;"	d
XCSOAR_DATA_FIELD_DIALOG_HPP	Dialogs/DataField.hpp	25;"	d
XCSOAR_DATA_FIELD_ENUM_HPP	Form/DataField/Enum.hpp	25;"	d
XCSOAR_DATA_FIELD_FLOAT_HPP	Form/DataField/Float.hpp	25;"	d
XCSOAR_DATA_FIELD_GEO_POINT_HPP	Form/DataField/GeoPoint.hpp	25;"	d
XCSOAR_DATA_FIELD_INTEGER_HPP	Form/DataField/Integer.hpp	25;"	d
XCSOAR_DATA_FIELD_LISTENER_HPP	Form/DataField/Listener.hpp	25;"	d
XCSOAR_DATA_FIELD_NUMBER_HPP	Form/DataField/Number.hpp	25;"	d
XCSOAR_DATA_FIELD_PREFIX_HPP	Form/DataField/Prefix.hpp	25;"	d
XCSOAR_DATA_FIELD_ROUGH_TIME_HPP	Form/DataField/RoughTime.hpp	25;"	d
XCSOAR_DATA_FIELD_STRING_HPP	Form/DataField/String.hpp	25;"	d
XCSOAR_DATA_FIELD_TIME_HPP	Form/DataField/Time.hpp	25;"	d
XCSOAR_DATA_GLOBALS_HPP	DataGlobals.hpp	25;"	d
XCSOAR_DEFAULT_FONTS_HPP	Look/DefaultFonts.hpp	25;"	d
XCSOAR_DELTA_TIME_HPP	Time/DeltaTime.hpp	25;"	d
XCSOAR_DERIVE_WINDOW_FILTER_HPP	Math/DifferentialWindowFilter.hpp	24;"	d
XCSOAR_DEVICE_ANDROID_BLUETOOTH_PORT_HPP	Device/Port/AndroidBluetoothPort.hpp	25;"	d
XCSOAR_DEVICE_ANDROID_IOIO_UART_PORT_HPP	Device/Port/AndroidIOIOUartPort.hpp	25;"	d
XCSOAR_DEVICE_ANDROID_PORT_HPP	Device/Port/AndroidPort.hpp	25;"	d
XCSOAR_DEVICE_BUFFERED_PORT_HPP	Device/Port/BufferedPort.hpp	25;"	d
XCSOAR_DEVICE_CONFIGURED_PORT_HPP	Device/Port/ConfiguredPort.hpp	25;"	d
XCSOAR_DEVICE_CONFIG_HPP	Device/Config.hpp	25;"	d
XCSOAR_DEVICE_DECLARATION_HPP	Device/Declaration.hpp	25;"	d
XCSOAR_DEVICE_DESCRIPTOR_HPP	Device/Descriptor.hpp	25;"	d
XCSOAR_DEVICE_DEVICE_HPP	Device/device.hpp	25;"	d
XCSOAR_DEVICE_DISPATCHER_HPP	Device/Dispatcher.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_AIRCONTROLDISPLAY_HPP	Device/Driver/AirControlDisplay.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ALTAIRPRO_HPP	Device/Driver/AltairPro.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ATR833_HPP	Device/Driver/ATR833.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_BLUEFLY_HPP	Device/Driver/BlueFlyVario.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_BORGELTB50_HPP	Device/Driver/BorgeltB50.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CAI302_HPP	Device/Driver/CAI302.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CAIGPSNAV_HPP	Device/Driver/CaiGpsNav.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CAILNAV_HPP	Device/Driver/CaiLNav.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CONDOR_HPP	Device/Driver/Condor.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_CPROBE_HPP	Device/Driver/CProbe.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_EWMICRORECORDER_HPP	Device/Driver/EWMicroRecorder.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_EW_HPP	Device/Driver/EW.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_EYE_HPP	Device/Driver/Eye.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLARM_HPP	Device/Driver/FLARM.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLYMASTERF1_HPP	Device/Driver/FlymasterF1.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLYNET_HPP	Device/Driver/FlyNet.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_FLYTEC_HPP	Device/Driver/Flytec.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_GENERIC_HPP	Device/Driver/Generic.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_HPP	Device/Driver.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ILEC_HPP	Device/Driver/ILEC.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_KRT2_HPP	Device/Driver/KRT2.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LEONARDO_HPP	Device/Driver/Leonardo.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LEVIL_HPP	Device/Driver/LevilAHRS_G.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LXERA_HPP	Device/Driver/LXERA.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LXERA_INTERNAL_HPP	Device/Driver/LXERA/Internal.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LXERA_LXERA_HPP	Device/Driver/LXERA/LXERA.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_CONVERT_HPP	Device/Driver/LX/Convert.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_CONVERT_HPP	Device/Driver/LXERA/Convert.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_HPP	Device/Driver/LX.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_INTERNAL_HPP	Device/Driver/LX/Internal.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_LX1600_HPP	Device/Driver/LX/LX1600.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_LXN_HPP	Device/Driver/LX/LXN.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_NANO_DECLARE_HPP	Device/Driver/LX/NanoDeclare.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_NANO_HPP	Device/Driver/LX/NanoProtocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_NANO_LOGGER_HPP	Device/Driver/LX/NanoLogger.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_PROTOCOL_HPP	Device/Driver/LX/Protocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_PROTOCOL_HPP	Device/Driver/LXERA/Protocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_LX_V7_HPP	Device/Driver/LX/V7.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_NMEAOUT_HPP	Device/Driver/NmeaOut.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_OPENVARIO_HPP	Device/Driver/OpenVario.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_POSIGRAPH_HPP	Device/Driver/PosiGraph.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_THERMALEXPRESS_HPP	Device/Driver/ThermalExpress.hpp	22;"	d
XCSOAR_DEVICE_DRIVER_VAULTER_HPP	Device/Driver/Vaulter.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VEGA_HPP	Device/Driver/Vega.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_DATABASE_HPP	Device/Driver/Volkslogger/Database.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_HPP	Device/Driver/Volkslogger.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_INTERNAL_HPP	Device/Driver/Volkslogger/Internal.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_VOLKSLOGGER_PROTOCOL_HPP	Device/Driver/Volkslogger/Protocol.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_WESTERBOER_HPP	Device/Driver/Westerboer.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_XCOM760_HPP	Device/Driver/XCOM760.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_XCTRACER_HPP	Device/Driver/XCTracer.hpp	25;"	d
XCSOAR_DEVICE_DRIVER_ZANDER_HPP	Device/Driver/Zander.hpp	25;"	d
XCSOAR_DEVICE_DUMP_PORT_HPP	Device/Port/DumpPort.hpp	25;"	d
XCSOAR_DEVICE_EDIT_WIDGET_HPP	Dialogs/Device/DeviceEditWidget.hpp	25;"	d
XCSOAR_DEVICE_EDIT_WIDGET_HPP	Dialogs/Plane/PolarShapeEditWidget.hpp	25;"	d
XCSOAR_DEVICE_ENUMERATOR_HPP	Device/Port/TTYEnumerator.hpp	25;"	d
XCSOAR_DEVICE_FEATURES_HPP	Device/Features.hpp	25;"	d
XCSOAR_DEVICE_INTERNAL_HPP	Device/Util/NMEAWriter.hpp	30;"	d
XCSOAR_DEVICE_K6BT_PORT_HPP	Device/Port/K6BtPort.hpp	25;"	d
XCSOAR_DEVICE_LINE_HANDLER_HPP	Device/Util/LineHandler.hpp	25;"	d
XCSOAR_DEVICE_LINE_SPLITTER_HPP	Device/Util/LineSplitter.hpp	25;"	d
XCSOAR_DEVICE_LIST_DIALOG_HPP	Dialogs/Device/DeviceListDialog.hpp	25;"	d
XCSOAR_DEVICE_LIST_HPP	Device/MultipleDevices.hpp	30;"	d
XCSOAR_DEVICE_NULL_PORT_HPP	Device/Port/NullPort.hpp	25;"	d
XCSOAR_DEVICE_PARSER_HPP	Device/Parser.hpp	25;"	d
XCSOAR_DEVICE_PORT_HPP	Device/Port/Port.hpp	25;"	d
XCSOAR_DEVICE_PORT_LISTENER_HPP	Device/Port/Listener.hpp	25;"	d
XCSOAR_DEVICE_PORT_NMEA_READER_HPP	Device/Util/NMEAReader.hpp	25;"	d
XCSOAR_DEVICE_PORT_STATE_HPP	Device/Port/State.hpp	25;"	d
XCSOAR_DEVICE_RECORDED_FLIGHT_HPP	Device/RecordedFlight.hpp	25;"	d
XCSOAR_DEVICE_REGISTRY_HPP	Device/Register.hpp	30;"	d
XCSOAR_DEVICE_SERIAL_PORT_HPP	Device/Port/SerialPort.hpp	25;"	d
XCSOAR_DEVICE_SETTINGS_MAP_HPP	Device/SettingsMap.hpp	25;"	d
XCSOAR_DEVICE_SIMULATOR_HPP	Device/Simulator.hpp	25;"	d
XCSOAR_DEVICE_TCP_CLIENT_PORT_HPP	Device/Port/TCPClientPort.hpp	25;"	d
XCSOAR_DEVICE_TCP_PORT_HPP	Device/Port/TCPPort.hpp	25;"	d
XCSOAR_DEVICE_TTY_PORT_HPP	Device/Port/TTYPort.hpp	25;"	d
XCSOAR_DEVICE_UDP_PORT_HPP	Device/Port/UDPPort.hpp	25;"	d
XCSOAR_DIALOGS_AIRSPACE_HPP	Dialogs/Airspace/Airspace.hpp	25;"	d
XCSOAR_DIALOGS_BLUEFLY_HPP	Dialogs/Device/BlueFly/BlueFlyDialogs.hpp	25;"	d
XCSOAR_DIALOGS_COMBO_PICKER_HPP	Dialogs/ComboPicker.hpp	25;"	d
XCSOAR_DIALOGS_ERROR_MESSAGE_HPP	Dialogs/Error.hpp	25;"	d
XCSOAR_DIALOGS_FILE_MANAGER_HPP	Dialogs/FileManager.hpp	25;"	d
XCSOAR_DIALOGS_FILE_PICKER_HPP	Dialogs/FilePicker.hpp	25;"	d
XCSOAR_DIALOGS_GEOPOINT_ENTRY_HPP	Dialogs/GeoPointEntry.hpp	25;"	d
XCSOAR_DIALOGS_H	Dialogs/Dialogs.h	25;"	d
XCSOAR_DIALOGS_LIST_PICKER_HPP	Dialogs/ListPicker.hpp	25;"	d
XCSOAR_DIALOGS_LOCKSCREEN_HPP	Dialogs/LockScreen.hpp	25;"	d
XCSOAR_DIALOGS_MAP_OVERLAY_WIDGET_HPP	Dialogs/Weather/MapOverlayWidget.hpp	25;"	d
XCSOAR_DIALOGS_MESSAGE_HPP	Dialogs/Message.hpp	25;"	d
XCSOAR_DIALOGS_NUMBER_ENTRY_HPP	Dialogs/NumberEntry.hpp	25;"	d
XCSOAR_DIALOGS_PLANES_HPP	Dialogs/Plane/PlaneDialogs.hpp	25;"	d
XCSOAR_DIALOGS_TASK_HPP	Dialogs/Task/TaskDialogs.hpp	25;"	d
XCSOAR_DIALOGS_TIME_ENTRY_HPP	Dialogs/TimeEntry.hpp	25;"	d
XCSOAR_DIALOGS_TRAFFIC_HPP	Dialogs/Traffic/TrafficDialogs.hpp	25;"	d
XCSOAR_DIALOGS_VEGA_HPP	Dialogs/Device/Vega/VegaDialogs.hpp	25;"	d
XCSOAR_DIALOGS_WAYPOINT_HPP	Dialogs/Waypoint/WaypointDialogs.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_HPP	Dialogs/Weather/WeatherDialog.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_NOAA_DETAILS_HPP	Dialogs/Weather/NOAADetails.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_NOAA_LIST_HPP	Dialogs/Weather/NOAAList.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_PCMET_HPP	Dialogs/Weather/PCMetDialog.hpp	25;"	d
XCSOAR_DIALOGS_WEATHER_RASP_HPP	Dialogs/Weather/RASPDialog.hpp	25;"	d
XCSOAR_DIALOG_LOOK_HPP	Look/DialogLook.hpp	25;"	d
XCSOAR_DIALOG_SETTINGS_HPP	Dialogs/DialogSettings.hpp	25;"	d
XCSOAR_DISPLAY_MODE_HPP	DisplayMode.hpp	25;"	d
XCSOAR_DISPLAY_ORIENTATION_HPP	DisplayOrientation.hpp	25;"	d
XCSOAR_DISPLAY_SETTINGS_HPP	DisplaySettings.hpp	25;"	d
XCSOAR_DISTANCE_STAT_COMPUTER_HPP	Engine/Task/Computer/DistanceStatComputer.hpp	24;"	d
XCSOAR_DOCK_WINDOW_HPP	Widget/DockWindow.hpp	25;"	d
XCSOAR_DOWNLOAD_FILE_PICKER_HPP	Dialogs/DownloadFilePicker.hpp	25;"	d
XCSOAR_DRAW_THREAD_HPP	DrawThread.hpp	25;"	d
XCSOAR_DYNAMIC_LIBRARY_HPP	OS/DynamicLibrary.hpp	25;"	d
XCSOAR_ELEMENT_STAT_COMPUTER_HPP	Engine/Task/Computer/ElementStatComputer.hpp	24;"	d
XCSOAR_EVENT_ANDROID_KEY_CODE_HPP	Event/Android/KeyCode.hpp	25;"	d
XCSOAR_EVENT_ANDROID_LOOP_HPP	Event/Android/Loop.hpp	25;"	d
XCSOAR_EVENT_ANDROID_QUEUE_HPP	Event/Android/Queue.hpp	25;"	d
XCSOAR_EVENT_DELAYED_NOTIFY_HPP	Event/DelayedNotify.hpp	25;"	d
XCSOAR_EVENT_GLOBALS_HPP	Event/Globals.hpp	25;"	d
XCSOAR_EVENT_IDLE_HPP	Event/Idle.hpp	25;"	d
XCSOAR_EVENT_KEY_CODE_HPP	Event/KeyCode.hpp	25;"	d
XCSOAR_EVENT_LIBINPUT_LIBINPUT_HPP	Event/Poll/LibInput/LibInputHandler.hpp	25;"	d
XCSOAR_EVENT_LINUX_INPUT_HPP	Event/Poll/Linux/Input.hpp	25;"	d
XCSOAR_EVENT_LINUX_KEY_CODE_HPP	Event/Poll/Linux/KeyCode.hpp	25;"	d
XCSOAR_EVENT_LINUX_TRANSLATE_HPP	Event/Poll/Linux/Translate.hpp	25;"	d
XCSOAR_EVENT_MERGE_MOUSE_HPP	Event/Poll/Linux/MergeMouse.hpp	25;"	d
XCSOAR_EVENT_NOTIFY_HPP	Event/Notify.hpp	25;"	d
XCSOAR_EVENT_PERIODIC_TIMER_HPP	Event/PeriodicTimer.hpp	25;"	d
XCSOAR_EVENT_PIPE_HPP	OS/EventPipe.hpp	31;"	d
XCSOAR_EVENT_POLL_INPUT_QUEUE_HPP	Event/Poll/InputQueue.hpp	25;"	d
XCSOAR_EVENT_POLL_KEY_CODE_HPP	Event/Poll/KeyCode.hpp	25;"	d
XCSOAR_EVENT_POLL_LOOP_HPP	Event/Poll/Loop.hpp	25;"	d
XCSOAR_EVENT_POLL_QUEUE_HPP	Event/Poll/Queue.hpp	25;"	d
XCSOAR_EVENT_QUEUE_HPP	Event/Queue.hpp	25;"	d
XCSOAR_EVENT_ROTATE_POINTER_HPP	Event/Shared/RotatePointer.hpp	25;"	d
XCSOAR_EVENT_SDL_HPP	Event/SDL/Event.hpp	25;"	d
XCSOAR_EVENT_SDL_KEY_CODE_HPP	Event/SDL/KeyCode.hpp	25;"	d
XCSOAR_EVENT_SDL_LOOP_HPP	Event/SDL/Loop.hpp	25;"	d
XCSOAR_EVENT_SDL_QUEUE_HPP	Event/SDL/Queue.hpp	25;"	d
XCSOAR_EVENT_SHARED_EVENT_HPP	Event/Shared/Event.hpp	25;"	d
XCSOAR_EVENT_TIMER_HPP	Event/Timer.hpp	25;"	d
XCSOAR_EVENT_TIMER_QUEUE_HPP	Event/Shared/TimerQueue.hpp	25;"	d
XCSOAR_EVENT_UDEVCONTEXT_HPP	Event/Poll/LibInput/UdevContext.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_EVENT_HPP	Event/Windows/Event.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_KEY_CODE_HPP	Event/Windows/KeyCode.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_LOOP_HPP	Event/Windows/Loop.hpp	25;"	d
XCSOAR_EVENT_WINDOWS_QUEUE_HPP	Event/Windows/Queue.hpp	25;"	d
XCSOAR_EVENT_X11_EVENT_QUEUE_HPP	Event/Poll/WaylandQueue.hpp	25;"	d
XCSOAR_EVENT_X11_EVENT_QUEUE_HPP	Event/Poll/X11Queue.hpp	25;"	d
XCSOAR_EVENT_X11_KEY_CODE_HPP	Event/Poll/X11KeyCode.hpp	25;"	d
XCSOAR_EXTERNAL_LOGGER_HPP	Logger/ExternalLogger.hpp	25;"	d
XCSOAR_EXTERNAL_SETTINGS_HPP	NMEA/ExternalSettings.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_AREA_HPP	Engine/Task/Shapes/FAITriangleArea.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_AREA_RENDERER_HPP	Renderer/FAITriangleAreaRenderer.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_POINT_VALIDATOR_HPP	Engine/Task/Shapes/FAITrianglePointValidator.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_RULES_HPP	Engine/Task/Shapes/FAITriangleRules.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_SETTINGS_HPP	Engine/Task/Shapes/FAITriangleSettings.hpp	25;"	d
XCSOAR_FAI_TRIANGLE_TASK_HPP	Engine/Task/Shapes/FAITriangleTask.hpp	25;"	d
XCSOAR_FILE_CACHE_HPP	IO/FileCache.hpp	25;"	d
XCSOAR_FILE_DATA_FIELD_HPP	Form/DataField/File.hpp	25;"	d
XCSOAR_FILE_REPOSITORY_HPP	Repository/FileRepository.hpp	25;"	d
XCSOAR_FILE_TRANSACTION_HPP	IO/FileTransaction.hpp	25;"	d
XCSOAR_FILE_TYPE_HPP	Repository/FileType.hpp	25;"	d
XCSOAR_FINAL_GLIDE_BAR_LOOK_HPP	Look/FinalGlideBarLook.hpp	25;"	d
XCSOAR_FINAL_GLIDE_BAR_RENDERER_HPP	Renderer/FinalGlideBarRenderer.hpp	25;"	d
XCSOAR_FINISH_CONSTRAINTS_HPP	Engine/Task/Ordered/FinishConstraints.hpp	24;"	d
XCSOAR_FIXED_WINDOW_WIDGET_HPP	Widget/FixedWindowWidget.hpp	25;"	d
XCSOAR_FLARM_BINARY_PROTOCOL_HPP	Device/Driver/FLARM/BinaryProtocol.hpp	25;"	d
XCSOAR_FLARM_CALCULATIONS_HPP	FLARM/FlarmCalculations.hpp	25;"	d
XCSOAR_FLARM_COLOR_DATABASE_HPP	FLARM/ColorDatabase.hpp	25;"	d
XCSOAR_FLARM_COLOR_HPP	FLARM/Color.hpp	25;"	d
XCSOAR_FLARM_COMPUTER_HPP	FLARM/FlarmComputer.hpp	25;"	d
XCSOAR_FLARM_CONFIG_WIDGET_HPP	Dialogs/Device/FLARM/ConfigWidget.hpp	25;"	d
XCSOAR_FLARM_CRC16_HPP	Device/Driver/FLARM/CRC16.hpp	25;"	d
XCSOAR_FLARM_DATA_HPP	FLARM/Data.hpp	25;"	d
XCSOAR_FLARM_DEVICE_HPP	Device/Driver/FLARM/Device.hpp	25;"	d
XCSOAR_FLARM_ERROR_HPP	FLARM/Error.hpp	25;"	d
XCSOAR_FLARM_FRIENDS_HPP	FLARM/Friends.hpp	25;"	d
XCSOAR_FLARM_GLOBAL_HPP	FLARM/Global.hpp	25;"	d
XCSOAR_FLARM_GLUE_HPP	FLARM/Glue.hpp	25;"	d
XCSOAR_FLARM_ID_HPP	FLARM/FlarmId.hpp	25;"	d
XCSOAR_FLARM_NAME_DATABASE_HPP	FLARM/NameDatabase.hpp	25;"	d
XCSOAR_FLARM_NAME_FILE_HPP	FLARM/NameFile.hpp	25;"	d
XCSOAR_FLARM_NET_DATABASE_HPP	FLARM/FlarmNetDatabase.hpp	25;"	d
XCSOAR_FLARM_NET_READER_HPP	FLARM/FlarmNetReader.hpp	25;"	d
XCSOAR_FLARM_NET_RECORD_HPP	FLARM/FlarmNetRecord.hpp	25;"	d
XCSOAR_FLARM_PROFILE_HPP	Profile/FlarmProfile.hpp	25;"	d
XCSOAR_FLARM_STATIC_PARSER_HPP	Device/Driver/FLARM/StaticParser.hpp	25;"	d
XCSOAR_FLARM_STATUS_HPP	FLARM/Status.hpp	25;"	d
XCSOAR_FLARM_TEXT_PROTOCOL_HPP	Device/Driver/FLARM/TextProtocol.hpp	25;"	d
XCSOAR_FLARM_TRAFFIC_HPP	FLARM/Traffic.hpp	25;"	d
XCSOAR_FLARM_TRAFFIC_LIST_HPP	FLARM/List.hpp	25;"	d
XCSOAR_FLARM_VERSION_HPP	FLARM/Version.hpp	25;"	d
XCSOAR_FLAT_PROJECTION_HPP	Geo/Flat/FlatProjection.hpp	24;"	d
XCSOAR_FLIGHT_INFO_HPP	FlightInfo.hpp	25;"	d
XCSOAR_FLIGHT_LIST_RENDERER_HPP	Renderer/FlightListRenderer.hpp	25;"	d
XCSOAR_FLIGHT_LOGGER_HPP	Logger/FlightLogger.hpp	25;"	d
XCSOAR_FLIGHT_PARSER_HPP	Logger/FlightParser.hpp	25;"	d
XCSOAR_FLIGHT_STATUS_PANEL_HPP	Dialogs/StatusPanels/FlightStatusPanel.hpp	25;"	d
XCSOAR_FLYING_COMPUTER_HPP	Computer/FlyingComputer.hpp	25;"	d
XCSOAR_FLYING_STATE_HPP	NMEA/FlyingState.hpp	25;"	d
XCSOAR_FLYTEC_DEVICE_HPP	Device/Driver/Flytec/Device.hpp	25;"	d
XCSOAR_FONT_DESCRIPTION_HPP	Look/FontDescription.hpp	25;"	d
XCSOAR_FONT_SETTINGS_HPP	Look/FontSettings.hpp	25;"	d
XCSOAR_FORMAT_SETTINGS_HPP	FormatSettings.hpp	25;"	d
XCSOAR_FORM_ACTION_LISTENER_HPP	Form/ActionListener.hpp	25;"	d
XCSOAR_FORM_BUTTON_HPP	Form/Button.hpp	25;"	d
XCSOAR_FORM_BUTTON_PANEL_HPP	Form/ButtonPanel.hpp	25;"	d
XCSOAR_FORM_CHECK_BOX_HPP	Form/CheckBox.hpp	25;"	d
XCSOAR_FORM_CONTROL_HPP	Form/Control.hpp	25;"	d
XCSOAR_FORM_DIGIT_ENTRY_HPP	Form/DigitEntry.hpp	25;"	d
XCSOAR_FORM_DRAW_HPP	Form/Draw.hpp	25;"	d
XCSOAR_FORM_EDIT_HPP	Form/Edit.hpp	25;"	d
XCSOAR_FORM_FORM_HPP	Form/Form.hpp	25;"	d
XCSOAR_FORM_FRAME_HPP	Form/Frame.hpp	25;"	d
XCSOAR_FORM_GRIDVIEW_HPP	Form/GridView.hpp	25;"	d
XCSOAR_FORM_HLINE_HPP	Form/HLine.hpp	25;"	d
XCSOAR_FORM_LAMBDA_ACTION_LISTENER_HPP	Form/LambdaActionListener.hpp	25;"	d
XCSOAR_FORM_LIST_HPP	Form/List.hpp	25;"	d
XCSOAR_FORM_PANEL_HPP	Form/Panel.hpp	25;"	d
XCSOAR_FORM_SCROLL_BAR_HPP	Form/ScrollBar.hpp	25;"	d
XCSOAR_FORM_TABMENU_DISPLAY_HPP	Form/TabMenuDisplay.hpp	25;"	d
XCSOAR_FORM_TAB_DISPLAY_HPP	Form/TabDisplay.hpp	25;"	d
XCSOAR_FORM_TAB_MENU_DATA_HPP	Form/TabMenuData.hpp	25;"	d
XCSOAR_FULL_BLACKBOARD_HPP	Blackboard/FullBlackboard.hpp	25;"	d
XCSOAR_GBM_FORMAT	Screen/EGL/TopCanvas.cpp	/^static constexpr uint32_t XCSOAR_GBM_FORMAT = GBM_FORMAT_XRGB8888;$/;"	v	file:
XCSOAR_GBM_FORMAT_FALLBACK	Screen/EGL/TopCanvas.cpp	/^static constexpr uint32_t XCSOAR_GBM_FORMAT_FALLBACK = GBM_FORMAT_ARGB8888;$/;"	v	file:
XCSOAR_GEOPOINT_FORMATTER_HPP	Formatter/GeoPointFormatter.hpp	25;"	d
XCSOAR_GEO_BITMAP_RENDERER_HPP	Renderer/GeoBitmapRenderer.hpp	25;"	d
XCSOAR_GEO_CLIP_HPP	Geo/GeoClip.hpp	25;"	d
XCSOAR_GEO_FAI_SPHERE_HPP	Geo/FAISphere.hpp	29;"	d
XCSOAR_GEO_GRAVITY_HPP	Geo/Gravity.hpp	25;"	d
XCSOAR_GEO_MATH_HPP	Geo/Math.hpp	32;"	d
XCSOAR_GEO_QUADRILATERAL_HPP	Geo/Quadrilateral.hpp	25;"	d
XCSOAR_GEO_RECT_HPP	Geo/GeoBounds.hpp	25;"	d
XCSOAR_GEO_SIMPLIFIED_MATH_HPP	Geo/SimplifiedMath.hpp	34;"	d
XCSOAR_GEO_WGS84_HPP	Geo/WGS84.hpp	25;"	d
XCSOAR_GESTURE_LOOK_HPP	Look/GestureLook.hpp	25;"	d
XCSOAR_GLASS_RENDERER_HPP	Renderer/GlassRenderer.hpp	25;"	d
XCSOAR_GLIDECOMPUTER_AIRDATA_HPP	Computer/GlideComputerAirData.hpp	25;"	d
XCSOAR_GLIDECOMPUTER_HPP	Computer/GlideComputer.hpp	25;"	d
XCSOAR_GLIDECOMPUTER_TASK_HPP	Computer/TaskComputer.hpp	25;"	d
XCSOAR_GLIDER_LINK_DATA_H	GliderLink/GliderLinkData.hpp	24;"	d
XCSOAR_GLIDER_LINK_ID_HPP	GliderLink/GliderLinkId.hpp	25;"	d
XCSOAR_GLIDER_LINK_TRAFFIC_HPP	GliderLink/Traffic.hpp	25;"	d
XCSOAR_GLIDER_LINK_TRAFFIC_LIST_HPP	GliderLink/List.hpp	25;"	d
XCSOAR_GLIDE_COMPUTER_EVENTS_HPP	Computer/Events.hpp	25;"	d
XCSOAR_GLIDE_POLAR_INFO_RENDERER_HPP	Renderer/GlidePolarInfoRenderer.hpp	25;"	d
XCSOAR_GLIDE_POLAR_RENDERER_HPP	Renderer/GlidePolarRenderer.hpp	25;"	d
XCSOAR_GLIDE_RATIO_COMPUTER_HPP	Computer/GlideRatioComputer.hpp	25;"	d
XCSOAR_GLIDE_RATIO_FORMATTER_HPP	Formatter/GlideRatioFormatter.hpp	25;"	d
XCSOAR_GLIDE_RATIO_HPP	Computer/GlideRatioCalculator.hpp	25;"	d
XCSOAR_GLIDE_SETTINGS_HPP	Engine/GlideSolvers/GlideSettings.hpp	24;"	d
XCSOAR_GLOBAL_ASIO_THREAD_HPP	IO/Async/GlobalAsioThread.hpp	25;"	d
XCSOAR_GLOBAL_FONTS_HPP	Look/GlobalFonts.hpp	25;"	d
XCSOAR_GLUE_FLIGHT_LOGGER_HPP	Logger/GlueFlightLogger.hpp	25;"	d
XCSOAR_GLUE_MAP_WINDOW_HPP	MapWindow/GlueMapWindow.hpp	25;"	d
XCSOAR_GPS_CLOCK_HPP	Time/GPSClock.hpp	25;"	d
XCSOAR_GPS_STATE_HPP	NMEA/GPSState.hpp	25;"	d
XCSOAR_GRADIENT_RENDERER_HPP	Renderer/GradientRenderer.hpp	25;"	d
XCSOAR_GROUND_SPEED_COMPUTER_HPP	Computer/GroundSpeedComputer.hpp	25;"	d
XCSOAR_GeoPoint_HPP	Geo/GeoPoint.hpp	26;"	d
XCSOAR_HARDWARE_BATTERY_H	Hardware/Battery.hpp	25;"	d
XCSOAR_HARDWARE_CPU_FREQUENCY_HPP	Hardware/CPU.hpp	25;"	d
XCSOAR_HARDWARE_DISPLAY_DPI_HPP	Hardware/DisplayDPI.hpp	25;"	d
XCSOAR_HARDWARE_DISPLAY_GLUE_H	Hardware/DisplayGlue.hpp	25;"	d
XCSOAR_HARDWARE_DISPLAY_SIZE_HPP	Hardware/DisplaySize.hpp	25;"	d
XCSOAR_HARDWARE_ROTATE_DISPLAY_HPP	Hardware/RotateDisplay.hpp	25;"	d
XCSOAR_HARDWARE_VIBRATOR_HPP	Hardware/Vibrator.hpp	25;"	d
XCSOAR_HARDWARE_VIDEO_POWER_H	Hardware/VideoPower.h	25;"	d
XCSOAR_HELP_DIALOG_HPP	Dialogs/HelpDialog.hpp	25;"	d
XCSOAR_HEX_COLOR_FORMATTER_HPP	Formatter/HexColor.hpp	25;"	d
XCSOAR_HEX_DUMP_HPP	HexDump.hpp	25;"	d
XCSOAR_HORIZON_WIDGET_HPP	HorizonWidget.hpp	25;"	d
XCSOAR_ICON_LOOK_HPP	Look/IconLook.hpp	25;"	d
XCSOAR_IGC_CLEANUP_HPP	Logger/IGCFileCleanup.hpp	25;"	d
XCSOAR_IGC_CODE	Logger/GRecord.hpp	28;"	d
XCSOAR_IGC_DECLARATION_HPP	IGC/IGCDeclaration.hpp	25;"	d
XCSOAR_IGC_EXTENSION_HPP	IGC/IGCExtensions.hpp	25;"	d
XCSOAR_IGC_FILENAME_FORMATTER_HPP	Formatter/IGCFilenameFormatter.hpp	25;"	d
XCSOAR_IGC_FIX_HPP	IGC/IGCFix.hpp	25;"	d
XCSOAR_IGC_GENERATOR_HPP	IGC/Generator.hpp	25;"	d
XCSOAR_IGC_HEADER_HPP	IGC/IGCHeader.hpp	25;"	d
XCSOAR_IGC_PARSER_HPP	IGC/IGCParser.hpp	25;"	d
XCSOAR_IGC_STRING_HPP	IGC/IGCString.hpp	25;"	d
XCSOAR_IGC_WRITER_HPP	IGC/IGCWriter.hpp	25;"	d
XCSOAR_IMI_CHECKCUM_HPP	Device/Driver/IMI/Protocol/Checksum.hpp	25;"	d
XCSOAR_IMI_COMMUNICATION_HPP	Device/Driver/IMI/Protocol/Communication.hpp	25;"	d
XCSOAR_IMI_CONVERSION_HPP	Device/Driver/IMI/Protocol/Conversion.hpp	25;"	d
XCSOAR_IMI_DEVIMI_HPP	Device/Driver/IMI/Protocol/Protocol.hpp	25;"	d
XCSOAR_IMI_IGC_HPP	Device/Driver/IMI/Protocol/IGC.hpp	25;"	d
XCSOAR_IMI_INTERNAL_HPP	Device/Driver/IMI/Internal.hpp	25;"	d
XCSOAR_IMI_MSGPARSER_HPP	Device/Driver/IMI/Protocol/MessageParser.hpp	25;"	d
XCSOAR_IMI_TYPES_HPP	Device/Driver/IMI/Protocol/Types.hpp	25;"	d
XCSOAR_INCREMENTAL_SPEED_COMPUTER_HPP	Engine/Task/Computer/IncrementalSpeedComputer.hpp	24;"	d
XCSOAR_INFOBOX_CONTENT_AIRSPACE_HPP	InfoBoxes/Content/Airspace.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_ALTERNATE_HPP	InfoBoxes/Content/Alternate.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_ALTITUDE_HPP	InfoBoxes/Content/Altitude.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_CONTEST_HPP	InfoBoxes/Content/Contest.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_DIRECTION_HPP	InfoBoxes/Content/Direction.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_GLIDE_HPP	InfoBoxes/Content/Glide.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_HPP	InfoBoxes/Content/Base.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_MACCREADY_HPP	InfoBoxes/Content/MacCready.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_OTHER_HPP	InfoBoxes/Content/Other.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_PLACES_HPP	InfoBoxes/Content/Places.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_RADIO_HPP	InfoBoxes/Content/Radio.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_SPEED_HPP	InfoBoxes/Content/Speed.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TASK_HPP	InfoBoxes/Content/Task.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TEAM_HPP	InfoBoxes/Content/Team.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TERRAIN_HPP	InfoBoxes/Content/Terrain.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_THERMAL_HPP	InfoBoxes/Content/Thermal.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TIME_HPP	InfoBoxes/Content/Time.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_TRACE_HPP	InfoBoxes/Content/Trace.hpp	25;"	d
XCSOAR_INFOBOX_CONTENT_WEATHER_HPP	InfoBoxes/Content/Weather.hpp	25;"	d
XCSOAR_INFOBOX_FACTORY_HPP	InfoBoxes/Content/Factory.hpp	25;"	d
XCSOAR_INFOBOX_PANEL_HPP	InfoBoxes/Panel/Panel.hpp	25;"	d
XCSOAR_INFOBOX_TYPE_HPP	InfoBoxes/Content/Type.hpp	25;"	d
XCSOAR_INFO_BOX_BORDER_HPP	InfoBoxes/Border.hpp	25;"	d
XCSOAR_INFO_BOX_DATA_HPP	InfoBoxes/Data.hpp	25;"	d
XCSOAR_INFO_BOX_HPP	InfoBoxes/InfoBoxWindow.hpp	25;"	d
XCSOAR_INFO_BOX_LAYOUT_HPP	InfoBoxes/InfoBoxLayout.hpp	25;"	d
XCSOAR_INFO_BOX_LOOK_HPP	Look/InfoBoxLook.hpp	25;"	d
XCSOAR_INFO_BOX_MANAGER_HPP	InfoBoxes/InfoBoxManager.hpp	25;"	d
XCSOAR_INFO_BOX_SETTINGS_HPP	InfoBoxes/InfoBoxSettings.hpp	25;"	d
XCSOAR_INPUT_CONFIG_HPP	Input/InputConfig.hpp	25;"	d
XCSOAR_INPUT_EVENTS_HPP	Input/InputEvents.hpp	25;"	d
XCSOAR_INPUT_KEYS_HPP	Input/InputKeys.hpp	25;"	d
XCSOAR_INPUT_LOOKUP_HPP	Input/InputLookup.hpp	25;"	d
XCSOAR_INPUT_PARSER_HPP	Input/InputParser.hpp	25;"	d
XCSOAR_INPUT_QUEUE_HPP	Input/InputQueue.hpp	25;"	d
XCSOAR_INTERFACE_HPP	Interface.hpp	25;"	d
XCSOAR_IO_CHARSET_HPP	IO/Charset.hpp	25;"	d
XCSOAR_IO_CONFIGURED_FILE_HPP	IO/ConfiguredFile.hpp	25;"	d
XCSOAR_IO_CONVERT_LINE_READER_HPP	IO/ConvertLineReader.hpp	25;"	d
XCSOAR_IO_DATA_FILE_HPP	IO/DataFile.hpp	25;"	d
XCSOAR_IO_DATA_HANDLER_HPP	IO/DataHandler.hpp	25;"	d
XCSOAR_IO_FILE_HANDLE_HPP	IO/FileHandle.hpp	25;"	d
XCSOAR_IO_FILE_LINE_READER_HPP	IO/FileLineReader.hpp	25;"	d
XCSOAR_IO_KEY_VALUE_FILE_READER_HPP	IO/KeyValueFileReader.hpp	25;"	d
XCSOAR_IO_LINE_READER_HPP	IO/LineReader.hpp	25;"	d
XCSOAR_IO_MAP_FILE_HPP	IO/MapFile.hpp	25;"	d
XCSOAR_IO_NULL_DATA_HANDLER_HPP	IO/NullDataHandler.hpp	25;"	d
XCSOAR_IO_TEXT_WRITER_HPP	IO/TextWriter.hpp	25;"	d
XCSOAR_IO_ZIP_ARCHIVE_HPP	IO/ZipArchive.hpp	25;"	d
XCSOAR_IO_ZIP_LINE_READER_HPP	IO/ZipLineReader.hpp	25;"	d
XCSOAR_IO_ZIP_READER_HPP	IO/ZipReader.hpp	25;"	d
XCSOAR_JOB_DIALOG_HPP	Dialogs/JobDialog.hpp	25;"	d
XCSOAR_JOB_HPP	Job/Job.hpp	25;"	d
XCSOAR_JOB_RUNNER_HPP	Job/Runner.hpp	25;"	d
XCSOAR_JOB_THREAD_HPP	Job/Thread.hpp	25;"	d
XCSOAR_JSON_GEO_WRITER_HPP	JSON/GeoWriter.hpp	25;"	d
XCSOAR_JSON_WRITER_HPP	JSON/Writer.hpp	25;"	d
XCSOAR_KALMAN_FILTER_1D_HPP	Math/KalmanFilter1d.hpp	24;"	d
XCSOAR_KEYBOARD_CONTROL_HPP	Widget/KeyboardWidget.hpp	25;"	d
XCSOAR_KEYHOLE_ZONE_EDIT_WIDGET_HPP	Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	25;"	d
XCSOAR_KEY_VALUE_FILE_WRITER_HPP	IO/KeyValueFileWriter.hpp	25;"	d
XCSOAR_KOBO_KERNEL_HPP	Kobo/Kernel.hpp	25;"	d
XCSOAR_KOBO_MODEL_HPP	Kobo/Model.hpp	25;"	d
XCSOAR_KOBO_NETWORK_DIALOG_HPP	Kobo/NetworkDialog.hpp	25;"	d
XCSOAR_KOBO_SYSTEM_DIALOG_HPP	Kobo/SystemDialog.hpp	25;"	d
XCSOAR_KOBO_SYSTEM_HPP	Kobo/System.hpp	25;"	d
XCSOAR_KOBO_TOOLS_DIALOG_HPP	Kobo/ToolsDialog.hpp	25;"	d
XCSOAR_KOBO_WIFI_DIALOG_HPP	Kobo/WifiDialog.hpp	25;"	d
XCSOAR_KOBO_WIFI_HPP	Kobo/WPASupplicant.hpp	25;"	d
XCSOAR_LABEL_SHAPE_HPP	Renderer/LabelShape.hpp	25;"	d
XCSOAR_LANGUAGE_GLUE_HPP	Language/LanguageGlue.hpp	25;"	d
XCSOAR_LANGUAGE_HPP	Language/Language.hpp	25;"	d
XCSOAR_LARGE_TEXT_WIDGET_HPP	Widget/LargeTextWidget.hpp	25;"	d
XCSOAR_LAST_USED_WAYPOINTS_HPP	Waypoint/LastUsed.hpp	25;"	d
XCSOAR_LEGAL_POINT_SET_HPP	Engine/Task/Factory/LegalPointSet.hpp	25;"	d
XCSOAR_LIBJPEG_HPP	Screen/Custom/LibJPEG.hpp	25;"	d
XCSOAR_LIBPNG_HPP	Screen/Custom/LibPNG.hpp	25;"	d
XCSOAR_LIBTIFF_HPP	Screen/Custom/LibTiff.hpp	25;"	d
XCSOAR_LIFT_DATABASE_COMPUTER_HPP	Computer/LiftDatabaseComputer.hpp	25;"	d
XCSOAR_LIFT_DATABASE_HPP	NMEA/LiftDatabase.hpp	25;"	d
XCSOAR_LINE2D_HPP	Math/Line2D.hpp	25;"	d
XCSOAR_LINE_ZONE_EDIT_WIDGET_HPP	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	25;"	d
XCSOAR_LIST_WIDGET_HPP	Widget/ListWidget.hpp	25;"	d
XCSOAR_LIVE_BLACKBOARD_HPP	Blackboard/LiveBlackboard.hpp	25;"	d
XCSOAR_LOCAL_PATH_HPP	LocalPath.hpp	25;"	d
XCSOAR_LOCAL_TIME_FORMATTER_HPP	Formatter/LocalTimeFormatter.hpp	25;"	d
XCSOAR_LOGGER_FRECORD_HPP	Logger/LoggerFRecord.hpp	25;"	d
XCSOAR_LOGGER_HPP	Logger/Logger.hpp	25;"	d
XCSOAR_LOGGER_IMPL_HPP	Logger/LoggerImpl.hpp	25;"	d
XCSOAR_LOGGER_SETTINGS_HPP	Logger/Settings.hpp	25;"	d
XCSOAR_LOGO_VIEW_HPP	Gauge/LogoView.hpp	25;"	d
XCSOAR_LOG_COMPUTER_HPP	Computer/LogComputer.hpp	25;"	d
XCSOAR_LOG_ERROR_HPP	OS/LogError.hpp	25;"	d
XCSOAR_LOG_FILE_HPP	LogFile.hpp	25;"	d
XCSOAR_LOOK_COLORS_HPP	Look/Colors.hpp	25;"	d
XCSOAR_LOOK_HPP	Look/Look.hpp	25;"	d
XCSOAR_LUA_AIRSPACE_HPP	Lua/Airspace.hpp	25;"	d
XCSOAR_LUA_ASSOCIATE_HPP	Lua/Associate.hpp	25;"	d
XCSOAR_LUA_BACKGROUND_HPP	Lua/Background.hpp	25;"	d
XCSOAR_LUA_BASIC_HPP	Lua/Basic.hpp	25;"	d
XCSOAR_LUA_BLACKBOARD_HPP	Lua/Blackboard.hpp	25;"	d
XCSOAR_LUA_CATCH_HPP	Lua/Catch.hpp	25;"	d
XCSOAR_LUA_DIALOGS_HPP	Lua/Dialogs.hpp	25;"	d
XCSOAR_LUA_FULL_HPP	Lua/Full.hpp	25;"	d
XCSOAR_LUA_GEO_HPP	Lua/Geo.hpp	25;"	d
XCSOAR_LUA_INPUT_EVENT_HPP	Lua/InputEvent.hpp	25;"	d
XCSOAR_LUA_LEGACY_HPP	Lua/Legacy.hpp	25;"	d
XCSOAR_LUA_LOGGER_HPP	Lua/Logger.hpp	25;"	d
XCSOAR_LUA_LOG_HPP	Lua/Log.hpp	25;"	d
XCSOAR_LUA_MAP_HPP	Lua/Map.hpp	25;"	d
XCSOAR_LUA_PERSISTENT_HPP	Lua/Persistent.hpp	25;"	d
XCSOAR_LUA_PTR_HPP	Lua/Ptr.hpp	25;"	d
XCSOAR_LUA_REPLAY_HPP	Lua/Replay.hpp	25;"	d
XCSOAR_LUA_SETTINGS_HPP	Lua/Settings.hpp	25;"	d
XCSOAR_LUA_START_FILE_HPP	Lua/StartFile.hpp	25;"	d
XCSOAR_LUA_TASK_HPP	Lua/Task.hpp	25;"	d
XCSOAR_LUA_TIMER_HPP	Lua/Timer.hpp	25;"	d
XCSOAR_LUA_TRACKING_HPP	Lua/Tracking.hpp	25;"	d
XCSOAR_LUA_WIND_HPP	Lua/Wind.hpp	25;"	d
XCSOAR_MACCREADY_RENDERER_HPP	Renderer/MacCreadyRenderer.hpp	25;"	d
XCSOAR_MAIN_WINDOW_HXX	MainWindow.hpp	25;"	d
XCSOAR_MANAGED_WIDGET_HPP	Widget/ManagedWidget.hpp	25;"	d
XCSOAR_MANAGE_CAI302_DIALOG_HPP	Dialogs/Device/ManageCAI302Dialog.hpp	25;"	d
XCSOAR_MANAGE_FLARM_DIALOG_HPP	Dialogs/Device/ManageFlarmDialog.hpp	25;"	d
XCSOAR_MANAGE_LX16XX_DIALOG_HPP	Dialogs/Device/LX/ManageLX16xxDialog.hpp	25;"	d
XCSOAR_MANAGE_NANO_DIALOG_HPP	Dialogs/Device/LX/ManageNanoDialog.hpp	25;"	d
XCSOAR_MANAGE_V7_DIALOG_HPP	Dialogs/Device/LX/ManageV7Dialog.hpp	25;"	d
XCSOAR_MAPWINDOW_PROJECTION_HPP	Projection/MapWindowProjection.hpp	25;"	d
XCSOAR_MAP_CANVAS_HPP	MapWindow/MapCanvas.hpp	25;"	d
XCSOAR_MAP_ITEM_HPP	MapWindow/Items/MapItem.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_BUILDER_HPP	MapWindow/Items/Builder.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_HPP	MapWindow/Items/List.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_RENDERER_HPP	Renderer/MapItemListRenderer.hpp	25;"	d
XCSOAR_MAP_ITEM_LIST_SETTINGS_PANEL_HPP	Dialogs/MapItemListSettingsPanel.hpp	25;"	d
XCSOAR_MAP_LOOK_HPP	Look/MapLook.hpp	25;"	d
XCSOAR_MAP_OVERLAY_BITMAP_HPP	MapWindow/OverlayBitmap.hpp	25;"	d
XCSOAR_MAP_OVERLAY_HPP	MapWindow/Overlay.hpp	25;"	d
XCSOAR_MAP_PROFILE_HPP	Profile/MapProfile.hpp	25;"	d
XCSOAR_MAP_SETTINGS_HPP	MapSettings.hpp	25;"	d
XCSOAR_MAP_WINDOW_HPP	MapWindow/MapWindow.hpp	25;"	d
XCSOAR_MARKS_HPP	Markers/Markers.hpp	25;"	d
XCSOAR_MATH_BOOST_POINT_ARRAY_HPP	Math/Boost/Point.hpp	25;"	d
XCSOAR_MATH_CONSTANTS_HPP	Math/Constants.hpp	25;"	d
XCSOAR_MATH_FASTMATH_HPP	Math/FastMath.hpp	25;"	d
XCSOAR_MATH_FASTROTATION_HPP	Math/FastRotation.hpp	25;"	d
XCSOAR_MATH_FAST_TRIG_HPP	Math/FastTrig.hpp	25;"	d
XCSOAR_MATH_SCREEN_HPP	Math/Screen.hpp	27;"	d
XCSOAR_MATH_SHIFT_HPP	Math/Shift.hpp	24;"	d
XCSOAR_MATH_TRIG_HPP	Math/Trig.hpp	25;"	d
XCSOAR_MATH_UTIL_HPP	Math/Util.hpp	24;"	d
XCSOAR_MAT_TASK_FACTORY_HPP	Engine/Task/Factory/MatTaskFactory.hpp	25;"	d
XCSOAR_MAT_TASK_MONITOR_HPP	Monitor/MatTaskMonitor.hpp	25;"	d
XCSOAR_MC_EDIT_PANEL_HPP	InfoBoxes/Panel/MacCreadyEdit.hpp	25;"	d
XCSOAR_MC_SETUP_PANEL_HPP	InfoBoxes/Panel/MacCreadySetup.hpp	25;"	d
XCSOAR_MENU_BAR_HPP	Menu/MenuBar.hpp	25;"	d
XCSOAR_MENU_DATA_HPP	Menu/MenuData.hpp	25;"	d
XCSOAR_MERGE_THREAD_HPP	MergeThread.hpp	25;"	d
XCSOAR_MESSAGE_HPP	Message.hpp	25;"	d
XCSOAR_MESSAGE_OPERATION_HPP	Operation/MessageOperationEnvironment.hpp	25;"	d
XCSOAR_MORE_DATA_HPP	NMEA/MoreData.hpp	25;"	d
XCSOAR_MO_FILE_HPP	Language/MOFile.hpp	25;"	d
XCSOAR_MO_LOADER_HPP	Language/MOLoader.hpp	25;"	d
XCSOAR_MURPHY_HPP	Screen/Memory/Murphy.hpp	25;"	d
XCSOAR_NET_DOWNLOAD_MANAGER_HPP	Net/HTTP/DownloadManager.hpp	25;"	d
XCSOAR_NET_FEATURES_HPP	Net/HTTP/Features.hpp	25;"	d
XCSOAR_NET_FEATURES_HXX	Net/Features.hxx	25;"	d
XCSOAR_NET_INIT_HPP	Net/HTTP/Init.hpp	25;"	d
XCSOAR_NET_STATE_HPP	Net/State.hpp	25;"	d
XCSOAR_NEXT_ARROW_RENDERER_HPP	Renderer/NextArrowRenderer.hpp	25;"	d
XCSOAR_NMEA_AIRCRAFT_HPP	NMEA/Aircraft.hpp	25;"	d
XCSOAR_NMEA_CHECKSUM_HPP	NMEA/Checksum.hpp	25;"	d
XCSOAR_NMEA_DERIVED_H	NMEA/Derived.hpp	25;"	d
XCSOAR_NMEA_INFO_H	NMEA/Info.hpp	25;"	d
XCSOAR_NMEA_INPUT_LINE_HPP	NMEA/InputLine.hpp	25;"	d
XCSOAR_NMEA_LOGGER_HPP	Logger/NMEALogger.hpp	25;"	d
XCSOAR_NMEA_THERMAL_LOCATOR_HPP	NMEA/ThermalLocator.hpp	25;"	d
XCSOAR_NOAA_LIST_RENDERER_HPP	Renderer/NOAAListRenderer.hpp	25;"	d
XCSOAR_NOAA_LOOK_HPP	Look/NOAALook.hpp	25;"	d
XCSOAR_NO_CANCEL_OPERATION_HPP	Operation/NoCancelOperationEnvironment.hpp	25;"	d
XCSOAR_NUMBER_PARSER_HPP	Util/NumberParser.hpp	25;"	d
XCSOAR_Nano_CONFIG_WIDGET_HPP	Dialogs/Device/LX/NanoConfigWidget.hpp	25;"	d
XCSOAR_OBSERVATION_ZONE_BOUNDARY_HPP	Engine/Task/ObservationZones/Boundary.hpp	25;"	d
XCSOAR_OBSERVATION_ZONE_EDIT_WIDGET_HPP	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	25;"	d
XCSOAR_OFFSET_BUTTONS_WIDGET_HPP	Widget/OffsetButtonsWidget.hpp	25;"	d
XCSOAR_OPENGL_FBO_HPP	Screen/OpenGL/FBO.hpp	25;"	d
XCSOAR_OPENGL_FRAME_BUFFER_HPP	Screen/OpenGL/FrameBuffer.hpp	25;"	d
XCSOAR_OPENGL_RENDER_BUFFER_HPP	Screen/OpenGL/RenderBuffer.hpp	25;"	d
XCSOAR_OPENGL_UNCOMPRESSED_IMAGE_HPP	Screen/OpenGL/UncompressedImage.hpp	25;"	d
XCSOAR_OPERATION_HPP	Operation/Operation.hpp	25;"	d
XCSOAR_ORDERED_TASK_SETTINGS_HPP	Engine/Task/Ordered/Settings.hpp	24;"	d
XCSOAR_OS_CLOCK_HPP	OS/Clock.hpp	25;"	d
XCSOAR_OS_COMMAND_LINE_HPP	CommandLine.hpp	25;"	d
XCSOAR_OS_FILEUTIL_HPP	OS/FileUtil.hpp	25;"	d
XCSOAR_OS_FILE_MAPPING_HPP	OS/FileMapping.hpp	25;"	d
XCSOAR_OS_PROCESS_HPP	OS/Process.hpp	25;"	d
XCSOAR_OS_RUN_FILE_HPP	OS/RunFile.hpp	25;"	d
XCSOAR_OUTSIDE_AIRSPACE_PREDICATE_HPP	Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	24;"	d
XCSOAR_OVERLAPPED_EVENT_HPP	OS/OverlappedEvent.hpp	25;"	d
XCSOAR_OVERLAPPED_WIDGET_HPP	Widget/OverlappedWidget.hpp	25;"	d
XCSOAR_OVERLAY_LOOK_HPP	Look/OverlayLook.hpp	25;"	d
XCSOAR_OVERLAY_MAP_ITEM_HPP	MapWindow/Items/OverlayMapItem.hpp	25;"	d
XCSOAR_OZ_PREVIEW_RENDERER_HPP	Renderer/OZPreviewRenderer.hpp	25;"	d
XCSOAR_PAGER_WIDGET_HPP	Widget/PagerWidget.hpp	25;"	d
XCSOAR_PAGES_HPP	PageActions.hpp	25;"	d
XCSOAR_PAGE_PROFILE_HPP	Profile/PageProfile.hpp	25;"	d
XCSOAR_PAGE_SETTINGS_HPP	PageSettings.hpp	25;"	d
XCSOAR_PAGE_STATE_HPP	PageState.hpp	25;"	d
XCSOAR_PANEL_WIDGET_HPP	Widget/PanelWidget.hpp	25;"	d
XCSOAR_PAN_HPP	Pan.hpp	25;"	d
XCSOAR_PASSWORD_DATA_FIELD_HPP	Form/DataField/Password.hpp	25;"	d
XCSOAR_PCMET_IMAGES_HPP	Weather/PCMet/Images.hpp	25;"	d
XCSOAR_PCMET_OVERLAYS_HPP	Weather/PCMet/Overlays.hpp	25;"	d
XCSOAR_PERIOD_CLOCK_HPP	Time/PeriodClock.hpp	25;"	d
XCSOAR_POINT2D_HPP	Math/Point2D.hpp	25;"	d
XCSOAR_POLAR_BUILTIN_HPP	Polar/PolarStore.hpp	25;"	d
XCSOAR_POLAR_COEFF_HPP	Engine/GlideSolvers/PolarCoefficients.hpp	25;"	d
XCSOAR_POLAR_FILE_GLUE_HPP	Polar/PolarFileGlue.hpp	25;"	d
XCSOAR_POLAR_INFO_HPP	Polar/Polar.hpp	25;"	d
XCSOAR_POLAR_LOADER_HPP	Polar/PolarGlue.hpp	25;"	d
XCSOAR_POLAR_PARSER_HPP	Polar/Parser.hpp	25;"	d
XCSOAR_POLAR_SHAPE_HPP	Polar/Shape.hpp	25;"	d
XCSOAR_POPUP_MESSAGE_H	PopupMessage.hpp	25;"	d
XCSOAR_POPUP_OPERATION_HPP	Operation/PopupOperationEnvironment.hpp	25;"	d
XCSOAR_PORT_MONITOR_DIALOG_HPP	Dialogs/Device/PortMonitor.hpp	25;"	d
XCSOAR_PROCESS_TIMER_H	ProcessTimer.hpp	24;"	d
XCSOAR_PROFILE_AIRSPACE_CONFIG_HPP	Profile/AirspaceConfig.hpp	25;"	d
XCSOAR_PROFILE_CURRENT_HPP	Profile/Current.hpp	25;"	d
XCSOAR_PROFILE_DEVICE_CONFIG_HPP	Profile/DeviceConfig.hpp	25;"	d
XCSOAR_PROFILE_FILE_HPP	Profile/File.hpp	25;"	d
XCSOAR_PROFILE_HPP	Profile/Profile.hpp	25;"	d
XCSOAR_PROFILE_INFOBOX_CONFIG_HPP	Profile/InfoBoxConfig.hpp	25;"	d
XCSOAR_PROFILE_MAP2_HPP	Profile/Map.hpp	25;"	d
XCSOAR_PROFILE_MAP_HPP	Profile/ProfileMap.hpp	25;"	d
XCSOAR_PROFILE_PASSWORD_DIALOG_HPP	Dialogs/ProfilePasswordDialog.hpp	25;"	d
XCSOAR_PROFILE_SETTINGS_HPP	Profile/Settings.hpp	25;"	d
XCSOAR_PROFILE_TERRAIN_CONFIG_HPP	Profile/TerrainConfig.hpp	25;"	d
XCSOAR_PROFILE_UNITS_CONFIG_HPP	Profile/UnitsConfig.hpp	25;"	d
XCSOAR_PROGRESS_DIALOG_HPP	Dialogs/ProgressDialog.hpp	25;"	d
XCSOAR_PROGRESS_GLUE_HPP	ProgressGlue.hpp	25;"	d
XCSOAR_PROJECTION_HPP	Projection/Projection.hpp	25;"	d
XCSOAR_PROTECTED_AIRSPACE_WARNING_MANAGER_HPP	Airspace/ProtectedAirspaceWarningManager.hpp	24;"	d
XCSOAR_PROTECTED_ROUTE_PLANNER_HPP	Task/ProtectedRoutePlanner.hpp	24;"	d
XCSOAR_PROTECTED_TASK_MANAGER_HPP	Task/ProtectedTaskManager.hpp	24;"	d
XCSOAR_PROTECTION_HPP	Protection.hpp	25;"	d
XCSOAR_PROXY_BLACKBOARD_LISTENER_HPP	Blackboard/ProxyBlackboardListener.hpp	25;"	d
XCSOAR_PROXY_OPERATION_HPP	Operation/ProxyOperationEnvironment.hpp	25;"	d
XCSOAR_QUESTION_WIDGET_HPP	Widget/QuestionWidget.hpp	25;"	d
XCSOAR_RADIO_EDIT_PANEL_HPP	InfoBoxes/Panel/RadioEdit.hpp	25;"	d
XCSOAR_RADIO_FREQUENCY_HPP	RadioFrequency.hpp	25;"	d
XCSOAR_RASP_MAP_ITEM_HPP	MapWindow/Items/RaspMapItem.hpp	25;"	d
XCSOAR_RASTERTILE_CACHE_HPP	Terrain/RasterTileCache.hpp	25;"	d
XCSOAR_RASTERTILE_HPP	Terrain/RasterTile.hpp	25;"	d
XCSOAR_RASTER_BUFFER_HPP	Terrain/RasterBuffer.hpp	25;"	d
XCSOAR_RASTER_RENDERER_HPP	Terrain/RasterRenderer.hpp	25;"	d
XCSOAR_RATE_LIMITED_BLACKBOARD_LISTENER_HPP	Blackboard/RateLimitedBlackboardListener.hpp	25;"	d
XCSOAR_RATE_LIMITER_HPP	RateLimiter.hpp	25;"	d
XCSOAR_REACH_RESULT_HPP	Engine/Route/ReachResult.hpp	25;"	d
XCSOAR_RENDER_OBSERVATION_ZONE_HPP	Renderer/OZRenderer.hpp	25;"	d
XCSOAR_RENDER_TASK_POINT_HPP	Renderer/TaskPointRenderer.hpp	25;"	d
XCSOAR_REPLAY_CLOCK_HPP	Time/ReplayClock.hpp	25;"	d
XCSOAR_REPLAY_DIALOG_HPP	Dialogs/ReplayDialog.hpp	25;"	d
XCSOAR_REPOSITORY_GLUE_HPP	Repository/Glue.hpp	25;"	d
XCSOAR_REPOSITORY_PARSER_HPP	Repository/Parser.hpp	25;"	d
XCSOAR_RESOURCE_ID_HPP	ResourceId.hpp	25;"	d
XCSOAR_RESOURCE_LOADER_HPP	ResourceLoader.hpp	25;"	d
XCSOAR_ROUGH_ALTITUDE_HPP	Rough/RoughAltitude.hpp	25;"	d
XCSOAR_ROUGH_ANGLE_HPP	Rough/RoughAngle.hpp	25;"	d
XCSOAR_ROUGH_DISTANCE_HPP	Rough/RoughDistance.hpp	25;"	d
XCSOAR_ROUGH_SPEED_HPP	Rough/RoughSpeed.hpp	25;"	d
XCSOAR_ROUGH_TIME_SPAN_HPP	Time/RoughTime.hpp	25;"	d
XCSOAR_ROUGH_VSPEED_HPP	Rough/RoughVSpeed.hpp	25;"	d
XCSOAR_ROUTE_COMPUTER_HPP	Computer/RouteComputer.hpp	25;"	d
XCSOAR_ROUTE_HPP	Engine/Route/Route.hpp	24;"	d
XCSOAR_ROUTE_PLANNER_CONFIG_HPP	Engine/Route/Config.hpp	24;"	d
XCSOAR_ROUTE_POINT_HPP	Engine/Route/Point.hpp	24;"	d
XCSOAR_ROUTE_PROFILE_HPP	Profile/RouteProfile.hpp	25;"	d
XCSOAR_ROW_FORM_WIDGET_HPP	Widget/RowFormWidget.hpp	25;"	d
XCSOAR_ROW_TWO_WIDGETS_HPP	Widget/TwoWidgets.hpp	25;"	d
XCSOAR_RULES_STATUS_PANEL_HPP	Dialogs/StatusPanels/RulesStatusPanel.hpp	25;"	d
XCSOAR_RUNWAY_HPP	Engine/Waypoint/Runway.hpp	24;"	d
XCSOAR_SCAN_BLUETOOTH_LE_DIALOG_HPP	Dialogs/Device/ScanBluetoothLeDialog.hpp	25;"	d
XCSOAR_SCOPE_CALCULATED_LISTENER_HPP	Blackboard/ScopeCalculatedListener.hpp	25;"	d
XCSOAR_SCOPE_GPS_LISTENER_HPP	Blackboard/ScopeGPSListener.hpp	25;"	d
XCSOAR_SCORING_CONFIG_PANEL_HPP	Dialogs/Settings/Panels/ScoringConfigPanel.hpp	25;"	d
XCSOAR_SCREEN_ACTIVE_PIXEL_TRAITS_HPP	Screen/Memory/ActivePixelTraits.hpp	25;"	d
XCSOAR_SCREEN_ANDROID_FEATURES_HPP	Screen/Android/Features.hpp	25;"	d
XCSOAR_SCREEN_ANTI_FLICKER_WINDOW_HXX	Screen/AntiFlickerWindow.hpp	25;"	d
XCSOAR_SCREEN_ANY_CANVAS_HPP	Screen/AnyCanvas.hpp	25;"	d
XCSOAR_SCREEN_APPLE_IMAGEDECODER_HPP	Screen/Apple/ImageDecoder.hpp	25;"	d
XCSOAR_SCREEN_BITMAP_HPP	Screen/Bitmap.hpp	25;"	d
XCSOAR_SCREEN_BRUSH_HPP	Screen/Brush.hpp	25;"	d
XCSOAR_SCREEN_BUFFER_CANVAS_HPP	Screen/BufferCanvas.hpp	25;"	d
XCSOAR_SCREEN_BUFFER_HPP	Screen/Memory/Buffer.hpp	25;"	d
XCSOAR_SCREEN_BUFFER_WINDOW_HXX	Screen/BufferWindow.hpp	25;"	d
XCSOAR_SCREEN_BULK_POINT_HPP	Screen/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_BUSY_HPP	Screen/Busy.hpp	25;"	d
XCSOAR_SCREEN_CANVAS_HPP	Screen/Canvas.hpp	25;"	d
XCSOAR_SCREEN_COLOR_HPP	Screen/Color.hpp	25;"	d
XCSOAR_SCREEN_CONTAINER_WINDOW_HXX	Screen/ContainerWindow.hpp	25;"	d
XCSOAR_SCREEN_CUSTOM_FILES_HPP	Screen/Custom/Files.hpp	25;"	d
XCSOAR_SCREEN_DEBUG_HPP	Screen/Debug.hpp	25;"	d
XCSOAR_SCREEN_DITHER_HPP	Screen/Memory/Dither.hpp	25;"	d
XCSOAR_SCREEN_DOUBLE_BUFFER_WINDOW_HXX	Screen/DoubleBufferWindow.hpp	25;"	d
XCSOAR_SCREEN_DOUBLE_CLICK_HPP	Screen/Custom/DoubleClick.hpp	25;"	d
XCSOAR_SCREEN_EGL_SYSTEM_HPP	Screen/EGL/System.hpp	25;"	d
XCSOAR_SCREEN_FAKE_BUFFER_WINDOW_HXX	Screen/FakeBufferWindow.hpp	25;"	d
XCSOAR_SCREEN_FEATURES_HPP	Screen/Features.hpp	25;"	d
XCSOAR_SCREEN_FONT_HPP	Screen/Font.hpp	25;"	d
XCSOAR_SCREEN_FREETYPE_INIT_HPP	Screen/FreeType/Init.hpp	25;"	d
XCSOAR_SCREEN_GDI_ALPHA_BLEND_HPP	Screen/GDI/AlphaBlend.hpp	25;"	d
XCSOAR_SCREEN_GDI_BUFFER_CANVAS_HPP	Screen/GDI/BufferCanvas.hpp	25;"	d
XCSOAR_SCREEN_GDI_BULK_POINT_HPP	Screen/GDI/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_GDI_CANVAS_HPP	Screen/GDI/Canvas.hpp	25;"	d
XCSOAR_SCREEN_GDI_COLOR_HPP	Screen/GDI/Color.hpp	25;"	d
XCSOAR_SCREEN_GDI_FEATURES_HPP	Screen/GDI/Features.hpp	25;"	d
XCSOAR_SCREEN_GDI_PAINT_CANVAS_HPP	Screen/GDI/PaintCanvas.hpp	25;"	d
XCSOAR_SCREEN_GLX_SYSTEM_HPP	Screen/GLX/System.hpp	25;"	d
XCSOAR_SCREEN_ICON_HPP	Screen/Icon.hpp	25;"	d
XCSOAR_SCREEN_INIT_HPP	Screen/Init.hpp	25;"	d
XCSOAR_SCREEN_LARGE_TEXT_WINDOW_HPP	Screen/LargeTextWindow.hpp	25;"	d
XCSOAR_SCREEN_LAYOUT_HPP	Screen/Layout.hpp	25;"	d
XCSOAR_SCREEN_LAZY_PAINT_WINDOW_HXX	Screen/LazyPaintWindow.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_CANVAS_HPP	Screen/Memory/Canvas.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_COLOR_HPP	Screen/Memory/Color.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_EXPORT_HPP	Screen/Memory/Export.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_FEATURES_HPP	Screen/Memory/Features.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_OPTIMISED_HPP	Screen/Memory/Optimised.hpp	25;"	d
XCSOAR_SCREEN_MEMORY_UNCOMPRESSED_IMAGE_HPP	Screen/Memory/UncompressedImage.hpp	25;"	d
XCSOAR_SCREEN_MMX_HPP	Screen/Memory/MMX.hpp	25;"	d
XCSOAR_SCREEN_NATIVE_WINDOW_HXX	Screen/NativeWindow.hpp	25;"	d
XCSOAR_SCREEN_NEON_HPP	Screen/Memory/NEON.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_ATTRIBUTE_HPP	Screen/OpenGL/Attribute.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BUFFER_CANVAS_HPP	Screen/OpenGL/BufferCanvas.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BUFFER_HPP	Screen/OpenGL/Buffer.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BULK_POINT_HPP	Screen/Memory/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_BULK_POINT_HPP	Screen/OpenGL/BulkPoint.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CACHE_HPP	Screen/Custom/Cache.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CANVAS_HPP	Screen/OpenGL/Canvas.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CANVAS_ROTATE_SHIFT_HPP	Screen/OpenGL/CanvasRotateShift.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_COLOR_HPP	Screen/OpenGL/Color.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_CONSTANT_ALPHA_HPP	Screen/OpenGL/ConstantAlpha.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_DEBUG_HPP	Screen/OpenGL/Debug.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_DYNAMIC_HPP	Screen/OpenGL/Dynamic.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_EXACT_PIXEL_POINT_HPP	Screen/OpenGL/ExactPixelPoint.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_EXTENSION_HPP	Screen/OpenGL/Extension.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_FEATURES_HPP	Screen/OpenGL/Features.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_FUNCTION_HPP	Screen/OpenGL/Function.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_GEO_HPP	Screen/OpenGL/Geo.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_GLOBALS_HPP	Screen/OpenGL/Globals.hpp	32;"	d
XCSOAR_SCREEN_OPENGL_INIT_HPP	Screen/OpenGL/Init.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_PROGRAM_HPP	Screen/OpenGL/Program.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_ROTATE_HPP	Screen/OpenGL/Rotate.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SCISSOR_HPP	Screen/OpenGL/Scissor.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SCOPE_HPP	Screen/OpenGL/Scope.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SHADERS_HPP	Screen/OpenGL/Shaders.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SHAPES_HPP	Screen/OpenGL/Shapes.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SURFACE_HPP	Screen/OpenGL/Surface.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SYSTEM_EXT_HPP	Screen/OpenGL/SystemExt.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_SYSTEM_HPP	Screen/OpenGL/System.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_TEXTURE_HPP	Screen/OpenGL/Texture.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_TRIANGULATE_HPP	Screen/OpenGL/Triangulate.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_TYPES_HPP	Screen/OpenGL/Types.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_VERTEX_ARRAY_HPP	Screen/OpenGL/VertexArray.hpp	25;"	d
XCSOAR_SCREEN_OPENGL_VERTEX_POINTER_HPP	Screen/OpenGL/VertexPointer.hpp	25;"	d
XCSOAR_SCREEN_PAINT_WINDOW_HXX	Screen/PaintWindow.hpp	25;"	d
XCSOAR_SCREEN_PEN_HPP	Screen/Pen.hpp	25;"	d
XCSOAR_SCREEN_PIXEL_OPERATIONS_HPP	Screen/Memory/PixelOperations.hpp	25;"	d
XCSOAR_SCREEN_PIXEL_TRAITS_HPP	Screen/Memory/PixelTraits.hpp	25;"	d
XCSOAR_SCREEN_POINT_HPP	Screen/Point.hpp	25;"	d
XCSOAR_SCREEN_PORTABLE_COLOR_HPP	Screen/PortableColor.hpp	25;"	d
XCSOAR_SCREEN_PROGRESS_BAR_HXX	Screen/ProgressBar.hpp	25;"	d
XCSOAR_SCREEN_PROGRESS_WINDOW_HXX	ProgressWindow.hpp	25;"	d
XCSOAR_SCREEN_RAMP_HPP	Screen/Ramp.hpp	25;"	d
XCSOAR_SCREEN_RASTER_CANVAS_HPP	Screen/Memory/RasterCanvas.hpp	25;"	d
XCSOAR_SCREEN_RAW_BITMAP_HPP	Screen/RawBitmap.hpp	12;"	d
XCSOAR_SCREEN_ROOT_DC_HXX	Screen/GDI/RootDC.hpp	25;"	d
XCSOAR_SCREEN_ROTATED_POLYGON_RENDERER_HPP	Renderer/RotatedPolygonRenderer.hpp	25;"	d
XCSOAR_SCREEN_SDL_FEATURES_HPP	Screen/SDL/Features.hpp	25;"	d
XCSOAR_SCREEN_SDL_REFERENCE_HPP	Screen/Custom/Reference.hpp	25;"	d
XCSOAR_SCREEN_SINGLE_WINDOW_HXX	Screen/SingleWindow.hpp	25;"	d
XCSOAR_SCREEN_STOP_WATCH_HPP	Screen/StopWatch.hpp	25;"	d
XCSOAR_SCREEN_SUB_CANVAS_HPP	Screen/SubCanvas.hpp	25;"	d
XCSOAR_SCREEN_TERMINAL_WINDOW_HPP	Screen/TerminalWindow.hpp	25;"	d
XCSOAR_SCREEN_TEXT_IN_BOX_HPP	Renderer/TextInBox.hpp	25;"	d
XCSOAR_SCREEN_TOP_CANVAS_HPP	Screen/Custom/TopCanvas.hpp	25;"	d
XCSOAR_SCREEN_TOP_WINDOW_HXX	Screen/TopWindow.hpp	25;"	d
XCSOAR_SCREEN_UTIL_HPP	Screen/Util.hpp	30;"	d
XCSOAR_SCREEN_VIRTUAL_CANVAS_HPP	Screen/VirtualCanvas.hpp	25;"	d
XCSOAR_SCREEN_WINDOW_CANVAS_HXX	Screen/WindowCanvas.hpp	25;"	d
XCSOAR_SCREEN_WINDOW_HPP	Screen/Window.hpp	25;"	d
XCSOAR_SCREEN_WINDOW_LIST_HPP	Screen/Custom/WList.hpp	25;"	d
XCSOAR_SECTOR_ZONE_EDIT_WIDGET_HPP	Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	25;"	d
XCSOAR_SELF_TIMING_KALMAN_FILTER_1D_HPP	Math/SelfTimingKalmanFilter1d.hpp	24;"	d
XCSOAR_SERIALISER_HPP	Cloud/Serialiser.hpp	25;"	d
XCSOAR_SERIAL_HPP	Util/Serial.hpp	25;"	d
XCSOAR_SETTINGS_BLACKBOARD_HPP	Blackboard/SettingsBlackboard.hpp	25;"	d
XCSOAR_SHOW_MENU_BUTTON_HPP	Menu/ShowMenuButton.hpp	25;"	d
XCSOAR_SIGNAL_LISTENER_HPP	IO/Async/SignalListener.hpp	25;"	d
XCSOAR_SIMULATOR_H	Simulator.hpp	25;"	d
XCSOAR_SIMULATOR_PROMPT_HPP	Dialogs/dlgSimulatorPrompt.hpp	25;"	d
XCSOAR_SIMULATOR_PROMPT_WINDOW_HPP	Dialogs/SimulatorPromptWindow.hpp	25;"	d
XCSOAR_SIZES_H	Sizes.h	2;"	d
XCSOAR_SMART_TASK_ADVANCE_HPP	Engine/Task/Ordered/SmartTaskAdvance.hpp	24;"	d
XCSOAR_SOCKET_OPTION_HPP	Net/Option.hpp	25;"	d
XCSOAR_SOLID_CONTAINER_WINDOW_HPP	Screen/SolidContainerWindow.hpp	25;"	d
XCSOAR_SOLID_WIDGET_HPP	Widget/SolidWidget.hpp	25;"	d
XCSOAR_SOLVER_RESULT_HPP	Engine/PathSolvers/SolverResult.hpp	25;"	d
XCSOAR_SOUND_SETTINGS_HPP	Audio/Settings.hpp	25;"	d
XCSOAR_SPEED_VECTOR_HPP	Geo/SpeedVector.hpp	26;"	d
XCSOAR_STANDARD_FONTS_HPP	Look/StandardFonts.hpp	25;"	d
XCSOAR_STARTUP_DIALOG_HPP	Dialogs/StartupDialog.hpp	25;"	d
XCSOAR_STARTUP_HPP	Startup.hpp	25;"	d
XCSOAR_START_CONSTRAINTS_HPP	Engine/Task/Ordered/StartConstraints.hpp	24;"	d
XCSOAR_START_STATS_HPP	Engine/Task/Stats/StartStats.hpp	24;"	d
XCSOAR_STATE_CLOCK_HPP	Computer/StateClock.hpp	25;"	d
XCSOAR_STATS_COMPUTER_HPP	Computer/StatsComputer.hpp	25;"	d
XCSOAR_STATUS_MESSAGE_H	StatusMessage.hpp	25;"	d
XCSOAR_STATUS_PANEL_HPP	Dialogs/StatusPanels/StatusPanel.hpp	25;"	d
XCSOAR_STRING_UTIL_HPP	Util/StringUtil.hpp	25;"	d
XCSOAR_SWITCH_STATE_HPP	NMEA/SwitchState.hpp	25;"	d
XCSOAR_SYMBOL_BUTTON_RENDERER_HPP	Renderer/SymbolButtonRenderer.hpp	25;"	d
XCSOAR_SYMBOL_RENDERER_HPP	Renderer/SymbolRenderer.hpp	25;"	d
XCSOAR_SYSTEM_PROFILE_HPP	Profile/SystemProfile.hpp	25;"	d
XCSOAR_SYSTEM_SETTINGS_HPP	SystemSettings.hpp	25;"	d
XCSOAR_SYSTEM_STATUS_PANEL_HPP	Dialogs/StatusPanels/SystemStatusPanel.hpp	25;"	d
XCSOAR_TAB_RENDERER_HPP	Renderer/TabRenderer.hpp	25;"	d
XCSOAR_TAB_WIDGET_HPP	Widget/TabWidget.hpp	25;"	d
XCSOAR_TARGET_MAP_WINDOW_HPP	MapWindow/TargetMapWindow.hpp	25;"	d
XCSOAR_TASK_ACCESSOR_HPP	Replay/TaskAccessor.hpp	24;"	d
XCSOAR_TASK_ACTIONS_PANEL_HPP	Dialogs/Task/Manager/TaskActionsPanel.hpp	25;"	d
XCSOAR_TASK_ADVANCE_MONITOR_HPP	Monitor/TaskAdvanceMonitor.hpp	25;"	d
XCSOAR_TASK_CLOSE_PANEL_HPP	Dialogs/Task/Manager/TaskClosePanel.hpp	25;"	d
XCSOAR_TASK_CONSTRAINTS_MONITOR_HPP	Monitor/TaskConstraintsMonitor.hpp	25;"	d
XCSOAR_TASK_EDIT_PANEL_HPP	Dialogs/Task/Manager/TaskEditPanel.hpp	25;"	d
XCSOAR_TASK_EVENT_OBSERVER_HPP	Input/TaskEventObserver.hpp	26;"	d
XCSOAR_TASK_FACTORY_CONSTRAINTS_HPP	Engine/Task/Factory/Constraints.hpp	25;"	d
XCSOAR_TASK_FACTORY_CREATE_HPP	Engine/Task/Factory/Create.hpp	25;"	d
XCSOAR_TASK_FILE_HPP	Task/TaskFile.hpp	24;"	d
XCSOAR_TASK_FILE_IGC_HPP	Task/TaskFileIGC.hpp	24;"	d
XCSOAR_TASK_FILE_SEEYOU_HPP	Task/TaskFileSeeYou.hpp	24;"	d
XCSOAR_TASK_FILE_XCSOAR_HPP	Task/TaskFileXCSoar.hpp	24;"	d
XCSOAR_TASK_LIST_PANEL_HPP	Dialogs/Task/Manager/TaskListPanel.hpp	25;"	d
XCSOAR_TASK_LOOK_HPP	Look/TaskLook.hpp	25;"	d
XCSOAR_TASK_MANAGER_INTERNAL_HPP	Dialogs/Task/Manager/Internal.hpp	25;"	d
XCSOAR_TASK_MAP_BUTTON_RENDERER_HPP	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	25;"	d
XCSOAR_TASK_MISC_PANEL_HPP	Dialogs/Task/Manager/TaskMiscPanel.hpp	25;"	d
XCSOAR_TASK_POINT_FACTORY_TYPE_HPP	Engine/Task/Factory/TaskPointFactoryType.hpp	24;"	d
XCSOAR_TASK_POINT_TYPE_HPP	Engine/Task/Points/Type.hpp	25;"	d
XCSOAR_TASK_PROFILE_HPP	Profile/TaskProfile.hpp	25;"	d
XCSOAR_TASK_PROPERTIES_PANEL_HPP	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	25;"	d
XCSOAR_TASK_RENDERER_HPP	Renderer/TaskRenderer.hpp	25;"	d
XCSOAR_TASK_STATS_COMPUTER_HPP	Engine/Task/Computer/TaskStatsComputer.hpp	24;"	d
XCSOAR_TASK_STATUS_PANEL_HPP	Dialogs/StatusPanels/TaskStatusPanel.hpp	25;"	d
XCSOAR_TASK_TYPE_HPP	Engine/Task/TaskType.hpp	24;"	d
XCSOAR_TASK_TYPE_STRINGS_HPP	Task/TypeStrings.hpp	25;"	d
XCSOAR_TASK_VALIDATION_ERROR_HPP	Engine/Task/Factory/ValidationError.hpp	25;"	d
XCSOAR_TASK_VALIDATION_ERROR_STRINGS_HPP	Task/ValidationErrorStrings.hpp	25;"	d
XCSOAR_TASK_VARIO_COMPUTER_HPP	Engine/Task/Computer/TaskVarioComputer.hpp	24;"	d
XCSOAR_TASK_VIEW_HPP	Gauge/TaskView.hpp	25;"	d
XCSOAR_TEAM_ACTIONS_HPP	TeamActions.hpp	25;"	d
XCSOAR_TEAM_CODE_CALCULATION_HPP	TeamCode/TeamCode.hpp	25;"	d
XCSOAR_TEAM_CODE_SETTINGS_HPP	TeamCode/Settings.hpp	25;"	d
XCSOAR_TERMINAL_LOOK_HPP	Look/TerminalLook.hpp	25;"	d
XCSOAR_TERRAIN_HEIGHT_HPP	Terrain/Height.hpp	25;"	d
XCSOAR_TERRAIN_HEIGHT_MATRIX_HPP	Terrain/HeightMatrix.hpp	25;"	d
XCSOAR_TERRAIN_LOADER_HPP	Terrain/Loader.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_LOCATION_HPP	Terrain/RasterLocation.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_MAP_HPP	Terrain/RasterMap.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_PROJECTION_HPP	Terrain/RasterProjection.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_TERRAIN_HPP	Terrain/RasterTerrain.hpp	25;"	d
XCSOAR_TERRAIN_RASTER_TRAITS_HPP	Terrain/RasterTraits.hpp	25;"	d
XCSOAR_TERRAIN_RENDERER_HPP	Terrain/TerrainRenderer.hpp	25;"	d
XCSOAR_TERRAIN_SETTINGS_HPP	Terrain/TerrainSettings.hpp	25;"	d
XCSOAR_TERRAIN_THREAD_HPP	Terrain/Thread.hpp	25;"	d
XCSOAR_TERRAIN_WORLD_FILE_HPP	Terrain/WorldFile.hpp	25;"	d
XCSOAR_TERRAIN_ZZIP_STREAM_HPP	Terrain/ZzipStream.hpp	25;"	d
XCSOAR_TEXT_BUTTON_RENDERER_HPP	Renderer/TextButtonRenderer.hpp	25;"	d
XCSOAR_TEXT_LIST_WIDGET_HPP	Widget/TextListWidget.hpp	25;"	d
XCSOAR_TEXT_RENDERER_HPP	Renderer/TextRenderer.hpp	25;"	d
XCSOAR_TEXT_ROW_RENDERER_HPP	Renderer/TextRowRenderer.hpp	25;"	d
XCSOAR_TEXT_WIDGET_HPP	Widget/TextWidget.hpp	25;"	d
XCSOAR_THERMALEXPRESS_DRIVER_HPP	Device/Driver/ThermalExpress/Driver.hpp	20;"	d
XCSOAR_THERMAL_BAND_COMPUTER_HPP	Computer/ThermalBandComputer.hpp	25;"	d
XCSOAR_THREAD_DEBUG_HXX	Thread/Debug.hpp	25;"	d
XCSOAR_THREAD_GUARD_HPP	Thread/Guard.hpp	24;"	d
XCSOAR_THREAD_HANDLE_HPP	Thread/Handle.hpp	25;"	d
XCSOAR_THREAD_NAME_HPP	Thread/Name.hpp	25;"	d
XCSOAR_THREAD_OPERATION_HPP	Operation/ThreadedOperationEnvironment.hpp	25;"	d
XCSOAR_THREAD_RECURSIVELY_SUSPENSIBLE_THREAD_HPP	Thread/RecursivelySuspensibleThread.hpp	25;"	d
XCSOAR_THREAD_SHARED_MUTEX_HXX	Thread/SharedMutex.hpp	25;"	d
XCSOAR_THREAD_STANDBY_THREAD_HPP	Thread/StandbyThread.hpp	25;"	d
XCSOAR_THREAD_STOPPABLE_THREAD_HPP	Thread/StoppableThread.hpp	25;"	d
XCSOAR_THREAD_SUSPENSIBLE_THREAD_HPP	Thread/SuspensibleThread.hpp	25;"	d
XCSOAR_THREAD_THREAD_HPP	Thread/Thread.hpp	25;"	d
XCSOAR_THREAD_TRIGGER_HXX	Thread/Trigger.hpp	25;"	d
XCSOAR_THREAD_WORKER_THREAD_HPP	Thread/WorkerThread.hpp	25;"	d
XCSOAR_TIMEOUT_CLOCK_HPP	Time/TimeoutClock.hpp	25;"	d
XCSOAR_TIMES_STATUS_PANEL_HPP	Dialogs/StatusPanels/TimesStatusPanel.hpp	25;"	d
XCSOAR_TIME_FORMATTER_HPP	Formatter/TimeFormatter.hpp	25;"	d
XCSOAR_TOPOGRAPHY_LOOK_HPP	Look/TopographyLook.hpp	25;"	d
XCSOAR_TOPOGRAPHY_THREAD_HPP	Topography/Thread.hpp	25;"	d
XCSOAR_TRACE_COMPUTER_HPP	Computer/TraceComputer.hpp	25;"	d
XCSOAR_TRACE_VECTOR_HPP	Engine/Trace/Vector.hpp	25;"	d
XCSOAR_TRACKING_CLOUD_SETTINGS_HPP	Tracking/SkyLines/CloudSettings.hpp	25;"	d
XCSOAR_TRACKING_FEATURES_HPP	Tracking/Features.hpp	25;"	d
XCSOAR_TRACKING_LIVETRACK24_SETTINGS_HPP	Tracking/LiveTrack24/Settings.hpp	25;"	d
XCSOAR_TRACKING_PROFILE_HPP	Profile/TrackingProfile.hpp	25;"	d
XCSOAR_TRACKING_SETTINGS_HPP	Tracking/TrackingSettings.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_ASSEMBLE_HPP	Tracking/SkyLines/Assemble.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_CLIENT_HPP	Tracking/SkyLines/Client.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_EXPORT_HPP	Tracking/SkyLines/Export.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_FEATURES_HPP	Tracking/SkyLines/Features.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_GLUE_HPP	Tracking/SkyLines/Glue.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_HANDLER_HPP	Tracking/SkyLines/Handler.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_IMPORT_HPP	Tracking/SkyLines/Import.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_KEY_HPP	Tracking/SkyLines/Key.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_PROTOCOL_HPP	Tracking/SkyLines/Protocol.hpp	33;"	d
XCSOAR_TRACKING_SKYLINES_QUEUE_HPP	Tracking/SkyLines/Queue.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_SERVER_HPP	Tracking/SkyLines/Server.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_SETTINGS_HPP	Tracking/SkyLines/Settings.hpp	25;"	d
XCSOAR_TRACKING_SKYLINES_TRAFFIC_HPP	Tracking/SkyLines/Data.hpp	25;"	d
XCSOAR_TRACK_LINE_RENDERER_HPP	Renderer/TrackLineRenderer.hpp	25;"	d
XCSOAR_TRACK_THREAD_HPP	Tracking/TrackingGlue.hpp	25;"	d
XCSOAR_TRAFFIC_DATABASES_HPP	FLARM/TrafficDatabases.hpp	25;"	d
XCSOAR_TRAFFIC_LOOK_HPP	Look/TrafficLook.hpp	25;"	d
XCSOAR_TRAFFIC_RENDERER_HPP	Renderer/TrafficRenderer.hpp	25;"	d
XCSOAR_TRAFFIC_SETTINGS_HPP	Gauge/TrafficSettings.hpp	25;"	d
XCSOAR_TRAFFIC_WIDGET_HPP	Gauge/BigTrafficWidget.hpp	25;"	d
XCSOAR_TRAIL_LOOK_HPP	Look/TrailLook.hpp	25;"	d
XCSOAR_TRAIL_RENDERER_HPP	Renderer/TrailRenderer.hpp	25;"	d
XCSOAR_TRI_STATE_JOB_HPP	Job/TriStateJob.hpp	25;"	d
XCSOAR_TRUNCATE_STRING_HPP	Util/TruncateString.hpp	25;"	d
XCSOAR_TWO_TEXT_ROWS_RENDERER_HPP	Renderer/TwoTextRowsRenderer.hpp	25;"	d
XCSOAR_UI_ACTIONS_HPP	UIActions.hpp	25;"	d
XCSOAR_UI_GLOBALS_HPP	UIGlobals.hpp	25;"	d
XCSOAR_UI_PROFILE_HPP	Profile/UIProfile.hpp	25;"	d
XCSOAR_UI_RECEIVE_BLACKBOARD_HPP	UIReceiveBlackboard.hpp	25;"	d
XCSOAR_UI_SETTINGS_HPP	UISettings.hpp	25;"	d
XCSOAR_UI_STATE_HPP	UIState.hpp	25;"	d
XCSOAR_UNCOMPRESSED_IMAGE_HPP	Screen/Custom/UncompressedImage.hpp	25;"	d
XCSOAR_UNITS_DESCRIPTOR_HPP	Units/Descriptor.hpp	25;"	d
XCSOAR_UNITS_FORMATTER_HPP	Formatter/Units.hpp	25;"	d
XCSOAR_UNITS_GLUE_HPP	Units/UnitsGlue.hpp	25;"	d
XCSOAR_UNITS_GROUP_HPP	Units/Group.hpp	25;"	d
XCSOAR_UNITS_HPP	Units/Units.hpp	25;"	d
XCSOAR_UNITS_SETTINGS_HPP	Units/Settings.hpp	25;"	d
XCSOAR_UNITS_STORE_HPP	Units/UnitsStore.hpp	25;"	d
XCSOAR_UNITS_SYSTEM_HPP	Units/System.hpp	25;"	d
XCSOAR_UNITS_UNIT_HPP	Units/Unit.hpp	25;"	d
XCSOAR_UNIT_SYMBOL_RENDERER_HPP	Renderer/UnitSymbolRenderer.hpp	25;"	d
XCSOAR_USER_GEOPOINT_FORMATTER_HPP	Formatter/UserGeoPointFormatter.hpp	25;"	d
XCSOAR_USER_UNITS_FORMATTER_HPP	Formatter/UserUnits.hpp	25;"	d
XCSOAR_UTILS_FLARM_HPP	FLARM/FlarmDetails.hpp	24;"	d
XCSOAR_UTILS_PROFILE_HPP	Profile/ProfileKeys.hpp	25;"	d
XCSOAR_UTILS_SETTINGS_HPP	UtilsSettings.hpp	25;"	d
XCSOAR_UTILS_SYSTEM_H	UtilsSystem.hpp	24;"	d
XCSOAR_UTIL_ESCAPE_BACKSLASH_HPP	Util/EscapeBackslash.hpp	25;"	d
XCSOAR_UTIL_UTF8_HPP	Util/UTF8.hpp	25;"	d
XCSOAR_V7_CONFIG_WIDGET_HPP	Dialogs/Device/LX/V7ConfigWidget.hpp	25;"	d
XCSOAR_VALIDITY_HPP	NMEA/Validity.hpp	25;"	d
XCSOAR_VARIO_BAR_LOOK_HPP	Look/VarioBarLook.hpp	25;"	d
XCSOAR_VARIO_BAR_RENDERER_HPP	Renderer/VarioBarRenderer.hpp	25;"	d
XCSOAR_VARIO_INFO_HPP	NMEA/VarioInfo.hpp	25;"	d
XCSOAR_VARIO_LOOK_HPP	Look/VarioLook.hpp	25;"	d
XCSOAR_VARIO_SETTINGS_HPP	Gauge/VarioSettings.hpp	25;"	d
XCSOAR_VARIO_SOUND_SETTINGS_HPP	Audio/VarioSettings.hpp	25;"	d
XCSOAR_VEGA_ALERT_PARAMETERS_HPP	Dialogs/Device/Vega/AlertParameters.hpp	25;"	d
XCSOAR_VEGA_AUDIO_DEADBAND_PARAMETERS	Dialogs/Device/Vega/AudioDeadbandParameters.hpp	25;"	d
XCSOAR_VEGA_AUDIO_MODE_PARAMETERS	Dialogs/Device/Vega/AudioModeParameters.hpp	25;"	d
XCSOAR_VEGA_AUDIO_PARAMETERS	Dialogs/Device/Vega/AudioParameters.hpp	25;"	d
XCSOAR_VEGA_CALIBRATION_PARAMETERS	Dialogs/Device/Vega/CalibrationParameters.hpp	25;"	d
XCSOAR_VEGA_DISPLAY_PARAMETERS_HPP	Dialogs/Device/Vega/DisplayParameters.hpp	25;"	d
XCSOAR_VEGA_FLARM_ALERT_PARAMETERS_HPP	Dialogs/Device/Vega/FlarmAlertParameters.hpp	25;"	d
XCSOAR_VEGA_FLARM_ID_PARAMETERS_HPP	Dialogs/Device/Vega/FlarmIdentificationParameters.hpp	25;"	d
XCSOAR_VEGA_FLARM_REPEAT_PARAMETERS_HPP	Dialogs/Device/Vega/FlarmRepeatParameters.hpp	25;"	d
XCSOAR_VEGA_HARDWARE_PARAMETERS_HPP	Dialogs/Device/Vega/HardwareParameters.hpp	25;"	d
XCSOAR_VEGA_INTERNAL_HPP	Device/Driver/Vega/Internal.hpp	25;"	d
XCSOAR_VEGA_LIMIT_PARAMETERS_HPP	Dialogs/Device/Vega/LimitParameters.hpp	25;"	d
XCSOAR_VEGA_LOGGER_PARAMETERS_HPP	Dialogs/Device/Vega/LoggerParameters.hpp	25;"	d
XCSOAR_VEGA_MIXER_PARAMETERS_HPP	Dialogs/Device/Vega/MixerParameters.hpp	25;"	d
XCSOAR_VEGA_PARAMETERS_WIDGET_HPP	Dialogs/Device/Vega/VegaParametersWidget.hpp	25;"	d
XCSOAR_VEGA_SCHEMES_HPP	Dialogs/Device/Vega/Schemes.hpp	25;"	d
XCSOAR_VEGA_SWITCHES_DIALOG_HPP	Dialogs/Device/Vega/SwitchesDialog.hpp	25;"	d
XCSOAR_VEGA_SWITCH_STATE_HPP	NMEA/VegaSwitchState.hpp	25;"	d
XCSOAR_VEGA_TYPES_HPP	Dialogs/Device/Vega/Types.hpp	25;"	d
XCSOAR_VEGA_VOLATILE_HPP	Device/Driver/Vega/Volatile.hpp	25;"	d
XCSOAR_VERBOSE_OPERATION_HPP	Operation/VerboseOperationEnvironment.hpp	25;"	d
XCSOAR_VERSION_HPP	Version.hpp	25;"	d
XCSOAR_VERSION_INFO_H	NMEA/DeviceInfo.hpp	25;"	d
XCSOAR_VIEW_IMAGE_WIDGET_HPP	Widget/ViewImageWidget.hpp	25;"	d
XCSOAR_VOLKSLOGGER_UTIL_HPP	Device/Driver/Volkslogger/Util.hpp	25;"	d
XCSOAR_WARNING_COMPUTER_HPP	Computer/WarningComputer.hpp	25;"	d
XCSOAR_WAVE_COMPUTER_HPP	Computer/WaveComputer.hpp	25;"	d
XCSOAR_WAVE_LOOK_HPP	Look/WaveLook.hpp	25;"	d
XCSOAR_WAVE_RENDERER_HPP	Renderer/WaveRenderer.hpp	25;"	d
XCSOAR_WAVE_RESULT_HPP	Computer/WaveResult.hpp	25;"	d
XCSOAR_WAVE_SETTINGS_HPP	Computer/WaveSettings.hpp	25;"	d
XCSOAR_WAYPOINT_COMMANDS_WIDGET_HPP	Dialogs/Waypoint/WaypointCommandsWidget.hpp	25;"	d
XCSOAR_WAYPOINT_ICON_RENDERER_HPP	Renderer/WaypointIconRenderer.hpp	25;"	d
XCSOAR_WAYPOINT_INFO_WIDGET_HPP	Dialogs/Waypoint/WaypointInfoWidget.hpp	25;"	d
XCSOAR_WAYPOINT_LABEL_LIST_HPP	Renderer/WaypointLabelList.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_BUILDER_HPP	Waypoint/WaypointListBuilder.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_FILTER_HPP	Waypoint/WaypointFilter.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_HPP	Waypoint/WaypointList.hpp	25;"	d
XCSOAR_WAYPOINT_LIST_RENDERER_HPP	Renderer/WaypointListRenderer.hpp	25;"	d
XCSOAR_WAYPOINT_PATTERNS_HPP	Waypoint/Patterns.hpp	25;"	d
XCSOAR_WAYPOINT_RENDERER_SETTINGS_HPP	Renderer/WaypointRendererSettings.hpp	25;"	d
XCSOAR_WAY_POINT_GLUE_HPP	Waypoint/WaypointGlue.hpp	25;"	d
XCSOAR_WAY_POINT_RENDERER_HPP	Renderer/WaypointRenderer.hpp	25;"	d
XCSOAR_WEATHER_PCMET_SETTINGS_HPP	Weather/PCMet/Settings.hpp	25;"	d
XCSOAR_WEATHER_PROFILE_HPP	Profile/WeatherProfile.hpp	25;"	d
XCSOAR_WEATHER_RASP_CACHE_HPP	Weather/Rasp/RaspCache.hpp	25;"	d
XCSOAR_WEATHER_RASP_PROVIDERS_HPP	Weather/Rasp/Providers.hpp	25;"	d
XCSOAR_WEATHER_RASP_RENDERER_HPP	Weather/Rasp/RaspRenderer.hpp	25;"	d
XCSOAR_WEATHER_RASP_STORE_HPP	Weather/Rasp/RaspStore.hpp	25;"	d
XCSOAR_WEATHER_RASP_STYLE_HPP	Weather/Rasp/RaspStyle.hpp	25;"	d
XCSOAR_WEATHER_SETTINGS_HPP	Weather/Settings.hpp	25;"	d
XCSOAR_WEATHER_UI_STATE_HPP	Weather/WeatherUIState.hpp	25;"	d
XCSOAR_WIDGET_DIALOG_HPP	Dialogs/WidgetDialog.hpp	25;"	d
XCSOAR_WIDGET_HPP	Widget/Widget.hpp	25;"	d
XCSOAR_WINDOW_PROJECTION_HPP	Projection/WindowProjection.hpp	25;"	d
XCSOAR_WINDOW_STATS_COMPUTER_HPP	Engine/Task/Computer/WindowStatsComputer.hpp	24;"	d
XCSOAR_WINDOW_STATS_HPP	Engine/Task/Stats/WindowStats.hpp	24;"	d
XCSOAR_WINDOW_WIDGET_HPP	Widget/WindowWidget.hpp	25;"	d
XCSOAR_WIND_ARROW_LOOK_HPP	Look/WindArrowLook.hpp	25;"	d
XCSOAR_WIND_ARROW_RENDERER_HPP	Renderer/WindArrowRenderer.hpp	25;"	d
XCSOAR_WIND_CHART_RENDERER_HPP	Renderer/WindChartRenderer.hpp	25;"	d
XCSOAR_WIND_COMPUTER_HPP	Computer/Wind/Computer.hpp	25;"	d
XCSOAR_WIND_EDIT_PANEL_HPP	InfoBoxes/Panel/WindEdit.hpp	25;"	d
XCSOAR_WIND_MEASUREMENT_LIST_HPP	Computer/Wind/MeasurementList.hpp	25;"	d
XCSOAR_WIND_MONITOR_HPP	Monitor/WindMonitor.hpp	25;"	d
XCSOAR_WIND_SETTINGS_HPP	Computer/Wind/Settings.hpp	25;"	d
XCSOAR_WIND_SETTINGS_PANEL_HPP	Dialogs/Settings/WindSettingsPanel.hpp	25;"	d
XCSOAR_WIND_STORE_HPP	Computer/Wind/Store.hpp	25;"	d
XCSOAR_WRAP_CLOCK_HPP	Time/WrapClock.hpp	25;"	d
XCSOAR_XCTRACERVARIO_INTERNAL_HPP	Device/Driver/XCTracer/Internal.hpp	25;"	d
XCSOAR_XML_NODE_HPP	XML/Node.hpp	30;"	d
XCSOAR_XML_PARSER_HPP	XML/Parser.hpp	30;"	d
XCSPROFILE	Profile/Profile.cpp	41;"	d	file:
XCSoarInterface	ActionInterface.hpp	/^namespace XCSoarInterface {$/;"	n
XCSoar_ProductToken	Version.cpp	/^const TCHAR XCSoar_ProductToken[] = _T("XCSoar v" VERSION VERSION_SUFFIX "-" TARGET GIT_SUFFIX);$/;"	v
XCSoar_Version	Version.cpp	/^const TCHAR XCSoar_Version[] = _T(VERSION);$/;"	v
XCSoar_VersionLong	Version.cpp	/^const TCHAR XCSoar_VersionLong[] = _T(VERSION VERSION_SUFFIX);$/;"	v
XCSoar_VersionString	Version.cpp	/^const TCHAR XCSoar_VersionString[] = _T(VERSION VERSION_SUFFIX "-" TARGET);$/;"	v
XCSoar_VersionStringOld	Version.cpp	/^const TCHAR XCSoar_VersionStringOld[] = _T(TARGET " " VERSION VERSION_SUFFIX " " __DATE__);$/;"	v
XCTRC	Device/Driver/XCTracer/Parser.cpp	/^XCTracerDevice::XCTRC(NMEAInputLine &line, NMEAInfo &info)$/;"	f	class:XCTracerDevice
XCTracerCreateOnPort	Device/Driver/XCTracer/Register.cpp	/^XCTracerCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
XContestFree	Engine/Contest/Solvers/XContestFree.hpp	/^class XContestFree : public ContestDijkstra {$/;"	c
XContestTriangle	Engine/Contest/Solvers/XContestTriangle.hpp	/^class XContestTriangle : public TriangleContest {$/;"	c
XML	XML/Parser.cpp	/^namespace XML {$/;"	n	file:
XML	XML/Parser.hpp	/^namespace XML {$/;"	n
XMLNode	XML/Node.cpp	/^XMLNode::XMLNode(const TCHAR *name, bool is_declaration)$/;"	f	class:XMLNode
XMLNode	XML/Node.cpp	/^XMLNode::XMLNode(const TCHAR *name, size_t name_length, bool is_declaration)$/;"	f	class:XMLNode
XMLNode	XML/Node.hpp	/^  XMLNode(): d(nullptr) {}$/;"	f	class:XMLNode
XMLNode	XML/Node.hpp	/^  XMLNode(XMLNode &&other)$/;"	f	class:XMLNode
XMLNode	XML/Node.hpp	/^class XMLNode {$/;"	c
XShape	Topography/XShape.cpp	/^XShape::XShape(shapefileObj *shpfile, const GeoPoint &file_center, int i,$/;"	f	class:XShape
XShape	Topography/XShape.hpp	/^class XShape {$/;"	c
XYDataStore	Math/XYDataStore.hpp	/^class XYDataStore$/;"	c
XYToIndex	Engine/Route/RouteLink.cpp	/^XYToIndex(double x, double y)$/;"	f	file:
X_AVERAGE	Dialogs/Device/Vega/Types.hpp	30;"	d
X_MACCREADY	Dialogs/Device/Vega/Types.hpp	29;"	d
X_NONE	Dialogs/Device/Vega/Types.hpp	28;"	d
YAtX	Terrain/ScanLine.cpp	/^YAtX(const GridRay &ray, int x)$/;"	f	file:
YELLOW	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^    YELLOW,$/;"	e	enum:final::Buttons	file:
YELLOW	FLARM/Color.hpp	/^  YELLOW,$/;"	m	class:FlarmColor
YOFFSET	Gauge/GaugeVario.hpp	/^  static constexpr int YOFFSET = 36;$/;"	m	class:GaugeVario
Y_GROSS_ZERO	Dialogs/Device/Vega/Types.hpp	36;"	d
Y_NET_MACCREADY	Dialogs/Device/Vega/Types.hpp	39;"	d
Y_NET_MACCREADY_HALF	Dialogs/Device/Vega/Types.hpp	37;"	d
Y_NONE	Dialogs/Device/Vega/Types.hpp	33;"	d
Y_RELATIVE_MACCREADY	Dialogs/Device/Vega/Types.hpp	38;"	d
Y_RELATIVE_MACCREADY_HALF	Dialogs/Device/Vega/Types.hpp	35;"	d
Y_RELATIVE_ZERO	Dialogs/Device/Vega/Types.hpp	34;"	d
ZANDER	Waypoint/WaypointFileType.hpp	/^  ZANDER,$/;"	m	class:WaypointFileType
ZERO_FINDER_HPP	Math/ZeroFinder.hpp	24;"	d
ZERO_FREQUENCY	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  ZERO_FREQUENCY,$/;"	e	enum:ControlIndex	file:
ZEXPORT	zzip/conf.h	246;"	d
ZEXTERN	zzip/conf.h	247;"	d
ZLIB_ERROR_HXX	IO/ZlibError.hxx	31;"	d
ZOOM_IN	Gauge/BigTrafficWidget.hpp	/^    ZOOM_IN,$/;"	e	enum:TrafficWidget::Action
ZOOM_OUT	Gauge/BigTrafficWidget.hpp	/^    ZOOM_OUT,$/;"	e	enum:TrafficWidget::Action
ZZIP_32K	zzip/lib.h	67;"	d
ZZIP_ALLOWREAL	zzip/zzip.h	57;"	d
ZZIP_BACKSLASH_DIRSEP	zzip/file.c	107;"	d	file:
ZZIP_BACKSLASH_DIRSEP	zzip/file.c	109;"	d	file:
ZZIP_BACKSLASH_DIRSEP	zzip/file.c	111;"	d	file:
ZZIP_BRANCH_OVER	zzip/__hints.h	189;"	d
ZZIP_BRANCH_OVER	zzip/__hints.h	191;"	d
ZZIP_BUFSIZ	zzip/zip.c	163;"	d	file:
ZZIP_BUFSIZ	zzip/zip.c	168;"	d	file:
ZZIP_BYTE_ORDER	zzip/autoconf.h	20;"	d
ZZIP_BYTE_ORDER	zzip/autoconf.h	22;"	d
ZZIP_BYTE_ORDER	zzip/autoconf.h	24;"	d
ZZIP_BYTE_ORDER	zzip/autoconf.h	26;"	d
ZZIP_BYTE_ORDER	zzip/autoconf.h	28;"	d
ZZIP_BYTE_ORDER	zzip/autoconf.h	30;"	d
ZZIP_BYTE_ORDER	zzip/autoconf.h	32;"	d
ZZIP_CASEINSENSITIVE	zzip/zzip.h	47;"	d
ZZIP_CASELESS	zzip/zzip.h	52;"	d
ZZIP_CHECKMAGIC	zzip/format.h	50;"	d
ZZIP_CORRECT_ROOTSEEK	zzip/zip.c	32;"	d	file:
ZZIP_CORRUPTED	zzip/zzip.h	/^    ZZIP_CORRUPTED =     ZZIP_ERROR-31,$/;"	e	enum:__anon214
ZZIP_DEFLATED_LOW_COMPR	zzip/format.h	218;"	d
ZZIP_DEFLATED_MAX_COMPR	zzip/format.h	217;"	d
ZZIP_DEFLATED_MIN_COMPR	zzip/format.h	219;"	d
ZZIP_DEFLATED_STD_COMPR	zzip/format.h	216;"	d
ZZIP_DIM	zzip/__hints.h	174;"	d
ZZIP_DIR	zzip/zzip.h	/^typedef struct zzip_dir		ZZIP_DIR;$/;"	t	typeref:struct:zzip_dir
ZZIP_DIRENT	zzip/zzip.h	/^typedef struct zzip_dirent 	ZZIP_DIRENT;$/;"	t	typeref:struct:zzip_dirent
ZZIP_DIRSIZE	zzip/zzip.h	/^    ZZIP_DIRSIZE =       ZZIP_ERROR-27,$/;"	e	enum:__anon214
ZZIP_DIR_EDH_MISSING	zzip/zzip.h	/^    ZZIP_DIR_EDH_MISSING = ZZIP_ERROR-26,$/;"	e	enum:__anon214
ZZIP_DIR_LARGEFILE	zzip/zzip.h	/^    ZZIP_DIR_LARGEFILE = ZZIP_ERROR-33$/;"	e	enum:__anon214
ZZIP_DIR_OPEN	zzip/zzip.h	/^    ZZIP_DIR_OPEN =      ZZIP_ERROR-21, \/* failed to open zipfile, see errno for details *\/$/;"	e	enum:__anon214
ZZIP_DIR_READ	zzip/zzip.h	/^    ZZIP_DIR_READ =      ZZIP_ERROR-24, \/* failed to read zipfile, see errno for details *\/$/;"	e	enum:__anon214
ZZIP_DIR_SEEK	zzip/zzip.h	/^    ZZIP_DIR_SEEK =      ZZIP_ERROR-23, \/* failed to lseek zipfile, see errno for details *\/$/;"	e	enum:__anon214
ZZIP_DIR_STAT	zzip/zzip.h	/^    ZZIP_DIR_STAT =      ZZIP_ERROR-22, \/* failed to fstat zipfile, see errno for details *\/$/;"	e	enum:__anon214
ZZIP_DIR_TOO_SHORT	zzip/zzip.h	/^    ZZIP_DIR_TOO_SHORT = ZZIP_ERROR-25,$/;"	e	enum:__anon214
ZZIP_DISK64_TRAILER	zzip/types.h	/^typedef struct zzip_disk64_trailer ZZIP_DISK64_TRAILER;$/;"	t	typeref:struct:zzip_disk64_trailer
ZZIP_DISK64_TRAILER	zzip/zip.c	44;"	d	file:
ZZIP_DISK64_TRAILER_CHECKMAGIC	zzip/format.h	180;"	d
ZZIP_DISK64_TRAILER_MAGIC	zzip/format.h	179;"	d
ZZIP_DISK_ENTRY	zzip/types.h	/^typedef struct zzip_disk_entry  ZZIP_DISK_ENTRY;$/;"	t	typeref:struct:zzip_disk_entry
ZZIP_DISK_ENTRY_CHECKMAGIC	zzip/format.h	103;"	d
ZZIP_DISK_ENTRY_MAGIC	zzip/format.h	102;"	d
ZZIP_DISK_TRAILER	zzip/types.h	/^typedef struct zzip_disk_trailer ZZIP_DISK_TRAILER;$/;"	t	typeref:struct:zzip_disk_trailer
ZZIP_DISK_TRAILER_CHECKMAGIC	zzip/format.h	154;"	d
ZZIP_DISK_TRAILER_MAGIC	zzip/format.h	153;"	d
ZZIP_DLL	zzip/conf.h	211;"	d
ZZIP_DLL	zzip/conf.h	212;"	d
ZZIP_END1	zzip/__hints.h	180;"	d
ZZIP_END1	zzip/__hints.h	183;"	d
ZZIP_ENOENT	zzip/zzip.h	/^    ZZIP_ENOENT =        ZZIP_ERROR-28,$/;"	e	enum:__anon214
ZZIP_ERROR	zzip/zzip.h	24;"	d
ZZIP_EXCL	zzip/file.c	543;"	d	file:
ZZIP_EXTRAFLAGS	zzip/zzip.h	49;"	d
ZZIP_EXTRA_BLOCK	zzip/types.h	/^typedef struct zzip_extra_block ZZIP_EXTRA_BLOCK;$/;"	t	typeref:struct:zzip_extra_block
ZZIP_FACTORY	zzip/zzip.h	56;"	d
ZZIP_FILE	zzip/zzip.h	/^typedef struct zzip_file	ZZIP_FILE;$/;"	t	typeref:struct:zzip_file
ZZIP_FILE_HEADER	zzip/types.h	/^typedef struct zzip_file_header ZZIP_FILE_HEADER;$/;"	t	typeref:struct:zzip_file_header
ZZIP_FILE_HEADER_CHECKMAGIC	zzip/format.h	60;"	d
ZZIP_FILE_HEADER_MAGIC	zzip/format.h	59;"	d
ZZIP_FILE_TRAILER	zzip/types.h	/^typedef struct zzip_file_trailer ZZIP_FILE_TRAILER;$/;"	t	typeref:struct:zzip_file_trailer
ZZIP_FILE_TRAILER_CHECKMAGIC	zzip/format.h	84;"	d
ZZIP_FILE_TRAILER_MAGIC	zzip/format.h	83;"	d
ZZIP_FOR1	zzip/__hints.h	179;"	d
ZZIP_FOR1	zzip/__hints.h	182;"	d
ZZIP_FUNC	zzip/__hints.h	157;"	d
ZZIP_FUNC	zzip/__hints.h	160;"	d
ZZIP_FUNC	zzip/__hints.h	163;"	d
ZZIP_FUNCTION	zzip/__hints.h	158;"	d
ZZIP_FUNCTION	zzip/__hints.h	161;"	d
ZZIP_FUNCTION	zzip/__hints.h	164;"	d
ZZIP_GET16	zzip/fetch.h	53;"	d
ZZIP_GET16	zzip/fetch.h	60;"	d
ZZIP_GET16	zzip/fetch.h	69;"	d
ZZIP_GET32	zzip/fetch.h	54;"	d
ZZIP_GET32	zzip/fetch.h	61;"	d
ZZIP_GET32	zzip/fetch.h	68;"	d
ZZIP_GET64	zzip/fetch.h	55;"	d
ZZIP_GET64	zzip/fetch.h	62;"	d
ZZIP_GET64	zzip/fetch.h	67;"	d
ZZIP_GNUC_ATLEAST	zzip/__hints.h	10;"	d
ZZIP_GNUC_ATLEAST	zzip/__hints.h	13;"	d
ZZIP_GNUC_ATLEAST	zzip/__hints.h	7;"	d
ZZIP_GNUC_CONST	zzip/__hints.h	37;"	d
ZZIP_GNUC_CONST	zzip/__hints.h	39;"	d
ZZIP_GNUC_DEPRECATED	zzip/__hints.h	91;"	d
ZZIP_GNUC_DEPRECATED	zzip/__hints.h	93;"	d
ZZIP_GNUC_EXTENSION	zzip/__hints.h	19;"	d
ZZIP_GNUC_EXTENSION	zzip/__hints.h	21;"	d
ZZIP_GNUC_FORMAT	zzip/__hints.h	127;"	d
ZZIP_GNUC_FORMAT	zzip/__hints.h	129;"	d
ZZIP_GNUC_LIB_INTERNAL	zzip/__hints.h	118;"	d
ZZIP_GNUC_LIB_INTERNAL	zzip/__hints.h	120;"	d
ZZIP_GNUC_LIB_PRIVATE	zzip/__hints.h	109;"	d
ZZIP_GNUC_LIB_PRIVATE	zzip/__hints.h	111;"	d
ZZIP_GNUC_LIB_PROTECTED	zzip/__hints.h	100;"	d
ZZIP_GNUC_LIB_PROTECTED	zzip/__hints.h	102;"	d
ZZIP_GNUC_NONNULL	zzip/__hints.h	73;"	d
ZZIP_GNUC_NONNULL	zzip/__hints.h	75;"	d
ZZIP_GNUC_NORETURN	zzip/__hints.h	55;"	d
ZZIP_GNUC_NORETURN	zzip/__hints.h	57;"	d
ZZIP_GNUC_NOTHROW	zzip/__hints.h	82;"	d
ZZIP_GNUC_NOTHROW	zzip/__hints.h	84;"	d
ZZIP_GNUC_NO_INSTRUMENT	zzip/__hints.h	64;"	d
ZZIP_GNUC_NO_INSTRUMENT	zzip/__hints.h	66;"	d
ZZIP_GNUC_PACKED	zzip/__hints.h	150;"	d
ZZIP_GNUC_PACKED	zzip/__hints.h	152;"	d
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk64_trailer
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk_entry
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_disk_trailer
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_dostime
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_extra_block
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_file_header
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_file_trailer
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_root_dirent
ZZIP_GNUC_PACKED	zzip/format.h	/^} ZZIP_GNUC_PACKED;$/;"	v	typeref:struct:zzip_version
ZZIP_GNUC_PRINTF	zzip/__hints.h	143;"	d
ZZIP_GNUC_PRINTF	zzip/__hints.h	145;"	d
ZZIP_GNUC_PURE	zzip/__hints.h	28;"	d
ZZIP_GNUC_PURE	zzip/__hints.h	30;"	d
ZZIP_GNUC_SCANF	zzip/__hints.h	135;"	d
ZZIP_GNUC_SCANF	zzip/__hints.h	137;"	d
ZZIP_GNUC_UNUSED	zzip/__hints.h	46;"	d
ZZIP_GNUC_UNUSED	zzip/__hints.h	48;"	d
ZZIP_HAVE_ALIGNED_ACCESS_REQUIRED	zzip/fetch.h	30;"	d
ZZIP_HAVE_BYTESWAP_H	zzip/_config.h	17;"	d
ZZIP_HAVE_DIRENT_H	zzip/_config.h	27;"	d
ZZIP_HAVE_DLFCN_H	zzip/_config.h	32;"	d
ZZIP_HAVE_FNMATCH_H	zzip/_config.h	37;"	d
ZZIP_HAVE_INTTYPES_H	zzip/_config.h	42;"	d
ZZIP_HAVE_MEMORY_H	zzip/_config.h	50;"	d
ZZIP_HAVE_STDINT_H	zzip/_config.h	58;"	d
ZZIP_HAVE_STDLIB_H	zzip/_config.h	63;"	d
ZZIP_HAVE_STRCASECMP	zzip/_config.h	68;"	d
ZZIP_HAVE_STRINGS_H	zzip/_config.h	73;"	d
ZZIP_HAVE_STRING_H	zzip/_config.h	78;"	d
ZZIP_HAVE_STRNDUP	zzip/_config.h	83;"	d
ZZIP_HAVE_SYS_MMAN_H	zzip/_config.h	95;"	d
ZZIP_HAVE_SYS_PARAM_H	zzip/_config.h	104;"	d
ZZIP_HAVE_SYS_STAT_H	zzip/_config.h	109;"	d
ZZIP_HAVE_SYS_TYPES_H	zzip/_config.h	114;"	d
ZZIP_HAVE_UNISTD_H	zzip/_config.h	119;"	d
ZZIP_HAVE_ZLIB_H	zzip/_config.h	133;"	d
ZZIP_IGNOREPATH	zzip/zzip.h	48;"	d
ZZIP_IO_USE_MMAP	zzip/plugin.h	88;"	d
ZZIP_IS_COMPRLEVEL	zzip/format.h	198;"	d
ZZIP_IS_DEFLATED	zzip/format.h	211;"	d
ZZIP_IS_DEFLATED_BETTER	zzip/format.h	212;"	d
ZZIP_IS_ENCRYPTED	zzip/format.h	197;"	d
ZZIP_IS_IMPLODED	zzip/format.h	209;"	d
ZZIP_IS_IMPLODED_BETTER	zzip/format.h	213;"	d
ZZIP_IS_PATCHED	zzip/format.h	200;"	d
ZZIP_IS_REDUCEDx1	zzip/format.h	205;"	d
ZZIP_IS_REDUCEDx2	zzip/format.h	206;"	d
ZZIP_IS_REDUCEDx3	zzip/format.h	207;"	d
ZZIP_IS_REDUCEDx4	zzip/format.h	208;"	d
ZZIP_IS_SHRUNK	zzip/format.h	204;"	d
ZZIP_IS_STORED	zzip/format.h	203;"	d
ZZIP_IS_STREAMED	zzip/format.h	199;"	d
ZZIP_IS_TOKENIZED	zzip/format.h	210;"	d
ZZIP_LARGEFILE_RENAME	zzip/conf.h	110;"	d
ZZIP_LARGEFILE_RENAME	zzip/conf.h	112;"	d
ZZIP_LARGEFILE_RENAME	zzip/conf.h	114;"	d
ZZIP_LT_OBJDIR	zzip/_config.h	143;"	d
ZZIP_NOCTTY	zzip/file.c	554;"	d	file:
ZZIP_NOCTTY	zzip/file.c	556;"	d	file:
ZZIP_NONBLOCK	zzip/file.c	552;"	d	file:
ZZIP_NOPATHS	zzip/zzip.h	53;"	d
ZZIP_NO_ERROR	zzip/zzip.h	/^    ZZIP_NO_ERROR = 0,	\/* no error, may be used if user sets it. *\/$/;"	e	enum:__anon214
ZZIP_ONLYZIP	zzip/file.c	742;"	d	file:
ZZIP_ONLYZIP	zzip/zzip.h	55;"	d
ZZIP_OUTOFMEM	zzip/zzip.h	/^    ZZIP_OUTOFMEM =      ZZIP_ERROR-20, \/* out of memory *\/$/;"	e	enum:__anon214
ZZIP_PACKAGE	zzip/_config.h	148;"	d
ZZIP_PACKAGE_BUGREPORT	zzip/_config.h	153;"	d
ZZIP_PACKAGE_NAME	zzip/_config.h	158;"	d
ZZIP_PACKAGE_STRING	zzip/_config.h	163;"	d
ZZIP_PACKAGE_TARNAME	zzip/_config.h	168;"	d
ZZIP_PACKAGE_URL	zzip/_config.h	173;"	d
ZZIP_PACKAGE_VERSION	zzip/_config.h	178;"	d
ZZIP_PLUGIN_IO_SYS	zzip/plugin.h	37;"	d
ZZIP_PREFERZIP	zzip/zzip.h	54;"	d
ZZIP_ROOT_DIRENT	zzip/types.h	/^typedef struct zzip_root_dirent  ZZIP_ROOT_DIRENT;$/;"	t	typeref:struct:zzip_root_dirent
ZZIP_ROOT_DIRENT_CHECKMAGIC	zzip/format.h	130;"	d
ZZIP_ROOT_DIRENT_MAGIC	zzip/format.h	129;"	d
ZZIP_SET16	zzip/fetch.h	56;"	d
ZZIP_SET16	zzip/fetch.h	63;"	d
ZZIP_SET16	zzip/fetch.h	72;"	d
ZZIP_SET32	zzip/fetch.h	57;"	d
ZZIP_SET32	zzip/fetch.h	64;"	d
ZZIP_SET32	zzip/fetch.h	71;"	d
ZZIP_SET64	zzip/fetch.h	58;"	d
ZZIP_SET64	zzip/fetch.h	65;"	d
ZZIP_SET64	zzip/fetch.h	70;"	d
ZZIP_SIZEOF_INT	zzip/_config.h	183;"	d
ZZIP_SIZEOF_LONG	zzip/_config.h	188;"	d
ZZIP_SIZEOF_SHORT	zzip/_config.h	193;"	d
ZZIP_STAT	zzip/zzip.h	/^typedef struct zzip_dirent 	ZZIP_STAT;$/;"	t	typeref:struct:zzip_dirent
ZZIP_STDC_HEADERS	zzip/_config.h	198;"	d
ZZIP_STRING	zzip/__hints.h	169;"	d
ZZIP_STRING_	zzip/__hints.h	170;"	d
ZZIP_SYNC	zzip/file.c	546;"	d	file:
ZZIP_SYNC	zzip/file.c	548;"	d	file:
ZZIP_THREADED	zzip/zzip.h	58;"	d
ZZIP_UNDEF	zzip/zzip.h	/^    ZZIP_UNDEF =         ZZIP_ERROR-32,$/;"	e	enum:__anon214
ZZIP_UNSUPP_COMPR	zzip/zzip.h	/^    ZZIP_UNSUPP_COMPR =  ZZIP_ERROR-29,$/;"	e	enum:__anon214
ZZIP_USE_INTERNAL	zzip/stat.c	24;"	d	file:
ZZIP_UTIL_H	zzip/util.h	2;"	d
ZZIP_VERSION	zzip/_config.h	203;"	d
ZZIP_WORDS_BIGENDIAN	zzip/autoconf.h	37;"	d
ZZIP_WORDS_BIGENDIAN	zzip/autoconf.h	41;"	d
ZZIP_WRONLY	zzip/file.c	542;"	d	file:
ZZIP___int64	zzip/_config.h	226;"	d
ZZIP_dir_real	zzip/info.h	15;"	d
ZZIP_dirfd	zzip/info.h	14;"	d
ZZIP_dirhandle	zzip/info.h	13;"	d
ZZIP_error	zzip/info.h	11;"	d
ZZIP_file_real	zzip/info.h	16;"	d
ZZIP_reafd	zzip/info.h	18;"	d
ZZIP_realdir	zzip/info.h	17;"	d
ZZIP_seterror	zzip/info.h	12;"	d
ZZIP_ssize_t	zzip/_config.h	260;"	d
ZanderCreateOnPort	Device/Driver/Zander.cpp	/^ZanderCreateOnPort(const DeviceConfig &config, Port &com_port)$/;"	f	file:
ZanderDevice	Device/Driver/Zander.cpp	/^class ZanderDevice : public AbstractDevice {$/;"	c	file:
Zero	Atmosphere/Pressure.hpp	/^  AtmosphericPressure Zero() {$/;"	f	class:AtmosphericPressure
Zero	Engine/Task/Ordered/Points/AATPoint.hpp	/^  static constexpr RangeAndRadial Zero() {$/;"	f	struct:RangeAndRadial
Zero	Geo/GeoPoint.hpp	/^  static GeoPoint Zero() {$/;"	f	struct:GeoPoint
Zero	Geo/GeoVector.hpp	/^  constexpr static GeoVector Zero() {$/;"	f	struct:GeoVector
Zero	Geo/SpeedVector.hpp	/^  static constexpr SpeedVector Zero() {$/;"	f	struct:SpeedVector
Zero	Math/Angle.hpp	/^  static Angle Zero() {$/;"	f	class:Angle
ZeroFinder	Math/ZeroFinder.hpp	/^  ZeroFinder(const double _xmin, const double _xmax, const double _tolerance)$/;"	f	class:ZeroFinder
ZeroFinder	Math/ZeroFinder.hpp	/^class ZeroFinder {$/;"	c
ZigZagWindEnabled	Computer/Wind/Settings.hpp	/^  bool ZigZagWindEnabled() const {$/;"	f	struct:WindSettings
ZipArchive	IO/ZipArchive.cpp	/^ZipArchive::ZipArchive(Path path)$/;"	f	class:ZipArchive
ZipArchive	IO/ZipArchive.hpp	/^  ZipArchive(ZipArchive &&src):dir(src.dir) {$/;"	f	class:ZipArchive
ZipArchive	IO/ZipArchive.hpp	/^class ZipArchive {$/;"	c
ZipLineReader	IO/ZipLineReader.hpp	/^  ZipLineReader(struct zzip_dir *dir, const char *path,$/;"	f	class:ZipLineReader
ZipLineReader	IO/ZipLineReader.hpp	/^class ZipLineReader : public ConvertLineReader {$/;"	c
ZipLineReaderA	IO/ZipLineReader.hpp	/^  ZipLineReaderA(struct zzip_dir *dir, const char *path)$/;"	f	class:ZipLineReaderA
ZipLineReaderA	IO/ZipLineReader.hpp	/^class ZipLineReaderA : public NLineReader {$/;"	c
ZipReader	IO/ZipReader.cpp	/^ZipReader::ZipReader(struct zzip_dir *dir, const char *path)$/;"	f	class:ZipReader
ZlibError	IO/ZlibError.hxx	/^	explicit ZlibError(int _code):code(_code) {}$/;"	f	class:final
ZoomIn	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::ZoomIn()$/;"	f	class:FlarmTrafficControl
ZoomIn	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::ZoomIn()$/;"	f	class:TrafficWidget
ZoomOut	Gauge/BigTrafficWidget.cpp	/^FlarmTrafficControl::ZoomOut()$/;"	f	class:FlarmTrafficControl
ZoomOut	Gauge/BigTrafficWidget.cpp	/^TrafficWidget::ZoomOut()$/;"	f	class:TrafficWidget
_	Language/Language.hpp	32;"	d
_	Language/Language.hpp	66;"	d
_255	zzip/zip.c	39;"	d	file:
_255	zzip/zip.c	41;"	d	file:
_BeginSuspend	Thread/WorkerThread.hpp	/^  void _BeginSuspend() {$/;"	f	class:WorkerThread
_CONVEXFILTER_H	Math/ConvexFilter.hpp	29;"	d
_CompositingFilter	Topography/shapelib/mapserver.h	/^  typedef struct _CompositingFilter{$/;"	s
_DrawThermalBand	Renderer/ThermalBandRenderer.cpp	/^ThermalBandRenderer::_DrawThermalBand(const MoreData &basic,$/;"	f	class:ThermalBandRenderer
_FILE_OFFSET_BITS	zzip/conf.h	122;"	d
_FilterNode	Topography/shapelib/mapserver.h	/^  typedef struct _FilterNode {$/;"	s
_GNU_SOURCE	Topography/shapelib/mapserver.h	43;"	d
_HISTOGRAM_H	Math/Histogram.hpp	25;"	d
_HUGE_ENUF	Terrain/jasper/jas_types.h	132;"	d
_LARGEFILE_SOURCE	zzip/conf.h	132;"	d
_LARGE_FILES	zzip/conf.h	127;"	d
_LEASTSQS_H	Math/LeastSquares.hpp	49;"	d
_Lambda	Lua/Util.hxx	/^	_Lambda(U &&u):T(std::forward<U>(u)) {}$/;"	f	struct:Lua::StackIndex::LightUserData::_Lambda
_Lambda	Lua/Util.hxx	/^struct _Lambda : T {$/;"	s	struct:Lua::StackIndex::LightUserData
_LayerCompositer	Topography/shapelib/mapserver.h	/^  typedef struct _LayerCompositer{$/;"	s
_MAPSERVER_CONFIG_H	Topography/shapelib/mapserver-config.h	2;"	d
_PolygonToTriangles	Screen/OpenGL/Triangulate.cpp	/^_PolygonToTriangles(const PT *points, unsigned num_points,$/;"	f	file:
_PushTuple	Lua/Util.hxx	/^struct _PushTuple {$/;"	s	struct:Lua::StackIndex::LightUserData
_PushTuple	Lua/Util.hxx	/^struct _PushTuple<0> {$/;"	s	struct:Lua::StackIndex::LightUserData
_T	unix/tchar.h	50;"	d
_TEOF	unix/tchar.h	53;"	d
_USE_MMAP	zzip/__mmap.h	23;"	d
_UnsafeAppendAll	Util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest)$/;"	f
_UnsafeAppendAll	Util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest, T ch, Args&&... args)$/;"	f
_UnsafeAppendAll	Util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest, const T *first, Args&&... args)$/;"	f
_UnsafeAppendAll	Util/StringBuilder.hxx	/^_UnsafeAppendAll(T *dest, const T *first, size_t first_length, Args&&... args)$/;"	f
_XYDATASTORE_H	Math/XYDataStore.hpp	29;"	d
_ZZIP_AUTOCONF_H_	zzip/autoconf.h	2;"	d
_ZZIP_CONF_H	zzip/conf.h	17;"	d
_ZZIP_DIRENT_HAVE_D_NAMLEN	zzip/lib.h	38;"	d
_ZZIP_DIRENT_HAVE_D_OFF	zzip/lib.h	39;"	d
_ZZIP_DIRENT_HAVE_D_RECLEN	zzip/lib.h	40;"	d
_ZZIP_FILE_H	zzip/file.h	19;"	d
_ZZIP_FORMATS_H	zzip/fetch.h	2;"	d
_ZZIP_FORMAT_H	zzip/format.h	13;"	d
_ZZIP_LIB_H	zzip/lib.h	14;"	d
_ZZIP_PLUGIN_H	zzip/plugin.h	28;"	d
_ZZIP_TYPES_H_	zzip/types.h	23;"	d
_ZZIP_USE_BSWAP	zzip/fetch.h	38;"	d
_ZZIP_USE_DEREF	zzip/fetch.h	47;"	d
_ZZIP_ZZIP32_H	zzip/zzip32.h	16;"	d
_ZZIP_ZZIP_H	zzip/zzip.h	15;"	d
_ZZIP__CONFIG_H	zzip/_config.h	2;"	d
_ZZIP__STDINT_H	zzip/stdint.h	2;"	d
__ASM_ARCH_MXCFB_H__	Screen/FB/mxcfb.h	22;"	d
__FUNCTION__	Topography/shapelib/mapserver.h	197;"	d
__O_TMPFILE	IO/FileOutputStream.cxx	142;"	d	file:
__USE_ANSI	zzip/stdint.h	10;"	d
__USE_ISOC9X	zzip/stdint.h	11;"	d
__ZZIP_INTERNAL_DEBUG_H	zzip/__debug.h	2;"	d
__ZZIP_INTERNAL_HINTS_H	zzip/__hints.h	2;"	d
__ZZIP_INTERNAL_MMAP_H	zzip/__mmap.h	2;"	d
__assert2	Android/Assert.cpp	/^__assert2(const char *file, int line, const char *func, const char *failedexpr)$/;"	f
__correct_rootseek	zzip/zip.c	115;"	d	file:
__correct_rootseek	zzip/zip.c	125;"	d	file:
__correct_rootseek	zzip/zip.c	130;"	d	file:
__cxa_pure_virtual	LibCXX.cpp	/^extern "C" __attribute__((noreturn)) void __cxa_pure_virtual() { abort(); }$/;"	f
__debug_dir_hdr	zzip/zip.c	/^__debug_dir_hdr(struct zzip_dir_hdr *hdr)$/;"	f	file:
__debug_dir_hdr	zzip/zip.c	156;"	d	file:
__dso_handle	Android/Main.cpp	/^  __attribute__((weak)) void *__dso_handle;$/;"	v
__fixup_rootseek	zzip/zip.c	/^__fixup_rootseek(zzip_off_t offset_of_trailer, struct _disk_trailer *trailer)$/;"	f	file:
__fixup_rootseek	zzip/zip.c	123;"	d	file:
__fixup_rootseek	zzip/zip.c	129;"	d	file:
__has_feature	Util/Compiler.h	183;"	d
__sizeof	zzip/zip.c	28;"	d	file:
__zzip_aligned4	zzip/zip.c	/^__zzip_aligned4(char *p)$/;"	f	file:
__zzip_dir_parse	zzip/zip.c	/^__zzip_dir_parse(ZZIP_DIR * dir)$/;"	f	file:
__zzip_fetch_disk_trailer	zzip/zip.c	/^__zzip_fetch_disk_trailer(int fd, zzip_off_t filesize,$/;"	f	file:
__zzip_fetch_disk_trailer	zzip/zip.c	71;"	d	file:
__zzip_get16	zzip/fetch.c	/^__zzip_get16(unsigned char *s)$/;"	f
__zzip_get32	zzip/fetch.c	/^__zzip_get32(unsigned char *s)$/;"	f
__zzip_get64	zzip/fetch.c	/^__zzip_get64(unsigned char *s)$/;"	f
__zzip_parse_root_directory	zzip/zip.c	/^__zzip_parse_root_directory(int fd,$/;"	f	file:
__zzip_set16	zzip/fetch.c	/^__zzip_set16(unsigned char *s, uint16_t v)$/;"	f
__zzip_set32	zzip/fetch.c	/^__zzip_set32(unsigned char *s, uint32_t v)$/;"	f
__zzip_set64	zzip/fetch.c	/^__zzip_set64(unsigned char *s, uint64_t v)$/;"	f
__zzip_try_open	zzip/zip.c	/^__zzip_try_open(zzip_char_t * filename, int filemode,$/;"	f
_autobuffer	Topography/shapelib/mapserver.h	/^  typedef struct _autobuffer {$/;"	s
_bugs	Device/Driver/OpenVario.cpp	/^  double _bugs = 1;$/;"	m	class:OpenVarioDevice	file:
_bugs_valid	Device/Driver/OpenVario.cpp	/^  bool   _bugs_valid = false;$/;"	m	class:OpenVarioDevice	file:
_class	Topography/shapelib/mapserver.h	/^    classObj **_class;$/;"	m	struct:layerObj
_connected	Device/Driver/IMI/Protocol/Protocol.cpp	/^  bool _connected = false;$/;"	m	namespace:IMI	file:
_disk_trailer	zzip/zip.c	/^struct _disk_trailer$/;"	s	file:
_disk_trailer	zzip/zip.c	64;"	d	file:
_disk_trailer_entries	zzip/zip.c	56;"	d	file:
_disk_trailer_entries	zzip/zip.c	65;"	d	file:
_disk_trailer_finalentries	zzip/zip.c	58;"	d	file:
_disk_trailer_finalentries	zzip/zip.c	67;"	d	file:
_disk_trailer_localentries	zzip/zip.c	57;"	d	file:
_disk_trailer_localentries	zzip/zip.c	66;"	d	file:
_disk_trailer_rootseek	zzip/zip.c	59;"	d	file:
_disk_trailer_rootseek	zzip/zip.c	68;"	d	file:
_disk_trailer_rootsize	zzip/zip.c	60;"	d	file:
_disk_trailer_rootsize	zzip/zip.c	69;"	d	file:
_disk_trailer_set_rootseek	zzip/zip.c	61;"	d	file:
_disk_trailer_set_rootseek	zzip/zip.c	70;"	d	file:
_fmode	Compatibility/fmode.c	/^int _fmode = _O_BINARY;$/;"	v
_fputts	unix/tchar.h	41;"	d
_ftprintf	unix/tchar.h	39;"	d
_geomtransform	Topography/shapelib/mapserver.h	/^    expressionObj _geomtransform;$/;"	m	struct:layerObj
_geomtransform	Topography/shapelib/mapserver.h	/^    expressionObj _geomtransform;$/;"	m	struct:styleObj
_glBindFramebuffer	Screen/OpenGL/FBO.cpp	/^static PFNGLBINDFRAMEBUFFEROESPROC _glBindFramebuffer;$/;"	v	file:
_glBindRenderbuffer	Screen/OpenGL/FBO.cpp	/^static PFNGLBINDRENDERBUFFEROESPROC _glBindRenderbuffer;$/;"	v	file:
_glDeleteFramebuffers	Screen/OpenGL/FBO.cpp	/^static PFNGLDELETEFRAMEBUFFERSOESPROC _glDeleteFramebuffers;$/;"	v	file:
_glDeleteRenderbuffers	Screen/OpenGL/FBO.cpp	/^static PFNGLDELETERENDERBUFFERSOESPROC _glDeleteRenderbuffers;$/;"	v	file:
_glFramebufferRenderbuffer	Screen/OpenGL/FBO.cpp	/^static PFNGLFRAMEBUFFERRENDERBUFFEROESPROC _glFramebufferRenderbuffer;$/;"	v	file:
_glFramebufferTexture2D	Screen/OpenGL/FBO.cpp	/^static PFNGLFRAMEBUFFERTEXTURE2DOESPROC _glFramebufferTexture2D;$/;"	v	file:
_glGenFramebuffers	Screen/OpenGL/FBO.cpp	/^static PFNGLGENFRAMEBUFFERSOESPROC _glGenFramebuffers;$/;"	v	file:
_glGenRenderbuffers	Screen/OpenGL/FBO.cpp	/^static PFNGLGENRENDERBUFFERSOESPROC _glGenRenderbuffers;$/;"	v	file:
_glRenderbufferStorage	Screen/OpenGL/FBO.cpp	/^static PFNGLRENDERBUFFERSTORAGEOESPROC _glRenderbufferStorage;$/;"	v	file:
_ideal_polar	Device/Driver/OpenVario.cpp	/^  PolarCoefficients _ideal_polar; $/;"	m	class:OpenVarioDevice	file:
_ideal_polar_valid	Device/Driver/OpenVario.cpp	/^  bool _ideal_polar_valid = false;$/;"	m	class:OpenVarioDevice	file:
_info	Device/Driver/IMI/Protocol/Protocol.cpp	/^  TDeviceInfo _info;$/;"	m	namespace:IMI	file:
_lastAltitude	Computer/Wind/Store.hpp	/^  double _lastAltitude;$/;"	m	class:WindStore
_mc	Device/Driver/OpenVario.cpp	/^  double _mc = 1;$/;"	m	class:OpenVarioDevice	file:
_mc_valid	Device/Driver/OpenVario.cpp	/^  bool   _mc_valid = false;$/;"	m	class:OpenVarioDevice	file:
_next_allocation_size	Topography/shapelib/mapserver.h	/^    size_t _next_allocation_size;$/;"	m	struct:_autobuffer
_overload	Device/Driver/OpenVario.cpp	/^  double _overload = 1;$/;"	m	class:OpenVarioDevice	file:
_overload_valid	Device/Driver/OpenVario.cpp	/^  bool   _overload_valid = false;$/;"	m	class:OpenVarioDevice	file:
_putts	unix/tchar.h	54;"	d
_real_polar	Device/Driver/OpenVario.cpp	/^  PolarCoefficients _real_polar; $/;"	m	class:OpenVarioDevice	file:
_real_polar_valid	Device/Driver/OpenVario.cpp	/^  bool _real_polar_valid = false;$/;"	m	class:OpenVarioDevice	file:
_serialNumber	Device/Driver/IMI/Protocol/Protocol.cpp	/^  IMIWORD _serialNumber;$/;"	m	namespace:IMI	file:
_slCreateEngine	Audio/SLES/Init.cpp	/^static T_slCreateEngine _slCreateEngine;$/;"	v	file:
_stprintf	unix/tchar.h	35;"	d
_stscanf	unix/tchar.h	55;"	d
_tcscat	unix/tchar.h	49;"	d
_tcsclen	unix/tchar.h	46;"	d
_tcscmp	unix/tchar.h	44;"	d
_tcscpy	unix/tchar.h	43;"	d
_tcsdup	unix/tchar.h	42;"	d
_tcslen	unix/tchar.h	45;"	d
_tcspbrk	unix/tchar.h	48;"	d
_tcsstr	unix/tchar.h	47;"	d
_tcstod	unix/tchar.h	58;"	d
_tcstol	unix/tchar.h	57;"	d
_template	Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:__anon38
_template	Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:__anon42
_template	Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:__anon55
_template	Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:classObj
_template	Topography/shapelib/mapserver.h	/^    char *_template;$/;"	m	struct:layerObj
_tfopen	unix/tchar.h	52;"	d
_topen	unix/tchar.h	51;"	d
_tprintf	unix/tchar.h	38;"	d
_trace	Engine/Contest/Solvers/ContestDijkstra.cpp	/^   TraceManager(_trace),$/;"	v
_vftprintf	unix/tchar.h	40;"	d
_vsntprintf	unix/tchar.h	37;"	d
_vstprintf	unix/tchar.h	36;"	d
_zzip___int64	zzip/conf.h	100;"	d
_zzip___int64	zzip/conf.h	102;"	d
_zzip_const	zzip/conf.h	57;"	d
_zzip_const	zzip/conf.h	59;"	d
_zzip_export	zzip/conf.h	222;"	d
_zzip_export	zzip/conf.h	227;"	d
_zzip_export	zzip/conf.h	230;"	d
_zzip_export	zzip/conf.h	236;"	d
_zzip_export	zzip/conf.h	238;"	d
_zzip_export	zzip/conf.h	242;"	d
_zzip_export	zzip/conf.h	245;"	d
_zzip_export	zzip/conf.h	253;"	d
_zzip_export	zzip/conf.h	255;"	d
_zzip_export	zzip/conf.h	257;"	d
_zzip_getpagesize	zzip/__mmap.h	36;"	d
_zzip_getpagesize	zzip/__mmap.h	81;"	d
_zzip_getpagesize	zzip/__mmap.h	95;"	d
_zzip_inline	zzip/conf.h	157;"	d
_zzip_inline	zzip/conf.h	158;"	d
_zzip_inline	zzip/conf.h	64;"	d
_zzip_inline	zzip/conf.h	66;"	d
_zzip_lseek	zzip/conf.h	168;"	d
_zzip_lseek	zzip/conf.h	192;"	d
_zzip_mmap	zzip/__mmap.h	32;"	d
_zzip_mmap	zzip/__mmap.h	77;"	d
_zzip_mmap	zzip/__mmap.h	93;"	d
_zzip_munmap	zzip/__mmap.h	34;"	d
_zzip_munmap	zzip/__mmap.h	79;"	d
_zzip_munmap	zzip/__mmap.h	94;"	d
_zzip_off64_t	zzip/_config.h	240;"	d
_zzip_off64_t	zzip/conf.h	48;"	d
_zzip_off64_t	zzip/conf.h	50;"	d
_zzip_off_t	zzip/conf.h	40;"	d
_zzip_off_t	zzip/conf.h	42;"	d
_zzip_plugin_io	zzip/plugin.h	/^typedef union _zzip_plugin_io$/;"	u
_zzip_plugin_io_handlers	zzip/plugin.h	56;"	d
_zzip_read	zzip/conf.h	171;"	d
_zzip_read	zzip/conf.h	196;"	d
_zzip_restrict	zzip/_config.h	249;"	d
_zzip_restrict	zzip/conf.h	71;"	d
_zzip_restrict	zzip/conf.h	73;"	d
_zzip_size_t	zzip/conf.h	86;"	d
_zzip_size_t	zzip/conf.h	88;"	d
_zzip_ssize_t	zzip/conf.h	93;"	d
_zzip_ssize_t	zzip/conf.h	95;"	d
_zzip_write	zzip/conf.h	174;"	d
_zzip_write	zzip/conf.h	200;"	d
a	Computer/WaveResult.hpp	/^  GeoPoint a, b;$/;"	m	struct:WaveInfo
a	Engine/GlideSolvers/PolarCoefficients.hpp	/^  double a, b, c;$/;"	m	struct:PolarCoefficients
a	Geo/Flat/FlatEllipse.hpp	/^  double a;$/;"	m	class:FlatEllipse
a	Math/Filter.hpp	/^  double a[3];$/;"	m	class:Filter
a	Math/Line2D.hpp	/^  Point a, b;$/;"	m	struct:Line2D
a	Screen/Memory/PixelOperations.hpp	/^  const color_type a, b;$/;"	m	struct:PixelOpaqueAlpha
a	Screen/OpenGL/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
a	Screen/PortableColor.hpp	/^  uint8_t a;$/;"	m	class:BGRA8Color
a	Tracking/SkyLines/Data.hpp	/^    GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Data::Wave
a	Tracking/SkyLines/Protocol.hpp	/^  GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Wave
a	Util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
aalt	Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
aap	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  const AATPoint &aap;$/;"	m	class:final
aat_constraints	Engine/Task/Factory/AATTaskFactory.cpp	/^static constexpr TaskFactoryConstraints aat_constraints = {$/;"	v	file:
aat_min_time	Engine/Task/Ordered/Settings.hpp	/^  double aat_min_time;$/;"	m	struct:OrderedTaskSettings
aat_speed_max	Engine/Task/Stats/CommonStats.hpp	/^  double aat_speed_max;$/;"	m	class:CommonStats
aat_speed_min	Engine/Task/Stats/CommonStats.hpp	/^  double aat_speed_min;$/;"	m	class:CommonStats
aat_speed_target	Engine/Task/Stats/CommonStats.hpp	/^  double aat_speed_target;$/;"	m	class:CommonStats
aat_time_remaining	Engine/Task/Stats/CommonStats.hpp	/^  double aat_time_remaining;$/;"	m	class:CommonStats
ab	Geo/Flat/FlatEllipse.hpp	/^  double ab() const {$/;"	f	class:FlatEllipse
abort_mode_icon	Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
abort_task	Engine/Task/TaskManager.hpp	/^  AlternateTask *const abort_task;$/;"	m	class:TaskManager
abort_task_mode	Engine/Task/TaskBehaviour.hpp	/^  AbortTaskMode abort_task_mode;$/;"	m	struct:TaskBehaviour
above_terrain_bitmap	Look/MapLook.hpp	/^  Bitmap above_terrain_bitmap;$/;"	m	struct:MapLook
above_terrain_brush	Look/MapLook.hpp	/^  Brush above_terrain_brush;$/;"	m	struct:MapLook
absolute	Topography/shapelib/mapserver.h	/^  int absolute; \/* are the glyph positions absolutely placed, or relative to the origin *\/$/;"	m	struct:textPathObj
absstepsize	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_fix_t absstepsize;$/;"	m	struct:__anon147
acTypes	FLARM/Traffic.cpp	/^static constexpr const TCHAR* acTypes[16] = {$/;"	v	file:
acceleration	NMEA/Info.hpp	/^  AccelerationState acceleration;$/;"	m	struct:NMEAInfo
acceptor	Device/Port/TCPPort.hpp	/^  boost::asio::ip::tcp::acceptor acceptor;$/;"	m	class:final
access	Geo/Boost/GeoPoint.hpp	/^template<> struct access<GeoPoint, 0> {$/;"	s	namespace:boost::geometry::traits
access	Geo/Boost/GeoPoint.hpp	/^template<> struct access<GeoPoint, 1> {$/;"	s	namespace:boost::geometry::traits
accurate_half_sin	Math/Angle.hpp	/^  inline double accurate_half_sin() const {$/;"	f	class:Angle
acd_driver	Device/Driver/AirControlDisplay.cpp	/^const struct DeviceRegister acd_driver = {$/;"	v	typeref:struct:DeviceRegister
acft	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
achieved	Engine/Task/Stats/TaskSummary.hpp	/^  bool achieved;$/;"	m	struct:TaskSummaryPoint
ack_button	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  Button *ack_button;$/;"	m	class:final	file:
ack_button	Dialogs/MapItemListDialog.cpp	/^  Button *ack_button;$/;"	m	class:final	file:
ack_day	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  bool ack_expired, ack_day;$/;"	m	struct:WarningItem	file:
ack_day	Engine/Airspace/AirspaceWarning.hpp	/^  bool ack_day;$/;"	m	class:AirspaceWarning
ack_day_button	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  Button *ack_day_button;$/;"	m	class:final	file:
ack_expired	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  bool ack_expired, ack_day;$/;"	m	struct:WarningItem	file:
acknowledgement_time	Engine/Airspace/AirspaceWarningConfig.hpp	/^  unsigned acknowledgement_time;$/;"	m	struct:AirspaceWarningConfig
acktime_inside	Engine/Airspace/AirspaceWarning.hpp	/^  unsigned acktime_inside;$/;"	m	class:AirspaceWarning
acktime_warning	Engine/Airspace/AirspaceWarning.hpp	/^  unsigned acktime_warning;$/;"	m	class:AirspaceWarning
acos	Math/Angle.hpp	/^  static Angle acos(double x) {$/;"	f	class:Angle
acstate	Replay/TaskAutoPilot.hpp	/^  AcState acstate;$/;"	m	class:TaskAutoPilot
action	Terrain/jasper/jpc/jpc_dec.c	/^	int (*action)(jpc_dec_t *dec, jpc_ms_t *ms);$/;"	m	struct:__anon154	file:
action_id	Form/DigitEntry.hpp	/^  int action_id;$/;"	m	class:CoordinateFormat
action_listener	Dialogs/ListPicker.cpp	/^  ActionListener &action_listener;$/;"	m	class:ListPickerWidget	file:
action_listener	Dialogs/SimulatorPromptWindow.hpp	/^  ActionListener &action_listener;$/;"	m	class:final
action_listener	Dialogs/StartupDialog.cpp	/^  ActionListener &action_listener;$/;"	m	class:final	file:
action_listener	Dialogs/Traffic/TrafficList.cpp	/^  ActionListener &action_listener;$/;"	m	class:TrafficListWidget	file:
action_listener	Dialogs/Waypoint/WaypointList.cpp	/^  ActionListener &action_listener;$/;"	m	class:final	file:
action_listener	Form/DigitEntry.hpp	/^  ActionListener *action_listener;$/;"	m	class:CoordinateFormat
action_listener	Widget/ArrowPagerWidget.hpp	/^  ActionListener &action_listener;$/;"	m	class:ArrowPagerWidget
active	Computer/Wind/CirclingWind.hpp	/^  bool active;$/;"	m	class:CirclingWind
active	Engine/Airspace/AbstractAirspace.hpp	/^  mutable bool active;$/;"	m	class:AbstractAirspace
active	Engine/Task/Stats/TaskSummary.hpp	/^  unsigned active;$/;"	m	struct:TaskSummary
active	Screen/OpenGL/BufferCanvas.hpp	/^  bool active = false;$/;"	m	class:DisplayOrientation
active_child	Screen/ContainerWindow.hpp	/^  Window *active_child = nullptr;$/;"	m	class:ContainerWindow
active_factory	Engine/Task/Ordered/OrderedTask.hpp	/^  AbstractTaskFactory* active_factory;$/;"	m	class:final
active_freq_name	NMEA/ExternalSettings.hpp	/^  StaticString<32> active_freq_name;$/;"	m	struct:ExternalSettings
active_frequency	Computer/Settings.hpp	/^  RadioFrequency active_frequency;$/;"	m	struct:RadioSettings
active_frequency	NMEA/ExternalSettings.hpp	/^  RadioFrequency active_frequency;$/;"	m	struct:ExternalSettings
active_frequency_panels	InfoBoxes/Content/Radio.cpp	/^static constexpr InfoBoxPanel active_frequency_panels[] = {$/;"	v	file:
active_has_next	Engine/Task/Stats/CommonStats.hpp	/^  bool active_has_next;$/;"	m	class:CommonStats
active_has_previous	Engine/Task/Stats/CommonStats.hpp	/^  bool active_has_previous;$/;"	m	class:CommonStats
active_index	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t active_index;$/;"	m	struct:CAI302::PilotMetaActive
active_index	Dialogs/Task/TaskPointDialog.cpp	/^  unsigned active_index;$/;"	m	class:final	file:
active_index	Dialogs/Weather/MapOverlayWidget.cpp	/^  int active_index = -1;$/;"	m	class:final	file:
active_index	Engine/Task/Solvers/TaskMacCready.hpp	/^  const unsigned active_index;$/;"	m	class:TaskMacCready
active_index	Engine/Task/Stats/TaskStats.hpp	/^  unsigned active_index;$/;"	m	class:TaskStats
active_index	Renderer/TaskPointRenderer.hpp	/^  unsigned active_index;$/;"	m	class:TaskPointRenderer
active_name	Computer/Settings.hpp	/^  StaticString<32> active_name;$/;"	m	struct:RadioSettings
active_state	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  ActiveState active_state;$/;"	m	class:OrderedTaskPoint
active_task	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  OrderedTask **active_task;$/;"	m	class:TaskActionsPanel
active_task	Dialogs/Task/Manager/TaskListPanel.cpp	/^  OrderedTask **active_task;$/;"	m	class:final	file:
active_task	Engine/Task/TaskManager.hpp	/^  AbstractTask* active_task;$/;"	m	class:TaskManager
active_task_point	Engine/Task/AbstractTask.hpp	/^  unsigned active_task_point;$/;"	m	class:AbstractTask
active_waypoint	Engine/Task/Unordered/AbortTask.hpp	/^  unsigned active_waypoint;$/;"	m	class:AbortTask
activity_mask	Engine/Airspace/Airspaces.hpp	/^  AirspaceActivity activity_mask;$/;"	m	class:Airspaces
actual_in	Engine/Contest/Solvers/Retrospective.hpp	/^    double actual_in;$/;"	m	struct:Retrospective::NearWaypoint
adBoundsMax	Topography/shapelib/mapshape.h	/^    double  adBoundsMax[4];$/;"	m	struct:__anon82
adBoundsMin	Topography/shapelib/mapshape.h	/^    double  adBoundsMin[4];$/;"	m	struct:__anon82
add	Engine/Airspace/AirspaceIntersectSort.cpp	/^AirspaceIntersectSort::add(const double t, const GeoPoint &p)$/;"	f	class:AirspaceIntersectSort
addChecklist	Dialogs/dlgChecklist.cpp	/^addChecklist(const TCHAR *name, const TCHAR *details)$/;"	f	file:
addEnumText	Form/DataField/Enum.cpp	/^DataFieldEnum::addEnumText(const TCHAR *Text, const TCHAR *display_string,$/;"	f	class:DataFieldEnum
addEnumText	Form/DataField/Enum.hpp	/^  bool addEnumText(const TCHAR *text, unsigned id, const TCHAR *help=nullptr) {$/;"	f	class:final
addEnumTexts	Form/DataField/Enum.cpp	/^DataFieldEnum::addEnumTexts(const TCHAR *const*list)$/;"	f	class:DataFieldEnum
addMeasurement	Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::addMeasurement(unsigned time, const SpeedVector &vector,$/;"	f	class:WindMeasurementList
addRequestProperty	Java/URL.hxx	/^		static void addRequestProperty(JNIEnv *env, jobject connection,$/;"	f	class:Java::URLConnection
addRequestProperty_method	Java/URL.cxx	/^jmethodID Java::URLConnection::addRequestProperty_method;$/;"	m	class:Java::URLConnection	file:
addRequestProperty_method	Java/URL.hxx	/^		static jmethodID addRequestProperty_method;$/;"	m	class:Java::URLConnection
add_arrival_altitude	MapSettings.hpp	/^  bool add_arrival_altitude;$/;"	m	struct:MapItemListSettings
add_button	Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
add_button	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *add_button, *delete_button;$/;"	m	class:PageListWidget	file:
add_button	Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
add_ds	Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::add_ds(int kennung, const void *quelle)$/;"	f	class:DBB
add_fdf	Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::add_fdf(int feldkennung, size_t feldlaenge, const void *quelle)$/;"	f	class:DBB
add_location	MapSettings.hpp	/^  bool add_location;$/;"	m	struct:MapItemListSettings
address	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD address;$/;"	m	struct:IMI::FlightInfo
address	Device/Driver/LX/Protocol.hpp	/^    uint8_t address[3];$/;"	m	struct:LX::MemoryAddress24
address	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t address[3];$/;"	m	struct:LXEra::MemoryAddress24
address	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^    std::string address;$/;"	m	struct:final::Item	file:
address	Net/AllocatedSocketAddress.hxx	/^	struct sockaddr *address = nullptr;$/;"	m	class:AllocatedSocketAddress	typeref:struct:AllocatedSocketAddress::sockaddr
address	Net/IPv4Address.hxx	/^		:address(_address) {}$/;"	f	class:IPv4Address
address	Net/IPv4Address.hxx	/^	struct sockaddr_in address;$/;"	m	class:IPv4Address	typeref:struct:IPv4Address::sockaddr_in
address	Net/IPv6Address.hxx	/^	struct sockaddr_in6 address;$/;"	m	class:IPv6Address	typeref:struct:IPv6Address::sockaddr_in6
address	Net/SocketAddress.hxx	/^	const struct sockaddr *address;$/;"	m	class:SocketAddress	typeref:struct:SocketAddress::sockaddr
address	Net/StaticSocketAddress.hxx	/^	struct sockaddr_storage address;$/;"	m	class:StaticSocketAddress	typeref:struct:StaticSocketAddress::sockaddr_storage
address0	Device/Driver/LX/Protocol.hpp	/^    uint8_t address0;$/;"	m	struct:LX::MemoryAddress32
address0	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t address0;$/;"	m	struct:LXEra::MemoryAddress32
address1	Device/Driver/LX/Protocol.hpp	/^    uint8_t address1;$/;"	m	struct:LX::MemoryAddress32
address1	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t address1;$/;"	m	struct:LXEra::MemoryAddress32
address2	Device/Driver/LX/Protocol.hpp	/^    uint8_t address2;$/;"	m	struct:LX::MemoryAddress32
address2	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t address2;$/;"	m	struct:LXEra::MemoryAddress32
address3	Device/Driver/LX/Protocol.hpp	/^    uint8_t address3;$/;"	m	struct:LX::MemoryAddress32
address3	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t address3;$/;"	m	struct:LXEra::MemoryAddress32
address_to_name	Android/BluetoothHelper.cpp	/^  static std::map<std::string, std::string> address_to_name;$/;"	m	namespace:BluetoothHelper	file:
addresses	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  std::set<std::string> addresses;$/;"	m	class:final	file:
advance	Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon65
ae15seconds	Computer/Settings.hpp	/^  ae15seconds,$/;"	e	enum:AverageEffTime
ae2minutes	Computer/Settings.hpp	/^  ae2minutes,$/;"	e	enum:AverageEffTime
ae30seconds	Computer/Settings.hpp	/^  ae30seconds,$/;"	e	enum:AverageEffTime
ae3minutes	Computer/Settings.hpp	/^  ae3minutes,$/;"	e	enum:AverageEffTime
ae60seconds	Computer/Settings.hpp	/^  ae60seconds,$/;"	e	enum:AverageEffTime
ae90seconds	Computer/Settings.hpp	/^  ae90seconds,$/;"	e	enum:AverageEffTime
air_data_computer	Computer/GlideComputer.hpp	/^  GlideComputerAirData air_data_computer;$/;"	m	class:GlideComputer
air_temperature	Atmosphere/CuSonde.hpp	/^    Temperature air_temperature;$/;"	m	struct:CuSonde::Level
airbrake_state	NMEA/SwitchState.hpp	/^  AirbrakeState airbrake_state;$/;"	m	struct:SwitchState
airbrake_state_list	Dialogs/Device/Vega/SwitchesDialog.cpp	/^static constexpr StaticEnumChoice airbrake_state_list[] = {$/;"	v	file:
aircraft	Engine/Task/Solvers/TaskBestMc.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	Engine/Task/Solvers/TaskGlideRequired.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	Engine/Task/Solvers/TaskMinTarget.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	Engine/Task/Solvers/TaskOptTarget.hpp	/^  const AircraftState &aircraft;$/;"	m	class:final
aircraft	Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  const AircraftState &aircraft;$/;"	m	class:TaskSolveTravelled
aircraft	Look/MapLook.hpp	/^  AircraftLook aircraft;$/;"	m	struct:MapLook
aircraft	Replay/DemoReplay.hpp	/^  AircraftSim aircraft;$/;"	m	class:DemoReplay
aircraft_brush	Look/CrossSectionLook.hpp	/^  Brush aircraft_brush;$/;"	m	struct:CrossSectionLook
aircraft_look	MapWindow/TargetMapWindow.hpp	/^  const AircraftLook &aircraft_look;$/;"	m	class:TargetMapWindow
aircraft_pen	Look/AircraftLook.hpp	/^  Pen aircraft_pen;$/;"	m	struct:AircraftLook
aircraft_pen	Look/HorizonLook.hpp	/^  Pen aircraft_pen;$/;"	m	struct:HorizonLook
aircraft_registration	Device/Declaration.hpp	/^  StaticString<32> aircraft_registration;$/;"	m	struct:Declaration
aircraft_simple1_pen	Look/AircraftLook.hpp	/^  Pen aircraft_simple1_pen;$/;"	m	struct:AircraftLook
aircraft_simple2_pen	Look/AircraftLook.hpp	/^  Pen aircraft_simple2_pen;$/;"	m	struct:AircraftLook
aircraft_symbol	MapSettings.hpp	/^  AircraftSymbol aircraft_symbol;$/;"	m	struct:MapSettings
aircraft_symbol_list	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice  aircraft_symbol_list[] = {$/;"	v	file:
aircraft_type	Device/Declaration.hpp	/^  StaticString<32> aircraft_type;$/;"	m	struct:Declaration
airfield	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(22)> airfield;$/;"	m	struct:FlarmNetRecord
airport_marginal_icon	Look/WaypointLook.hpp	/^  MaskedIcon airport_marginal_icon;$/;"	m	struct:WaypointLook
airport_reachable_icon	Look/WaypointLook.hpp	/^  MaskedIcon airport_reachable_icon, airport_unreachable_icon;$/;"	m	struct:WaypointLook
airport_unreachable_icon	Look/WaypointLook.hpp	/^  MaskedIcon airport_reachable_icon, airport_unreachable_icon;$/;"	m	struct:WaypointLook
airspace	Airspace/NearestAirspace.hpp	/^  const AbstractAirspace *airspace;$/;"	m	class:NearestAirspace
airspace	Computer/Settings.hpp	/^  AirspaceComputerSettings airspace;$/;"	m	struct:ComputerSettings
airspace	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  const AbstractAirspace &airspace;$/;"	m	class:final	file:
airspace	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  const AbstractAirspace *airspace;$/;"	m	struct:WarningItem	file:
airspace	Engine/Airspace/Airspace.hpp	/^  AbstractAirspace *airspace;$/;"	m	class:final
airspace	Engine/Airspace/AirspaceSorter.hpp	/^  const AbstractAirspace *airspace;$/;"	m	class:AirspaceSelectInfo
airspace	Engine/Airspace/AirspaceWarning.hpp	/^  const AbstractAirspace &airspace;$/;"	m	class:AirspaceWarning
airspace	Engine/Airspace/SoonestAirspace.cpp	/^  const AbstractAirspace *airspace = nullptr;$/;"	m	struct:SoonestAirspace	file:
airspace	Engine/Route/AirspaceRoute.hpp	/^    const AbstractAirspace *airspace;$/;"	m	struct:AirspaceRoute::RouteAirspaceIntersection
airspace	Look/MapLook.hpp	/^  AirspaceLook airspace;$/;"	m	struct:MapLook
airspace	MapSettings.hpp	/^  AirspaceRendererSettings airspace;$/;"	m	struct:MapSettings
airspace	MapWindow/Items/MapItem.hpp	/^  const AbstractAirspace *airspace;$/;"	m	struct:AirspaceMapItem
airspace	Monitor/AirspaceWarningMonitor.cpp	/^  const AbstractAirspace &airspace;$/;"	m	class:final	file:
airspace_class_names	Formatter/AirspaceFormatter.cpp	/^static const TCHAR *const airspace_class_names[] = {$/;"	v	file:
airspace_class_short_names	Formatter/AirspaceFormatter.cpp	/^static const TCHAR *const airspace_class_short_names[] = {$/;"	v	file:
airspace_class_strings	Airspace/AirspaceParser.cpp	/^static constexpr AirspaceClassStringCouple airspace_class_strings[] = {$/;"	v	file:
airspace_database	Components.cpp	/^Airspaces airspace_database;$/;"	v
airspace_database	CrossSection/CrossSectionRenderer.hpp	/^  const Airspaces *airspace_database;$/;"	m	class:CrossSectionRenderer
airspace_label_renderer	MapWindow/MapWindow.hpp	/^  AirspaceLabelRenderer airspace_label_renderer;$/;"	m	class:MapWindow
airspace_look	CrossSection/AirspaceXSRenderer.cpp	/^  const AirspaceLook &airspace_look;$/;"	m	class:final	file:
airspace_look	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  const AirspaceLook &airspace_look;$/;"	m	class:TaskEditPanel	file:
airspace_look	Renderer/OZRenderer.hpp	/^  const AirspaceLook &airspace_look;$/;"	m	class:OZRenderer
airspace_renderer	CrossSection/CrossSectionRenderer.hpp	/^  AirspaceXSRenderer airspace_renderer;$/;"	m	class:CrossSectionRenderer
airspace_renderer	MapWindow/MapWindow.hpp	/^  AirspaceRenderer airspace_renderer;$/;"	m	class:MapWindow
airspace_renderer	MapWindow/TargetMapWindow.hpp	/^  AirspaceRenderer airspace_renderer;$/;"	m	class:TargetMapWindow
airspace_tnp_class_chars	Airspace/AirspaceParser.cpp	/^static constexpr AirspaceClassCharCouple airspace_tnp_class_chars[] = {$/;"	v	file:
airspace_tnp_type_strings	Airspace/AirspaceParser.cpp	/^static constexpr AirspaceClassStringCouple airspace_tnp_type_strings[] = {$/;"	v	file:
airspace_tree	Engine/Airspace/Airspaces.hpp	/^  AirspaceTree airspace_tree;$/;"	m	class:Airspaces
airspace_warnings	Dialogs/Airspace/AirspaceList.cpp	/^static ProtectedAirspaceWarningManager *airspace_warnings;$/;"	v	file:
airspace_warnings	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  ProtectedAirspaceWarningManager &airspace_warnings;$/;"	m	class:final	file:
airspace_warnings	Monitor/AllMonitors.hpp	/^  AirspaceWarningMonitor airspace_warnings;$/;"	m	class:final
airspace_warnings	NMEA/Derived.hpp	/^  AirspaceWarningsInfo airspace_warnings;$/;"	m	struct:DerivedInfo
airspaces	Airspace/AirspaceParser.hpp	/^  Airspaces &airspaces;$/;"	m	class:AirspaceParser
airspaces	Computer/WarningComputer.hpp	/^  Airspaces &airspaces;$/;"	m	class:WarningComputer
airspaces	Dialogs/Airspace/AirspaceList.cpp	/^static const Airspaces *airspaces;$/;"	v	file:
airspaces	Engine/Airspace/AirspaceWarningManager.hpp	/^  const Airspaces &airspaces;$/;"	m	class:AirspaceWarningManager
airspaces	Renderer/AirspaceLabelRenderer.hpp	/^  const Airspaces *airspaces;$/;"	m	class:AirspaceLabelRenderer
airspaces	Renderer/AirspaceRenderer.hpp	/^  const Airspaces *airspaces;$/;"	m	class:AirspaceRenderer
airspaces	Task/ProtectedRoutePlanner.hpp	/^  const Airspaces &airspaces;$/;"	m	class:ProtectedRoutePlanner
airspeed	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
airspeed	Tracking/SkyLines/Protocol.hpp	/^  uint16_t airspeed;$/;"	m	struct:SkyLinesTracking::FixPacket
airspeed_available	NMEA/Info.hpp	/^  Validity airspeed_available;$/;"	m	struct:NMEAInfo
airspeed_real	NMEA/Info.hpp	/^  bool airspeed_real;$/;"	m	struct:NMEAInfo
alarm_brush	Look/FlarmTrafficLook.hpp	/^  Brush alarm_brush;$/;"	m	struct:FlarmTrafficLook
alarm_brush	Look/TrafficLook.hpp	/^  Brush alarm_brush;$/;"	m	struct:TrafficLook
alarm_color	Look/FlarmTrafficLook.hpp	/^  Color alarm_color;$/;"	m	struct:FlarmTrafficLook
alarm_color	Look/TrafficLook.hpp	/^  Color alarm_color;$/;"	m	struct:TrafficLook
alarm_level	FLARM/Status.hpp	/^  FlarmTraffic::AlarmType alarm_level;$/;"	m	struct:FlarmStatus
alarm_level	FLARM/Traffic.hpp	/^  AlarmType alarm_level;$/;"	m	class:FlarmTraffic::AircraftType
alarm_pen	Look/FlarmTrafficLook.hpp	/^  Pen alarm_pen;$/;"	m	struct:FlarmTrafficLook
alert_parameters	Dialogs/Device/Vega/AlertParameters.hpp	/^VegaParametersWidget::StaticParameter alert_parameters[] = {$/;"	v
align	Renderer/TextInBox.hpp	/^  Alignment align = Alignment::LEFT;$/;"	v
align	Topography/shapelib/mapserver.h	/^    int align;$/;"	m	struct:__anon54
align	Topography/shapelib/mapserver.h	/^    int align;$/;"	m	struct:labelObj
aligned4	zzip/zip.c	401;"	d	file:
alignment	Widget/ButtonPanelWidget.hpp	/^  Alignment alignment;$/;"	m	class:ButtonPanelWidget
alive	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
alive	NMEA/Info.hpp	/^  Validity alive;$/;"	m	struct:NMEAInfo
alive	Thread/StandbyThread.hpp	/^  bool alive = false;$/;"	m	class:StandbyThread
all	Engine/Airspace/AirspaceIntersectSort.cpp	/^AirspaceIntersectSort::all()$/;"	f	class:AirspaceIntersectSort
all_bold_font_paths	Screen/Custom/Files.cpp	/^static const char *const all_bold_font_paths[] = {$/;"	v	file:
all_bold_italic_font_paths	Screen/Custom/Files.cpp	/^static const char *const all_bold_italic_font_paths[] = {$/;"	v	file:
all_font_paths	Screen/Custom/Files.cpp	/^static const char *const all_font_paths[] = {$/;"	v	file:
all_italic_font_paths	Screen/Custom/Files.cpp	/^static const char *const all_italic_font_paths[] = {$/;"	v	file:
all_monitors	Startup.cpp	/^static AllMonitors *all_monitors;$/;"	v	file:
all_monospace_font_paths	Screen/Custom/Files.cpp	/^static const char *const all_monospace_font_paths[] = {$/;"	v	file:
alloc	Engine/Trace/Trace.hpp	/^    Alloc &alloc;$/;"	m	struct:Trace::Disposer
alloc_size	Topography/shapelib/mapstring.c	/^    size_t alloc_size;$/;"	m	struct:msStringBuffer	file:
allocate	Util/SliceAllocator.hxx	/^		Item *allocate() {$/;"	f	struct:SliceAllocator::Area
allocate	Util/SliceAllocator.hxx	/^	T *allocate(const size_type n) {$/;"	f	class:GlobalSliceAllocator
allocate	Util/SliceAllocator.hxx	/^	T *allocate(const size_type n) {$/;"	f	class:SliceAllocator
allocated	Screen/Custom/Cache.cpp	/^  char *allocated;$/;"	m	struct:TextCacheKey	file:
allocated_error_dist_buffer	Screen/Memory/Dither.hpp	/^  AllocatedArray<ErrorDistType> allocated_error_dist_buffer;$/;"	m	class:Dither
allocated_height	Android/TextUtil.hpp	/^    unsigned allocated_width, allocated_height;$/;"	m	struct:TextUtil::Texture
allocated_size	Screen/OpenGL/Texture.hpp	/^  PixelSize allocated_size;$/;"	m	class:GLTexture
allocated_width	Android/TextUtil.hpp	/^    unsigned allocated_width, allocated_height;$/;"	m	struct:TextUtil::Texture
allocation	Util/LightString.hxx	/^	AllocatedString<T> allocation;$/;"	m	class:LightString
allocator	Engine/Trace/Trace.hpp	/^  SliceAllocator<TraceDelta, 128u> allocator;$/;"	m	class:Trace
allocator	Util/GlobalSliceAllocator.hxx	/^SliceAllocator<T, size> GlobalSliceAllocator<T, size>::allocator;$/;"	m	class:GlobalSliceAllocator
allocator	Util/SliceAllocator.hxx	/^	static Allocator allocator;$/;"	m	class:GlobalSliceAllocator
allow_climb	Engine/Route/Config.hpp	/^  bool allow_climb;$/;"	m	struct:RoutePlannerConfig
allow_edit	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  const bool allow_edit;$/;"	m	class:final
allow_name_change	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const bool allow_name_change;$/;"	m	class:final	file:
allow_partial	Engine/GlideSolvers/MacCready.cpp	/^  const bool allow_partial;$/;"	m	class:MacCreadyVopt	file:
allowed_characters	Form/DataField/Prefix.hpp	/^  AllowedCharactersFunction allowed_characters;$/;"	m	class:final
alpha	MapWindow/OverlayBitmap.hpp	/^  float alpha = 1;$/;"	m	class:final
alpha	Screen/FB/mxcfb.h	/^	int alpha;$/;"	m	struct:mxcfb_gbl_alpha
alpha	Screen/Memory/Color.hpp	/^  uint8_t alpha;$/;"	m	class:Color
alpha	Screen/Memory/MMX.hpp	/^  uint8_t alpha;$/;"	m	class:MMXAlphaPixelOperations
alpha	Screen/Memory/NEON.hpp	/^  uint8_t alpha;$/;"	m	class:NEONAlphaPixelOperations
alpha	Screen/Memory/PixelOperations.hpp	/^  const int alpha;$/;"	m	class:PixelAlphaOperation
alpha_fragment_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char alpha_fragment_shader[] =$/;"	v	file:
alpha_in_pixel	Screen/FB/mxcfb.h	/^	int alpha_in_pixel;$/;"	m	struct:mxcfb_loc_alpha
alpha_phy_addr0	Screen/FB/mxcfb.h	/^	unsigned long alpha_phy_addr0;$/;"	m	struct:mxcfb_loc_alpha
alpha_phy_addr1	Screen/FB/mxcfb.h	/^	unsigned long alpha_phy_addr1;$/;"	m	struct:mxcfb_loc_alpha
alpha_projection	Screen/OpenGL/Shaders.cpp	/^  GLint alpha_projection, alpha_texture;$/;"	m	namespace:OpenGL	file:
alpha_shader	Screen/OpenGL/Shaders.cpp	/^  GLProgram *alpha_shader;$/;"	m	namespace:OpenGL	file:
alpha_texture	Screen/OpenGL/Shaders.cpp	/^  GLint alpha_projection, alpha_texture;$/;"	m	namespace:OpenGL	file:
alpha_vertex_shader	Screen/OpenGL/Shaders.cpp	/^static const char *const alpha_vertex_shader = texture_vertex_shader;$/;"	v	file:
alsa_error_handler_stub	Audio/ALSAPCMPlayer.cpp	/^static void alsa_error_handler_stub(const char *, int, const char *,$/;"	f	file:
alsa_handle	Audio/ALSAPCMPlayer.hpp	/^  AlsaHandleUniquePtr alsa_handle = MakeAlsaHandleUniquePtr();$/;"	m	class:ALSAPCMPlayer
alsa_lock	Audio/VolumeController.hpp	/^  Mutex alsa_lock;$/;"	m	class:final
alsa_mixer_handle	Audio/VolumeController.hpp	/^  snd_mixer_t *alsa_mixer_handle = nullptr;$/;"	m	class:final
alsa_mixer_initialised	Audio/VolumeController.hpp	/^  bool alsa_mixer_initialised = false;$/;"	m	class:final
alt	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD alt:14;$/;"	m	struct:IMI::FixB
alt1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD alt1:8;$/;"	m	struct:IMI::FixB2
alt2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD alt2:7;$/;"	m	struct:IMI::FixB2
alt_buffer_data	Screen/FB/mxcfb.h	/^	struct mxcfb_alt_buffer_data alt_buffer_data;$/;"	m	struct:mxcfb_update_data	typeref:struct:mxcfb_update_data::mxcfb_alt_buffer_data
alt_diff_filter	Engine/Util/AircraftStateFilter.hpp	/^  DiffFilter x_diff_filter, y_diff_filter, alt_diff_filter;$/;"	m	class:AircraftStateFilter
alt_low_pass	Engine/Util/AircraftStateFilter.hpp	/^  Filter x_low_pass, y_low_pass, alt_low_pass;$/;"	m	class:AircraftStateFilter
alt_update_region	Screen/FB/mxcfb.h	/^	struct mxcfb_rect alt_update_region;	\/* region within buffer to update *\/$/;"	m	struct:mxcfb_alt_buffer_data	typeref:struct:mxcfb_alt_buffer_data::mxcfb_rect
altair_pro_driver	Device/Driver/AltairPro.cpp	/^const struct DeviceRegister altair_pro_driver = {$/;"	v	typeref:struct:DeviceRegister
alternate_infobox_panels	InfoBoxes/Content/Alternate.cpp	/^InfoBoxPanel alternate_infobox_panels[] = {$/;"	v	file:
alternates	Dialogs/Task/AlternatesListDialog.cpp	/^  AlternateList alternates;$/;"	m	class:final	file:
alternates	Engine/Task/Unordered/AlternateTask.hpp	/^  AlternateList alternates;$/;"	m	class:final
altitude	Cloud/Client.hpp	/^  int altitude;$/;"	m	struct:CloudClient
altitude	Computer/ClimbAverageCalculator.hpp	/^    double altitude;$/;"	m	struct:ClimbAverageCalculator::HistoryItem
altitude	Computer/GlideRatioCalculator.hpp	/^    int altitude;$/;"	m	struct:GlideRatioCalculator::Record
altitude	Computer/Wind/MeasurementList.hpp	/^  double altitude;               \/**< Altitude of fix *\/$/;"	m	struct:WindMeasurement
altitude	Dialogs/Traffic/TrafficList.cpp	/^    int altitude;$/;"	m	struct:TrafficListWidget::Item	file:
altitude	Engine/Airspace/AirspaceAltitude.hpp	/^  double altitude;$/;"	m	struct:AirspaceAltitude
altitude	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  double altitude;$/;"	m	struct:AirspaceInterceptSolution
altitude	Engine/Navigation/Aircraft.hpp	/^  double altitude;$/;"	m	struct:AltitudeState
altitude	Engine/Task/Stats/StartStats.hpp	/^  double altitude;$/;"	m	struct:StartStats
altitude	Engine/Trace/Point.hpp	/^  RoughAltitude altitude;$/;"	m	class:TracePoint
altitude	FLARM/Traffic.hpp	/^  RoughAltitude altitude;$/;"	m	class:FlarmTraffic::AircraftType
altitude	FlightStatistics.hpp	/^  LeastSquares altitude;$/;"	m	class:FlightStatistics
altitude	Geo/Flat/FlatGeoPoint.hpp	/^  int altitude;$/;"	m	struct:AFlatGeoPoint
altitude	Geo/GeoPoint.hpp	/^  double altitude;$/;"	m	struct:AGeoPoint
altitude	GliderLink/Traffic.hpp	/^  RoughAltitude altitude;$/;"	m	struct:GliderLinkTraffic
altitude	MapWindow/Items/MapItem.hpp	/^  int altitude;$/;"	m	struct:SkyLinesTrafficMapItem
altitude	Tracking/SkyLines/Data.hpp	/^    int altitude;$/;"	m	struct:SkyLinesTracking::Data::Traffic
altitude	Tracking/SkyLines/Protocol.hpp	/^    int16_t altitude;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
altitude	Tracking/SkyLines/Protocol.hpp	/^  int16_t altitude;$/;"	m	struct:SkyLinesTracking::FixPacket
altitude	Tracking/TrackingGlue.hpp	/^  unsigned altitude;$/;"	m	class:final
altitude_above_terrain	Engine/Airspace/AirspaceAltitude.hpp	/^  double altitude_above_terrain;$/;"	m	struct:AirspaceAltitude
altitude_agl	Engine/Navigation/Aircraft.hpp	/^  double altitude_agl;$/;"	m	struct:AltitudeState
altitude_agl	NMEA/Derived.hpp	/^  double altitude_agl;$/;"	m	struct:TerrainInfo
altitude_agl_valid	NMEA/Derived.hpp	/^  bool altitude_agl_valid;$/;"	m	struct:TerrainInfo
altitude_available	FLARM/Traffic.hpp	/^  bool altitude_available;$/;"	m	class:FlarmTraffic::AircraftType
altitude_base	Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceAltitude altitude_base;$/;"	m	class:AbstractAirspace
altitude_base	FlightStatistics.hpp	/^  ConvexFilter altitude_base;$/;"	m	class:FlightStatistics
altitude_ceiling	FlightStatistics.hpp	/^  ConvexFilter altitude_ceiling;$/;"	m	class:FlightStatistics
altitude_difference	Engine/GlideSolvers/GlideResult.hpp	/^  double altitude_difference;$/;"	m	struct:GlideResult
altitude_difference	Engine/GlideSolvers/GlideState.hpp	/^  double altitude_difference;$/;"	m	struct:GlideState
altitude_gps	Logger/LoggerImpl.hpp	/^    double altitude_gps;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
altitude_infobox_panels	InfoBoxes/Content/Altitude.cpp	/^const InfoBoxPanel altitude_infobox_panels[] = {$/;"	v
altitude_mode	Renderer/AirspaceRendererSettings.hpp	/^  AirspaceDisplayMode altitude_mode;$/;"	m	struct:AirspaceRendererSettings
altitude_received	GliderLink/Traffic.hpp	/^  bool altitude_received;$/;"	m	struct:GliderLinkTraffic
altitude_terrain	FlightStatistics.hpp	/^  LeastSquares altitude_terrain;$/;"	m	class:FlightStatistics
altitude_top	Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceAltitude altitude_top;$/;"	m	class:AbstractAirspace
altitude_unit	Renderer/WaypointRenderer.cpp	/^  TCHAR altitude_unit[4];$/;"	m	class:final	file:
altitude_unit	Units/Settings.hpp	/^  Unit altitude_unit;$/;"	m	struct:UnitSetting
altitude_warning_margin	Engine/Airspace/AirspaceWarningConfig.hpp	/^  unsigned altitude_warning_margin;$/;"	m	struct:AirspaceWarningConfig
always_true	Engine/Airspace/Predicate/AirspacePredicate.cpp	/^const AirspacePredicateTrue AirspacePredicate::always_true =$/;"	m	class:AirspacePredicate	file:
always_true	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  static const AirspacePredicateTrue always_true;$/;"	m	class:AirspacePredicate
analgain	Terrain/jasper/jpc/jpc_dec.h	/^	int analgain;$/;"	m	struct:__anon147
analysis8_infobox_panels	InfoBoxes/Content/Contest.cpp	/^InfoBoxPanel analysis8_infobox_panels[] = {$/;"	v	file:
analysis_barograph_infobox_panels	InfoBoxes/Content/Trace.cpp	/^InfoBoxPanel analysis_barograph_infobox_panels[] = {$/;"	v	file:
analysis_widget	Dialogs/dlgAnalysis.cpp	/^  AnalysisWidget &analysis_widget;$/;"	m	class:ChartControl	file:
analyze	Terrain/jasper/jpc/jpc_qmfb.h	/^	int (*analyze)(jpc_fix_t *, int, int, int, int, int);$/;"	m	struct:__anon128
android_api_level	Android/Main.cpp	/^unsigned android_api_level;$/;"	v
angle	Audio/ToneSynthesiser.hpp	/^  unsigned volume = 100, angle = 0, increment = 0;$/;"	m	class:ToneSynthesiser
angle	Math/FastRotation.hpp	/^  Angle angle;$/;"	m	class:FastIntegerRotation
angle	Math/FastRotation.hpp	/^  Angle angle;$/;"	m	class:FastRotation
angle	Math/LeastSquares.hpp	/^  Angle angle;$/;"	m	struct:ErrorEllipse
angle	Topography/shapelib/mapserver.h	/^    double angle;$/;"	m	struct:labelObj
angle	Topography/shapelib/mapserver.h	/^    double angle;$/;"	m	struct:styleObj
angle1	Task/TaskFileSeeYou.cpp	/^  Angle angle1, angle2, angle12;$/;"	m	struct:SeeYouTurnpointInformation	file:
angle12	Task/TaskFileSeeYou.cpp	/^  Angle angle1, angle2, angle12;$/;"	m	struct:SeeYouTurnpointInformation	file:
angle2	Task/TaskFileSeeYou.cpp	/^  Angle angle1, angle2, angle12;$/;"	m	struct:SeeYouTurnpointInformation	file:
angle_tolerance	Engine/Contest/Solvers/Retrospective.hpp	/^  Angle angle_tolerance;$/;"	m	class:Retrospective
anglemode	Topography/shapelib/mapserver.h	/^    enum MS_POSITIONS_ENUM anglemode;$/;"	m	struct:labelObj	typeref:enum:labelObj::MS_POSITIONS_ENUM
angles	Topography/shapelib/mapserver.h	/^    double *angles;$/;"	m	struct:__anon30
angles	Topography/shapelib/mapserver.h	/^    double *angles;$/;"	m	struct:label_auto_result
annopoint	Topography/shapelib/mapserver.h	/^    pointObj annopoint;$/;"	m	struct:__anon45
annotext	Topography/shapelib/mapserver.h	/^    char *annotext;$/;"	m	struct:__anon45
ap	Geo/Flat/FlatEllipse.hpp	/^  FlatPoint f1, f2, ap;$/;"	m	class:FlatEllipse
append	Engine/Navigation/TraceHistory.cpp	/^TraceHistory::append(const MoreData &basic)$/;"	f	class:TraceHistory
append	Engine/Task/Stats/TaskSummary.hpp	/^  void append(const TaskSummaryPoint& tsp) {$/;"	f	struct:TaskSummary
append	Util/StaticString.hxx	/^	void append(const_pointer new_value) {$/;"	f	class:StaticStringBase
append	Util/StaticString.hxx	/^	void append(const_pointer new_value, size_type _length) {$/;"	f	class:StaticStringBase
append	Util/TrivialArray.hxx	/^	T &append() {$/;"	f	class:TrivialArray
append	Util/TrivialArray.hxx	/^	void append(const T &value) {$/;"	f	class:TrivialArray
append_serial	Engine/Contest/Solvers/TraceManager.hpp	/^  Serial append_serial;$/;"	m	class:TraceManager
append_serial	Engine/Trace/Trace.hpp	/^  Serial append_serial, modify_serial;$/;"	m	class:Trace
apple_font_mutex	Screen/Apple/Font.cpp	/^static Mutex apple_font_mutex;$/;"	v	file:
apply	Terrain/jasper/jas_cm.h	/^	int (*apply)(struct jas_cmpxform_s *pxform, jas_cmreal_t *in, jas_cmreal_t *out, int cnt);$/;"	m	struct:__anon96
apply_defaults	Input/InputDefaults.cpp	/^apply_defaults(InputConfig &input_config,$/;"	f	file:
approach_radius	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t approach_radius;$/;"	m	struct:CAI302::Pilot
approx	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t approx;$/;"	m	struct:__anon111
approx_scale	Geo/Flat/FlatProjection.hpp	/^  double approx_scale;$/;"	m	class:FlatProjection
approximation_scale	Topography/shapelib/mapserver.h	/^    double approximation_scale;$/;"	m	struct:rendererVTableObj
arc_boundary	Engine/Task/ObservationZones/SectorZone.hpp	/^  const bool arc_boundary;$/;"	m	class:SectorZone
archive	Terrain/RasterTerrain.hpp	/^  ZipArchive archive;$/;"	m	class:RasterTerrain
area	Repository/AvailableFile.hpp	/^  NarrowString<8> area;$/;"	m	struct:AvailableFile
area	Weather/PCMet/Overlays.hpp	/^  Area area;$/;"	m	struct:PCMet::OverlayInfo
area_labels	Weather/PCMet/Overlays.cpp	/^static constexpr const TCHAR *area_labels[] = {$/;"	v	file:
area_list	Dialogs/Weather/PCMetDialog.cpp	/^  ImageAreaListWidget &area_list;$/;"	m	class:final	file:
area_names	Weather/PCMet/Overlays.cpp	/^static constexpr const char *area_names[] = {$/;"	v	file:
areas	Dialogs/Weather/PCMetDialog.cpp	/^  const PCMet::ImageArea *areas = nullptr;$/;"	m	class:final	file:
areas	Weather/PCMet/Images.hpp	/^    const ImageArea *areas;$/;"	m	struct:PCMet::ImageType
areg	Terrain/jasper/jpc/jpc_mqdec.h	/^	uint_fast32_t areg;$/;"	m	struct:__anon133
args	OS/Args.hpp	/^  std::list<char *> args;$/;"	m	class:Args
argument_type	Screen/Memory/PixelOperations.hpp	/^  typedef color_type argument_type;$/;"	t	struct:ColorKey
argument_type	Screen/Memory/PixelOperations.hpp	/^  typedef color_type argument_type;$/;"	t	struct:PixelIntegerAdapter
arm_mapitem_list	MapWindow/GlueMapWindow.hpp	/^  bool arm_mapitem_list = false;$/;"	m	class:GlueMapWindow
armed	Engine/Task/Ordered/TaskAdvance.hpp	/^  bool armed = false;$/;"	m	class:TaskAdvance
array	Util/AllocatedGrid.hxx	/^	AllocatedArray<T> array;$/;"	m	class:AllocatedGrid
array	Util/ReusableArray.hpp	/^  AllocatedArray<T> array;$/;"	m	class:ReusableArray
array_buffer	Topography/TopographyFileRenderer.hpp	/^  GLArrayBuffer *array_buffer;$/;"	m	class:final
array_buffer_serial	Topography/TopographyFileRenderer.hpp	/^  Serial array_buffer_serial;$/;"	m	class:final
arrival_height_display	Renderer/WaypointRendererSettings.hpp	/^  } arrival_height_display;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::ArrivalHeightDisplay
arrival_radius	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t arrival_radius;$/;"	m	struct:CAI302::Pilot
arrow_active_pen	Look/TaskLook.hpp	/^  Pen arrow_active_pen;$/;"	m	struct:TaskLook
arrow_brush	Look/WindArrowLook.hpp	/^  Brush arrow_brush;$/;"	m	struct:WindArrowLook
arrow_inactive_pen	Look/TaskLook.hpp	/^  Pen arrow_inactive_pen;$/;"	m	struct:TaskLook
arrow_pen	Look/WindArrowLook.hpp	/^  Pen arrow_pen, tail_pen;$/;"	m	struct:WindArrowLook
as_display_list	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^static constexpr StaticEnumChoice as_display_list[] = {$/;"	v	file:
as_fill_mode_list	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^static constexpr StaticEnumChoice as_fill_mode_list[] = {$/;"	v	file:
as_label_selection_list	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^static constexpr StaticEnumChoice as_label_selection_list[] = {$/;"	v	file:
ascdata	Terrain/jasper/jas_icc.h	/^	char *ascdata; \/* ASCII invariant description *\/$/;"	m	struct:__anon183
ascent_height	Android/TextUtil.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:TextUtil
ascent_height	Screen/Font.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:Font
asclen	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t asclen;$/;"	m	struct:__anon183
asin	Math/Angle.hpp	/^  static Angle asin(double x) {$/;"	f	class:Angle
asio	Audio/ALSAPCMPlayer.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n	namespace:boost
asio	Audio/PCMPlayerFactory.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n	namespace:boost
asio	Device/Descriptor.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n	namespace:boost
asio	Device/MultipleDevices.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n	namespace:boost
asio	Device/Port/ConfiguredPort.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n	namespace:boost
asio	Event/Poll/X11Queue.hpp	/^  boost::asio::posix::stream_descriptor asio;$/;"	m	class:X11EventQueue
asio	IO/Async/SignalListener.hpp	/^  boost::asio::posix::stream_descriptor asio;$/;"	m	class:SignalListener
asio_thread	IO/Async/GlobalAsioThread.cpp	/^AsioThread *asio_thread;$/;"	v
asset_number	Asset.cpp	/^TCHAR asset_number[100] = _T(""); \/\/4G17DW31L0HY");$/;"	v
assign	Util/StaticString.hxx	/^	void assign(const_pointer new_value) {$/;"	f	class:StaticStringBase
assign	Util/StaticString.hxx	/^	void assign(const_pointer new_value, size_type length) {$/;"	f	class:StaticStringBase
assoc	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t assoc;$/;"	m	struct:__anon113
astar_goal	Engine/Route/RoutePlanner.hpp	/^  RoutePoint astar_goal;$/;"	m	class:RoutePlanner
async	Device/Descriptor.hpp	/^  AsyncJobRunner async;$/;"	m	class:final
at	OS/FileMapping.hpp	/^  const void *at(size_t offset) const {$/;"	f	class:FileMapping
atc_infobox_panels	InfoBoxes/Content/Places.cpp	/^const InfoBoxPanel atc_infobox_panels[] = {$/;"	v
atc_reference	Computer/Settings.hpp	/^  GeoPoint atc_reference;$/;"	m	struct:PlacesOfInterestSettings
atr833_driver	Device/Driver/ATR833.cpp	/^const DeviceRegister atr833_driver = {$/;"	v
attitude	HorizonWidget.cpp	/^  AttitudeState attitude;$/;"	m	class:HorizonWindow	file:
attitude	NMEA/Info.hpp	/^  AttitudeState attitude;$/;"	m	struct:NMEAInfo
attr	Terrain/jasper/jas_icc.h	/^	jas_iccuint64_t attr; \/* device setup attributes *\/$/;"	m	struct:__anon189
attribute	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t attribute;$/;"	m	struct:CAI302::Navpoint
attributeBindingObj	Topography/shapelib/mapserver.h	/^  } attributeBindingObj;$/;"	t	typeref:struct:__anon29
attributes	XML/Node.hpp	/^    std::forward_list<Attribute> attributes;$/;"	m	struct:XMLNode::Data
attrs	Terrain/jasper/jas_icc.h	/^	jas_iccattr_t *attrs;$/;"	m	struct:__anon191
attrtab	Terrain/jasper/jas_icc.h	/^	jas_iccattrtab_t *attrtab;$/;"	m	struct:__anon193
audible_count	Audio/VarioSynthesiser.hpp	/^  size_t audible_count;$/;"	m	class:final
audible_remaining	Audio/VarioSynthesiser.hpp	/^  size_t audible_remaining, silence_remaining;$/;"	m	class:final
audio	Dialogs/Device/Vega/Schemes.hpp	/^  } audio[6];$/;"	m	struct:VEGA_SCHEME	typeref:struct:VEGA_SCHEME::Audio
audio_deadband_parameters	Dialogs/Device/Vega/AudioDeadbandParameters.hpp	/^VegaParametersWidget::StaticParameter audio_deadband_parameters[] = {$/;"	v
audio_mode_parameters	Dialogs/Device/Vega/AudioModeParameters.hpp	/^VegaParametersWidget::StaticParameter audio_mode_parameters[] = {$/;"	v
audio_pages	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static const char *const audio_pages[] = {$/;"	v	file:
ausgabe	Device/Driver/Volkslogger/grecord.h	/^  FILE *ausgabe;$/;"	m	class:GRECORD
auto_bugs	Computer/Settings.hpp	/^  bool auto_bugs;$/;"	m	struct:PolarSettings
auto_close	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^static bool auto_close = true;$/;"	v	file:
auto_close_dialog	Gauge/TrafficSettings.hpp	/^  bool auto_close_dialog;$/;"	m	struct:TrafficSettings
auto_logger	Logger/Settings.hpp	/^  } auto_logger;$/;"	m	struct:LoggerSettings	typeref:class:LoggerSettings::AutoLogger
auto_logger_list	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^static constexpr StaticEnumChoice auto_logger_list[] = {$/;"	v	file:
auto_mac_cready	NMEA/Derived.hpp	/^  double auto_mac_cready;$/;"	m	struct:DerivedInfo
auto_mac_cready_available	NMEA/Derived.hpp	/^  Validity auto_mac_cready_available;$/;"	m	struct:DerivedInfo
auto_mc	Engine/Task/TaskBehaviour.hpp	/^  bool auto_mc;$/;"	m	struct:TaskBehaviour
auto_mc	InfoBoxes/Panel/MacCreadySetup.cpp	/^  CheckBoxControl auto_mc;$/;"	m	class:MacCreadySetupPanel	file:
auto_mc_mode	Engine/Task/TaskBehaviour.hpp	/^  AutoMCMode auto_mc_mode;$/;"	m	struct:TaskBehaviour
auto_qnh	Computer/GlideComputerAirData.hpp	/^  AutoQNH auto_qnh;$/;"	m	class:GlideComputerAirData
auto_size	Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(false)$/;"	f
auto_size	Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(true)$/;"	f
auto_size	Dialogs/WidgetDialog.cpp	/^   full(true), auto_size(false)$/;"	f
auto_size	Dialogs/WidgetDialog.hpp	/^  bool auto_size;$/;"	m	class:WidgetDialog
auto_switch	PageSettings.hpp	/^    bool auto_switch;$/;"	m	struct:PageLayout::InfoBoxConfig
auto_zoom	Gauge/TrafficSettings.hpp	/^  bool auto_zoom;$/;"	m	struct:TrafficSettings
auto_zoom_distance	NMEA/Derived.hpp	/^  double auto_zoom_distance;$/;"	m	struct:DerivedInfo
auto_zoom_enabled	MapSettings.hpp	/^  bool auto_zoom_enabled;$/;"	m	struct:MapSettings
autoangle	Topography/shapelib/mapserver.h	/^    int autoangle;$/;"	m	struct:styleObj
autominfeaturesize	Topography/shapelib/mapserver.h	/^    int autominfeaturesize; \/* true or false *\/$/;"	m	struct:labelObj
autopilot	Replay/DemoReplay.hpp	/^  TaskAutoPilot autopilot;$/;"	m	class:DemoReplay
auxiliary_enabled	UIState.hpp	/^  bool auxiliary_enabled;$/;"	m	struct:UIState
auxiliary_index	UIState.hpp	/^  unsigned auxiliary_index;$/;"	m	struct:UIState
av_dist	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  AvFilter<N_AV> av_dist;$/;"	m	class:IncrementalSpeedComputer
available	FLARM/Error.hpp	/^  Validity available;$/;"	v
available	FLARM/Status.hpp	/^  Validity available;$/;"	m	struct:FlarmStatus
available	FLARM/Version.hpp	/^  Validity available;$/;"	m	struct:FlarmVersion
available	NMEA/Acceleration.hpp	/^  bool available;$/;"	m	struct:AccelerationState
available	Topography/shapelib/mapserver.h	/^    size_t available;$/;"	m	struct:_autobuffer
available	Util/SliceAllocator.hxx	/^		Item *available;$/;"	m	struct:SliceAllocator::Area
available	Widget/RowFormWidget.hpp	/^    bool available;$/;"	m	struct:RowFormWidget::Row
average	Gauge/GaugeVario.hpp	/^    LabelValueGeometry average, gross, mc;$/;"	m	struct:GaugeVario::Geometry
average	NMEA/VarioInfo.hpp	/^  double average;$/;"	m	struct:VarioInfo
averageCalculatorMap	FLARM/FlarmCalculations.hpp	/^  AverageCalculatorMap averageCalculatorMap;$/;"	m	class:FlarmCalculations
average_delta_distance	Engine/Trace/Trace.hpp	/^  unsigned average_delta_distance;$/;"	m	class:Trace
average_delta_time	Engine/Trace/Trace.hpp	/^  unsigned average_delta_time;$/;"	m	class:Trace
average_di	Gauge/GaugeVario.hpp	/^  LabelValueDrawInfo average_di, mc_di, gross_di;$/;"	m	class:GaugeVario
average_eff_time	Computer/Settings.hpp	/^  AverageEffTime average_eff_time;$/;"	m	struct:ComputerSettings
average_gr	NMEA/VarioInfo.hpp	/^  double average_gr;$/;"	m	struct:VarioInfo
average_vario	Computer/GlideComputerAirData.hpp	/^  AverageVarioComputer average_vario;$/;"	m	class:GlideComputerAirData
awp	Replay/TaskAutoPilot.hpp	/^  unsigned awp;$/;"	m	class:TaskAutoPilot
axis_label_font	Look/ChartLook.hpp	/^  Font axis_label_font;$/;"	m	struct:ChartLook
axis_pen	Look/TraceHistoryLook.hpp	/^  Pen axis_pen;$/;"	m	struct:TraceHistoryLook
axis_value_font	Look/ChartLook.hpp	/^  Font axis_value_font;$/;"	m	struct:ChartLook
azimuth	Math/SunEphemeris.hpp	/^    Angle azimuth;$/;"	m	struct:SunEphemeris::Result
b	Computer/WaveResult.hpp	/^  GeoPoint a, b;$/;"	m	struct:WaveInfo
b	Engine/GlideSolvers/PolarCoefficients.hpp	/^  double a, b, c;$/;"	m	struct:PolarCoefficients
b	Geo/Flat/FlatEllipse.hpp	/^  double b;$/;"	m	class:FlatEllipse
b	Math/Filter.hpp	/^  double b[2];$/;"	m	class:Filter
b	Math/Histogram.hpp	/^  double b;$/;"	m	class:Histogram
b	Math/LeastSquares.hpp	/^  double b;$/;"	m	class:LeastSquares
b	Math/Line2D.hpp	/^  Point a, b;$/;"	m	struct:Line2D
b	Math/Quadratic.hpp	/^  const double b;$/;"	m	class:Quadratic
b	Screen/Memory/PixelOperations.hpp	/^  const color_type a, b;$/;"	m	struct:PixelOpaqueAlpha
b	Screen/OpenGL/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
b	Screen/PortableColor.hpp	/^  uint8_t b, g, r;$/;"	m	class:BGR8Color
b	Screen/PortableColor.hpp	/^  uint8_t r, g, b;$/;"	m	class:RGB8Color
b	Tracking/SkyLines/Data.hpp	/^    GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Data::Wave
b	Tracking/SkyLines/Protocol.hpp	/^  GeoPoint a, b;$/;"	m	struct:SkyLinesTracking::Wave
b	Util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
b50_driver	Device/Driver/BorgeltB50.cpp	/^const struct DeviceRegister b50_driver = {$/;"	v	typeref:struct:DeviceRegister
bBigEndian	Topography/shapelib/mapshape.c	/^static const bool bBigEndian = BYTE_ORDER == BIG_ENDIAN;$/;"	v	file:
bBigEndian	Topography/shapelib/maptree.c	/^static const bool bBigEndian = BYTE_ORDER == BIG_ENDIAN;$/;"	v	file:
bCurrentRecordModified	Topography/shapelib/mapshape.h	/^    int   bCurrentRecordModified;$/;"	m	struct:__anon83
bNoHeader	Topography/shapelib/mapshape.h	/^    int   bNoHeader;$/;"	m	struct:__anon83
bUpdated	Topography/shapelib/mapshape.h	/^    int   bUpdated;$/;"	m	struct:__anon82
bUpdated	Topography/shapelib/mapshape.h	/^    int   bUpdated;$/;"	m	struct:__anon83
b_ext	Device/Driver/LX/Convert.cpp	/^  LXN::ExtensionConfig k_ext, b_ext;$/;"	m	struct:Context	file:
b_ext	Device/Driver/LX/LXN.hpp	/^    const struct BExt *b_ext;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::BExt
ba	Device/Driver/Volkslogger/grecord.h	/^  uint8_t ba[3];$/;"	m	class:GRECORD
ba	Geo/Flat/FlatEllipse.hpp	/^  double ba() const {$/;"	f	class:FlatEllipse
back	Engine/Trace/Trace.hpp	/^  const TracePoint &back() const {$/;"	f	class:Trace
back	Util/StaticString.hxx	/^	value_type back() const {$/;"	f	class:StaticStringBase
back	Util/TrivialArray.hxx	/^	T &back() {$/;"	f	class:TrivialArray
back	Util/TrivialArray.hxx	/^	const T &back() const {$/;"	f	class:TrivialArray
background	Lua/Background.cpp	/^                              boost::intrusive::constant_time_size<false>> background;$/;"	m	namespace:Lua	file:
background	MapWindow/MapWindow.hpp	/^  BackgroundRenderer background;$/;"	m	class:MapWindow
background	MapWindow/TargetMapWindow.hpp	/^  BackgroundRenderer background;$/;"	m	class:TargetMapWindow
background_bitmap	Look/DialogLook.hpp	/^    Bitmap background_bitmap;$/;"	m	struct:DialogLook::__anon18
background_bitmap	Look/VarioLook.hpp	/^  Bitmap background_bitmap;$/;"	m	struct:VarioLook
background_brush	Look/DialogLook.hpp	/^  Brush background_brush;$/;"	m	struct:DialogLook
background_color	Look/ButtonLook.hpp	/^    Color background_color;$/;"	m	struct:ButtonLook::StateLook
background_color	Look/CrossSectionLook.hpp	/^  Color background_color;$/;"	m	struct:CrossSectionLook
background_color	Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20::__anon21
background_color	Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20::__anon22
background_color	Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20::__anon23
background_color	Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon19
background_color	Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20
background_color	Look/DialogLook.hpp	/^    Color background_color;$/;"	m	struct:DialogLook::__anon18
background_color	Look/DialogLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:DialogLook
background_color	Look/FlarmTrafficLook.hpp	/^  Color background_color;$/;"	m	struct:FlarmTrafficLook
background_color	Look/InfoBoxLook.hpp	/^  Color background_color, focused_background_color, pressed_background_color;$/;"	m	struct:InfoBoxLook
background_color	Look/TerminalLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:TerminalLook
background_color	Look/ThermalAssistantLook.hpp	/^  Color background_color;$/;"	m	struct:ThermalAssistantLook
background_color	Look/VarioLook.hpp	/^  Color background_color, text_color, dimmed_text_color;$/;"	m	struct:VarioLook
background_color	ProgressWindow.hpp	/^  Color background_color;$/;"	m	class:ProgressWindow
background_color	Screen/Memory/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
background_color	Screen/Memory/PixelOperations.hpp	/^  const color_type background_color, text_color;$/;"	m	struct:PixelOpaqueText
background_color	Screen/OpenGL/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
background_color	Screen/SolidContainerWindow.hpp	/^  Color background_color;$/;"	m	class:SolidContainerWindow
background_dirty	Gauge/GaugeVario.hpp	/^  bool background_dirty = true;$/;"	m	class:GaugeVario
background_lua_key	Lua/Background.cpp	/^static constexpr char background_lua_key[] = "xcsoar.background";$/;"	v	file:
background_mode	Screen/Memory/Canvas.hpp	/^  } background_mode = OPAQUE;$/;"	m	class:Canvas	typeref:enum:Canvas::__anon91
background_mode	Screen/OpenGL/Canvas.hpp	/^  } background_mode = OPAQUE;$/;"	m	class:Canvas	typeref:enum:Canvas::__anon93
background_x	Look/VarioLook.hpp	/^  unsigned background_x;$/;"	m	struct:VarioLook
backgroundcolor	Topography/shapelib/mapserver.h	/^    colorObj *backgroundcolor;$/;"	m	struct:__anon70
backgroundcolor	Topography/shapelib/mapserver.h	/^    colorObj backgroundcolor;$/;"	m	struct:__anon54
backgroundcolor	Topography/shapelib/mapserver.h	/^    colorObj backgroundcolor;$/;"	m	struct:styleObj
backgroundcolor	Topography/shapelib/mapserver.h	/^    colorObj color, outlinecolor, backgroundcolor;$/;"	m	struct:tileCacheObj
ballast	Engine/GlideSolvers/GlidePolar.hpp	/^  double ballast;$/;"	m	class:GlidePolar
ballast	Gauge/GaugeVario.hpp	/^    BallastGeometry ballast;$/;"	m	struct:GaugeVario::Geometry
ballast_capacity	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t ballast_capacity;$/;"	m	struct:CAI302::Polar
ballast_clock	BallastDumpManager.hpp	/^  PeriodClock ballast_clock;$/;"	m	class:BallastDumpManager
ballast_fraction	NMEA/ExternalSettings.hpp	/^  double ballast_fraction;$/;"	m	struct:ExternalSettings
ballast_fraction_available	NMEA/ExternalSettings.hpp	/^  Validity ballast_fraction_available;$/;"	m	struct:ExternalSettings
ballast_overload	NMEA/ExternalSettings.hpp	/^  double ballast_overload;$/;"	m	struct:ExternalSettings
ballast_overload_available	NMEA/ExternalSettings.hpp	/^  Validity ballast_overload_available;$/;"	m	struct:ExternalSettings
ballast_ratio	Engine/GlideSolvers/GlidePolar.hpp	/^  double ballast_ratio;$/;"	m	class:GlidePolar
ballast_timer_active	Computer/Settings.hpp	/^  bool ballast_timer_active;$/;"	m	struct:PolarSettings
bands	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_band_t *bands;$/;"	m	struct:__anon148
bands	Topography/shapelib/mapserver.h	/^    int  bands;$/;"	m	struct:__anon39
bandsitem	Topography/shapelib/mapserver.h	/^    char *bandsitem; \/* which item in a tile contains bands to use (tiled raster data only) *\/$/;"	m	struct:layerObj
bandsitemindex	Topography/shapelib/mapserver.h	/^    int bandsitemindex;$/;"	m	struct:layerObj
bank_angle	NMEA/Attitude.hpp	/^  Angle bank_angle;$/;"	m	struct:AttitudeState
bank_angle_available	NMEA/Attitude.hpp	/^  Validity bank_angle_available;$/;"	m	struct:AttitudeState
bank_angle_computed	NMEA/Attitude.hpp	/^  bool bank_angle_computed;$/;"	m	struct:AttitudeState
bar	Menu/ButtonLabel.cpp	/^static MenuBar *bar;$/;"	v	file:
bar_brush	Look/ChartLook.hpp	/^  Brush bar_brush;$/;"	m	struct:ChartLook
baro	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
baro_altitude	NMEA/Info.hpp	/^  double baro_altitude;$/;"	m	struct:NMEAInfo
baro_altitude	Replay/CatmullRomInterpolator.hpp	/^    double baro_altitude;$/;"	m	struct:CatmullRomInterpolator::Record
baro_altitude_available	NMEA/Info.hpp	/^  Validity baro_altitude_available;$/;"	m	struct:NMEAInfo
baro_altitude_weak	NMEA/Info.hpp	/^  bool baro_altitude_weak;$/;"	m	struct:NMEAInfo
base	Airspace/AirspaceParser.cpp	/^  AirspaceAltitude base;$/;"	m	struct:TempAirspaceType	file:
base	Renderer/AirspaceLabelList.hpp	/^    AirspaceAltitude base;$/;"	m	struct:AirspaceLabelList::Label
base	Screen/PortableColor.hpp	/^  BGR8Color base;$/;"	m	class:BGRA8Color
basic	Blackboard/RateLimitedBlackboardListener.hpp	/^  const MoreData *basic, *basic2;$/;"	m	class:RateLimitedBlackboardListener
basic	Renderer/WaypointRenderer.cpp	/^  const MoreData &basic;$/;"	m	class:final	file:
basic2	Blackboard/RateLimitedBlackboardListener.hpp	/^  const MoreData *basic, *basic2;$/;"	m	class:RateLimitedBlackboardListener
battery_level	NMEA/Info.hpp	/^  double battery_level;$/;"	m	struct:NMEAInfo
battery_level_available	NMEA/Info.hpp	/^  Validity battery_level_available;$/;"	m	struct:NMEAInfo
battery_timer	MainWindow.hpp	/^  BatteryTimer battery_timer;$/;"	m	class:MainWindow
batterystatus	Hardware/Battery.hpp	/^    enum batterystatus {$/;"	g	namespace:Power::Battery
baud	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
baud_rate	Device/Config.hpp	/^  unsigned baud_rate;$/;"	m	struct:DeviceConfig
baud_rate	Device/Port/K6BtPort.hpp	/^  unsigned baud_rate;$/;"	m	class:K6BtPort
baud_rate	Device/Port/SerialPort.hpp	/^  unsigned baud_rate;$/;"	m	class:SerialPort
baud_rates	Dialogs/Device/Vega/HardwareParameters.hpp	/^static constexpr StaticEnumChoice baud_rates[] = {$/;"	v
bb_children	Engine/Route/FlatTriangleFanTree.hpp	/^  FlatBoundingBox bb_children;$/;"	m	class:FlatTriangleFanTree
bb_screen	Renderer/TaskPointRenderer.hpp	/^  FlatBoundingBox bb_screen;$/;"	m	class:TaskPointRenderer
bbox	Topography/shapelib/mapserver.h	/^    rectObj bbox; \/* bounds of the whole cachePtr. Individual text and symbol sub bounds are found in the textsymbols *\/$/;"	m	struct:__anon46
bbox	Topography/shapelib/mapserver.h	/^    rectObj bbox;$/;"	m	struct:__anon44
bearing	Engine/Contest/Solvers/Retrospective.hpp	/^    Angle bearing;$/;"	m	struct:Retrospective::NearWaypoint
bearing	Geo/GeoVector.hpp	/^  Angle bearing;$/;"	m	struct:GeoVector
bearing	Geo/SpeedVector.hpp	/^  Angle bearing;$/;"	m	struct:SpeedVector
bearing	MapWindow/Items/MapItem.hpp	/^  Angle bearing;$/;"	m	struct:SelfMapItem
bearing_noise	Replay/TaskAutoPilot.hpp	/^  double bearing_noise;$/;"	m	struct:AutopilotParameters
bearing_pen	Look/TaskLook.hpp	/^  Pen bearing_pen;$/;"	m	struct:TaskLook
beep_type	Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
beep_types	Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice beep_types[] = {$/;"	v
begin	Cloud/Client.hpp	/^  List::const_iterator begin() const {$/;"	f	class:CloudClientContainer
begin	Cloud/Thermal.hpp	/^  List::const_iterator begin() const {$/;"	f	class:CloudThermalContainer
begin	Device/MultipleDevices.hpp	/^  const_iterator begin() {$/;"	f	class:final
begin	Engine/Airspace/AirspaceWarningManager.hpp	/^  const_iterator begin() const {$/;"	f	class:AirspaceWarningManager
begin	Engine/Trace/Trace.hpp	/^  const_iterator begin() const {$/;"	f	class:Trace
begin	Engine/Waypoint/Waypoints.hpp	/^  const_iterator begin() const {$/;"	f	class:Waypoints
begin	FLARM/ColorDatabase.hpp	/^  const_iterator begin() const {$/;"	f	class:FlarmColorDatabase
begin	FLARM/FlarmNetDatabase.hpp	/^  RecordMap::const_iterator begin() const {$/;"	f	class:FlarmNetDatabase
begin	FLARM/NameDatabase.hpp	/^  const_iterator begin() const {$/;"	f	class:FlarmNameDatabase
begin	Language/LanguageGlue.hpp	/^  const void * const begin;$/;"	m	struct:BuiltinLanguage
begin	Renderer/AirspaceLabelList.hpp	/^  const Label *begin() const {$/;"	f	class:AirspaceLabelList
begin	Renderer/WaypointLabelList.hpp	/^  const Label *begin() const {$/;"	f	class:WaypointLabelList
begin	Repository/FileRepository.hpp	/^  const_iterator begin() const {$/;"	f	struct:FileRepository
begin	Topography/TopographyFile.hpp	/^  const_iterator begin() const {$/;"	f	class:TopographyFile
begin	Util/AllocatedGrid.hxx	/^	constexpr const_iterator begin() const {$/;"	f	class:AllocatedGrid
begin	Util/AllocatedGrid.hxx	/^	iterator begin() {$/;"	f	class:AllocatedGrid
begin	Util/IterableSplitString.hxx	/^	const_iterator begin() const {$/;"	f	class:BasicIterableSplitString
begin	Util/OverwritingRingBuffer.hpp	/^  const_iterator begin() const {$/;"	f	class:TrivialOverwritingRingBuffer
begin	Util/Range.hpp	/^  I begin() const {$/;"	f	class:Range
begin	Util/TrivialArray.hxx	/^	constexpr const_iterator begin() const {$/;"	f	class:TrivialArray
begin	Util/TrivialArray.hxx	/^	constexpr iterator begin() {$/;"	f	class:TrivialArray
begin	Weather/NOAAStore.hpp	/^  const_iterator begin() const {$/;"	f	class:NOAAStore
begin	Weather/NOAAStore.hpp	/^  iterator begin() {$/;"	f	class:NOAAStore
begin	XML/Node.hpp	/^    const_iterator begin() const {$/;"	f	struct:XMLNode::Data
begin	XML/Node.hpp	/^  const_iterator begin() const {$/;"	f	class:XMLNode
begin_	Util/Range.hpp	/^  I begin_, end_;$/;"	m	class:Range
behaviour	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskBehaviour &behaviour;$/;"	m	class:AbstractTaskFactory
bestLD	Engine/GlideSolvers/GlidePolar.hpp	/^  double bestLD;$/;"	m	class:GlidePolar
best_alternate_id	Input/TaskEventObserver.hpp	/^  unsigned best_alternate_id;$/;"	m	class:final
best_cruise_track_brush	Look/TaskLook.hpp	/^  Brush best_cruise_track_brush;$/;"	m	struct:TaskLook
best_cruise_track_pen	Look/TaskLook.hpp	/^  Pen best_cruise_track_pen;$/;"	m	struct:TaskLook
best_d	Engine/Contest/Solvers/TriangleContest.hpp	/^  unsigned best_d;$/;"	m	class:TriangleContest
best_glide_speed	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t best_glide_speed;$/;"	m	struct:CAI302::Polar
best_ld	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t best_ld;$/;"	m	struct:CAI302::Polar
best_result	Engine/Contest/Solvers/AbstractContest.hpp	/^  ContestResult best_result;$/;"	m	class:AbstractContest
best_solution	Engine/Contest/Solvers/AbstractContest.hpp	/^  ContestTraceVector best_solution;$/;"	m	class:AbstractContest
bi	Screen/RawBitmap.hpp	/^  BITMAPINFO bi;$/;"	m	class:final
big_icon	Topography/TopographyFile.hpp	/^  const ResourceId icon, big_icon;$/;"	m	class:TopographyFile
big_logo	Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
big_resource_id	Topography/TopographyStore.cpp	/^  ResourceId resource_id, big_resource_id;$/;"	m	struct:__anon90	file:
big_title	Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
bindings	Topography/shapelib/mapserver.h	/^    attributeBindingObj bindings[MS_LABEL_BINDING_LENGTH];$/;"	m	struct:labelObj
bindings	Topography/shapelib/mapserver.h	/^    attributeBindingObj bindings[MS_STYLE_BINDING_LENGTH];$/;"	m	struct:styleObj
bindval	Topography/shapelib/mapserver.h	/^    attributeBindingObj bindval;$/;"	m	union:__anon34
bindvals	Topography/shapelib/mapserver.h	/^    hashTableObj bindvals;$/;"	m	struct:layerObj
bitmap	MapWindow/OverlayBitmap.hpp	/^  Bitmap bitmap;$/;"	m	class:final
bitmap	Renderer/BitmapButtonRenderer.hpp	/^  const Bitmap &bitmap;$/;"	m	class:BitmapButtonRenderer
bitmap	Screen/Bitmap.hpp	/^  HBITMAP bitmap = nullptr;$/;"	m	class:final
bitmap	Screen/GDI/BufferCanvas.hpp	/^  HBITMAP bitmap;$/;"	m	class:BufferCanvas
bitmap	Screen/Icon.hpp	/^  Bitmap bitmap;$/;"	m	class:MaskedIcon
bitmap	Screen/RawBitmap.hpp	/^  HBITMAP bitmap;$/;"	m	class:final
bitmap	Widget/ViewImageWidget.cpp	/^  const Bitmap *bitmap;$/;"	m	class:final	file:
bitmap	Widget/ViewImageWidget.hpp	/^  const Bitmap *bitmap;$/;"	m	class:ViewImageWidget
bitmapConfigValueOf_method	Android/NativeView.cpp	/^jmethodID NativeView::bitmapConfigValueOf_method;$/;"	m	class:NativeView	file:
bitmapConfigValueOf_method	Android/NativeView.hpp	/^  static jmethodID bitmapConfigValueOf_method;$/;"	m	class:NativeView
bitmapToTexture	Android/NativeView.hpp	/^  bool bitmapToTexture(jobject bmp, bool alpha, jint *result) {$/;"	f	class:NativeView
bitmapToTexture_method	Android/NativeView.cpp	/^jmethodID NativeView::bitmapToTexture_method;$/;"	m	class:NativeView	file:
bitmapToTexture_method	Android/NativeView.hpp	/^  static jmethodID bitmapToTexture_method;$/;"	m	class:NativeView
bitmap_progress_border	ProgressWindow.hpp	/^  Bitmap bitmap_progress_border;$/;"	m	class:ProgressWindow
bitmaps	Look/AirspaceLook.hpp	/^  Bitmap bitmaps[NUMAIRSPACEBRUSHES];$/;"	m	struct:AirspaceLook
bkBottom	InfoBoxes/Border.hpp	/^  bkBottom,$/;"	e	enum:BorderKind_t
bkLeft	InfoBoxes/Border.hpp	/^  bkLeft$/;"	e	enum:BorderKind_t
bkNone	InfoBoxes/Border.hpp	/^  bkNone,$/;"	e	enum:BorderKind_t
bkRight	InfoBoxes/Border.hpp	/^  bkRight,$/;"	e	enum:BorderKind_t
bkTop	InfoBoxes/Border.hpp	/^  bkTop,$/;"	e	enum:BorderKind_t
blabelaxes	Topography/shapelib/mapserver.h	/^    int     blabelaxes;$/;"	m	struct:__anon56
black_brush	Look/ChartLook.hpp	/^  Brush black_brush;$/;"	m	struct:ChartLook
black_outline	Renderer/AirspaceRendererSettings.hpp	/^  bool black_outline;$/;"	m	struct:AirspaceRendererSettings
black_pen	Look/ThermalBandLook.hpp	/^  Pen white_pen, black_pen;$/;"	m	struct:ThermalBandLook
blackboard	Blackboard/ScopeCalculatedListener.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:ScopeCalculatedListener
blackboard	Blackboard/ScopeGPSListener.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:ScopeGPSListener
blackboard	Dialogs/dlgAnalysis.cpp	/^  const FullBlackboard &blackboard;$/;"	m	class:ChartControl	file:
blackboard	Dialogs/dlgAnalysis.cpp	/^  const FullBlackboard &blackboard;$/;"	m	class:final	file:
blackboard	Gauge/BigThermalAssistantWidget.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:BigThermalAssistantWidget
blackboard	Gauge/GaugeFLARM.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:final
blackboard	Gauge/GaugeThermalAssistant.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:final
blackboard	Gauge/GaugeVario.hpp	/^  const FullBlackboard &blackboard;$/;"	m	class:GaugeVario
blackboard	Gauge/GlueGaugeVario.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:final
blackboard	Interface.cpp	/^InterfaceBlackboard CommonInterface::Private::blackboard;$/;"	m	class:CommonInterface::Private	file:
blackboard	Logger/GlueFlightLogger.hpp	/^  LiveBlackboard &blackboard;$/;"	m	class:GlueFlightLogger
blank_brush	Look/ChartLook.hpp	/^  Brush blank_brush;$/;"	m	struct:ChartLook
block_stf_enabled	Computer/Settings.hpp	/^  bool block_stf_enabled;$/;"	m	struct:FeaturesSettings
blocks	Renderer/LabelBlock.hpp	/^    BlockArray blocks;$/;"	m	class:LabelBlock::Bucket
bluefly_driver	Device/Driver/BlueFly/Register.cpp	/^const struct DeviceRegister bluefly_driver = {$/;"	v	typeref:struct:DeviceRegister
bluetooth_mac	Device/Config.hpp	/^  StaticString<32> bluetooth_mac;$/;"	m	struct:DeviceConfig
bmp	Screen/Bitmap.hpp	/^  jobject bmp = nullptr;$/;"	m	class:final
bmp085_class	Android/BMP085Device.cpp	/^static Java::TrivialClass bmp085_class;$/;"	v	file:
bmp085_ctor	Android/BMP085Device.cpp	/^static jmethodID bmp085_ctor, close_method;$/;"	v	file:
bo	Screen/EGL/TopCanvas.cpp	/^  struct gbm_bo *bo;$/;"	m	struct:drm_fb	typeref:struct:drm_fb::gbm_bo	file:
body	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE body[11];$/;"	m	struct:IMI::Fix
bold	Look/FontDescription.hpp	/^  bool bold, italic;$/;"	m	class:FontDescription
bold	Renderer/WaypointLabelList.hpp	/^    bool bold;$/;"	m	struct:WaypointLabelList::Label
bold_font	Look/DialogLook.hpp	/^  Font text_font, bold_font, small_font;$/;"	m	struct:DialogLook
bold_font	Look/WaypointLook.hpp	/^  const Font *font, *bold_font;$/;"	m	struct:WaypointLook
bold_font_path	Screen/FreeType/Font.cpp	/^static AllocatedPath bold_font_path = nullptr;$/;"	v	file:
bold_italic_font_path	Screen/FreeType/Font.cpp	/^static AllocatedPath bold_italic_font_path = nullptr;$/;"	v	file:
bool	Terrain/jasper/jas_types.h	116;"	d
boost	Audio/ALSAPCMPlayer.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n
boost	Audio/PCMPlayerFactory.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n
boost	Device/Descriptor.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n
boost	Device/MultipleDevices.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n
boost	Device/Port/ConfiguredPort.hpp	/^namespace boost { namespace asio { class io_context; }}$/;"	n
boost	Geo/Boost/GeoPoint.hpp	/^namespace boost {$/;"	n
border_color	Renderer/AirspaceRendererSettings.hpp	/^  RGB8Color border_color;$/;"	m	struct:AirspaceClassRendererSettings
border_color_changed	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool border_color_changed;$/;"	m	class:AirspaceClassRendererSettingsPanel
border_kind	InfoBoxes/InfoBoxWindow.hpp	/^  const unsigned border_kind;$/;"	m	class:InfoBoxWindow
border_pen	Look/AirspaceLook.hpp	/^  Pen border_pen;$/;"	m	struct:AirspaceClassLook
border_pen	Look/DialogLook.hpp	/^    Pen border_pen;$/;"	m	struct:DialogLook::__anon19
border_pen	Look/InfoBoxLook.hpp	/^  Pen border_pen;$/;"	m	struct:InfoBoxLook
border_style	InfoBoxes/InfoBoxSettings.hpp	/^  } border_style;$/;"	m	struct:InfoBoxSettings	typeref:class:InfoBoxSettings::BorderStyle
border_width	Renderer/AirspaceRendererSettings.hpp	/^  unsigned border_width;$/;"	m	struct:AirspaceClassRendererSettings
borrowed	Device/Descriptor.hpp	/^  bool borrowed;$/;"	m	class:final
borrowed1	Dialogs/Settings/dlgConfiguration.cpp	/^  bool borrowed2, borrowed1;$/;"	m	class:final	file:
borrowed2	Dialogs/Settings/dlgConfiguration.cpp	/^  bool borrowed2, borrowed1;$/;"	m	class:final	file:
bottom	Form/DigitEntry.hpp	/^  unsigned top, bottom, max_width;$/;"	m	class:CoordinateFormat
bottom	PageSettings.hpp	/^  } bottom;$/;"	m	struct:PageLayout	typeref:class:PageLayout::Bottom
bottom	Screen/Point.hpp	/^     right(origin.x + size.cx), bottom(origin.y + size.cy) {}$/;"	f	struct:PixelPoint::PixelRect
bottom	Screen/Point.hpp	/^    :left(0), top(0), right(size.cx), bottom(size.cy) {}$/;"	f	struct:PixelPoint::PixelRect
bottom	Screen/Point.hpp	/^    :left(_left), top(_top), right(_right), bottom(_bottom) {}$/;"	f	struct:PixelPoint::PixelRect
bottom	Screen/Point.hpp	/^    :left(src.left), top(src.top), right(src.right), bottom(src.bottom) {}$/;"	f	struct:PixelPoint::PixelRect
bottom	Screen/Point.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelPoint::PixelRect
bottom	Util/QuadTree.hxx	/^			:left(_left), top(_top), right(_right), bottom(_bottom) {}$/;"	f	struct:QuadTree::Rectangle
bottom	Util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
bottom_altitude	Tracking/SkyLines/Protocol.hpp	/^  int16_t bottom_altitude;$/;"	m	struct:SkyLinesTracking::Thermal
bottom_altitude	Tracking/SkyLines/Protocol.hpp	/^  int16_t bottom_altitude;$/;"	m	struct:SkyLinesTracking::Wave
bottom_left	Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
bottom_location	Cloud/Thermal.hpp	/^  AGeoPoint bottom_location, top_location;$/;"	m	struct:CloudThermal
bottom_location	Tracking/SkyLines/Data.hpp	/^    AGeoPoint bottom_location, top_location;$/;"	m	struct:SkyLinesTracking::Data::Thermal
bottom_location	Tracking/SkyLines/Protocol.hpp	/^  GeoPoint bottom_location;$/;"	m	struct:SkyLinesTracking::Thermal
bottom_margin	MapWindow/GlueMapWindow.hpp	/^  unsigned int bottom_margin = 0;$/;"	m	class:GlueMapWindow
bottom_position	ProgressWindow.hpp	/^  PixelRect bottom_position, progress_bar_position;$/;"	m	class:ProgressWindow
bottom_right	Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
bottom_widget	MainWindow.hpp	/^  Widget *bottom_widget = nullptr;$/;"	m	class:MainWindow
boundaries	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  const SearchPointVector *boundaries[MAX_STAGES];$/;"	m	class:TaskDijkstra
boundary_points	Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPointVector boundary_points;$/;"	m	class:SampledTaskPoint
boundary_scored	Engine/Task/Points/SampledTaskPoint.hpp	/^  const bool boundary_scored;$/;"	m	class:SampledTaskPoint
bounding_box	Engine/Contest/Solvers/TriangleContest.hpp	/^    FlatBoundingBox bounding_box;$/;"	m	struct:TriangleContest::TurnPointRange
bounding_box	Engine/Route/FlatTriangleFan.hpp	/^  FlatBoundingBox bounding_box;$/;"	m	class:FlatTriangleFan
bounds	Geo/Flat/TaskProjection.hpp	/^  GeoBounds bounds;$/;"	m	class:TaskProjection
bounds	MapWindow/OverlayBitmap.hpp	/^  GeoQuadrilateral bounds;$/;"	m	class:final
bounds	Terrain/RasterRenderer.hpp	/^  GeoBounds bounds = GeoBounds::Invalid();$/;"	m	class:RasterRenderer
bounds	Terrain/RasterTileCache.hpp	/^    GeoBounds bounds;$/;"	m	struct:RasterTileCache::CacheHeader
bounds	Terrain/RasterTileCache.hpp	/^  GeoBounds bounds;$/;"	m	class:RasterTileCache
bounds	Topography/XShape.hpp	/^  GeoBounds bounds;$/;"	m	class:XShape
bounds	Topography/shapelib/mapprimitive.h	/^  rectObj bounds;$/;"	m	struct:__anon79
bounds	Topography/shapelib/mapserver.h	/^    rectObj bounds;$/;"	m	struct:__anon47
bounds	Topography/shapelib/mapserver.h	/^    rectObj bounds;$/;"	m	struct:__anon51
bounds	Topography/shapelib/mapserver.h	/^    shapeObj bounds;$/;"	m	struct:__anon30
bounds	Topography/shapelib/mapserver.h	/^  label_bounds bounds;$/;"	m	struct:textPathObj
bounds	Topography/shapelib/mapshape.h	/^    rectObj bounds; \/* shape extent *\/$/;"	m	struct:__anon85
bounds	Util/QuadTree.hxx	/^	Rectangle bounds;$/;"	v
box_brush	Look/CheckBoxLook.hpp	/^    Brush box_brush;$/;"	m	struct:CheckBoxLook::StateLook
box_pen	Look/CheckBoxLook.hpp	/^    Pen box_pen;$/;"	m	struct:CheckBoxLook::StateLook
bpc	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t *bpc;$/;"	m	struct:__anon112
bpc	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t bpc;$/;"	m	struct:__anon109
bpcc	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_bpcc_t bpcc;$/;"	m	union:__anon117::__anon118
bpcs	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t *bpcs;$/;"	m	struct:__anon110
branch_and_bound	Engine/Contest/Solvers/TriangleContest.hpp	/^  std::multimap<unsigned, CandidateSet> branch_and_bound;$/;"	v
brgps	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  unsigned brgps, brpda;$/;"	m	class:final
bridge	Device/Port/AndroidPort.hpp	/^  PortBridge *bridge;$/;"	m	class:AndroidPort
bridge	Dialogs/Device/PortMonitor.cpp	/^  PortTerminalBridge bridge;$/;"	m	class:final	file:
bridge_icon	Look/WaypointLook.hpp	/^  MaskedIcon mountain_top_icon, bridge_icon, obstacle_icon;$/;"	m	struct:WaypointLook
brightness	Terrain/TerrainSettings.hpp	/^  short brightness;$/;"	m	struct:TerrainRendererSettings
browseformat	Topography/shapelib/mapserver.h	/^    char *browseformat;$/;"	m	struct:__anon42
brpda	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  unsigned brgps, brpda;$/;"	m	class:final
brush	Look/ButtonLook.hpp	/^    Brush brush;$/;"	m	struct:ButtonLook::__anon25
brush	Renderer/AirspaceRendererSettings.hpp	/^  uint8_t brush;$/;"	m	struct:AirspaceClassRendererSettings
brush	Screen/Memory/Canvas.hpp	/^  Brush brush;$/;"	m	class:Canvas
brush	Screen/OpenGL/Canvas.hpp	/^  Brush brush;$/;"	m	class:Canvas
brush	Topography/ShapeRenderer.hpp	/^  const Brush *brush;$/;"	m	class:ShapeRenderer
brush	Topography/TopographyFileRenderer.hpp	/^  Brush brush;$/;"	m	class:final
brush_above	Look/FinalGlideBarLook.hpp	/^  Brush brush_above;$/;"	m	struct:FinalGlideBarLook
brush_above_mc0	Look/FinalGlideBarLook.hpp	/^  Brush brush_above_mc0;$/;"	m	struct:FinalGlideBarLook
brush_active	Look/ThermalBandLook.hpp	/^  Brush brush_active;$/;"	m	struct:ThermalBandLook
brush_below	Look/FinalGlideBarLook.hpp	/^  Brush brush_below;$/;"	m	struct:FinalGlideBarLook
brush_below_landable	Look/FinalGlideBarLook.hpp	/^  Brush brush_below_landable;$/;"	m	struct:FinalGlideBarLook
brush_below_landable_mc0	Look/FinalGlideBarLook.hpp	/^  Brush brush_below_landable_mc0;$/;"	m	struct:FinalGlideBarLook
brush_below_mc0	Look/FinalGlideBarLook.hpp	/^  Brush brush_below_mc0;$/;"	m	struct:FinalGlideBarLook
brush_circling_climb	Look/ClimbPercentLook.hpp	/^  Brush brush_circling_climb;$/;"	m	struct:ClimbPercentLook
brush_circling_descent	Look/ClimbPercentLook.hpp	/^  Brush brush_circling_descent;$/;"	m	struct:ClimbPercentLook
brush_climb	Look/VarioBarLook.hpp	/^  Brush brush_climb;$/;"	m	struct:VarioBarLook
brush_climb_avg	Look/VarioBarLook.hpp	/^  Brush brush_climb_avg;$/;"	m	struct:VarioBarLook
brush_inactive	Look/ThermalBandLook.hpp	/^  Brush brush_inactive;$/;"	m	struct:ThermalBandLook
brush_mc	Look/VarioBarLook.hpp	/^  Brush brush_mc;$/;"	m	struct:VarioBarLook
brush_noncircling_climb	Look/ClimbPercentLook.hpp	/^  Brush brush_noncircling_climb;$/;"	m	struct:ClimbPercentLook
brush_sink	Look/VarioBarLook.hpp	/^  Brush brush_sink;$/;"	m	struct:VarioBarLook
brush_sink_avg	Look/VarioBarLook.hpp	/^  Brush brush_sink_avg;$/;"	m	struct:VarioBarLook
brushes	Look/AirspaceLook.hpp	/^  Brush brushes[NUMAIRSPACEBRUSHES];$/;"	m	struct:AirspaceLook
brutto_vario	NMEA/MoreData.hpp	/^  double brutto_vario;$/;"	m	struct:MoreData
brutto_vario_available	NMEA/MoreData.hpp	/^  Validity brutto_vario_available;$/;"	m	struct:MoreData
brx_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t brx_;$/;"	m	struct:__anon124
bry_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t bry_;$/;"	m	struct:__anon124
bsgn	Engine/Task/PathSolvers/IsolineCrossingFinder.cpp	51;"	d	file:
bssid	Kobo/WPASupplicant.hpp	/^  StaticString<32> bssid;$/;"	m	struct:WifiConfiguredNetworkInfo
bssid	Kobo/WPASupplicant.hpp	/^  StaticString<32> bssid;$/;"	m	struct:WifiStatus
bssid	Kobo/WPASupplicant.hpp	/^  StaticString<32> bssid;$/;"	m	struct:WifiVisibleNetwork
bssid	Kobo/WifiDialog.cpp	/^    StaticString<32> bssid;$/;"	m	struct:final::NetworkInfo	file:
bucket	Util/QuadTree.hxx	/^		Bucket *bucket;$/;"	m	class:iterator
bucket	Util/QuadTree.hxx	/^		const Bucket *bucket;$/;"	m	class:const_iterator
bucket_allocator	Util/QuadTree.hxx	/^	BucketAllocator bucket_allocator;$/;"	v
buckets	Renderer/LabelBlock.hpp	/^  Bucket buckets[BUCKET_COUNT];$/;"	m	class:LabelBlock
buckets	Util/Cache.hxx	/^	std::array<typename KeyMap::bucket_type, table_size> buckets;$/;"	m	class:Cache
buckets	Util/QuadTree.hxx	/^		Bucket buckets[N];$/;"	m	struct:QuadBucket
buf	Terrain/jasper/jas_cm.h	/^	long *buf;$/;"	m	struct:__anon94
buf	Terrain/jasper/jas_tvp.h	/^	char *buf;$/;"	m	struct:__anon106
buf32k	zzip/file.h	/^    char* buf32k;$/;"	m	struct:zzip_file
buf32k	zzip/lib.h	/^        char * volatile buf32k; $/;"	m	struct:zzip_dir::__anon212
buf_	Terrain/jasper/jas_stream.h	/^	jas_uchar *buf_;$/;"	m	struct:__anon122
buf_	Terrain/jasper/jpc/jpc_bs.h	/^	uint_fast16_t buf_;$/;"	m	struct:__anon129
bufbase_	Terrain/jasper/jas_stream.h	/^	jas_uchar *bufbase_;$/;"	m	struct:__anon120
buff512bits	Util/MD5.hpp	/^  uint8_t buff512bits[64];$/;"	m	class:MD5
buffer	Audio/ALSAPCMPlayer.hpp	/^  std::unique_ptr<int16_t[]> buffer;$/;"	m	class:ALSAPCMPlayer
buffer	Device/Driver/IMI/Protocol/MessageParser.cpp	/^    IMIBYTE buffer[IMICOMM_MAX_MSG_SIZE];$/;"	m	union:IMI::MessageParser::__anon201	file:
buffer	Device/Driver/Volkslogger/dbbconv.h	/^  uint8_t buffer[SIZE];$/;"	m	class:DBB
buffer	Device/Port/BufferedPort.hpp	/^  StaticFifoBuffer<uint8_t, 16384> buffer;$/;"	m	class:BufferedPort
buffer	Device/Util/LineSplitter.hpp	/^  Buffer buffer;$/;"	m	class:PortLineSplitter
buffer	Device/Util/NMEAReader.hpp	/^  StaticFifoBuffer<char, 256u> buffer;$/;"	m	class:PortNMEAReader
buffer	Dialogs/Device/PortMonitor.cpp	/^  StaticFifoBuffer<char, 1024> buffer;$/;"	m	class:final	file:
buffer	Dialogs/KnobTextEntry.cpp	/^  TCHAR buffer[MAX_TEXTENTRY];$/;"	m	class:final	file:
buffer	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  mutable BufferCanvas buffer;$/;"	m	class:TaskMapButtonRenderer
buffer	Form/DataField/Angle.cpp	/^static TCHAR buffer[16];$/;"	v	file:
buffer	Form/DataField/RoughTime.cpp	/^static TCHAR buffer[6];$/;"	v	file:
buffer	IGC/IGCWriter.hpp	/^  char buffer[MAX_IGC_BUFF];$/;"	m	class:IGCWriter
buffer	IO/BufferedOutputStream.hxx	/^	DynamicFifoBuffer<char> buffer;$/;"	m	class:BufferedOutputStream
buffer	IO/BufferedReader.hxx	/^	DynamicFifoBuffer<char> buffer;$/;"	m	class:BufferedReader
buffer	IO/GunzipReader.hxx	/^	StaticFifoBuffer<Bytef, 65536> buffer;$/;"	m	class:final
buffer	MapWindow/StencilMapCanvas.hpp	/^  Canvas &buffer;$/;"	m	class:StencilMapCanvas
buffer	Math/DifferentialWindowFilter.hpp	/^  OverwritingRingBuffer<Sample, N> buffer;$/;"	m	class:DifferentialWindowFilter
buffer	Monitor/AirspaceWarningMonitor.cpp	/^  StaticString<256> buffer;$/;"	m	class:final	file:
buffer	Monitor/MatTaskMonitor.cpp	/^  StaticString<256> buffer;$/;"	m	class:final	file:
buffer	Net/HTTP/ToBuffer.cpp	/^  uint8_t *buffer;$/;"	m	class:final	file:
buffer	Net/HTTP/ToBuffer.hpp	/^    void *buffer;$/;"	m	class:Net::DownloadToBufferJob
buffer	Screen/Bitmap.hpp	/^  WritableImageBuffer<BitmapPixelTraits> buffer = WritableImageBuffer<BitmapPixelTraits>::Empty();$/;"	m	class:final
buffer	Screen/BufferWindow.hpp	/^  BufferCanvas buffer;$/;"	m	class:BufferWindow
buffer	Screen/Custom/TopCanvas.hpp	/^  WritableImageBuffer<ActivePixelTraits> buffer;$/;"	m	class:DisplayOrientation
buffer	Screen/Custom/TopCanvas.hpp	/^  WritableImageBuffer<GreyscalePixelTraits> buffer;$/;"	m	class:DisplayOrientation
buffer	Screen/Memory/Canvas.hpp	/^  WritableImageBuffer<ActivePixelTraits> buffer;$/;"	m	class:Canvas
buffer	Screen/Memory/RasterCanvas.hpp	/^  WritableImageBuffer<PixelTraits> buffer;$/;"	m	class:RasterCanvas
buffer	Screen/RawBitmap.hpp	/^  RawColor *buffer;$/;"	m	class:final
buffer	Screen/RawBitmap.hpp	/^  const std::unique_ptr<RawColor[]> buffer;$/;"	m	class:final
buffer	Terrain/RasterTile.hpp	/^  RasterBuffer buffer;$/;"	m	class:RasterTile
buffer	Topography/shapelib/mapserver.h	/^    double buffer;      \/* the buffer size around the selection area *\/$/;"	m	struct:__anon37
buffer	Topography/shapelib/mapserver.h	/^    double buffer;$/;"	m	struct:__anon40
buffer	Topography/shapelib/mapserver.h	/^    int buffer; \/* space to reserve around a label *\/$/;"	m	struct:labelObj
buffer	Tracking/SkyLines/Client.hpp	/^  uint8_t buffer[4096];$/;"	m	class:SkyLinesTracking::Client
buffer	Tracking/SkyLines/Server.hpp	/^  uint8_t buffer[4096];$/;"	m	class:SkyLinesTracking::Server
buffer	Util/Cache.hxx	/^	std::array<Item, max_size> buffer;$/;"	m	class:Cache
buffer	Util/OverwritingRingBuffer.hpp	/^    const TrivialOverwritingRingBuffer &buffer;$/;"	m	class:TrivialOverwritingRingBuffer::const_iterator
buffer	Util/StaticString.hxx	/^	pointer buffer() {$/;"	f	class:StaticStringBase
bufferObj	Topography/shapelib/mapserver.h	/^  } bufferObj;$/;"	t	typeref:struct:_autobuffer
bufferPolyline	Topography/shapelib/mapprimitive.c	/^void bufferPolyline(shapeObj *p, shapeObj *op, int w)$/;"	f
buffer_canvas	MapWindow/MapWindow.hpp	/^  BufferCanvas buffer_canvas;$/;"	m	class:MapWindow
buffer_canvas	MapWindow/TargetMapWindow.hpp	/^  BufferCanvas buffer_canvas;$/;"	m	class:TargetMapWindow
buffer_data_source	Audio/PCMResourcePlayer.hpp	/^  PCMBufferDataSource buffer_data_source;$/;"	m	class:PCMResourcePlayer
buffer_drawn	MapWindow/StencilMapCanvas.hpp	/^  bool buffer_drawn;$/;"	m	class:StencilMapCanvas
buffer_generation	MapWindow/MapWindow.hpp	/^  unsigned ui_generation = 1, buffer_generation = 0;$/;"	m	class:MapWindow
buffer_pos	Device/Driver/IMI/Protocol/MessageParser.cpp	/^  unsigned buffer_pos;$/;"	m	namespace:IMI::MessageParser	file:
buffer_projection	MapWindow/MapWindow.hpp	/^  MapWindowProjection buffer_projection;$/;"	m	class:MapWindow
buffer_size	Audio/ALSAPCMPlayer.hpp	/^  snd_pcm_uframes_t buffer_size;$/;"	m	class:ALSAPCMPlayer
buffered	IGC/IGCWriter.hpp	/^  BufferedOutputStream buffered;$/;"	m	class:IGCWriter
buffered	IO/FileLineReader.hpp	/^  BufferedReader buffered;$/;"	m	class:FileLineReaderA
buffered	IO/ZipLineReader.hpp	/^  BufferedReader buffered;$/;"	m	class:ZipLineReaderA
buffers	Audio/AndroidPCMPlayer.hpp	/^  int16_t buffers[3][4096];$/;"	m	class:AndroidPCMPlayer
buffers	Screen/DoubleBufferWindow.hpp	/^  BufferCanvas buffers[2];$/;"	m	class:DoubleBufferWindow
bufmode_	Terrain/jasper/jas_stream.h	/^	int bufmode_;$/;"	m	struct:__anon120
bufsize_	Terrain/jasper/jas_stream.h	/^	int bufsize_;$/;"	m	struct:__anon120
bufsize_	Terrain/jasper/jas_stream.h	/^	size_t bufsize_;$/;"	m	struct:__anon122
bufstart_	Terrain/jasper/jas_stream.h	/^	jas_uchar *bufstart_;$/;"	m	struct:__anon120
bugs	Computer/Settings.hpp	/^  double bugs;$/;"	m	struct:PolarSettings
bugs	Engine/GlideSolvers/GlidePolar.hpp	/^  double bugs;$/;"	m	class:GlidePolar
bugs	Gauge/GaugeVario.cpp	/^  :ballast(look, rc), bugs(look, rc)$/;"	f
bugs	Gauge/GaugeVario.hpp	/^    BugsGeometry bugs;$/;"	m	struct:GaugeVario::Geometry
bugs	NMEA/ExternalSettings.hpp	/^  double bugs;$/;"	m	struct:ExternalSettings
bugs_available	NMEA/ExternalSettings.hpp	/^  Validity bugs_available;$/;"	m	struct:ExternalSettings
buildNumber	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD buildNumber;$/;"	m	struct:IMI::TDeviceInfo
bulk	Event/Android/Loop.hpp	/^  bool bulk;$/;"	m	class:EventLoop
bulk	Event/Poll/Loop.hpp	/^  bool bulk;$/;"	m	class:EventLoop
bulk	Event/SDL/Loop.hpp	/^  bool bulk;$/;"	m	class:EventLoop
bulk_baud_rate	Device/Config.hpp	/^  unsigned bulk_baud_rate;$/;"	m	struct:DeviceConfig
bulk_baud_rate	Device/Driver/LX/Internal.hpp	/^  unsigned bulk_baud_rate;$/;"	m	class:LXDevice
bulk_baud_rate	Device/Driver/LXERA/Internal.hpp	/^  unsigned bulk_baud_rate;$/;"	m	class:LXEraDevice
bulkrate	Device/Driver/Volkslogger/Internal.hpp	/^  unsigned const bulkrate;$/;"	m	class:VolksloggerDevice
busy	Device/Driver/LX/Internal.hpp	/^  std::atomic<bool> busy;$/;"	m	class:LXDevice
busy	Device/Driver/LXERA/Internal.hpp	/^  std::atomic<bool> busy;$/;"	m	class:LXEraDevice
busy	OS/SystemLoad.cpp	/^  long busy, idle;$/;"	m	struct:cpu	file:
busy	Thread/StandbyThread.hpp	/^  bool busy = false;$/;"	m	class:StandbyThread
button	Look/DialogLook.hpp	/^  ButtonLook button;$/;"	m	struct:DialogLook
button1	Dialogs/Settings/dlgConfiguration.cpp	/^    PixelRect expert, button2, button1;$/;"	m	struct:final::Layout	file:
button1	Dialogs/Settings/dlgConfiguration.cpp	/^  Button button2, button1;$/;"	m	class:final	file:
button2	Dialogs/Settings/dlgConfiguration.cpp	/^    PixelRect expert, button2, button1;$/;"	m	struct:final::Layout	file:
button2	Dialogs/Settings/dlgConfiguration.cpp	/^  Button button2, button1;$/;"	m	class:final	file:
button_height	Widget/KeyboardWidget.hpp	/^  unsigned button_height;$/;"	m	class:KeyboardWidget
button_renderer	Form/DigitEntry.hpp	/^  ButtonFrameRenderer button_renderer;$/;"	m	class:CoordinateFormat
button_renderer	Form/ScrollBar.hpp	/^  ButtonFrameRenderer button_renderer;$/;"	m	class:ScrollBar
button_width	Widget/KeyboardWidget.hpp	/^  unsigned button_width;$/;"	m	class:KeyboardWidget
buttons	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  ButtonPanelWidget *buttons;$/;"	m	class:PageListWidget	file:
buttons	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TaskEditButtons &buttons;$/;"	m	class:TaskEditPanel	file:
buttons	Dialogs/Task/Manager/TaskListPanel.cpp	/^  ButtonPanelWidget *buttons;$/;"	m	class:final	file:
buttons	Dialogs/Traffic/TrafficList.cpp	/^  TrafficListButtons *const buttons;$/;"	m	class:TrafficListWidget	file:
buttons	Dialogs/WidgetDialog.hpp	/^  ButtonPanel buttons;$/;"	m	class:WidgetDialog
buttons	Dialogs/dlgQuickMenu.cpp	/^  StaticArray<Window *, GridView::MAX_ITEMS> buttons;$/;"	m	class:final	file:
buttons	Form/ButtonPanel.hpp	/^  StaticArray<Button *, 8u> buttons;$/;"	m	class:ButtonPanel
buttons	Form/TabDisplay.hpp	/^  StaticArray<TabButton *, 32> buttons;$/;"	m	class:final
buttons	Form/TabMenuDisplay.hpp	/^  StaticArray<SubMenuButton, 32> buttons;$/;"	m	class:final
buttons	Menu/MenuBar.hpp	/^  Button buttons[MAX_BUTTONS];$/;"	m	class:MenuBar
buttons	Widget/ButtonPanelWidget.hpp	/^  ButtonPanel *buttons;$/;"	m	class:ButtonPanelWidget
buttons	Widget/KeyboardWidget.hpp	/^  CharacterButton buttons[MAX_BUTTONS];$/;"	m	class:KeyboardWidget
buttons	Widget/OffsetButtonsWidget.hpp	/^  Button *buttons[4];$/;"	m	class:OffsetButtonsWidget
buttons	Widget/QuestionWidget.hpp	/^  StaticArray<Button, 8> buttons;$/;"	m	class:QuestionWidget
buttons_widget	Dialogs/Weather/MapOverlayWidget.cpp	/^  ButtonPanelWidget *buttons_widget;$/;"	m	class:final	file:
buttons_widget	Dialogs/Weather/NOAAList.cpp	/^  ButtonPanelWidget *buttons_widget;$/;"	m	class:final	file:
bvertical	Topography/shapelib/mapserver.h	/^    int     bvertical;$/;"	m	struct:__anon56
byte_bas64	Device/Driver/Volkslogger/grecord.cpp	/^byte_bas64(const uint8_t *b)$/;"	f	file:
bytes_left	Device/Driver/IMI/Protocol/MessageParser.cpp	/^  unsigned bytes_left;$/;"	m	namespace:IMI::MessageParser	file:
bytes_per_block	Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 bytes_per_block;$/;"	m	struct:CAI302::FileASCII
bytes_per_block	Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 bytes_per_block;$/;"	m	struct:CAI302::FileBinary
c	Engine/GlideSolvers/PolarCoefficients.hpp	/^  double a, b, c;$/;"	m	struct:PolarCoefficients
c	Screen/Memory/PixelTraits.hpp	/^    color_type c;$/;"	m	union:BGRAPixelTraits::U
c	Util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
c36	IGC/IGCParser.cpp	/^static constexpr char c36[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";$/;"	v	file:
cLXWP0	Device/Driver/Condor.cpp	/^cLXWP0(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
c_probe_driver	Device/Driver/CProbe.cpp	/^const struct DeviceRegister c_probe_driver = {$/;"	v	typeref:struct:DeviceRegister
c_str	OS/Path.hpp	/^  const_pointer c_str() const {$/;"	f	class:AllocatedPath
c_str	OS/Path.hpp	/^  constexpr const_pointer c_str() const {$/;"	f	class:Path
c_str	Util/StringParser.hxx	/^	constexpr const_pointer c_str() const {$/;"	f	class:StringParser
cache	Topography/CachedTopographyRenderer.hpp	/^  TransparentRendererCache cache;$/;"	m	class:CachedTopographyRenderer
cache	Weather/Rasp/RaspRenderer.hpp	/^  RaspCache cache;$/;"	m	class:RaspRenderer
cache	zzip/lib.h	/^    } cache;$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::__anon212
cache_bounds	Topography/TopographyFile.hpp	/^  GeoBounds cache_bounds;$/;"	m	class:TopographyFile
cache_index	Terrain/jasper/jpc/jpc_dec.h	/^	int cache_index;$/;"	m	struct:__anon150
cache_path	IO/FileCache.hpp	/^  AllocatedPath cache_path;$/;"	m	class:FileCache
cache_shapes	Topography/shapelib/mapserver.h	/^    int cache_shapes; \/* whether to cache shapes in resultCacheObj *\/$/;"	m	struct:__anon40
cached_size	Engine/Trace/Trace.hpp	/^  unsigned cached_size;$/;"	m	class:Trace
cachesize	Topography/shapelib/mapserver.h	/^    int cachesize;$/;"	m	struct:__anon48
cachesize	Topography/shapelib/mapserver.h	/^    int cachesize;$/;"	m	struct:__anon51
cai302	Device/RecordedFlight.hpp	/^    uint8_t cai302;$/;"	m	union:RecordedFlightInfo::__anon197
cai302DeclAddWaypoint	Device/Driver/CAI302/Declare.cpp	/^cai302DeclAddWaypoint(Port &port, int DeclIndex, const Waypoint &way_point,$/;"	f	file:
cai302_driver	Device/Driver/CAI302/Register.cpp	/^const struct DeviceRegister cai302_driver = {$/;"	v	typeref:struct:DeviceRegister
cai302_id	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t cai302_id;$/;"	m	struct:CAI302::GeneralInfo
cai_PCAIB	Device/Driver/CAI302/Parser.cpp	/^cai_PCAIB(gcc_unused NMEAInputLine &line, gcc_unused NMEAInfo &info)$/;"	f	file:
cai_PCAID	Device/Driver/CAI302/Parser.cpp	/^cai_PCAID(NMEAInputLine &line, NMEAInfo &data)$/;"	f	file:
cai_lnav_driver	Device/Driver/CaiLNav.cpp	/^const struct DeviceRegister cai_lnav_driver = {$/;"	v	typeref:struct:DeviceRegister
cai_w	Device/Driver/CAI302/Parser.cpp	/^cai_w(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
calc	Geo/Memento/GeoVectorMemento.cpp	/^GeoVectorMemento::calc(const GeoPoint& _origin,$/;"	f	class:GeoVectorMemento
calc_crc	Device/Driver/LX/Protocol.cpp	/^LX::calc_crc(const void *p0, size_t len, uint8_t crc)$/;"	f	class:LX
calc_crc	Device/Driver/LXERA/Protocol.cpp	/^LXEra::calc_crc(const void *p0, size_t len, uint8_t crc)$/;"	f	class:LXEra
calc_crc_char	Device/Driver/LX/Protocol.cpp	/^LX::calc_crc_char(uint8_t d, uint8_t crc)$/;"	f	class:LX
calc_crc_char	Device/Driver/LXERA/Protocol.cpp	/^LXEra::calc_crc_char(uint8_t d, uint8_t crc)$/;"	f	class:LXEra
calc_cruise_efficiency	Engine/Task/TaskBehaviour.hpp	/^  bool calc_cruise_efficiency;$/;"	m	struct:TaskBehaviour
calc_effective_mc	Engine/Task/TaskBehaviour.hpp	/^  bool calc_effective_mc;$/;"	m	struct:TaskBehaviour
calc_flight_mode	Engine/Task/Stats/TaskStats.cpp	/^TaskStats::calc_flight_mode(const TaskBehaviour &settings)$/;"	f	class:TaskStats
calc_glide_required	Engine/Task/TaskBehaviour.hpp	/^  bool calc_glide_required;$/;"	m	struct:TaskBehaviour
calcstepsizes	Terrain/jasper/jpc/jpc_dec.c	/^static int calcstepsizes(uint_fast16_t refstepsize, int numrlvls,$/;"	f	file:
calculated	Blackboard/RateLimitedBlackboardListener.hpp	/^     basic(nullptr), basic2(nullptr), calculated(nullptr) {}$/;"	f	class:RateLimitedBlackboardListener
calculated	Blackboard/RateLimitedBlackboardListener.hpp	/^  const DerivedInfo *calculated;$/;"	m	class:RateLimitedBlackboardListener
calculated_info	Blackboard/BaseBlackboard.hpp	/^  DerivedInfo calculated_info;$/;"	m	class:BaseBlackboard
calculation_thread	Components.cpp	/^CalculationThread *calculation_thread;$/;"	v
calibration_parameters	Dialogs/Device/Vega/CalibrationParameters.hpp	/^VegaParametersWidget::StaticParameter calibration_parameters[] = {$/;"	v
call_sign_font	Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
callback	Event/DelayedNotify.hpp	/^  const Callback callback;$/;"	m	class:final
callback	Event/Notify.hpp	/^  const CallbackFunction callback;$/;"	m	class:final
callback	Event/PeriodicTimer.hpp	/^  const Callback callback;$/;"	m	class:final
callback	Event/Shared/Event.hpp	/^  Callback callback;$/;"	m	struct:Event
callback	Event/Timer.hpp	/^  const Callback callback;$/;"	m	class:final
callback	Lua/InputEvent.cpp	/^  Lua::Value callback;$/;"	m	class:final	file:
callback	Lua/Timer.cpp	/^  Lua::Value callback;$/;"	m	class:final	file:
callback	Terrain/Thread.hpp	/^  const std::function<void()> callback;$/;"	m	class:final
callback	Topography/Thread.hpp	/^  const std::function<void()> callback;$/;"	m	class:final
callback	Widget/CallbackWidget.hpp	/^  void (*const callback)();$/;"	m	class:CallbackWidget
calling_listeners	Blackboard/LiveBlackboard.hpp	/^  bool calling_listeners;$/;"	m	class:LiveBlackboard
callsign	Dialogs/Traffic/TrafficList.cpp	/^    const TCHAR *callsign;$/;"	m	struct:TrafficListWidget::Item	file:
callsign	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(4)> callsign;$/;"	m	struct:FlarmNetRecord
can_start_through_top	Engine/Task/ObservationZones/ObservationZone.hpp	/^  const bool can_start_through_top;$/;"	m	class:ObservationZone
cancelAllSensorSubscriptions	Android/InternalSensors.cpp	/^InternalSensors::cancelAllSensorSubscriptions()$/;"	f	class:InternalSensors
cancelSensorSubscription	Android/InternalSensors.cpp	/^InternalSensors::cancelSensorSubscription(int id)$/;"	f	class:InternalSensors
cancel_button	Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
cancel_button	Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
cancel_button	Dialogs/ProgressDialog.hpp	/^  Button cancel_button;$/;"	m	class:ProgressDialog
cancel_button	Dialogs/Task/AlternatesListDialog.cpp	/^  Button *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
cancel_callback	Dialogs/ProgressDialog.hpp	/^  std::function<void()> cancel_callback;$/;"	m	class:ProgressDialog
cancel_cond	Operation/ThreadedOperationEnvironment.hpp	/^  Cond cancel_cond;$/;"	m	class:ThreadedOperationEnvironment
cancel_flag	Operation/ThreadedOperationEnvironment.hpp	/^  bool cancel_flag = false;$/;"	m	class:ThreadedOperationEnvironment
cancel_method	Android/DownloadManager.cpp	/^static jmethodID enumerate_method, enqueue_method, cancel_method;$/;"	v	file:
cancel_method	Android/Vibrator.cpp	/^jmethodID Vibrator::cancel_method, Vibrator::vibrate_method;$/;"	m	class:Vibrator	file:
cancel_method	Android/Vibrator.hpp	/^  static jmethodID cancel_method, vibrate_method;$/;"	m	class:Vibrator
cancellable	Dialogs/JobDialog.hpp	/^  bool cancellable;$/;"	m	class:DialogJobRunner
candidate_list	Engine/Contest/Solvers/Retrospective.hpp	/^  NearWaypointList candidate_list;$/;"	m	class:Retrospective
canopy_brush	Look/AircraftLook.hpp	/^  Brush canopy_brush;$/;"	m	struct:AircraftLook
canopy_pen	Look/AircraftLook.hpp	/^  Pen canopy_pen;$/;"	m	struct:AircraftLook
canvas	CrossSection/AirspaceXSRenderer.cpp	/^  Canvas &canvas;$/;"	m	class:final	file:
canvas	MapWindow/MapCanvas.hpp	/^  Canvas &canvas;$/;"	m	class:MapCanvas
canvas	Renderer/ChartRenderer.hpp	/^  Canvas &canvas;$/;"	m	class:ChartRenderer
canvas	Renderer/TaskPointRenderer.hpp	/^  Canvas &canvas;$/;"	m	class:TaskPointRenderer
canvas	Renderer/WaypointIconRenderer.hpp	/^  Canvas &canvas;$/;"	m	class:WaypointIconRenderer
canvas	Screen/Memory/Murphy.hpp	/^  Canvas &canvas;$/;"	m	struct:MurphyIterator
capacity	Math/AvFilter.hpp	/^  unsigned capacity() const {$/;"	f	class:AvFilter
capacity	Util/ForeignFifoBuffer.hxx	/^	size_type head = 0, tail = 0, capacity;$/;"	m	class:ForeignFifoBuffer
capacity	Util/OverwritingRingBuffer.hpp	/^  unsigned capacity() const {$/;"	f	class:TrivialOverwritingRingBuffer
capacity	Util/ReservablePriorityQueue.hpp	/^  size_type capacity() const {$/;"	f	class:reservable_priority_queue
capacity	Util/TrivialArray.hxx	/^	size_type capacity() const { return max; }$/;"	f	class:TrivialArray
capital_height	Android/TextUtil.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:TextUtil
capital_height	Screen/Font.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:Font
caps	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t caps;$/;"	m	struct:__anon160
caption	Dialogs/JobDialog.hpp	/^  const TCHAR *caption;$/;"	m	class:DialogJobRunner
caption	Dialogs/ListPicker.cpp	/^  const TCHAR *const caption, *const help_text;$/;"	m	class:ListPickerWidget	file:
caption	Dialogs/dlgQuickMenu.cpp	/^  const StaticString<64> caption;$/;"	m	class:final	file:
caption	Form/CheckBox.hpp	/^  tstring caption;$/;"	m	class:CheckBoxControl
caption	Form/Control.hpp	/^  StaticString<254> caption;$/;"	m	class:WindowControl
caption	Form/Form.hpp	/^  tstring caption;$/;"	m	class:WndForm
caption	Form/TabDisplay.hpp	/^  StaticString<32> caption;$/;"	m	class:TabButton
caption	Form/TabMenuData.hpp	/^  const TCHAR *caption;$/;"	m	struct:TabMenuGroup
caption	Form/TabMenuDisplay.hpp	/^    const TCHAR *caption;$/;"	m	struct:final::MainMenuButton
caption	Form/TabMenuDisplay.hpp	/^    const TCHAR *caption;$/;"	m	struct:final::SubMenuButton
caption	InfoBoxes/Content/Factory.cpp	/^  const TCHAR *caption;$/;"	m	struct:MetaData	file:
caption	Look/DialogLook.hpp	/^  } caption;$/;"	m	struct:DialogLook	typeref:struct:DialogLook::__anon18
caption	Renderer/SymbolButtonRenderer.hpp	/^  const StaticString<16> caption;$/;"	m	class:SymbolButtonRenderer
caption	Renderer/TextButtonRenderer.hpp	/^  StaticString<64> caption;$/;"	m	class:TextButtonRenderer
caption	Widget/QuestionWidget.hpp	/^    const TCHAR *caption;$/;"	m	struct:QuestionWidget::Button
caption_background_color	Look/InfoBoxLook.hpp	/^  Color caption_background_color;$/;"	m	struct:InfoBoxLook
caption_width	Form/Edit.hpp	/^  int caption_width;$/;"	m	class:WndProperty
captions	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static const TCHAR *const captions[] = {$/;"	v	file:
capture	Screen/Window.hpp	/^  bool capture = false;$/;"	m	class:Window
capture_child	Screen/ContainerWindow.hpp	/^  Window *capture_child = nullptr;$/;"	m	class:ContainerWindow
catch_callback	Lua/Catch.cpp	/^static constexpr char catch_callback[] = "xcsoar.catch_callback";$/;"	v	file:
cavok	Weather/ParsedMETAR.hpp	/^  bool cavok;$/;"	m	struct:ParsedMETAR
cbEndTag	XML/Parser.cpp	/^    size_t cbEndTag;$/;"	m	struct:XML::Parser	file:
cbgheightexpn	Terrain/jasper/jpc/jpc_dec.h	/^	int cbgheightexpn;$/;"	m	struct:__anon148
cbgwidthexpn	Terrain/jasper/jpc/jpc_dec.h	/^	int cbgwidthexpn;$/;"	m	struct:__anon148
cblkctx	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t cblkctx;$/;"	m	struct:__anon142
cblkheightexpn	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t cblkheightexpn;$/;"	m	struct:__anon148
cblkheightexpn	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t cblkheightexpn;$/;"	m	struct:__anon142
cblkheightval	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t cblkheightval;$/;"	m	struct:__anon162
cblks	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cblk_t *cblks;$/;"	m	struct:__anon146
cblksty	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t cblksty;$/;"	m	struct:__anon162
cblkwidthexpn	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t cblkwidthexpn;$/;"	m	struct:__anon148
cblkwidthexpn	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t cblkwidthexpn;$/;"	m	struct:__anon142
cblkwidthval	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t cblkwidthval;$/;"	m	struct:__anon162
ccl	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR ccl[IMIDECL_CCL_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
ccps	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_ccp_t *ccps;$/;"	m	struct:__anon143
cdef	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_cdef_t cdef;$/;"	m	union:__anon117::__anon118
ce_lpf	Engine/Task/AbstractTask.hpp	/^  Filter ce_lpf;$/;"	m	class:AbstractTask
cell_size	Screen/TerminalWindow.hpp	/^  PixelSize cell_size;$/;"	m	class:TerminalWindow
cellsize	Topography/shapelib/mapserver.h	/^    double cellsize; \/* in map units *\/$/;"	m	struct:mapObj
center	Airspace/AirspaceParser.cpp	/^  GeoPoint center;$/;"	m	struct:TempAirspaceType	file:
center	Geo/Flat/FlatProjection.hpp	/^  GeoPoint center;$/;"	m	class:FlatProjection
center	Renderer/TextRenderer.hpp	/^  bool center = false, vcenter = false;$/;"	m	class:TextRenderer
center	Topography/TopographyFile.hpp	/^  GeoPoint center;$/;"	m	class:TopographyFile
ch	Event/Shared/Event.hpp	/^  unsigned ch;$/;"	m	struct:Event
change_type	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect type_label, change_type;$/;"	m	struct:final::Layout	file:
change_type	Dialogs/Task/TaskPointDialog.cpp	/^  Button change_type;$/;"	m	class:final	file:
changed	Dialogs/Airspace/dlgAirspace.cpp	/^  bool changed;$/;"	m	class:AirspaceSettingsListWidget	file:
changed	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static bool changed, dirty;$/;"	v	file:
changed	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool changed;$/;"	m	class:final	file:
changed	Dialogs/WidgetDialog.hpp	/^  bool changed = false;$/;"	m	class:WidgetDialog
channel_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::channel_type channel_type;$/;"	t	struct:PixelColoredAlpha
channel_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::channel_type channel_type;$/;"	t	struct:PixelOpaqueAlpha
channel_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::channel_type channel_type;$/;"	t	struct:PixelPerChannelAdapter
channel_type	Screen/Memory/PixelTraits.hpp	/^  typedef uint8_t channel_type;$/;"	t	struct:BGRAPixelTraits
channel_type	Screen/Memory/PixelTraits.hpp	/^  typedef uint8_t channel_type;$/;"	t	struct:GreyscalePixelTraits
channels	Audio/PCMPlayer.hpp	/^  unsigned channels;$/;"	m	class:PCMPlayer
channo	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t channo;$/;"	m	struct:__anon113
charHeight	Topography/shapelib/mapserver.h	/^    int charWidth, charHeight;$/;"	m	struct:__anon72
charWidth	Topography/shapelib/mapserver.h	/^    int charWidth, charHeight;$/;"	m	struct:__anon72
char_type	OS/Path.hpp	/^  typedef Path::char_type char_type;$/;"	t	class:AllocatedPath
char_type	OS/Path.hpp	/^  typedef wchar_t char_type;$/;"	t	class:Path
character	Airspace/AirspaceParser.cpp	/^  const TCHAR character;$/;"	m	struct:AirspaceClassCharCouple	file:
character	Form/CharacterButton.hpp	/^  unsigned character;$/;"	m	class:CharacterButton
character_function	Form/Form.hpp	/^  CharacterFunction character_function;$/;"	m	class:WndForm
charset	IO/ConvertLineReader.hpp	/^  Charset charset;$/;"	m	class:ConvertLineReader
chart	CrossSection/AirspaceXSRenderer.cpp	/^  const ChartRenderer &chart;$/;"	m	class:final	file:
chart	Dialogs/dlgAnalysis.cpp	/^  ChartControl chart;$/;"	m	class:final	file:
chart	Look/Look.hpp	/^  ChartLook chart;$/;"	m	struct:Look
chart_look	CrossSection/CrossSectionRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:CrossSectionRenderer
chart_look	Dialogs/dlgAnalysis.cpp	/^  const ChartLook &chart_look;$/;"	m	class:ChartControl	file:
chart_look	Renderer/FlightStatisticsRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:FlightStatisticsRenderer
chart_look	Renderer/ThermalBandRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:ThermalBandRenderer
chart_look	Renderer/TraceHistoryRenderer.hpp	/^  const ChartLook &chart_look;$/;"	m	class:TraceHistoryRenderer
check	Renderer/LabelBlock.cpp	/^bool LabelBlock::check(const PixelRect rc)$/;"	f	class:LabelBlock
checkFilter	OS/FileUtil.cpp	/^checkFilter(const TCHAR *filename, const TCHAR *filter)$/;"	f	file:
check_box	Look/DialogLook.hpp	/^  CheckBoxLook check_box;$/;"	m	struct:DialogLook
check_brush	Look/CheckBoxLook.hpp	/^    Brush check_brush;$/;"	m	struct:CheckBoxLook::StateLook
checked	Form/CheckBox.hpp	/^  bool checked, dragging, pressed;$/;"	m	class:CheckBoxControl
checked_append	Util/TrivialArray.hxx	/^	bool checked_append(const T &value) {$/;"	f	class:TrivialArray
checksum	Device/Driver/ATR833.cpp	/^  uint8_t checksum;$/;"	m	class:ATRBuffer	file:
checksum	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE checksum;$/;"	m	struct:IMI::Fix
checksum	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE checksum;$/;"	m	struct:IMI::FixE
checksum	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE checksum;$/;"	m	struct:IMI::FixK
checksum	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD checksum:8;$/;"	m	struct:IMI::FixB
checksum	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD checksum:8;$/;"	m	struct:IMI::FixB2
checksum	Device/Driver/KRT2.cpp	/^    uint8_t checksum;$/;"	m	struct:final::stx_msg	file:
children	Engine/Route/FlatTriangleFanTree.hpp	/^  LeafVector children;$/;"	m	class:FlatTriangleFanTree
children	Screen/ContainerWindow.hpp	/^  WindowList children;$/;"	m	class:ContainerWindow
children	Util/QuadTree.hxx	/^			:parent(nullptr), children(nullptr) {}$/;"	f	struct:Bucket
children	Util/QuadTree.hxx	/^		QuadBucket *children;$/;"	m	struct:Bucket
children	Util/RadixTree.hpp	/^    Node *next_sibling, *children;$/;"	m	struct:RadixTree::Node
children	Widget/PagerWidget.hpp	/^  StaticArray<Child, 32u> children;$/;"	m	class:PagerWidget
children	XML/Node.hpp	/^    std::list<XMLNode> children;$/;"	m	struct:XMLNode::Data
choices	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const StaticEnumChoice *choices;$/;"	m	struct:VegaParametersWidget::StaticParameter
chronological_list	Engine/Trace/Trace.hpp	/^  ChronologicalList chronological_list;$/;"	m	class:Trace
chronological_list	Util/Cache.hxx	/^	ItemList chronological_list;$/;"	m	class:Cache
cid	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR cid[IMIDECL_CID_LENGTH];$/;"	m	struct:IMI::FlightInfo
cid	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR cid[IMIDECL_CID_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
circle_buffer	Screen/OpenGL/Shapes.cpp	/^  GLArrayBuffer *circle_buffer, *small_circle_buffer;$/;"	m	namespace:OpenGL	file:
circle_color	Look/ThermalAssistantLook.hpp	/^  Color circle_color;$/;"	m	struct:ThermalAssistantLook
circle_count	Computer/Wind/CirclingWind.hpp	/^  int circle_count;$/;"	m	class:CirclingWind
circle_label_font	Look/ThermalAssistantLook.hpp	/^  Font circle_label_font, overlay_font;$/;"	m	struct:ThermalAssistantLook
circle_zoom_enabled	MapSettings.hpp	/^  bool circle_zoom_enabled;$/;"	m	struct:MapSettings
circling	Computer/Settings.hpp	/^  CirclingSettings circling;$/;"	m	struct:ComputerSettings
circling	Device/Driver/Vega/Volatile.hpp	/^    bool circling;$/;"	m	struct:Vega::VolatileData
circling	Gauge/ThermalAssistantRenderer.hpp	/^  CirclingInfo circling;$/;"	m	class:ThermalAssistantRenderer
circling	NMEA/CirclingInfo.hpp	/^  bool circling;$/;"	m	struct:CirclingInfo
circling_climb_percentage	NMEA/CirclingInfo.hpp	/^  double circling_climb_percentage;$/;"	m	struct:CirclingInfo
circling_computer	Computer/GlideComputerAirData.hpp	/^  CirclingComputer circling_computer;$/;"	m	class:GlideComputerAirData
circling_filter	Engine/Airspace/AirspaceWarningManager.hpp	/^  AircraftStateFilter circling_filter;$/;"	m	class:AirspaceWarningManager
circling_orientation	MapSettings.hpp	/^  MapOrientation circling_orientation;$/;"	m	struct:MapSettings
circling_percent	Look/Look.hpp	/^  ClimbPercentLook circling_percent;$/;"	m	struct:Look
circling_percentage	NMEA/CirclingInfo.hpp	/^  double circling_percentage;$/;"	m	struct:CirclingInfo
circling_scale	MapSettings.hpp	/^  double circling_scale;$/;"	m	struct:MapSettings
circling_scale	PageState.hpp	/^  double circling_scale;$/;"	m	struct:PageState
circling_wind	Computer/Wind/Computer.hpp	/^  CirclingWind circling_wind;$/;"	m	class:WindComputer
circling_wind	Computer/Wind/Settings.hpp	/^  bool circling_wind;$/;"	m	struct:WindSettings
clas	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t clas; \/* profile\/device class signature *\/$/;"	m	struct:__anon189
classObj	Topography/shapelib/mapserver.h	/^  struct classObj {$/;"	s
class_id	Device/Driver/LX/LXN.hpp	/^    char class_id[9];$/;"	m	struct:LXN::CompetitionClass
class_name	Screen/SingleWindow.hpp	/^  static constexpr const TCHAR *class_name = _T("XCSoarMain");$/;"	m	class:SingleWindow
class_warnings	Engine/Airspace/AirspaceWarningConfig.hpp	/^  bool class_warnings[AIRSPACECLASSCOUNT];$/;"	m	struct:AirspaceWarningConfig
classes	Look/AirspaceLook.hpp	/^  AirspaceClassLook classes[AIRSPACECLASSCOUNT];$/;"	m	struct:AirspaceLook
classes	Renderer/AirspaceRendererSettings.hpp	/^  AirspaceClassRendererSettings classes[AIRSPACECLASSCOUNT];$/;"	m	struct:AirspaceRendererSettings
classgroup	Topography/shapelib/mapserver.h	/^    char *classgroup;$/;"	m	struct:layerObj
classindex	Topography/shapelib/mapprimitive.h	/^  int classindex;$/;"	m	struct:__anon79
classindex	Topography/shapelib/mapserver.h	/^    int classindex;$/;"	m	struct:__anon46
classindex	Topography/shapelib/mapserver.h	/^    int classindex;$/;"	m	struct:__anon50
classitem	Topography/shapelib/mapserver.h	/^    char *classitem; \/* .DBF item to be used for symbol lookup *\/$/;"	m	struct:layerObj
classitemindex	Topography/shapelib/mapserver.h	/^    int classitemindex;$/;"	m	struct:layerObj
clb	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR clb[IMIDECL_CLB_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
cleanup	Topography/shapelib/mapserver.h	/^    int (*cleanup)(void *renderer_data);$/;"	m	struct:rendererVTableObj
clear	Cloud/Client.cpp	/^CloudClientContainer::clear()$/;"	f	class:CloudClientContainer
clear	Cloud/Thermal.cpp	/^CloudThermalContainer::clear()$/;"	f	class:CloudThermalContainer
clear	Device/SettingsMap.hpp	/^  void clear() {$/;"	f	class:DeviceSettingsMap
clear	Engine/Airspace/AirspaceWarningManager.hpp	/^  void clear() {$/;"	f	class:AirspaceWarningManager
clear	Engine/Navigation/TraceHistory.cpp	/^TraceHistory::clear()$/;"	f	class:TraceHistory
clear	Engine/Task/Stats/TaskSummary.hpp	/^  void clear() {$/;"	f	struct:TaskSummary
clear	Engine/Trace/Trace.cpp	/^Trace::clear()$/;"	f	class:Trace
clear	Input/InputParser.cpp	/^  void clear() {$/;"	f	struct:EventBuilder
clear	Util/OverwritingRingBuffer.hpp	/^  void clear() {$/;"	f	class:TrivialOverwritingRingBuffer
clear	Util/ReservablePriorityQueue.hpp	/^  void clear() {$/;"	f	class:reservable_priority_queue
clear	Util/TrivialArray.hxx	/^	void clear() {$/;"	f	class:TrivialArray
clear	Weather/TAF.hpp	/^  void clear() {$/;"	f	struct:TAF
clear_all	Dialogs/Task/Manager/TaskEditPanel.cpp	/^    PixelRect edit, down, up, reverse, clear_all;$/;"	m	struct:final::Layout	file:
clear_all_button	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button reverse_button, clear_all_button;$/;"	m	class:final	file:
clear_manual_button	Dialogs/Settings/WindSettingsPanel.hpp	/^  const bool edit_manual_wind, clear_manual_button, edit_trail_drift;$/;"	m	class:final
clear_manual_window	Dialogs/Settings/WindSettingsPanel.hpp	/^  Button *clear_manual_window;$/;"	m	class:final
clear_resultcache	Topography/shapelib/mapserver.h	/^    int clear_resultcache;$/;"	m	struct:__anon40
cli	Replay/Replay.hpp	/^  CatmullRomInterpolator *cli;$/;"	m	class:final
clicked_event	Dialogs/dlgQuickMenu.cpp	/^  unsigned clicked_event;$/;"	m	class:final	file:
client	Tracking/SkyLines/Glue.hpp	/^  Client client;$/;"	m	class:SkyLinesTracking::Glue
client_area	Form/Form.hpp	/^  SolidContainerWindow client_area;$/;"	m	class:WndForm
client_buffer	Tracking/SkyLines/Server.hpp	/^  Client client_buffer;$/;"	m	class:SkyLinesTracking::Server
client_key	Cloud/Thermal.hpp	/^  const uint64_t client_key;$/;"	m	struct:CloudThermal
client_rect	Form/Form.hpp	/^  PixelRect client_rect;$/;"	m	class:WndForm
client_trigger	Thread/SuspensibleThread.hpp	/^  Cond command_trigger, client_trigger;$/;"	m	class:SuspensibleThread
clients	Cloud/Data.hpp	/^  CloudClientContainer clients;$/;"	m	struct:CloudData
climb_bitmap	Look/VarioLook.hpp	/^  Bitmap climb_bitmap;$/;"	m	struct:VarioLook
climb_ceiling	Engine/Route/RoutePolars.hpp	/^  int climb_ceiling;$/;"	m	class:RoutePolars
climb_factor	Replay/TaskAutoPilot.hpp	/^  double climb_factor;$/;"	m	struct:AutopilotParameters
climb_history	NMEA/Derived.hpp	/^  ClimbHistory climb_history;$/;"	m	struct:DerivedInfo
climb_mode_icon	Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
climb_rate	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double climb_rate;$/;"	m	class:AirspaceAircraftPerformance
climb_rate	FLARM/Traffic.hpp	/^  double climb_rate;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate	GliderLink/Traffic.hpp	/^  double climb_rate;$/;"	m	struct:GliderLinkTraffic
climb_rate	Replay/TaskAutoPilot.hpp	/^  double climb_rate;$/;"	m	class:TaskAutoPilot
climb_rate_avg30s	FLARM/Traffic.hpp	/^  double climb_rate_avg30s;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate_avg30s_available	FLARM/Traffic.hpp	/^  bool climb_rate_avg30s_available;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate_received	FLARM/Traffic.hpp	/^  bool climb_rate_received;$/;"	m	class:FlarmTraffic::AircraftType
climb_rate_received	GliderLink/Traffic.hpp	/^  bool climb_rate_received;$/;"	m	struct:GliderLinkTraffic
climb_start_altitude	NMEA/CirclingInfo.hpp	/^  double climb_start_altitude;$/;"	m	struct:CirclingInfo
climb_start_altitude_te	NMEA/CirclingInfo.hpp	/^  double climb_start_altitude_te;$/;"	m	struct:CirclingInfo
climb_start_location	NMEA/CirclingInfo.hpp	/^  GeoPoint climb_start_location;$/;"	m	struct:CirclingInfo
climb_start_time	NMEA/CirclingInfo.hpp	/^  double climb_start_time;$/;"	m	struct:CirclingInfo
climbing_altitude	Computer/FlyingComputer.hpp	/^  double climbing_altitude;$/;"	m	class:FlyingComputer
climbing_clock	Computer/FlyingComputer.hpp	/^  StateClock<20, 5> climbing_clock;$/;"	m	class:FlyingComputer
clip	MapWindow/MapCanvas.hpp	/^  const GeoClip clip;$/;"	m	class:MapCanvas
clip	MapWindow/MapWindowGlideRange.cpp	/^  const GeoClip clip;$/;"	m	class:final	file:
clip	MapWindow/StencilMapCanvas.hpp	/^  const GeoClip clip;$/;"	m	class:StencilMapCanvas
clipLine	Topography/shapelib/mapprimitive.c	/^static int clipLine(double *x1, double *y1, double *x2, double *y2, rectObj rect)$/;"	f	file:
clip_altitude	Renderer/AirspaceRendererSettings.hpp	/^  unsigned clip_altitude;$/;"	m	struct:AirspaceRendererSettings
clip_code	Geo/GeoClip.cpp	/^  unsigned clip_code;$/;"	m	class:ClipGeoPoint	file:
clip_latitude	Geo/GeoClip.cpp	/^clip_latitude(const GeoPoint origin, const GeoPoint pt, Angle at)$/;"	f	file:
clip_longitude	Geo/GeoClip.cpp	/^clip_longitude(const GeoPoint origin, const GeoPoint pt, Angle at)$/;"	f	file:
clipboard	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^static InfoBoxSettings::Panel clipboard;$/;"	v	file:
clipboard_size	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^static unsigned clipboard_size;$/;"	v	file:
clock	Logger/LoggerFRecord.hpp	/^  GPSClock clock;$/;"	m	class:LoggerFRecord
clock	NMEA/Info.hpp	/^  double clock;$/;"	m	struct:NMEAInfo
clock	RateLimiter.hpp	/^  PeriodClock clock;$/;"	m	class:RateLimiter
clock	Replay/NmeaReplay.hpp	/^  ReplayClock clock;$/;"	m	class:NmeaReplay
clock	Replay/Replay.hpp	/^  PeriodClock clock;$/;"	m	class:final
clock	Screen/Custom/DoubleClick.hpp	/^  PeriodClock clock;$/;"	m	class:DoubleClick
clock	Screen/StopWatch.hpp	/^    clock_stamp_t clock;$/;"	m	struct:ScreenStopWatch::Marker
clock	Time/ReplayClock.hpp	/^  double clock;$/;"	m	class:ReplayClock
clock	Tracking/SkyLines/Glue.hpp	/^  GPSClock clock;$/;"	m	class:SkyLinesTracking::Glue
clock	Tracking/TrackingGlue.hpp	/^  PeriodClock clock;$/;"	m	class:final
clock	UIUtil/KineticManager.hpp	/^  PeriodClock clock;$/;"	m	class:KineticManager
clock_stamp_t	Screen/StopWatch.hpp	/^  typedef uint64_t clock_stamp_t;$/;"	t	class:ScreenStopWatch
close	Android/PortBridge.hpp	/^  void close(JNIEnv *env) {$/;"	f	class:PortBridge
close	Java/InputStream.hxx	/^		static void close(JNIEnv *env, jobject is) {$/;"	f	class:Java::InputStream
close	zzip/plugin.h	/^    int          (*close)(int fd);$/;"	m	struct:zzip_plugin_io
close_	Terrain/jasper/jas_stream.h	/^	int (*close_)(jas_stream_obj_t *obj);$/;"	m	struct:__anon119
close_button	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect copy_button, paste_button, close_button;$/;"	m	struct:final::Layout	file:
close_button	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  Button copy_button, paste_button, close_button;$/;"	m	class:final	file:
close_button	Dialogs/Task/Manager/TaskClosePanel.hpp	/^    PixelRect close_button, message, revert_button;$/;"	m	struct:final::Layout
close_button	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  Button close_button;$/;"	m	class:final
close_button	Dialogs/Task/TargetDialog.cpp	/^    PixelRect close_button;$/;"	m	struct:TargetWidget::Layout	file:
close_button	Dialogs/Task/TargetDialog.cpp	/^  Button close_button;$/;"	m	class:TargetWidget	file:
close_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect close_button;$/;"	m	struct:final::Layout	file:
close_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button close_button;$/;"	m	class:final	file:
close_button	Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
close_button	Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
close_button	Gauge/BigThermalAssistantWidget.hpp	/^  Button *close_button;$/;"	m	class:BigThermalAssistantWidget
close_button	Gauge/BigTrafficWidget.hpp	/^  Button *close_button;$/;"	m	class:TrafficWidget
close_button	Widget/ArrowPagerWidget.hpp	/^    PixelRect close_button;$/;"	m	struct:ArrowPagerWidget::Layout
close_button	Widget/ArrowPagerWidget.hpp	/^  Button close_button;$/;"	m	class:ArrowPagerWidget
close_db	Device/Driver/Volkslogger/dbbconv.cpp	/^void DBB::close_db(int kennung) {$/;"	f	class:DBB
close_logging_interval	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t close_logging_interval;$/;"	m	struct:CAI302::Pilot
close_method	Android/BMP085Device.cpp	/^static jmethodID bmp085_ctor, close_method;$/;"	v	file:
close_method	Android/GliderLink.cpp	/^jmethodID GliderLink::gl_ctor_id, GliderLink::close_method;$/;"	m	class:GliderLink	file:
close_method	Android/GliderLink.hpp	/^  static jmethodID gl_ctor_id, close_method;$/;"	m	class:GliderLink
close_method	Android/I2CbaroDevice.cpp	/^static jmethodID i2cbaro_ctor, close_method;$/;"	v	file:
close_method	Android/InternalSensors.cpp	/^jmethodID InternalSensors::gps_ctor_id, InternalSensors::close_method;$/;"	m	class:InternalSensors	file:
close_method	Android/InternalSensors.hpp	/^  static jmethodID gps_ctor_id, close_method;$/;"	m	class:InternalSensors
close_method	Android/NunchuckDevice.cpp	/^static jmethodID nunchuck_ctor, close_method;$/;"	v	file:
close_method	Android/PortBridge.cpp	/^jmethodID PortBridge::close_method;$/;"	m	class:PortBridge	file:
close_method	Android/PortBridge.hpp	/^  static jmethodID close_method;$/;"	m	class:PortBridge
close_method	Android/VoltageDevice.cpp	/^static jmethodID voltage_ctor, close_method;$/;"	v	file:
close_method	Java/InputStream.cxx	/^jmethodID Java::InputStream::close_method;$/;"	m	class:Java::InputStream	file:
close_method	Java/InputStream.hxx	/^		static jmethodID close_method, read_method;$/;"	m	class:Java::InputStream
closing	Device/Port/BufferedPort.hpp	/^  bool closing;$/;"	m	class:BufferedPort
closing_pairs	Engine/Contest/Solvers/TriangleContest.hpp	/^    std::map<unsigned, unsigned> closing_pairs;$/;"	m	struct:TriangleContest::ClosingPairs
closing_pairs	Engine/Contest/Solvers/TriangleContest.hpp	/^  ClosingPairs closing_pairs;$/;"	m	class:TriangleContest
cloud	Tracking/SkyLines/Settings.hpp	/^  CloudSettings cloud;$/;"	m	struct:SkyLinesTracking::Settings
cloud_base	Atmosphere/CuSonde.hpp	/^    double cloud_base;$/;"	m	struct:CuSonde::Level
cloud_base	Atmosphere/CuSonde.hpp	/^  double cloud_base;$/;"	m	class:CuSonde
cloud_client	Tracking/SkyLines/Glue.hpp	/^  Client cloud_client;$/;"	m	class:SkyLinesTracking::Glue
cloud_clock	Tracking/SkyLines/Glue.hpp	/^  GPSClock cloud_clock;$/;"	m	class:SkyLinesTracking::Glue
clrspc	Terrain/jasper/jas_cm.h	/^	int clrspc;$/;"	m	struct:__anon104
clrspc_	Terrain/jasper/jas_image.h	/^	jas_clrspc_t clrspc_;$/;"	m	struct:__anon124
clrspcconv	Terrain/jasper/jas_cm.h	/^		jas_cmclrspcconv_t clrspcconv;$/;"	m	union:jas_cmpxform_s::__anon101
cls	Android/BluetoothHelper.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:BluetoothHelper	file:
cls	Android/Environment.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:Environment	file:
cls	Android/IOIOHelper.cpp	/^Java::TrivialClass IOIOHelper::cls;$/;"	m	class:IOIOHelper	file:
cls	Android/IOIOHelper.hpp	/^  static Java::TrivialClass cls;$/;"	m	class:IOIOHelper
cls	Android/NativeBMP085Listener.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativeBMP085Listener	file:
cls	Android/NativeI2CbaroListener.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativeI2CbaroListener	file:
cls	Android/NativeInputListener.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativeInputListener	file:
cls	Android/NativeLeScanCallback.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativeLeScanCallback	file:
cls	Android/NativeNunchuckListener.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativeNunchuckListener	file:
cls	Android/NativePortListener.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativePortListener	file:
cls	Android/NativeView.cpp	/^Java::TrivialClass NativeView::cls;$/;"	m	class:NativeView	file:
cls	Android/NativeView.hpp	/^  static Java::TrivialClass cls;$/;"	m	class:NativeView
cls	Android/NativeVoltageListener.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:NativeVoltageListener	file:
cls	Android/SoundUtil.cpp	/^  static Java::TrivialClass cls;$/;"	m	namespace:SoundUtil	file:
cls	Android/TextUtil.cpp	/^static Java::TrivialClass cls;$/;"	v	file:
cls	Engine/Airspace/AirspaceSorter.hpp	/^  AirspaceClass cls;$/;"	m	struct:AirspaceFilterData
cls	Java/URL.cxx	/^Java::TrivialClass Java::URL::cls;$/;"	m	class:Java::URL	file:
cls	Java/URL.hxx	/^		static TrivialClass cls;$/;"	m	class:Java::URL
cls	Renderer/AirspaceLabelList.hpp	/^    AirspaceClass cls;$/;"	m	struct:AirspaceLabelList::Label
clsBitmap	Android/NativeView.cpp	/^Java::TrivialClass NativeView::clsBitmap;$/;"	m	class:NativeView	file:
clsBitmap	Android/NativeView.hpp	/^  static Java::TrivialClass clsBitmap;$/;"	m	class:NativeView
clsBitmapConfig	Android/NativeView.cpp	/^Java::TrivialClass NativeView::clsBitmapConfig;$/;"	m	class:NativeView	file:
clsBitmapConfig	Android/NativeView.hpp	/^  static Java::TrivialClass clsBitmapConfig;$/;"	m	class:NativeView
club_id	Tracking/SkyLines/Protocol.hpp	/^  uint32_t club_id;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
cluster	Topography/shapelib/mapserver.h	/^    clusterObj cluster;$/;"	m	struct:layerObj
clusterObj	Topography/shapelib/mapserver.h	/^  } clusterObj;$/;"	t	typeref:struct:__anon37
clut	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t *clut;$/;"	m	struct:__anon186
clut	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t *clut;$/;"	m	struct:__anon185
clutlen	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t clutlen;$/;"	m	struct:__anon185
clutlen	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t clutlen;$/;"	m	struct:__anon186
cm2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR cm2[IMIDECL_CM2_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
cm_aattime	Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorAATTime cm_aattime;$/;"	v	file:
cm_finalglide	Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorFinalGlide cm_finalglide;$/;"	v	file:
cm_glideterrain	Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorGlideTerrain cm_glideterrain;$/;"	v	file:
cm_landablereachable	Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorLandableReachable cm_landablereachable;$/;"	v	file:
cm_sunset	Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorSunset cm_sunset;$/;"	v	file:
cm_wind	Computer/ConditionMonitor/ConditionMonitors.cpp	/^static ConditionMonitorWind cm_wind;$/;"	v	file:
cmap	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_cmap_t cmap;$/;"	m	union:__anon117::__anon118
cmd	Device/Driver/LX/LXN.hpp	/^    const uint8_t *cmd;$/;"	m	union:LXN::Packet
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::BExt
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::CompetitionClass
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Date
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::End
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Event
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::ExtConfig
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::FlightInfo
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::KExt
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Origin
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Position
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Security
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Security7000
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::SecurityOld
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Serial
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Start
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Task
cmd	Device/Driver/LX/LXN.hpp	/^    uint8_t cmd;$/;"	m	struct:LXN::Version
cmd_CFL	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_CFL = 0x06,$/;"	e	enum:Volkslogger::Command
cmd_DIR	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_DIR = 0x01,$/;"	e	enum:Volkslogger::Command
cmd_ERO	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_ERO = 0x09,$/;"	e	enum:Volkslogger::Command
cmd_GFL	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_GFL = 0x02,$/;"	e	enum:Volkslogger::Command
cmd_GFS	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_GFS = 0x03,$/;"	e	enum:Volkslogger::Command
cmd_INF	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_INF = 0x00,$/;"	e	enum:Volkslogger::Command
cmd_PDB	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_PDB = 0x07,$/;"	e	enum:Volkslogger::Command
cmd_RDB	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_RDB = 0x04,$/;"	e	enum:Volkslogger::Command
cmd_RST	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_RST = 0x0c,$/;"	e	enum:Volkslogger::Command
cmd_SIG	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_SIG = 0x08,$/;"	e	enum:Volkslogger::Command
cmd_WPR	Device/Driver/Volkslogger/Protocol.hpp	/^    cmd_WPR = 0x05,$/;"	e	enum:Volkslogger::Command
cmd_host	Android/Nook.cpp	/^static char cmd_host[] = "su -c 'echo host > \/sys\/devices\/platform\/musb_hdrc\/mode'";$/;"	v	file:
cmd_set_charge_100	Android/Nook.cpp	/^static char cmd_set_charge_100[] = "su -c 'echo 100000 > \/sys\/class\/regulator\/regulator.5\/device\/force_current'";$/;"	v	file:
cmd_set_charge_500	Android/Nook.cpp	/^static char cmd_set_charge_500[] = "su -c 'echo 500000 > \/sys\/class\/regulator\/regulator.5\/device\/force_current'";$/;"	v	file:
cmdline	OS/Args.hpp	/^  char *cmdline;$/;"	m	class:Args
cmmtype	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t cmmtype; \/* CMM type signature *\/$/;"	m	struct:__anon189
cmp_entities	Topography/shapelib/mapstring.c	/^static int cmp_entities(const void *e1, const void *e2)$/;"	f	file:
cmprof_	Terrain/jasper/jas_image.h	/^	jas_cmprof_t *cmprof_;$/;"	m	struct:__anon124
cmptfmts	Terrain/jasper/jas_cm.h	/^	jas_cmcmptfmt_t *cmptfmts;$/;"	m	struct:__anon95
cmptno	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t cmptno;$/;"	m	struct:__anon115
cmpts	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cmpt_t *cmpts;$/;"	m	struct:__anon152
cmpts_	Terrain/jasper/jas_image.h	/^	jas_image_cmpt_t **cmpts_;$/;"	m	struct:__anon124
cnt	Terrain/jasper/jpc/jpc_dec.h	/^	int cnt;$/;"	m	struct:jpc_dec_seg_s
cnt_	Terrain/jasper/jas_stream.h	/^	int cnt_;$/;"	m	struct:__anon120
cnt_	Terrain/jasper/jpc/jpc_bs.h	/^	int cnt_;$/;"	m	struct:__anon129
coc	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coc_t coc;$/;"	m	union:__anon178
cod	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_cod_t cod;$/;"	m	union:__anon178
code	Dialogs/Weather/NOAAList.cpp	/^    StaticString<5> code;$/;"	m	struct:final::ListItem	file:
code	FLARM/Error.cpp	/^  FlarmError::Code code;$/;"	m	struct:__anon1	file:
code	FLARM/Error.hpp	/^  Code code;$/;"	v
code	IGC/IGCExtensions.hpp	/^  char code[4];$/;"	m	struct:IGCExtension
code	IO/ZlibError.hxx	/^	int code;$/;"	m	class:final
code	TeamCode/TeamCode.hpp	/^  StaticString<10> code;$/;"	m	class:TeamCode
code	Topography/shapelib/maperror.h	/^    int code;$/;"	m	struct:errorObj
code	Weather/NOAAStore.hpp	/^    char code[5];$/;"	m	struct:NOAAStore::Item
color	Dialogs/Traffic/TrafficList.cpp	/^    FlarmColor color = FlarmColor::COUNT;$/;"	m	struct:TrafficListWidget::Item	file:
color	Look/ButtonLook.hpp	/^    Color color;$/;"	m	struct:ButtonLook::__anon25
color	Look/GestureLook.hpp	/^  Color color, invalid_color;$/;"	m	struct:GestureLook
color	MapWindow/Items/MapItem.hpp	/^  FlarmColor color;$/;"	m	struct:TrafficMapItem
color	Renderer/ColorButtonRenderer.hpp	/^  const Color color;$/;"	m	class:ColorButtonRenderer
color	Screen/Brush.hpp	/^  Color color = Color::Transparent();$/;"	m	class:Brush
color	Screen/Memory/Murphy.hpp	/^  const typename Canvas::color_type color;$/;"	m	struct:MurphyIterator
color	Screen/Memory/PixelOperations.hpp	/^  color_type color;$/;"	m	struct:PixelColoredAlpha
color	Screen/Pen.hpp	/^  Color color;$/;"	m	class:Pen
color	Screen/Ramp.hpp	/^  RGB8Color color;$/;"	m	struct:ColorRamp
color	Topography/TopographyFile.hpp	/^  const Color color;$/;"	m	class:TopographyFile
color	Topography/shapelib/mapserver.h	/^    colorObj *color;$/;"	m	struct:__anon69
color	Topography/shapelib/mapserver.h	/^    colorObj *color;$/;"	m	struct:__anon70
color	Topography/shapelib/mapserver.h	/^    colorObj *color;$/;"	m	struct:__anon71
color	Topography/shapelib/mapserver.h	/^    colorObj color, outlinecolor, backgroundcolor;$/;"	m	struct:tileCacheObj
color	Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:__anon41
color	Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:__anon53
color	Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:__anon54
color	Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:labelObj
color	Topography/shapelib/mapserver.h	/^    colorObj color;$/;"	m	struct:styleObj
color_key	Screen/FB/mxcfb.h	/^	__u32 color_key;$/;"	m	struct:mxcfb_color_key
color_mode	Dialogs/Airspace/dlgAirspace.cpp	/^  const bool color_mode;$/;"	m	class:AirspaceSettingsListWidget	file:
color_negative	Look/ChartLook.hpp	/^  Color color_negative;$/;"	m	struct:ChartLook
color_positive	Look/ChartLook.hpp	/^  Color color_positive;$/;"	m	struct:ChartLook
color_ramp	Weather/Rasp/RaspStyle.hpp	/^  const ColorRamp *color_ramp;$/;"	m	struct:RaspStyle
color_table	Terrain/RasterRenderer.hpp	/^  RawColor *color_table = nullptr;$/;"	m	class:RasterRenderer
color_type	Screen/Memory/Optimised.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	class:SelectOptimisedPixelOperations
color_type	Screen/Memory/Optimised.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:TransparentPixelOperations
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PT::color_type color_type;$/;"	t	struct:NotWhiteCondition
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	class:TransparentInvertPixelOperations
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:ColorKey
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:ConditionalWritePixel
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PerPixelOperations
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelColoredAlpha
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelIntegerAdapter
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelOpaqueAlpha
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelOpaqueText
color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::color_type color_type;$/;"	t	struct:PixelPerChannelAdapter
color_type	Screen/Memory/PixelTraits.hpp	/^  typedef BGRA8Color color_type;$/;"	t	struct:BGRAPixelTraits
color_type	Screen/Memory/PixelTraits.hpp	/^  typedef Luminosity8 color_type;$/;"	t	struct:GreyscalePixelTraits
colors	Look/InfoBoxLook.hpp	/^  Color colors[6];$/;"	m	struct:InfoBoxLook
colors	Look/VarioLook.hpp	/^  bool inverse, colors;$/;"	m	struct:VarioLook
colors	Topography/shapelib/mapserver.h	/^    colorObj colors[MS_MAXCOLORS-1];$/;"	m	struct:__anon32
colorspace	Topography/shapelib/mapserver.h	/^  } colorspace;$/;"	t	typeref:enum:__anon68
colorspc	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t colorspc; \/* color space of data *\/$/;"	m	struct:__anon189
colorvalue	Topography/shapelib/mapserver.h	/^    int      colorvalue[MS_MAXCOLORS-1];$/;"	m	struct:__anon32
colr	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_colr_t colr;$/;"	m	union:__anon117::__anon118
column	XML/Parser.hpp	/^    unsigned line, column;$/;"	m	struct:XML::Results
column_width	Form/GridView.hpp	/^  unsigned column_width;$/;"	m	class:GridView
columns	Form/DigitEntry.hpp	/^  Column columns[MAX_LENGTH];$/;"	m	class:CoordinateFormat
com	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_com_t com;$/;"	m	union:__anon178
combine_texture_fragment_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char combine_texture_fragment_shader[] =$/;"	v	file:
combine_texture_projection	Screen/OpenGL/Shaders.cpp	/^  GLint combine_texture_projection, combine_texture_texture;$/;"	m	namespace:OpenGL	file:
combine_texture_shader	Screen/OpenGL/Shaders.cpp	/^  GLProgram *combine_texture_shader;$/;"	m	namespace:OpenGL	file:
combine_texture_texture	Screen/OpenGL/Shaders.cpp	/^  GLint combine_texture_projection, combine_texture_texture;$/;"	m	namespace:OpenGL	file:
combine_texture_vertex_shader	Screen/OpenGL/Shaders.cpp	/^static const char *const combine_texture_vertex_shader = texture_vertex_shader;$/;"	v	file:
combo_list	Dialogs/ComboPicker.cpp	/^  const ComboList &combo_list;$/;"	m	class:ComboPickerSupport	file:
combo_list	Input/InputEventsLua.cpp	/^  ComboList combo_list;$/;"	m	class:final	file:
command	Device/Driver/KRT2.cpp	/^    uint8_t command;$/;"	m	struct:final::stx_msg	file:
command_trigger	Thread/SuspensibleThread.hpp	/^  Cond command_trigger, client_trigger;$/;"	m	class:SuspensibleThread
commands_dock	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  DockWindow commands_dock;$/;"	m	class:final	file:
commands_widget	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WaypointCommandsWidget commands_widget;$/;"	m	class:final	file:
comment	Engine/Waypoint/Waypoint.hpp	/^  tstring comment;$/;"	m	struct:Waypoint
comment	InfoBoxes/Data.hpp	/^  StaticString<32> comment;$/;"	m	struct:InfoBoxData
comment	Look/InfoBoxLook.hpp	/^  } title, value, comment;$/;"	m	struct:InfoBoxLook	typeref:struct:InfoBoxLook::__anon24
comment_color	InfoBoxes/Data.hpp	/^  uint8_t title_color, value_color, comment_color;$/;"	m	struct:InfoBoxData
comment_rect	InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect comment_rect;$/;"	m	class:InfoBoxWindow
commit	Input/InputParser.cpp	/^  void commit(InputConfig &config, unsigned line) {$/;"	f	struct:EventBuilder
common_stats	Engine/Task/TaskManager.hpp	/^  CommonStats common_stats;$/;"	m	class:TaskManager
common_stats	NMEA/Derived.hpp	/^  CommonStats common_stats;$/;"	m	struct:DerivedInfo
comp_op	Topography/shapelib/mapserver.h	/^    CompositingOperation comp_op;$/;"	m	struct:_LayerCompositer
compare_projection	Terrain/TerrainRenderer.hpp	/^  CompareProjection compare_projection;$/;"	m	class:TerrainRenderer
compare_projection	Weather/Rasp/RaspRenderer.hpp	/^  CompareProjection compare_projection;$/;"	m	class:RaspRenderer
compare_squared	Math/FastMath.cpp	/^compare_squared(int a, int b, int c)$/;"	f
compass_brush	Look/MapLook.hpp	/^  Brush compass_brush;$/;"	m	struct:MapLook
compass_pen	Look/MapLook.hpp	/^  Pen compass_pen;$/;"	m	struct:MapLook
compass_triangle_brush	Look/MapLook.hpp	/^  Brush compass_triangle_brush;$/;"	m	struct:MapLook
compass_triangle_pen	Look/MapLook.hpp	/^  Pen compass_triangle_pen;$/;"	m	struct:MapLook
compass_visible	MapWindow/MapWindow.hpp	/^  bool compass_visible = true;$/;"	m	class:MapWindow
compatcodes	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t compatcodes[JP2_FTYP_MAXCOMPATCODES];$/;"	m	struct:__anon108
compatible_dc	Screen/GDI/Canvas.hpp	/^  HDC dc = nullptr, compatible_dc = nullptr;$/;"	m	class:Canvas
competition_class	Device/Driver/LX/LXN.hpp	/^    char competition_class[4];$/;"	m	struct:LXN::FlightInfo
competition_class	Device/Driver/LX/LXN.hpp	/^    const struct CompetitionClass *competition_class;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::CompetitionClass
competition_class_id	Device/Driver/LX/LXN.hpp	/^    uint8_t competition_class_id;$/;"	m	struct:LXN::FlightInfo
competition_id	Device/Declaration.hpp	/^  StaticString<8> competition_id;$/;"	m	struct:Declaration
competition_id	Plane/Plane.hpp	/^  StaticString<6> competition_id;$/;"	m	struct:Plane
competitionclass	Device/Driver/Volkslogger/vlapi2.h	/^      char competitionclass[13];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
competitionid	Device/Driver/Volkslogger/vlapi2.h	/^      char competitionid[4];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
competitionid	Device/Driver/Volkslogger/vlconv.h	/^	char competitionid[4];	\/\/ headerfields, but these here might be$/;"	m	struct:DIRENTRY
compiled	Topography/shapelib/mapserver.h	/^    int compiled;$/;"	m	struct:__anon35
complete	Dialogs/DownloadFilePicker.cpp	/^  bool got_size = false, complete = false, success;$/;"	m	class:final	file:
complete	Terrain/jasper/jpc/jpc_dec.h	/^	int complete;$/;"	m	struct:jpc_dec_seg_s
compno	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compno;$/;"	m	struct:__anon164
compno	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compno;$/;"	m	struct:__anon165
compno	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compno;$/;"	m	struct:__anon167
compno	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned compno;$/;"	m	struct:__anon138
compnoend	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compnoend;$/;"	m	struct:__anon169
compnostart	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t compnostart;$/;"	m	struct:__anon169
compositeRasterBuffer	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*compositeRasterBuffer)(imageObj *dest, rasterBufferObj *overlay, CompositingOperation comp_op, int opacity);$/;"	m	struct:rendererVTableObj
compositer	Topography/shapelib/mapserver.h	/^    LayerCompositer *compositer;$/;"	m	struct:layerObj
compositor	Event/Poll/WaylandQueue.hpp	/^  struct wl_compositor *compositor = nullptr;$/;"	m	class:final	typeref:struct:final::wl_compositor
compparms	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coxcp_t compparms;$/;"	m	struct:__anon163
compparms	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coxcp_t compparms;$/;"	m	struct:__anon164
compparms	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcxcp_t compparms;$/;"	m	struct:__anon167
compparms	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcxcp_t compparms;$/;"	m	struct:__anon168
comps	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_crgcomp_t *comps;$/;"	m	struct:__anon176
comps	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_sizcomp_t *comps;$/;"	m	struct:__anon160
comptype	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t comptype;$/;"	m	struct:__anon109
compute_retry_offset	Topography/shapelib/mapprimitive.c	/^static double compute_retry_offset(textSymbolObj *ts, int fail_idx, double retried_offset, double max_dec_offset, double max_inc_offset) {$/;"	f	file:
computer	Computer/GlideComputerInterface.hpp	/^  GlideComputer* computer;$/;"	m	class:final
computer	MergeThread.hpp	/^  BasicComputer computer;$/;"	m	class:final
computer_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage computer_pages[] = {$/;"	v	file:
computer_settings	Airspace/AirspaceVisibility.hpp	/^  const AirspaceComputerSettings &computer_settings;$/;"	m	class:AirspaceVisibility
computer_settings	Blackboard/ComputerSettingsBlackboard.hpp	/^  ComputerSettings computer_settings;$/;"	m	class:ComputerSettingsBlackboard
cond	Device/Port/BufferedPort.hpp	/^  Cond cond;$/;"	m	class:BufferedPort
cond	Device/SettingsMap.hpp	/^  Cond cond;$/;"	m	class:DeviceSettingsMap
cond	Event/Android/Queue.hpp	/^  Cond cond;$/;"	m	class:EventQueue
cond	Thread/StandbyThread.hpp	/^  Cond cond;$/;"	m	class:StandbyThread
cond	Thread/WindowsCond.hxx	/^	CONDITION_VARIABLE cond;$/;"	m	class:WindowsCond
condor_driver	Device/Driver/Condor.cpp	/^const struct DeviceRegister condor_driver = {$/;"	v	typeref:struct:DeviceRegister
config	Device/Descriptor.hpp	/^  DeviceConfig config;$/;"	m	class:final
config	Device/Driver/CAI302/Internal.hpp	/^  const DeviceConfig &config;$/;"	m	class:CAI302Device
config	Dialogs/Device/DeviceEditWidget.hpp	/^  DeviceConfig config;$/;"	m	class:DeviceEditWidget
config	Engine/Airspace/AirspaceWarningManager.hpp	/^  AirspaceWarningConfig config;$/;"	m	class:AirspaceWarningManager
config	Engine/Route/RoutePolars.hpp	/^  RoutePlannerConfig config;$/;"	m	class:RoutePolars
config	Renderer/AirspaceLabelList.cpp	/^  const AirspaceWarningConfig &config;$/;"	m	class:AirspaceLabelListCompare	file:
config_word	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t config_word; \/\/ locked(1) = FF FE.  unlocked(0) = FF FF$/;"	m	struct:CAI302::Polar
configoptions	Topography/shapelib/mapserver.h	/^    hashTableObj configoptions;$/;"	m	struct:mapObj
connect	Android/BluetoothHelper.cpp	/^BluetoothHelper::connect(JNIEnv *env, const char *address)$/;"	f	class:BluetoothHelper
connect_button	Kobo/WifiDialog.cpp	/^  Button *connect_button;$/;"	m	class:final	file:
connect_method	Android/BluetoothHelper.cpp	/^  static jmethodID list_method, connect_method, createServer_method;$/;"	m	namespace:BluetoothHelper	file:
connection	Device/Port/TCPPort.hpp	/^  boost::asio::ip::tcp::socket connection;$/;"	m	class:final
connection	Topography/shapelib/mapserver.h	/^    char *connection;$/;"	m	struct:__anon38
connection	Topography/shapelib/mapserver.h	/^    char *connection;$/;"	m	struct:layerObj
connectionoptions	Topography/shapelib/mapserver.h	/^    hashTableObj connectionoptions;$/;"	m	struct:layerObj
connectiontype	Topography/shapelib/mapserver.h	/^    enum MS_CONNECTION_TYPE connectiontype;$/;"	m	struct:layerObj	typeref:enum:layerObj::MS_CONNECTION_TYPE
connectiontype	Topography/shapelib/mapserver.h	/^    enum MS_JOIN_CONNECTION_TYPE connectiontype;$/;"	m	struct:__anon38	typeref:enum:__anon38::MS_JOIN_CONNECTION_TYPE
const_iterator	Device/MultipleDevices.hpp	/^  typedef typename std::array<DeviceDescriptor *, NUMDEV>::const_iterator const_iterator;$/;"	t	class:final
const_iterator	Device/SettingsMap.hpp	/^    explicit const_iterator(typename Map::const_iterator _i):i(_i) {}$/;"	f	class:DeviceSettingsMap::const_iterator
const_iterator	Device/SettingsMap.hpp	/^  class const_iterator {$/;"	c	class:DeviceSettingsMap
const_iterator	Engine/Airspace/AirspaceWarningManager.hpp	/^  typedef AirspaceWarningList::const_iterator const_iterator;$/;"	t	class:AirspaceWarningManager
const_iterator	Engine/Airspace/AirspacesInterface.hpp	/^  typedef AirspaceTree::const_query_iterator const_iterator;$/;"	t	class:AirspacesInterface
const_iterator	Engine/Trace/Trace.hpp	/^    const_iterator(ChronologicalList::const_iterator &&_iterator)$/;"	f	class:Trace::const_iterator
const_iterator	Engine/Trace/Trace.hpp	/^  class const_iterator : public ChronologicalList::const_iterator {$/;"	c	class:Trace
const_iterator	Engine/Waypoint/Waypoints.hpp	/^  typedef WaypointTree::const_iterator const_iterator;$/;"	t	class:Waypoints
const_iterator	FLARM/ColorDatabase.hpp	/^  typedef Map::const_iterator const_iterator;$/;"	t	class:FlarmColorDatabase
const_iterator	FLARM/NameDatabase.hpp	/^  typedef Array::const_iterator const_iterator;$/;"	t	class:FlarmNameDatabase
const_iterator	Repository/FileRepository.hpp	/^  typedef FileList::const_iterator const_iterator;$/;"	t	struct:FileRepository
const_iterator	Topography/TopographyFile.hpp	/^    const_iterator(const ShapeList *p):current(p) {}$/;"	f	class:TopographyFile::const_iterator
const_iterator	Topography/TopographyFile.hpp	/^  class const_iterator {$/;"	c	class:TopographyFile
const_iterator	Util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::const_iterator const_iterator;$/;"	t	class:AllocatedGrid
const_iterator	Util/IterableSplitString.hxx	/^	typedef Iterator const_iterator;$/;"	t	class:BasicIterableSplitString
const_iterator	Util/OverwritingRingBuffer.hpp	/^    const_iterator(const TrivialOverwritingRingBuffer<T, size> &_buffer, unsigned _i)$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
const_iterator	Util/OverwritingRingBuffer.hpp	/^  class const_iterator {$/;"	c	class:TrivialOverwritingRingBuffer
const_iterator	Util/QuadTree.hxx	/^	class const_iterator {$/;"	c
const_iterator	Util/TrivialArray.hxx	/^	typedef typename Array::const_iterator const_iterator;$/;"	t	class:TrivialArray
const_iterator	Weather/NOAAStore.hpp	/^  typedef StationContainer::const_iterator const_iterator;$/;"	t	class:NOAAStore
const_iterator	XML/Node.hpp	/^    typedef std::list<XMLNode>::const_iterator const_iterator;$/;"	t	struct:XMLNode::Data
const_iterator	XML/Node.hpp	/^  typedef Data::const_iterator const_iterator;$/;"	t	class:XMLNode
const_iterator_range	Engine/Airspace/AirspacesInterface.hpp	/^  typedef boost::iterator_range<const_iterator> const_iterator_range;$/;"	t	class:AirspacesInterface
const_pointer	OS/Path.hpp	/^  typedef Path::const_pointer const_pointer;$/;"	t	class:AllocatedPath
const_pointer	OS/Path.hpp	/^  typedef value_type::const_pointer const_pointer;$/;"	t	class:Path
const_pointer	Screen/Memory/Buffer.hpp	/^  typedef typename PixelTraits::const_pointer const_pointer;$/;"	t	struct:WritableImageBuffer
const_pointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::const_pointer const_pointer;$/;"	t	struct:PerPixelOperations
const_pointer	Screen/Memory/PixelTraits.hpp	/^  typedef const color_type *const_pointer;$/;"	t	struct:BGRAPixelTraits
const_pointer	Screen/Memory/PixelTraits.hpp	/^  typedef const color_type *const_pointer;$/;"	t	struct:GreyscalePixelTraits
const_pointer	Util/ConvertString.hpp	/^  typedef typename Value::const_pointer const_pointer;$/;"	t	class:UTF8ToWideConverter
const_pointer	Util/ConvertString.hpp	/^  typedef typename Value::const_pointer const_pointer;$/;"	t	class:WideToACPConverter
const_pointer	Util/ConvertString.hpp	/^  typedef typename Value::const_pointer const_pointer;$/;"	t	class:WideToUTF8Converter
const_pointer	Util/LightString.hxx	/^	typedef typename StringPointer<T>::const_pointer const_pointer;$/;"	t	class:LightString
const_pointer	Util/SliceAllocator.hxx	/^	typedef const T *const_pointer;$/;"	t	class:GlobalSliceAllocator
const_pointer	Util/SliceAllocator.hxx	/^	typedef const T *const_pointer;$/;"	t	class:SliceAllocator
const_pointer	Util/StringBuilder.hxx	/^	typedef const T *const_pointer;$/;"	t	class:StringBuilder
const_pointer	Util/StringParser.hxx	/^	typedef const T *const_pointer;$/;"	t	class:StringParser
const_reference	Util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::const_reference const_reference;$/;"	t	class:AllocatedGrid
const_reference	Util/SliceAllocator.hxx	/^	typedef const T &const_reference;$/;"	t	class:GlobalSliceAllocator
const_reference	Util/SliceAllocator.hxx	/^	typedef const T &const_reference;$/;"	t	class:SliceAllocator
const_rpointer	Screen/Memory/Optimised.hpp	/^  typedef typename PixelTraits::const_rpointer const_rpointer;$/;"	t	class:SelectOptimisedPixelOperations
const_rpointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::const_rpointer const_rpointer;$/;"	t	struct:ConditionalWritePixel
const_rpointer	Screen/Memory/PixelTraits.hpp	/^  typedef const color_type *gcc_restrict const_rpointer;$/;"	t	struct:BGRAPixelTraits
const_rpointer	Screen/Memory/PixelTraits.hpp	/^  typedef const color_type *gcc_restrict const_rpointer;$/;"	t	struct:GreyscalePixelTraits
constk	Screen/FB/mxcfb.h	/^	int constk[16];$/;"	m	struct:mxcfb_gamma
constraints	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const TaskFactoryConstraints &constraints;$/;"	m	class:AbstractTaskFactory
constraints	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  FinishConstraints constraints;$/;"	m	class:final
constraints	Engine/Task/Ordered/Points/StartPoint.hpp	/^  StartConstraints constraints;$/;"	m	class:final
construct	Util/SliceAllocator.hxx	/^	void construct(U *p, Args&&... args) {$/;"	f	class:GlobalSliceAllocator
construct	Util/SliceAllocator.hxx	/^	void construct(U *p, Args&&... args) {$/;"	f	class:SliceAllocator
container	Widget/ContainerWidget.hpp	/^  ContainerWindow container;$/;"	m	class:ContainerWidget
contains	Util/TrivialArray.hxx	/^	bool contains(const T &value) const {$/;"	f	class:TrivialArray
content	InfoBoxes/InfoBoxWindow.hpp	/^  std::unique_ptr<InfoBoxContent> content;$/;"	m	class:InfoBoxWindow
content	Weather/METAR.hpp	/^  ContentString content;$/;"	m	struct:METAR
content	Weather/TAF.hpp	/^  ContentString content;$/;"	m	struct:TAF
contents	InfoBoxes/InfoBoxSettings.hpp	/^    InfoBoxFactory::Type contents[MAX_CONTENTS];$/;"	m	struct:InfoBoxSettings::Panel
contest	Computer/Settings.hpp	/^  ContestSettings contest;$/;"	m	struct:ComputerSettings
contest	Computer/TaskComputer.hpp	/^  ContestComputer contest;$/;"	m	class:TaskComputer
contest	Computer/TraceComputer.hpp	/^  Trace full, contest, sprint;$/;"	m	class:TraceComputer
contest	Engine/Contest/ContestManager.hpp	/^  Contest contest;$/;"	m	class:ContestManager
contest	Engine/Contest/Settings.hpp	/^  Contest contest;$/;"	m	struct:ContestSettings
contest_class	Device/Driver/LX/Protocol.hpp	/^    char contest_class[9];$/;"	m	struct:LX::ContestClass
contest_class	Device/Driver/LXERA/Protocol.hpp	/^    char contest_class[9];$/;"	m	struct:LXEra::ContestClass
contest_handicap	Polar/PolarStore.hpp	/^    unsigned contest_handicap;$/;"	m	struct:PolarStore::Item
contest_manager	Computer/ContestComputer.hpp	/^  ContestManager contest_manager;$/;"	m	class:ContestComputer
contest_pens	Look/MapLook.hpp	/^  Pen contest_pens[3];$/;"	m	struct:MapLook
contest_stats	NMEA/Derived.hpp	/^  ContestStatistics contest_stats;$/;"	m	struct:DerivedInfo
contest_to_string	Engine/Contest/Solvers/Contests.cpp	/^static const TCHAR *const contest_to_string[] = {$/;"	v	file:
contest_trace_size	Computer/TraceComputer.cpp	/^static constexpr unsigned contest_trace_size =$/;"	v	file:
context	Android/Main.cpp	/^Context *context;$/;"	v
context	Screen/Custom/TopCanvas.hpp	/^  EGLContext context;$/;"	m	class:DisplayOrientation
continuous	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  const bool continuous;$/;"	m	class:ContestDijkstra
contour_column_base	Terrain/RasterRenderer.hpp	/^  unsigned char *contour_column_base = nullptr;$/;"	m	class:RasterRenderer
contours	Terrain/TerrainSettings.hpp	/^  Contours contours;$/;"	m	struct:TerrainRendererSettings
contrast	Terrain/TerrainSettings.hpp	/^  short contrast;$/;"	m	struct:TerrainRendererSettings
control	Renderer/TextRenderer.hpp	/^  bool control = false;$/;"	m	class:TextRenderer
control_parent	Screen/Window.hpp	/^  bool tab_stop = false, control_parent = false;$/;"	m	class:WindowStyle
control_parent	Screen/Window.hpp	/^  bool tab_stop, control_parent;$/;"	m	class:Window
control_size	InfoBoxes/InfoBoxLayout.hpp	/^    PixelSize control_size;$/;"	m	struct:InfoBoxLayout::Layout
conv_dir	Device/Driver/Volkslogger/vlconv.cpp	/^conv_dir(std::vector<DIRENTRY> &flights, const uint8_t *p, const size_t length)$/;"	f
convert_buffer	IO/TextWriter.hpp	/^  ReusableArray<char> convert_buffer;$/;"	m	class:TextWriter
convert_gcs	Device/Driver/Volkslogger/vlconv.cpp	/^convert_gcs(FILE *Ausgabedatei,$/;"	f
convert_string	Device/Driver/CAI302/Declare.cpp	/^convert_string(char *dest, size_t size, const TCHAR *src)$/;"	f	file:
convert_string	Device/Driver/EW.cpp	/^convert_string(char *dest, size_t size, const TCHAR *src)$/;"	f	file:
coordinate_format	FormatSettings.hpp	/^  CoordinateFormat coordinate_format;$/;"	m	struct:FormatSettings
copilot	Device/Driver/LX/LXN.hpp	/^    char copilot[19];$/;"	m	struct:LXN::FlightInfo
copilot_name	Device/Declaration.hpp	/^  StaticString<64> copilot_name;$/;"	m	struct:Declaration
copilot_name	Logger/Settings.hpp	/^  StaticString<64> copilot_name;$/;"	m	struct:LoggerSettings
copy	Terrain/jasper/jas_icc.h	/^	int (*copy)(struct jas_iccattrval_s *, struct jas_iccattrval_s *);$/;"	m	struct:__anon187
copy_button	Dialogs/ProfileListDialog.cpp	/^  Button *copy_button, *delete_button;$/;"	m	class:final	file:
copy_button	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect copy_button, paste_button, close_button;$/;"	m	struct:final::Layout	file:
copy_button	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  Button copy_button, paste_button, close_button;$/;"	m	class:final	file:
copy_padded	Device/Driver/Volkslogger/Util.cpp	/^copy_padded(char *dest, size_t size, const char *src)$/;"	f
copy_space_padded	Device/Driver/LX/Declare.cpp	/^copy_space_padded(char dest[], const TCHAR src[], unsigned int len)$/;"	f	file:
corners	Projection/CompareProjection.hpp	/^  FourCorners corners;$/;"	m	class:CompareProjection
corrected_width	Screen/RawBitmap.hpp	/^  const unsigned corrected_width;$/;"	m	class:final
cos	Geo/Flat/FlatProjection.hpp	/^  double cos;$/;"	m	class:FlatProjection
cos	Math/Angle.hpp	/^  inline double cos() const {$/;"	f	class:Angle
cost	Math/FastRotation.hpp	/^  const int cost, sint, y_cost, y_sint;$/;"	m	class:FastRowRotation
cost	Math/FastRotation.hpp	/^  double cost, sint;$/;"	m	class:FastRotation
cost	Math/FastRotation.hpp	/^  int cost, sint;$/;"	m	class:FastIntegerRotation
count	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t count;$/;"	m	struct:CAI302::NavpointMeta
count	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t count;$/;"	m	struct:CAI302::PilotMeta
count	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t count;$/;"	m	struct:CAI302::PilotMetaActive
count	InfoBoxes/InfoBoxLayout.hpp	/^    unsigned count;$/;"	m	struct:InfoBoxLayout::Layout
count	Language/MOFile.hpp	/^  unsigned count;$/;"	m	class:MOFile
count	NMEA/ClimbHistory.hpp	/^  unsigned short count[SIZE];$/;"	m	class:ClimbHistory
count	Screen/Memory/Bresenham.hpp	/^  unsigned count;$/;"	m	class:BresenhamIterator
count	Terrain/RasterTileCache.hpp	/^    uint16_t count;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
count_airspace	Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_airspace;$/;"	m	class:RoutePlanner
count_dij	Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_dij;$/;"	m	class:RoutePlanner
count_supressed	Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_supressed;$/;"	m	class:RoutePlanner
count_terrain	Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_terrain;$/;"	m	class:RoutePlanner
count_unique	Engine/Route/RoutePlanner.hpp	/^  mutable unsigned long count_unique;$/;"	m	class:RoutePlanner
countdown_autoqnh	Computer/AutoQNH.hpp	/^  unsigned countdown_autoqnh;$/;"	m	class:AutoQNH
cp	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cp_t *cp;$/;"	m	struct:__anon150
cp	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_cp_t *cp;$/;"	m	struct:__anon152
cps_	Terrain/jasper/jas_image.h	/^	int cps_;$/;"	m	struct:__anon123
cpu	OS/SystemLoad.cpp	/^struct cpu {$/;"	s	file:
cpu	Screen/StopWatch.hpp	/^    cpu_stamp_t cpu;$/;"	m	struct:ScreenStopWatch::Marker
cpu_lock	Hardware/CPU.cpp	/^static std::atomic_uint cpu_lock;$/;"	v	file:
cpu_stamp_t	Screen/StopWatch.hpp	/^  typedef uint64_t cpu_stamp_t;$/;"	t	class:ScreenStopWatch
crc	Device/Driver/FLARM/BinaryProtocol.hpp	/^    PackedLE16 crc;$/;"	m	struct:FLARM::FrameHeader
crc	Device/Driver/LX/Protocol.hpp	/^    uint8_t crc;$/;"	m	class:LX::CRCWriter
crc	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t crc;$/;"	m	class:LXEra::CRCWriter
crc	Tracking/SkyLines/Protocol.hpp	/^  uint16_t crc;$/;"	m	struct:SkyLinesTracking::Header
crc16	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::FlightFinish
crc16	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::Signature
crc16	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::TDeclaration
crc16	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD crc16;$/;"	m	struct:IMI::TMsg
crc16ccitt_table	Util/CRC.cpp	/^const uint16_t crc16ccitt_table[256] = {$/;"	v
create	Android/GliderLink.cpp	/^GliderLink* GliderLink::create(JNIEnv* env, Context* context,$/;"	f	class:GliderLink
create	Android/InternalSensors.cpp	/^InternalSensors::create(JNIEnv *env, Context *context, unsigned int index)$/;"	f	class:InternalSensors
create	Android/TextUtil.cpp	/^TextUtil::create(const FontDescription &d)$/;"	f	class:TextUtil
create	InfoBoxes/Content/Factory.cpp	/^  InfoBoxContent *(*create)();$/;"	m	struct:MetaData	file:
create	Widget/CreateWindowWidget.hpp	/^  CreateFunction create;$/;"	m	class:final
createBitmap_method	Android/NativeView.cpp	/^jmethodID NativeView::createBitmap_method;$/;"	m	class:NativeView	file:
createBitmap_method	Android/NativeView.hpp	/^  static jmethodID createBitmap_method;$/;"	m	class:NativeView
createImage	Topography/shapelib/mapserver.h	/^    imageObj* WARN_UNUSED (*createImage)(int width, int height, outputFormatObj *format, colorObj* bg);$/;"	m	struct:rendererVTableObj
createServer	Android/BluetoothHelper.cpp	/^BluetoothHelper::createServer(JNIEnv *env)$/;"	f	class:BluetoothHelper
createServer_method	Android/BluetoothHelper.cpp	/^  static jmethodID list_method, connect_method, createServer_method;$/;"	m	namespace:BluetoothHelper	file:
creating	Thread/Thread.hpp	/^  bool creating;$/;"	m	class:Thread
creator	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t creator; \/* profile creator signature *\/$/;"	m	struct:__anon189
creg	Terrain/jasper/jpc/jpc_mqdec.h	/^	uint_fast32_t creg;$/;"	m	struct:__anon133
crestlen	zzip/file.h	/^    zzip_size_t crestlen;$/;"	m	struct:zzip_file
crg	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_crg_t crg;$/;"	m	union:__anon178
critical_section	Thread/CriticalSection.hxx	/^	CRITICAL_SECTION critical_section;$/;"	m	class:CriticalSection
cross_section	Look/Look.hpp	/^  CrossSectionLook cross_section;$/;"	m	struct:Look
cross_section_look	Dialogs/dlgAnalysis.cpp	/^  const CrossSectionLook &cross_section_look;$/;"	m	class:ChartControl	file:
cross_section_renderer	Dialogs/dlgAnalysis.cpp	/^  CrossSectionRenderer cross_section_renderer;$/;"	m	class:ChartControl	file:
crosshair_pen	Look/OverlayLook.hpp	/^  Pen crosshair_pen;$/;"	m	struct:OverlayLook
cruise_altitude	Engine/Route/RoutePolars.hpp	/^  int cruise_altitude;$/;"	m	class:RoutePolars
cruise_descent	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double cruise_descent;$/;"	m	class:AirspaceAircraftPerformance
cruise_efficiency	Engine/GlideSolvers/GlidePolar.hpp	/^  double cruise_efficiency;$/;"	m	class:GlidePolar
cruise_efficiency	Engine/GlideSolvers/MacCready.hpp	/^  const double cruise_efficiency;$/;"	m	class:MacCready
cruise_efficiency	Engine/Task/Stats/TaskStats.hpp	/^  double cruise_efficiency;$/;"	m	class:TaskStats
cruise_filter	Engine/Airspace/AirspaceWarningManager.hpp	/^  AircraftStateFilter cruise_filter;$/;"	m	class:AirspaceWarningManager
cruise_gr	NMEA/VarioInfo.hpp	/^  double cruise_gr;$/;"	m	struct:VarioInfo
cruise_mode_icon	Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
cruise_orientation	MapSettings.hpp	/^  MapOrientation cruise_orientation;$/;"	m	struct:MapSettings
cruise_scale	MapSettings.hpp	/^  double cruise_scale;$/;"	m	struct:MapSettings
cruise_scale	PageState.hpp	/^  double cruise_scale;$/;"	m	struct:PageState
cruise_speed	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double cruise_speed;$/;"	m	class:AirspaceAircraftPerformance
cruise_start_altitude	NMEA/CirclingInfo.hpp	/^  double cruise_start_altitude;$/;"	m	struct:CirclingInfo
cruise_start_altitude_te	NMEA/CirclingInfo.hpp	/^  double cruise_start_altitude_te;$/;"	m	struct:CirclingInfo
cruise_start_location	NMEA/CirclingInfo.hpp	/^  GeoPoint cruise_start_location;$/;"	m	struct:CirclingInfo
cruise_start_time	NMEA/CirclingInfo.hpp	/^  double cruise_start_time;$/;"	m	struct:CirclingInfo
cruise_track_bearing	Engine/GlideSolvers/GlideResult.hpp	/^  Angle cruise_track_bearing;$/;"	m	struct:GlideResult
csid	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t csid;$/;"	m	struct:__anon111
csize	zzip/file.h	/^    zzip_size_t csize;$/;"	m	struct:zzip_file
cslevels	Atmosphere/CuSonde.hpp	/^  Level cslevels[NUM_LEVELS];$/;"	m	class:CuSonde
cstate	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_cstate_t *cstate;$/;"	m	struct:__anon152
csty	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon162
csty	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon163
csty	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon142
csty	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t csty;$/;"	m	struct:__anon143
csunk	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t csunk;$/;"	m	struct:__anon109
ctime	Terrain/jasper/jas_icc.h	/^	jas_icctime_t ctime; \/* creation time *\/$/;"	m	struct:__anon189
ctor	Android/IOIOHelper.cpp	/^jmethodID IOIOHelper::ctor,$/;"	m	class:IOIOHelper	file:
ctor	Android/IOIOHelper.hpp	/^  static jmethodID ctor;$/;"	m	class:IOIOHelper
ctor	Android/NativeBMP085Listener.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativeBMP085Listener	file:
ctor	Android/NativeI2CbaroListener.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativeI2CbaroListener	file:
ctor	Android/NativeInputListener.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativeInputListener	file:
ctor	Android/NativeLeScanCallback.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativeLeScanCallback	file:
ctor	Android/NativeNunchuckListener.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativeNunchuckListener	file:
ctor	Android/NativePortListener.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativePortListener	file:
ctor	Android/NativeVoltageListener.cpp	/^  static jmethodID ctor;$/;"	m	namespace:NativeVoltageListener	file:
ctor	Java/URL.cxx	/^jmethodID Java::URL::ctor;$/;"	m	class:Java::URL	file:
ctor	Java/URL.hxx	/^		static jmethodID ctor, openConnection_method;$/;"	m	class:Java::URL
ctreg	Terrain/jasper/jpc/jpc_mqdec.h	/^	uint_fast32_t ctreg;$/;"	m	struct:__anon133
ctrl_click	Event/Poll/X11Queue.hpp	/^  bool ctrl_click;$/;"	m	class:X11EventQueue
ctxs	Terrain/jasper/jpc/jpc_mqdec.h	/^	const jpc_mqstate_t **ctxs;$/;"	m	struct:__anon133
cu_computer	Computer/GlideComputer.hpp	/^  CuComputer cu_computer;$/;"	m	class:GlideComputer
cu_sonde	Computer/CuComputer.hpp	/^  CuSonde cu_sonde;$/;"	m	class:CuComputer
cur	Engine/Route/AStar.hpp	/^  node_value_iterator cur;$/;"	m	class:AStar
curctx	Terrain/jasper/jpc/jpc_mqdec.h	/^	const jpc_mqstate_t **curctx;$/;"	m	struct:__anon133
current	Screen/DoubleBufferWindow.hpp	/^  unsigned current = 0;$/;"	m	class:DoubleBufferWindow
current	Topography/TopographyFile.hpp	/^    const ShapeList *current;$/;"	m	class:TopographyFile::const_iterator
current	Units/Units.cpp	/^UnitSetting Units::current = {$/;"	m	class:Units	file:
current	Util/IterableSplitString.hxx	/^		StringView current, rest;$/;"	m	class:BasicIterableSplitString::final
current	Widget/PagerWidget.hpp	/^  unsigned current;$/;"	m	class:PagerWidget
current_circle	Computer/Wind/CirclingWind.hpp	/^  Angle current_circle;$/;"	m	class:CirclingWind
current_index	Form/DataField/ComboList.hpp	/^  int current_index;$/;"	m	class:ComboList
current_index	Form/DataField/File.hpp	/^  unsigned int current_index;$/;"	m	class:final
current_index	PageState.hpp	/^  unsigned current_index;$/;"	m	struct:PagesState
current_leg	Engine/Task/Computer/TaskStatsComputer.hpp	/^  ElementStatComputer current_leg;$/;"	m	class:TaskStatsComputer
current_leg	Engine/Task/Stats/TaskStats.hpp	/^  ElementStat current_leg;$/;"	m	class:TaskStats
current_line	Logger/FlightParser.hpp	/^  char *current_line;$/;"	m	class:FlightParser
current_mode	Input/InputEvents.cpp	/^  static Mode current_mode = InputEvents::MODE_DEFAULT;$/;"	m	namespace:InputEvents	file:
current_page	Dialogs/Settings/dlgConfiguration.cpp	/^static unsigned current_page;$/;"	v	file:
current_page	Form/GridView.hpp	/^  unsigned current_page;$/;"	m	class:GridView
current_position	Net/HTTP/DownloadManager.cpp	/^  int64_t current_size, current_position;$/;"	m	class:final	file:
current_preview	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  unsigned current_preview;$/;"	m	class:final	file:
current_risk_mc	Engine/Task/Stats/CommonStats.hpp	/^  double current_risk_mc;$/;"	m	class:CommonStats
current_size	Net/HTTP/DownloadManager.cpp	/^  int64_t current_size, current_position;$/;"	m	class:final	file:
current_thermal	NMEA/ClimbInfo.hpp	/^  OneClimbInfo current_thermal;$/;"	m	struct:ClimbInfo
current_type	Dialogs/Task/MutateTaskPointDialog.cpp	/^  const TaskPointFactoryType current_type;$/;"	m	class:final	file:
current_value	Engine/PathSolvers/Dijkstra.hpp	/^  unsigned current_value;$/;"	m	class:Dijkstra
current_year	Logger/IGCFileCleanup.cpp	/^  unsigned current_year;$/;"	m	class:OldIGCFileFinder	file:
currentfeature	Topography/shapelib/mapserver.h	/^    featureListNodeObjPtr currentfeature; \/* pointer to the current feature *\/$/;"	m	struct:layerObj
currentfp	zzip/lib.h	/^    struct zzip_file * currentfp; \/* last fp used... *\/$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_file
curseg	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seg_t *curseg;$/;"	m	struct:__anon145
cursor	Dialogs/KnobTextEntry.cpp	/^  unsigned int cursor;$/;"	m	class:final	file:
cursor	Dialogs/TouchTextEntry.cpp	/^static unsigned int cursor = 0;$/;"	v	file:
cursor	Form/DigitEntry.hpp	/^  unsigned cursor;$/;"	m	class:CoordinateFormat
cursor	Form/List.hpp	/^  unsigned cursor = 0;$/;"	m	class:ListControl
cursor	Form/TabMenuDisplay.hpp	/^  unsigned cursor;$/;"	m	class:final
cursor_handler	Form/List.hpp	/^  ListCursorHandler *cursor_handler = nullptr;$/;"	m	class:ListControl
cursor_size	DisplaySettings.hpp	/^  uint8_t cursor_size;$/;"	m	struct:DisplaySettings
cursor_size	Screen/TopWindow.hpp	/^  uint8_t cursor_size = 1;$/;"	m	class:TopWindow
cursor_x	Screen/TerminalWindow.hpp	/^  unsigned cursor_x, cursor_y;$/;"	m	class:TerminalWindow
cursor_y	Screen/TerminalWindow.hpp	/^  unsigned cursor_x, cursor_y;$/;"	m	class:TerminalWindow
curtile	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_tile_t *curtile;$/;"	m	struct:__anon152
curtileendoff	Terrain/jasper/jpc/jpc_dec.h	/^	long curtileendoff;$/;"	m	struct:__anon152
curtoken	Topography/shapelib/mapserver.h	/^    tokenListNodeObjPtr curtoken;$/;"	m	struct:__anon35
curv	Terrain/jasper/jas_icc.h	/^		jas_icccurv_t curv;$/;"	m	union:jas_iccattrval_s::__anon188
custom_dpi	UISettings.hpp	/^  unsigned custom_dpi;$/;"	m	struct:UISettings
cx	Screen/Point.hpp	/^  int cx, cy;$/;"	m	struct:PixelPoint::PixelSize
cy	Screen/Point.hpp	/^    :cx(_width), cy(_height) {}$/;"	f	struct:PixelPoint::PixelSize
cy	Screen/Point.hpp	/^  int cx, cy;$/;"	m	struct:PixelPoint::PixelSize
d	Engine/Route/RouteLink.hpp	/^  double d;$/;"	m	struct:RouteLink
d	Util/MD5.hpp	/^    uint32_t a, b, c, d;$/;"	m	struct:MD5::State
d	XML/Node.hpp	/^  Data *d;$/;"	m	class:XMLNode
d_compr	zzip/lib.h	/^    uint8_t     d_compr;        \/* the compression type, 0 = store, 8 = inflate *\/$/;"	m	struct:zzip_dir_hdr
d_compr	zzip/zzip.h	/^    int	 	d_compr;	\/* compression method *\/$/;"	m	struct:zzip_dirent
d_crc32	zzip/lib.h	/^    uint32_t    d_crc32;        \/* the adler32-checksum *\/$/;"	m	struct:zzip_dir_hdr
d_csize	zzip/lib.h	/^    uint32_t    d_csize;        \/* compressed size *\/$/;"	m	struct:zzip_dir_hdr
d_csize	zzip/zzip.h	/^    int         d_csize;        \/* compressed size *\/$/;"	m	struct:zzip_dirent
d_name	zzip/lib.h	/^    char        d_name[1];      \/* the actual name of the entry, may contain DIRSEPs *\/$/;"	m	struct:zzip_dir_hdr
d_name	zzip/zzip.h	/^    char * 	d_name;		\/* file name \/ strdupped name *\/$/;"	m	struct:zzip_dirent
d_namlen	zzip/lib.h	/^    uint16_t    d_namlen;       \/* explicit namelen of d_name *\/$/;"	m	struct:zzip_dir_hdr
d_off	zzip/lib.h	/^    uint32_t    d_off;          \/* offset of file in zipfile *\/$/;"	m	struct:zzip_dir_hdr
d_planned	Engine/Task/Stats/TaskSummary.hpp	/^  double d_planned;$/;"	m	struct:TaskSummaryPoint
d_reclen	zzip/lib.h	/^    uint16_t    d_reclen;       \/* next dir_hdr structure offset *\/$/;"	m	struct:zzip_dir_hdr
d_stream	zzip/file.h	/^    z_stream d_stream;$/;"	m	struct:zzip_file
d_usize	zzip/lib.h	/^    uint32_t    d_usize;        \/* uncompressed size *\/$/;"	m	struct:zzip_dir_hdr
da	Math/Quadratic.hpp	/^  const double da;$/;"	m	class:Quadratic
dark_border_brush	Look/ButtonLook.hpp	/^    Brush light_border_brush, dark_border_brush;$/;"	m	struct:ButtonLook::StateLook
dark_border_pen	Look/ButtonLook.hpp	/^    Pen light_border_pen, dark_border_pen;$/;"	m	struct:ButtonLook::StateLook
dat	Device/Driver/LX/LXN.hpp	/^    uint16_t time, dat;$/;"	m	struct:LXN::ExtConfig
data	Cloud/Sender.hpp	/^  } data;$/;"	m	class:ThermalResponseSender	typeref:struct:ThermalResponseSender::Packet
data	Cloud/Sender.hpp	/^  } data;$/;"	m	class:TrafficResponseSender	typeref:struct:TrafficResponseSender::Packet
data	Device/Driver/ATR833.cpp	/^  uint8_t data[32];$/;"	m	class:ATRBuffer	file:
data	Device/Driver/LX/LXN.hpp	/^    uint16_t data[0];$/;"	m	struct:LXN::BExt
data	Device/Driver/LX/LXN.hpp	/^    uint16_t data[0];$/;"	m	struct:LXN::KExt
data	Dialogs/Device/CAI302/UnitsEditor.hpp	/^  CAI302::Pilot data;$/;"	m	class:final
data	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxSettings::Panel &data;$/;"	m	class:final	file:
data	FLARM/ColorDatabase.hpp	/^  Map data;$/;"	m	class:FlarmColorDatabase
data	FLARM/NameDatabase.hpp	/^  Array data;$/;"	m	class:FlarmNameDatabase
data	Gauge/FlarmTrafficWindow.hpp	/^  TrafficList data;$/;"	m	class:FlarmTrafficWindow
data	IO/CSVLine.hpp	/^  const char *data, *end;$/;"	m	class:CSVLine
data	InfoBoxes/InfoBoxWindow.hpp	/^  InfoBoxData data;$/;"	m	class:InfoBoxWindow
data	Input/InputDefaults.cpp	/^  const TCHAR *data;$/;"	m	struct:flat_gesture_map	file:
data	Input/InputParser.cpp	/^  StaticString<256> type, data, label;$/;"	m	struct:EventBuilder	file:
data	Language/MOFile.hpp	/^  const uint8_t *data;$/;"	m	class:MOFile
data	Net/Option.hpp	/^  const void *data(const Protocol &p) const {$/;"	f	class:SendTimeoutS
data	OS/FileMapping.hpp	/^  const void *data() const {$/;"	f	class:FileMapping
data	Operation/ThreadedOperationEnvironment.hpp	/^  Data data;$/;"	m	class:ThreadedOperationEnvironment
data	Screen/Custom/LibPNG.cpp	/^  const uint8_t *data;$/;"	m	struct:PNGCallbackContext	file:
data	Screen/Custom/UncompressedImage.hpp	/^  std::unique_ptr<uint8_t[]> data;$/;"	m	class:UncompressedImage
data	Screen/Memory/Buffer.hpp	/^  rpointer data;$/;"	m	struct:ConstImageBuffer
data	Screen/Memory/Buffer.hpp	/^  rpointer data;$/;"	m	struct:WritableImageBuffer
data	Screen/TerminalWindow.hpp	/^  AllocatedGrid<TCHAR> data;$/;"	m	class:TerminalWindow
data	Terrain/HeightMatrix.hpp	/^  AllocatedArray<TerrainHeight> data;$/;"	m	class:HeightMatrix
data	Terrain/RasterBuffer.hpp	/^  AllocatedGrid<TerrainHeight> data;$/;"	m	class:RasterBuffer
data	Terrain/jasper/jas_cm.h	/^	jas_cmreal_t *data;$/;"	m	struct:__anon97
data	Terrain/jasper/jas_cm.h	/^	} data;$/;"	m	struct:jas_cmpxform_s	typeref:union:jas_cmpxform_s::__anon101
data	Terrain/jasper/jas_icc.h	/^	void *data;$/;"	m	struct:jas_icctagtabent_s
data	Terrain/jasper/jas_icc.h	/^	} data; \/* value *\/$/;"	m	struct:jas_iccattrval_s	typeref:union:jas_iccattrval_s::__anon188
data	Terrain/jasper/jp2/jp2_cod.h	/^	} data;$/;"	m	struct:__anon117	typeref:union:__anon117::__anon118
data	Terrain/jasper/jpc/jpc_cs.h	/^	jas_uchar *data;$/;"	m	struct:__anon171
data	Terrain/jasper/jpc/jpc_cs.h	/^	jas_uchar *data;$/;"	m	struct:__anon173
data	Terrain/jasper/jpc/jpc_cs.h	/^	jas_uchar *data;$/;"	m	struct:__anon177
data	Terrain/jasper/jpc/jpc_cs.h	/^	unsigned char *data;$/;"	m	struct:__anon172
data	Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *data;$/;"	m	struct:__anon145
data	Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *data;$/;"	m	struct:__anon147
data	Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *data;$/;"	m	struct:__anon149
data	Terrain/jasper/jpc/jpc_dec.h	/^	jas_uchar *data;$/;"	m	struct:__anon139
data	Topography/shapelib/mapserver.h	/^    char *data; \/* filename, can be relative or full path *\/$/;"	m	struct:layerObj
data	Topography/shapelib/mapserver.h	/^    char *data;$/;"	m	struct:__anon64
data	Topography/shapelib/mapserver.h	/^    unsigned char *data;$/;"	m	struct:_autobuffer
data	Tracking/SkyLines/Key.cpp	/^  uint8_t data[6];$/;"	m	struct:MacAddress	file:
data	Util/Cache.hxx	/^		Data data;$/;"	m	struct:Cache::Pair
data	Util/ForeignFifoBuffer.hxx	/^		 capacity(src.capacity), data(src.data) {$/;"	f	class:ForeignFifoBuffer
data	Util/ForeignFifoBuffer.hxx	/^		:capacity(0), data(n) {}$/;"	f	class:ForeignFifoBuffer
data	Util/ForeignFifoBuffer.hxx	/^		:capacity(_capacity), data(_data) {}$/;"	f	class:ForeignFifoBuffer
data	Util/ForeignFifoBuffer.hxx	/^	T *data;$/;"	m	class:ForeignFifoBuffer
data	Util/Manual.hxx	/^	char data[sizeof(T)];$/;"	m	class:Manual
data	Util/OverwritingRingBuffer.hpp	/^  T data[size];$/;"	m	class:TrivialOverwritingRingBuffer
data	Util/StaticFifoBuffer.hxx	/^	T data[size];$/;"	m	class:StaticFifoBuffer
data	Util/TrivialArray.hxx	/^	Array data;$/;"	m	class:TrivialArray
data	Weather/METARParser.cpp	/^  TCHAR *start, *data, *end;$/;"	m	class:METARLine	file:
data1	Event/SDL/Queue.cpp	/^  void *data1, *data2;$/;"	m	struct:MatchCallbackData	file:
data2	Event/SDL/Queue.cpp	/^  void *data1, *data2;$/;"	m	struct:MatchCallbackData	file:
data_	Terrain/jasper/jas_seq.h	/^	jas_seqent_t *data_;$/;"	m	struct:jas_matrix
data_field	Form/Edit.hpp	/^  DataField *data_field = nullptr;$/;"	m	class:WndProperty
data_field_key_up	Form/DataField/Time.cpp	/^static bool data_field_key_up = false;$/;"	v	file:
data_modified	Gauge/FlarmTrafficWindow.hpp	/^  Validity data_modified;$/;"	m	class:FlarmTrafficWindow
data_path	LocalPath.cpp	/^static AllocatedPath data_path = AllocatedPath(nullptr);$/;"	v	file:
datafield	Form/DataField/File.cpp	/^  FileDataField &datafield;$/;"	m	class:FileVisitor	file:
datafield_key_up	Form/DataField/Integer.cpp	/^static bool datafield_key_up = false;$/;"	v	file:
datalen	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t datalen;$/;"	m	struct:__anon117
dataoffset	zzip/file.h	/^    zzip_off_t dataoffset;$/;"	m	struct:zzip_file
datapattern	Topography/shapelib/mapserver.h	/^    char *datapattern, *templatepattern; \/* depricated, use VALIDATION ... END block instead *\/$/;"	m	struct:mapObj
datasize_	Terrain/jasper/jas_seq.h	/^	int_fast32_t datasize_;$/;"	m	struct:jas_matrix
date	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC date;$/;"	m	struct:IMI::TDeclarationHeader
date	Device/Driver/LX/Convert.cpp	/^  char date[7];$/;"	m	struct:Context	file:
date	Device/Driver/LX/LXN.hpp	/^    const struct Date *date;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Date
date	Device/Driver/LX/Protocol.hpp	/^    char date[9];$/;"	m	struct:LX::FlightInfo
date	Device/Driver/LXERA/Protocol.hpp	/^    char date[9];$/;"	m	struct:LXEra::FlightInfo
date	FlightInfo.hpp	/^  BrokenDate date;$/;"	m	struct:FlightInfo
date	zzip/format.h	/^    zzip_byte_t   date[2];$/;"	m	struct:zzip_dostime
date_time	Tracking/TrackingGlue.hpp	/^  BrokenDateTime date_time;$/;"	m	class:final
date_time_local	NMEA/Derived.hpp	/^  BrokenDateTime date_time_local;$/;"	m	struct:DerivedInfo
date_time_utc	Logger/LoggerImpl.hpp	/^    BrokenDateTime date_time_utc;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
date_time_utc	NMEA/Info.hpp	/^  BrokenDateTime date_time_utc;$/;"	m	struct:NMEAInfo
datetime	IGC/IGCDeclaration.hpp	/^  BrokenDateTime datetime;$/;"	m	struct:IGCDeclarationHeader
day	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
day	Device/Driver/LX/LXN.hpp	/^    uint8_t day, month, year;$/;"	m	struct:LXN::Task
day	Device/Driver/LX/LXN.hpp	/^    uint8_t day, month;$/;"	m	struct:LXN::Date
day	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t day;$/;"	m	struct:__anon180
day	Time/BrokenDate.hpp	/^  uint8_t day;$/;"	m	struct:BrokenDate
day2	Device/Driver/LX/LXN.hpp	/^    uint8_t day2, month2, year2;$/;"	m	struct:LXN::Task
day_length	Math/SunEphemeris.hpp	/^    double day_length, morning_twilight, evening_twilight;$/;"	m	struct:SunEphemeris::Result
day_of_month	Weather/ParsedMETAR.hpp	/^  uint8_t day_of_month;$/;"	m	struct:ParsedMETAR
day_of_week	Time/BrokenDate.hpp	/^  int8_t day_of_week;$/;"	m	struct:BrokenDate
dayinput	Device/Driver/LX/Protocol.hpp	/^    uint8_t dayinput;$/;"	m	struct:LX::Declaration
dayinput	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t dayinput;$/;"	m	struct:LXEra::Declaration
days	Engine/Airspace/AirspaceActivity.hpp	/^    Days days;$/;"	m	union:AirspaceActivity::__anon205
days_of_operation	Airspace/AirspaceParser.cpp	/^  AirspaceActivity days_of_operation;$/;"	m	struct:TempAirspaceType	file:
days_of_operation	Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceActivity days_of_operation;$/;"	m	class:AbstractAirspace
dayuser	Device/Driver/LX/Protocol.hpp	/^    uint8_t dayuser;$/;"	m	struct:LX::Declaration
dayuser	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t dayuser;$/;"	m	struct:LXEra::Declaration
db1Day	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db1Day, db1Month;$/;"	m	struct:IMI::TDeclarationHeader
db1Month	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db1Day, db1Month;$/;"	m	struct:IMI::TDeclarationHeader
db1Year	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD db1Year;$/;"	m	struct:IMI::TDeclarationHeader
db2Day	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db2Day, db2Month;$/;"	m	struct:IMI::TDeclarationHeader
db2Month	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE db2Day, db2Month;$/;"	m	struct:IMI::TDeclarationHeader
db2Year	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD db2Year;$/;"	m	struct:IMI::TDeclarationHeader
db_path	Cloud/Main.cpp	/^  const AllocatedPath db_path;$/;"	m	class:final	file:
dbcursor	Device/Driver/Volkslogger/dbbconv.h	/^  size_t dbcursor;$/;"	m	class:DBB
dblval	Topography/shapelib/mapserver.h	/^    double dblval; \/* for map cellsize used by simplify *\/$/;"	m	struct:__anon36
dblval	Topography/shapelib/mapserver.h	/^    double dblval;$/;"	m	union:__anon34
dblval2	Topography/shapelib/mapserver.h	/^    double dblval2; \/* for data cellsize *\/$/;"	m	struct:__anon36
dc	Screen/GDI/Canvas.hpp	/^  HDC dc = nullptr, compatible_dc = nullptr;$/;"	m	class:Canvas
dc	Screen/GDI/RootDC.hpp	/^  HDC dc;$/;"	m	class:RootDC
dead_band_enabled	Audio/VarioSettings.hpp	/^  bool dead_band_enabled;$/;"	m	struct:VarioSoundSettings
dead_band_enabled	Audio/VarioSynthesiser.hpp	/^  bool dead_band_enabled;$/;"	m	class:final
deadband_types	Dialogs/Device/Vega/AudioDeadbandParameters.hpp	/^static constexpr StaticEnumChoice deadband_types[] = {$/;"	v
deallocate	Util/SliceAllocator.hxx	/^		bool deallocate(Item *i) {$/;"	f	struct:SliceAllocator::Area
deallocate	Util/SliceAllocator.hxx	/^	void deallocate(T *t, const size_type n) {$/;"	f	class:GlobalSliceAllocator
deallocate	Util/SliceAllocator.hxx	/^	void deallocate(T *t, const size_type n) {$/;"	f	class:SliceAllocator
debounce_time	Engine/Airspace/AirspaceWarning.hpp	/^  unsigned debounce_time;$/;"	m	class:AirspaceWarning
debug	Dialogs/Device/DeviceListDialog.cpp	/^    bool debug:1;$/;"	m	struct:final::Flags	file:
debug	Terrain/jasper/jpc/jpc_dec.h	/^	int debug;$/;"	m	struct:__anon153
debug	Topography/shapelib/mapserver.h	/^    int debug;$/;"	m	struct:classObj
debug	Topography/shapelib/mapserver.h	/^    int debug;$/;"	m	struct:layerObj
debug	Topography/shapelib/mapserver.h	/^    int debug;$/;"	m	struct:mapObj
debugInfoObj	Topography/shapelib/maperror.h	/^  } debugInfoObj;$/;"	t	typeref:struct:debug_info_obj
debugLevel	Topography/shapelib/maperror.h	/^               } debugLevel;$/;"	t	typeref:enum:__anon73
debugMode	Topography/shapelib/maperror.h	/^               } debugMode;$/;"	t	typeref:enum:__anon74
debug_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *debug_button;$/;"	m	class:final	file:
debug_info_obj	Topography/shapelib/maperror.h	/^  typedef struct debug_info_obj {$/;"	s
debug_mode	Topography/shapelib/maperror.h	/^    debugMode   debug_mode;$/;"	m	struct:debug_info_obj
dec_clnpass	Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_clnpass(jpc_dec_t *dec, register jpc_mqdec_t *mqdec, int bitpos, int orient,$/;"	f	file:
dec_rawrefpass	Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_rawrefpass(jpc_dec_t *dec, jpc_bitstream_t *in, int bitpos, int vcausalflag,$/;"	f	file:
dec_rawsigpass	Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_rawsigpass(jpc_dec_t *dec, jpc_bitstream_t *in, int bitpos, int vcausalflag,$/;"	f	file:
dec_refpass	Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_refpass(jpc_dec_t *dec, register jpc_mqdec_t *mqdec, int bitpos,$/;"	f	file:
dec_sigpass	Terrain/jasper/jpc/jpc_t1dec.c	/^static int dec_sigpass(jpc_dec_t *dec, register jpc_mqdec_t *mqdec, int bitpos, int orient,$/;"	f	file:
decl	Device/Driver/IMI/Protocol/Types.hpp	/^    TDeclaration decl;$/;"	m	struct:IMI::Flight
declaration	Logger/ExternalLogger.cpp	/^  const struct Declaration &declaration;$/;"	m	class:DeclareJob	typeref:struct:DeclareJob::Declaration	file:
decode	Terrain/jasper/jas_image.h	/^	jas_image_t *(*decode)(jas_stream_t *in, const char *opts);$/;"	m	struct:__anon126
decoded	Weather/METAR.hpp	/^  ContentString decoded;$/;"	m	struct:METAR
decopts	Terrain/jasper/jpc/jpc_dec.c	/^static const jas_taginfo_t decopts[] = {$/;"	v	file:
default_approximation_scale	Topography/shapelib/mapserver.h	/^    double default_approximation_scale;$/;"	m	struct:rendererVTableObj
default_brush	Look/FlarmTrafficLook.hpp	/^  Brush default_brush;$/;"	m	struct:FlarmTrafficLook
default_color	Look/FlarmTrafficLook.hpp	/^  Color default_color;$/;"	m	struct:FlarmTrafficLook
default_io	zzip/plugin.c	/^static const struct zzip_plugin_io default_io = {$/;"	v	typeref:struct:zzip_plugin_io	file:
default_io_read	zzip/plugin.c	/^default_io_read(int fd, void *buf, zzip_size_t len)$/;"	f	file:
default_io_write	zzip/plugin.c	/^default_io_write(int fd, const void *buf, zzip_size_t len)$/;"	f	file:
default_pen	Look/FlarmTrafficLook.hpp	/^  Pen default_pen;$/;"	m	struct:FlarmTrafficLook
default_status_messages	StatusMessage.cpp	/^static constexpr StatusMessage default_status_messages[] = {$/;"	v	file:
default_task_path	Task/DefaultTask.hpp	32;"	d
default_transform_mode	Topography/shapelib/mapserver.h	/^    enum MS_TRANSFORM_MODE default_transform_mode;$/;"	m	struct:rendererVTableObj	typeref:enum:rendererVTableObj::MS_TRANSFORM_MODE
defaultpchg	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchg_t defaultpchg;$/;"	m	struct:__anon138
defined	Thread/Thread.hpp	/^  Thread(const char *_name=nullptr) noexcept:name(_name), defined(false) {$/;"	f	class:Thread
defined	Thread/Thread.hpp	/^  bool defined;$/;"	m	class:Thread
defresolution	Topography/shapelib/mapserver.h	/^    double defresolution; \/* default resolution: used for calculate the scalefactor *\/$/;"	m	struct:mapObj
degradation_factor	Computer/Settings.hpp	/^  double degradation_factor;$/;"	m	struct:PolarSettings
degrees	Device/Driver/IMI/Protocol/Conversion.hpp	/^        IMIDWORD degrees :8;$/;"	m	struct:IMI::AngleConverter::__anon199::__anon200
degrees	Math/Angle.hpp	/^    unsigned degrees, minutes, seconds;$/;"	m	struct:Angle::DMS
deinitSurface	Android/NativeView.hpp	/^  void deinitSurface() {$/;"	f	class:NativeView
deinit_surface_method	Android/NativeView.cpp	/^jmethodID NativeView::init_surface_method, NativeView::deinit_surface_method;$/;"	m	class:NativeView	file:
deinit_surface_method	Android/NativeView.hpp	/^  static jmethodID init_surface_method, deinit_surface_method;$/;"	m	class:NativeView
delay	Event/DelayedNotify.hpp	/^  const std::chrono::steady_clock::duration delay;$/;"	m	class:final
delay	RateLimiter.cpp	/^  :period(_period - _delay), delay(_delay)$/;"	f
delay	RateLimiter.hpp	/^  std::chrono::steady_clock::duration period, delay;$/;"	m	class:RateLimiter
delay	StatusMessage.hpp	/^  std::chrono::steady_clock::duration delay;$/;"	m	struct:StatusMessage
delay	Thread/WorkerThread.hpp	/^  const std::chrono::steady_clock::duration period_min, idle_min, delay;$/;"	m	class:WorkerThread
delete_button	Dialogs/Plane/PlaneListDialog.cpp	/^  Button *edit_button, *delete_button, *load_button;$/;"	m	class:final	file:
delete_button	Dialogs/ProfileListDialog.cpp	/^  Button *copy_button, *delete_button;$/;"	m	class:final	file:
delete_button	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *add_button, *delete_button;$/;"	m	class:PageListWidget	file:
delete_button	Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
delta	Engine/Task/Unordered/AlternateTask.hpp	/^    double delta;$/;"	m	struct:final::Divert
delta_distance	Engine/Trace/Trace.hpp	/^    unsigned delta_distance;$/;"	m	struct:Trace::TraceDelta
delta_list	Engine/Trace/Trace.hpp	/^  DeltaList delta_list;$/;"	m	class:Trace
delta_t	Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
delta_t	Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
delta_time	Computer/AverageVarioComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:AverageVarioComputer
delta_time	Computer/FlyingComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:FlyingComputer
delta_time	Computer/GlideComputerAirData.hpp	/^  DeltaTime delta_time;$/;"	m	class:GlideComputerAirData
delta_time	Computer/GroundSpeedComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:GroundSpeedComputer
delta_time	Computer/WarningComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:WarningComputer
delta_time	Computer/WaveComputer.hpp	/^  DeltaTime delta_time;$/;"	m	class:WaveComputer
delta_x	Terrain/ScanLine.cpp	/^  int delta_x, delta_y;$/;"	m	struct:GridRay	file:
delta_y	Terrain/ScanLine.cpp	/^  int delta_x, delta_y;$/;"	m	struct:GridRay	file:
demo	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    PixelRect demo, save;$/;"	m	struct:final::Layout	file:
demo_button	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  Button demo_button, save_button;$/;"	m	class:final	file:
dendlatitude	Topography/shapelib/mapserver.h	/^    double    dendlatitude;$/;"	m	struct:__anon56
dendlongitude	Topography/shapelib/mapserver.h	/^    double    dendlongitude;$/;"	m	struct:__anon56
denom	Math/Quadratic.hpp	/^  const double denom;$/;"	m	class:Quadratic
depth	Engine/Route/FlatTriangleFanTree.hpp	/^  const unsigned char depth;$/;"	m	class:FlatTriangleFanTree
desc	Terrain/jasper/jas_image.h	/^	char *desc;$/;"	m	struct:__anon127
descent_rate	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double descent_rate;$/;"	m	class:AirspaceAircraftPerformance
description	InfoBoxes/Content/Factory.cpp	/^  const TCHAR *description;$/;"	m	struct:MetaData	file:
dest_counter	Terrain/RasterBuffer.cpp	/^  unsigned dest_increment, dest_counter;$/;"	m	class:PixelIterator	file:
dest_increment	Terrain/RasterBuffer.cpp	/^  unsigned dest_increment, dest_counter;$/;"	m	class:PixelIterator	file:
destination	Engine/Task/Points/TaskLeg.hpp	/^  OrderedTaskPoint& destination;$/;"	m	class:TaskLeg
destination	Engine/Task/Unordered/AlternateTask.hpp	/^  GeoPoint destination;$/;"	m	class:final
destination	Geo/Memento/DistanceMemento.hpp	/^  mutable GeoPoint destination;$/;"	m	class:DistanceMemento
destination	Geo/Memento/GeoVectorMemento.hpp	/^  mutable GeoPoint destination;$/;"	m	class:GeoVectorMemento
destination_last	Engine/Route/RoutePlanner.hpp	/^  AFlatGeoPoint destination_last;$/;"	m	class:RoutePlanner
destroy	Terrain/jasper/jas_cm.h	/^	void (*destroy)(struct jas_cmpxform_s *pxform);$/;"	m	struct:__anon96
destroy	Terrain/jasper/jas_icc.h	/^	void (*destroy)(struct jas_iccattrval_s *);$/;"	m	struct:__anon187
destroy	Terrain/jasper/jp2/jp2_cod.h	/^	void (*destroy)(jp2_box_t *box);$/;"	m	struct:jp2_boxops_s
destroy	Util/SliceAllocator.hxx	/^	void destroy(T *t) {$/;"	f	class:GlobalSliceAllocator
destroy	Util/SliceAllocator.hxx	/^	void destroy(T *t) {$/;"	f	class:SliceAllocator
destroyTreeNode	Topography/shapelib/maptree.c	/^static void destroyTreeNode(treeNodeObj *node)$/;"	f	file:
destroyparms	Terrain/jasper/jpc/jpc_cs.h	/^	void (*destroyparms)(jpc_ms_t *ms);$/;"	m	struct:jpc_msops_s
details	Engine/Waypoint/Waypoint.hpp	/^  tstring details;$/;"	m	struct:Waypoint
details_button	Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
details_button	Dialogs/Task/AlternatesListDialog.cpp	/^  Button *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
details_button	Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
details_button	Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
details_button	Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
details_button	Gauge/BigTrafficWidget.hpp	/^  Button *details_button;$/;"	m	class:TrafficWidget
details_panel	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  PanelControl details_panel;$/;"	m	class:final	file:
details_text	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect details_text;$/;"	m	struct:final::Layout	file:
details_text	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  LargeTextWindow details_text;$/;"	m	class:final	file:
detected	Device/Driver/Vega/Internal.hpp	/^  bool detected;$/;"	m	class:VegaDevice
detected_x_dpi	Hardware/DisplayDPI.cpp	/^static unsigned detected_x_dpi = 0, detected_y_dpi = 0;$/;"	v	file:
detected_y_dpi	Hardware/DisplayDPI.cpp	/^static unsigned detected_x_dpi = 0, detected_y_dpi = 0;$/;"	v	file:
detour_cost_markers_enabled	MapSettings.hpp	/^  bool detour_cost_markers_enabled;$/;"	m	struct:MapSettings
devInitOne	Device/device.cpp	/^devInitOne(DeviceDescriptor &device, const DeviceConfig &config)$/;"	f	file:
devRestart	Device/device.cpp	/^devRestart()$/;"	f
devShutdown	Device/device.cpp	/^devShutdown()$/;"	f
devStartup	Device/device.cpp	/^devStartup()$/;"	f
devVarioFindVega	Device/device.cpp	/^devVarioFindVega()$/;"	f
device	Audio/SDLPCMPlayer.hpp	/^  SDL_AudioDeviceID device = -1;$/;"	m	class:SDLPCMPlayer
device	Device/Descriptor.cpp	/^  DeviceDescriptor &device;$/;"	m	class:final	file:
device	Device/Descriptor.cpp	/^  DeviceDescriptor &device;$/;"	m	struct:ScopeReturnDevice	file:
device	Device/Descriptor.hpp	/^  Device *device;$/;"	m	class:final
device	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE device;$/;"	m	struct:IMI::TDeviceInfo
device	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE id, device;$/;"	m	struct:IMI::TDeclarationHeader
device	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  BlueFlyDevice &device;$/;"	m	class:final	file:
device	Dialogs/Device/CAI302/WaypointUploader.hpp	/^  CAI302Device &device;$/;"	m	class:CAI302WaypointUploader
device	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  FlarmDevice &device;$/;"	m	class:final
device	Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  gcc_unused_field LXDevice &device;$/;"	m	class:ManageLX16xxWidget	file:
device	Dialogs/Device/LX/ManageNanoDialog.cpp	/^  LXDevice &device;$/;"	m	class:final	file:
device	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  LXDevice &device;$/;"	m	class:final	file:
device	Dialogs/Device/LX/NanoConfigWidget.hpp	/^  LXDevice &device;$/;"	m	class:final
device	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  LXDevice &device;$/;"	m	class:final
device	Dialogs/Device/ManageCAI302Dialog.cpp	/^  CAI302Device &device;$/;"	m	class:final	file:
device	Dialogs/Device/ManageFlarmDialog.cpp	/^  FlarmDevice &device;$/;"	m	class:final	file:
device	Dialogs/Device/PortMonitor.cpp	/^  DeviceDescriptor &device;$/;"	m	class:final	file:
device	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static VegaDevice *device;$/;"	v	file:
device	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  VegaDevice &device;$/;"	m	class:VegaParametersWidget
device	Logger/ExternalLogger.cpp	/^  DeviceDescriptor &device;$/;"	m	class:DeclareJob	file:
device	Logger/ExternalLogger.cpp	/^  DeviceDescriptor &device;$/;"	m	class:DownloadFlightJob	file:
device	Logger/ExternalLogger.cpp	/^  DeviceDescriptor &device;$/;"	m	class:ReadFlightListJob	file:
device	NMEA/Info.hpp	/^  DeviceInfo device;$/;"	m	struct:NMEAInfo
device	Replay/NmeaReplay.hpp	/^  Device *device;$/;"	m	class:NmeaReplay
device	Topography/shapelib/mapserver.h	/^    void *device; \/* for supporting direct rendering onto a device context *\/$/;"	m	struct:__anon39
device_blackboard	Components.cpp	/^DeviceBlackboard *device_blackboard;$/;"	v
device_blackboard	MergeThread.hpp	/^  DeviceBlackboard &device_blackboard;$/;"	m	class:final
devices	Blackboard/DeviceBlackboard.hpp	/^  MultipleDevices *devices;$/;"	m	class:DeviceBlackboard
devices	Components.cpp	/^MultipleDevices *devices;$/;"	v
devices	Device/Dispatcher.hpp	/^  MultipleDevices &devices;$/;"	m	class:final
devices	Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const devices[] = {$/;"	m	class:IMI	file:
devices	Device/MultipleDevices.hpp	/^  std::array<DeviceDescriptor *, NUMDEV> devices;$/;"	m	class:final
devices	SystemSettings.hpp	/^  std::array<DeviceConfig, NUMDEV> devices;$/;"	m	struct:SystemSettings
dew_point	Weather/ParsedMETAR.hpp	/^  double temperature, dew_point;$/;"	m	struct:ParsedMETAR
dewpoint	Atmosphere/CuSonde.hpp	/^    Temperature dewpoint;$/;"	m	struct:CuSonde::Level
dewpoint_empty	Atmosphere/CuSonde.hpp	/^    bool dewpoint_empty() const {$/;"	f	struct:CuSonde::Level
df	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  DataFieldEnum &df;$/;"	m	class:LanguageFileVisitor	file:
df	Dialogs/StartupDialog.cpp	/^  DataField *const df;$/;"	m	class:final	file:
df	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  DiffFilter df;$/;"	m	class:IncrementalSpeedComputer
df	Engine/Task/Computer/TaskVarioComputer.hpp	/^  DiffFilter df;$/;"	m	class:TaskVarioComputer
df_max	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned df_min, df_max;$/;"	m	struct:TriangleContest::CandidateSet
df_min	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned df_min, df_max;$/;"	m	struct:TriangleContest::CandidateSet
dh	Engine/ThermalBand/ThermalBand.hpp	/^     double dh;$/;"	m	class:ThermalBand
dhv_xc_free	Engine/Contest/ContestManager.hpp	/^  XContestFree dhv_xc_free;$/;"	m	class:ContestManager
dhv_xc_triangle	Engine/Contest/ContestManager.hpp	/^  XContestTriangle dhv_xc_triangle;$/;"	m	class:ContestManager
dialog	Dialogs/Airspace/AirspaceList.cpp	/^  ActionListener &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^static WndForm *dialog = NULL;$/;"	v	file:
dialog	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/DownloadFilePicker.cpp	/^  ProgressDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/DownloadFilePicker.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  WndForm *dialog;$/;"	m	class:final	file:
dialog	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  ActionListener &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Task/Manager/Internal.hpp	/^  WndForm &dialog;$/;"	m	class:final
dialog	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  TaskManagerDialog &dialog;$/;"	m	class:TaskActionsPanel
dialog	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  TaskManagerDialog &dialog;$/;"	m	class:final
dialog	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TaskManagerDialog &dialog;$/;"	m	class:TaskEditPanel	file:
dialog	Dialogs/Task/Manager/TaskListPanel.cpp	/^  TaskManagerDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  TaskManagerDialog &dialog;$/;"	m	class:final
dialog	Dialogs/Task/TargetDialog.cpp	/^  ActionListener &dialog;$/;"	m	class:TargetWidget	file:
dialog	Dialogs/Task/TaskPointDialog.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Traffic/TrafficList.cpp	/^  ActionListener &dialog;$/;"	m	class:TrafficListButtons	file:
dialog	Dialogs/Waypoint/WaypointList.cpp	/^  ActionListener &dialog;$/;"	m	class:WaypointListButtons	file:
dialog	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WidgetDialog &dialog;$/;"	m	class:final	file:
dialog	Dialogs/Weather/NOAADetails.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	Dialogs/dlgAnalysis.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	Dialogs/dlgQuickMenu.cpp	/^  WndForm &dialog;$/;"	m	class:final	file:
dialog	Event/Windows/Loop.hpp	/^  HWND dialog;$/;"	m	class:DialogEventLoop
dialog	Kobo/KoboMenu.cpp	/^  ActionListener &dialog;$/;"	m	class:final	file:
dialog	Look/Look.hpp	/^  DialogLook dialog;$/;"	m	struct:Look
dialog	UISettings.hpp	/^  DialogSettings dialog;$/;"	m	struct:UISettings
dialog_look	Dialogs/JobDialog.hpp	/^  const DialogLook &dialog_look;$/;"	m	class:DialogJobRunner
dialog_look	Dialogs/MapItemListDialog.cpp	/^  const DialogLook &dialog_look;$/;"	m	class:final	file:
dialog_look	Dialogs/Task/AlternatesListDialog.cpp	/^  const DialogLook &dialog_look;$/;"	m	class:final	file:
dialog_settings	Kobo/KoboMenu.cpp	/^static DialogSettings dialog_settings;$/;"	v	file:
dialog_state	Dialogs/Airspace/AirspaceList.cpp	/^static AirspaceListWidgetState dialog_state;$/;"	v	file:
dialog_state	Dialogs/Waypoint/WaypointList.cpp	/^static WaypointListDialogState dialog_state;$/;"	v	file:
dialogs	Screen/SingleWindow.hpp	/^  std::forward_list<WndForm *> dialogs;$/;"	m	class:SingleWindow
difference_type	Engine/Trace/Trace.cpp	/^  typedef typename I::difference_type difference_type;$/;"	t	class:PointerIterator	file:
difference_type	Util/CastIterator.hpp	/^  typedef typename IT::difference_type difference_type;$/;"	t	class:CastIterator
difference_type	Util/QuadTree.hxx	/^		typedef ptrdiff_t difference_type;$/;"	t	class:const_iterator
difference_type	Util/QuadTree.hxx	/^		typedef ptrdiff_t difference_type;$/;"	t	class:iterator
dijkstra	Engine/PathSolvers/NavDijkstra.hpp	/^  Dijkstra dijkstra;$/;"	m	class:NavDijkstra
dijkstra_max	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskDijkstraMax *dijkstra_max;$/;"	m	class:final
dijkstra_min	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskDijkstraMin *dijkstra_min;$/;"	m	class:final
dimmed_text_color	Look/VarioLook.hpp	/^  Color background_color, text_color, dimmed_text_color;$/;"	m	struct:VarioLook
dincrementlatitude	Topography/shapelib/mapserver.h	/^    double    dincrementlatitude;$/;"	m	struct:__anon56
dincrementlongitude	Topography/shapelib/mapserver.h	/^    double    dincrementlongitude;$/;"	m	struct:__anon56
dir	Device/Port/TTYEnumerator.hpp	/^  DIR *dir;$/;"	m	class:TTYEnumerator
dir	IO/ZipArchive.hpp	/^  struct zzip_dir *dir = nullptr;$/;"	m	class:ZipArchive	typeref:struct:ZipArchive::zzip_dir
dir	Topography/TopographyFile.hpp	/^  zzip_dir *const dir;$/;"	m	class:TopographyFile
dir	zzip/file.h	/^    struct zzip_dir* dir; $/;"	m	struct:zzip_file	typeref:struct:zzip_file::zzip_dir
direct	Engine/Route/ReachResult.hpp	/^  int direct;$/;"	m	struct:ReachResult
direction	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t direction;$/;"	m	struct:Volkslogger::DeclarationWaypoint
direction	Dialogs/Airspace/AirspaceList.cpp	/^  unsigned direction;$/;"	m	struct:AirspaceListWidgetState	file:
direction	Engine/Airspace/AirspaceSorter.hpp	/^  Angle direction;$/;"	m	struct:AirspaceFilterData
direction	Engine/Waypoint/Runway.hpp	/^  int16_t direction;$/;"	m	class:Runway
direction	Gauge/ThermalAssistantRenderer.hpp	/^  Angle direction;$/;"	m	class:ThermalAssistantRenderer
direction	Waypoint/WaypointFilter.hpp	/^  Angle direction;$/;"	m	struct:WaypointFilter
direction_filter_items	Dialogs/Waypoint/WaypointList.cpp	/^static constexpr int direction_filter_items[] = {$/;"	v	file:
direction_index	Dialogs/Waypoint/WaypointList.cpp	/^  int direction_index;$/;"	m	struct:WaypointListDialogState	file:
dirent	zzip/lib.h	/^    struct zzip_dirent dirent;$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_dirent
dirsep_basename	zzip/file.c	/^dirsep_basename(zzip_char_t* name)$/;"	f	file:
dirsep_strcasecmp	zzip/file.c	/^dirsep_strcasecmp(zzip_char_t * s1, zzip_char_t * s2)$/;"	f	file:
dirsep_strcasecmp	zzip/file.c	140;"	d	file:
dirty	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^static bool changed, dirty;$/;"	v	file:
dirty	Engine/Route/RoutePlanner.hpp	/^  bool dirty;$/;"	m	class:RoutePlanner
dirty	Gauge/GaugeVario.hpp	/^  bool dirty = true;$/;"	m	class:GaugeVario
dirty	Screen/BufferWindow.hpp	/^  bool dirty;$/;"	m	class:BufferWindow
dirty	Screen/RawBitmap.hpp	/^  mutable bool dirty = true;$/;"	m	class:final
dirty	Terrain/RasterTileCache.hpp	/^  bool dirty;$/;"	m	class:RasterTileCache
disable_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *disable_button;$/;"	m	class:final	file:
disable_button	Dialogs/Weather/MapOverlayWidget.cpp	/^  Button *use_button, *disable_button, *update_button;$/;"	m	class:final	file:
disabled	Look/ButtonLook.hpp	/^  } disabled;$/;"	m	struct:ButtonLook	typeref:struct:ButtonLook::__anon25
disabled	Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
dispatcher	Device/Descriptor.hpp	/^  PortLineHandler *dispatcher;$/;"	m	class:final
dispatchers	Device/MultipleDevices.hpp	/^  std::array<DeviceDispatcher *, NUMDEV> dispatchers;$/;"	m	class:final
display	Event/Poll/WaylandQueue.hpp	/^  struct wl_display *const display;$/;"	m	class:final
display	Event/Poll/X11Queue.hpp	/^  _XDisplay *const display;$/;"	m	class:X11EventQueue
display	Renderer/AirspaceRendererSettings.hpp	/^  bool display;$/;"	m	struct:AirspaceClassRendererSettings
display	Screen/Custom/TopCanvas.hpp	/^  EGLDisplay display;$/;"	m	class:DisplayOrientation
display	UISettings.hpp	/^  DisplaySettings display;$/;"	m	struct:UISettings
display_format	Form/DataField/Number.hpp	/^  StaticString<32> display_format;$/;"	m	class:NumberDataField
display_ground_track	MapSettings.hpp	/^  DisplayGroundTrack display_ground_track;$/;"	m	struct:MapSettings
display_mode	UIState.hpp	/^  DisplayMode display_mode;$/;"	m	struct:UIState
display_name	Device/Driver.hpp	/^  const TCHAR *display_name;$/;"	m	struct:DeviceRegister
display_name	Weather/PCMet/Images.hpp	/^    const TCHAR *display_name;$/;"	m	struct:PCMet::ImageArea
display_name	Weather/PCMet/Images.hpp	/^    const TCHAR *display_name;$/;"	m	struct:PCMet::ImageType
display_orientation	Screen/OpenGL/Globals.cpp	/^  DisplayOrientation display_orientation;$/;"	m	namespace:OpenGL	file:
display_orientation_list	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice display_orientation_list[] = {$/;"	v	file:
display_parameters	Dialogs/Device/Vega/DisplayParameters.hpp	/^VegaParametersWidget::StaticParameter display_parameters[] = {$/;"	v
display_string	Form/DataField/ComboList.hpp	/^    tstring display_string;$/;"	m	struct:ComboList::Item
display_string	Form/DataField/Enum.hpp	/^    TCHAR *display_string;$/;"	m	class:final::Entry
display_string	Form/DataField/Enum.hpp	/^  const TCHAR *display_string;$/;"	m	struct:StaticEnumChoice
display_text_type	Renderer/WaypointRendererSettings.hpp	/^  } display_text_type;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::DisplayTextType
distance	Airspace/NearestAirspace.hpp	/^  double distance;$/;"	m	class:NearestAirspace
distance	Computer/GlideRatioCalculator.hpp	/^    unsigned distance;$/;"	m	struct:GlideRatioCalculator::Record
distance	Dialogs/Airspace/AirspaceList.cpp	/^  double distance;$/;"	m	struct:AirspaceListWidgetState	file:
distance	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  double distance;$/;"	m	struct:AirspaceInterceptSolution
distance	Engine/Airspace/AirspaceSorter.hpp	/^  double distance;$/;"	m	struct:AirspaceFilterData
distance	Engine/Contest/ContestResult.hpp	/^  double distance;$/;"	m	struct:ContestResult
distance	Engine/Task/Stats/DistanceStat.hpp	/^  double distance;$/;"	m	class:DistanceStat
distance	Engine/Task/Stats/WindowStats.hpp	/^  double distance;$/;"	m	struct:WindowStats
distance	FLARM/Traffic.hpp	/^  RoughDistance distance;$/;"	m	class:FlarmTraffic::AircraftType
distance	Gauge/FlarmTrafficWindow.hpp	/^  double distance;$/;"	m	class:FlarmTrafficWindow
distance	Geo/GeoVector.hpp	/^  double distance;$/;"	m	struct:GeoVector
distance	Terrain/RasterTile.hpp	/^  unsigned distance;$/;"	m	class:RasterTile
distance	Waypoint/WaypointFilter.hpp	/^  double distance;$/;"	m	struct:WaypointFilter
distance_filter_items	Dialogs/Waypoint/WaypointList.cpp	/^static constexpr unsigned distance_filter_items[] = {$/;"	v	file:
distance_index	Dialogs/Waypoint/WaypointList.cpp	/^  int distance_index;$/;"	m	struct:WaypointListDialogState	file:
distance_max	Engine/Task/Stats/TaskStats.hpp	/^  double distance_max;$/;"	m	class:TaskStats
distance_min	Engine/Task/Stats/TaskStats.hpp	/^  double distance_min;$/;"	m	class:TaskStats
distance_nominal	Engine/Task/Stats/TaskStats.hpp	/^  double distance_nominal;$/;"	m	class:TaskStats
distance_scored	Engine/Task/Stats/TaskStats.hpp	/^  double distance_scored;$/;"	m	class:TaskStats
distance_type	Util/QuadTree.hxx	/^	typedef unsigned distance_type;$/;"	t	class:QuadTree
distance_unit	Units/Settings.hpp	/^  Unit distance_unit;$/;"	m	struct:UnitSetting
distinct_zoom	PageSettings.hpp	/^  bool distinct_zoom;$/;"	m	struct:PageSettings
dither	Screen/Custom/TopCanvas.hpp	/^  Dither dither;$/;"	m	class:DisplayOrientation
dlgAirspaceDetails	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^dlgAirspaceDetails(const AbstractAirspace &airspace,$/;"	f
dlgAirspacePatternsShowModal	Dialogs/Airspace/dlgAirspacePatterns.cpp	/^dlgAirspacePatternsShowModal(const AirspaceLook &look)$/;"	f
dlgAirspaceShowModal	Dialogs/Airspace/dlgAirspace.cpp	/^dlgAirspaceShowModal(bool color_mode)$/;"	f
dlgAirspaceWarningVisible	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^dlgAirspaceWarningVisible()$/;"	f
dlgAirspaceWarningsShowModal	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^dlgAirspaceWarningsShowModal(ProtectedAirspaceWarningManager &_warnings,$/;"	f
dlgAlternatesListShowModal	Dialogs/Task/AlternatesListDialog.cpp	/^dlgAlternatesListShowModal()$/;"	f
dlgAnalysisShowModal	Dialogs/dlgAnalysis.cpp	/^dlgAnalysisShowModal(SingleWindow &parent, const Look &look,$/;"	f
dlgBasicSettingsShowModal	Dialogs/Settings/dlgBasicSettings.cpp	/^dlgBasicSettingsShowModal()$/;"	f
dlgChecklistShowModal	Dialogs/dlgChecklist.cpp	/^dlgChecklistShowModal()$/;"	f
dlgConfigInfoboxesShowModal	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^dlgConfigInfoboxesShowModal(SingleWindow &parent,$/;"	f
dlgConfigWaypointsShowModal	Dialogs/Waypoint/Manager.cpp	/^dlgConfigWaypointsShowModal()$/;"	f
dlgConfigurationBlueFlyVarioShowModal	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^dlgConfigurationBlueFlyVarioShowModal(Device &_device)$/;"	f
dlgConfigurationShowModal	Dialogs/Settings/dlgConfiguration.cpp	/^void dlgConfigurationShowModal()$/;"	f
dlgConfigurationVarioShowModal	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^dlgConfigurationVarioShowModal(Device &_device)$/;"	f
dlgCreditsShowModal	Dialogs/dlgCredits.cpp	/^dlgCreditsShowModal(SingleWindow &parent)$/;"	f
dlgFlarmTrafficDetailsShowModal	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^dlgFlarmTrafficDetailsShowModal(FlarmId id)$/;"	f
dlgInfoBoxAccessShowModeless	Dialogs/dlgInfoBoxAccess.cpp	/^dlgInfoBoxAccessShowModeless(const int id, const InfoBoxPanel *panels)$/;"	f
dlgNOAADetailsShowModal	Dialogs/Weather/NOAADetails.cpp	/^dlgNOAADetailsShowModal(NOAAStore::iterator iterator)$/;"	f
dlgNOAADetailsShowModal	Dialogs/Weather/NOAADetails.cpp	/^dlgNOAADetailsShowModal(unsigned station_index)$/;"	f
dlgPlaneDetailsShowModal	Dialogs/Plane/PlaneDetailsDialog.cpp	/^dlgPlaneDetailsShowModal(Plane &_plane)$/;"	f
dlgPlanePolarShowModal	Dialogs/Plane/PlanePolarDialog.cpp	/^dlgPlanePolarShowModal(Plane &_plane)$/;"	f
dlgPlanesShowModal	Dialogs/Plane/PlaneListDialog.cpp	/^dlgPlanesShowModal()$/;"	f
dlgQuickMenuShowModal	Dialogs/dlgQuickMenu.cpp	/^dlgQuickMenuShowModal(SingleWindow &parent)$/;"	f
dlgSimulatorPromptShowModal	Dialogs/dlgSimulatorPrompt.cpp	/^dlgSimulatorPromptShowModal()$/;"	f
dlgStartupShowModal	Dialogs/StartupDialog.cpp	/^dlgStartupShowModal()$/;"	f
dlgStatusShowModal	Dialogs/dlgStatus.cpp	/^dlgStatusShowModal(int start_page)$/;"	f
dlgSwitchesShowModal	Dialogs/Device/Vega/SwitchesDialog.cpp	/^dlgSwitchesShowModal()$/;"	f
dlgTargetShowModal	Dialogs/Task/TargetDialog.cpp	/^dlgTargetShowModal(int _target_point)$/;"	f
dlgTaskManagerShowModal	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^dlgTaskManagerShowModal()$/;"	f
dlgTaskOptionalStarts	Dialogs/Task/OptionalStartsDialog.cpp	/^dlgTaskOptionalStarts(OrderedTask &task)$/;"	f
dlgTaskPointShowModal	Dialogs/Task/TaskPointDialog.cpp	/^dlgTaskPointShowModal(OrderedTask &task,$/;"	f
dlgTaskPointType	Dialogs/Task/MutateTaskPointDialog.cpp	/^dlgTaskPointType(OrderedTask &task, const unsigned index)$/;"	f
dlgTeamCodeShowModal	Dialogs/Traffic/TeamCodeDialog.cpp	/^dlgTeamCodeShowModal()$/;"	f
dlgVegaDemoShowModal	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^dlgVegaDemoShowModal()$/;"	f
dlgWaypointDetailsShowModal	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^dlgWaypointDetailsShowModal(WaypointPtr _waypoint,$/;"	f
dlgWaypointEditShowModal	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^dlgWaypointEditShowModal(Waypoint &way_point)$/;"	f
dmst_quad	Engine/Contest/ContestManager.hpp	/^  DMStQuad dmst_quad;$/;"	m	class:ContestManager
do_sha256	Net/HTTP/ToFile.cpp	/^    :out(_out), env(_env), do_sha256(_do_sha256)$/;"	f	class:final
do_sha256	Net/HTTP/ToFile.cpp	/^  const bool do_sha256;$/;"	m	class:final	file:
do_water	Weather/Rasp/RaspStyle.hpp	/^  bool do_water;$/;"	m	struct:RaspStyle
dot	Topography/shapelib/mapsearch.c	374;"	d	file:
double_click	Screen/TopWindow.hpp	/^  DoubleClick double_click;$/;"	m	class:TopWindow
down	Dialogs/Task/Manager/TaskEditPanel.cpp	/^    PixelRect edit, down, up, reverse, clear_all;$/;"	m	struct:final::Layout	file:
down	Event/Poll/Linux/Input.hpp	/^  bool down;$/;"	m	class:final
down	Event/Poll/Linux/MergeMouse.hpp	/^  bool down = false;$/;"	m	class:final
down	Form/Button.hpp	/^  bool dragging, down;$/;"	m	class:Button
down_button	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button down_button, up_button;$/;"	m	class:final	file:
down_index	Form/TabDisplay.hpp	/^  unsigned down_index; \/\/ index of tab where mouse down occurred$/;"	m	class:final
down_index	Form/TabMenuDisplay.hpp	/^  MenuTabIndex down_index;$/;"	m	class:final
download_button	Dialogs/DownloadFilePicker.cpp	/^  Button *download_button;$/;"	m	class:final	file:
download_button	Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
download_manager	Net/HTTP/DownloadManager.cpp	/^static AndroidDownloadManager *download_manager;$/;"	v	file:
download_status	Dialogs/FileManager.cpp	/^    DownloadStatus download_status;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
downloading	Dialogs/FileManager.cpp	/^    bool downloading, failed, out_of_date;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
downloads	Dialogs/FileManager.cpp	/^  std::map<std::string, DownloadStatus> downloads;$/;"	m	class:ManagedFileListWidget	file:
drag_last	MapWindow/TargetMapWindow.hpp	/^  PixelPoint drag_start, drag_last;$/;"	m	class:TargetMapWindow
drag_last	UIUtil/GestureManager.hpp	/^  PixelPoint drag_last;$/;"	m	class:GestureManager
drag_mode	Form/List.hpp	/^  DragMode drag_mode = DragMode::NONE;$/;"	m	class:ListControl
drag_mode	MapWindow/GlueMapWindow.hpp	/^  } drag_mode = DRAG_NONE;$/;"	m	class:GlueMapWindow	typeref:enum:GlueMapWindow::DragMode
drag_mode	MapWindow/TargetMapWindow.hpp	/^  } drag_mode;$/;"	m	class:TargetMapWindow	typeref:enum:TargetMapWindow::DragMode
drag_off_button	Form/TabDisplay.hpp	/^  bool drag_off_button; \/\/ set by mouse_move$/;"	m	class:final
drag_off_button	Form/TabMenuDisplay.hpp	/^  bool drag_off_button; \/\/ set by mouse_move$/;"	m	class:final
drag_offset	Form/ScrollBar.hpp	/^  int drag_offset;$/;"	m	class:ScrollBar
drag_projection	MapWindow/GlueMapWindow.hpp	/^  Projection drag_projection;$/;"	m	class:GlueMapWindow
drag_start	MapWindow/GlueMapWindow.hpp	/^  PixelPoint drag_start;$/;"	m	class:GlueMapWindow
drag_start	MapWindow/TargetMapWindow.hpp	/^  PixelPoint drag_start, drag_last;$/;"	m	class:TargetMapWindow
drag_start_geopoint	MapWindow/GlueMapWindow.hpp	/^  GeoPoint drag_start_geopoint;$/;"	m	class:GlueMapWindow
drag_y	Form/List.hpp	/^  int drag_y;$/;"	m	class:ListControl
drag_y_window	Form/List.hpp	/^  int drag_y_window;$/;"	m	class:ListControl
dragging	Dialogs/dlgAnalysis.cpp	/^  bool dragging;$/;"	m	class:ChartControl	file:
dragging	Form/Button.hpp	/^  bool dragging, down;$/;"	m	class:Button
dragging	Form/CheckBox.hpp	/^  bool checked, dragging, pressed;$/;"	m	class:CheckBoxControl
dragging	Form/Edit.hpp	/^  bool dragging = false, pressed = false;$/;"	m	class:WndProperty
dragging	Form/Form.hpp	/^  bool dragging = false;$/;"	m	class:WndForm
dragging	Form/ScrollBar.hpp	/^  bool dragging;$/;"	m	class:ScrollBar
dragging	Form/TabDisplay.hpp	/^  bool dragging; \/\/ tracks that mouse is down and captured$/;"	m	class:final
dragging	Form/TabMenuDisplay.hpp	/^  bool dragging; \/\/ tracks that mouse is down and captured$/;"	m	class:final
dragging	Gauge/BigThermalAssistantWindow.hpp	/^  bool dragging;$/;"	m	class:BigThermalAssistantWindow
dragging	Gauge/BigTrafficWidget.cpp	/^  bool enable_auto_zoom, dragging;$/;"	m	class:FlarmTrafficControl	file:
dragging	Gauge/GaugeFLARM.cpp	/^  bool dragging, pressed;$/;"	m	class:SmallTrafficWindow	file:
dragging	Gauge/GaugeThermalAssistant.cpp	/^  bool dragging, pressed;$/;"	m	class:GaugeThermalAssistantWindow	file:
dragging	InfoBoxes/InfoBoxWindow.hpp	/^  bool dragging = false;$/;"	m	class:InfoBoxWindow
dragging	MainWindow.hpp	/^  bool dragging = false;$/;"	m	class:MainWindow
drain	Android/PortBridge.hpp	/^  bool drain(JNIEnv *env) {$/;"	f	class:PortBridge
drain_method	Android/PortBridge.cpp	/^jmethodID PortBridge::drain_method;$/;"	m	class:PortBridge	file:
drain_method	Android/PortBridge.hpp	/^  static jmethodID drain_method;$/;"	m	class:PortBridge
draw	Gauge/LogoView.cpp	/^LogoView::draw(Canvas &canvas, const PixelRect &rc)$/;"	f	class:LogoView
drawButtons	Input/InputEvents.cpp	/^InputEvents::drawButtons(Mode mode, bool full)$/;"	f	class:InputEvents
draw_bearing	Renderer/TaskPointRenderer.hpp	/^  const bool draw_bearing;$/;"	m	class:TaskPointRenderer
draw_scale	Projection/Projection.hpp	/^  double draw_scale;$/;"	m	class:Projection
draw_suspended	MainWindow.hpp	/^  bool draw_suspended = false;$/;"	m	class:MainWindow
draw_sw	MapWindow/MapWindow.hpp	/^  ScreenStopWatch draw_sw;$/;"	m	class:MapWindow
draw_thread	Components.cpp	/^DrawThread *draw_thread;$/;"	v
draw_thread_handle	Components.cpp	/^static ThreadHandle draw_thread_handle;$/;"	v	file:
dri_fd	Screen/EGL/TopCanvas.cpp	/^  int dri_fd;$/;"	m	struct:drm_fb	file:
drift_factor	Engine/Trace/Point.hpp	/^  uint16_t drift_factor;$/;"	m	class:TracePoint
driver	Device/Descriptor.hpp	/^  const DeviceRegister *driver;$/;"	m	class:final
driver	Topography/shapelib/mapserver.h	/^    char *driver;$/;"	m	struct:__anon39
driver2_name	Device/Config.hpp	/^  StaticString<32> driver2_name;$/;"	m	struct:DeviceConfig
driver_list	Device/Register.cpp	/^static const struct DeviceRegister *const driver_list[] = {$/;"	v	file:
driver_name	Device/Config.hpp	/^  StaticString<32> driver_name;$/;"	m	struct:DeviceConfig
drm_fb	Screen/EGL/TopCanvas.cpp	/^struct drm_fb {$/;"	s	file:
droidsoar_v2	Device/Descriptor.hpp	/^  BMP085Device *droidsoar_v2;$/;"	m	class:final
dry_mass	Engine/GlideSolvers/GlidePolar.hpp	/^  double dry_mass;$/;"	m	class:GlidePolar
dry_mass	Plane/Plane.hpp	/^  double dry_mass;$/;"	m	struct:Plane
dry_temperature	Atmosphere/CuSonde.hpp	/^    Temperature dry_temperature;$/;"	m	struct:CuSonde::Level
dsanzahl	Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dsanzahl;$/;"	m	struct:DBB::HEADER
dsfirst	Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dsfirst, dslast;$/;"	m	struct:DBB::HEADER
dslaenge	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t dslaenge;$/;"	m	struct:Volkslogger::TableHeader
dslaenge	Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dslaenge, keylaenge;$/;"	m	struct:DBB::HEADER
dslast	Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dsfirst, dslast;$/;"	m	struct:DBB::HEADER
dstartlatitude	Topography/shapelib/mapserver.h	/^    double    dstartlatitude;$/;"	m	struct:__anon56
dstartlongitude	Topography/shapelib/mapserver.h	/^    double    dstartlongitude;$/;"	m	struct:__anon56
dt	Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  double dt;$/;"	m	class:TaskSolveTravelled
dt	Engine/ThermalBand/ThermalSlice.hpp	/^     double dt;$/;"	m	struct:ThermalSlice
due	Event/Shared/TimerQueue.hpp	/^    std::chrono::steady_clock::time_point due;$/;"	m	struct:TimerQueue::TimerRecord
dummy	Screen/RawBitmap.hpp	/^  uint8_t dummy;$/;"	m	struct:RawColor
dummy	Terrain/jasper/jas_cm.h	/^		jas_align_t dummy;$/;"	m	union:jas_cmpxform_s::__anon101
dummy0	Device/Driver/LX/Protocol.hpp	/^    uint8_t dummy0[4];$/;"	m	struct:LX::FlightInfo
dummy0	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t dummy0[4];$/;"	m	struct:LXEra::FlightInfo
dummy_rc	Form/ButtonPanel.cpp	/^static constexpr PixelRect dummy_rc = { 0, 0, 100, 40 };$/;"	v	file:
dump	Terrain/jasper/jas_cm.h	/^	void (*dump)(struct jas_cmpxform_s *pxform);$/;"	m	struct:__anon96
dump	Topography/shapelib/mapserver.h	/^    int dump;$/;"	m	struct:layerObj
dump_button	Dialogs/Settings/dlgBasicSettings.cpp	/^  Button *dump_button;$/;"	m	class:final	file:
dump_port	Device/Config.hpp	/^  bool dump_port;$/;"	m	struct:DeviceConfig
dump_time	Plane/Plane.hpp	/^  unsigned dump_time;$/;"	m	struct:Plane
duplicate	Dialogs/Device/DeviceListDialog.cpp	/^    bool duplicate:1;$/;"	m	struct:final::Flags	file:
duplicate_always	Topography/shapelib/mapserver.h	/^  duplicate_always,$/;"	e	enum:__anon67
duplicate_if_needed	Topography/shapelib/mapserver.h	/^  duplicate_if_needed$/;"	e	enum:__anon67
duplicate_never	Topography/shapelib/mapserver.h	/^  duplicate_never,$/;"	e	enum:__anon67
duration	Engine/Task/Stats/WindowStats.hpp	/^  double duration;$/;"	m	struct:WindowStats
duration	NMEA/ClimbInfo.hpp	/^  double duration;$/;"	m	struct:OneClimbInfo
dwhichlatitude	Topography/shapelib/mapserver.h	/^    double    dwhichlatitude;$/;"	m	struct:__anon56
dwhichlongitude	Topography/shapelib/mapserver.h	/^    double    dwhichlongitude;$/;"	m	struct:__anon56
dx	Screen/Memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
dy	Screen/Memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
dyn_pressure	NMEA/Info.hpp	/^  AtmosphericPressure dyn_pressure;$/;"	m	struct:NMEAInfo
dyn_pressure_available	NMEA/Info.hpp	/^  Validity dyn_pressure_available;$/;"	m	struct:NMEAInfo
e	Geo/UTM.cpp	/^static constexpr double e = 0.00669438;$/;"	v	file:
e	Terrain/jasper/jas_icc.h	/^	jas_iccsint32_t e[3][3];$/;"	m	struct:__anon185
e	Terrain/jasper/jas_icc.h	/^	jas_iccsint32_t e[3][3];$/;"	m	struct:__anon186
e2	Geo/UTM.cpp	/^static constexpr double e2 = e * e;$/;"	v	file:
e3	Geo/UTM.cpp	/^static constexpr double e3 = e * e;$/;"	v	file:
eAttribEquals	XML/Parser.cpp	/^    eAttribEquals,$/;"	e	enum:XML::Attrib	file:
eAttribName	XML/Parser.cpp	/^    eAttribName = 0,$/;"	e	enum:XML::Attrib	file:
eAttribValue	XML/Parser.cpp	/^    eAttribValue$/;"	e	enum:XML::Attrib	file:
eInsideTag	XML/Parser.cpp	/^    eInsideTag = 0,$/;"	e	enum:XML::Status	file:
eOutsideTag	XML/Parser.cpp	/^    eOutsideTag$/;"	e	enum:XML::Status	file:
eTokenCloseTag	XML/Parser.cpp	/^    eTokenCloseTag,         \/* ">"            *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenDeclaration	XML/Parser.cpp	/^    eTokenDeclaration,      \/* "<?"           *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenEquals	XML/Parser.cpp	/^    eTokenEquals,           \/* "="            *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenError	XML/Parser.cpp	/^    eTokenError$/;"	e	enum:XML::TokenTypeTag	file:
eTokenQuotedText	XML/Parser.cpp	/^    eTokenQuotedText,$/;"	e	enum:XML::TokenTypeTag	file:
eTokenShortHandClose	XML/Parser.cpp	/^    eTokenShortHandClose,   \/* "\/>"           *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenTagEnd	XML/Parser.cpp	/^    eTokenTagEnd,           \/* "<\/"           *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenTagStart	XML/Parser.cpp	/^    eTokenTagStart,         \/* "<"            *\/$/;"	e	enum:XML::TokenTypeTag	file:
eTokenText	XML/Parser.cpp	/^    eTokenText = 0,$/;"	e	enum:XML::TokenTypeTag	file:
eTopLayout	Profile/PageProfile.cpp	/^enum eTopLayout {$/;"	g	file:
eType	Topography/shapelib/mapserver.h	/^    FilterNodeType      eType;$/;"	m	struct:_FilterNode
eValidationFileNotFound	VALI-XCS.cpp	/^  eValidationFileNotFound,$/;"	e	enum:STATUS_t	file:
eValidationFileRead	VALI-XCS.cpp	/^  eValidationFileRead,$/;"	e	enum:STATUS_t	file:
eValidationPassed	VALI-XCS.cpp	/^  eValidationPassed,$/;"	e	enum:STATUS_t	file:
eXMLErrorEmpty	XML/Parser.hpp	/^    eXMLErrorEmpty,$/;"	e	enum:XML::Error
eXMLErrorFileNotFound	XML/Parser.hpp	/^    eXMLErrorFileNotFound$/;"	e	enum:XML::Error
eXMLErrorFirstNotStartTag	XML/Parser.hpp	/^    eXMLErrorFirstNotStartTag,$/;"	e	enum:XML::Error
eXMLErrorInvalidTag	XML/Parser.hpp	/^    eXMLErrorInvalidTag,$/;"	e	enum:XML::Error
eXMLErrorMissingEndTagName	XML/Parser.hpp	/^    eXMLErrorMissingEndTagName,$/;"	e	enum:XML::Error
eXMLErrorMissingTagName	XML/Parser.hpp	/^    eXMLErrorMissingTagName,$/;"	e	enum:XML::Error
eXMLErrorNoElements	XML/Parser.hpp	/^    eXMLErrorNoElements,$/;"	e	enum:XML::Error
eXMLErrorNoMatchingQuote	XML/Parser.hpp	/^    eXMLErrorNoMatchingQuote,$/;"	e	enum:XML::Error
eXMLErrorNone	XML/Parser.hpp	/^    eXMLErrorNone = 0,$/;"	e	enum:XML::Error
eXMLErrorUnexpectedToken	XML/Parser.hpp	/^    eXMLErrorUnexpectedToken,$/;"	e	enum:XML::Error
eXMLErrorUnmatchedEndTag	XML/Parser.hpp	/^    eXMLErrorUnmatchedEndTag,$/;"	e	enum:XML::Error
e_AA_DistanceMax	InfoBoxes/Content/Type.hpp	/^    e_AA_DistanceMax, \/* Assigned Area Task maximum distance possible for remainder of task *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_DistanceMin	InfoBoxes/Content/Type.hpp	/^    e_AA_DistanceMin, \/* Assigned Area Task minimum distance possible for remainder of task *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_SpeedAvg	InfoBoxes/Content/Type.hpp	/^    e_AA_SpeedAvg, \/* Assigned Area Task average speed achievable around target points remaining in minimum AAT time *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_SpeedMax	InfoBoxes/Content/Type.hpp	/^    e_AA_SpeedMax, \/* Assigned Area Task average speed achievable if flying maximum possible distance remaining in minimum AAT time *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_SpeedMin	InfoBoxes/Content/Type.hpp	/^    e_AA_SpeedMin, \/* Assigned Area Task average speed achievable if flying minimum possible distance remaining in minimum AAT time *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_Time	InfoBoxes/Content/Type.hpp	/^    e_AA_Time, \/* Assigned Area Task time remaining. Goes red when time remaining has expired *\/$/;"	e	enum:InfoBoxFactory::Type
e_AA_TimeDiff	InfoBoxes/Content/Type.hpp	/^    e_AA_TimeDiff, \/* Difference between estimated task time and AAT minimum time. Colored red if negative (expected arrival too early), or blue if in sector and can turn now with estimated arrival time greater than AAT time plus 5 minutes *\/$/;"	e	enum:InfoBoxFactory::Type
e_Act_Speed	InfoBoxes/Content/Type.hpp	/^    e_Act_Speed, \/* The instantaneous MacCready speed-to-fly, making use of Netto vario calculations to determine dolphin cruise speed in the glider's current bearing. In cruise flight mode, this speed-to-fly is calculated for maintaining altitude. In final glide mode, this speed-to-fly is calculated for descent. In climb mode, this switches to the speed for minimum sink at the current load factor (if an accelerometer is connected). When Block mode speed to fly is selected, this infobox displays the MacCready speed *\/$/;"	e	enum:InfoBoxFactory::Type
e_ActiveRadio	InfoBoxes/Content/Type.hpp	/^    e_ActiveRadio, \/* Active Radio Frequency *\/$/;"	e	enum:InfoBoxFactory::Type
e_AirSpeed_Ext	InfoBoxes/Content/Type.hpp	/^    e_AirSpeed_Ext, \/* Indicated Airspeed reported by a supported external intelligent vario *\/$/;"	e	enum:InfoBoxFactory::Type
e_Alternate_1_GR	InfoBoxes/Content/Type.hpp	/^    e_Alternate_1_GR, \/* Geometric gradient to the arrival height above the best alternate. This is not adjusted for total energy *\/$/;"	e	enum:InfoBoxFactory::Type
e_Alternate_1_Name	InfoBoxes/Content/Type.hpp	/^    e_Alternate_1_Name, \/* Displays name and bearing to the best alternate landing location *\/$/;"	e	enum:InfoBoxFactory::Type
e_Alternate_2_Name	InfoBoxes/Content/Type.hpp	/^    e_Alternate_2_Name, \/* Displays name and bearing to the second alternate landing location *\/$/;"	e	enum:InfoBoxFactory::Type
e_Barogram	InfoBoxes/Content/Type.hpp	/^    e_Barogram,$/;"	e	enum:InfoBoxFactory::Type
e_Battery	InfoBoxes/Content/Type.hpp	/^    e_Battery, \/* Displays percentage of device battery remaining (where applicable) and status\/voltage of external power supply *\/$/;"	e	enum:InfoBoxFactory::Type
e_Bearing	InfoBoxes/Content/Type.hpp	/^    e_Bearing, \/* True bearing of the next waypoint.  For AAT tasks, this is the true bearing to the target within the AAT sector *\/$/;"	e	enum:InfoBoxFactory::Type
e_CC_Speed	InfoBoxes/Content/Type.hpp	/^    e_CC_Speed, \/* Achieved cross country speed while on current task, compensated for altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_CC_SpeedInst	InfoBoxes/Content/Type.hpp	/^    e_CC_SpeedInst, \/* Instantaneous cross country speed while on current task, compensated for altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_CPU_Load	InfoBoxes/Content/Type.hpp	/^    e_CPU_Load, \/* CPU load consumed by XCSoar averaged over 5 seconds *\/$/;"	e	enum:InfoBoxFactory::Type
e_CirclingAverage_spark	InfoBoxes/Content/Type.hpp	/^    e_CirclingAverage_spark,$/;"	e	enum:InfoBoxFactory::Type
e_Climb_Avg	InfoBoxes/Content/Type.hpp	/^    e_Climb_Avg, \/* Time-average climb rate in all thermals *\/$/;"	e	enum:InfoBoxFactory::Type
e_Climb_Perc	InfoBoxes/Content/Type.hpp	/^    e_Climb_Perc, \/* Percentage of time spent in climb mode. These statistics are reset upon starting the task *\/$/;"	e	enum:InfoBoxFactory::Type
e_Climb_Perc_Chart	InfoBoxes/Content/Type.hpp	/^    e_Climb_Perc_Chart,$/;"	e	enum:InfoBoxFactory::Type
e_Experimental1	InfoBoxes/Content/Type.hpp	/^    e_Experimental1, \/* Experimental1 *\/$/;"	e	enum:InfoBoxFactory::Type
e_Experimental2	InfoBoxes/Content/Type.hpp	/^    e_Experimental2, \/* Experimental2 *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_AA_Distance	InfoBoxes/Content/Type.hpp	/^    e_Fin_AA_Distance, \/* Assigned Area Task distance around target points for remainder of task *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_AltDiff	InfoBoxes/Content/Type.hpp	/^    e_Fin_AltDiff, \/* Arrival altitude at the final task turn point relative to the safety arrival height *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_AltReq	InfoBoxes/Content/Type.hpp	/^    e_Fin_AltReq, \/* Additional altitude required to finish the task *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_Distance	InfoBoxes/Content/Type.hpp	/^    e_Fin_Distance, \/* Distance to finish around remaining turn points *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_ETE_VMG	InfoBoxes/Content/Type.hpp	/^    e_Fin_ETE_VMG,$/;"	e	enum:InfoBoxFactory::Type
e_Fin_GR	InfoBoxes/Content/Type.hpp	/^    e_Fin_GR, \/* Geometric gradient to the arrival height above the final waypoint. This is not adjusted for total energy *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_GR_TE	InfoBoxes/Content/Type.hpp	/^    e_Fin_GR_TE, \/* Deprecated *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_Time	InfoBoxes/Content/Type.hpp	/^    e_Fin_Time, \/* Estimated time required to complete task, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_Fin_TimeLocal	InfoBoxes/Content/Type.hpp	/^    e_Fin_TimeLocal, \/* Estimated arrival local time at task completion, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_FlightLevel	InfoBoxes/Content/Type.hpp	/^    e_FlightLevel, \/* Flight Level, also known as pressure altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_Free_RAM	InfoBoxes/Content/Type.hpp	/^    e_Free_RAM, \/* Free RAM as reported by OS *\/$/;"	e	enum:InfoBoxFactory::Type
e_GR_Avg	InfoBoxes/Content/Type.hpp	/^    e_GR_Avg, \/* The distance made in the configured period of time divided by the altitude lost since then. *\/$/;"	e	enum:InfoBoxFactory::Type
e_GR_Cruise	InfoBoxes/Content/Type.hpp	/^    e_GR_Cruise, \/* The distance from the top of the last thermal, divided by the altitude lost since the top of the last thermal. Negative values indicate climbing cruise (height gain since leaving the last thermal). If the vertical speed is close to zero, the displayed value is '---' *\/$/;"	e	enum:InfoBoxFactory::Type
e_GR_Instantaneous	InfoBoxes/Content/Type.hpp	/^    e_GR_Instantaneous, \/* Instantaneous glide ratio over ground, given by the ground speed divided by the vertical speed (GPS speed) over the last 20 seconds. Negative values indicate climbing cruise. If the vertical speed is close to zero, the displayed value is '---' *\/$/;"	e	enum:InfoBoxFactory::Type
e_H_Baro	InfoBoxes/Content/Type.hpp	/^    e_H_Baro, \/* This is the barometric altitude obtained from a GPS equipped with pressure sensor, or a supported external intelligent vario *\/$/;"	e	enum:InfoBoxFactory::Type
e_H_QFE	InfoBoxes/Content/Type.hpp	/^    e_H_QFE, \/* Height on automatic QFE. This altitude value is constantly reset to 0 on ground BEFORE taking off. After takeoff, it is no more reset automatically even if on ground. During flight you can change QFE with up and down keys. Bottom line shows QNH altitude. Changing QFE does not affect QNH altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_H_Terrain	InfoBoxes/Content/Type.hpp	/^    e_H_Terrain, \/* This is the elevation of the terrain above mean sea level, obtained from the terrain file at the current GPS location *\/$/;"	e	enum:InfoBoxFactory::Type
e_HeadWind	InfoBoxes/Content/Type.hpp	/^    e_HeadWind,$/;"	e	enum:InfoBoxFactory::Type
e_HeightAGL	InfoBoxes/Content/Type.hpp	/^    e_HeightAGL, \/* This is the navigation altitude minus the terrain height obtained from the terrain file. The value is coloured red when the glider is below the terrain safety clearance height *\/$/;"	e	enum:InfoBoxFactory::Type
e_HeightGPS	InfoBoxes/Content/Type.hpp	/^    e_HeightGPS, \/* This is the height above mean sea level reported by the GPS. Touchscreen\/PC only: in simulation mode, this value is adjustable with the up\/down arrow keys and the right\/left arrow keys also cause the glider to turn *\/$/;"	e	enum:InfoBoxFactory::Type
e_Home_Distance	InfoBoxes/Content/Type.hpp	/^    e_Home_Distance, \/* Distance to home waypoint (if defined) *\/$/;"	e	enum:InfoBoxFactory::Type
e_Home_Temperature	InfoBoxes/Content/Type.hpp	/^    e_Home_Temperature, \/* Forecast temperature of the ground at the home airfield, used in estimating convection height and cloud base in conjunction with outside air temperature and relative humidity probe. (Touchscreen\/PC only) Pressing the up\/down cursor keys adjusts this forecast temperature *\/$/;"	e	enum:InfoBoxFactory::Type
e_Horizon	InfoBoxes/Content/Type.hpp	/^    e_Horizon,$/;"	e	enum:InfoBoxFactory::Type
e_HumidityRel	InfoBoxes/Content/Type.hpp	/^    e_HumidityRel, \/* Relative humidity of the air in percent as measured by a probe if supported by a connected intelligent variometer *\/$/;"	e	enum:InfoBoxFactory::Type
e_LD	InfoBoxes/Content/Type.hpp	/^    e_LD, \/* Instantaneous lift\/drag ratio, given by the indicated airspeed divided by the total energy vertical speed, when connected to an intelligent variometer. Negative values indicate climbing cruise. If the total energy vario speed is close to zero, the displayed value is '---' *\/$/;"	e	enum:InfoBoxFactory::Type
e_Load_G	InfoBoxes/Content/Type.hpp	/^    e_Load_G, \/* Magnitude of G loading reported by a supported external intelligent vario. This value is negative for pitch-down manoeuvres *\/$/;"	e	enum:InfoBoxFactory::Type
e_MacCready	InfoBoxes/Content/Type.hpp	/^    e_MacCready, \/* The current MacCready setting. This infobox also shows whether MacCready is manual or auto. (Touchscreen\/PC only) Also used to adjust the MacCready Setting if the infobox is active, by using the up\/down cursor keys *\/$/;"	e	enum:InfoBoxFactory::Type
e_NUM_TYPES	InfoBoxes/Content/Type.hpp	/^    e_NUM_TYPES \/* Last item *\/$/;"	e	enum:InfoBoxFactory::Type
e_NbrSat	InfoBoxes/Content/Type.hpp	/^    e_NbrSat, \/* Number of used Sat by GPS module *\/$/;"	e	enum:InfoBoxFactory::Type
e_NearestAirspaceHorizontal	InfoBoxes/Content/Type.hpp	/^    e_NearestAirspaceHorizontal,$/;"	e	enum:InfoBoxFactory::Type
e_NearestAirspaceVertical	InfoBoxes/Content/Type.hpp	/^    e_NearestAirspaceVertical,$/;"	e	enum:InfoBoxFactory::Type
e_NettoVario_spark	InfoBoxes/Content/Type.hpp	/^    e_NettoVario_spark,$/;"	e	enum:InfoBoxFactory::Type
e_NonCircling_Climb_Perc	InfoBoxes/Content/Type.hpp	/^    e_NonCircling_Climb_Perc,$/;"	e	enum:InfoBoxFactory::Type
e_OC_Distance	InfoBoxes/Content/Type.hpp	/^    e_OC_Distance, \/* Online Contest Distance *\/$/;"	e	enum:InfoBoxFactory::Type
e_RH_Trend	InfoBoxes/Content/Type.hpp	/^    e_RH_Trend, \/* Task Req. Total Height Trend *\/$/;"	e	enum:InfoBoxFactory::Type
e_Speed	InfoBoxes/Content/Type.hpp	/^    e_Speed, \/* True Airspeed reported by a supported external intelligent vario *\/$/;"	e	enum:InfoBoxFactory::Type
e_SpeedTaskAvg	InfoBoxes/Content/Type.hpp	/^    e_SpeedTaskAvg, \/* Average cross country speed while on current task, compensated for altitude *\/$/;"	e	enum:InfoBoxFactory::Type
e_Speed_GPS	InfoBoxes/Content/Type.hpp	/^    e_Speed_GPS, \/* Ground speed measured by the GPS. If this infobox is active in simulation mode, pressing the up and down arrows adjusts the speed, and left and right turn the glider *\/$/;"	e	enum:InfoBoxFactory::Type
e_StandbyRadio	InfoBoxes/Content/Type.hpp	/^    e_StandbyRadio, \/* Standby Radio Frequency *\/$/;"	e	enum:InfoBoxFactory::Type
e_TL_Avg	InfoBoxes/Content/Type.hpp	/^    e_TL_Avg, \/* Total altitude gain\/loss in the last thermal divided by the time spent circling *\/$/;"	e	enum:InfoBoxFactory::Type
e_TL_Gain	InfoBoxes/Content/Type.hpp	/^    e_TL_Gain, \/* Total altitude gain\/loss in the last thermal *\/$/;"	e	enum:InfoBoxFactory::Type
e_TL_Time	InfoBoxes/Content/Type.hpp	/^    e_TL_Time, \/* Time spent circling in the last thermal *\/$/;"	e	enum:InfoBoxFactory::Type
e_TaskMaxHeightTime	InfoBoxes/Content/Type.hpp	/^    e_TaskMaxHeightTime, \/* Time aircraft has been under the max start height *\/$/;"	e	enum:InfoBoxFactory::Type
e_TaskProgress	InfoBoxes/Content/Type.hpp	/^    e_TaskProgress,$/;"	e	enum:InfoBoxFactory::Type
e_Team_Bearing	InfoBoxes/Content/Type.hpp	/^    e_Team_Bearing, \/* The bearing to the team aircraft location at the last team code report *\/$/;"	e	enum:InfoBoxFactory::Type
e_Team_BearingDiff	InfoBoxes/Content/Type.hpp	/^    e_Team_BearingDiff, \/* The relative bearing to the team aircraft location at the last reported team code *\/$/;"	e	enum:InfoBoxFactory::Type
e_Team_Code	InfoBoxes/Content/Type.hpp	/^    e_Team_Code, \/* The current Team code for this aircraft. Use this to report to other team members. The last team aircraft code entered is displayed underneath *\/$/;"	e	enum:InfoBoxFactory::Type
e_Team_Range	InfoBoxes/Content/Type.hpp	/^    e_Team_Range, \/* The range to the team aircraft location at the last reported team code *\/$/;"	e	enum:InfoBoxFactory::Type
e_Temperature	InfoBoxes/Content/Type.hpp	/^    e_Temperature, \/* Outside air temperature measured by a probe if supported by a connected intelligent variometer *\/$/;"	e	enum:InfoBoxFactory::Type
e_ThermalBand	InfoBoxes/Content/Type.hpp	/^    e_ThermalBand,$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_30s	InfoBoxes/Content/Type.hpp	/^    e_Thermal_30s, \/* A 30 second rolling average climb rate based of the reported GPS altitude, or vario if available *\/$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_Avg	InfoBoxes/Content/Type.hpp	/^    e_Thermal_Avg, \/* Altitude gained\/lost in the current thermal, divided by time spent thermaling *\/$/;"	e	enum:InfoBoxFactory::Type
e_Thermal_Gain	InfoBoxes/Content/Type.hpp	/^    e_Thermal_Gain, \/* The altitude gained\/lost in the current thermal *\/$/;"	e	enum:InfoBoxFactory::Type
e_TimeLocal	InfoBoxes/Content/Type.hpp	/^    e_TimeLocal, \/* GPS time expressed in local time zone *\/$/;"	e	enum:InfoBoxFactory::Type
e_TimeSinceTakeoff	InfoBoxes/Content/Type.hpp	/^    e_TimeSinceTakeoff, \/* Time elapsed since takeoff was detected *\/$/;"	e	enum:InfoBoxFactory::Type
e_TimeUTC	InfoBoxes/Content/Type.hpp	/^    e_TimeUTC, \/* GPS time expressed in UTC *\/$/;"	e	enum:InfoBoxFactory::Type
e_Track_GPS	InfoBoxes/Content/Type.hpp	/^    e_Track_GPS, \/* Magnetic track reported by the GPS. (Touchscreen\/PC only) If this infobox is active in simulation mode, pressing the up and down  arrows adjusts the track *\/$/;"	e	enum:InfoBoxFactory::Type
e_Vario_spark	InfoBoxes/Content/Type.hpp	/^    e_Vario_spark,$/;"	e	enum:InfoBoxFactory::Type
e_VerticalSpeed_GPS	InfoBoxes/Content/Type.hpp	/^    e_VerticalSpeed_GPS, \/* Instantaneous vertical speed, as reported by the GPS, or the intelligent vario total energy vario value if connected to one *\/$/;"	e	enum:InfoBoxFactory::Type
e_VerticalSpeed_Netto	InfoBoxes/Content/Type.hpp	/^    e_VerticalSpeed_Netto, \/* Instantaneous vertical speed of air-mass, equal to vario value less the glider's estimated sink rate. Best used if airspeed, accelerometers and vario are connected, otherwise calculations are based on GPS measurements and wind estimates *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_AltDiff	InfoBoxes/Content/Type.hpp	/^    e_WP_AltDiff, \/* Next Altitude Difference - Arrival altitude at the next waypoint relative to the safety arrival height *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_AltReq	InfoBoxes/Content/Type.hpp	/^    e_WP_AltReq, \/* Additional altitude required to reach the next turn point *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_BearingDiff	InfoBoxes/Content/Type.hpp	/^    e_WP_BearingDiff, \/* The difference between the glider's track bearing, to the bearing of the next waypoint, or for AAT tasks, to the bearing to the target within the AAT sector. GPS navigation is based on the track bearing across the ground, and this track bearing may differ from the glider's heading when there is wind present. Chevrons point to the direction the glider needs to alter course to correct the bearing difference, that is, so that the glider's course made good is pointing directly at the next waypoint. This bearing takes into account the curvature of the Earth *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_Distance	InfoBoxes/Content/Type.hpp	/^    e_WP_Distance, \/* The distance to the currently selected waypoint. For AAT tasks, this is the distance to the target within the AAT sector *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_ETA_VMG	InfoBoxes/Content/Type.hpp	/^    e_WP_ETA_VMG, \/* Estimated arrival time at next waypoint assuming current speed is maintained*\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_ETE_VMG	InfoBoxes/Content/Type.hpp	/^    e_WP_ETE_VMG,$/;"	e	enum:InfoBoxFactory::Type
e_WP_GR	InfoBoxes/Content/Type.hpp	/^    e_WP_GR, \/* The required glide ratio over ground to reach the next waypoint, given by the distance to next waypoint divided by the height required to arrive at the safety arrival height. Negative values indicate a climb is necessary to reach the waypoint. If the height required is close to zero, the displayed value is '---'.   Note that this calculation may be optimistic because it reduces the height required to reach the waypoint by the excess energy height of the glider if its true airspeed is greater than the MacCready and best LD speeds *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_H	InfoBoxes/Content/Type.hpp	/^    e_WP_H, \/* Absolute arrival altitude at the next waypoint in final glide *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_MC0AltDiff	InfoBoxes/Content/Type.hpp	/^    e_WP_MC0AltDiff,$/;"	e	enum:InfoBoxFactory::Type
e_WP_Name	InfoBoxes/Content/Type.hpp	/^    e_WP_Name, \/* The name of the currently selected turn point. When this infobox is active, using the up\/down cursor keys selects the next\/previous waypoint in the task. (Touchscreen\/PC only) Pressing the enter cursor key brings up the waypoint details *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_Speed_MC	InfoBoxes/Content/Type.hpp	/^    e_WP_Speed_MC, \/* The MacCready speed-to-fly for optimal flight to the next waypoint. In cruise flight mode, this speed-to-fly is calculated for maintaining altitude. In final glide mode, this speed-to-fly is calculated for descent *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_Time	InfoBoxes/Content/Type.hpp	/^    e_WP_Time, \/* Estimated time required to reach next waypoint, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_WP_TimeLocal	InfoBoxes/Content/Type.hpp	/^    e_WP_TimeLocal, \/* Estimated arrival local time at next waypoint, assuming performance of ideal MacCready cruise\/climb cycle *\/$/;"	e	enum:InfoBoxFactory::Type
e_WindBearing_Est	InfoBoxes/Content/Type.hpp	/^    e_WindBearing_Est, \/* Wind bearing estimated by XCSoar. (Touchscreen\/PC only) Manual adjustment is possible by pressing the up\/down cursor keys to adjust bearing when the infobox is active *\/$/;"	e	enum:InfoBoxFactory::Type
e_WindSpeed_Est	InfoBoxes/Content/Type.hpp	/^    e_WindSpeed_Est, \/* Wind speed estimated by XCSoar. (Touchscreen\/PC only) Manual adjustment is possible by pressing the up\/down cursor keys to adjust magnitude and left\/right cursor keys to adjust bearing when the infobox is active. Pressing the enter cursor key saves the wind value as the initial value when XCSoar next starts *\/$/;"	e	enum:InfoBoxFactory::Type
e_p2	Geo/UTM.cpp	/^static constexpr double e_p2 = e \/ (1.0 - e);$/;"	v	file:
easting	Geo/UTM.hpp	/^  double easting, northing;$/;"	m	struct:UTM
edge_buffer	Screen/Memory/RasterCanvas.hpp	/^  AllocatedArray<BresenhamIterator> edge_buffer;$/;"	m	class:RasterCanvas
edge_const_iterator	Engine/PathSolvers/Dijkstra.hpp	/^  typedef typename EdgeMap::const_iterator edge_const_iterator;$/;"	t	class:Dijkstra
edge_iterator	Engine/PathSolvers/Dijkstra.hpp	/^  typedef typename EdgeMap::iterator edge_iterator;$/;"	t	class:Dijkstra
edge_value	Engine/PathSolvers/Dijkstra.hpp	/^    unsigned edge_value;$/;"	m	struct:Dijkstra::Value
edges	Engine/PathSolvers/Dijkstra.hpp	/^  EdgeMap edges;$/;"	m	class:Dijkstra
edit	Dialogs/Task/Manager/TaskEditPanel.cpp	/^    PixelRect edit, down, up, reverse, clear_all;$/;"	m	struct:final::Layout	file:
edit_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *edit_button;$/;"	m	class:final	file:
edit_button	Dialogs/Plane/PlaneListDialog.cpp	/^  Button *edit_button, *delete_button, *load_button;$/;"	m	class:final	file:
edit_button	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button edit_button, mutate_button;$/;"	m	class:final	file:
edit_button	Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
edit_callback	Form/Edit.cpp	/^   edit_callback(EditDataFieldDialog)$/;"	f
edit_callback	Form/Edit.hpp	/^  EditCallback edit_callback;$/;"	m	class:WndProperty
edit_format	Form/DataField/Number.hpp	/^  StaticString<32> edit_format;$/;"	m	class:NumberDataField
edit_manual_wind	Dialogs/Settings/WindSettingsPanel.hpp	/^  const bool edit_manual_wind, clear_manual_button, edit_trail_drift;$/;"	m	class:final
edit_position	Event/Poll/Linux/Input.hpp	/^  Position edit_position;$/;"	m	class:final
edit_rc	Form/Edit.hpp	/^  PixelRect edit_rc;$/;"	m	class:WndProperty
edit_trail_drift	Dialogs/Settings/WindSettingsPanel.hpp	/^  const bool edit_manual_wind, clear_manual_button, edit_trail_drift;$/;"	m	class:final
editor	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageLayoutEditWidget *editor;$/;"	m	class:PageListWidget	file:
editor	Dialogs/TouchTextEntry.cpp	/^static WndProperty *editor;$/;"	v	file:
edittext	Dialogs/TouchTextEntry.cpp	/^static TCHAR edittext[MAX_TEXTENTRY];$/;"	v	file:
eeprom	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE eeprom;$/;"	m	struct:IMI::TDeviceInfo
eepromSize	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD eepromSize;$/;"	m	struct:IMI::TDeviceInfo
effective_distance	Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::effective_distance(const double time_remaining) const$/;"	f	class:TaskMacCreadyTotal
effective_leg_distance	Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::effective_leg_distance(const double time_remaining) const$/;"	f	class:TaskMacCreadyTotal
effective_mc	Engine/Task/Stats/TaskStats.hpp	/^  double effective_mc;$/;"	m	class:TaskStats
effective_wind_angle	Engine/GlideSolvers/GlideResult.hpp	/^  Angle effective_wind_angle;$/;"	m	struct:GlideResult
effective_wind_angle	Engine/GlideSolvers/GlideState.hpp	/^  Angle effective_wind_angle;$/;"	m	struct:GlideState
effective_wind_speed	Engine/GlideSolvers/GlideResult.hpp	/^  double effective_wind_speed;$/;"	m	struct:GlideResult
egm96s_dem	Geo/Geoid.cpp	/^extern "C" const uint8_t egm96s_dem[];$/;"	v
ekf	Computer/Wind/WindEKFGlue.hpp	/^  WindEKF ekf;$/;"	m	class:WindEKFGlue
ekf_active	Computer/Wind/Computer.hpp	/^  bool ekf_active;$/;"	m	class:WindComputer
elapsed_time	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  double elapsed_time;$/;"	m	struct:AirspaceInterceptSolution
elevation	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t elevation;$/;"	m	struct:CAI302::Navpoint
elevation	Engine/Waypoint/Waypoint.hpp	/^  double elevation;$/;"	m	struct:Waypoint
elevation	MapWindow/Items/MapItem.hpp	/^  double elevation;$/;"	m	struct:ArrivalAltitudeMapItem
elevation	MapWindow/Items/MapItem.hpp	/^  double elevation;$/;"	m	struct:LocationMapItem
elim_distance	Engine/Trace/Trace.hpp	/^    unsigned elim_distance;$/;"	m	struct:Trace::TraceDelta
elim_time	Engine/Trace/Trace.hpp	/^    unsigned elim_time;$/;"	m	struct:Trace::TraceDelta
ell	Engine/Task/Ordered/AATIsoline.hpp	/^  const GeoEllipse ell;$/;"	m	class:AATIsoline
ell	Engine/Task/PathSolvers/IsolineCrossingFinder.cpp	/^   ell(_ell)$/;"	f
ell	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  const GeoEllipse &ell;$/;"	m	class:final
ell	Geo/GeoEllipse.hpp	/^  FlatEllipse ell;$/;"	m	class:GeoEllipse
em_lpf	Engine/Task/AbstractTask.hpp	/^  Filter em_lpf;$/;"	m	class:AbstractTask
emplace_back	Util/TrivialArray.hxx	/^	void emplace_back(Args&&... args) {$/;"	f	class:TrivialArray
empty	Atmosphere/CuSonde.hpp	/^    bool empty() const {$/;"	f	struct:CuSonde::Level
empty	Cloud/Client.hpp	/^  bool empty() const {$/;"	f	class:CloudClientContainer
empty	Cloud/Thermal.hpp	/^  bool empty() const {$/;"	f	class:CloudThermalContainer
empty	Engine/Airspace/AirspaceIntersectSort.hpp	/^  bool empty() const {$/;"	f	class:AirspaceIntersectSort
empty	Engine/Airspace/AirspaceWarningManager.hpp	/^  bool empty() const {$/;"	f	class:AirspaceWarningManager
empty	Engine/Trace/Trace.hpp	/^  bool empty() const {$/;"	f	class:Trace
empty	Form/DataField/ComboList.hpp	/^  bool empty() const {$/;"	f	class:ComboList
empty	Input/InputParser.cpp	/^  bool empty() const {$/;"	f	struct:EventBuilder
empty	MapWindow/MapWindowGlideRange.cpp	/^  bool empty() const {$/;"	f	struct:ProjectedFans
empty	Topography/shapelib/mapserver.h	/^    char *empty, *error; \/* error handling *\/$/;"	m	struct:__anon42
empty	Util/OverwritingRingBuffer.hpp	/^  bool empty() const {$/;"	f	class:TrivialOverwritingRingBuffer
empty	Util/Range.hpp	/^  bool empty() const {$/;"	f	class:Range
empty	Util/TrivialArray.hxx	/^	bool empty() const {$/;"	f	class:TrivialArray
empty_spacer	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  empty_spacer,$/;"	e	enum:ControlIndex	file:
enable	Engine/Contest/Settings.hpp	/^  bool enable;$/;"	m	struct:ContestSettings
enable	Renderer/AirspaceRendererSettings.hpp	/^  bool enable;$/;"	m	struct:AirspaceRendererSettings
enable	Screen/FB/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_color_key
enable	Screen/FB/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_gamma
enable	Screen/FB/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_gbl_alpha
enable	Screen/FB/mxcfb.h	/^	int enable;$/;"	m	struct:mxcfb_loc_alpha
enable	Terrain/TerrainSettings.hpp	/^  bool enable;$/;"	m	struct:TerrainRendererSettings
enable_airspace_warning_dialog	UISettings.hpp	/^  bool enable_airspace_warning_dialog;$/;"	m	struct:UISettings
enable_auto_zoom	Gauge/BigTrafficWidget.cpp	/^  bool enable_auto_zoom, dragging;$/;"	m	class:FlarmTrafficControl	file:
enable_bestcruisetrack	Replay/TaskAutoPilot.hpp	/^  bool enable_bestcruisetrack;$/;"	m	struct:AutopilotParameters
enable_button	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  Button *enable_button;$/;"	m	class:final	file:
enable_dither	Screen/Custom/TopCanvas.hpp	/^  bool enable_dither;$/;"	m	class:DisplayOrientation
enable_flight_logger	Logger/Settings.hpp	/^  bool enable_flight_logger;$/;"	m	struct:LoggerSettings
enable_gauge	Gauge/TrafficSettings.hpp	/^  bool enable_gauge;$/;"	m	struct:TrafficSettings
enable_nmea_logger	Logger/Settings.hpp	/^  bool enable_nmea_logger;$/;"	m	struct:LoggerSettings
enable_north_up	Gauge/FlarmTrafficWindow.hpp	/^  bool enable_north_up;$/;"	m	class:FlarmTrafficWindow
enable_sound	PopupMessage.hpp	/^  bool enable_sound;$/;"	m	class:PopupMessage
enable_team	Computer/Events.hpp	/^  bool enable_team, last_teammate_in_sector;$/;"	m	class:final
enable_warnings	Airspace/AirspaceComputerSettings.hpp	/^  bool enable_warnings;$/;"	m	struct:AirspaceComputerSettings
enabled	Audio/VarioSettings.hpp	/^  bool enabled;$/;"	m	struct:VarioSoundSettings
enabled	BallastDumpManager.hpp	/^  bool enabled = false;$/;"	m	class:BallastDumpManager
enabled	Computer/WaveSettings.hpp	/^  bool enabled;$/;"	m	struct:WaveSettings
enabled	Device/Config.hpp	/^  bool enabled;$/;"	m	struct:DeviceConfig
enabled	Logger/NMEALogger.cpp	/^  bool enabled = false;$/;"	m	namespace:NMEALogger	file:
enabled	Menu/ButtonLabel.hpp	/^    bool visible, enabled;$/;"	m	struct:ButtonLabel::Expanded
enabled	PageSettings.hpp	/^    bool enabled;$/;"	m	struct:PageLayout::InfoBoxConfig
enabled	Screen/OpenGL/ConstantAlpha.hpp	/^  const bool enabled;$/;"	m	class:ScopeTextureConstantAlpha
enabled	Screen/Window.hpp	/^  bool enabled = true;$/;"	m	class:WindowStyle
enabled	Screen/Window.hpp	/^  bool enabled;$/;"	m	class:Window
enabled	Tracking/LiveTrack24/Settings.hpp	/^  bool enabled;$/;"	m	struct:LiveTrack24::Settings
enabled	Tracking/SkyLines/CloudSettings.hpp	/^  TriState enabled;$/;"	m	struct:SkyLinesTracking::CloudSettings
enabled	Tracking/SkyLines/Settings.hpp	/^  bool enabled;$/;"	m	struct:SkyLinesTracking::Settings
enabled	Util/ScopeExit.hxx	/^	bool enabled = true;$/;"	m	class:ScopeExitGuard
encode	Terrain/jasper/jas_image.h	/^	int (*encode)(jas_image_t *image, jas_stream_t *out, const char *opts);$/;"	m	struct:__anon126
encoding	Topography/shapelib/mapserver.h	/^    char *encoding; \/* for iconving shape attributes. ignored if NULL or "utf-8" *\/$/;"	m	struct:layerObj
encoding	Topography/shapelib/mapserver.h	/^    char *encoding;$/;"	m	struct:labelObj
encryption_key	Topography/shapelib/mapserver.h	/^    unsigned char encryption_key[MS_ENCRYPTION_KEY_SIZE]; \/* 128bits encryption key *\/$/;"	m	struct:mapObj
encryption_key_loaded	Topography/shapelib/mapserver.h	/^    int encryption_key_loaded;        \/* MS_TRUE once key has been loaded *\/$/;"	m	struct:mapObj
end	Cloud/Client.hpp	/^  List::const_iterator end() const {$/;"	f	class:CloudClientContainer
end	Cloud/Thermal.hpp	/^  List::const_iterator end() const {$/;"	f	class:CloudThermalContainer
end	Device/Driver/LX/LXN.hpp	/^    const struct End *end;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::End
end	Device/MultipleDevices.hpp	/^  const_iterator end() {$/;"	f	class:final
end	Device/SettingsMap.hpp	/^  const_iterator end() const {$/;"	f	class:DeviceSettingsMap
end	Engine/Airspace/AirspaceWarningManager.hpp	/^  const_iterator end() const {$/;"	f	class:AirspaceWarningManager
end	Engine/Trace/Trace.hpp	/^  const_iterator end() const {$/;"	f	class:Trace
end	Engine/Waypoint/Waypoints.hpp	/^  const_iterator end() const {$/;"	f	class:Waypoints
end	FLARM/ColorDatabase.hpp	/^  const_iterator end() const {$/;"	f	class:FlarmColorDatabase
end	FLARM/FlarmNetDatabase.hpp	/^  RecordMap::const_iterator end() const {$/;"	f	class:FlarmNetDatabase
end	FLARM/NameDatabase.hpp	/^  const_iterator end() const {$/;"	f	class:FlarmNameDatabase
end	IO/CSVLine.hpp	/^  const char *data, *end;$/;"	m	class:CSVLine
end	Math/ARange.hpp	/^  Angle start, end;$/;"	m	struct:AngleRange
end	OS/FileMapping.hpp	/^  const void *end() const {$/;"	f	class:FileMapping
end	Renderer/AirspaceLabelList.hpp	/^  const Label *end() const {$/;"	f	class:AirspaceLabelList
end	Renderer/WaypointLabelList.hpp	/^  const Label *end() const {$/;"	f	class:WaypointLabelList
end	Repository/FileRepository.hpp	/^  const_iterator end() const {$/;"	f	struct:FileRepository
end	Terrain/ScanLine.cpp	/^  GridLocation start, end;$/;"	m	struct:GridRay	file:
end	Time/RoughTime.hpp	/^  RoughTime end;$/;"	m	class:RoughTimeSpan
end	Topography/TopographyFile.hpp	/^  const_iterator end() const {$/;"	f	class:TopographyFile
end	UIUtil/KineticManager.hpp	/^  int end;$/;"	m	class:KineticManager
end	Util/AllocatedGrid.hxx	/^	constexpr const_iterator end() const {$/;"	f	class:AllocatedGrid
end	Util/AllocatedGrid.hxx	/^	iterator end() {$/;"	f	class:AllocatedGrid
end	Util/IterableSplitString.hxx	/^	constexpr const_iterator end() const {$/;"	f	class:BasicIterableSplitString
end	Util/OverwritingRingBuffer.hpp	/^  const_iterator end() const {$/;"	f	class:TrivialOverwritingRingBuffer
end	Util/Range.hpp	/^  I end() const {$/;"	f	class:Range
end	Util/StaticString.hxx	/^	const_iterator end() const {$/;"	f	class:StaticStringBase
end	Util/StringBuilder.hxx	/^	const pointer end;$/;"	m	class:StringBuilder
end	Util/TrivialArray.hxx	/^	constexpr const_iterator end() const {$/;"	f	class:TrivialArray
end	Util/TrivialArray.hxx	/^	constexpr iterator end() {$/;"	f	class:TrivialArray
end	Weather/METARParser.cpp	/^  TCHAR *start, *data, *end;$/;"	m	class:METARLine	file:
end	Weather/NOAAStore.hpp	/^  const_iterator end() const {$/;"	f	class:NOAAStore
end	Weather/NOAAStore.hpp	/^  iterator end() {$/;"	f	class:NOAAStore
end	XML/Node.hpp	/^    const_iterator end() const {$/;"	f	struct:XMLNode::Data
end	XML/Node.hpp	/^  const_iterator end() const {$/;"	f	class:XMLNode
endLayer	Topography/shapelib/mapserver.h	/^    int (*endLayer)(imageObj *img, mapObj *map, layerObj *layer);$/;"	m	struct:rendererVTableObj
endShape	Topography/shapelib/mapserver.h	/^    int (*endShape)(imageObj *img, shapeObj *shape);$/;"	m	struct:rendererVTableObj
end_	Util/Range.hpp	/^  I begin_, end_;$/;"	m	class:Range
end_address	Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 start_address, end_address;$/;"	m	struct:LX::SeekMemory
end_address	Device/Driver/LX/Protocol.hpp	/^    MemoryAddress32 end_address;$/;"	m	struct:LX::FlightInfo
end_address	Device/Driver/LXERA/Protocol.hpp	/^    MemoryAddress24 start_address, end_address;$/;"	m	struct:LXEra::SeekMemory
end_address	Device/Driver/LXERA/Protocol.hpp	/^    MemoryAddress32 end_address;$/;"	m	struct:LXEra::FlightInfo
end_address	Device/RecordedFlight.hpp	/^      uint8_t end_address[3];$/;"	m	struct:RecordedFlightInfo::__anon197::__anon198
end_offset	Device/Driver/Volkslogger/Database.hpp	/^    uint16_t end_offset;$/;"	m	struct:Volkslogger::TableHeader
end_radial	Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle end_radial;$/;"	m	class:SectorZone
end_time	FlightInfo.hpp	/^  BrokenTime start_time, end_time;$/;"	m	struct:FlightInfo
end_time	NMEA/ClimbInfo.hpp	/^  double end_time;$/;"	m	struct:OneClimbInfo
end_utc	Device/Driver/CAI302/Protocol.hpp	/^      struct DateTime start_utc, end_utc;$/;"	m	struct:CAI302::FileList::FileInfo	typeref:struct:CAI302::FileList::FileInfo::
endpoint	Cloud/Client.hpp	/^  boost::asio::ip::udp::endpoint endpoint;$/;"	m	struct:CloudClient
endpoint	Cloud/Sender.hpp	/^  const boost::asio::ip::udp::endpoint &endpoint;$/;"	m	class:ThermalResponseSender
endpoint	Cloud/Sender.hpp	/^  const boost::asio::ip::udp::endpoint &endpoint;$/;"	m	class:TrafficResponseSender
endpoint	Tracking/SkyLines/Client.hpp	/^  boost::asio::ip::udp::endpoint endpoint;$/;"	m	class:SkyLinesTracking::Client
endpoint	Tracking/SkyLines/Server.hpp	/^    boost::asio::ip::udp::endpoint endpoint;$/;"	m	struct:SkyLinesTracking::Server::Client
energy_height	NMEA/MoreData.hpp	/^  double energy_height;$/;"	m	struct:MoreData
engine	Audio/SLES/Engine.hpp	/^    SLEngineItf engine;$/;"	m	class:SLES::Engine
engine_noise_level	Engine/Trace/Point.hpp	/^  uint16_t engine_noise_level;$/;"	m	class:TracePoint
engine_noise_level	NMEA/Info.hpp	/^  unsigned engine_noise_level;$/;"	m	struct:NMEAInfo
engine_noise_level	Tracking/SkyLines/Protocol.hpp	/^  uint16_t engine_noise_level;$/;"	m	struct:SkyLinesTracking::FixPacket
engine_noise_level_available	NMEA/Info.hpp	/^  Validity engine_noise_level_available;$/;"	m	struct:NMEAInfo
engine_object	Audio/AndroidPCMPlayer.hpp	/^  SLES::Object engine_object;$/;"	m	class:AndroidPCMPlayer
enl	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD enl:10;$/;"	m	struct:IMI::FixB
enl	IGC/IGCFix.hpp	/^  int16_t enl;$/;"	m	struct:IGCFix
enl1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD enl1:10;$/;"	m	struct:IMI::FixB2
enl2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD enl2:10;$/;"	m	struct:IMI::FixB2
enlflt	Device/Driver/Volkslogger/vlconv.cpp	/^enlflt(int enl)$/;"	f	file:
enllim	Device/Driver/Volkslogger/vlconv.cpp	/^enllim(int enl)$/;"	f	file:
enqueue_method	Android/DownloadManager.cpp	/^static jmethodID enumerate_method, enqueue_method, cancel_method;$/;"	v	file:
enroute_logging_interval	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t enroute_logging_interval;$/;"	m	struct:CAI302::Pilot
entries	Form/DataField/Enum.hpp	/^  StaticArray<Entry, 128> entries;$/;"	m	class:final
ents	Terrain/jasper/jas_icc.h	/^	jas_icctagtabent_t *ents;$/;"	m	struct:__anon192
ents	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t *ents;$/;"	m	struct:__anon182
ents	Terrain/jasper/jp2/jp2_cod.h	/^	jp2_cdefchan_t *ents;$/;"	m	struct:__anon114
ents	Terrain/jasper/jp2/jp2_cod.h	/^	jp2_cmapent_t *ents;$/;"	m	struct:__anon116
ents	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_ppxstabent_t **ents;$/;"	m	struct:__anon140
enumerate_method	Android/DownloadManager.cpp	/^static jmethodID enumerate_method, enqueue_method, cancel_method;$/;"	v	file:
env	Android/NativeView.hpp	/^  JNIEnv *env;$/;"	m	class:NativeView
env	Android/TextUtil.cpp	/^JNIEnv *TextUtil::env;$/;"	m	class:TextUtil	file:
env	Android/TextUtil.hpp	/^  static JNIEnv *env;$/;"	m	class:TextUtil
env	Device/Descriptor.cpp	/^  OperationEnvironment &env;$/;"	m	struct:ScopeReturnDevice	file:
env	Device/Util/NMEAReader.hpp	/^  OperationEnvironment &env;$/;"	m	class:PortNMEAReader
env	Dialogs/DownloadFilePicker.cpp	/^  ThreadedOperationEnvironment env;$/;"	m	class:final	file:
env	Java/Ref.hxx	/^		JNIEnv *const env;$/;"	m	class:Java::LocalRef
env	Job/Async.hpp	/^  ThreadedOperationEnvironment *env;$/;"	m	class:final
env	Net/HTTP/ToBuffer.cpp	/^  OperationEnvironment &env;$/;"	m	class:final	file:
env	Net/HTTP/ToFile.cpp	/^  OperationEnvironment &env;$/;"	m	class:final	file:
env	Terrain/Loader.hpp	/^  OperationEnvironment &env;$/;"	m	class:TerrainLoader
eoc	Terrain/jasper/jpc/jpc_cs.h	/^	int eoc;	\/* unused *\/$/;"	m	union:__anon178
eof	IO/BufferedReader.hxx	/^	bool eof = false;$/;"	m	class:BufferedReader
eof	IO/GunzipReader.hxx	/^	bool eof = false;$/;"	m	class:final
eof	Terrain/jasper/jpc/jpc_mqdec.h	/^	int eof;$/;"	m	struct:__anon133
epd_update_marker	Screen/Custom/TopCanvas.hpp	/^  uint32_t epd_update_marker;$/;"	m	class:DisplayOrientation
eph	Terrain/jasper/jpc/jpc_cs.h	/^	int eph;	\/* unused *\/$/;"	m	union:__anon178
epsilon	Math/ZeroFinder.cpp	/^static constexpr double epsilon = std::numeric_limits<double>::epsilon();$/;"	v	file:
equals	Engine/Airspace/AirspaceActivity.hpp	/^  bool equals(const AirspaceActivity _mask) const {$/;"	f	class:AirspaceActivity
equals	Util/StaticString.hxx	/^	bool equals(const_pointer other) const {$/;"	f	class:StaticStringBase
erase	Device/SettingsMap.hpp	/^  void erase(const K &key) {$/;"	f	class:DeviceSettingsMap
erase	Weather/NOAAStore.hpp	/^  void erase(iterator i) {$/;"	f	class:NOAAStore
errcode	zzip/lib.h	/^    int errcode; \/* zzip_error_t *\/$/;"	m	struct:zzip_dir
error	Config/Registry.hpp	/^  bool error() const {$/;"	f	class:RegistryKey
error	Dialogs/Device/DeviceListDialog.cpp	/^    bool open:1, error:1;$/;"	m	struct:final::Flags	file:
error	FLARM/Data.hpp	/^  FlarmError error;$/;"	m	struct:FlarmData
error	Language/MOFile.hpp	/^  bool error() const {$/;"	f	class:MOFile
error	Language/MOLoader.hpp	/^  bool error() const {$/;"	f	class:MOLoader
error	Net/HTTP/ToFile.cpp	/^  std::exception_ptr error;$/;"	m	class:final	file:
error	OS/FileMapping.hpp	/^  bool error() const {$/;"	f	class:FileMapping
error	Operation/ThreadedOperationEnvironment.hpp	/^    StaticString<256u> error;$/;"	m	struct:ThreadedOperationEnvironment::Data
error	Screen/Memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
error	Topography/shapelib/mapserver.h	/^    char *empty, *error; \/* error handling *\/$/;"	m	struct:__anon42
error	XML/Parser.cpp	/^    Error error;$/;"	m	struct:XML::Parser	file:
error	XML/Parser.hpp	/^    enum Error error;$/;"	m	struct:XML::Results	typeref:enum:XML::Results::Error
errorObj	Topography/shapelib/maperror.h	/^  typedef struct errorObj {$/;"	s
errorObj	Topography/shapelib/maperror.h	/^  } errorObj;$/;"	t	typeref:struct:errorObj
error_message	Device/Descriptor.hpp	/^  tstring error_message;$/;"	m	class:final
error_messages	Dialogs/Device/DeviceListDialog.cpp	/^  tstring error_messages[NUMDEV];$/;"	m	class:final	file:
error_reported	Device/Driver/LevilAHRS_G.cpp	/^static bool error_reported = false;$/;"	v	file:
error_strings	FLARM/Error.cpp	/^} error_strings[] = {$/;"	v	typeref:struct:__anon1	file:
errorcount	Topography/shapelib/maperror.h	/^    int errorcount; \/* number of subsequent errors *\/$/;"	m	struct:errorObj
errorfile	Topography/shapelib/maperror.h	/^    char        *errorfile;$/;"	m	struct:debug_info_obj
estimate_location	NMEA/ThermalLocator.hpp	/^  GeoPoint estimate_location;$/;"	m	struct:ThermalLocatorInfo
estimate_valid	NMEA/ThermalLocator.hpp	/^  bool estimate_valid;$/;"	m	struct:ThermalLocatorInfo
estimated_wind	NMEA/Derived.hpp	/^  SpeedVector estimated_wind;$/;"	m	struct:DerivedInfo
estimated_wind_available	NMEA/Derived.hpp	/^  Validity estimated_wind_available;$/;"	m	struct:DerivedInfo
ete	Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
ete	Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
evening_twilight	Math/SunEphemeris.hpp	/^    double day_length, morning_twilight, evening_twilight;$/;"	m	struct:SunEphemeris::Result
event	Device/Driver/LX/Convert.cpp	/^  LXN::Event event;$/;"	m	struct:Context	file:
event	Device/Driver/LX/LXN.hpp	/^    const struct Event *event;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Event
event	Event/SDL/Event.hpp	/^  SDL_Event event;$/;"	m	struct:Event
event	Input/InputConfig.hpp	/^    pt2Event event;$/;"	m	struct:InputConfig::Event
event	Input/InputDefaults.cpp	/^  unsigned short event;$/;"	m	struct:flat_event_map	file:
event	Input/InputDefaults.cpp	/^  unsigned short event;$/;"	m	struct:flat_gesture_map	file:
event	Input/InputDefaults.cpp	/^  unsigned short event;$/;"	m	struct:flat_label	file:
event	Input/InputLookup.cpp	/^  pt2Event event;$/;"	m	struct:Text2EventSTRUCT	file:
event	Menu/MenuBar.hpp	/^    unsigned event;$/;"	m	class:MenuBar::Button
event	Menu/MenuData.hpp	/^  unsigned event;$/;"	m	class:MenuItem
eventAbortTask	Input/InputEventsTask.cpp	/^InputEvents::eventAbortTask(const TCHAR *misc)$/;"	f	class:InputEvents
eventAddWaypoint	Input/InputEventsActions.cpp	/^InputEvents::eventAddWaypoint(const TCHAR *misc)$/;"	f	class:InputEvents
eventAdjustForecastTemperature	Input/InputEventsSettings.cpp	/^InputEvents::eventAdjustForecastTemperature(const TCHAR *misc)$/;"	f	class:InputEvents
eventAdjustVarioFilter	Input/InputEventsVega.cpp	/^InputEvents::eventAdjustVarioFilter(const TCHAR *misc)$/;"	f	class:InputEvents
eventAdjustWaypoint	Input/InputEventsTask.cpp	/^InputEvents::eventAdjustWaypoint(const TCHAR *misc)$/;"	f	class:InputEvents
eventAirSpace	Input/InputEventsAirspace.cpp	/^InputEvents::eventAirSpace(const TCHAR *misc)$/;"	f	class:InputEvents
eventAirspaceDisplayMode	Input/InputEventsSettings.cpp	/^InputEvents::eventAirspaceDisplayMode(const TCHAR *misc)$/;"	f	class:InputEvents
eventAnalysis	Input/InputEventsActions.cpp	/^InputEvents::eventAnalysis(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventArmAdvance	Input/InputEventsTask.cpp	/^InputEvents::eventArmAdvance(const TCHAR *misc)$/;"	f	class:InputEvents
eventAudioDeadband	Input/InputEventsSettings.cpp	/^InputEvents::eventAudioDeadband(const TCHAR *misc)$/;"	f	class:InputEvents
eventAutoLogger	Input/InputEventsActions.cpp	/^InputEvents::eventAutoLogger(const TCHAR *misc)$/;"	f	class:InputEvents
eventBallast	Input/InputEventsSettings.cpp	/^InputEvents::eventBallast(const TCHAR *misc)$/;"	f	class:InputEvents
eventBeep	Input/InputEventsActions.cpp	/^InputEvents::eventBeep(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventBrightness	Input/InputEventsActions.cpp	/^InputEvents::eventBrightness(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventBugs	Input/InputEventsSettings.cpp	/^InputEvents::eventBugs(const TCHAR *misc)$/;"	f	class:InputEvents
eventCalculator	Input/InputEventsTask.cpp	/^InputEvents::eventCalculator(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventChecklist	Input/InputEventsActions.cpp	/^InputEvents::eventChecklist(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventClearAirspaceWarnings	Input/InputEventsAirspace.cpp	/^InputEvents::eventClearAirspaceWarnings(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventClearStatusMessages	Input/InputEventsActions.cpp	/^InputEvents::eventClearStatusMessages(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventCredits	Input/InputEventsActions.cpp	/^InputEvents::eventCredits(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventDeclutterLabels	Input/InputEventsSettings.cpp	/^InputEvents::eventDeclutterLabels(const TCHAR *misc)$/;"	f	class:InputEvents
eventDevice	Input/InputEventsDevice.cpp	/^InputEvents::eventDevice(const TCHAR *misc)$/;"	f	class:InputEvents
eventExit	Input/InputEventsActions.cpp	/^InputEvents::eventExit(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventFLARMRadar	Input/InputEventsTraffic.cpp	/^InputEvents::eventFLARMRadar(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventFileManager	Input/InputEventsActions.cpp	/^InputEvents::eventFileManager(const TCHAR *misc)$/;"	f	class:InputEvents
eventFlarmDetails	Input/InputEventsTraffic.cpp	/^InputEvents::eventFlarmDetails(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventFlarmTraffic	Input/InputEventsTraffic.cpp	/^InputEvents::eventFlarmTraffic(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventGotoLookup	Input/InputEventsTask.cpp	/^InputEvents::eventGotoLookup(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventLockScreen	Input/InputEvents.cpp	/^InputEvents::eventLockScreen(const TCHAR *mode)$/;"	f	class:InputEvents
eventLogger	Input/InputEventsActions.cpp	/^InputEvents::eventLogger(const TCHAR *misc)$/;"	f	class:InputEvents
eventMacCready	Input/InputEventsTask.cpp	/^InputEvents::eventMacCready(const TCHAR *misc)$/;"	f	class:InputEvents
eventMainMenu	Input/InputEventsActions.cpp	/^InputEvents::eventMainMenu(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventMarkLocation	Input/InputEventsActions.cpp	/^InputEvents::eventMarkLocation(const TCHAR *misc)$/;"	f	class:InputEvents
eventMode	Input/InputEventsActions.cpp	/^InputEvents::eventMode(const TCHAR *misc)$/;"	f	class:InputEvents
eventNearestAirspaceDetails	Input/InputEventsAirspace.cpp	/^InputEvents::eventNearestAirspaceDetails(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventNearestMapItems	Input/InputEventsActions.cpp	/^InputEvents::eventNearestMapItems(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventNearestWaypointDetails	Input/InputEventsActions.cpp	/^InputEvents::eventNearestWaypointDetails(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventNull	Input/InputEventsActions.cpp	/^InputEvents::eventNull(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventOrientation	Input/InputEventsSettings.cpp	/^InputEvents::eventOrientation(const TCHAR *misc)$/;"	f	class:InputEvents
eventPage	Input/InputEventsPage.cpp	/^InputEvents::eventPage(const TCHAR *misc)$/;"	f	class:InputEvents
eventPan	Input/InputEventsMap.cpp	/^InputEvents::eventPan(const TCHAR *misc)$/;"	f	class:InputEvents
eventPlaySound	Input/InputEventsActions.cpp	/^InputEvents::eventPlaySound(const TCHAR *misc)$/;"	f	class:InputEvents
eventProfileLoad	Input/InputEventsSettings.cpp	/^InputEvents::eventProfileLoad(const TCHAR *misc)$/;"	f	class:InputEvents
eventProfileSave	Input/InputEventsSettings.cpp	/^InputEvents::eventProfileSave(const TCHAR *misc)$/;"	f	class:InputEvents
eventQuickMenu	Input/InputEventsActions.cpp	/^InputEvents::eventQuickMenu(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventRepeatStatusMessage	Input/InputEventsActions.cpp	/^InputEvents::eventRepeatStatusMessage(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventResetTask	Input/InputEventsTask.cpp	/^InputEvents::eventResetTask(const TCHAR *misc)$/;"	f	class:InputEvents
eventRun	Input/InputEventsActions.cpp	/^InputEvents::eventRun(const TCHAR *misc)$/;"	f	class:InputEvents
eventRunLuaFile	Input/InputEventsLua.cpp	/^InputEvents::eventRunLuaFile(const TCHAR *misc)$/;"	f	class:InputEvents
eventScreenModes	Input/InputEventsActions.cpp	/^InputEvents::eventScreenModes(const TCHAR *misc)$/;"	f	class:InputEvents
eventSendNMEA	Input/InputEventsDevice.cpp	/^InputEvents::eventSendNMEA(const TCHAR *misc)$/;"	f	class:InputEvents
eventSendNMEAPort1	Input/InputEventsDevice.cpp	/^InputEvents::eventSendNMEAPort1(const TCHAR *misc)$/;"	f	class:InputEvents
eventSendNMEAPort2	Input/InputEventsDevice.cpp	/^InputEvents::eventSendNMEAPort2(const TCHAR *misc)$/;"	f	class:InputEvents
eventSetup	Input/InputEventsActions.cpp	/^InputEvents::eventSetup(const TCHAR *misc)$/;"	f	class:InputEvents
eventSnailTrail	Input/InputEventsSettings.cpp	/^InputEvents::eventSnailTrail(const TCHAR *misc)$/;"	f	class:InputEvents
eventSounds	Input/InputEventsSettings.cpp	/^InputEvents::eventSounds(const TCHAR *misc)$/;"	f	class:InputEvents
eventStatus	Input/InputEventsActions.cpp	/^InputEvents::eventStatus(const TCHAR *misc)$/;"	f	class:InputEvents
eventStatusMessage	Input/InputEventsActions.cpp	/^InputEvents::eventStatusMessage(const TCHAR *misc)$/;"	f	class:InputEvents
eventTaskLoad	Input/InputEventsTask.cpp	/^InputEvents::eventTaskLoad(const TCHAR *misc)$/;"	f	class:InputEvents
eventTaskSave	Input/InputEventsTask.cpp	/^InputEvents::eventTaskSave(const TCHAR *misc)$/;"	f	class:InputEvents
eventTaskTransition	Input/InputEventsTask.cpp	/^InputEvents::eventTaskTransition(const TCHAR *misc)$/;"	f	class:InputEvents
eventTerrainTopography	Input/InputEventsSettings.cpp	/^InputEvents::eventTerrainTopography(const TCHAR *misc)$/;"	f	class:InputEvents
eventTerrainTopology	Input/InputEventsSettings.cpp	/^InputEvents::eventTerrainTopology(const TCHAR *misc)$/;"	f	class:InputEvents
eventThermalAssistant	Input/InputEventsThermalAssistant.cpp	/^InputEvents::eventThermalAssistant(gcc_unused const TCHAR *misc)$/;"	f	class:InputEvents
eventTraffic	Input/InputEventsTraffic.cpp	/^InputEvents::eventTraffic(const TCHAR *misc)$/;"	f	class:InputEvents
eventUserDisplayModeForce	Input/InputEventsActions.cpp	/^InputEvents::eventUserDisplayModeForce(const TCHAR *misc)$/;"	f	class:InputEvents
eventWaypointDetails	Input/InputEventsActions.cpp	/^InputEvents::eventWaypointDetails(const TCHAR *misc)$/;"	f	class:InputEvents
eventWaypointEditor	Input/InputEventsActions.cpp	/^InputEvents::eventWaypointEditor(const TCHAR *misc)$/;"	f	class:InputEvents
eventWeather	Input/InputEventsActions.cpp	/^InputEvents::eventWeather(const TCHAR *misc)$/;"	f	class:InputEvents
eventZoom	Input/InputEventsMap.cpp	/^InputEvents::eventZoom(const TCHAR* misc)$/;"	f	class:InputEvents
event_enum_names	Lua/InputEvent.cpp	/^static const char* event_enum_names[] = {$/;"	v	file:
event_id	Input/InputParser.cpp	/^  unsigned event_id, location;$/;"	m	struct:EventBuilder	file:
event_pipe	Event/Poll/Queue.hpp	/^  EventPipe event_pipe;$/;"	m	class:final
event_pipe_asio	Event/Poll/Queue.hpp	/^  boost::asio::posix::stream_descriptor event_pipe_asio;$/;"	m	class:final
event_queue	Event/Globals.cpp	/^EventQueue *event_queue;$/;"	v
event_store_enum	Lua/InputEvent.cpp	/^static LuaEventRegistry<unsigned> event_store_enum;$/;"	v	file:
event_store_gesture	Lua/InputEvent.cpp	/^static LuaEventRegistry<const tstring> event_store_gesture;$/;"	v	file:
event_store_key	Lua/InputEvent.cpp	/^static LuaEventRegistry<unsigned> event_store_key;$/;"	v	file:
events	Event/Android/Queue.hpp	/^  std::queue<Event> events;$/;"	m	class:EventQueue
events	Event/Poll/Queue.hpp	/^  std::queue<Event> events;$/;"	m	class:final
events	Input/InputConfig.hpp	/^  TrivialArray<Event, MAX_EVENTS> events;$/;"	m	struct:InputConfig
ewDecelTpIndex	Device/Driver/EW.cpp	/^  int ewDecelTpIndex;$/;"	m	class:EWDevice	file:
ew_driver	Device/Driver/EW.cpp	/^const struct DeviceRegister ew_driver = {$/;"	v	typeref:struct:DeviceRegister
ew_microrecorder_driver	Device/Driver/EWMicroRecorder.cpp	/^const struct DeviceRegister ew_microrecorder_driver = {$/;"	v	typeref:struct:DeviceRegister
exception	Job/Async.hpp	/^  std::exception_ptr exception;$/;"	m	class:final
exception	Job/Thread.hpp	/^  std::exception_ptr exception;$/;"	m	class:JobThread
exchange	IO/FileReader.hxx	/^		 handle(std::exchange(other.handle, INVALID_HANDLE_VALUE)) {}$/;"	f	class:final
exchange	Java/Ref.hxx	/^			 value(std::exchange(src.value, nullptr)) {}$/;"	f	class:Java::LocalRef
exchange	Net/HTTP/Easy.hxx	/^		:handle(std::exchange(src.handle, nullptr)) {}$/;"	f	class:CurlEasy
exchange	Net/HTTP/Slist.hxx	/^		:head(std::exchange(src.head, nullptr)) {}$/;"	f	class:CurlSlist
exchange	Util/AllocatedArray.hxx	/^		:buffer(std::exchange(other.buffer, nullptr)) {}$/;"	f	class:AllocatedArray
exclude	Device/Dispatcher.hpp	/^  unsigned exclude;$/;"	m	class:final
expected_top	Lua/Assert.hxx	/^	const int expected_top;$/;"	m	class:Lua::ScopeCheckStack
expert	Dialogs/DialogSettings.hpp	/^  bool expert;$/;"	m	struct:DialogSettings
expert	Dialogs/Settings/dlgConfiguration.cpp	/^    PixelRect expert, button2, button1;$/;"	m	struct:final::Layout	file:
expert	Dialogs/Settings/dlgConfiguration.cpp	/^  CheckBoxControl expert;$/;"	m	class:final	file:
expert	Widget/RowFormWidget.hpp	/^    bool expert;$/;"	m	struct:RowFormWidget::Row
expire_timer	Cloud/Main.cpp	/^  boost::asio::steady_timer save_timer, expire_timer;$/;"	m	class:final	file:
expired	Engine/Airspace/AirspaceWarning.hpp	/^  bool expired;$/;"	m	class:AirspaceWarning
expired_last	Engine/Airspace/AirspaceWarning.hpp	/^  bool expired_last;$/;"	m	class:AirspaceWarning
expr	Topography/shapelib/mapserver.h	/^    expressionObj *expr; \/* expression to be evaluated (contains tokens) *\/$/;"	m	struct:__anon36
exprBindings	Topography/shapelib/mapserver.h	/^    expressionObj exprBindings[MS_LABEL_BINDING_LENGTH];$/;"	m	struct:labelObj
exprBindings	Topography/shapelib/mapserver.h	/^    expressionObj exprBindings[MS_STYLE_BINDING_LENGTH];$/;"	m	struct:styleObj
expression	Topography/shapelib/mapserver.h	/^    expressionObj expression; \/* the expression to be matched *\/$/;"	m	struct:classObj
expression	Topography/shapelib/mapserver.h	/^    expressionObj expression;$/;"	m	struct:labelObj
expressionObj	Topography/shapelib/mapserver.h	/^  } expressionObj;$/;"	t	typeref:struct:__anon35
ext	Terrain/jasper/jas_image.h	/^	char *ext;$/;"	m	struct:__anon127
ext_config	Device/Driver/LX/LXN.hpp	/^    const struct ExtConfig *ext_config;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::ExtConfig
ext_master_ctl_has_switch	Audio/VolumeController.hpp	/^  bool ext_master_ctl_has_vol, ext_master_ctl_has_switch;$/;"	m	class:final
ext_master_ctl_has_vol	Audio/VolumeController.hpp	/^  bool ext_master_ctl_has_vol, ext_master_ctl_has_switch;$/;"	m	class:final
ext_master_max	Audio/VolumeController.hpp	/^  long ext_master_min, ext_master_max, ext_master_zero_db;$/;"	m	class:final
ext_master_min	Audio/VolumeController.hpp	/^  long ext_master_min, ext_master_max, ext_master_zero_db;$/;"	m	class:final
ext_master_volume_ctl	Audio/VolumeController.hpp	/^  snd_mixer_elem_t *ext_master_volume_ctl = nullptr;$/;"	m	class:final
ext_master_zero_db	Audio/VolumeController.hpp	/^  long ext_master_min, ext_master_max, ext_master_zero_db;$/;"	m	class:final
extension	Topography/shapelib/mapserver.h	/^    char *extension;$/;"	m	struct:__anon39
extension_defs	Device/Driver/LX/LXN.cpp	/^const struct LXN::ExtensionDefinition LXN::extension_defs[16] = {$/;"	m	class:LXN	typeref:struct:LXN::	file:
extensions	Device/Driver/LX/LXN.hpp	/^    struct ExtensionDefinition extensions[16];$/;"	m	struct:LXN::ExtensionConfig	typeref:struct:LXN::ExtensionConfig::ExtensionDefinition
extensions	Replay/IgcReplay.hpp	/^  IGCExtensions extensions;$/;"	m	class:IgcReplay
extent	Topography/shapelib/mapserver.h	/^    rectObj   extent;$/;"	m	struct:__anon56
extent	Topography/shapelib/mapserver.h	/^    rectObj extent; \/* clipping extent *\/$/;"	m	struct:__anon42
extent	Topography/shapelib/mapserver.h	/^    rectObj extent; \/* map extent array *\/$/;"	m	struct:mapObj
extent	Topography/shapelib/mapserver.h	/^    rectObj extent;$/;"	m	struct:__anon53
extent	Topography/shapelib/mapserver.h	/^    rectObj extent;$/;"	m	struct:layerObj
external_trigger_cruise_enabled	Computer/Settings.hpp	/^  bool external_trigger_cruise_enabled;$/;"	m	struct:CirclingSettings
external_wind	Computer/Wind/Settings.hpp	/^  bool external_wind;$/;"	m	struct:WindSettings
external_wind	NMEA/Info.hpp	/^  SpeedVector external_wind;$/;"	m	struct:NMEAInfo
external_wind_available	NMEA/Info.hpp	/^  Validity external_wind_available;$/;"	m	struct:NMEAInfo
externalstatus	Hardware/Battery.hpp	/^    enum externalstatus{$/;"	g	namespace:Power::External
extra	Widget/ArrowPagerWidget.hpp	/^    PixelRect extra;$/;"	m	struct:ArrowPagerWidget::Layout
extra	Widget/ArrowPagerWidget.hpp	/^  Widget *const extra;$/;"	m	class:ArrowPagerWidget
extra	Widget/TabWidget.hpp	/^    PixelRect tab_display, extra, pager;$/;"	m	struct:TabWidget::Layout
extra	Widget/TabWidget.hpp	/^  Widget *extra;$/;"	m	class:TabWidget
extra_position	Widget/TabWidget.hpp	/^  PixelRect extra_position;$/;"	m	class:TabWidget
eye_driver	Device/Driver/Eye.cpp	/^const struct DeviceRegister eye_driver = {$/;"	v	typeref:struct:DeviceRegister
f	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  double f(const double distance) {$/;"	f	class:final
f	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  double f(const double h) {$/;"	f	class:final
f	Engine/GlideSolvers/GlidePolar.cpp	/^  double f(const double V) {$/;"	f	class:final
f	Engine/GlideSolvers/MacCready.cpp	/^  double f(const double v) {$/;"	f	class:MacCreadyVopt
f	Engine/Route/AStar.hpp	/^  unsigned f() const {$/;"	f	struct:AStarPriorityValue
f	Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::f(const double mc)$/;"	f	class:TaskBestMc
f	Engine/Task/Solvers/TaskCruiseEfficiency.cpp	/^TaskCruiseEfficiency::f(const double ce)$/;"	f	class:TaskCruiseEfficiency
f	Engine/Task/Solvers/TaskEffectiveMacCready.cpp	/^TaskEffectiveMacCready::f(const double mc)$/;"	f	class:TaskEffectiveMacCready
f	Engine/Task/Solvers/TaskGlideRequired.cpp	/^TaskGlideRequired::f(const double S)$/;"	f	class:TaskGlideRequired
f	Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::f(const double p)$/;"	f	class:TaskMinTarget
f	Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::f(const double p)$/;"	f	class:TaskOptTarget
f1	Geo/Flat/FlatEllipse.hpp	/^  FlatPoint f1, f2, ap;$/;"	m	class:FlatEllipse
f2	Geo/Flat/FlatEllipse.hpp	/^  FlatPoint f1, f2, ap;$/;"	m	class:FlatEllipse
face	Screen/Font.hpp	/^  FT_Face face = nullptr;$/;"	m	class:Font
face	Topography/shapelib/mapserver.h	/^  face_element *face;$/;"	m	struct:__anon66
face_element	Topography/shapelib/mapserver.h	/^typedef struct face_element face_element;$/;"	t	typeref:struct:face_element
factor	Android/VoltageDevice.hpp	/^  double factor;$/;"	m	class:final
factor_to_user	Units/Descriptor.hpp	/^  double factor_to_user;$/;"	m	struct:UnitDescriptor
factory	Waypoint/WaypointReaderBase.hpp	/^  const WaypointFactory factory;$/;"	m	class:WaypointReaderBase
factory_mode	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskFactoryType factory_mode;$/;"	m	class:final
fai_constraints	Engine/Task/Factory/FAITaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_constraints = {$/;"	v	file:
fai_finish	Engine/Task/Factory/Constraints.hpp	/^  bool fai_finish;$/;"	m	struct:TaskFactoryConstraints
fai_finish	Engine/Task/Ordered/FinishConstraints.hpp	/^  bool fai_finish;$/;"	m	struct:FinishConstraints
fai_finish	Engine/Task/Ordered/StartConstraints.hpp	/^  bool fai_finish;$/;"	m	struct:StartConstraints
fai_finish_height	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  double fai_finish_height = 0;$/;"	m	class:final
fai_goal_constraints	Engine/Task/Factory/FAIGoalTaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_goal_constraints = {$/;"	v	file:
fai_or_constraints	Engine/Task/Factory/FAIORTaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_or_constraints = {$/;"	v	file:
fai_triangle	Engine/Task/Ordered/Settings.hpp	/^  FAITriangleSettings fai_triangle;$/;"	m	struct:OrderedTaskSettings
fai_triangle_constraints	Engine/Task/Factory/FAITriangleTaskFactory.cpp	/^static constexpr TaskFactoryConstraints fai_triangle_constraints = {$/;"	v	file:
fai_triangle_point_invalid	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  bool fai_triangle_point_invalid;$/;"	m	class:FAITrianglePointValidator
fai_triangle_settings	MapSettings.hpp	/^  FAITriangleSettings fai_triangle_settings;$/;"	m	struct:MapSettings
fai_triangle_threshold_list	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^static constexpr StaticEnumChoice fai_triangle_threshold_list[] = {$/;"	v	file:
failed	Dialogs/FileManager.cpp	/^    bool downloading, failed, out_of_date;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
failures	Dialogs/FileManager.cpp	/^  std::set<std::string> failures;$/;"	m	class:ManagedFileListWidget	file:
false	Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(false)$/;"	v
false	Dialogs/WidgetDialog.cpp	/^   full(false), auto_size(true)$/;"	v
false	Terrain/jasper/jas_types.h	117;"	d
false_text	Form/DataField/Boolean.hpp	/^  StaticString<32> false_text;$/;"	m	class:final
fan_counter	Engine/Route/ReachFanParms.hpp	/^  unsigned fan_counter = 0;$/;"	m	struct:ReachFanParms
fans	MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFanVector fans;$/;"	m	struct:ProjectedFans	file:
fans	MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFans fans;$/;"	m	class:final	file:
far_distance	NMEA/FlyingState.hpp	/^  double far_distance;$/;"	m	struct:FlyingState
far_location	NMEA/FlyingState.hpp	/^  GeoPoint far_location;$/;"	m	struct:FlyingState
fast_forward	Replay/Replay.hpp	/^  double fast_forward;$/;"	m	class:final
fast_log_num	Computer/LogComputer.hpp	/^  unsigned fast_log_num;$/;"	m	class:LogComputer
fastcosine	Math/Angle.hpp	/^  inline double fastcosine() const {$/;"	f	class:Angle
fastcosine	Math/FastTrig.hpp	/^fastcosine(double x)$/;"	f
fastsine	Math/Angle.hpp	/^  inline double fastsine() const {$/;"	f	class:Angle
fastsine	Math/FastTrig.hpp	/^fastsine(double x)$/;"	f
fb_cfg	Screen/TopWindow.hpp	/^  GLXFBConfig *fb_cfg;$/;"	m	class:TopWindow
fb_id	Screen/EGL/TopCanvas.cpp	/^  uint32_t fb_id;$/;"	m	struct:drm_fb	file:
fd	Event/Poll/LibInput/LibInputHandler.hpp	/^  boost::asio::posix::stream_descriptor fd;$/;"	m	class:final
fd	Event/Poll/Linux/Input.hpp	/^  boost::asio::posix::stream_descriptor fd;$/;"	m	class:final
fd	Event/Poll/WaylandQueue.hpp	/^  boost::asio::posix::stream_descriptor fd;$/;"	m	class:final
fd	IO/Async/SignalListener.hpp	/^  UniqueFileDescriptor fd;$/;"	m	class:SignalListener
fd	IO/FileOutputStream.hxx	/^	FileDescriptor fd = FileDescriptor::Undefined();$/;"	m	class:final
fd	IO/FileReader.hxx	/^	UniqueFileDescriptor fd;$/;"	m	class:final
fd	Kobo/WPASupplicant.hpp	/^  SocketDescriptor fd;$/;"	m	class:WPASupplicant
fd	OS/FileDescriptor.hxx	/^	explicit constexpr FileDescriptor(int _fd) noexcept:fd(_fd) {}$/;"	f	class:FileDescriptor
fd	OS/FileDescriptor.hxx	/^	int fd;$/;"	m	class:FileDescriptor
fd	Screen/Custom/TopCanvas.hpp	/^  int fd;$/;"	m	class:DisplayOrientation
fd	Terrain/jasper/jas_stream.h	/^	int fd;$/;"	m	struct:__anon121
fd	zzip/file.h	/^    int fd;$/;"	m	struct:zzip_file
fd	zzip/lib.h	/^    int fd;$/;"	m	struct:zzip_dir
fd	zzip/plugin.h	/^    struct zzip_plugin_io fd;$/;"	m	union:_zzip_plugin_io	typeref:struct:_zzip_plugin_io::zzip_plugin_io
fdf_findfield	Device/Driver/Volkslogger/dbbconv.cpp	/^DBB::fdf_findfield(uint8_t id) const$/;"	f	class:DBB
fdfcursor	Device/Driver/Volkslogger/dbbconv.h	/^  size_t fdfcursor;$/;"	m	class:DBB
fdim	Math/Angle.hpp	/^  Angle fdim(const Angle x) const {$/;"	f	class:Angle
featureListNodeObj	Topography/shapelib/mapserver.h	/^  } featureListNodeObj;$/;"	t	typeref:struct:listNode
featureListNodeObjPtr	Topography/shapelib/mapserver.h	/^  typedef featureListNodeObj * featureListNodeObjPtr;$/;"	t
features	Computer/Settings.hpp	/^  FeaturesSettings features;$/;"	m	struct:ComputerSettings
features	Topography/shapelib/mapserver.h	/^    featureListNodeObjPtr features; \/* linked list so we don't need a counter *\/$/;"	m	struct:layerObj
fg_color	Look/InfoBoxLook.hpp	/^    Color fg_color;$/;"	m	struct:InfoBoxLook::__anon24
fgrep	LocalPath.cpp	/^fgrep(const char *fname, const char *string, const char *string2 = nullptr)$/;"	f	file:
field_marginal_icon	Look/WaypointLook.hpp	/^  MaskedIcon field_marginal_icon, field_reachable_icon, field_unreachable_icon;$/;"	m	struct:WaypointLook
field_reachable_icon	Look/WaypointLook.hpp	/^  MaskedIcon field_marginal_icon, field_reachable_icon, field_unreachable_icon;$/;"	m	struct:WaypointLook
field_unreachable_icon	Look/WaypointLook.hpp	/^  MaskedIcon field_marginal_icon, field_reachable_icon, field_unreachable_icon;$/;"	m	struct:WaypointLook
file	IGC/IGCWriter.hpp	/^  FileOutputStream file;$/;"	m	class:IGCWriter
file	IO/FileHandle.hpp	/^  FILE *file;$/;"	m	class:FileHandle
file	IO/FileLineReader.hpp	/^  FileReader file;$/;"	m	class:FileLineReaderA
file	IO/StdioOutputStream.hxx	/^	FILE *const file;$/;"	m	class:final
file	IO/StdioOutputStream.hxx	/^	explicit StdioOutputStream(FILE *_file) noexcept:file(_file) {}$/;"	f	class:final
file	IO/TextWriter.hpp	/^  FileHandle file;$/;"	m	class:TextWriter
file	IO/ZipReader.hpp	/^  struct zzip_file *const file;$/;"	m	class:final
file	Language/MOLoader.hpp	/^  MOFile *file;$/;"	m	class:MOLoader
file	Topography/TopographyFile.hpp	/^  shapefileObj file;$/;"	m	class:TopographyFile
file	Topography/TopographyFileRenderer.hpp	/^  const TopographyFile &file;$/;"	m	class:final
file_cache	Components.cpp	/^FileCache *file_cache;$/;"	v
file_close	Terrain/jasper/base/jas_stream.c	/^static int file_close(jas_stream_obj_t *obj)$/;"	f	file:
file_list	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect file_list;$/;"	m	struct:final::Layout	file:
file_list	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  ListControl file_list;$/;"	m	class:final	file:
file_list_handler	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WaypointExternalFileListHandler file_list_handler;$/;"	m	class:final	file:
file_list_item_height	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    unsigned file_list_item_height;$/;"	m	struct:final::Layout	file:
file_offset	Terrain/RasterTileCache.hpp	/^    uint32_t file_offset;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
file_read	Terrain/jasper/base/jas_stream.c	/^static int file_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
file_seek	Terrain/jasper/base/jas_stream.c	/^static long file_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
file_type	Dialogs/DownloadFilePicker.cpp	/^  const FileType file_type;$/;"	m	class:final	file:
file_type	Form/DataField/File.hpp	/^  FileType file_type;$/;"	m	class:final
file_write	Terrain/jasper/base/jas_stream.c	/^static int file_write(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
fileext	zzip/lib.h	/^    zzip_strings_t* fileext;      \/* list of fileext to test for *\/$/;"	m	struct:zzip_dir
filename	Form/DataField/File.hpp	/^    Path filename;$/;"	m	struct:final::Item
filename	Logger/LoggerImpl.hpp	/^  AllocatedPath filename;$/;"	m	class:LoggerImpl
filename	Task/TaskStore.hpp	/^    AllocatedPath filename;$/;"	m	struct:TaskStore::Item
filename	Topography/shapelib/mapserver.h	/^    char *filename;$/;"	m	struct:__anon31
filename	Topography/shapelib/mapserver.h	/^    char *filename;$/;"	m	struct:__anon52
files	Device/Driver/CAI302/Protocol.hpp	/^    FileInfo files[8];$/;"	m	struct:CAI302::FileList
files	Form/DataField/File.hpp	/^  StaticArray<Item, MAX_FILES> files;$/;"	m	class:final
files	Repository/FileRepository.hpp	/^  FileList files;$/;"	m	struct:FileRepository
files	Topography/TopographyRenderer.hpp	/^  StaticArray<TopographyFileRenderer *, TopographyStore::MAXTOPOGRAPHY> files;$/;"	m	class:TopographyRenderer
files	Topography/TopographyStore.hpp	/^  StaticArray<TopographyFile *, MAXTOPOGRAPHY> files;$/;"	m	class:TopographyStore
files_embed	Engine/Waypoint/Waypoint.hpp	/^  std::forward_list<tstring> files_embed;$/;"	m	struct:Waypoint
files_external	Engine/Waypoint/Waypoint.hpp	/^  std::forward_list<tstring> files_external;$/;"	m	struct:Waypoint
files_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage files_pages[] = {$/;"	v	file:
filesize	zzip/plugin.h	/^    zzip_off_t   (*filesize)(int fd);$/;"	m	struct:zzip_plugin_io
fill	Device/Driver/ATR833.cpp	/^  uint8_t fill;$/;"	m	class:ATRBuffer	file:
fill_brush_changed	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool fill_brush_changed;$/;"	m	class:AirspaceClassRendererSettingsPanel
fill_cache	Renderer/AirspaceLabelRenderer.hpp	/^  TransparentRendererCache fill_cache;$/;"	m	class:AirspaceLabelRenderer
fill_cache	Renderer/AirspaceRenderer.hpp	/^  TransparentRendererCache fill_cache;$/;"	m	class:AirspaceRenderer
fill_color	Look/AirspaceLook.hpp	/^  Color fill_color;$/;"	m	struct:AirspaceClassLook
fill_color	Renderer/AirspaceRendererSettings.hpp	/^  RGB8Color fill_color;$/;"	m	struct:AirspaceClassRendererSettings
fill_color_changed	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  bool fill_color_changed;$/;"	m	class:AirspaceClassRendererSettingsPanel
fill_mode	Renderer/AirspaceRendererSettings.hpp	/^  } fill_mode;$/;"	m	struct:AirspaceClassRendererSettings	typeref:class:AirspaceClassRendererSettings::FillMode
fill_mode	Renderer/AirspaceRendererSettings.hpp	/^  } fill_mode;$/;"	m	struct:AirspaceRendererSettings	typeref:class:AirspaceRendererSettings::FillMode
filled	Audio/AndroidPCMPlayer.hpp	/^  bool filled;$/;"	m	class:AndroidPCMPlayer
filter	Engine/Airspace/AirspaceSorter.cpp	/^  const AirspaceFilterData &filter;$/;"	m	class:final	file:
filter	Topography/shapelib/mapserver.h	/^    CompositingFilter *filter;$/;"	m	struct:_LayerCompositer
filter	Topography/shapelib/mapserver.h	/^    char *filter;$/;"	m	struct:_CompositingFilter
filter	Topography/shapelib/mapserver.h	/^    char *filter;$/;"	m	struct:__anon64
filter	Topography/shapelib/mapserver.h	/^    expressionObj filter; \/* by filter *\/$/;"	m	struct:__anon40
filter	Topography/shapelib/mapserver.h	/^    expressionObj filter; \/* connection specific attribute filter *\/$/;"	m	struct:layerObj
filter	Topography/shapelib/mapserver.h	/^    expressionObj filter; \/* expression for filtering the shapes *\/$/;"	m	struct:__anon37
filter	Waypoint/WaypointListBuilder.hpp	/^  const WaypointFilter &filter;$/;"	m	class:final
filter_	Math/SelfTimingKalmanFilter1d.hpp	/^  KalmanFilter1d filter_;$/;"	m	class:SelfTimingKalmanFilter1d
filter_time	Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice filter_time[] = {$/;"	v
filter_widget	Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceFilterWidget &filter_widget;$/;"	m	class:final	file:
filter_widget	Dialogs/Traffic/TrafficList.cpp	/^  const RowFormWidget *const filter_widget;$/;"	m	class:TrafficListWidget	file:
filter_widget	Dialogs/Waypoint/WaypointList.cpp	/^  WaypointFilterWidget &filter_widget;$/;"	m	class:final	file:
filteritem	Topography/shapelib/mapserver.h	/^    char *filteritem;$/;"	m	struct:__anon40
filteritem	Topography/shapelib/mapserver.h	/^    char *filteritem;$/;"	m	struct:__anon64
filteritem	Topography/shapelib/mapserver.h	/^    char *filteritem;$/;"	m	struct:layerObj
filteritemindex	Topography/shapelib/mapserver.h	/^    int filteritemindex;$/;"	m	struct:layerObj
final	Android/BMP085Device.hpp	/^class BMP085Device final : private BMP085Listener {$/;"	c
final	Android/I2CbaroDevice.hpp	/^class I2CbaroDevice final : private I2CbaroListener {$/;"	c
final	Android/NunchuckDevice.hpp	/^class NunchuckDevice final : private NunchuckListener {$/;"	c
final	Android/VoltageDevice.hpp	/^class VoltageDevice final : private VoltageListener {$/;"	c
final	Audio/GlobalPCMMixer.hpp	/^class ScopeGlobalPCMMixer final {$/;"	c
final	Audio/GlobalPCMResourcePlayer.hpp	/^class ScopeGlobalPCMResourcePlayer final {$/;"	c
final	Audio/GlobalVolumeController.hpp	/^class ScopeGlobalVolumeController final {$/;"	c
final	Audio/PCMMixer.hpp	/^class PCMMixer final {$/;"	c
final	Audio/VarioSynthesiser.hpp	/^class VarioSynthesiser final : public ToneSynthesiser {$/;"	c
final	Audio/VolumeController.hpp	/^class VolumeController final {$/;"	c
final	CalculationThread.hpp	/^class CalculationThread final : public WorkerThread {$/;"	c
final	Cloud/Main.cpp	/^class CloudServer final$/;"	c	file:
final	Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^class ConditionMonitorAATTime final : public ConditionMonitor {$/;"	c
final	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^class ConditionMonitorFinalGlide final : public ConditionMonitor {$/;"	c
final	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^class ConditionMonitorGlideTerrain final : public ConditionMonitor {$/;"	c
final	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^class ConditionMonitorLandableReachable final : public ConditionMonitor {$/;"	c
final	Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^class ConditionMonitorSunset final : public ConditionMonitor {$/;"	c
final	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^class ConditionMonitorWind final : public ConditionMonitor {$/;"	c
final	Computer/Events.hpp	/^class GlideComputerEvents final : public NullBlackboardListener {$/;"	c
final	Computer/GlideComputerInterface.hpp	/^class GlideComputerTaskEvents final : public TaskEvents {$/;"	c
final	CrossSection/AirspaceXSRenderer.cpp	/^class AirspaceIntersectionVisitorSlice final$/;"	c	file:
final	Device/Descriptor.cpp	/^class OpenDeviceJob final : public Job {$/;"	c	file:
final	Device/Descriptor.hpp	/^class DeviceDescriptor final : PortListener, PortLineSplitter {$/;"	c
final	Device/Dispatcher.hpp	/^class DeviceDispatcher final : public PortLineHandler {$/;"	c
final	Device/Driver/ATR833.cpp	/^class ATR833Device final : public AbstractDevice {$/;"	c	file:
final	Device/Driver/CaiLNav.cpp	/^class CaiLNavDevice final : public AbstractDevice {$/;"	c	file:
final	Device/Driver/KRT2.cpp	/^class KRT2Device final : public AbstractDevice {$/;"	c	file:
final	Device/Driver/XCTracer/Internal.hpp	/^class XCTracerDevice final : public AbstractDevice {$/;"	c
final	Device/MultipleDevices.hpp	/^class MultipleDevices final : PortListener {$/;"	c
final	Device/Port/DumpPort.hpp	/^class DumpPort final : public Port {$/;"	c
final	Device/Port/TCPClientPort.hpp	/^class TCPClientPort final$/;"	c
final	Device/Port/TCPPort.hpp	/^class TCPPort final : public BufferedPort$/;"	c
final	Device/Port/UDPPort.hpp	/^class UDPPort final : public BufferedPort$/;"	c
final	Dialogs/Airspace/AirspaceList.cpp	/^class AirspaceFilterWidget final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Airspace/AirspaceList.cpp	/^class AirspaceListButtons final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Airspace/AirspaceList.cpp	/^class AirspaceListWidget final$/;"	c	file:
final	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^class AirspaceDetailsWidget final$/;"	c	file:
final	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^class AirspaceWarningListWidget final$/;"	c	file:
final	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^class BlueFlyConfigurationWidget final$/;"	c	file:
final	Dialogs/Device/CAI302/UnitsEditor.hpp	/^class CAI302UnitsEditor final : public RowFormWidget {$/;"	c
final	Dialogs/Device/DeviceListDialog.cpp	/^class DeviceListWidget final$/;"	c	file:
final	Dialogs/Device/FLARM/ConfigWidget.hpp	/^class FLARMConfigWidget final : public RowFormWidget {$/;"	c
final	Dialogs/Device/LX/ManageNanoDialog.cpp	/^class ManageNanoWidget final$/;"	c	file:
final	Dialogs/Device/LX/ManageV7Dialog.cpp	/^class ManageV7Widget final$/;"	c	file:
final	Dialogs/Device/LX/NanoConfigWidget.hpp	/^class NanoConfigWidget final : public RowFormWidget {$/;"	c
final	Dialogs/Device/LX/V7ConfigWidget.hpp	/^class V7ConfigWidget final : public RowFormWidget {$/;"	c
final	Dialogs/Device/ManageCAI302Dialog.cpp	/^class ManageCAI302Widget final$/;"	c	file:
final	Dialogs/Device/ManageFlarmDialog.cpp	/^class ManageFLARMWidget final$/;"	c	file:
final	Dialogs/Device/PortMonitor.cpp	/^class PortMonitorWidget final : public WindowWidget, public ActionListener {$/;"	c	file:
final	Dialogs/Device/PortMonitor.cpp	/^class PortTerminalBridge final : public DataHandler {$/;"	c	file:
final	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^class ScanBluetoothLeWidget final$/;"	c	file:
final	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^class VegaConfigurationExtraButtons final$/;"	c	file:
final	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^class VegaDemoWidget final$/;"	c	file:
final	Dialogs/DownloadFilePicker.cpp	/^class DownloadFilePickerWidget final$/;"	c	file:
final	Dialogs/DownloadFilePicker.cpp	/^class DownloadProgress final : Net::DownloadListener {$/;"	c	file:
final	Dialogs/FileManager.cpp	/^class AddFileListItemRenderer final : public ListItemRenderer {$/;"	c	file:
final	Dialogs/KnobTextEntry.cpp	/^class KnobTextEntryWidget final : public WindowWidget {$/;"	c	file:
final	Dialogs/KnobTextEntry.cpp	/^class KnobTextEntryWindow final : public PaintWindow, public ActionListener {$/;"	c	file:
final	Dialogs/MapItemListDialog.cpp	/^class MapItemListWidget final$/;"	c	file:
final	Dialogs/MapItemListSettingsPanel.hpp	/^class MapItemListSettingsPanel final : public RowFormWidget {$/;"	c
final	Dialogs/Plane/PlaneDetailsDialog.cpp	/^class PlaneEditWidget final$/;"	c	file:
final	Dialogs/Plane/PlaneListDialog.cpp	/^class PlaneListWidget final$/;"	c	file:
final	Dialogs/Plane/PlanePolarDialog.cpp	/^class PlanePolarWidget final$/;"	c	file:
final	Dialogs/ProfileListDialog.cpp	/^class ProfileListWidget final$/;"	c	file:
final	Dialogs/ReplayDialog.cpp	/^class ReplayControlWidget final$/;"	c	file:
final	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^class AirspaceConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^class AudioConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^class AudioVarioConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^class CloudConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^class GaugesConfigPanel final : public RowFormWidget, DataFieldListener {$/;"	c	file:
final	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^class GlideComputerConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^class InfoBoxesConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^class InterfaceConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^class LayoutConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^class LoggerConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^class MapDisplayConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^class PageLayoutEditWidget final$/;"	c	file:
final	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^class RouteConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^class SafetyFactorsConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^class ScoringConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^class SiteConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^class SymbolsConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^class TaskDefaultsConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^class TaskRulesConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^class TerrainDisplayConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^class TimeConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^class TrackingConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^class UnitsConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^class VarioConfigPanel final : public RowFormWidget {$/;"	c	file:
final	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^class WaypointDisplayConfigPanel final$/;"	c	file:
final	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^class WeatherConfigPanel final$/;"	c	file:
final	Dialogs/Settings/WindSettingsPanel.hpp	/^class WindSettingsPanel final$/;"	c
final	Dialogs/Settings/dlgBasicSettings.cpp	/^class FlightSetupPanel final$/;"	c	file:
final	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^class InfoBoxesConfigWidget final$/;"	c	file:
final	Dialogs/Settings/dlgConfiguration.cpp	/^class ConfigurationExtraButtons final$/;"	c	file:
final	Dialogs/SimulatorPromptWindow.hpp	/^class SimulatorPromptWindow final : public ContainerWindow {$/;"	c
final	Dialogs/StartupDialog.cpp	/^class LogoQuitWidget final : public NullWidget {$/;"	c	file:
final	Dialogs/StartupDialog.cpp	/^class LogoWindow final : public PaintWindow {$/;"	c	file:
final	Dialogs/StartupDialog.cpp	/^class StartupWidget final : public RowFormWidget {$/;"	c	file:
final	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^class SystemStatusPanel final$/;"	c
final	Dialogs/Task/AlternatesListDialog.cpp	/^class AlternatesListWidget final$/;"	c	file:
final	Dialogs/Task/Manager/Internal.hpp	/^class TaskManagerDialog final : public TabWidget, ActionListener {$/;"	c
final	Dialogs/Task/Manager/TaskClosePanel.hpp	/^class TaskClosePanel final : public NullWidget, ActionListener {$/;"	c
final	Dialogs/Task/Manager/TaskEditPanel.cpp	/^class TaskEditButtons final : public NullWidget {$/;"	c	file:
final	Dialogs/Task/Manager/TaskListPanel.cpp	/^class TaskListPanel final$/;"	c	file:
final	Dialogs/Task/Manager/TaskMiscPanel.hpp	/^class TaskMiscPanel final : public PagerWidget {$/;"	c
final	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^class TaskPropertiesPanel final$/;"	c
final	Dialogs/Task/MutateTaskPointDialog.cpp	/^class MutateTaskPointRenderer final : public ListItemRenderer {$/;"	c	file:
final	Dialogs/Task/TaskPointDialog.cpp	/^class TaskPointWidget final$/;"	c	file:
final	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^class FlarmTrafficDetailsWidget final$/;"	c	file:
final	Dialogs/Traffic/TeamCodeDialog.cpp	/^class TeamCodeWidget final$/;"	c	file:
final	Dialogs/Waypoint/Manager.cpp	/^class WaypointManagerWidget final$/;"	c	file:
final	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^class WaypointCommandsWidget final$/;"	c
final	Dialogs/Waypoint/WaypointList.cpp	/^class WaypointListWidget final$/;"	c	file:
final	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^class WaypointDetailsWidget final$/;"	c	file:
final	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^class WaypointExternalFileListHandler final$/;"	c	file:
final	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^class WaypointEditWidget final : public RowFormWidget, DataFieldListener {$/;"	c	file:
final	Dialogs/Weather/MapOverlayWidget.cpp	/^class WeatherMapOverlayListWidget final$/;"	c	file:
final	Dialogs/Weather/NOAADetails.cpp	/^class NOAADetailsWidget final : public LargeTextWidget, ActionListener {$/;"	c	file:
final	Dialogs/Weather/NOAAList.cpp	/^class NOAAListWidget final$/;"	c	file:
final	Dialogs/Weather/PCMetDialog.cpp	/^class ImageAreaListWidget final : public TextListWidget {$/;"	c	file:
final	Dialogs/Weather/PCMetDialog.cpp	/^class ImageTypeListWidget final : public TextListWidget {$/;"	c	file:
final	Dialogs/Weather/RASPDialog.cpp	/^class RASPSettingsPanel final$/;"	c	file:
final	Dialogs/dlgAnalysis.cpp	/^class AnalysisWidget final : public NullWidget, ActionListener {$/;"	c	file:
final	Dialogs/dlgCredits.cpp	/^class LogoPageWindow final : public PaintWindow {$/;"	c	file:
final	Dialogs/dlgQuickMenu.cpp	/^class QuickMenu final : public WindowWidget, ActionListener {$/;"	c	file:
final	Dialogs/dlgQuickMenu.cpp	/^class QuickMenuButtonRenderer final : public ButtonRenderer {$/;"	c	file:
final	Dialogs/dlgSimulatorPrompt.cpp	/^class SimulatorPromptWidget final : public WindowWidget {$/;"	c	file:
final	DrawThread.hpp	/^class DrawThread final : public RecursivelySuspensibleThread {$/;"	c
final	Engine/Airspace/Airspace.hpp	/^class Airspace final : public FlatBoundingBox$/;"	c
final	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^class AirspaceAircraftInterceptHorizontal final : public ZeroFinder {$/;"	c	file:
final	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^class AirspaceAircraftInterceptVertical final : public ZeroFinder {$/;"	c	file:
final	Engine/Airspace/AirspaceCircle.hpp	/^class AirspaceCircle final : public AbstractAirspace {$/;"	c
final	Engine/Airspace/AirspacePolygon.hpp	/^class AirspacePolygon final : public AbstractAirspace {$/;"	c
final	Engine/Airspace/AirspaceSorter.cpp	/^class AirspaceFilterPredicate final : public AirspacePredicate {$/;"	c	file:
final	Engine/Airspace/AirspaceWarningManager.cpp	/^class AirspaceIntersectionWarningVisitor final$/;"	c	file:
final	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^class AirspacePredicateTrue final : public AirspacePredicate {$/;"	c
final	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^class WrappedAirspacePredicate final : public AirspacePredicate, private P {$/;"	c
final	Engine/GlideSolvers/GlidePolar.cpp	/^class GlidePolarSpeedToFly final : public ZeroFinder {$/;"	c	file:
final	Engine/Route/AirspaceRoute.cpp	/^class AIV final : public AirspaceIntersectionVisitor {$/;"	c	file:
final	Engine/Task/Factory/AATTaskFactory.hpp	/^class AATTaskFactory final : public AbstractTaskFactory$/;"	c
final	Engine/Task/Factory/MatTaskFactory.hpp	/^class MatTaskFactory final : public AbstractTaskFactory {$/;"	c
final	Engine/Task/ObservationZones/KeyholeZone.hpp	/^class KeyholeZone final : public SymmetricSectorZone$/;"	c
final	Engine/Task/Ordered/OrderedTask.hpp	/^class OrderedTask final : public AbstractTask$/;"	c
final	Engine/Task/Ordered/Points/AATPoint.hpp	/^class AATPoint final : public IntermediateTaskPoint {$/;"	c
final	Engine/Task/Ordered/Points/ASTPoint.hpp	/^class ASTPoint final : public IntermediateTaskPoint$/;"	c
final	Engine/Task/Ordered/Points/FinishPoint.hpp	/^class FinishPoint final : public OrderedTaskPoint$/;"	c
final	Engine/Task/Ordered/Points/StartPoint.hpp	/^class StartPoint final : public OrderedTaskPoint {$/;"	c
final	Engine/Task/Ordered/SmartTaskAdvance.hpp	/^class SmartTaskAdvance final : public TaskAdvance {$/;"	c
final	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^class IsolineCrossingFinder final : public ZeroFinder$/;"	c
final	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  virtual void AddEdges(ScanTaskPoint curNode) noexcept final;$/;"	m	class:TaskDijkstra
final	Engine/Task/PathSolvers/TaskDijkstraMax.hpp	/^class TaskDijkstraMax final : public TaskDijkstra {$/;"	c
final	Engine/Task/PathSolvers/TaskDijkstraMin.hpp	/^class TaskDijkstraMin final : public TaskDijkstra {$/;"	c
final	Engine/Task/Solvers/TaskBestMc.hpp	/^class TaskBestMc final : ZeroFinder$/;"	c
final	Engine/Task/Solvers/TaskCruiseEfficiency.hpp	/^class TaskCruiseEfficiency final : public TaskSolveTravelled$/;"	c
final	Engine/Task/Solvers/TaskEffectiveMacCready.hpp	/^class TaskEffectiveMacCready final : public TaskSolveTravelled$/;"	c
final	Engine/Task/Solvers/TaskGlideRequired.hpp	/^class TaskGlideRequired final : private ZeroFinder {$/;"	c
final	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^class TaskMacCreadyRemaining final : public TaskMacCready {$/;"	c
final	Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^class TaskMacCreadyTotal final : public TaskMacCready {$/;"	c
final	Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^class TaskMacCreadyTravelled final : public TaskMacCready$/;"	c
final	Engine/Task/Solvers/TaskMinTarget.hpp	/^class TaskMinTarget final : private ZeroFinder {$/;"	c
final	Engine/Task/Solvers/TaskOptTarget.hpp	/^class TaskOptTarget final : public ZeroFinder$/;"	c
final	Engine/Task/Unordered/AbortTask.cpp	/^class WaypointVisitorVector final : public WaypointVisitor$/;"	c	file:
final	Engine/Task/Unordered/AlternateTask.hpp	/^class AlternateTask final : public AbortTask$/;"	c
final	Engine/Task/Unordered/GotoTask.hpp	/^class GotoTask final : public UnorderedTask$/;"	c
final	Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^class UnorderedTaskPoint final : public TaskWaypoint {$/;"	c
final	Event/DelayedNotify.hpp	/^class DelayedNotify final {$/;"	c
final	Event/Notify.hpp	/^class Notify final$/;"	c
final	Event/PeriodicTimer.hpp	/^class PeriodicTimer final {$/;"	c
final	Event/Poll/LibInput/LibInputHandler.hpp	/^class LibInputHandler final {$/;"	c
final	Event/Poll/Linux/Input.hpp	/^class LinuxInputDevice final {$/;"	c
final	Event/Poll/Linux/MergeMouse.hpp	/^class MergeMouse final {$/;"	c
final	Event/Poll/Queue.hpp	/^class EventQueue final : public IOContextOwner, private SignalListener {$/;"	c
final	Event/Poll/WaylandQueue.hpp	/^class WaylandEventQueue final {$/;"	c
final	Event/Timer.hpp	/^class Timer final {$/;"	c
final	Form/DataField/Angle.hpp	/^class AngleDataField final : public DataField {$/;"	c
final	Form/DataField/Boolean.hpp	/^class DataFieldBoolean final : public DataField {$/;"	c
final	Form/DataField/Enum.hpp	/^class DataFieldEnum final : public DataField {$/;"	c
final	Form/DataField/File.hpp	/^class FileDataField final : public DataField {$/;"	c
final	Form/DataField/Float.hpp	/^class DataFieldFloat final : public NumberDataField {$/;"	c
final	Form/DataField/GeoPoint.hpp	/^class GeoPointDataField final : public DataField {$/;"	c
final	Form/DataField/Integer.hpp	/^class DataFieldInteger final : public NumberDataField$/;"	c
final	Form/DataField/Password.hpp	/^class PasswordDataField final : public DataFieldString {$/;"	c
final	Form/DataField/Prefix.hpp	/^class PrefixDataField final : public DataFieldString {$/;"	c
final	Form/DataField/RoughTime.hpp	/^class RoughTimeDataField final : public DataField {$/;"	c
final	Form/DataField/Time.hpp	/^class DataFieldTime final : public DataField {$/;"	c
final	Form/TabDisplay.hpp	/^class TabDisplay final : public PaintWindow$/;"	c
final	Form/TabMenuDisplay.hpp	/^class TabMenuDisplay final : public PaintWindow$/;"	c
final	Gauge/GaugeFLARM.hpp	/^class GaugeFLARM final : public OverlappedWidget, NullBlackboardListener {$/;"	c
final	Gauge/GaugeThermalAssistant.hpp	/^class GaugeThermalAssistant final$/;"	c
final	Gauge/GlueGaugeVario.hpp	/^class GlueGaugeVario final$/;"	c
final	HorizonWidget.hpp	/^class HorizonWidget final : public WindowWidget,$/;"	c
final	IO/Async/AsioThread.hpp	/^class AsioThread final : protected Thread {$/;"	c
final	IO/FileOutputStream.hxx	/^class FileOutputStream final : public OutputStream {$/;"	c
final	IO/FileReader.hxx	/^class FileReader final : public Reader {$/;"	c
final	IO/GunzipReader.hxx	/^class GunzipReader final : public Reader {$/;"	c
final	IO/StdioOutputStream.hxx	/^class StdioOutputStream final : public OutputStream {$/;"	c
final	IO/ZipReader.hpp	/^class ZipReader final : public Reader {$/;"	c
final	IO/ZlibError.hxx	/^class ZlibError final : public std::exception {$/;"	c
final	InfoBoxes/Panel/AltitudeSimulator.cpp	/^class AltitudeSimulatorOffsetButtons final : public OffsetButtonsWidget {$/;"	c	file:
final	InfoBoxes/Panel/MacCreadyEdit.cpp	/^class MacCreadyOffsetButtons final : public OffsetButtonsWidget {$/;"	c	file:
final	InfoBoxes/Panel/RadioEdit.cpp	/^class RadioOffsetButtons final : public OffsetButtonsWidget {$/;"	c	file:
final	Input/InputEventsLua.cpp	/^class LuaFileVisitor final : public File::Visitor {$/;"	c	file:
final	Input/TaskEventObserver.hpp	/^class TaskEventObserver final {$/;"	c
final	Job/Async.hpp	/^class AsyncJobRunner final : private Thread {$/;"	c
final	Job/TriStateJob.hpp	/^class TriStateJob final : public Job, public T {$/;"	c
final	Kobo/KoboMenu.cpp	/^class KoboMenuWidget final : public WindowWidget, ActionListener {$/;"	c	file:
final	Kobo/NetworkDialog.cpp	/^class NetworkWidget final$/;"	c	file:
final	Kobo/SystemDialog.cpp	/^class SystemWidget final$/;"	c	file:
final	Kobo/ToolsDialog.cpp	/^class ToolsWidget final$/;"	c	file:
final	Kobo/WifiDialog.cpp	/^class WifiListWidget final$/;"	c	file:
final	Lua/Background.cpp	/^class BackgroundLua final$/;"	c	file:
final	Lua/InputEvent.cpp	/^class LuaInputEvent final {$/;"	c	file:
final	Lua/Timer.cpp	/^class LuaTimer final {$/;"	c	file:
final	MapWindow/MapWindowGlideRange.cpp	/^class TriangleCompound final : public FlatTriangleFanVisitor {$/;"	c	file:
final	MapWindow/OverlayBitmap.hpp	/^class MapOverlayBitmap final : public MapOverlay {$/;"	c
final	MergeThread.hpp	/^class MergeThread final : public WorkerThread {$/;"	c
final	Monitor/AirspaceWarningMonitor.cpp	/^class AirspaceWarningWidget final$/;"	c	file:
final	Monitor/AllMonitors.hpp	/^class AllMonitors final : NullBlackboardListener, RateLimiter {$/;"	c
final	Monitor/MatTaskMonitor.cpp	/^class MatTaskAddWidget final$/;"	c	file:
final	Monitor/TaskAdvanceMonitor.cpp	/^class TaskAdvanceWidget final$/;"	c	file:
final	Net/HTTP/DownloadManager.cpp	/^class DownloadManagerThread final$/;"	c	file:
final	Net/HTTP/ToBuffer.cpp	/^class DownloadToBufferHandler final : public Net::ResponseHandler {$/;"	c	file:
final	Net/HTTP/ToFile.cpp	/^class DownloadToFileHandler final : public Net::ResponseHandler {$/;"	c	file:
final	Renderer/AirspaceRendererGL.cpp	/^class AirspaceFillRenderer final$/;"	c	file:
final	Renderer/AirspaceRendererGL.cpp	/^class AirspaceVisitorRenderer final$/;"	c	file:
final	Renderer/AirspaceRendererOther.cpp	/^class AirspaceOutlineRenderer final$/;"	c	file:
final	Renderer/AirspaceRendererOther.cpp	/^class AirspaceVisitorMap final$/;"	c	file:
final	Renderer/WaypointRenderer.cpp	/^class WaypointVisitorMap final$/;"	c	file:
final	Replay/Replay.hpp	/^class Replay final$/;"	c
final	Screen/Bitmap.hpp	/^class Bitmap final$/;"	c
final	Screen/RawBitmap.hpp	/^class RawBitmap final$/;"	c
final	Terrain/Thread.hpp	/^class TerrainThread final : private StandbyThread {$/;"	c
final	Topography/Thread.hpp	/^class TopographyThread final : private StandbyThread {$/;"	c
final	Topography/TopographyFileRenderer.hpp	/^class TopographyFileRenderer final$/;"	c
final	Tracking/TrackingGlue.hpp	/^class TrackingGlue final$/;"	c
final	Util/IterableSplitString.hxx	/^	class Iterator final {$/;"	c	class:BasicIterableSplitString
final	Waypoint/WaypointListBuilder.hpp	/^class WaypointListBuilder final : public WaypointVisitor {$/;"	c
final	Waypoint/WaypointReaderCompeGPS.hpp	/^class WaypointReaderCompeGPS final : public WaypointReaderBase {$/;"	c
final	Waypoint/WaypointReaderFS.hpp	/^class WaypointReaderFS final : public WaypointReaderBase {$/;"	c
final	Waypoint/WaypointReaderOzi.hpp	/^class WaypointReaderOzi final : public WaypointReaderBase {$/;"	c
final	Waypoint/WaypointReaderSeeYou.hpp	/^class WaypointReaderSeeYou final : public WaypointReaderBase {$/;"	c
final	Waypoint/WaypointReaderWinPilot.hpp	/^class WaypointReaderWinPilot final : public WaypointReaderBase {$/;"	c
final	Waypoint/WaypointReaderZander.hpp	/^class WaypointReaderZander final : public WaypointReaderBase {$/;"	c
final	Widget/CreateWindowWidget.hpp	/^class CreateWindowWidget final : public WindowWidget {$/;"	c
final	Widget/ViewImageWidget.cpp	/^class ViewImageWindow final : public PaintWindow {$/;"	c	file:
final	XML/DataNodeXML.hpp	/^class ConstDataNodeXML final : public ConstDataNode {$/;"	c
final	XML/DataNodeXML.hpp	/^class WritableDataNodeXML final : public WritableDataNode {$/;"	c
final_glide_bar	Look/Look.hpp	/^  FinalGlideBarLook final_glide_bar;$/;"	m	struct:Look
final_glide_bar_display_mode	MapSettings.hpp	/^  FinalGlideBarDisplayMode final_glide_bar_display_mode;$/;"	m	struct:MapSettings
final_glide_bar_display_mode_list	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^static constexpr StaticEnumChoice final_glide_bar_display_mode_list[] = {$/;"	v	file:
final_glide_bar_mc0_enabled	MapSettings.hpp	/^  bool final_glide_bar_mc0_enabled;$/;"	m	struct:MapSettings
final_glide_bar_renderer	MapWindow/GlueMapWindow.hpp	/^  FinalGlideBarRenderer final_glide_bar_renderer;$/;"	m	class:GlueMapWindow
final_glide_look	Renderer/MapItemListRenderer.hpp	/^  const FinalGlideBarLook &final_glide_look;$/;"	m	class:MapItemListRenderer
final_glide_mode_icon	Look/MapLook.hpp	/^  MaskedIcon cruise_mode_icon, climb_mode_icon, final_glide_mode_icon, abort_mode_icon;$/;"	m	struct:MapLook
final_glide_terrain	Computer/Settings.hpp	/^  } final_glide_terrain;$/;"	m	struct:FeaturesSettings	typeref:class:FeaturesSettings::FinalGlideTerrain
final_path	IO/FileTransaction.hpp	/^  AllocatedPath final_path;$/;"	m	class:FileTransaction
find	Device/SettingsMap.hpp	/^  const_iterator find(const K &key) const {$/;"	f	class:DeviceSettingsMap
findEvent	Input/InputLookup.cpp	/^InputEvents::findEvent(const TCHAR *data)$/;"	f	class:InputEvents
findGCE	Input/InputLookup.cpp	/^InputEvents::findGCE(const TCHAR *data)$/;"	f	class:InputEvents
findNE	Input/InputLookup.cpp	/^InputEvents::findNE(const TCHAR *data)$/;"	f	class:InputEvents
find_best_start	Engine/Task/Ordered/Points/StartPoint.cpp	/^StartPoint::find_best_start(const AircraftState &state,$/;"	f	class:StartPoint
find_min	Math/ZeroFinder.cpp	/^ZeroFinder::find_min(const double xstart)$/;"	f	class:ZeroFinder
find_min_actual	Math/ZeroFinder.cpp	/^ZeroFinder::find_min_actual(const double xstart)$/;"	f	class:ZeroFinder
find_resource_name	Screen/Android/Bitmap.cpp	/^find_resource_name(unsigned id)$/;"	f	file:
find_zero	Math/ZeroFinder.cpp	/^ZeroFinder::find_zero(const double xstart)$/;"	f	class:ZeroFinder
find_zero_actual	Math/ZeroFinder.cpp	/^ZeroFinder::find_zero_actual(const double xstart)$/;"	f	class:ZeroFinder
fine	Form/DataField/Angle.hpp	/^  bool fine;$/;"	m	class:final
fine_pen_width_scale	Screen/Layout.cpp	/^  unsigned fine_pen_width_scale = 1024;$/;"	m	namespace:Layout	file:
finish	Device/Driver/IMI/Protocol/Types.hpp	/^    FlightFinish finish;$/;"	m	struct:IMI::Flight
finish	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC finish;$/;"	m	struct:IMI::FlightInfo
finish	Device/Driver/Volkslogger/grecord.cpp	/^void GRECORD::finish(void) {$/;"	f	class:GRECORD
finish	IGC/IGCExtensions.hpp	/^  uint16_t start, finish;$/;"	m	struct:IGCExtension
finish_alt_diff	Engine/Contest/Solvers/AbstractContest.cpp	/^   finish_alt_diff(_finish_alt_diff)$/;"	f
finish_alt_diff	Engine/Contest/Solvers/AbstractContest.hpp	/^  const unsigned finish_alt_diff;$/;"	m	class:AbstractContest
finish_constraints	Engine/Task/Ordered/Settings.hpp	/^  FinishConstraints finish_constraints;$/;"	m	struct:OrderedTaskSettings
finish_point	Engine/Waypoint/Waypoint.hpp	/^    bool finish_point:1;$/;"	m	struct:Waypoint::Flags
finish_radius	Engine/Task/TaskBehaviour.hpp	/^  double finish_radius;$/;"	m	struct:SectorDefaults
finish_type	Engine/Task/TaskBehaviour.hpp	/^  TaskPointFactoryType finish_type;$/;"	m	struct:SectorDefaults
finish_types	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet finish_types;$/;"	m	class:AbstractTaskFactory
finished	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  bool finished;$/;"	m	class:ContestDijkstra
finishpoint	Device/Driver/Volkslogger/vlapi2.h	/^      DCLWPT finishpoint;$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
fir	Gauge/FlarmTrafficWindow.hpp	/^  FastIntegerRotation fir;$/;"	m	class:FlarmTrafficWindow
first	Engine/Contest/Solvers/TriangleContest.hpp	/^      :CandidateSet(TurnPointRange{parent, first, last}) {}$/;"	m	struct:TriangleContest::CandidateSet
first	Engine/Route/RouteLink.hpp	/^  RoutePoint first;$/;"	m	struct:RouteLinkBase
first	InfoBoxes/InfoBoxManager.cpp	/^  static bool first;$/;"	m	namespace:InfoBoxManager	file:
first	JSON/Writer.hpp	/^    bool first;$/;"	m	class:JSON::ArrayWriter
first	JSON/Writer.hpp	/^    bool first;$/;"	m	class:JSON::ObjectWriter
first	Terrain/jasper/jas_icc.h	/^	struct jas_icctagtabent_s *first;$/;"	m	struct:jas_icctagtabent_s	typeref:struct:jas_icctagtabent_s::jas_icctagtabent_s
first	Topography/TopographyFile.hpp	/^  const ShapeList *first;$/;"	m	class:TopographyFile
first	Waypoint/WaypointReaderSeeYou.hpp	/^  bool first = true;$/;"	m	class:final
first	Waypoint/WaypointReaderWinPilot.hpp	/^  bool first = true;$/;"	m	class:final
first	Widget/TwoWidgets.hpp	/^  Widget *first, *second;$/;"	m	class:TwoWidgets
first1x	Screen/Memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first1y	Screen/Memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first2x	Screen/Memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first2y	Screen/Memory/Murphy.hpp	/^  int first1x, first1y, first2x, first2y;$/;"	m	struct:MurphyIterator
first_argument_type	Screen/Memory/PixelOperations.hpp	/^  typedef color_type first_argument_type;$/;"	t	struct:PixelIntegerAdapter
first_finish_candidate	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  unsigned first_finish_candidate;$/;"	m	class:ContestDijkstra
first_font	Renderer/TwoTextRowsRenderer.hpp	/^  const Font *first_font, *second_font;$/;"	m	class:TwoTextRowsRenderer
first_page_index	Form/TabMenuDisplay.hpp	/^    unsigned first_page_index;$/;"	m	struct:final::MainMenuButton
first_y	Renderer/TwoTextRowsRenderer.hpp	/^  int x, first_y, second_y;$/;"	m	class:TwoTextRowsRenderer
firstpassno	Terrain/jasper/jpc/jpc_dec.h	/^	int firstpassno;$/;"	m	struct:__anon145
firsttime	Device/Driver/Volkslogger/vlconv.h	/^	BrokenDateTime firsttime; \/\/ time of first fix$/;"	m	struct:DIRENTRY
fix	IGC/IGCWriter.hpp	/^  IGCFix fix;$/;"	m	class:IGCWriter
fixB1	Device/Driver/IMI/Protocol/IGC.cpp	/^static IMI::FixB fixB1 = {0};$/;"	v	file:
fixB2	Device/Driver/IMI/Protocol/IGC.cpp	/^static IMI::FixB fixB2 = {0};$/;"	v	file:
fixBLastFull	Device/Driver/IMI/Protocol/IGC.cpp	/^static IMI::FixB fixBLastFull = {0};$/;"	v	file:
fix_accuracy	Device/Driver/LX/LXN.hpp	/^    uint8_t fix_accuracy;$/;"	m	struct:LXN::FlightInfo
fix_quality	Logger/LoggerImpl.hpp	/^    FixQuality fix_quality;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
fix_quality	NMEA/GPSState.hpp	/^  FixQuality fix_quality;$/;"	m	struct:GPSState
fix_quality_available	NMEA/GPSState.hpp	/^  Validity fix_quality_available;$/;"	m	struct:GPSState
fix_stat	Device/Driver/LX/Convert.cpp	/^  char fix_stat;$/;"	m	struct:Context	file:
fixed_scale	Geo/Flat/FlatProjection.cpp	/^static constexpr int fixed_scale = 57296;$/;"	v	file:
fixes	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fixes;$/;"	m	struct:IMI::FlightFinish
fixes2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fixes2;$/;"	m	struct:IMI::FlightFinish
flags	Device/Driver.hpp	/^  unsigned int flags;$/;"	m	struct:DeviceRegister
flags	Dialogs/Device/DeviceListDialog.cpp	/^    Flags flags;$/;"	m	union:final::Item	file:
flags	Engine/Waypoint/Waypoint.hpp	/^  Flags flags;$/;"	m	struct:Waypoint
flags	Screen/FB/mxcfb.h	/^	int flags;$/;"	m	struct:mxcfb_update_data
flags	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t flags; \/* profile flags *\/$/;"	m	struct:__anon189
flags	Terrain/jasper/jas_stream.h	/^	int flags;$/;"	m	struct:__anon121
flags	Terrain/jasper/jp2/jp2_cod.h	/^	int flags;$/;"	m	struct:jp2_boxinfo_s
flags	Terrain/jasper/jpc/jpc_dec.h	/^	int flags;$/;"	m	struct:__anon142
flags	Terrain/jasper/jpc/jpc_dec.h	/^	int flags;$/;"	m	struct:__anon143
flags	Terrain/jasper/jpc/jpc_dec.h	/^	jas_matrix_t *flags;$/;"	m	struct:__anon145
flags	Topography/shapelib/mapserver.h	/^    int flags;$/;"	m	struct:__anon35
flags	Topography/shapelib/maptree.h	/^    char  flags[3];$/;"	m	struct:__anon88
flags	Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::ACKPacket
flags	Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::FixPacket
flags	Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::ThermalRequestPacket
flags	Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
flags	Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
flags	Tracking/SkyLines/Protocol.hpp	/^  uint32_t flags;$/;"	m	struct:SkyLinesTracking::WaveRequestPacket
flags_	Terrain/jasper/jas_seq.h	/^	int flags_;$/;"	m	struct:jas_matrix
flags_	Terrain/jasper/jas_stream.h	/^	int flags_;$/;"	m	struct:__anon120
flags_	Terrain/jasper/jpc/jpc_bs.h	/^	int flags_;$/;"	m	struct:__anon129
flap_position	NMEA/SwitchState.hpp	/^  FlapPosition flap_position;$/;"	m	struct:SwitchState
flap_position_list	Dialogs/Device/Vega/SwitchesDialog.cpp	/^static constexpr StaticEnumChoice flap_position_list[] = {$/;"	v	file:
flarm	Device/RecordedFlight.hpp	/^    uint8_t flarm;$/;"	m	union:RecordedFlightInfo::__anon197
flarm	NMEA/Info.hpp	/^  FlarmData flarm;$/;"	m	struct:NMEAInfo
flarm_aircraft_types	Dialogs/Device/Vega/FlarmIdentificationParameters.hpp	/^static constexpr StaticEnumChoice flarm_aircraft_types[] = {$/;"	v
flarm_alert_parameters	Dialogs/Device/Vega/FlarmAlertParameters.hpp	/^VegaParametersWidget::StaticParameter flarm_alert_parameters[] = {$/;"	v
flarm_calculations	FLARM/FlarmComputer.hpp	/^  FlarmCalculations flarm_calculations;$/;"	m	class:FlarmComputer
flarm_colors	FLARM/TrafficDatabases.hpp	/^  FlarmColorDatabase flarm_colors;$/;"	m	struct:TrafficDatabases
flarm_computer	MergeThread.hpp	/^  FlarmComputer flarm_computer;$/;"	m	class:final
flarm_dialog	Look/Look.hpp	/^  FlarmTrafficLook flarm_dialog;$/;"	m	struct:Look
flarm_display_location_list	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice flarm_display_location_list[] = {$/;"	v	file:
flarm_driver	Device/Driver/FLARM/Register.cpp	/^const struct DeviceRegister flarm_driver = {$/;"	v	typeref:struct:DeviceRegister
flarm_gauge	Look/Look.hpp	/^  FlarmTrafficLook flarm_gauge;$/;"	m	struct:Look
flarm_id_parameters	Dialogs/Device/Vega/FlarmIdentificationParameters.hpp	/^VegaParametersWidget::StaticParameter flarm_id_parameters[] = {$/;"	v
flarm_names	FLARM/TrafficDatabases.hpp	/^  FlarmNameDatabase flarm_names;$/;"	m	struct:TrafficDatabases
flarm_net	FLARM/TrafficDatabases.hpp	/^  FlarmNetDatabase flarm_net;$/;"	m	struct:TrafficDatabases
flarm_repeat_parameters	Dialogs/Device/Vega/FlarmRepeatParameters.hpp	/^VegaParametersWidget::StaticParameter flarm_repeat_parameters[] = {$/;"	v
flarm_setting_names	Dialogs/Device/FLARM/ConfigWidget.cpp	/^static const char *const flarm_setting_names[] = {$/;"	v	file:
flarm_teammate_code	NMEA/Derived.hpp	/^  TeamCode flarm_teammate_code;$/;"	m	struct:TeamInfo
flarm_teammate_code_current	NMEA/Derived.hpp	/^  bool flarm_teammate_code_current;$/;"	m	struct:TeamInfo
flarm_user_interfaces	Dialogs/Device/Vega/FlarmAlertParameters.hpp	/^static constexpr StaticEnumChoice flarm_user_interfaces[] = {$/;"	v
flash	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE flash;$/;"	m	struct:IMI::TDeviceInfo
flashSize	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD flashSize;$/;"	m	struct:IMI::TDeviceInfo
flat_bb	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  FlatBoundingBox flat_bb;$/;"	m	class:OrderedTaskPoint
flat_event_map	Input/InputDefaults.cpp	/^struct flat_event_map {$/;"	s	file:
flat_gesture_map	Input/InputDefaults.cpp	/^struct flat_gesture_map {$/;"	s	file:
flat_label	Input/InputDefaults.cpp	/^struct flat_label {$/;"	s	file:
flat_location	Engine/Waypoint/Waypoint.hpp	/^  FlatGeoPoint flat_location;$/;"	m	struct:Waypoint
flat_location	Geo/SearchPoint.hpp	/^  FlatGeoPoint flat_location;$/;"	m	class:SearchPoint
flat_location_initialised	Engine/Waypoint/Waypoint.hpp	/^  bool flat_location_initialised;$/;"	m	struct:Waypoint
flat_projection	MapWindow/MapWindowGlideRange.cpp	/^  const FlatProjection flat_projection;$/;"	m	class:final	file:
flat_projection	Renderer/TaskPointRenderer.hpp	/^  const FlatProjection &flat_projection;$/;"	m	class:TaskPointRenderer
flavour	Input/InputEvents.cpp	/^  static const TCHAR *flavour;$/;"	m	namespace:InputEvents	file:
flight	IGC/IGCHeader.hpp	/^  unsigned flight;$/;"	m	struct:IGCHeader
flight	Logger/ExternalLogger.cpp	/^  const RecordedFlightInfo &flight;$/;"	m	class:DownloadFlightJob	file:
flight	NMEA/Derived.hpp	/^  FlyingState flight;$/;"	m	struct:DerivedInfo
flightNumber	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD flightNumber;$/;"	m	struct:IMI::TDeclarationHeader
flightOfDay	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD flightOfDay;$/;"	m	struct:IMI::FlightInfo
flightOfDay	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD flightOfDay;$/;"	m	struct:IMI::TDeclarationHeader
flightStartDateTime	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC flightStartDateTime;$/;"	m	struct:IMI::TDeclarationHeader
flightStopDateTime	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC flightStopDateTime;$/;"	m	struct:IMI::FlightFinish
flight_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *reconnect_button, *flight_button;$/;"	m	class:final	file:
flight_date	IGC/IGCDeclaration.hpp	/^  BrokenDate flight_date;$/;"	m	struct:IGCDeclarationHeader
flight_info	Device/Driver/LX/Convert.cpp	/^  LXN::FlightInfo flight_info;$/;"	m	struct:Context	file:
flight_info	Device/Driver/LX/LXN.hpp	/^    const struct FlightInfo *flight_info;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::FlightInfo
flight_level	Engine/Airspace/AirspaceAltitude.hpp	/^  double flight_level;$/;"	m	struct:AirspaceAltitude
flight_list	Logger/ExternalLogger.cpp	/^  RecordedFlightList &flight_list;$/;"	m	class:ReadFlightListJob	file:
flight_logger	Components.cpp	/^GlueFlightLogger *flight_logger;$/;"	v
flight_mode	NMEA/SwitchState.hpp	/^  FlightMode flight_mode;$/;"	m	struct:SwitchState
flight_mode_final_glide	Engine/Task/Stats/TaskStats.hpp	/^  bool flight_mode_final_glide;$/;"	m	class:TaskStats
flight_mode_height_margin	Engine/Task/Stats/TaskStats.cpp	/^static constexpr int flight_mode_height_margin = 120;$/;"	v	file:
flight_no	Device/Driver/LX/Convert.cpp	/^  uint8_t flight_no;$/;"	m	struct:Context	file:
flight_no	Device/Driver/LX/LXN.hpp	/^    uint8_t flight_no;$/;"	m	struct:LXN::Start
flight_no	Device/Driver/LX/Protocol.hpp	/^    uint8_t flight_no; \/* ? *\/$/;"	m	struct:LX::FlightInfo
flight_no	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t flight_no; \/* ? *\/$/;"	m	struct:LXEra::FlightInfo
flight_time	NMEA/FlyingState.hpp	/^  double flight_time;$/;"	m	struct:FlyingState
flightinfo	Device/Driver/Volkslogger/vlapi2.h	/^    } flightinfo;$/;"	m	struct:VLAPI_DATA::DECLARATION	typeref:struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
flights	Renderer/FlightListRenderer.hpp	/^  OverwritingRingBuffer<FlightInfo, 128u> flights;$/;"	m	class:FlightListRenderer
flightstats	Computer/StatsComputer.hpp	/^  FlightStatistics flightstats;$/;"	m	class:StatsComputer
flipped	Screen/Bitmap.hpp	/^  bool flipped = false;$/;"	m	class:final
flipped	Screen/Custom/UncompressedImage.hpp	/^  bool flipped;$/;"	m	class:UncompressedImage
flipped	Screen/OpenGL/Texture.hpp	/^  bool flipped;$/;"	m	class:GLTexture
floor_alt	Replay/TaskAccessor.hpp	/^  const double floor_alt;$/;"	m	class:TaskAccessor
flushRecord	Topography/shapelib/mapxbase.c	/^static void flushRecord( DBFHandle psDBF )$/;"	f	file:
fly_bitmap	Dialogs/SimulatorPromptWindow.hpp	/^  Bitmap fly_bitmap, sim_bitmap;$/;"	m	class:final
fly_button	Dialogs/SimulatorPromptWindow.hpp	/^  Button fly_button, sim_button;$/;"	m	class:final
flying	Engine/Navigation/Aircraft.hpp	/^  bool flying;$/;"	m	struct:AircraftState
flying	NMEA/FlyingState.hpp	/^  bool flying;$/;"	m	struct:FlyingState
flying	Tracking/TrackingGlue.hpp	/^  bool flying = false, last_flying;$/;"	m	class:final
flying_computer	Computer/GlideComputerAirData.hpp	/^  FlyingComputer flying_computer;$/;"	m	class:GlideComputerAirData
flymaster_f1_driver	Device/Driver/FlymasterF1.cpp	/^const struct DeviceRegister flymaster_f1_driver = {$/;"	v	typeref:struct:DeviceRegister
flynet_driver	Device/Driver/FlyNet.cpp	/^const struct DeviceRegister flynet_driver = {$/;"	v	typeref:struct:DeviceRegister
flytec	Device/RecordedFlight.hpp	/^    unsigned flytec;$/;"	m	union:RecordedFlightInfo::__anon197
flytec_driver	Device/Driver/Flytec/Register.cpp	/^const struct DeviceRegister flytec_driver = {$/;"	v	typeref:struct:DeviceRegister
fn	Lua/Util.hxx	/^	lua_CFunction fn;$/;"	m	struct:Lua::StackIndex::LightUserData::CClosure
focus_background_brush	Look/CheckBoxLook.hpp	/^  Brush focus_background_brush;$/;"	m	struct:CheckBoxLook
focused	Look/ButtonLook.hpp	/^  } standard, focused;$/;"	m	struct:ButtonLook	typeref:struct:ButtonLook::StateLook
focused	Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
focused	Look/DialogLook.hpp	/^    } focused;$/;"	m	struct:DialogLook::__anon20	typeref:struct:DialogLook::__anon20::__anon22
focused	Look/DialogLook.hpp	/^  } focused;$/;"	m	struct:DialogLook	typeref:struct:DialogLook::__anon19
focused	Screen/Window.hpp	/^  bool focused = false;$/;"	m	class:Window
focused_background_color	Look/InfoBoxLook.hpp	/^  Color background_color, focused_background_color, pressed_background_color;$/;"	m	struct:InfoBoxLook
follow_labels	Topography/shapelib/mapserver.h	/^    textSymbolObj **follow_labels;$/;"	m	struct:label_follow_result
follow_mode	MapWindow/MapWindow.hpp	/^  FollowMode follow_mode = FOLLOW_SELF;$/;"	m	class:MapWindow
font	Gauge/LogoView.hpp	/^  Font font;$/;"	m	class:LogoView
font	Look/ButtonLook.hpp	/^  const Font *font;$/;"	m	struct:ButtonLook
font	Look/CheckBoxLook.hpp	/^  const Font *font;$/;"	m	struct:CheckBoxLook
font	Look/DialogLook.hpp	/^    const Font *font, *font_bold;$/;"	m	struct:DialogLook::__anon20
font	Look/DialogLook.hpp	/^    const Font *font;$/;"	m	struct:DialogLook::__anon18
font	Look/FinalGlideBarLook.hpp	/^  const Font *font;$/;"	m	struct:FinalGlideBarLook
font	Look/TerminalLook.hpp	/^  Font font;$/;"	m	struct:TerminalLook
font	Look/TrafficLook.hpp	/^  const Font *font;$/;"	m	struct:TrafficLook
font	Look/VarioBarLook.hpp	/^  const Font *font;$/;"	m	struct:VarioBarLook
font	Look/WaypointLook.hpp	/^  const Font *font, *bold_font;$/;"	m	struct:WaypointLook
font	Look/WindArrowLook.hpp	/^  const Font *font;$/;"	m	struct:WindArrowLook
font	ProgressWindow.hpp	/^  Font font;$/;"	m	class:ProgressWindow
font	Renderer/FlightListRenderer.hpp	/^  const Font &font, &header_font;$/;"	m	class:FlightListRenderer
font	Screen/Custom/Cache.cpp	/^  const Font *font;$/;"	m	struct:TextCacheKey	file:
font	Screen/LargeTextWindow.hpp	/^  const Font *font = nullptr;$/;"	m	class:LargeTextWindow
font	Screen/Memory/Canvas.hpp	/^  const Font *font = nullptr;$/;"	m	class:Canvas
font	Screen/OpenGL/Canvas.hpp	/^  const Font *font = nullptr;$/;"	m	class:Canvas
font	Topography/shapelib/mapserver.h	/^    char *font;$/;"	m	struct:labelObj
fontMetrics	Topography/shapelib/mapserver.h	/^  } fontMetrics;$/;"	t	typeref:struct:__anon72
fontSetObj	Topography/shapelib/mapserver.h	/^  } fontSetObj;$/;"	t	typeref:struct:__anon31
font_bold	Look/DialogLook.hpp	/^    const Font *font, *font_bold;$/;"	m	struct:DialogLook::__anon20
font_height	Dialogs/Device/DeviceListDialog.cpp	/^  unsigned font_height;$/;"	m	class:final	file:
font_height	Dialogs/DownloadFilePicker.cpp	/^  unsigned font_height;$/;"	m	class:final	file:
font_path	Screen/FreeType/Font.cpp	/^static AllocatedPath font_path = nullptr;$/;"	v	file:
font_scale	Screen/Layout.cpp	/^  unsigned font_scale = 1024;$/;"	m	namespace:Layout	file:
font_search_paths	Screen/Custom/Files.cpp	/^static const char *const font_search_paths[] = {$/;"	v	file:
fonts	Topography/shapelib/mapserver.h	/^    char* fonts[MS_MAX_LABEL_FONTS];$/;"	m	struct:__anon71
fonts	Topography/shapelib/mapserver.h	/^    hashTableObj fonts;$/;"	m	struct:__anon31
fontset	Topography/shapelib/mapserver.h	/^    fontSetObj *fontset; \/* a pointer to the main mapObj version *\/$/;"	m	struct:__anon52
fontset	Topography/shapelib/mapserver.h	/^    fontSetObj fontset;$/;"	m	struct:mapObj
foo	Device/Driver/LX/LXN.hpp	/^    char foo[22];$/;"	m	struct:LXN::SecurityOld
foo	Device/Driver/LX/LXN.hpp	/^    char foo[9];$/;"	m	struct:LXN::Event
foo	Device/Driver/LX/LXN.hpp	/^    uint8_t foo;$/;"	m	struct:LXN::KExt
foo	Device/Driver/LX/LXN.hpp	/^    uint8_t foo[64];$/;"	m	struct:LXN::Security
footer	Topography/shapelib/mapserver.h	/^    char *header, *footer; \/* only used with multi result queries *\/$/;"	m	struct:layerObj
footer	Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon38
footer	Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon42
force	CalculationThread.hpp	/^  bool force;$/;"	m	class:final
force	Form/Form.hpp	/^  bool force = false;$/;"	m	class:WndForm
force	Topography/shapelib/mapserver.h	/^    int force; \/* labels *must* be drawn *\/$/;"	m	struct:labelObj
force_current	Engine/Task/Solvers/TaskMinTarget.hpp	/^  bool force_current;$/;"	m	class:final
force_display_mode	UIState.hpp	/^  DisplayMode force_display_mode;$/;"	m	struct:UIState
force_draw_selector	InfoBoxes/InfoBoxWindow.hpp	/^  bool force_draw_selector = false;$/;"	m	class:InfoBoxWindow
force_full_update	Engine/Task/AbstractTask.hpp	/^  bool force_full_update;$/;"	m	class:AbstractTask
force_shutdown	UIActions.cpp	/^static bool force_shutdown = false;$/;"	v	file:
force_traffic_gauge	MainWindow.hpp	/^  bool suppress_traffic_gauge = false, force_traffic_gauge = false;$/;"	m	class:MainWindow
forced_x_dpi	Hardware/DisplayDPI.cpp	/^  static unsigned forced_x_dpi = 0;$/;"	v	file:
forced_y_dpi	Hardware/DisplayDPI.cpp	/^  static unsigned forced_y_dpi = 0;$/;"	v	file:
forecast_temperature	Computer/Settings.hpp	/^  Temperature forecast_temperature;$/;"	m	struct:ComputerSettings
foreground_brush	Look/ButtonLook.hpp	/^    Brush foreground_brush;$/;"	m	struct:ButtonLook::StateLook
foreground_color	Look/ButtonLook.hpp	/^    Color foreground_color;$/;"	m	struct:ButtonLook::StateLook
form	Dialogs/JobDialog.cpp	/^  WndForm &form;$/;"	m	class:DialogJobThread	file:
form	Dialogs/Plane/PlaneListDialog.cpp	/^  WndForm *form;$/;"	m	class:final	file:
form	Dialogs/ProfileListDialog.cpp	/^  WndForm *form;$/;"	m	class:final	file:
form	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect form;$/;"	m	struct:final::Layout	file:
form	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  WndForm *const form;$/;"	m	class:final
format	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const TCHAR *format;$/;"	m	struct:VegaParametersWidget::StaticParameter
format	Form/DataField/GeoPoint.hpp	/^  const CoordinateFormat format;$/;"	m	class:final
format	Screen/Custom/UncompressedImage.hpp	/^  Format format;$/;"	m	class:UncompressedImage
format	Topography/shapelib/mapserver.h	/^    outputFormatObj *format;$/;"	m	struct:imageObj
format	UISettings.hpp	/^  FormatSettings format;$/;"	m	struct:UISettings
format	Widget/OffsetButtonsWidget.hpp	/^  const TCHAR *const format;$/;"	m	class:OffsetButtonsWidget
format_buffer	IO/TextWriter.hpp	/^  ReusableArray<TCHAR> format_buffer;$/;"	m	class:TextWriter
format_revision	Language/MOFile.hpp	/^    uint32_t format_revision;$/;"	m	struct:MOFile::mo_header
formatoptions	Topography/shapelib/mapserver.h	/^    char **formatoptions;$/;"	m	struct:__anon39
found	Engine/Airspace/AirspaceWarningManager.cpp	/^  bool found;$/;"	m	class:final	file:
fp	Topography/shapelib/maperror.h	/^    FILE        *fp;$/;"	m	struct:debug_info_obj
fp	Topography/shapelib/mapshape.h	/^    struct zzip_file  *fp;$/;"	m	struct:__anon83	typeref:struct:__anon83::zzip_file
fp	Topography/shapelib/maptree.h	/^    struct zzip_file        *fp;$/;"	m	struct:__anon88	typeref:struct:__anon88::zzip_file
fp	zzip/lib.h	/^        struct zzip_file * volatile fp;  $/;"	m	struct:zzip_dir::__anon212
fpSHP	Topography/shapelib/mapshape.h	/^    struct zzip_file  *fpSHP;$/;"	m	struct:__anon82	typeref:struct:__anon82::zzip_file
fpSHX	Topography/shapelib/mapshape.h	/^    struct zzip_file  *fpSHX;$/;"	m	struct:__anon82	typeref:struct:__anon82::zzip_file
fr	Gauge/FlarmTrafficWindow.hpp	/^  FastRotation fr;$/;"	m	class:FlarmTrafficWindow
frame_buffer	Screen/OpenGL/BufferCanvas.hpp	/^  GLFrameBuffer *frame_buffer = nullptr;$/;"	m	class:DisplayOrientation
frame_buffer_object	Screen/OpenGL/Globals.cpp	/^  bool frame_buffer_object;$/;"	m	namespace:OpenGL	file:
frame_renderer	Renderer/ColorButtonRenderer.hpp	/^  ButtonFrameRenderer frame_renderer;$/;"	m	class:ColorButtonRenderer
frame_renderer	Renderer/SymbolButtonRenderer.hpp	/^  ButtonFrameRenderer frame_renderer;$/;"	m	class:SymbolButtonRenderer
frame_renderer	Renderer/TextButtonRenderer.hpp	/^  ButtonFrameRenderer frame_renderer;$/;"	m	class:TextButtonRenderer
frame_sync	Screen/Custom/TopCanvas.hpp	/^  bool frame_sync = false;$/;"	m	class:DisplayOrientation
frecord	Logger/LoggerImpl.hpp	/^  LoggerFRecord frecord;$/;"	m	class:LoggerImpl
freeImage	Topography/shapelib/mapserver.h	/^    int (*freeImage)(imageObj *image);$/;"	m	struct:rendererVTableObj
freeSymbol	Topography/shapelib/mapserver.h	/^    int (*freeSymbol)(symbolObj *symbol);$/;"	m	struct:rendererVTableObj
freetype_mutex	Screen/FreeType/Font.cpp	/^static Mutex freetype_mutex;$/;"	v	file:
frequency	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(8)> frequency;$/;"	m	struct:FlarmNetRecord
friday	Engine/Airspace/AirspaceActivity.hpp	/^    bool friday:1;$/;"	m	struct:AirspaceActivity::Days
from	Event/Poll/Linux/Translate.hpp	/^  unsigned from, to;$/;"	m	struct:__anon7
from	Topography/shapelib/mapserver.h	/^    char *from, *to; \/* item names *\/$/;"	m	struct:__anon38
front	Engine/Trace/Trace.hpp	/^  const TracePoint &front() const {$/;"	f	class:Trace
front	Util/StringParser.hxx	/^	value_type front() const {$/;"	f	class:StringParser
front	Util/TrivialArray.hxx	/^	T &front() {$/;"	f	class:TrivialArray
front	Util/TrivialArray.hxx	/^	const T &front() const {$/;"	f	class:TrivialArray
fs_renderer	Dialogs/dlgAnalysis.cpp	/^  FlightStatisticsRenderer fs_renderer;$/;"	m	class:ChartControl	file:
ft_library	Screen/FreeType/Init.cpp	/^static FT_Library ft_library;$/;"	v	file:
ftp_credentials	Weather/PCMet/Settings.hpp	/^  Credentials ftp_credentials;$/;"	m	struct:PCMetSettings
ftyp	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_ftyp_t ftyp;$/;"	m	union:__anon117::__anon118
full	Computer/TraceComputer.hpp	/^  Trace full, contest, sprint;$/;"	m	class:TraceComputer
full	Dialogs/WidgetDialog.hpp	/^  bool full;$/;"	m	class:WidgetDialog
full	MapWindow/MapWindowGlideRange.cpp	/^  bool full() const {$/;"	f	struct:ProjectedFans
full	Util/StaticString.hxx	/^	bool full() const {$/;"	f	class:StaticStringBase
full	Util/TrivialArray.hxx	/^	bool full() const {$/;"	f	class:TrivialArray
full_screen	CommandLine.cpp	/^  bool full_screen = false;$/;"	m	namespace:CommandLine	file:
full_screen	CommandLine.hpp	/^  static constexpr bool full_screen = false;$/;"	m	namespace:CommandLine
full_screen	Screen/TopWindow.hpp	/^  bool full_screen = false;$/;"	m	class:DisplayOrientation
full_trace_no_thin_time	Computer/TraceComputer.cpp	/^static constexpr unsigned full_trace_no_thin_time =$/;"	v	file:
full_trace_size	Computer/TraceComputer.cpp	/^static constexpr unsigned full_trace_size =$/;"	v	file:
fullscreen	Dialogs/Task/Manager/Internal.hpp	/^  bool fullscreen;$/;"	m	class:final
function	Blackboard/ScopeCalculatedListener.hpp	/^  Function function;$/;"	m	class:ScopeCalculatedListener
function	Blackboard/ScopeGPSListener.hpp	/^  Function function;$/;"	m	class:ScopeGPSListener
function	Form/List.hpp	/^  const ListItemRendererFunction function;$/;"	m	class:FunctionListItemRenderer
fv	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fv:2;$/;"	m	struct:IMI::FixB
fx	Geo/Flat/FlatRay.hpp	/^  double fx;$/;"	m	class:FlatRay
fxa	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD fxa:10;$/;"	m	struct:IMI::FixB
fxa1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD fxa1:8;$/;"	m	struct:IMI::FixB2
fxa2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD fxa2:8;$/;"	m	struct:IMI::FixB2
fy	Geo/Flat/FlatRay.hpp	/^  double fy;$/;"	m	class:FlatRay
g	Engine/Route/AStar.hpp	/^  unsigned g;$/;"	m	struct:AStarPriorityValue
g	Screen/OpenGL/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
g	Screen/PortableColor.hpp	/^  uint8_t b, g, r;$/;"	m	class:BGR8Color
g	Screen/PortableColor.hpp	/^  uint8_t r, g, b;$/;"	m	class:RGB8Color
g_key	Logger/GRecord.cpp	/^static constexpr MD5::State g_key[GRecord::N_MD5] = {$/;"	v	file:
g_load	Engine/Navigation/Aircraft.hpp	/^  double g_load;$/;"	m	struct:AircraftState
g_load	NMEA/Acceleration.hpp	/^  double g_load;$/;"	m	struct:AccelerationState
gain	NMEA/ClimbInfo.hpp	/^  double gain;$/;"	m	struct:OneClimbInfo
galt	Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
gap	Topography/shapelib/mapserver.h	/^    double gap; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
gap	Topography/shapelib/mapserver.h	/^    double gap;$/;"	m	struct:__anon70
gaps_filled	Engine/Route/FlatTriangleFanTree.hpp	/^  bool gaps_filled;$/;"	m	class:FlatTriangleFanTree
gauge_location	Gauge/TrafficSettings.hpp	/^  } gauge_location;$/;"	m	struct:TrafficSettings	typeref:class:TrafficSettings::GaugeLocation
gauge_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage gauge_pages[] = {$/;"	v	file:
gcc_aligned	Util/Compiler.h	105;"	d
gcc_aligned	Util/Compiler.h	135;"	d
gcc_always_inline	Util/Compiler.h	110;"	d
gcc_always_inline	Util/Compiler.h	140;"	d
gcc_cold	Util/Compiler.h	147;"	d
gcc_cold	Util/Compiler.h	152;"	d
gcc_const	Util/Compiler.h	116;"	d
gcc_const	Util/Compiler.h	86;"	d
gcc_deprecated	Util/Compiler.h	117;"	d
gcc_deprecated	Util/Compiler.h	87;"	d
gcc_fallthrough	Util/Compiler.h	163;"	d
gcc_fallthrough	Util/Compiler.h	165;"	d
gcc_fallthrough	Util/Compiler.h	167;"	d
gcc_flatten	Util/Compiler.h	157;"	d
gcc_flatten	Util/Compiler.h	159;"	d
gcc_hot	Util/Compiler.h	146;"	d
gcc_hot	Util/Compiler.h	151;"	d
gcc_likely	Util/Compiler.h	102;"	d
gcc_likely	Util/Compiler.h	132;"	d
gcc_malloc	Util/Compiler.h	119;"	d
gcc_malloc	Util/Compiler.h	89;"	d
gcc_may_alias	Util/Compiler.h	118;"	d
gcc_may_alias	Util/Compiler.h	88;"	d
gcc_nonnull	Util/Compiler.h	128;"	d
gcc_nonnull	Util/Compiler.h	98;"	d
gcc_nonnull_all	Util/Compiler.h	129;"	d
gcc_nonnull_all	Util/Compiler.h	99;"	d
gcc_noreturn	Util/Compiler.h	120;"	d
gcc_noreturn	Util/Compiler.h	90;"	d
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^    } gcc_packed;$/;"	m	struct:CAI302::FileList	typeref:struct:CAI302::FileList::FileInfo
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::FileData
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::FileList
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::FileSignatureASCII
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::GeneralInfo
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::Navpoint
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::Pilot
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::PilotMeta
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::PilotMetaActive
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::Polar
gcc_packed	Device/Driver/CAI302/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:CAI302	typeref:struct:CAI302::PolarMeta
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed; \/\/ B record (id = 2)$/;"	m	namespace:IMI	typeref:struct:IMI::FixB
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed; \/\/ B2 record (id = 3)$/;"	m	namespace:IMI	typeref:struct:IMI::FixB2
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed; \/\/ Event, Satellites, Comment (id = 5)$/;"	m	namespace:IMI	typeref:struct:IMI::FixE
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::Fix
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::FixK
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::Flight
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::FlightFinish
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::FlightInfo
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::Signature
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TDeclaration
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TDeclarationHeader
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TDeviceInfo
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TMsg
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TObservationZone
gcc_packed	Device/Driver/IMI/Protocol/Types.hpp	/^  } gcc_packed;$/;"	m	namespace:IMI	typeref:struct:IMI::TWaypoint
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::BExt
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::CompetitionClass
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Date
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::End
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Event
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::ExtConfig
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::FlightInfo
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::KExt
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Origin
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Position
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Security
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Security7000
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::SecurityOld
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Serial
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Start
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::String
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Task
gcc_packed	Device/Driver/LX/LXN.hpp	/^  } gcc_packed;$/;"	m	namespace:LXN	typeref:struct:LXN::Version
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::ContestClass
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::Declaration
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::FlightInfo
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::MemoryAddress24
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::MemoryAddress32
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::MemorySection
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::Pilot
gcc_packed	Device/Driver/LX/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LX	typeref:struct:LX::SeekMemory
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::ContestClass
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::Declaration
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::FlightInfo
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::MemoryAddress24
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::MemoryAddress32
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::MemorySection
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::Pilot
gcc_packed	Device/Driver/LXERA/Protocol.hpp	/^  } gcc_packed;$/;"	m	namespace:LXEra	typeref:struct:LXEra::SeekMemory
gcc_packed	Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::DeclarationWaypoint
gcc_packed	Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::Pilot
gcc_packed	Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::Route
gcc_packed	Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::TableHeader
gcc_packed	Device/Driver/Volkslogger/Database.hpp	/^  } gcc_packed;$/;"	m	namespace:Volkslogger	typeref:struct:Volkslogger::Waypoint
gcc_packed	Util/Compiler.h	121;"	d
gcc_packed	Util/Compiler.h	91;"	d
gcc_printf	Util/Compiler.h	122;"	d
gcc_printf	Util/Compiler.h	92;"	d
gcc_pure	Util/Compiler.h	123;"	d
gcc_pure	Util/Compiler.h	93;"	d
gcc_restrict	Util/Compiler.h	172;"	d
gcc_restrict	Util/Compiler.h	175;"	d
gcc_restrict	Util/Compiler.h	178;"	d
gcc_returns_nonnull	Util/Compiler.h	100;"	d
gcc_returns_nonnull	Util/Compiler.h	130;"	d
gcc_sentinel	Util/Compiler.h	124;"	d
gcc_sentinel	Util/Compiler.h	94;"	d
gcc_unlikely	Util/Compiler.h	103;"	d
gcc_unlikely	Util/Compiler.h	133;"	d
gcc_unreachable	Util/Compiler.h	193;"	d
gcc_unreachable	Util/Compiler.h	195;"	d
gcc_unused	Util/Compiler.h	125;"	d
gcc_unused	Util/Compiler.h	95;"	d
gcc_unused_field	Util/Compiler.h	187;"	d
gcc_unused_field	Util/Compiler.h	189;"	d
gcc_visibility_default	Util/Compiler.h	108;"	d
gcc_visibility_default	Util/Compiler.h	138;"	d
gcc_visibility_hidden	Util/Compiler.h	107;"	d
gcc_visibility_hidden	Util/Compiler.h	137;"	d
gcc_warn_unused_result	Util/Compiler.h	126;"	d
gcc_warn_unused_result	Util/Compiler.h	96;"	d
gcnt	Device/Driver/Volkslogger/grecord.h	/^  int  gcnt;$/;"	m	class:GRECORD
generateLineIntersection	Topography/shapelib/mapprimitive.c	/^static pointObj generateLineIntersection(pointObj a, pointObj b, pointObj c, pointObj d)$/;"	f	file:
generic_driver	Device/Driver/Generic.cpp	/^const struct DeviceRegister generic_driver = {$/;"	v	typeref:struct:DeviceRegister
geo_location	Projection/Projection.hpp	/^  GeoPoint geo_location;$/;"	m	class:Projection
geo_points	MapWindow/MapCanvas.hpp	/^  AllocatedArray<GeoPoint> geo_points;$/;"	m	class:MapCanvas
geo_points	MapWindow/StencilMapCanvas.hpp	/^  AllocatedArray<GeoPoint> geo_points;$/;"	m	class:StencilMapCanvas
geometry	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxSettings::Geometry geometry;$/;"	m	class:final	file:
geometry	Gauge/GaugeVario.hpp	/^  } geometry;$/;"	m	class:GaugeVario	typeref:struct:GaugeVario::Geometry
geometry	Geo/Boost/GeoPoint.hpp	/^namespace geometry {$/;"	n	namespace:boost
geometry	InfoBoxes/InfoBoxLayout.hpp	/^    InfoBoxSettings::Geometry geometry;$/;"	m	struct:InfoBoxLayout::Layout
geometry	InfoBoxes/InfoBoxSettings.hpp	/^  } geometry;$/;"	m	struct:InfoBoxSettings	typeref:class:InfoBoxSettings::Geometry
geometry	Topography/shapelib/mapprimitive.h	/^  void *geometry;$/;"	m	struct:__anon79
geometry_counts	InfoBoxes/InfoBoxLayout.cpp	/^static constexpr unsigned char geometry_counts[] = {$/;"	v	file:
geotransform	Topography/shapelib/mapprimitive.h	/^  double geotransform[6];    \/* Pixel\/line to georef. *\/$/;"	m	struct:__anon81
geotransformObj	Topography/shapelib/mapprimitive.h	/^} geotransformObj;$/;"	t	typeref:struct:__anon81
gesture	Look/Look.hpp	/^  GestureLook gesture;$/;"	m	struct:Look
gesture	UIUtil/GestureManager.hpp	/^  StaticString<11> gesture;$/;"	m	class:GestureManager
gesture_look	MapWindow/GlueMapWindow.hpp	/^  const GestureLook &gesture_look;$/;"	m	class:GlueMapWindow
gesture_to_event	Input/InputEvents.cpp	/^InputEvents::gesture_to_event(const TCHAR *data)$/;"	f	class:InputEvents
gestures	Dialogs/dlgAnalysis.cpp	/^  GestureManager gestures;$/;"	m	class:ChartControl	file:
gestures	Gauge/BigThermalAssistantWindow.hpp	/^  GestureManager gestures;$/;"	m	class:BigThermalAssistantWindow
gestures	Gauge/BigTrafficWidget.cpp	/^  GestureManager gestures;$/;"	m	class:FlarmTrafficControl	file:
gestures	MainWindow.hpp	/^  GestureManager gestures;$/;"	m	class:MainWindow
gestures	MapWindow/GlueMapWindow.hpp	/^  TrackingGestureManager gestures;$/;"	m	class:GlueMapWindow
get	Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DECLARATION::get(const DBB &dbb)$/;"	f	class:VLAPI_DATA::DECLARATION
get	Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::PILOT::get(const void *p)$/;"	f	class:VLAPI_DATA::PILOT
get	Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::DCLWPT::get(const void *p) {$/;"	f	class:VLAPI_DATA::DCLWPT
get	Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::ROUTE::get(const void *p) {$/;"	f	class:VLAPI_DATA::ROUTE
get	Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::WPT::get(const void *p) {$/;"	f	class:VLAPI_DATA::WPT
get	Geo/Boost/GeoPoint.hpp	/^  static inline double get(const GeoPoint &p) {$/;"	f	struct:boost::geometry::traits::access
get	IO/ZipArchive.hpp	/^  struct zzip_dir *get() {$/;"	f	class:ZipArchive
get	Language/MOLoader.hpp	/^  const MOFile &get() const {$/;"	f	class:MOLoader
get	Util/ReusableArray.hpp	/^  T *get(size_type _length) {$/;"	f	class:ReusableArray
getAbsolutePath_method	Java/File.cxx	/^jmethodID Java::File::getAbsolutePath_method;$/;"	m	class:Java::File	file:
getAbsolutePath_method	Java/File.hxx	/^		static jmethodID getAbsolutePath_method;$/;"	m	class:Java::File
getBaudRate	Android/PortBridge.hpp	/^  int getBaudRate(JNIEnv *env) const {$/;"	f	class:PortBridge
getBaudRate_method	Android/PortBridge.cpp	/^jmethodID PortBridge::getBaudRate_method;$/;"	m	class:PortBridge	file:
getBaudRate_method	Android/PortBridge.hpp	/^  static jmethodID getBaudRate_method, setBaudRate_method;$/;"	m	class:PortBridge
getContentLength	Java/URL.hxx	/^		static int getContentLength(JNIEnv *env, jobject connection) {$/;"	f	class:Java::URLConnection
getContentLength_method	Java/URL.cxx	/^jmethodID Java::URLConnection::getContentLength_method;$/;"	m	class:Java::URLConnection	file:
getContentLength_method	Java/URL.hxx	/^		static jmethodID getContentLength_method;$/;"	m	class:Java::URLConnection
getDeviceIndex	Android/InternalSensors.cpp	/^getDeviceIndex(JNIEnv *env, jobject obj)$/;"	f	file:
getDirection	UIUtil/GestureManager.cpp	/^getDirection(int dx, int dy)$/;"	f	file:
getExternalStorageDirectory	Android/Environment.cpp	/^Environment::getExternalStorageDirectory(char *buffer, size_t max_size)$/;"	f	class:Environment
getExternalStorageDirectory	Android/Environment.cpp	/^getExternalStorageDirectory(JNIEnv *env)$/;"	f	file:
getExternalStorageDirectory_method	Android/Environment.cpp	/^  static jmethodID getExternalStorageDirectory_method;$/;"	m	namespace:Environment	file:
getExternalStoragePublicDirectory	Android/Environment.cpp	/^Environment::getExternalStoragePublicDirectory(char *buffer, size_t max_size,$/;"	f	class:Environment
getExternalStoragePublicDirectory	Android/Environment.cpp	/^getExternalStoragePublicDirectory(JNIEnv *env, const char *type)$/;"	f	file:
getExternalStoragePublicDirectory_method	Android/Environment.cpp	/^  static jmethodID getExternalStoragePublicDirectory_method;$/;"	m	namespace:Environment	file:
getHeight_method	Android/Bitmap.cpp	/^jmethodID AndroidBitmap::getHeight_method;$/;"	m	class:AndroidBitmap	file:
getHeight_method	Android/Bitmap.hpp	/^  static jmethodID getWidth_method, getHeight_method;$/;"	m	class:AndroidBitmap
getInputStream	Java/URL.hxx	/^		static jobject getInputStream(JNIEnv *env, jobject connection) {$/;"	f	class:Java::URLConnection
getInputStream_method	Java/URL.cxx	/^jmethodID Java::URLConnection::getInputStream_method;$/;"	m	class:Java::URLConnection	file:
getInputStream_method	Java/URL.hxx	/^		static jmethodID getInputStream_method;$/;"	m	class:Java::URLConnection
getItem	Form/DataField/Enum.cpp	/^DataFieldEnum::getItem(unsigned index) const$/;"	f	class:DataFieldEnum
getLeastImportantItem	Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::getLeastImportantItem(unsigned now)$/;"	f	class:WindMeasurementList
getModeID	Input/InputEvents.cpp	/^InputEvents::getModeID()$/;"	f	class:InputEvents
getNameFromAddress_method	Android/BluetoothHelper.cpp	/^  static jmethodID getNameFromAddress_method;$/;"	m	namespace:BluetoothHelper	file:
getNetState	Android/NativeView.hpp	/^  int getNetState() const {$/;"	f	class:NativeView
getNetState_method	Android/NativeView.cpp	/^jmethodID NativeView::getNetState_method;$/;"	m	class:NativeView	file:
getNetState_method	Android/NativeView.hpp	/^  static jmethodID getNetState_method;$/;"	m	class:NativeView
getNumberUarts	Device/Port/AndroidIOIOUartPort.hpp	/^  static inline unsigned getNumberUarts() { return 4; }$/;"	f	namespace:AndroidIOIOUartPort
getPolygonCenterOfGravity	Topography/shapelib/mapprimitive.c	/^static int getPolygonCenterOfGravity(shapeObj *p, pointObj *lp)$/;"	f	file:
getPortHelp	Device/Port/AndroidIOIOUartPort.hpp	/^  static inline const TCHAR *getPortHelp(unsigned UartID) {$/;"	f	namespace:AndroidIOIOUartPort
getRasterBufferCopy	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*getRasterBufferCopy)(imageObj *img, rasterBufferObj *rb);$/;"	m	struct:rendererVTableObj
getRasterBufferHandle	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*getRasterBufferHandle)(imageObj *img, rasterBufferObj *rb);$/;"	m	struct:rendererVTableObj
getRingArea	Topography/shapelib/mapprimitive.c	/^static double getRingArea(lineObj *ring)$/;"	f	file:
getState	Android/PortBridge.hpp	/^  int getState(JNIEnv *env) {$/;"	f	class:PortBridge
getState_method	Android/PortBridge.cpp	/^jmethodID PortBridge::getState_method;$/;"	m	class:PortBridge	file:
getState_method	Android/PortBridge.hpp	/^  static jmethodID getState_method;$/;"	m	class:PortBridge
getSubNodeOffset	Topography/shapelib/maptree.c	/^static ms_int32 getSubNodeOffset(treeNodeObj *node)$/;"	f	file:
getSubscribableSensors	Android/InternalSensors.cpp	/^InternalSensors::getSubscribableSensors(JNIEnv *env, jobject sensors_obj)$/;"	f	class:InternalSensors
getSubscribableSensors	Android/InternalSensors.hpp	/^  const auto &getSubscribableSensors() const {$/;"	f	class:InternalSensors
getTaskValidationErrors	Task/ValidationErrorStrings.cpp	/^getTaskValidationErrors(const TaskValidationErrorSet v)$/;"	f
getTextBounds	Android/TextUtil.cpp	/^TextUtil::getTextBounds(const char *text) const$/;"	f	class:TextUtil
getTextTextureGL	Android/TextUtil.cpp	/^TextUtil::getTextTextureGL(const char *text) const$/;"	f	class:TextUtil
getWidth_method	Android/Bitmap.cpp	/^jmethodID AndroidBitmap::getWidth_method;$/;"	m	class:AndroidBitmap	file:
getWidth_method	Android/Bitmap.hpp	/^  static jmethodID getWidth_method, getHeight_method;$/;"	m	class:AndroidBitmap
getWind	Computer/Wind/MeasurementList.cpp	/^WindMeasurementList::getWind(unsigned now, double alt, bool &found) const$/;"	f	class:WindMeasurementList
get_active_solution	Engine/Task/Solvers/TaskMacCready.hpp	/^  const GlideResult &get_active_solution() const {$/;"	f	class:TaskMacCready
get_aircraft_start	Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::get_aircraft_start(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyRemaining
get_aircraft_start	Engine/Task/Solvers/TaskMacCreadyTotal.cpp	/^TaskMacCreadyTotal::get_aircraft_start(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyTotal
get_aircraft_start	Engine/Task/Solvers/TaskMacCreadyTravelled.cpp	/^TaskMacCreadyTravelled::get_aircraft_start(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyTravelled
get_ascent_height	Android/TextUtil.hpp	/^  unsigned get_ascent_height() const {$/;"	f	class:TextUtil
get_bounds	Topography/XShape.hpp	/^  const GeoBounds &get_bounds() const {$/;"	f	class:XShape
get_capital_height	Android/TextUtil.hpp	/^  unsigned get_capital_height() const {$/;"	f	class:TextUtil
get_cursor_name	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::get_cursor_name()$/;"	f	class:TaskListPanel
get_cursor_task	Dialogs/Task/Manager/TaskListPanel.cpp	/^TaskListPanel::get_cursor_task()$/;"	f	class:TaskListPanel
get_dirty	Screen/GDI/PaintCanvas.hpp	/^  const PixelRect &get_dirty() const {$/;"	f	class:PaintCanvas
get_height	Android/TextUtil.hpp	/^  unsigned get_height() const {$/;"	f	class:TextUtil
get_io_context	Event/Poll/Queue.hpp	/^  boost::asio::io_context &get_io_context() {$/;"	f	class:DisplayOrientation
get_min_height	Engine/Task/Solvers/TaskMacCreadyTravelled.cpp	/^TaskMacCreadyTravelled::get_min_height(const AircraftState &aircraft) const$/;"	f	class:TaskMacCreadyTravelled
get_radius	Device/Declaration.cpp	/^get_radius(const OrderedTaskPoint &tp)$/;"	f	file:
get_shape	Device/Declaration.cpp	/^get_shape(const OrderedTaskPoint &tp)$/;"	f	file:
get_state	Computer/Wind/WindEKF.hpp	/^  const float* get_state() const { return X; };$/;"	f	class:WindEKF
get_string	Language/MOFile.cpp	/^MOFile::get_string(const struct mo_table_entry *entry) const$/;"	f	class:MOFile
get_style	Android/TextUtil.hpp	/^  unsigned get_style() const {$/;"	f	class:TextUtil
get_type	Topography/XShape.hpp	/^  MS_SHAPE_TYPE get_type() const {$/;"	f	class:XShape
get_value	Engine/Task/Stats/TaskVario.hpp	/^  double get_value() const {$/;"	f	class:TaskVario
getdata	Terrain/jasper/jp2/jp2_cod.h	/^	int (*getdata)(jp2_box_t *box, jas_stream_t *in);$/;"	m	struct:jp2_boxops_s
getparms	Terrain/jasper/jpc/jpc_cs.h	/^	int (*getparms)(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in);$/;"	m	struct:jpc_msops_s
getsize	Terrain/jasper/jas_icc.h	/^	int (*getsize)(struct jas_iccattrval_s *);$/;"	m	struct:__anon187
gettext	Language/Language.cpp	/^gettext(const TCHAR* text)$/;"	f
gid	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gid[IMIDECL_GID_LENGTH];$/;"	m	struct:IMI::FlightInfo
gid	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gid[IMIDECL_GID_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
gl_cls	Android/GliderLink.cpp	/^Java::TrivialClass GliderLink::gl_cls;$/;"	m	class:GliderLink	file:
gl_cls	Android/GliderLink.hpp	/^  static Java::TrivialClass gl_cls;$/;"	m	class:GliderLink
gl_ctor_id	Android/GliderLink.cpp	/^jmethodID GliderLink::gl_ctor_id, GliderLink::close_method;$/;"	m	class:GliderLink	file:
gl_ctor_id	Android/GliderLink.hpp	/^  static jmethodID gl_ctor_id, close_method;$/;"	m	class:GliderLink
glide	Engine/Task/TaskBehaviour.hpp	/^  GlideSettings glide;$/;"	m	struct:TaskBehaviour
glide_computer	CalculationThread.hpp	/^  GlideComputer &glide_computer;$/;"	m	class:final
glide_computer	Components.cpp	/^GlideComputer *glide_computer;$/;"	v
glide_computer	Dialogs/dlgAnalysis.cpp	/^  GlideComputer &glide_computer;$/;"	m	class:final	file:
glide_computer	Dialogs/dlgAnalysis.cpp	/^  const GlideComputer &glide_computer;$/;"	m	class:ChartControl	file:
glide_computer	MapWindow/MapWindow.hpp	/^  GlideComputer *glide_computer = nullptr;$/;"	m	class:MapWindow
glide_computer	MapWindow/TargetMapWindow.hpp	/^  const GlideComputer *glide_computer = nullptr;$/;"	m	class:TargetMapWindow
glide_computer_events	Startup.cpp	/^static GlideComputerEvents *glide_computer_events;$/;"	v	file:
glide_polar	CrossSection/CrossSectionRenderer.hpp	/^  GlidePolar glide_polar;$/;"	m	class:CrossSectionRenderer
glide_polar	Engine/GlideSolvers/MacCready.hpp	/^  const GlidePolar &glide_polar;$/;"	m	class:MacCready
glide_polar	Engine/Task/Solvers/TaskMacCready.hpp	/^  GlidePolar glide_polar;$/;"	m	class:TaskMacCready
glide_polar	Engine/Task/TaskManager.hpp	/^  GlidePolar glide_polar;$/;"	m	class:TaskManager
glide_polar_safety	NMEA/Derived.hpp	/^  GlidePolar glide_polar_safety;$/;"	m	struct:DerivedInfo
glide_polar_task	Computer/Settings.hpp	/^  GlidePolar glide_polar_task;$/;"	m	struct:PolarSettings
glide_required	Engine/Task/Stats/TaskStats.hpp	/^  double glide_required;$/;"	m	class:TaskStats
glide_settings	CrossSection/CrossSectionRenderer.hpp	/^  GlideSettings glide_settings;$/;"	m	class:CrossSectionRenderer
glide_sink	Engine/Task/Solvers/TaskMacCready.cpp	/^TaskMacCready::glide_sink(const AircraftState &aircraft, const double S) const$/;"	f	class:TaskMacCready
glide_solution	Engine/Task/Solvers/TaskMacCready.cpp	/^TaskMacCready::glide_solution(const AircraftState &aircraft)$/;"	f	class:TaskMacCready
glider	Device/Driver/LX/LXN.hpp	/^    char glider[12];$/;"	m	struct:LXN::FlightInfo
glider_average	Computer/ThermalLocator.cpp	/^ThermalLocator::glider_average()$/;"	f	class:ThermalLocator
glider_id	Device/Driver/CAI302/Protocol.hpp	/^    char glider_id[12];$/;"	m	struct:CAI302::Polar
glider_link	Device/Descriptor.hpp	/^  GliderLink *glider_link;$/;"	m	class:final
glider_screen_position	MapSettings.hpp	/^  int glider_screen_position;$/;"	m	struct:MapSettings
glider_type	Device/Driver/CAI302/Protocol.hpp	/^    char glider_type[12];$/;"	m	struct:CAI302::Polar
gliderid	Device/Driver/Volkslogger/vlapi2.h	/^      char gliderid[8];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
gliderid	Device/Driver/Volkslogger/vlconv.h	/^	char gliderid[8];				\/\/ enough$/;"	m	struct:DIRENTRY
glidertype	Device/Driver/Volkslogger/vlapi2.h	/^      char glidertype[13];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
glink_data	NMEA/Info.hpp	/^  GliderLinkData glink_data;$/;"	m	struct:NMEAInfo
global_debug_level	Topography/shapelib/maperror.h	/^    debugLevel  global_debug_level;$/;"	m	struct:debug_info_obj
global_dialog_look	Kobo/KoboMenu.cpp	/^static DialogLook *global_dialog_look;$/;"	v	file:
global_main_window	Kobo/KoboMenu.cpp	/^static SingleWindow *global_main_window;$/;"	v	file:
global_progress_window	ProgressGlue.cpp	/^static ProgressWindow *global_progress_window;$/;"	v	file:
global_running	Protection.cpp	/^bool global_running;$/;"	v
global_simulator_flag	Simulator.cpp	/^bool global_simulator_flag;$/;"	v
glx_context	Screen/Custom/TopCanvas.hpp	/^  GLXContext glx_context;$/;"	m	class:DisplayOrientation
glx_window	Screen/Custom/TopCanvas.hpp	/^  GLXWindow glx_window;$/;"	m	class:DisplayOrientation
glyph	Topography/shapelib/mapserver.h	/^  glyph_element *glyph;$/;"	m	struct:__anon66
glyphObj	Topography/shapelib/mapserver.h	/^} glyphObj;$/;"	t	typeref:struct:__anon66
glyph_element	Topography/shapelib/mapserver.h	/^typedef struct glyph_element glyph_element;$/;"	t	typeref:struct:glyph_element
glyph_metrics	Topography/shapelib/mapserver.h	/^} glyph_metrics;$/;"	t	typeref:struct:__anon65
glyph_size	Topography/shapelib/mapserver.h	/^  int glyph_size;$/;"	m	struct:textPathObj
glyphs	Topography/shapelib/mapserver.h	/^  glyphObj *glyphs;$/;"	m	struct:textPathObj
gmax	Gauge/GaugeVario.hpp	/^  static constexpr int gmax = GAUGEVARIOSWEEP + 2;$/;"	m	class:GaugeVario
gmin	Gauge/GaugeVario.hpp	/^  static constexpr int gmin = -gmax;$/;"	m	class:GaugeVario
got_size	Dialogs/DownloadFilePicker.cpp	/^  bool got_size = false, complete = false, success;$/;"	m	class:final	file:
goto_button	Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
goto_button	Dialogs/Task/AlternatesListDialog.cpp	/^  Button *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
goto_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect goto_button;$/;"	m	struct:final::Layout	file:
goto_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button goto_button;$/;"	m	class:final	file:
goto_nonlandable	Engine/Task/TaskBehaviour.hpp	/^  bool goto_nonlandable;$/;"	m	struct:TaskBehaviour
goto_target	Replay/TaskAutoPilot.hpp	/^  bool goto_target;$/;"	m	struct:AutopilotParameters
goto_task	Engine/Task/TaskManager.hpp	/^  GotoTask *const goto_task;$/;"	m	class:TaskManager
gps	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE gps;$/;"	m	struct:IMI::TDeclarationHeader
gps	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE gps;$/;"	m	struct:IMI::TDeviceInfo
gps	Device/Driver/LX/LXN.hpp	/^    char gps[60];$/;"	m	struct:LXN::FlightInfo
gps	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
gps	FLARM/Status.hpp	/^  GPSStatus gps;$/;"	m	struct:FlarmStatus
gps	NMEA/Info.hpp	/^  GPSState gps;$/;"	m	struct:NMEAInfo
gpsModules	Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const gpsModules[] =$/;"	m	class:IMI	file:
gps_altitude	IGC/IGCFix.hpp	/^  int gps_altitude, pressure_altitude;$/;"	m	struct:IGCFix
gps_altitude	NMEA/Info.hpp	/^  double gps_altitude;$/;"	m	struct:NMEAInfo
gps_altitude	Replay/CatmullRomInterpolator.hpp	/^    double gps_altitude;$/;"	m	struct:CatmullRomInterpolator::Record
gps_altitude_available	Logger/LoggerImpl.hpp	/^    bool gps_altitude_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
gps_altitude_available	NMEA/Info.hpp	/^  Validity gps_altitude_available;$/;"	m	struct:NMEAInfo
gps_cls	Android/InternalSensors.cpp	/^Java::TrivialClass InternalSensors::gps_cls, InternalSensors::sensors_cls;$/;"	m	class:InternalSensors	file:
gps_cls	Android/InternalSensors.hpp	/^  static Java::TrivialClass gps_cls, sensors_cls;$/;"	m	class:InternalSensors
gps_ctor_id	Android/InternalSensors.cpp	/^jmethodID InternalSensors::gps_ctor_id, InternalSensors::close_method;$/;"	m	class:InternalSensors	file:
gps_ctor_id	Android/InternalSensors.hpp	/^  static jmethodID gps_ctor_id, close_method;$/;"	m	class:InternalSensors
gps_date	Device/Driver/LX/LXN.hpp	/^    uint8_t gps_date;$/;"	m	struct:LXN::FlightInfo
gps_info	Blackboard/BaseBlackboard.hpp	/^  MoreData gps_info;$/;"	m	class:BaseBlackboard
gps_nav_driver	Device/Driver/CaiGpsNav.cpp	/^const struct DeviceRegister gps_nav_driver = {$/;"	v	typeref:struct:DeviceRegister
gps_valid	IGC/IGCFix.hpp	/^  bool gps_valid;$/;"	m	struct:IGCFix
gps_vario	NMEA/MoreData.hpp	/^  double gps_vario;$/;"	m	struct:MoreData
gps_vario_TE	NMEA/MoreData.hpp	/^  double gps_vario_TE;$/;"	m	struct:MoreData
gps_vario_available	NMEA/MoreData.hpp	/^  Validity gps_vario_available;$/;"	m	struct:MoreData
gpsalt	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDDWORD gpsalt:14;$/;"	m	struct:IMI::FixB
gpsalt1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD gpsalt1:8;$/;"	m	struct:IMI::FixB2
gpsalt2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD gpsalt2:7;$/;"	m	struct:IMI::FixB2
gr	NMEA/VarioInfo.hpp	/^  double gr;$/;"	m	struct:VarioInfo
gr_calculator	Computer/GlideRatioComputer.hpp	/^  GlideRatioCalculator gr_calculator;$/;"	m	class:GlideRatioComputer
gr_calculator_initialised	Computer/GlideRatioComputer.hpp	/^  bool gr_calculator_initialised;$/;"	m	class:GlideRatioComputer
gr_computer	Computer/GlideComputerAirData.hpp	/^  GlideRatioComputer gr_computer;$/;"	m	class:GlideComputerAirData
gradient	Engine/Route/RoutePolar.hpp	/^    double gradient;$/;"	m	struct:RoutePolar::RoutePolarPoint
gradient	Engine/Task/Stats/ElementStat.hpp	/^  double gradient;$/;"	m	struct:ElementStat
graticuleIntersectionObj	Topography/shapelib/mapserver.h	/^  } graticuleIntersectionObj;$/;"	t	typeref:struct:__anon57
graticuleObj	Topography/shapelib/mapserver.h	/^  } graticuleObj;$/;"	t	typeref:struct:__anon56
grecord	Device/Driver/Volkslogger/grecord.h	/^  char grecord[80];$/;"	m	class:GRECORD
grecord	IGC/IGCWriter.hpp	/^  GRecord grecord;$/;"	m	class:IGCWriter
grid	Topography/shapelib/mapserver.h	/^    graticuleObj* grid;$/;"	m	struct:layerObj
grid_font	Look/CrossSectionLook.hpp	/^  const Font *grid_font;$/;"	m	struct:CrossSectionLook
grid_pen	Look/CrossSectionLook.hpp	/^  Pen grid_pen;$/;"	m	struct:CrossSectionLook
grid_view	Dialogs/dlgQuickMenu.cpp	/^  GridView grid_view;$/;"	m	class:final	file:
gridstep	Topography/shapelib/mapserver.h	/^    int gridstep;$/;"	m	struct:__anon43
gross	Gauge/GaugeVario.hpp	/^    LabelValueGeometry average, gross, mc;$/;"	m	struct:GaugeVario::Geometry
gross_di	Gauge/GaugeVario.hpp	/^  LabelValueDrawInfo average_di, mc_di, gross_di;$/;"	m	class:GaugeVario
ground_height	Atmosphere/CuSonde.hpp	/^  double ground_height;$/;"	m	class:CuSonde
ground_height	NMEA/ThermalLocator.hpp	/^  double ground_height;$/;"	m	struct:ThermalSource
ground_speed	Computer/BasicComputer.hpp	/^  GroundSpeedComputer ground_speed;$/;"	m	class:BasicComputer
ground_speed	Engine/Navigation/Aircraft.hpp	/^  double ground_speed;$/;"	m	struct:SpeedState
ground_speed	Engine/Task/Stats/StartStats.hpp	/^  double ground_speed;$/;"	m	struct:StartStats
ground_speed	NMEA/Info.hpp	/^  double ground_speed;$/;"	m	struct:NMEAInfo
ground_speed	Tracking/SkyLines/Protocol.hpp	/^  uint16_t ground_speed;$/;"	m	struct:SkyLinesTracking::FixPacket
ground_speed	Tracking/TrackingGlue.hpp	/^  unsigned ground_speed;$/;"	m	class:final
ground_speed_available	NMEA/Info.hpp	/^  Validity ground_speed_available;$/;"	m	struct:NMEAInfo
ground_track_mode_list	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice ground_track_mode_list[] = {$/;"	v	file:
group	Topography/shapelib/mapserver.h	/^    char *group; \/* shouldn't be unique it's supposed to be a group right? *\/$/;"	m	struct:layerObj
group	Topography/shapelib/mapserver.h	/^    char *group;$/;"	m	struct:classObj
group	Topography/shapelib/mapserver.h	/^    expressionObj group; \/* expression to identify the groups *\/$/;"	m	struct:__anon37
grow	Util/ReusableArray.hpp	/^  T *grow(size_type old_length, size_type new_length) {$/;"	f	class:ReusableArray
growable_	Terrain/jasper/jas_stream.h	/^	int growable_;$/;"	m	struct:__anon122
gsp	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD gsp:10;$/;"	m	struct:IMI::FixK
gsp	IGC/IGCFix.hpp	/^  int16_t gsp;$/;"	m	struct:IGCFix
gt	Topography/shapelib/mapserver.h	/^    geotransformObj gt; \/* rotation \/ geotransform *\/$/;"	m	struct:mapObj
gty	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gty[IMIDECL_GTY_LENGTH];$/;"	m	struct:IMI::FlightInfo
gty	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR gty[IMIDECL_GTY_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
guard	Thread/Guard.hpp	/^    Guard &guard;$/;"	m	class:Guard::ExclusiveLease
guard	Thread/Guard.hpp	/^    const Guard &guard;$/;"	m	class:Guard::Lease
guard	Thread/Guard.hpp	/^    explicit ExclusiveLease(Guard &_guard) noexcept:guard(_guard) {$/;"	f	class:Guard::ExclusiveLease
guard	Thread/Guard.hpp	/^    explicit Lease(const Guard &_guard) noexcept:guard(_guard) {$/;"	f	class:Guard::Lease
gutter	Topography/shapelib/mapserver.h	/^    int gutter; \/* space in pixels around the image where labels cannot be placed *\/$/;"	m	struct:__anon49
h	Engine/Route/AStar.hpp	/^  unsigned h;$/;"	m	struct:AStarPriorityValue
h	Screen/Ramp.hpp	/^  short h;$/;"	m	struct:ColorRamp
hBmpTabCalculator	Look/IconLook.hpp	/^  MaskedIcon hBmpTabCalculator;$/;"	m	struct:IconLook
hBmpTabFlight	Look/IconLook.hpp	/^  MaskedIcon hBmpTabFlight;$/;"	m	struct:IconLook
hBmpTabRules	Look/IconLook.hpp	/^  MaskedIcon hBmpTabRules;$/;"	m	struct:IconLook
hBmpTabSettings	Look/IconLook.hpp	/^  MaskedIcon hBmpTabSettings;$/;"	m	struct:IconLook
hBmpTabSystem	Look/IconLook.hpp	/^  MaskedIcon hBmpTabSystem;$/;"	m	struct:IconLook
hBmpTabTask	Look/IconLook.hpp	/^  MaskedIcon hBmpTabTask;$/;"	m	struct:IconLook
hBmpTabTimes	Look/IconLook.hpp	/^  MaskedIcon hBmpTabTimes;$/;"	m	struct:IconLook
hBmpTabWrench	Look/IconLook.hpp	/^  MaskedIcon hBmpTabWrench;$/;"	m	struct:IconLook
hDBF	Topography/shapelib/mapshape.h	/^    DBFHandle hDBF; \/* DBF file pointer *\/$/;"	m	struct:__anon85
hFile	OS/FileMapping.hpp	/^  HANDLE hFile, hMapping;$/;"	m	class:FileMapping
hKey	Config/Registry.hpp	/^  HKEY hKey;$/;"	m	class:RegistryKey
hMapping	OS/FileMapping.hpp	/^  HANDLE hFile, hMapping;$/;"	m	class:FileMapping
hPort	Device/Port/SerialPort.hpp	/^  HANDLE hPort;$/;"	m	class:SerialPort
hSHP	Topography/shapelib/mapshape.h	/^    SHPHandle hSHP; \/* SHP\/SHX file pointer *\/$/;"	m	struct:__anon85
hSavedFocus	Screen/TopWindow.hpp	/^  HWND hSavedFocus;$/;"	m	class:TopWindow
hWnd	Screen/Window.hpp	/^  HWND hWnd = nullptr;$/;"	m	class:Window
h_max	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const double h_max;$/;"	m	class:AirspacePredicateHeightRange
h_max	Engine/Route/RoutePlanner.hpp	/^  int h_max;$/;"	m	class:RoutePlanner
h_min	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const double h_min;$/;"	m	class:AirspacePredicateHeightRange
h_min	Engine/Route/RoutePlanner.hpp	/^  int h_min;$/;"	m	class:RoutePlanner
h_min	Engine/ThermalBand/ThermalBand.hpp	/^     double h_min;$/;"	m	class:ThermalBand
h_padding	Gauge/FlarmTrafficWindow.hpp	/^  const unsigned h_padding, v_padding;$/;"	m	class:FlarmTrafficWindow
halfmajor	Math/LeastSquares.hpp	/^  double halfmajor;$/;"	m	struct:ErrorEllipse
halfminor	Math/LeastSquares.hpp	/^  double halfminor;$/;"	m	struct:ErrorEllipse
handicap	Engine/Contest/Settings.hpp	/^  unsigned handicap;$/;"	m	struct:ContestSettings
handicap	Engine/Contest/Solvers/AbstractContest.hpp	/^  unsigned handicap;$/;"	m	class:AbstractContest
handicap	Plane/Plane.hpp	/^  unsigned handicap;$/;"	m	struct:Plane
handle	IO/FileOutputStream.hxx	/^	HANDLE handle = INVALID_HANDLE_VALUE;$/;"	m	class:final
handle	IO/FileReader.hxx	/^	HANDLE handle;$/;"	m	class:final
handle	Net/HTTP/Easy.hxx	/^	CURL *handle = nullptr;$/;"	m	class:CurlEasy
handle	Net/HTTP/Easy.hxx	/^	CurlEasy(std::nullptr_t) noexcept:handle(nullptr) {}$/;"	f	class:CurlEasy
handle	Net/HTTP/Request.hpp	/^    CurlEasy handle;$/;"	m	class:Net::Request
handle	Thread/Handle.hpp	/^  constexpr ThreadHandle(DWORD _handle) noexcept:handle(_handle) {}$/;"	f	class:ThreadHandle
handle	Thread/Handle.hpp	/^  constexpr ThreadHandle(pthread_t _handle) noexcept:handle(_handle) {}$/;"	f	class:ThreadHandle
handle	Thread/Handle.hpp	/^  pthread_t handle;$/;"	m	class:ThreadHandle
handle	Thread/Thread.hpp	/^  HANDLE handle;$/;"	m	class:Thread
handle	Thread/Thread.hpp	/^  Thread(const char *_name=nullptr) noexcept:name(_name), handle(nullptr) {}$/;"	f	class:Thread
handle	Thread/Thread.hpp	/^  pthread_t handle;$/;"	m	class:Thread
handle	Thread/Trigger.hpp	/^  HANDLE handle;$/;"	m	class:Trigger
handler	Device/Port/Port.hpp	/^  DataHandler &handler;$/;"	m	class:Port
handler	Net/HTTP/Request.hpp	/^    ResponseHandler &handler;$/;"	m	class:Net::Request
handler	Tracking/SkyLines/Client.hpp	/^  Handler *const handler;$/;"	m	class:SkyLinesTracking::Client
haptic_feedback	UISettings.hpp	/^  } haptic_feedback;$/;"	m	struct:UISettings	typeref:class:UISettings::HapticFeedback
hardware	Device/Driver/LX/LXN.hpp	/^    uint8_t hardware, software;$/;"	m	struct:LXN::Version
hardware_parameters	Dialogs/Device/Vega/HardwareParameters.hpp	/^VegaParametersWidget::StaticParameter hardware_parameters[] = {$/;"	v
hardware_version	FLARM/Version.hpp	/^  NarrowString<7> hardware_version, software_version;$/;"	m	struct:FlarmVersion
hardware_version	NMEA/DeviceInfo.hpp	/^  NarrowString<16> hardware_version;$/;"	m	struct:DeviceInfo
hasLe_field	Android/BluetoothHelper.cpp	/^  static jfieldID hasLe_field;$/;"	m	namespace:BluetoothHelper	file:
has_active_frequency	NMEA/ExternalSettings.hpp	/^  Validity has_active_frequency;$/;"	m	struct:ExternalSettings
has_border	Screen/Window.hpp	/^  bool has_border = false;$/;"	m	class:Window
has_border	Screen/Window.hpp	/^  bool has_border = false;$/;"	m	class:WindowStyle
has_cursor_keys	Android/Product.cpp	/^bool has_cursor_keys;$/;"	v
has_data	Atmosphere/CuSonde.hpp	/^    bool has_data;$/;"	m	struct:CuSonde::Level
has_dewpoint	Atmosphere/CuSonde.hpp	/^    bool has_dewpoint;$/;"	m	struct:CuSonde::Level
has_exited	Engine/Task/Points/ScoredTaskPoint.hpp	/^  bool has_exited;$/;"	m	class:ScoredTaskPoint
has_optional_starts	Engine/Task/Stats/TaskStats.hpp	/^  bool has_optional_starts;$/;"	m	class:TaskStats
has_standby_frequency	NMEA/ExternalSettings.hpp	/^  Validity has_standby_frequency;$/;"	m	struct:ExternalSettings
has_targets	Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::has_targets() const$/;"	f	class:TaskMacCreadyRemaining
has_targets	Engine/Task/Stats/TaskStats.hpp	/^  bool has_targets;$/;"	m	class:TaskStats
has_trivial_copy_and_destructor	Util/TypeTraits.hpp	/^struct has_trivial_copy_and_destructor$/;"	s
hasdeclaration	Device/Driver/Volkslogger/vlconv.cpp	/^  int hasdeclaration;$/;"	m	class:C_RECORD	file:
hashBits	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD hashBits;$/;"	m	struct:IMI::Signature
hash_table_offset	Language/MOFile.hpp	/^    uint32_t hash_table_size, hash_table_offset;$/;"	m	struct:MOFile::mo_header
hash_table_size	Language/MOFile.hpp	/^    uint32_t hash_table_size, hash_table_offset;$/;"	m	struct:MOFile::mo_header
have_position	Widget/ManagedWidget.hpp	/^  bool have_position = false;$/;"	m	class:ManagedWidget
have_quit_button	Dialogs/SimulatorPromptWindow.hpp	/^  const bool have_quit_button;$/;"	m	class:final
have_sles	Audio/VarioGlue.cpp	/^static bool have_sles;$/;"	v	file:
hbGray	Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbGreen	Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbLightGray	Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbNotReachableTerrain	Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hbOrange	Look/TaskLook.hpp	/^  Brush hbGray, hbGreen, hbOrange, hbLightGray, hbNotReachableTerrain;$/;"	m	struct:TaskLook
hdm	IGC/IGCFix.hpp	/^  int16_t hdm;$/;"	m	struct:IGCFix
hdop	Logger/LoggerImpl.hpp	/^    double hdop;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
hdop	NMEA/GPSState.hpp	/^  double hdop;$/;"	m	struct:GPSState
hdop2fxa	Device/Driver/Volkslogger/vlconv.cpp	/^hdop2fxa(uint8_t hdop)$/;"	f	file:
hdr	Terrain/jasper/jas_icc.h	/^	jas_icchdr_t hdr;$/;"	m	struct:__anon193
hdr	zzip/lib.h	/^    struct zzip_dir_hdr * hdr;   \/* zdp; directory pointer, for dirent stuff *\/$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_dir_hdr
hdr0	zzip/lib.h	/^    struct zzip_dir_hdr * hdr0;  \/* zfi; *\/$/;"	m	struct:zzip_dir	typeref:struct:zzip_dir::zzip_dir_hdr
hdt	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD hdt:9;$/;"	m	struct:IMI::FixK
hdt	IGC/IGCFix.hpp	/^  int16_t hdt;$/;"	m	struct:IGCFix
head	Net/HTTP/FormData.hpp	/^    struct curl_httppost *head = nullptr, *tail = nullptr;$/;"	m	class:Net::MultiPartFormData	typeref:struct:Net::MultiPartFormData::curl_httppost
head	Net/HTTP/Slist.hxx	/^	struct curl_slist *head = nullptr;$/;"	m	class:CurlSlist	typeref:struct:CurlSlist::curl_slist
head	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seg_t *head;$/;"	m	struct:__anon144
head	Util/ForeignFifoBuffer.hxx	/^	size_type head = 0, tail = 0, capacity;$/;"	m	class:ForeignFifoBuffer
head	Util/OverwritingRingBuffer.hpp	/^  unsigned head, tail;$/;"	m	class:TrivialOverwritingRingBuffer
head	Util/QuadTree.hxx	/^		Leaf *head;$/;"	m	struct:LeafList
head	Util/RadixTree.hpp	/^    Leaf *head;$/;"	m	struct:RadixTree::LeafList
head	Util/SliceAllocator.hxx	/^	Area *head;$/;"	m	class:SliceAllocator
head	Util/StaticFifoBuffer.hxx	/^	size_type head = 0, tail = 0;$/;"	m	class:StaticFifoBuffer
head_wind	Engine/GlideSolvers/GlideResult.hpp	/^  double head_wind;$/;"	m	struct:GlideResult
head_wind	Engine/GlideSolvers/GlideState.hpp	/^  double head_wind;$/;"	m	struct:GlideState
head_wind	NMEA/Derived.hpp	/^  double head_wind;$/;"	m	struct:DerivedInfo
head_wind_available	NMEA/Derived.hpp	/^  Validity head_wind_available;$/;"	m	struct:DerivedInfo
header	Cloud/Sender.hpp	/^    SkyLinesTracking::ThermalResponsePacket header;$/;"	m	struct:ThermalResponseSender::Packet
header	Cloud/Sender.hpp	/^    SkyLinesTracking::TrafficResponsePacket header;$/;"	m	struct:TrafficResponseSender::Packet
header	Device/Driver/IMI/Protocol/Types.hpp	/^    TDeclarationHeader header;$/;"	m	struct:IMI::TDeclaration
header	Device/Driver/Volkslogger/dbbconv.h	/^  HEADER header[8];$/;"	m	class:DBB
header	Topography/shapelib/mapserver.h	/^    char *header, *footer; \/* only used with multi result queries *\/$/;"	m	struct:layerObj
header	Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon38
header	Topography/shapelib/mapserver.h	/^    char *header, *footer;$/;"	m	struct:__anon42
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ACKPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::FixPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::PingPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ThermalRequestPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::ThermalSubmitPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::UserNameRequestPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::WaveRequestPacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
header	Tracking/SkyLines/Protocol.hpp	/^  Header header;$/;"	m	struct:SkyLinesTracking::WaveSubmitPacket
header_font	Renderer/FlightListRenderer.hpp	/^  const Font &font, &header_font;$/;"	m	class:FlightListRenderer
heading	Gauge/FlarmTrafficWindow.hpp	/^  Angle heading;$/;"	m	class:FlarmTrafficWindow
heading	NMEA/Attitude.hpp	/^  Angle heading;$/;"	m	struct:AttitudeState
heading	NMEA/Info.hpp	/^  Angle heading;$/;"	m	struct:NMEAInfo
heading	Replay/TaskAutoPilot.hpp	/^  Angle heading;$/;"	m	class:AbstractAutoPilot
heading_available	NMEA/Attitude.hpp	/^  Validity heading_available;$/;"	m	struct:AttitudeState
heading_available	NMEA/Info.hpp	/^  Validity heading_available;$/;"	m	struct:NMEAInfo
heading_computed	NMEA/Attitude.hpp	/^  bool heading_computed;$/;"	m	struct:AttitudeState
heading_filter	Replay/TaskAutoPilot.hpp	/^  Filter heading_filter;$/;"	m	class:TaskAutoPilot
heading_to_index	Computer/LiftDatabaseComputer.cpp	/^heading_to_index(const Angle heading)$/;"	f	file:
height	Android/NativeView.cpp	/^   width(_width), height(_height)$/;"	f
height	Android/NativeView.hpp	/^  unsigned width, height;$/;"	m	class:NativeView
height	Android/TextUtil.hpp	/^    unsigned width, height;$/;"	m	struct:TextUtil::Texture
height	Android/TextUtil.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:TextUtil
height	CommandLine.cpp	/^  unsigned height = IsKobo() ? 800 : 480;$/;"	m	namespace:CommandLine	file:
height	Engine/Route/FlatTriangleFan.hpp	/^  int height;$/;"	m	class:FlatTriangleFan
height	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:final
height	Event/Shared/RotatePointer.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:RotatePointer
height	Look/FontDescription.hpp	/^  unsigned height;$/;"	m	class:FontDescription
height	Renderer/WaypointLabelList.hpp	/^  const unsigned width, height;$/;"	m	class:WaypointLabelList
height	Screen/Custom/UncompressedImage.hpp	/^  unsigned pitch, width, height;$/;"	m	class:UncompressedImage
height	Screen/FB/mxcfb.h	/^	__u32 height;	\/* height of entire buffer *\/$/;"	m	struct:mxcfb_alt_buffer_data
height	Screen/FB/mxcfb.h	/^	__u32 height;$/;"	m	struct:mxcfb_rect
height	Screen/Font.hpp	/^  unsigned height, ascent_height, capital_height;$/;"	m	class:Font
height	Screen/Memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:ConstImageBuffer
height	Screen/Memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:WritableImageBuffer
height	Screen/RawBitmap.hpp	/^  const unsigned height;$/;"	m	class:final
height	Terrain/HeightMatrix.hpp	/^  unsigned width, height;$/;"	m	class:HeightMatrix
height	Terrain/RasterTile.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:RasterTile
height	Terrain/RasterTileCache.hpp	/^    unsigned width, height;$/;"	m	struct:RasterTileCache::CacheHeader
height	Terrain/RasterTileCache.hpp	/^  unsigned int width, height;$/;"	m	class:RasterTileCache
height	Terrain/jasper/jas_cm.h	/^	int height;$/;"	m	struct:__anon94
height	Terrain/jasper/jas_image.h	/^	jas_image_coord_t height;$/;"	m	struct:__anon125
height	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t height;$/;"	m	struct:__anon109
height	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t height;$/;"	m	struct:__anon160
height	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t height;$/;"	m	struct:__anon151
height	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon41
height	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon53
height	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon54
height	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon55
height	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:mapObj
height	Topography/shapelib/mapserver.h	/^    int height;$/;"	m	struct:tileCacheObj
height	Topography/shapelib/mapserver.h	/^    int width, height;$/;"	m	struct:imageObj
height	Util/AllocatedGrid.hxx	/^	unsigned width = 0, height = 0;$/;"	m	class:AllocatedGrid
height_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t height_;$/;"	m	struct:__anon123
height_climb	Engine/GlideSolvers/GlideResult.hpp	/^  double height_climb;$/;"	m	struct:GlideResult
height_fraction_working	Engine/Task/Stats/CommonStats.hpp	/^  double height_fraction_working;$/;"	m	class:CommonStats
height_glide	Engine/GlideSolvers/GlideResult.hpp	/^  double height_glide;$/;"	m	struct:GlideResult
height_matrix	Terrain/RasterRenderer.hpp	/^  HeightMatrix height_matrix;$/;"	m	class:RasterRenderer
height_max_working	Engine/Task/Stats/CommonStats.hpp	/^  double height_max_working;$/;"	m	class:CommonStats
height_min_working	Engine/Route/RoutePolars.hpp	/^  int height_min_working;$/;"	m	class:RoutePolars
height_min_working	Engine/Task/Stats/CommonStats.hpp	/^  double height_min_working;$/;"	m	class:CommonStats
height_range	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const AirspacePredicateHeightRange height_range;$/;"	m	class:AirspacePredicateHeightRangeExcludeTwo
height_scale	Weather/Rasp/RaspStyle.hpp	/^  unsigned height_scale;$/;"	m	struct:RaspStyle
help	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const TCHAR *label, *help;$/;"	m	struct:VegaParametersWidget::StaticParameter
help	Form/DataField/Enum.hpp	/^    TCHAR *help;$/;"	m	class:final::Entry
help	Form/DataField/Enum.hpp	/^  const TCHAR *help;$/;"	m	struct:StaticEnumChoice
help	Weather/Rasp/RaspStore.hpp	/^    const TCHAR *help;$/;"	m	struct:RaspStore::MapInfo
help	Weather/Rasp/RaspStore.hpp	/^    const TCHAR *help;$/;"	m	struct:RaspStore::MapItem
help_text	Dialogs/ListPicker.cpp	/^  const TCHAR *const caption, *const help_text;$/;"	m	class:ListPickerWidget	file:
help_text	Form/Control.hpp	/^  const TCHAR *help_text = nullptr;$/;"	m	class:WindowControl
help_text	Form/DataField/ComboList.hpp	/^    tstring help_text;$/;"	m	struct:ComboList::Item
help_widget	Dialogs/ListPicker.cpp	/^  TextWidget *help_widget;$/;"	m	class:ListPickerWidget	file:
hi	OS/ByteOrder.hpp	/^	uint8_t hi, lo;$/;"	m	class:PackedBE16
hi	OS/ByteOrder.hpp	/^	uint8_t lo, hi;$/;"	m	class:PackedLE16
highlight_pen	Look/TaskLook.hpp	/^  Pen highlight_pen;$/;"	m	struct:TaskLook
history	Computer/ClimbAverageCalculator.hpp	/^  HistoryItem history[MAX_HISTORY];$/;"	m	class:ClimbAverageCalculator
hit_radius	Screen/Layout.cpp	/^  unsigned hit_radius = 10;$/;"	m	namespace:Layout	file:
hoff	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t hoff;$/;"	m	struct:__anon175
home	Engine/Waypoint/Waypoint.hpp	/^    bool home:1;$/;"	m	struct:Waypoint::Flags
home	Engine/Waypoint/Waypoints.hpp	/^  WaypointPtr home;$/;"	m	class:Waypoints
home	Logger/ExternalLogger.cpp	/^  const Waypoint *home;$/;"	m	class:DeclareJob	file:
home_location	Computer/Settings.hpp	/^  GeoPoint home_location;$/;"	m	struct:PlacesOfInterestSettings
home_location_available	Computer/Settings.hpp	/^  bool home_location_available;$/;"	m	struct:PlacesOfInterestSettings
home_waypoint	Computer/Settings.hpp	/^  int home_waypoint;$/;"	m	struct:PlacesOfInterestSettings
homepoint	Device/Driver/Volkslogger/vlapi2.h	/^      WPT homepoint;$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
homogeneous_tps	Engine/Task/Factory/Constraints.hpp	/^  bool homogeneous_tps;$/;"	m	struct:TaskFactoryConstraints
horizon	Look/Look.hpp	/^  HorizonLook horizon;$/;"	m	struct:Look
hour	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
hour	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t hour;$/;"	m	struct:__anon180
hour	Time/BrokenTime.hpp	/^  uint8_t hour;$/;"	m	struct:BrokenTime
hour	Weather/ParsedMETAR.hpp	/^  uint8_t hour, minute;$/;"	m	struct:ParsedMETAR
hpenergywts	Terrain/jasper/jpc/jpc_qmfb.h	/^	const double *hpenergywts;$/;"	m	struct:__anon128
hsamp	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t hsamp;$/;"	m	struct:__anon159
hsamp	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t hsamp;$/;"	m	struct:__anon137
hstep	Terrain/jasper/jas_image.h	/^	jas_image_coord_t hstep;$/;"	m	struct:__anon125
hstep	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t hstep;$/;"	m	struct:__anon151
hstep_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t hstep_;$/;"	m	struct:__anon123
hsubstep	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t hsubstep;$/;"	m	struct:__anon151
humidity	Dialogs/Device/DeviceListDialog.cpp	/^    bool humidity:1;$/;"	m	struct:final::Flags	file:
humidity	NMEA/Info.hpp	/^  double humidity;$/;"	m	struct:NMEAInfo
humidity_available	NMEA/Info.hpp	/^  bool humidity_available;$/;"	m	struct:NMEAInfo
hwVersion	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE hwVersion;$/;"	m	struct:IMI::TDeclarationHeader
hwVersion	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE hwVersion;$/;"	m	struct:IMI::TDeviceInfo
i	Computer/Wind/WindEKFGlue.hpp	/^  unsigned i;$/;"	m	class:WindEKFGlue
i	Device/Driver/Volkslogger/vlconv.cpp	/^  int i;$/;"	m	class:C2	file:
i	Device/SettingsMap.hpp	/^    typename Map::const_iterator i;$/;"	m	class:DeviceSettingsMap::const_iterator
i	Dialogs/Device/DeviceListDialog.cpp	/^    uint16_t i;$/;"	m	union:final::Item	file:
i	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  unsigned i;$/;"	m	class:InfoBoxPreview	file:
i	Engine/Trace/Trace.cpp	/^  I i;$/;"	m	class:PointerIterator	file:
i	Math/WindowFilter.hpp	/^  unsigned i = 0;$/;"	m	class:WindowFilter
i	Screen/Memory/PixelTraits.hpp	/^    integer_type i;$/;"	m	union:BGRAPixelTraits::U
i	Util/OverwritingRingBuffer.hpp	/^    unsigned i;$/;"	m	class:TrivialOverwritingRingBuffer::const_iterator
i2c_addr	Device/Config.hpp	/^  unsigned i2c_addr;$/;"	m	struct:DeviceConfig
i2c_bus	Device/Config.hpp	/^  unsigned i2c_bus;$/;"	m	struct:DeviceConfig
i2cbaro	Device/Descriptor.hpp	/^  I2CbaroDevice *i2cbaro[3]; \/\/ static, pitot, tek; in any order$/;"	m	class:final
i2cbaro_class	Android/I2CbaroDevice.cpp	/^static Java::TrivialClass i2cbaro_class;$/;"	v	file:
i2cbaro_ctor	Android/I2CbaroDevice.cpp	/^static jmethodID i2cbaro_ctor, close_method;$/;"	v	file:
iDescription	Waypoint/WaypointReaderSeeYou.hpp	/^  unsigned iDescription = 10;$/;"	m	class:final
iFrequency	Waypoint/WaypointReaderSeeYou.hpp	/^  unsigned iFrequency = 9;$/;"	m	class:final
ias	IGC/IGCFix.hpp	/^  int16_t ias;$/;"	m	struct:IGCFix
ibkDown	InfoBoxes/Content/Base.hpp	/^    ibkDown = -1,$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
ibkLeft	InfoBoxes/Content/Base.hpp	/^    ibkLeft = -2,$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
ibkRight	InfoBoxes/Content/Base.hpp	/^    ibkRight = 2$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
ibkUp	InfoBoxes/Content/Base.hpp	/^    ibkUp = 1,$/;"	e	enum:InfoBoxContent::InfoBoxKeyCodes
icao_code	Weather/ParsedMETAR.hpp	/^  StaticString<5> icao_code;$/;"	m	struct:ParsedMETAR
iccp	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t *iccp;$/;"	m	struct:__anon111
iccplen	Terrain/jasper/jp2/jp2_cod.h	/^	int iccplen;$/;"	m	struct:__anon111
iccprof	Terrain/jasper/jas_cm.h	/^	jas_iccprof_t *iccprof;$/;"	m	struct:__anon104
icon	Form/TabDisplay.hpp	/^  const MaskedIcon *icon;$/;"	m	class:TabButton
icon	Look/Look.hpp	/^  IconLook icon;$/;"	m	struct:Look
icon	Look/NOAALook.hpp	/^  MaskedIcon icon;$/;"	m	struct:NOAALook
icon	Topography/TopographyFile.hpp	/^  const ResourceId icon, big_icon;$/;"	m	class:TopographyFile
icon	Topography/TopographyFileRenderer.hpp	/^  MaskedIcon icon;$/;"	m	class:final
icon_list	Topography/TopographyStore.cpp	/^static constexpr LOOKUP_ICON icon_list[] = {$/;"	v	file:
id	Android/TextUtil.hpp	/^    unsigned id;$/;"	m	struct:TextUtil::Texture
id	Cloud/Client.hpp	/^  const unsigned id;$/;"	m	struct:CloudClient
id	Device/Driver/CAI302/Protocol.hpp	/^    char id[3];$/;"	m	struct:CAI302::GeneralInfo
id	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t id;$/;"	m	struct:CAI302::Navpoint
id	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE id, device;$/;"	m	struct:IMI::TDeclarationHeader
id	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE id:3;$/;"	m	struct:IMI::FixE
id	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::Fix
id	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::FixB
id	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::FixB2
id	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD id:3;$/;"	m	struct:IMI::FixK
id	Device/Driver/LX/LXN.hpp	/^    uint16_t id;$/;"	m	struct:LXN::FlightInfo
id	Dialogs/Traffic/TrafficList.cpp	/^    FlarmId id;$/;"	m	struct:TrafficListWidget::Item	file:
id	Engine/Waypoint/Waypoint.hpp	/^  unsigned id;$/;"	m	struct:Waypoint
id	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(7)> id;$/;"	m	struct:FlarmNetRecord
id	FLARM/NameDatabase.hpp	/^    FlarmId id;$/;"	m	struct:FlarmNameDatabase::Record
id	FLARM/Traffic.hpp	/^  FlarmId id;$/;"	m	class:FlarmTraffic::AircraftType
id	Form/Button.hpp	/^  int id;$/;"	m	class:Button
id	Form/CheckBox.hpp	/^  int id;$/;"	m	class:CheckBoxControl
id	Form/DataField/Enum.hpp	/^    unsigned id;$/;"	m	class:final::Entry
id	Form/DataField/Enum.hpp	/^  unsigned id;$/;"	m	struct:StaticEnumChoice
id	GliderLink/Traffic.hpp	/^  GliderLinkId id;$/;"	m	struct:GliderLinkTraffic
id	IGC/IGCHeader.hpp	/^  char id[4];$/;"	m	struct:IGCHeader
id	InfoBoxes/InfoBoxWindow.hpp	/^  const unsigned id;$/;"	m	class:InfoBoxWindow
id	Kobo/Model.cpp	/^  const char *id;$/;"	m	struct:__anon211	file:
id	Kobo/WPASupplicant.hpp	/^  int id;$/;"	m	struct:WifiConfiguredNetworkInfo
id	Kobo/WifiDialog.cpp	/^    int id;$/;"	m	struct:final::NetworkInfo	file:
id	MapWindow/Items/MapItem.hpp	/^  FlarmId id;$/;"	m	struct:TrafficMapItem
id	MapWindow/Items/MapItem.hpp	/^  uint32_t id, time_of_day_ms;$/;"	m	struct:SkyLinesTrafficMapItem
id	ResourceId.hpp	/^  unsigned id;$/;"	m	class:ResourceId
id	Screen/OpenGL/Buffer.hpp	/^  GLuint id;$/;"	m	class:GLBuffer
id	Screen/OpenGL/FrameBuffer.hpp	/^  GLuint id;$/;"	m	class:GLFrameBuffer
id	Screen/OpenGL/Program.hpp	/^  const GLuint id;$/;"	m	class:GLProgram
id	Screen/OpenGL/Program.hpp	/^  const GLuint id;$/;"	m	class:GLShader
id	Screen/OpenGL/RenderBuffer.hpp	/^  GLuint id;$/;"	m	class:GLRenderBuffer
id	Screen/OpenGL/Texture.hpp	/^  GLuint id;$/;"	m	class:GLTexture
id	Terrain/jasper/jas_image.h	/^	int id;$/;"	m	struct:__anon127
id	Terrain/jasper/jas_tvp.h	/^	int id;$/;"	m	struct:__anon105
id	Terrain/jasper/jpc/jpc_cs.c	/^	int id;$/;"	m	struct:__anon156	file:
id	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t id;$/;"	m	struct:__anon179
id	Terrain/jasper/jpc/jpc_dec.c	/^	uint_fast16_t id;$/;"	m	struct:__anon154	file:
id	Thread/Thread.hpp	/^  DWORD id;$/;"	m	class:Thread
id	Topography/shapelib/mapserver.h	/^    int id; \/* corresponding label *\/$/;"	m	struct:__anon47
id	Tracking/SkyLines/Protocol.hpp	/^  uint16_t id;$/;"	m	struct:SkyLinesTracking::ACKPacket
id	Tracking/SkyLines/Protocol.hpp	/^  uint16_t id;$/;"	m	struct:SkyLinesTracking::PingPacket
id	Widget/ActionWidget.hpp	/^  const int id;$/;"	m	class:ActionWidget
id	Widget/ButtonWidget.hpp	/^  int id;$/;"	m	class:ButtonWidget
id	Widget/QuestionWidget.hpp	/^    int id;$/;"	m	struct:QuestionWidget::Button
id_set	Cloud/Client.hpp	/^  IdSet id_set;$/;"	m	class:CloudClientContainer
ideal_polar	Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients ideal_polar;$/;"	m	class:GlidePolar
idle	OS/SystemLoad.cpp	/^  long busy, idle;$/;"	m	struct:cpu	file:
idle_clock	Computer/GlideComputer.hpp	/^  PeriodClock idle_clock;$/;"	m	class:GlideComputer
idle_min	Thread/WorkerThread.hpp	/^  const std::chrono::steady_clock::duration period_min, idle_min, delay;$/;"	m	class:WorkerThread
ids	Topography/shapelib/maptree.h	/^    ms_int32 *ids;$/;"	m	struct:shape_tree_node
ids_acked	Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<const AbstractAirspace *,64> ids_inside, ids_warning, ids_acked;$/;"	m	class:AirspaceWarningCopy
ids_inside	Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<const AbstractAirspace *,64> ids_inside, ids_warning, ids_acked;$/;"	m	class:AirspaceWarningCopy
ids_warning	Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<const AbstractAirspace *,64> ids_inside, ids_warning, ids_acked;$/;"	m	class:AirspaceWarningCopy
idx	Lua/Util.hxx	/^	int idx;$/;"	m	struct:Lua::StackIndex
ifastcosine	Math/Angle.hpp	/^  inline int ifastcosine() const {$/;"	f	class:Angle
ifastcosine	Math/FastTrig.hpp	/^ifastcosine(double x)$/;"	f
ifastsine	Math/Angle.hpp	/^  inline int ifastsine() const {$/;"	f	class:Angle
ifastsine	Math/FastTrig.hpp	/^ifastsine(double x)$/;"	f
igc_filter	Device/Driver/Volkslogger/vlapihlp.cpp	/^char *igc_filter(char *st) {$/;"	f
igcfile_version	Device/Driver/Volkslogger/vlconv.cpp	/^static constexpr int igcfile_version = 424;$/;"	v	file:
ignore_comma	Logger/GRecord.hpp	/^  bool ignore_comma;$/;"	m	class:GRecord
ignore_following	Waypoint/WaypointReaderSeeYou.hpp	/^  bool ignore_following = false;$/;"	m	class:final
ignore_lines	Waypoint/WaypointReaderOzi.hpp	/^  unsigned ignore_lines = 4;$/;"	m	class:final
ignore_single_click	MapWindow/GlueMapWindow.hpp	/^  bool ignore_single_click = false;$/;"	m	class:GlueMapWindow
ihdr	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_ihdr_t ihdr;$/;"	m	union:__anon117::__anon118
ihypot	Math/FastMath.hpp	/^ihypot(int x, int y)$/;"	f
ilabelstate	Topography/shapelib/mapserver.h	/^    int     ilabelstate;$/;"	m	struct:__anon56
ilabeltype	Topography/shapelib/mapserver.h	/^    int     ilabeltype;$/;"	m	struct:__anon56
ilec_driver	Device/Driver/ILEC.cpp	/^const struct DeviceRegister ilec_driver = {$/;"	v	typeref:struct:DeviceRegister
illum	Terrain/jasper/jas_icc.h	/^	jas_iccxyz_t illum; \/* illuminant *\/$/;"	m	struct:__anon189
image	Terrain/RasterRenderer.hpp	/^  RawBitmap *image = nullptr;$/;"	m	class:RasterRenderer
image	Terrain/jasper/jpc/jpc_dec.h	/^	jas_image_t *image;$/;"	m	struct:__anon152
image	Topography/shapelib/mapserver.h	/^    char *image;$/;"	m	struct:__anon53
image	Topography/shapelib/mapserver.h	/^    imageObj *image;$/;"	m	struct:tileCacheObj
imageObj	Topography/shapelib/mapserver.h	/^  struct imageObj{$/;"	s
image_types	Weather/PCMet/Images.cpp	/^const PCMet::ImageType PCMet::image_types[] = {$/;"	m	class:PCMet	file:
image_window	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WndOwnerDrawFrame image_window;$/;"	m	class:final	file:
imagecache	Topography/shapelib/mapserver.h	/^    struct imageCacheObj *imagecache;$/;"	m	struct:__anon52	typeref:struct:__anon52::imageCacheObj
imagecachesize	Topography/shapelib/mapserver.h	/^    int imagecachesize;$/;"	m	struct:__anon52
imagecolor	Topography/shapelib/mapserver.h	/^    colorObj imagecolor; \/* holds the initial image color value *\/$/;"	m	struct:mapObj
imagecolor	Topography/shapelib/mapserver.h	/^    colorObj imagecolor;$/;"	m	struct:__anon54
imagecolor	Topography/shapelib/mapserver.h	/^    colorObj imagecolor;$/;"	m	struct:__anon55
imagemap	Topography/shapelib/mapserver.h	/^      char *imagemap;$/;"	m	union:imageObj::__anon58
imagemode	Topography/shapelib/mapserver.h	/^    int  imagemode; \/* MS_IMAGEMODE_* value. *\/$/;"	m	struct:__anon39
imagepath	Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl, *temppath;$/;"	m	struct:__anon42
imagepath	Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl;$/;"	m	struct:imageObj
imagequality	Topography/shapelib/mapserver.h	/^    int imagequality; \/* TODO - Deprecated *\/$/;"	m	struct:mapObj
images	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  StaticArray<Bitmap, 5> images;$/;"	m	class:final	file:
imagetype	Topography/shapelib/mapserver.h	/^    char *imagetype; \/* name of current outputformat *\/$/;"	m	struct:mapObj
imageurl	Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl, *temppath;$/;"	m	struct:__anon42
imageurl	Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl;$/;"	m	struct:imageObj
img	Topography/shapelib/mapserver.h	/^    } img;$/;"	m	struct:imageObj	typeref:union:imageObj::__anon58
img_mask	Topography/shapelib/mapserver.h	/^    ms_bitarray  img_mask;$/;"	m	struct:imageObj
imi	Device/RecordedFlight.hpp	/^    uint32_t imi;$/;"	m	union:RecordedFlightInfo::__anon197
imi_driver	Device/Driver/IMI/Register.cpp	/^const struct DeviceRegister imi_driver = {$/;"	v	typeref:struct:DeviceRegister
immutable	Topography/shapelib/mapprimitive.h	/^  %immutable;$/;"	m	struct:__anon78
immutable	Topography/shapelib/mapprimitive.h	/^  %immutable;$/;"	m	struct:__anon79
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon31
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon39
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon42
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon43
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon51
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon52
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon53
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:__anon55
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:classObj
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:imageObj
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:labelObj
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:layerObj
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:mapObj
immutable	Topography/shapelib/mapserver.h	/^    %immutable;$/;"	m	struct:styleObj
immutable	Topography/shapelib/mapserver.h	/^  %immutable;$/;"	m	struct:styleObj
immutable	Topography/shapelib/mapshape.h	/^    %immutable;$/;"	m	struct:__anon83
immutable	Topography/shapelib/mapshape.h	/^    %immutable;$/;"	m	struct:__anon85
import_uint32	Language/MOFile.hpp	/^  uint32_t import_uint32(uint32_t x) const {$/;"	f	class:MOFile
important_label_font	Look/TopographyLook.hpp	/^  Font important_label_font;$/;"	m	struct:TopographyLook
important_label_threshold	Topography/TopographyFile.hpp	/^  const double important_label_threshold;$/;"	m	class:TopographyFile
in	Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t *in;$/;"	m	struct:__anon152
in	Terrain/jasper/jpc/jpc_mqdec.h	/^	jas_stream_t *in;$/;"	m	struct:__anon133
inTask	Renderer/WaypointLabelList.hpp	/^    bool inTask;$/;"	m	struct:WaypointLabelList::Label
in_addr_t	Net/IPv4Address.hxx	/^	typedef uint32_t in_addr_t;$/;"	t	class:IPv4Address
in_encounter	Computer/ThermalBandComputer.hpp	/^  bool in_encounter;$/;"	m	class:ThermalBandComputer
in_task	Renderer/WaypointRenderer.cpp	/^  bool in_task;$/;"	m	struct:VisibleWaypoint	file:
inactive_background_color	Look/DialogLook.hpp	/^    Color inactive_background_color;$/;"	m	struct:DialogLook::__anon18
inbuffer	Terrain/jasper/jpc/jpc_mqdec.h	/^	jas_uchar inbuffer;$/;"	m	struct:__anon133
inclrspc	Terrain/jasper/jas_cm.h	/^	int inclrspc;$/;"	m	struct:__anon100
incltagtree	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_tagtree_t *incltagtree;$/;"	m	struct:__anon146
include_travel_to_start	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  const bool include_travel_to_start;$/;"	m	class:final
increment	Audio/ToneSynthesiser.hpp	/^  unsigned volume = 100, angle = 0, increment = 0;$/;"	m	class:ToneSynthesiser
incremental	Engine/Contest/Solvers/ContestDijkstra.cpp	/^   incremental(false)$/;"	f
incremental	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  bool incremental;$/;"	m	class:ContestDijkstra
incremental	Engine/Contest/Solvers/TriangleContest.hpp	/^  bool incremental;$/;"	m	class:TriangleContest
incremental_speed	Engine/Task/Computer/DistanceStatComputer.hpp	/^  IncrementalSpeedComputer incremental_speed;$/;"	m	class:DistanceStatComputer
ind	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t ind;$/;"	m	struct:__anon171
ind	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t ind;$/;"	m	struct:__anon172
ind	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t ind;$/;"	m	struct:__anon139
ind	Terrain/jasper/jpc/jpc_mqcod.h	/^	int_fast16_t ind;$/;"	m	struct:__anon134
index	Android/BMP085Device.hpp	/^  unsigned index;$/;"	m	class:final
index	Android/I2CbaroDevice.hpp	/^  unsigned index;$/;"	m	class:final
index	Android/NunchuckDevice.hpp	/^  unsigned index;$/;"	m	class:final
index	Android/VoltageDevice.hpp	/^  unsigned index;$/;"	m	class:final
index	Apple/InternalSensors.hpp	/^  unsigned int index;$/;"	m	class:InternalSensors
index	Device/Descriptor.hpp	/^  const unsigned index;$/;"	m	class:final
index	InfoBoxes/Content/Alternate.hpp	/^  unsigned index;$/;"	m	class:InfoBoxContentAlternateGR
index	InfoBoxes/Content/Alternate.hpp	/^  unsigned index;$/;"	m	class:InfoBoxContentAlternateName
index	MapWindow/Items/MapItem.hpp	/^  int index;$/;"	m	struct:TaskOZMapItem
index	Renderer/TaskPointRenderer.hpp	/^  unsigned index;$/;"	m	class:TaskPointRenderer
index	Terrain/ScanLine.cpp	/^  unsigned index;$/;"	m	struct:GridLocation	file:
index	Topography/shapelib/mapprimitive.h	/^  int index;$/;"	m	struct:__anon80
index	Topography/shapelib/mapprimitive.h	/^  long index;$/;"	m	struct:__anon79
index	Topography/shapelib/mapserver.h	/^    int index;$/;"	m	struct:__anon29
index	Topography/shapelib/mapserver.h	/^    int index;$/;"	m	struct:layerObj
index_count	Topography/XShape.hpp	/^  uint16_t *index_count[THINNING_LEVELS];$/;"	m	class:XShape
index_max	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned index_min, index_max; \/\/ [index_min, index_max)$/;"	m	struct:TriangleContest::TurnPointRange
index_min	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned index_min, index_max; \/\/ [index_min, index_max)$/;"	m	struct:TriangleContest::TurnPointRange
index_to_point	Engine/Route/RoutePolar.cpp	/^static constexpr FlatGeoPoint index_to_point[] = {$/;"	v	file:
indicated_airspeed	NMEA/Info.hpp	/^  double indicated_airspeed;$/;"	m	struct:NMEAInfo
indices	Topography/XShape.hpp	/^  uint16_t *indices[THINNING_LEVELS];$/;"	m	class:XShape
info	Dialogs/Device/LX/ManageLX16xxDialog.cpp	/^  const DeviceInfo info;$/;"	m	class:ManageLX16xxWidget	file:
info	Dialogs/Device/LX/ManageNanoDialog.cpp	/^  const DeviceInfo info;$/;"	m	class:final	file:
info	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  const DeviceInfo info;$/;"	m	class:final	file:
info	Dialogs/dlgAnalysis.cpp	/^    PixelRect info;$/;"	m	struct:final::Layout	file:
info	Dialogs/dlgAnalysis.cpp	/^  WndFrame info;$/;"	m	class:final	file:
info	Terrain/jasper/jp2/jp2_cod.h	/^	const struct jp2_boxinfo_s *info;$/;"	m	struct:__anon117	typeref:struct:__anon117::jp2_boxinfo_s
info_box	Look/Look.hpp	/^  InfoBoxLook info_box;$/;"	m	struct:Look
info_box_geometry_list	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice info_box_geometry_list[] = {$/;"	v	file:
info_boxes	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    InfoBoxLayout::Layout info_boxes;$/;"	m	struct:final::Layout	file:
info_boxes	UISettings.hpp	/^  InfoBoxSettings info_boxes;$/;"	m	struct:UISettings
info_dock	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  DockWindow info_dock;$/;"	m	class:final	file:
info_labels_font	Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
info_units_font	Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
info_values_font	Look/FlarmTrafficLook.hpp	/^  Font info_values_font, info_units_font, info_labels_font, call_sign_font;$/;"	m	struct:FlarmTrafficLook
info_widget	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  WaypointInfoWidget info_widget;$/;"	m	class:final	file:
infobox_border_list	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice infobox_border_list[] = {$/;"	v	file:
infobox_config	PageSettings.hpp	/^  InfoBoxConfig infobox_config;$/;"	m	struct:PageLayout
infoboxes	InfoBoxes/InfoBoxManager.cpp	/^static InfoBoxWindow *infoboxes[InfoBoxSettings::Panel::MAX_CONTENTS];$/;"	v	file:
infoboxes_dirty	InfoBoxes/InfoBoxManager.cpp	/^static bool infoboxes_dirty = false;$/;"	v	file:
infoboxes_hidden	InfoBoxes/InfoBoxManager.cpp	/^static bool infoboxes_hidden = false;$/;"	v	file:
init	Terrain/jasper/jp2/jp2_cod.h	/^	void (*init)(jp2_box_t *box);$/;"	m	struct:jp2_boxops_s
initSurface	Android/NativeView.hpp	/^  bool initSurface() {$/;"	f	class:NativeView
init_surface_method	Android/NativeView.cpp	/^jmethodID NativeView::init_surface_method, NativeView::deinit_surface_method;$/;"	m	class:NativeView	file:
init_surface_method	Android/NativeView.hpp	/^  static jmethodID init_surface_method, deinit_surface_method;$/;"	m	class:NativeView
initial_active_task_point	Dialogs/Task/TargetDialog.cpp	/^  unsigned initial_active_task_point;$/;"	m	class:TargetWidget	file:
initial_value	Dialogs/ListPicker.cpp	/^  unsigned initial_value;$/;"	m	class:ListPickerWidget	file:
initialgap	Topography/shapelib/mapserver.h	/^    double initialgap;$/;"	m	struct:styleObj
initialised	Computer/WarningComputer.hpp	/^  bool initialised;$/;"	m	class:WarningComputer
initialised	Engine/Task/Computer/ElementStatComputer.hpp	/^  bool initialised;$/;"	m	class:ElementStatComputer
initialised	Widget/PagerWidget.hpp	/^  bool initialised, prepared, visible;$/;"	m	class:PagerWidget
initialised	Widget/RowFormWidget.hpp	/^    bool initialised, prepared, shown;$/;"	m	struct:RowFormWidget::Row
initializeRasterBuffer	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*initializeRasterBuffer)(rasterBufferObj *rb, int width, int height, int mode);$/;"	m	struct:rendererVTableObj
initialized	Util/Manual.hxx	/^	bool initialized = false;$/;"	m	class:Manual
inmapfile	Topography/shapelib/mapserver.h	/^    int inmapfile; \/* boolean value for writing *\/$/;"	m	struct:__anon39
inner_circle_pen	Look/ThermalAssistantLook.hpp	/^  Pen inner_circle_pen;$/;"	m	struct:ThermalAssistantLook
inner_radius	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  double inner_radius;$/;"	m	class:AnnularSectorZone
inner_radius	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  double inner_radius;$/;"	m	class:final
input	Device/Port/TCPClientPort.hpp	/^  char input[4096];$/;"	m	class:final
input	Device/Port/TCPPort.hpp	/^  char input[4096];$/;"	m	class:final
input	Device/Port/UDPPort.hpp	/^  char input[4096];$/;"	m	class:final
input	Terrain/jasper/jas_icc.h	/^	int (*input)(struct jas_iccattrval_s *, jas_stream_t *, int);$/;"	m	struct:__anon187
input_config	Input/InputEvents.cpp	/^static InputConfig input_config;$/;"	v	file:
input_event_funcs	Lua/InputEvent.cpp	/^static constexpr struct luaL_Reg input_event_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
input_event_methods	Lua/InputEvent.cpp	/^static constexpr struct luaL_Reg input_event_methods[] = {$/;"	v	typeref:struct:luaL_Reg	file:
input_queue	Event/Poll/Queue.hpp	/^  InputEventQueue input_queue;$/;"	m	class:final
input_queue	Event/Poll/Queue.hpp	/^  WaylandEventQueue input_queue;$/;"	m	class:final
input_queue	Event/Poll/Queue.hpp	/^  X11EventQueue input_queue;$/;"	m	class:final
inputs	NMEA/VegaSwitchState.hpp	/^  unsigned inputs, outputs;$/;"	m	struct:VegaSwitchState
insert	Util/TrivialArray.hxx	/^	void insert(size_type i, I _begin, I _end) {$/;"	f	class:TrivialArray
inside_oz	Engine/Task/Stats/TaskStats.hpp	/^  bool inside_oz;$/;"	m	class:TaskStats
inst_speed_fast	Engine/Task/Computer/TaskStatsComputer.hpp	/^  Filter inst_speed_fast;$/;"	m	class:TaskStatsComputer
inst_speed_fast	Engine/Task/Stats/TaskStats.hpp	/^  double inst_speed_fast;$/;"	m	class:TaskStats
inst_speed_slow	Engine/Task/Computer/TaskStatsComputer.hpp	/^  Filter inst_speed_slow;$/;"	m	class:TaskStatsComputer
inst_speed_slow	Engine/Task/Stats/TaskStats.hpp	/^  double inst_speed_slow;$/;"	m	class:TaskStats
instance	Android/DownloadManager.cpp	/^static AndroidDownloadManager *instance;$/;"	v	file:
instance	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^static TerrainDisplayConfigPanel *instance;$/;"	v	file:
int16_t	zzip/stdint.h	/^    typedef unsigned int uint16_t;      typedef signed int int16_t;$/;"	t
int16_t	zzip/stdint.h	/^    typedef unsigned short uint16_t;    typedef signed short int16_t;$/;"	t
int32_t	zzip/stdint.h	/^    typedef unsigned int uint32_t;      typedef signed int int32_t;$/;"	t
int32_t	zzip/stdint.h	/^    typedef unsigned long uint32_t;     typedef signed long int32_t;$/;"	t
int64_t	zzip/stdint.h	/^typedef unsigned _zzip___int64 uint64_t; typedef _zzip___int64 int64_t;$/;"	t
int8_t	zzip/stdint.h	/^    typedef unsigned char uint8_t;      typedef signed char int8_t;$/;"	t
int_value	Form/DataField/ComboList.hpp	/^    int int_value;$/;"	m	struct:ComboList::Item
intabs	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t **intabs;$/;"	m	struct:__anon186
intabs	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t **intabs;$/;"	m	struct:__anon185
intabsbuf	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t *intabsbuf;$/;"	m	struct:__anon186
intabsbuf	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t *intabsbuf;$/;"	m	struct:__anon185
integer_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::integer_type integer_type;$/;"	t	struct:PixelIntegerAdapter
integer_type	Screen/Memory/PixelTraits.hpp	/^  typedef uint32_t integer_type;$/;"	t	struct:BGRAPixelTraits
integer_type	Screen/Memory/PixelTraits.hpp	/^  typedef uint8_t integer_type;$/;"	t	struct:GreyscalePixelTraits
intent	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t intent; \/* rendering intent *\/$/;"	m	struct:__anon189
intercept_icon	Look/AirspaceLook.hpp	/^  MaskedIcon intercept_icon;$/;"	m	struct:AirspaceLook
interlace	Topography/shapelib/mapserver.h	/^    int interlace; \/* TODO - Deprecated *\/$/;"	m	struct:mapObj
interlace	Topography/shapelib/mapserver.h	/^    int interlace;$/;"	m	struct:__anon54
interlace	Topography/shapelib/mapserver.h	/^    int interlace;$/;"	m	struct:__anon55
intermediate_types	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet intermediate_types;$/;"	m	class:AbstractTaskFactory
internal	Device/RecordedFlight.hpp	/^  } internal;$/;"	m	struct:RecordedFlightInfo	typeref:union:RecordedFlightInfo::__anon197
internal_polars	Polar/PolarStore.cpp	/^static constexpr PolarStore::Item internal_polars[] =$/;"	v	file:
internal_sensors	Device/Descriptor.hpp	/^  InternalSensors *internal_sensors;$/;"	m	class:final
interpolation	Screen/Bitmap.hpp	/^  bool interpolation = false;$/;"	m	class:final
intersection_test	Engine/Task/Unordered/AbortTask.hpp	/^  AbortIntersectionTest* intersection_test;$/;"	m	class:AbortTask
intersection_test	Task/ProtectedTaskManager.hpp	/^  ReachIntersectionTest intersection_test;$/;"	m	class:ProtectedTaskManager
intersections	Engine/Airspace/AirspaceIntersectionVisitor.hpp	/^  AirspaceIntersectionVector intersections;$/;"	m	class:AirspaceIntersectionVisitor
intersections	Renderer/AirspaceLabelRenderer.hpp	/^  StaticArray<GeoPoint,32> intersections;$/;"	m	class:AirspaceLabelRenderer
intersections	Renderer/AirspaceRenderer.hpp	/^  StaticArray<GeoPoint,32> intersections;$/;"	m	class:AirspaceRenderer
interval	Tracking/LiveTrack24/Settings.hpp	/^  unsigned interval;$/;"	m	struct:LiveTrack24::Settings
interval	Tracking/SkyLines/Settings.hpp	/^  unsigned interval;$/;"	m	struct:SkyLinesTracking::Settings
intervals	Topography/shapelib/mapserver.h	/^    int intervals;$/;"	m	struct:__anon54
intptr_t	zzip/stdint.h	/^    typedef int intptr_t;$/;"	t
intptr_t	zzip/stdint.h	/^    typedef int64_t intptr_t;$/;"	t
intptr_t	zzip/stdint.h	/^    typedef long intptr_t;$/;"	t
intval	Topography/shapelib/mapserver.h	/^    int intval;$/;"	m	union:__anon33
intval	Topography/shapelib/mapserver.h	/^    int intval;$/;"	m	union:__anon34
inv_d	Engine/Route/RouteLink.hpp	/^  double inv_d;$/;"	m	struct:RouteLink
inv_draw_scale	Projection/Projection.hpp	/^  double inv_draw_scale;$/;"	m	class:Projection
inv_dt	Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  double inv_dt;$/;"	m	class:TaskSolveTravelled
inv_gradient	Engine/Route/RoutePolar.hpp	/^    double inv_gradient;$/;"	m	struct:RoutePolar::RoutePolarPoint
inv_k1	Atmosphere/Pressure.cpp	29;"	d	file:
inv_k2	Atmosphere/Pressure.cpp	31;"	d	file:
inv_mc	Engine/GlideSolvers/GlidePolar.hpp	/^  double inv_mc;$/;"	m	class:GlidePolar
inv_mc	Engine/Route/RoutePolars.hpp	/^  double inv_mc;$/;"	m	class:RoutePolars
invalid_color	Look/GestureLook.hpp	/^  Color color, invalid_color;$/;"	m	struct:GestureLook
invalid_pen	Look/GestureLook.hpp	/^  Pen pen, invalid_pen;$/;"	m	struct:GestureLook
invalidated	Screen/TopWindow.hpp	/^  bool invalidated;$/;"	m	class:TopWindow
inverse	CrossSection/CrossSectionRenderer.hpp	/^  const bool inverse;$/;"	m	class:CrossSectionRenderer
inverse	HorizonWidget.cpp	/^  const bool& inverse;$/;"	m	class:HorizonWindow	file:
inverse	InfoBoxes/InfoBoxSettings.hpp	/^  bool inverse, use_colors;$/;"	m	struct:InfoBoxSettings
inverse	Look/InfoBoxLook.hpp	/^  bool inverse;$/;"	m	struct:InfoBoxLook
inverse	Look/ThermalBandLook.hpp	/^  bool inverse;$/;"	m	struct:ThermalBandLook
inverse	Look/TraceHistoryLook.hpp	/^  bool inverse;$/;"	m	struct:TraceHistoryLook
inverse	Look/VarioLook.hpp	/^  bool inverse, colors;$/;"	m	struct:VarioLook
invert_fragment_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char invert_fragment_shader[] =$/;"	v	file:
invert_projection	Screen/OpenGL/Shaders.cpp	/^  GLint invert_projection, invert_texture;$/;"	m	namespace:OpenGL	file:
invert_shader	Screen/OpenGL/Shaders.cpp	/^  GLProgram *invert_shader;$/;"	m	namespace:OpenGL	file:
invert_texture	Screen/OpenGL/Shaders.cpp	/^  GLint invert_projection, invert_texture;$/;"	m	namespace:OpenGL	file:
invert_vertex_shader	Screen/OpenGL/Shaders.cpp	/^static const char *const invert_vertex_shader = texture_vertex_shader;$/;"	v	file:
invert_x	Event/Shared/RotatePointer.hpp	/^  bool invert_x = false, invert_y = false;$/;"	m	class:RotatePointer
invert_y	Event/Shared/RotatePointer.hpp	/^  bool invert_x = false, invert_y = false;$/;"	m	class:RotatePointer
invfastcosine	Math/Angle.hpp	/^  inline double invfastcosine() const {$/;"	f	class:Angle
invfastcosine	Math/FastTrig.hpp	/^invfastcosine(double x)$/;"	f
invgeotransform	Topography/shapelib/mapprimitive.h	/^  double invgeotransform[6]; \/* georef to pixel\/line *\/$/;"	m	struct:__anon81
io	zzip/file.h	/^    zzip_plugin_io_t io;$/;"	m	struct:zzip_file
io	zzip/lib.h	/^    zzip_plugin_io_t io;          \/* vtable for io routines *\/$/;"	m	struct:zzip_dir
io_context	Audio/ALSAPCMPlayer.hpp	/^  boost::asio::io_context &io_context;$/;"	m	class:ALSAPCMPlayer
io_context	Cloud/Main.cpp	/^  boost::asio::io_context &io_context;$/;"	m	class:final	file:
io_context	Device/Descriptor.hpp	/^  boost::asio::io_context &io_context;$/;"	m	class:final
io_context	Event/Poll/Queue.hpp	/^  boost::asio::io_context io_context;$/;"	m	class:DisplayOrientation
io_context	IO/Async/AsioThread.hpp	/^  boost::asio::io_context io_context;$/;"	m	class:final
ioio_helper	Android/Main.cpp	/^IOIOHelper *ioio_helper;$/;"	v
ioio_uart_id	Device/Config.hpp	/^  unsigned ioio_uart_id;$/;"	m	struct:DeviceConfig
ioprio_set	Thread/Util.hpp	/^ioprio_set(int which, int who, int ioprio)$/;"	f
ioprio_set_idle	Thread/Util.hpp	/^ioprio_set_idle()$/;"	f
ip_address	Device/Config.hpp	/^  StaticString<64> ip_address;$/;"	m	struct:DeviceConfig
ipr	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t ipr;$/;"	m	struct:__anon109
iround	Math/Util.hpp	/^iround(double x)$/;"	f
isAirport	Renderer/WaypointLabelList.hpp	/^    bool isAirport;$/;"	m	struct:WaypointLabelList::Label
isBGAEnhancedOptionZone	Task/TaskFileSeeYou.cpp	/^static bool isBGAEnhancedOptionZone(const SeeYouTurnpointInformation$/;"	f	file:
isBGAFixedCourseZone	Task/TaskFileSeeYou.cpp	/^static bool isBGAFixedCourseZone(const SeeYouTurnpointInformation &turnpoint_infos)$/;"	f	file:
isClickOnTarget	MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::isClickOnTarget(const PixelPoint pc) const$/;"	f	class:TargetMapWindow
isEnabled	Android/BluetoothHelper.cpp	/^BluetoothHelper::isEnabled(JNIEnv *env)$/;"	f	class:BluetoothHelper
isEnabled_method	Android/BluetoothHelper.cpp	/^  static jmethodID isEnabled_method;$/;"	m	namespace:BluetoothHelper	file:
isInSector	MapWindow/TargetMapWindowDrag.cpp	/^TargetMapWindow::isInSector(PixelPoint pt)$/;"	f	class:TargetMapWindow
isKeyhole	Task/TaskFileSeeYou.cpp	/^static bool isKeyhole(const SeeYouTurnpointInformation &turnpoint_infos)$/;"	f	file:
isLandable	Renderer/WaypointLabelList.hpp	/^    bool isLandable;$/;"	m	struct:WaypointLabelList::Label
isLeft	Geo/ConvexHull/PolygonInterior.cpp	/^isLeft( const FlatGeoPoint &P0, const FlatGeoPoint &P1, const FlatGeoPoint &P2 )$/;"	f	file:
isLeft	Geo/ConvexHull/PolygonInterior.cpp	/^isLeft( const GeoPoint &P0, const GeoPoint &P1, const GeoPoint &P2 )$/;"	f	file:
isWatchedWaypoint	Renderer/WaypointLabelList.hpp	/^    bool isWatchedWaypoint;$/;"	m	struct:WaypointLabelList::Label
is_active	Engine/Task/Unordered/AbortTask.hpp	/^  bool is_active;$/;"	m	class:AbortTask
is_char	Event/Poll/Linux/Translate.hpp	/^  bool is_char;$/;"	m	struct:__anon7
is_char	Event/Shared/Event.hpp	/^  bool is_char;$/;"	m	struct:Event
is_closed	Engine/Contest/Solvers/TriangleContest.hpp	/^  bool is_closed = false;$/;"	m	class:TriangleContest
is_closed	Engine/Task/Factory/Constraints.hpp	/^  bool is_closed;$/;"	m	struct:TaskFactoryConstraints
is_closing_quote_char	Util/ExtractParameters.cpp	/^static bool is_closing_quote_char(TCHAR const *s) {$/;"	f	file:
is_colibri	Device/Driver/LX/Internal.hpp	/^  bool is_colibri;$/;"	m	class:LXDevice
is_colibri	Device/Driver/LXERA/Internal.hpp	/^  bool is_colibri;$/;"	m	class:LXEraDevice
is_complete	Engine/Contest/Solvers/TriangleContest.hpp	/^  bool is_complete = false;$/;"	m	class:TriangleContest
is_convex	Engine/Airspace/AbstractAirspace.hpp	/^  mutable TriState is_convex;$/;"	m	class:AbstractAirspace
is_declaration	XML/Node.hpp	/^    bool is_declaration;$/;"	m	struct:XMLNode::Data
is_dhv	Engine/Contest/Solvers/XContestFree.cpp	/^   is_dhv(_is_dhv) {}$/;"	f
is_dhv	Engine/Contest/Solvers/XContestFree.hpp	/^  const bool is_dhv;$/;"	m	class:XContestFree
is_dhv	Engine/Contest/Solvers/XContestTriangle.cpp	/^   is_dhv(_is_dhv) {}$/;"	f
is_dhv	Engine/Contest/Solvers/XContestTriangle.hpp	/^  const bool is_dhv;$/;"	m	class:XContestTriangle
is_dithered	Android/Product.cpp	/^bool is_nook, is_dithered;$/;"	v
is_event	Device/Driver/LX/Convert.cpp	/^  bool is_event;$/;"	m	struct:Context	file:
is_forwarded_nano	Device/Driver/LX/Internal.hpp	/^  bool is_forwarded_nano;$/;"	m	class:LXDevice
is_forwarded_nano	Device/Driver/LXERA/Internal.hpp	/^  bool is_forwarded_nano;$/;"	m	class:LXEraDevice
is_fraction	Renderer/UnitSymbolRenderer.cpp	/^  bool is_fraction;$/;"	m	struct:UnitSymbolStrings	file:
is_line	Task/TaskFileSeeYou.cpp	/^  bool is_line;$/;"	m	struct:SeeYouTurnpointInformation	file:
is_locked	Dialogs/Task/TargetDialog.cpp	/^  bool is_locked;$/;"	m	class:TargetWidget	file:
is_lx16xx	Device/Driver/LX/Internal.hpp	/^  bool is_lx16xx;$/;"	m	class:LXDevice
is_lx16xx	Device/Driver/LXERA/Internal.hpp	/^  bool is_lx16xx;$/;"	m	class:LXEraDevice
is_lxera	Device/Driver/LXERA/LXEra.hpp	/^  bool is_lxera;$/;"	m	namespace:LXEra
is_mat	Engine/Task/Stats/TaskStats.hpp	/^  bool is_mat;$/;"	m	class:TaskStats
is_min	Engine/Task/PathSolvers/TaskDijkstra.cpp	/^   is_min(_is_min)$/;"	f
is_min	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  const bool is_min;$/;"	m	class:TaskDijkstra
is_nano	Device/Driver/LX/Internal.hpp	/^  bool is_nano;$/;"	m	class:LXDevice
is_nano	Device/Driver/LXERA/Internal.hpp	/^  bool is_nano;$/;"	m	class:LXEraDevice
is_nook	Android/Product.cpp	/^bool is_nook, is_dithered;$/;"	v
is_pointer	Event/Poll/Linux/Input.hpp	/^  bool is_pointer;$/;"	m	class:final
is_positive	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  const bool is_positive;$/;"	m	class:IncrementalSpeedComputer
is_simulator	Simulator.hpp	/^static inline bool is_simulator()$/;"	f
is_tmpfile	IO/FileOutputStream.hxx	/^	bool is_tmpfile = false;$/;"	m	class:final
is_trivial_ndebug	Util/TypeTraits.hpp	/^struct is_trivial_ndebug$/;"	s
is_utm	Waypoint/WaypointReaderCompeGPS.hpp	/^  bool is_utm = false;$/;"	m	class:final
is_utm	Waypoint/WaypointReaderFS.hpp	/^  bool is_utm = false;$/;"	m	class:final
is_v7	Device/Driver/LX/Internal.hpp	/^  bool is_v7;$/;"	m	class:LXDevice
is_v7	Device/Driver/LXERA/Internal.hpp	/^  bool is_v7;$/;"	m	class:LXEraDevice
isa_sea_level_density	Atmosphere/AirDensity.cpp	28;"	d	file:
isfallback	Topography/shapelib/mapserver.h	/^    int isfallback; \/\/ TRUE if this class should be applied if and only if$/;"	m	struct:classObj
iso	Engine/Task/Solvers/TaskOptTarget.hpp	/^  AATIsolineSegment iso;$/;"	m	class:final
iso_latin_1_to_tchar	IO/ConvertLineReader.cpp	/^iso_latin_1_to_tchar(TCHAR *dest, const char *src)$/;"	f	file:
isoline_pen	Look/TaskLook.hpp	/^  Pen isoline_pen;$/;"	m	struct:TaskLook
isopen	Topography/shapelib/mapshape.h	/^    int isopen;$/;"	m	struct:__anon85
isqrt4	Math/FastMath.cpp	/^isqrt4(unsigned val)$/;"	f
isreported	Topography/shapelib/maperror.h	/^    int isreported;$/;"	m	struct:errorObj
italic	Look/FontDescription.hpp	/^  bool bold, italic;$/;"	m	class:FontDescription
italic_font_path	Screen/FreeType/Font.cpp	/^static AllocatedPath italic_font_path = nullptr;$/;"	v	file:
item	Topography/shapelib/mapserver.h	/^      char* item;$/;"	m	struct:__anon62
item	Topography/shapelib/mapserver.h	/^    char *item;$/;"	m	struct:__anon29
itemObj	Topography/shapelib/mapprimitive.h	/^} itemObj;$/;"	t	typeref:struct:__anon80
item_height	Form/List.hpp	/^  unsigned item_height;$/;"	m	class:ListControl
item_help_callback	Dialogs/ListPicker.cpp	/^  ItemHelpCallback_t item_help_callback;$/;"	m	class:ListPickerWidget	file:
item_help_enabled	Form/DataField/Base.hpp	/^  bool item_help_enabled;$/;"	m	class:DataField
item_list	MapSettings.hpp	/^  MapItemListSettings item_list;$/;"	m	struct:MapSettings
item_renderer	Dialogs/ListPicker.cpp	/^  ListItemRenderer &item_renderer;$/;"	m	class:ListPickerWidget	file:
item_renderer	Form/List.hpp	/^  ListItemRenderer *item_renderer = nullptr;$/;"	m	class:ListControl
iteminfo	Topography/shapelib/mapserver.h	/^    void *iteminfo; \/* connection specific information necessary to retrieve values *\/$/;"	m	struct:layerObj
items	Dialogs/Airspace/AirspaceList.cpp	/^  AirspaceSelectInfoVector items;$/;"	m	class:final	file:
items	Dialogs/Device/DeviceListDialog.cpp	/^  Item items[NUMDEV];$/;"	m	class:final	file:
items	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  std::vector<Item> items;$/;"	m	class:final	file:
items	Dialogs/DownloadFilePicker.cpp	/^  std::vector<AvailableFile> items;$/;"	m	class:final	file:
items	Dialogs/FileManager.cpp	/^  TrivialArray<FileItem, 64u> items;$/;"	m	class:ManagedFileListWidget	file:
items	Dialogs/Traffic/TrafficList.cpp	/^  ItemList items;$/;"	m	class:TrafficListWidget	file:
items	Dialogs/Waypoint/Manager.cpp	/^  WaypointList items;$/;"	m	class:final	file:
items	Dialogs/Waypoint/WaypointList.cpp	/^  WaypointList items;$/;"	m	class:final	file:
items	Dialogs/Weather/MapOverlayWidget.cpp	/^  std::vector<Item> items;$/;"	m	class:final	file:
items	Form/DataField/ComboList.hpp	/^  std::vector<Item> items;$/;"	m	class:ComboList
items	Form/GridView.hpp	/^  StaticArray<Window *, MAX_ITEMS> items;$/;"	m	class:GridView
items	Menu/MenuData.hpp	/^  MenuItem items[MAX_ITEMS];$/;"	m	class:Menu
items	Topography/shapelib/mapserver.h	/^    char **items, **values; \/* items\/values (process 1 record at a time) *\/$/;"	m	struct:__anon38
items	Topography/shapelib/mapserver.h	/^    char **items;$/;"	m	struct:layerObj
items	Util/SliceAllocator.hxx	/^		Item items[size];$/;"	m	struct:SliceAllocator::Area
items_visible	Form/List.hpp	/^  unsigned items_visible;$/;"	m	class:ListControl
iterator	Dialogs/Weather/NOAAList.cpp	/^    NOAAStore::iterator iterator;$/;"	m	struct:final::ListItem	file:
iterator	Engine/PathSolvers/Dijkstra.hpp	/^      :edge_value(_edge_value), iterator(_iterator) {}$/;"	f	struct:Dijkstra::Value
iterator	Engine/PathSolvers/Dijkstra.hpp	/^    edge_iterator iterator;$/;"	m	struct:Dijkstra::Value
iterator	Engine/Route/AStar.hpp	/^    node_value_iterator iterator;$/;"	m	struct:AStar::NodeValue
iterator	FLARM/NameDatabase.hpp	/^  typedef Array::iterator iterator;$/;"	t	class:FlarmNameDatabase
iterator	Util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::iterator iterator;$/;"	t	class:AllocatedGrid
iterator	Util/CastIterator.hpp	/^  IT iterator;$/;"	m	class:CastIterator
iterator	Util/IterableSplitString.hxx	/^	typedef Iterator iterator;$/;"	t	class:BasicIterableSplitString
iterator	Util/QuadTree.hxx	/^	class iterator {$/;"	c
iterator	Util/TrivialArray.hxx	/^	typedef typename Array::iterator iterator;$/;"	t	class:TrivialArray
iterator	Weather/NOAAStore.hpp	/^  typedef StationContainer::iterator iterator;$/;"	t	class:NOAAStore
iterator_category	Engine/Trace/Trace.cpp	/^  typedef typename I::iterator_category iterator_category;$/;"	t	class:PointerIterator	file:
iterator_category	Util/CastIterator.hpp	/^  typedef typename IT::iterator_category iterator_category;$/;"	t	class:CastIterator
iterator_category	Util/IterableSplitString.hxx	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:BasicIterableSplitString::final
iterator_category	Util/QuadTree.hxx	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:const_iterator
iterator_category	Util/QuadTree.hxx	/^		typedef std::forward_iterator_tag iterator_category;$/;"	t	class:iterator
ival_av_last	Gauge/GaugeVario.hpp	/^  int ival_av_last = 0;$/;"	m	class:GaugeVario
ival_last	Gauge/GaugeVario.hpp	/^  int ival_last = 0;$/;"	m	class:GaugeVario
jas_align_t	Terrain/jasper/jas_cm.h	185;"	d
jas_alloc2	Terrain/jasper/base/jas_malloc.c	/^void *jas_alloc2(size_t num_elements, size_t element_size)$/;"	f
jas_alloc3	Terrain/jasper/base/jas_malloc.c	/^void *jas_alloc3(size_t num_arrays, size_t array_size, size_t element_size)$/;"	f
jas_calloc	Terrain/jasper/base/jas_malloc.c	/^void *jas_calloc(size_t num_elements, size_t element_size)$/;"	f
jas_clrspc_create	Terrain/jasper/jas_cm.h	100;"	d
jas_clrspc_fam	Terrain/jasper/jas_cm.h	101;"	d
jas_clrspc_isgeneric	Terrain/jasper/jas_cm.h	103;"	d
jas_clrspc_isunknown	Terrain/jasper/jas_cm.h	104;"	d
jas_clrspc_mbr	Terrain/jasper/jas_cm.h	102;"	d
jas_clrspc_t	Terrain/jasper/jas_cm.h	/^typedef int jas_clrspc_t;$/;"	t
jas_cmclrspcconv_t	Terrain/jasper/jas_cm.h	/^} jas_cmclrspcconv_t;$/;"	t	typeref:struct:__anon100
jas_cmcmptfmt_t	Terrain/jasper/jas_cm.h	/^} jas_cmcmptfmt_t;$/;"	t	typeref:struct:__anon94
jas_cmpixmap_t	Terrain/jasper/jas_cm.h	/^} jas_cmpixmap_t;$/;"	t	typeref:struct:__anon95
jas_cmprof_clrspc	Terrain/jasper/jas_cm.h	261;"	d
jas_cmprof_t	Terrain/jasper/jas_cm.h	/^} jas_cmprof_t;$/;"	t	typeref:struct:__anon104
jas_cmpxform_s	Terrain/jasper/jas_cm.h	/^typedef struct jas_cmpxform_s {$/;"	s
jas_cmpxform_t	Terrain/jasper/jas_cm.h	/^} jas_cmpxform_t;$/;"	t	typeref:struct:jas_cmpxform_s
jas_cmpxformops_t	Terrain/jasper/jas_cm.h	/^} jas_cmpxformops_t;$/;"	t	typeref:struct:__anon96
jas_cmpxformseq_t	Terrain/jasper/jas_cm.h	/^} jas_cmpxformseq_t;$/;"	t	typeref:struct:__anon102
jas_cmreal_t	Terrain/jasper/jas_cm.h	/^typedef double jas_cmreal_t;$/;"	t
jas_cmshaplut_t	Terrain/jasper/jas_cm.h	/^} jas_cmshaplut_t;$/;"	t	typeref:struct:__anon99
jas_cmshapmat_t	Terrain/jasper/jas_cm.h	/^} jas_cmshapmat_t;$/;"	t	typeref:struct:__anon98
jas_cmshapmatlut_t	Terrain/jasper/jas_cm.h	/^} jas_cmshapmatlut_t;$/;"	t	typeref:struct:__anon97
jas_cmxform_t	Terrain/jasper/jas_cm.h	/^} jas_cmxform_t;$/;"	t	typeref:struct:__anon103
jas_deprecated	Terrain/jasper/jas_debug.h	119;"	d
jas_eprintf	Terrain/jasper/jas_debug.h	117;"	d
jas_fast32_asl	Terrain/jasper/jas_math.h	/^inline static int jas_fast32_asl(int_fast32_t x, int n)$/;"	f
jas_fast32_asr	Terrain/jasper/jas_math.h	/^inline static int jas_fast32_asr(int_fast32_t x, int n)$/;"	f
jas_free	Terrain/jasper/base/jas_malloc.c	/^void jas_free(void *ptr)$/;"	f
jas_get_mb	Terrain/jasper/base/jas_malloc.c	/^jas_mb_t *jas_get_mb(void *ptr)$/;"	f
jas_get_mem_usage	Terrain/jasper/base/jas_malloc.c	/^size_t jas_get_mem_usage()$/;"	f
jas_getdbglevel	Terrain/jasper/jas_debug.h	116;"	d
jas_iccattr_t	Terrain/jasper/jas_icc.h	/^} jas_iccattr_t;$/;"	t	typeref:struct:__anon190
jas_iccattrname_t	Terrain/jasper/jas_icc.h	/^typedef jas_iccsig_t jas_iccattrname_t;$/;"	t
jas_iccattrtab_t	Terrain/jasper/jas_icc.h	/^} jas_iccattrtab_t;$/;"	t	typeref:struct:__anon191
jas_iccattrval_s	Terrain/jasper/jas_icc.h	/^typedef struct jas_iccattrval_s {$/;"	s
jas_iccattrval_t	Terrain/jasper/jas_icc.h	/^} jas_iccattrval_t;$/;"	t	typeref:struct:jas_iccattrval_s
jas_iccattrvalinfo_t	Terrain/jasper/jas_icc.h	/^} jas_iccattrvalinfo_t;$/;"	t	typeref:struct:__anon194
jas_iccattrvalops_t	Terrain/jasper/jas_icc.h	/^} jas_iccattrvalops_t;$/;"	t	typeref:struct:__anon187
jas_icccurv_t	Terrain/jasper/jas_icc.h	/^} jas_icccurv_t;$/;"	t	typeref:struct:__anon182
jas_icchdr_t	Terrain/jasper/jas_icc.h	/^} jas_icchdr_t;$/;"	t	typeref:struct:__anon189
jas_icclut16_t	Terrain/jasper/jas_icc.h	/^} jas_icclut16_t;$/;"	t	typeref:struct:__anon186
jas_icclut8_t	Terrain/jasper/jas_icc.h	/^} jas_icclut8_t;$/;"	t	typeref:struct:__anon185
jas_iccprof_t	Terrain/jasper/jas_icc.h	/^} jas_iccprof_t;$/;"	t	typeref:struct:__anon193
jas_iccs15fixed16_t	Terrain/jasper/jas_icc.h	/^typedef int_fast32_t jas_iccs15fixed16_t;$/;"	t
jas_iccsig_t	Terrain/jasper/jas_icc.h	/^typedef uint_fast32_t jas_iccsig_t;$/;"	t
jas_iccsint32_t	Terrain/jasper/jas_icc.h	/^typedef int_fast32_t jas_iccsint32_t;$/;"	t
jas_icctagsig_t	Terrain/jasper/jas_icc.h	/^typedef jas_iccsig_t jas_icctagsig_t;$/;"	t
jas_icctagtab_t	Terrain/jasper/jas_icc.h	/^} jas_icctagtab_t;$/;"	t	typeref:struct:__anon192
jas_icctagtabent_s	Terrain/jasper/jas_icc.h	/^typedef struct jas_icctagtabent_s {$/;"	s
jas_icctagtabent_t	Terrain/jasper/jas_icc.h	/^} jas_icctagtabent_t;$/;"	t	typeref:struct:jas_icctagtabent_s
jas_icctagtype_t	Terrain/jasper/jas_icc.h	/^typedef jas_iccsig_t jas_icctagtype_t;$/;"	t
jas_icctime_t	Terrain/jasper/jas_icc.h	/^} jas_icctime_t;$/;"	t	typeref:struct:__anon180
jas_icctxt_t	Terrain/jasper/jas_icc.h	/^} jas_icctxt_t;$/;"	t	typeref:struct:__anon184
jas_icctxtdesc_t	Terrain/jasper/jas_icc.h	/^} jas_icctxtdesc_t;$/;"	t	typeref:struct:__anon183
jas_iccu16fixed16_t	Terrain/jasper/jas_icc.h	/^typedef uint_fast32_t jas_iccu16fixed16_t;$/;"	t
jas_iccuint16_t	Terrain/jasper/jas_icc.h	/^typedef uint_fast16_t jas_iccuint16_t;$/;"	t
jas_iccuint32_t	Terrain/jasper/jas_icc.h	/^typedef uint_fast32_t jas_iccuint32_t;$/;"	t
jas_iccuint64_t	Terrain/jasper/jas_icc.h	/^typedef uint_fast64_t jas_iccuint64_t;$/;"	t
jas_iccuint8_t	Terrain/jasper/jas_icc.h	/^typedef uint_fast8_t jas_iccuint8_t;$/;"	t
jas_iccxyz_t	Terrain/jasper/jas_icc.h	/^} jas_iccxyz_t;$/;"	t	typeref:struct:__anon181
jas_image_brx	Terrain/jasper/jas_image.h	342;"	d
jas_image_bry	Terrain/jasper/jas_image.h	347;"	d
jas_image_clrspc	Terrain/jasper/jas_image.h	355;"	d
jas_image_cmprof	Terrain/jasper/jas_image.h	495;"	d
jas_image_cmpt_t	Terrain/jasper/jas_image.h	/^} jas_image_cmpt_t;$/;"	t	typeref:struct:__anon123
jas_image_cmptbrx	Terrain/jasper/jas_image.h	401;"	d
jas_image_cmptbry	Terrain/jasper/jas_image.h	407;"	d
jas_image_cmptdtype	Terrain/jasper/jas_image.h	453;"	d
jas_image_cmptheight	Terrain/jasper/jas_image.h	372;"	d
jas_image_cmpthstep	Terrain/jasper/jas_image.h	384;"	d
jas_image_cmptparm_t	Terrain/jasper/jas_image.h	/^} jas_image_cmptparm_t;$/;"	t	typeref:struct:__anon125
jas_image_cmptprec	Terrain/jasper/jas_image.h	380;"	d
jas_image_cmptsgnd	Terrain/jasper/jas_image.h	376;"	d
jas_image_cmpttlx	Terrain/jasper/jas_image.h	392;"	d
jas_image_cmpttly	Terrain/jasper/jas_image.h	396;"	d
jas_image_cmpttype	Terrain/jasper/jas_image.h	362;"	d
jas_image_cmpttype_t	Terrain/jasper/jas_image.h	/^typedef int_fast32_t jas_image_cmpttype_t;$/;"	t
jas_image_cmptvstep	Terrain/jasper/jas_image.h	388;"	d
jas_image_cmptwidth	Terrain/jasper/jas_image.h	368;"	d
jas_image_colorspc_t	Terrain/jasper/jas_image.h	/^typedef int_fast16_t jas_image_colorspc_t;$/;"	t
jas_image_coord_t	Terrain/jasper/jas_image.h	/^typedef int_fast32_t jas_image_coord_t;$/;"	t
jas_image_fmtinfo_t	Terrain/jasper/jas_image.h	/^} jas_image_fmtinfo_t;$/;"	t	typeref:struct:__anon127
jas_image_fmtops_t	Terrain/jasper/jas_image.h	/^} jas_image_fmtops_t;$/;"	t	typeref:struct:__anon126
jas_image_height	Terrain/jasper/jas_image.h	327;"	d
jas_image_numcmpts	Terrain/jasper/jas_image.h	351;"	d
jas_image_setclrspc	Terrain/jasper/jas_image.h	359;"	d
jas_image_setcmprof	Terrain/jasper/jas_image.h	507;"	d
jas_image_setcmpttype	Terrain/jasper/jas_image.h	364;"	d
jas_image_smpltype_t	Terrain/jasper/jas_image.h	/^typedef int_fast16_t jas_image_smpltype_t;$/;"	t
jas_image_t	Terrain/jasper/jas_image.h	/^} jas_image_t;$/;"	t	typeref:struct:__anon124
jas_image_tlx	Terrain/jasper/jas_image.h	332;"	d
jas_image_tly	Terrain/jasper/jas_image.h	337;"	d
jas_image_width	Terrain/jasper/jas_image.h	323;"	d
jas_int_asl	Terrain/jasper/jas_math.h	/^inline static int jas_int_asl(int x, int n)$/;"	f
jas_int_asr	Terrain/jasper/jas_math.h	/^inline static int jas_int_asr(int x, int n)$/;"	f
jas_longlong	Terrain/jasper/jas_types.h	112;"	d
jas_malloc	Terrain/jasper/base/jas_malloc.c	/^void *jas_malloc(size_t size)$/;"	f
jas_matent_t	Terrain/jasper/jas_seq.h	/^typedef int_fast32_t jas_matent_t;$/;"	t
jas_matind_t	Terrain/jasper/jas_seq.h	/^typedef int_fast32_t jas_matind_t;$/;"	t
jas_matrix	Terrain/jasper/jas_seq.h	/^typedef struct jas_matrix {$/;"	s
jas_matrix_asl	Terrain/jasper/base/jas_seq.c	/^void jas_matrix_asl(jas_matrix_t *matrix, int n)$/;"	f
jas_matrix_asr	Terrain/jasper/base/jas_seq.c	/^void jas_matrix_asr(jas_matrix_t *matrix, int n)$/;"	f
jas_matrix_bindcol	Terrain/jasper/jas_seq.h	218;"	d
jas_matrix_bindrow	Terrain/jasper/jas_seq.h	214;"	d
jas_matrix_bindsub	Terrain/jasper/base/jas_seq.c	/^int jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1,$/;"	f
jas_matrix_clip	Terrain/jasper/base/jas_seq.c	/^void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_t minval,$/;"	f
jas_matrix_cmp	Terrain/jasper/base/jas_seq.c	/^int jas_matrix_cmp(jas_matrix_t *mat0, jas_matrix_t *mat1)$/;"	f
jas_matrix_copy	Terrain/jasper/base/jas_seq.c	/^jas_matrix_t *jas_matrix_copy(jas_matrix_t *x)$/;"	f
jas_matrix_create	Terrain/jasper/base/jas_seq.c	/^jas_matrix_t *jas_matrix_create(jas_matind_t numrows, jas_matind_t numcols)$/;"	f
jas_matrix_destroy	Terrain/jasper/base/jas_seq.c	/^void jas_matrix_destroy(jas_matrix_t *matrix)$/;"	f
jas_matrix_divpow2	Terrain/jasper/base/jas_seq.c	/^void jas_matrix_divpow2(jas_matrix_t *matrix, int n)$/;"	f
jas_matrix_get	Terrain/jasper/jas_seq.h	167;"	d
jas_matrix_getref	Terrain/jasper/jas_seq.h	185;"	d
jas_matrix_getv	Terrain/jasper/jas_seq.h	175;"	d
jas_matrix_getvref	Terrain/jasper/jas_seq.h	188;"	d
jas_matrix_length	Terrain/jasper/jas_seq.h	192;"	d
jas_matrix_numcols	Terrain/jasper/jas_seq.h	160;"	d
jas_matrix_numrows	Terrain/jasper/jas_seq.h	156;"	d
jas_matrix_resize	Terrain/jasper/base/jas_seq.c	/^int jas_matrix_resize(jas_matrix_t *matrix, jas_matind_t numrows,$/;"	f
jas_matrix_rowstep	Terrain/jasper/jas_seq.h	238;"	d
jas_matrix_set	Terrain/jasper/jas_seq.h	171;"	d
jas_matrix_setall	Terrain/jasper/base/jas_seq.c	/^void jas_matrix_setall(jas_matrix_t *matrix, jas_seqent_t val)$/;"	f
jas_matrix_setv	Terrain/jasper/jas_seq.h	180;"	d
jas_matrix_size	Terrain/jasper/jas_seq.h	163;"	d
jas_matrix_step	Terrain/jasper/jas_seq.h	242;"	d
jas_matrix_t	Terrain/jasper/jas_seq.h	/^} jas_matrix_t;$/;"	t	typeref:struct:jas_matrix
jas_max_mem	Terrain/jasper/base/jas_malloc.c	/^static size_t jas_max_mem = JAS_DEFAULT_MAX_MEM_USAGE;$/;"	v	file:
jas_mb_get_data	Terrain/jasper/base/jas_malloc.c	/^void *jas_mb_get_data(jas_mb_t *mb)$/;"	f
jas_mb_t	Terrain/jasper/base/jas_malloc.c	/^} jas_mb_t;$/;"	t	typeref:struct:__anon195	file:
jas_mem	Terrain/jasper/base/jas_malloc.c	/^static size_t jas_mem = 0;$/;"	v	file:
jas_memdump	Terrain/jasper/jas_debug.h	118;"	d
jas_realloc	Terrain/jasper/base/jas_malloc.c	/^void *jas_realloc(void *ptr, size_t size)$/;"	f
jas_realloc2	Terrain/jasper/base/jas_malloc.c	/^void *jas_realloc2(void *ptr, size_t num_elements, size_t element_size)$/;"	f
jas_rtc_MarkerSegment	Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_MarkerSegment(void *_loader, long file_offset, unsigned id) {$/;"	f
jas_rtc_ProcessComment	Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_ProcessComment(void *_loader, const char *data, unsigned size) {$/;"	f
jas_rtc_PutTileData	Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_PutTileData(void *_loader,$/;"	f
jas_rtc_SetSize	Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_SetSize(void *_loader,$/;"	f
jas_rtc_SkipMarkerSegment	Terrain/jasper/jpc/jpc_rtc.cpp	/^  long jas_rtc_SkipMarkerSegment(void *_loader, long file_offset) {$/;"	f
jas_rtc_StartTile	Terrain/jasper/jpc/jpc_rtc.cpp	/^  void jas_rtc_StartTile(void *_loader, unsigned index) {$/;"	f
jas_safe_intfast32_add	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_intfast32_add(int_fast32_t x, int_fast32_t y,$/;"	f
jas_safe_intfast32_mul	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_intfast32_mul(int_fast32_t x, int_fast32_t y,$/;"	f
jas_safe_intfast32_mul3	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_intfast32_mul3(int_fast32_t a, int_fast32_t b,$/;"	f
jas_safe_size_add	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_add(size_t x, size_t y, size_t *result)$/;"	f
jas_safe_size_mul	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_mul(size_t x, size_t y, size_t *result)$/;"	f
jas_safe_size_mul3	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_mul3(size_t a, size_t b, size_t c,$/;"	f
jas_safe_size_sub	Terrain/jasper/jas_math.h	/^inline static bool jas_safe_size_sub(size_t x, size_t y, size_t *result)$/;"	f
jas_seq2d_bindsub	Terrain/jasper/base/jas_seq.c	/^int jas_seq2d_bindsub(jas_matrix_t *s, jas_matrix_t *s1, jas_matind_t xstart,$/;"	f
jas_seq2d_copy	Terrain/jasper/base/jas_seq.c	/^jas_seq2d_t *jas_seq2d_copy(jas_seq2d_t *x)$/;"	f
jas_seq2d_create	Terrain/jasper/base/jas_seq.c	/^jas_matrix_t *jas_seq2d_create(jas_matind_t xstart, jas_matind_t ystart,$/;"	f
jas_seq2d_destroy	Terrain/jasper/jas_seq.h	267;"	d
jas_seq2d_get	Terrain/jasper/jas_seq.h	280;"	d
jas_seq2d_getref	Terrain/jasper/jas_seq.h	278;"	d
jas_seq2d_height	Terrain/jasper/jas_seq.h	286;"	d
jas_seq2d_rowstep	Terrain/jasper/jas_seq.h	282;"	d
jas_seq2d_setshift	Terrain/jasper/jas_seq.h	288;"	d
jas_seq2d_size	Terrain/jasper/jas_seq.h	292;"	d
jas_seq2d_t	Terrain/jasper/jas_seq.h	/^typedef jas_matrix_t jas_seq2d_t;$/;"	t
jas_seq2d_width	Terrain/jasper/jas_seq.h	284;"	d
jas_seq2d_xend	Terrain/jasper/jas_seq.h	274;"	d
jas_seq2d_xstart	Terrain/jasper/jas_seq.h	270;"	d
jas_seq2d_yend	Terrain/jasper/jas_seq.h	276;"	d
jas_seq2d_ystart	Terrain/jasper/jas_seq.h	272;"	d
jas_seq_create	Terrain/jasper/jas_seq.h	302;"	d
jas_seq_destroy	Terrain/jasper/jas_seq.h	305;"	d
jas_seq_end	Terrain/jasper/jas_seq.h	316;"	d
jas_seq_get	Terrain/jasper/jas_seq.h	312;"	d
jas_seq_getref	Terrain/jasper/jas_seq.h	310;"	d
jas_seq_set	Terrain/jasper/jas_seq.h	308;"	d
jas_seq_start	Terrain/jasper/jas_seq.h	314;"	d
jas_seq_t	Terrain/jasper/jas_seq.h	/^typedef jas_matrix_t jas_seq_t;$/;"	t
jas_seqent_asl	Terrain/jasper/jas_seq.h	253;"	d
jas_seqent_asr	Terrain/jasper/jas_seq.h	254;"	d
jas_seqent_t	Terrain/jasper/jas_seq.h	/^typedef int_fast32_t jas_seqent_t;$/;"	t
jas_set_max_mem_usage	Terrain/jasper/base/jas_malloc.c	/^void jas_set_max_mem_usage(size_t max_mem)$/;"	f
jas_strdup	Terrain/jasper/base/jas_string.c	/^char *jas_strdup(const char *s)$/;"	f
jas_stream_clearerr	Terrain/jasper/jas_stream.h	329;"	d
jas_stream_close	Terrain/jasper/base/jas_stream.c	/^int jas_stream_close(jas_stream_t *stream)$/;"	f
jas_stream_copy	Terrain/jasper/base/jas_stream.c	/^int jas_stream_copy(jas_stream_t *out, jas_stream_t *in, int n)$/;"	f
jas_stream_create	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_create(void)$/;"	f
jas_stream_destroy	Terrain/jasper/base/jas_stream.c	/^static void jas_stream_destroy(jas_stream_t *stream)$/;"	f	file:
jas_stream_eof	Terrain/jasper/jas_stream.h	321;"	d
jas_stream_error	Terrain/jasper/jas_stream.h	325;"	d
jas_stream_fdopen	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_fdopen(int fd, const char *mode)$/;"	f
jas_stream_fileobj_t	Terrain/jasper/jas_stream.h	/^} jas_stream_fileobj_t;$/;"	t	typeref:struct:__anon121
jas_stream_fileops	Terrain/jasper/base/jas_stream.c	/^static const jas_stream_ops_t jas_stream_fileops = {$/;"	v	file:
jas_stream_fillbuf	Terrain/jasper/base/jas_stream.c	/^int jas_stream_fillbuf(jas_stream_t *stream, int getflag)$/;"	f
jas_stream_flush	Terrain/jasper/base/jas_stream.c	/^int jas_stream_flush(jas_stream_t *stream)$/;"	f
jas_stream_flushbuf	Terrain/jasper/base/jas_stream.c	/^int jas_stream_flushbuf(jas_stream_t *stream, int c)$/;"	f
jas_stream_fopen	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_fopen(const char *filename, const char *mode)$/;"	f
jas_stream_freopen	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_freopen(const char *path, const char *mode, FILE *fp)$/;"	f
jas_stream_getc	Terrain/jasper/jas_stream.h	352;"	d
jas_stream_getc	Terrain/jasper/jas_stream.h	354;"	d
jas_stream_getc2	Terrain/jasper/jas_stream.h	448;"	d
jas_stream_getc_func	Terrain/jasper/base/jas_stream.c	/^int jas_stream_getc_func(jas_stream_t *stream)$/;"	f
jas_stream_getc_macro	Terrain/jasper/jas_stream.h	442;"	d
jas_stream_getrwcount	Terrain/jasper/jas_stream.h	340;"	d
jas_stream_getrwlimit	Terrain/jasper/jas_stream.h	333;"	d
jas_stream_gets	Terrain/jasper/base/jas_stream.c	/^char *jas_stream_gets(jas_stream_t *stream, char *buf, int bufsize)$/;"	f
jas_stream_gobble	Terrain/jasper/base/jas_stream.c	/^int jas_stream_gobble(jas_stream_t *stream, int n)$/;"	f
jas_stream_initbuf	Terrain/jasper/base/jas_stream.c	/^void jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,$/;"	f
jas_stream_isseekable	Terrain/jasper/base/jas_stream.c	/^int jas_stream_isseekable(jas_stream_t *stream)$/;"	f
jas_stream_length	Terrain/jasper/base/jas_stream.c	/^long jas_stream_length(jas_stream_t *stream)$/;"	f
jas_stream_memobj_t	Terrain/jasper/jas_stream.h	/^} jas_stream_memobj_t;$/;"	t	typeref:struct:__anon122
jas_stream_memopen	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_memopen(char *buf, int bufsize)$/;"	f
jas_stream_memopen2	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_memopen2(char *buf, size_t bufsize)$/;"	f
jas_stream_memops	Terrain/jasper/base/jas_stream.c	/^static const jas_stream_ops_t jas_stream_memops = {$/;"	v	file:
jas_stream_obj_t	Terrain/jasper/jas_stream.h	/^typedef void jas_stream_obj_t;$/;"	t
jas_stream_ops_t	Terrain/jasper/jas_stream.h	/^} jas_stream_ops_t;$/;"	t	typeref:struct:__anon119
jas_stream_pad	Terrain/jasper/base/jas_stream.c	/^int jas_stream_pad(jas_stream_t *stream, int n, int c)$/;"	f
jas_stream_peekc	Terrain/jasper/jas_stream.h	381;"	d
jas_stream_printf	Terrain/jasper/base/jas_stream.c	/^int jas_stream_printf(jas_stream_t *stream, const char *fmt, ...)$/;"	f
jas_stream_putc	Terrain/jasper/jas_stream.h	359;"	d
jas_stream_putc	Terrain/jasper/jas_stream.h	361;"	d
jas_stream_putc2	Terrain/jasper/jas_stream.h	459;"	d
jas_stream_putc_func	Terrain/jasper/base/jas_stream.c	/^int jas_stream_putc_func(jas_stream_t *stream, int c)$/;"	f
jas_stream_putc_macro	Terrain/jasper/jas_stream.h	453;"	d
jas_stream_puts	Terrain/jasper/base/jas_stream.c	/^int jas_stream_puts(jas_stream_t *stream, const char *s)$/;"	f
jas_stream_read	Terrain/jasper/base/jas_stream.c	/^int jas_stream_read(jas_stream_t *stream, void *buf, unsigned cnt)$/;"	f
jas_stream_rewind	Terrain/jasper/base/jas_stream.c	/^int jas_stream_rewind(jas_stream_t *stream)$/;"	f
jas_stream_seek	Terrain/jasper/base/jas_stream.c	/^long jas_stream_seek(jas_stream_t *stream, long offset, int origin)$/;"	f
jas_stream_setrwcount	Terrain/jasper/base/jas_stream.c	/^long jas_stream_setrwcount(jas_stream_t *stream, long rwcnt)$/;"	f
jas_stream_sfileops	Terrain/jasper/base/jas_stream.c	/^static const jas_stream_ops_t jas_stream_sfileops = {$/;"	v	file:
jas_stream_t	Terrain/jasper/jas_stream.h	/^} jas_stream_t;$/;"	t	typeref:struct:__anon120
jas_stream_tell	Terrain/jasper/base/jas_stream.c	/^long jas_stream_tell(jas_stream_t *stream)$/;"	f
jas_stream_tmpfile	Terrain/jasper/base/jas_stream.c	/^jas_stream_t *jas_stream_tmpfile()$/;"	f
jas_stream_ungetc	Terrain/jasper/base/jas_stream.c	/^int jas_stream_ungetc(jas_stream_t *stream, int c)$/;"	f
jas_stream_write	Terrain/jasper/base/jas_stream.c	/^int jas_stream_write(jas_stream_t *stream, const void *buf, unsigned cnt)$/;"	f
jas_strtoopenmode	Terrain/jasper/base/jas_stream.c	/^static int jas_strtoopenmode(const char *s)$/;"	f	file:
jas_taginfo_nonull	Terrain/jasper/base/jas_tvp.c	/^const jas_taginfo_t *jas_taginfo_nonull(const jas_taginfo_t *taginfo)$/;"	f
jas_taginfo_t	Terrain/jasper/jas_tvp.h	/^} jas_taginfo_t;$/;"	t	typeref:struct:__anon105
jas_taginfos_lookup	Terrain/jasper/base/jas_tvp.c	/^const jas_taginfo_t *jas_taginfos_lookup(const jas_taginfo_t *taginfos, const char *name)$/;"	f
jas_tvparser_create	Terrain/jasper/base/jas_tvp.c	/^jas_tvparser_t *jas_tvparser_create(const char *s)$/;"	f
jas_tvparser_destroy	Terrain/jasper/base/jas_tvp.c	/^void jas_tvparser_destroy(jas_tvparser_t *tvp)$/;"	f
jas_tvparser_gettag	Terrain/jasper/base/jas_tvp.c	/^const char *jas_tvparser_gettag(const jas_tvparser_t *tvp)$/;"	f
jas_tvparser_getval	Terrain/jasper/base/jas_tvp.c	/^const char *jas_tvparser_getval(const jas_tvparser_t *tvp)$/;"	f
jas_tvparser_next	Terrain/jasper/base/jas_tvp.c	/^int jas_tvparser_next(jas_tvparser_t *tvp)$/;"	f
jas_tvparser_t	Terrain/jasper/jas_tvp.h	/^} jas_tvparser_t;$/;"	t	typeref:struct:__anon106
jas_uchar	Terrain/jasper/jas_types.h	109;"	d
jas_uint	Terrain/jasper/jas_types.h	110;"	d
jas_ulong	Terrain/jasper/jas_types.h	111;"	d
jas_ulonglong	Terrain/jasper/jas_types.h	113;"	d
jas_zzip_close	Terrain/ZzipStream.cpp	/^jas_zzip_close(jas_stream_obj_t *obj)$/;"	f	file:
jas_zzip_read	Terrain/ZzipStream.cpp	/^jas_zzip_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
jas_zzip_seek	Terrain/ZzipStream.cpp	/^jas_zzip_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
jas_zzip_write	Terrain/ZzipStream.cpp	/^jas_zzip_write(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
job	Job/Async.hpp	/^  Job *job;$/;"	m	class:final
job	Job/Thread.hpp	/^  Job &job;$/;"	m	class:JobThread
joinObj	Topography/shapelib/mapserver.h	/^  } joinObj;$/;"	t	typeref:struct:__anon38
joininfo	Topography/shapelib/mapserver.h	/^    void *joininfo; \/* vendor specific (i.e. XBase, MySQL, etc.) stuff to allow for persistant access *\/$/;"	m	struct:__anon38
joins	Topography/shapelib/mapserver.h	/^    joinObj *joins;$/;"	m	struct:layerObj
jp	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_jp_t jp;$/;"	m	union:__anon117::__anon118
jp2_box_create	Terrain/jasper/jp2/jp2_cod.c	/^jp2_box_t *jp2_box_create(int type)$/;"	f
jp2_box_create0	Terrain/jasper/jp2/jp2_cod.c	/^static jp2_box_t *jp2_box_create0(void)$/;"	f	file:
jp2_box_destroy	Terrain/jasper/jp2/jp2_cod.c	/^void jp2_box_destroy(jp2_box_t *box)$/;"	f
jp2_box_dump	Terrain/jasper/jp2/jp2_cod.c	/^void jp2_box_dump(jp2_box_t *box, FILE *out)$/;"	f
jp2_box_dump	Terrain/jasper/jp2/jp2_cod.c	110;"	d	file:
jp2_box_get	Terrain/jasper/jp2/jp2_cod.c	/^jp2_box_t *jp2_box_get(jas_stream_t *in)$/;"	f
jp2_box_put	Terrain/jasper/jp2/jp2_cod.c	/^int jp2_box_put(jp2_box_t *box, jas_stream_t *out)$/;"	f
jp2_box_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_box_t;$/;"	t	typeref:struct:__anon117
jp2_boxinfo_s	Terrain/jasper/jp2/jp2_cod.h	/^typedef struct jp2_boxinfo_s {$/;"	s
jp2_boxinfo_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_boxinfo_t;$/;"	t	typeref:struct:jp2_boxinfo_s
jp2_boxinfo_unk	Terrain/jasper/jp2/jp2_cod.c	/^static const jp2_boxinfo_t jp2_boxinfo_unk = {$/;"	v	file:
jp2_boxinfolookup	Terrain/jasper/jp2/jp2_cod.c	/^static const jp2_boxinfo_t *jp2_boxinfolookup(int type)$/;"	f	file:
jp2_boxinfos	Terrain/jasper/jp2/jp2_cod.c	/^static const jp2_boxinfo_t jp2_boxinfos[] = {$/;"	v	file:
jp2_boxops_s	Terrain/jasper/jp2/jp2_cod.h	/^typedef struct jp2_boxops_s {$/;"	s
jp2_boxops_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_boxops_t;$/;"	t	typeref:struct:jp2_boxops_s
jp2_bpcc_destroy	Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_bpcc_destroy(jp2_box_t *box)$/;"	f	file:
jp2_bpcc_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_bpcc_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_bpcc_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_bpcc_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_bpcc_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_bpcc_t;$/;"	t	typeref:struct:__anon110
jp2_cdef_destroy	Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_cdef_destroy(jp2_box_t *box)$/;"	f	file:
jp2_cdef_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cdef_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_cdef_lookup	Terrain/jasper/jp2/jp2_cod.c	/^const jp2_cdefchan_t *jp2_cdef_lookup(jp2_cdef_t *cdef, int channo)$/;"	f
jp2_cdef_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cdef_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_cdef_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cdef_t;$/;"	t	typeref:struct:__anon114
jp2_cdefchan_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cdefchan_t;$/;"	t	typeref:struct:__anon113
jp2_cmap_destroy	Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_cmap_destroy(jp2_box_t *box)$/;"	f	file:
jp2_cmap_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cmap_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_cmap_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_cmap_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_cmap_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cmap_t;$/;"	t	typeref:struct:__anon116
jp2_cmapent_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_cmapent_t;$/;"	t	typeref:struct:__anon115
jp2_colr_destroy	Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_colr_destroy(jp2_box_t *box)$/;"	f	file:
jp2_colr_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_colr_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_colr_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_colr_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_colr_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_colr_t;$/;"	t	typeref:struct:__anon111
jp2_ftyp_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ftyp_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_ftyp_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ftyp_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_ftyp_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_ftyp_t;$/;"	t	typeref:struct:__anon108
jp2_getint	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getint(jas_stream_t *in, int s, int n, int_fast32_t *val)$/;"	f	file:
jp2_getuint16	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint16(jas_stream_t *in, uint_fast16_t *val)$/;"	f	file:
jp2_getuint32	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint32(jas_stream_t *in, uint_fast32_t *val)$/;"	f	file:
jp2_getuint64	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint64(jas_stream_t *in, uint_fast64_t *val)$/;"	f	file:
jp2_getuint8	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_getuint8(jas_stream_t *in, uint_fast8_t *val)$/;"	f	file:
jp2_ihdr_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ihdr_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_ihdr_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_ihdr_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_ihdr_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_ihdr_t;$/;"	t	typeref:struct:__anon109
jp2_jp_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_jp_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_jp_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_jp_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_jp_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_jp_t;$/;"	t	typeref:struct:__anon107
jp2_pclr_destroy	Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_pclr_destroy(jp2_box_t *box)$/;"	f	file:
jp2_pclr_dumpdata	Terrain/jasper/jp2/jp2_cod.c	/^static void jp2_pclr_dumpdata(jp2_box_t *box, FILE *out)$/;"	f	file:
jp2_pclr_getdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_pclr_getdata(jp2_box_t *box, jas_stream_t *in)$/;"	f	file:
jp2_pclr_putdata	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_pclr_putdata(jp2_box_t *box, jas_stream_t *out)$/;"	f	file:
jp2_pclr_t	Terrain/jasper/jp2/jp2_cod.h	/^} jp2_pclr_t;$/;"	t	typeref:struct:__anon112
jp2_putuint16	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint16(jas_stream_t *out, uint_fast16_t val)$/;"	f	file:
jp2_putuint32	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint32(jas_stream_t *out, uint_fast32_t val)$/;"	f	file:
jp2_putuint64	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint64(jas_stream_t *out, uint_fast64_t val)$/;"	f	file:
jp2_putuint8	Terrain/jasper/jp2/jp2_cod.c	/^static int jp2_putuint8(jas_stream_t *out, uint_fast8_t val)$/;"	f	file:
jpc_bitstream_align	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_align(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_alloc	Terrain/jasper/jpc/jpc_bs.c	/^static jpc_bitstream_t *jpc_bitstream_alloc()$/;"	f	file:
jpc_bitstream_close	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_close(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_eof	Terrain/jasper/jpc/jpc_bs.h	204;"	d
jpc_bitstream_fillbuf	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_fillbuf(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_getbit	Terrain/jasper/jpc/jpc_bs.h	151;"	d
jpc_bitstream_getbit	Terrain/jasper/jpc/jpc_bs.h	154;"	d
jpc_bitstream_getbit_func	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_getbit_func(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_getbit_macro	Terrain/jasper/jpc/jpc_bs.h	220;"	d
jpc_bitstream_getbits	Terrain/jasper/jpc/jpc_bs.c	/^long jpc_bitstream_getbits(jpc_bitstream_t *bitstream, int n)$/;"	f
jpc_bitstream_inalign	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_inalign(jpc_bitstream_t *bitstream, int fillmask,$/;"	f
jpc_bitstream_needalign	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_needalign(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_outalign	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_outalign(jpc_bitstream_t *bitstream, int filldata)$/;"	f
jpc_bitstream_pending	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_pending(jpc_bitstream_t *bitstream)$/;"	f
jpc_bitstream_putbit	Terrain/jasper/jpc/jpc_bs.h	160;"	d
jpc_bitstream_putbit	Terrain/jasper/jpc/jpc_bs.h	163;"	d
jpc_bitstream_putbit_func	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_putbit_func(jpc_bitstream_t *bitstream, int b)$/;"	f
jpc_bitstream_putbit_macro	Terrain/jasper/jpc/jpc_bs.h	226;"	d
jpc_bitstream_putbits	Terrain/jasper/jpc/jpc_bs.c	/^int jpc_bitstream_putbits(jpc_bitstream_t *bitstream, int n, long v)$/;"	f
jpc_bitstream_sopen	Terrain/jasper/jpc/jpc_bs.c	/^jpc_bitstream_t *jpc_bitstream_sopen(jas_stream_t *stream, const char *mode)$/;"	f
jpc_bitstream_t	Terrain/jasper/jpc/jpc_bs.h	/^} jpc_bitstream_t;$/;"	t	typeref:struct:__anon129
jpc_calcabsstepsize	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_fix_t jpc_calcabsstepsize(int stepsize, int numbits)$/;"	f	file:
jpc_clnpass_step	Terrain/jasper/jpc/jpc_t1dec.c	751;"	d	file:
jpc_coc_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_coc_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_coc_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_coc_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_coc_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_coc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_coc_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_coc_t;$/;"	t	typeref:struct:__anon164
jpc_cod_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_cod_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_cod_dumpparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cod_dumpparms(jpc_ms_t *ms, FILE *out)$/;"	f	file:
jpc_cod_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cod_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_cod_gettsfb	Terrain/jasper/jpc/jpc_tsfb.c	/^jpc_tsfb_t *jpc_cod_gettsfb(int qmfbid, int numlvls)$/;"	f
jpc_cod_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cod_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_cod_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_cod_t;$/;"	t	typeref:struct:__anon163
jpc_com_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_com_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_com_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_com_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_com_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_com_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_com_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_com_t;$/;"	t	typeref:struct:__anon173
jpc_cox_destroycompparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_cox_destroycompparms(jpc_coxcp_t *compparms)$/;"	f	file:
jpc_cox_getcompparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cox_getcompparms(jpc_ms_t *ms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_cox_putcompparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_cox_putcompparms(jpc_ms_t *ms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_coxcp_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_coxcp_t;$/;"	t	typeref:struct:__anon162
jpc_coxrlvl_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_coxrlvl_t;$/;"	t	typeref:struct:__anon161
jpc_crg_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_crg_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_crg_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_crg_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_crg_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_crg_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_crg_t;$/;"	t	typeref:struct:__anon176
jpc_crgcomp_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_crgcomp_t;$/;"	t	typeref:struct:__anon175
jpc_cstate_create	Terrain/jasper/jpc/jpc_cs.c	/^jpc_cstate_t *jpc_cstate_create()$/;"	f
jpc_cstate_destroy	Terrain/jasper/jpc/jpc_cs.c	/^void jpc_cstate_destroy(jpc_cstate_t *cstate)$/;"	f
jpc_cstate_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_cstate_t;$/;"	t	typeref:struct:__anon157
jpc_dbltofix	Terrain/jasper/jpc/jpc_fix.h	111;"	d
jpc_dec_band_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_band_t;$/;"	t	typeref:struct:__anon147
jpc_dec_cblk_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_cblk_t;$/;"	t	typeref:struct:__anon145
jpc_dec_ccp_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_ccp_t;$/;"	t	typeref:struct:__anon142
jpc_dec_cmpt_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_cmpt_t;$/;"	t	typeref:struct:__anon151
jpc_dec_cp_copy	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_dec_cp_t *jpc_dec_cp_copy(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_create	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_dec_cp_t *jpc_dec_cp_create(uint_fast16_t numcomps)$/;"	f	file:
jpc_dec_cp_destroy	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dec_cp_destroy(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_isvalid	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_isvalid(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_prepare	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_prepare(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_resetflags	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dec_cp_resetflags(jpc_dec_cp_t *cp)$/;"	f	file:
jpc_dec_cp_setfromcoc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromcoc(jpc_dec_cp_t *cp, jpc_coc_t *coc)$/;"	f	file:
jpc_dec_cp_setfromcod	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromcod(jpc_dec_cp_t *cp, jpc_cod_t *cod)$/;"	f	file:
jpc_dec_cp_setfromcox	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromcox(jpc_dec_cp_t *cp, jpc_dec_ccp_t *ccp,$/;"	f	file:
jpc_dec_cp_setfrompoc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfrompoc(jpc_dec_cp_t *cp, jpc_poc_t *poc, int reset)$/;"	f	file:
jpc_dec_cp_setfromqcc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromqcc(jpc_dec_cp_t *cp, jpc_qcc_t *qcc)$/;"	f	file:
jpc_dec_cp_setfromqcd	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromqcd(jpc_dec_cp_t *cp, jpc_qcd_t *qcd)$/;"	f	file:
jpc_dec_cp_setfromqcx	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromqcx(jpc_dec_cp_t *cp, jpc_dec_ccp_t *ccp,$/;"	f	file:
jpc_dec_cp_setfromrgn	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_cp_setfromrgn(jpc_dec_cp_t *cp, jpc_rgn_t *rgn)$/;"	f	file:
jpc_dec_cp_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_cp_t;$/;"	t	typeref:struct:__anon143
jpc_dec_create	Terrain/jasper/jpc/jpc_dec.c	/^jpc_dec_t *jpc_dec_create(jpc_dec_importopts_t *impopts, jas_stream_t *in)$/;"	f
jpc_dec_decode	Terrain/jasper/jpc/jpc_dec.c	/^int jpc_dec_decode(jpc_dec_t *dec)$/;"	f
jpc_dec_decodecblk	Terrain/jasper/jpc/jpc_t1dec.c	/^static int jpc_dec_decodecblk(jpc_dec_t *dec, jpc_dec_tile_t *tile, jpc_dec_tcomp_t *tcomp, jpc_dec_band_t *band,$/;"	f	file:
jpc_dec_decodecblks	Terrain/jasper/jpc/jpc_t1dec.c	/^int jpc_dec_decodecblks(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f
jpc_dec_decodepkt	Terrain/jasper/jpc/jpc_t2dec.c	/^static int jpc_dec_decodepkt(jpc_dec_t *dec, jas_stream_t *pkthdrstream, jas_stream_t *in, int compno, int rlvlno,$/;"	f	file:
jpc_dec_decodepkts	Terrain/jasper/jpc/jpc_t2dec.c	/^int jpc_dec_decodepkts(jpc_dec_t *dec, jas_stream_t *pkthdrstream, jas_stream_t *in)$/;"	f
jpc_dec_destroy	Terrain/jasper/jpc/jpc_dec.c	/^void jpc_dec_destroy(jpc_dec_t *dec)$/;"	f
jpc_dec_importopts_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_importopts_t;$/;"	t	typeref:struct:__anon153
jpc_dec_lookahead	Terrain/jasper/jpc/jpc_t2dec.c	/^long jpc_dec_lookahead(jas_stream_t *in)$/;"	f
jpc_dec_mstab	Terrain/jasper/jpc/jpc_dec.c	/^static const jpc_dec_mstabent_t jpc_dec_mstab[] = {$/;"	v	file:
jpc_dec_mstab_lookup	Terrain/jasper/jpc/jpc_dec.c	/^static const jpc_dec_mstabent_t *jpc_dec_mstab_lookup(uint_fast16_t id)$/;"	f	file:
jpc_dec_mstabent_t	Terrain/jasper/jpc/jpc_dec.c	/^} jpc_dec_mstabent_t;$/;"	t	typeref:struct:__anon154	file:
jpc_dec_opts_create	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_dec_importopts_t *jpc_dec_opts_create(const char *optstr)$/;"	f	file:
jpc_dec_opts_destroy	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dec_opts_destroy(jpc_dec_importopts_t *opts)$/;"	f	file:
jpc_dec_pi_create	Terrain/jasper/jpc/jpc_t2dec.c	/^jpc_pi_t *jpc_dec_pi_create(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f
jpc_dec_prc_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_prc_t;$/;"	t	typeref:struct:__anon146
jpc_dec_process_coc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_coc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_cod	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_cod(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_com	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_com(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_crg	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_crg(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_eoc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_eoc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_poc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_poc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_ppm	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_ppm(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_ppt	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_ppt(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_qcc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_qcc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_qcd	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_qcd(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_rgn	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_rgn(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_siz	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_siz(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_soc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_soc(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_sod	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_sod(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_sot	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_sot(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_process_unk	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_process_unk(jpc_dec_t *dec, jpc_ms_t *ms)$/;"	f	file:
jpc_dec_rlvl_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_rlvl_t;$/;"	t	typeref:struct:__anon148
jpc_dec_seg_s	Terrain/jasper/jpc/jpc_dec.h	/^typedef struct jpc_dec_seg_s {$/;"	s
jpc_dec_seg_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_seg_t;$/;"	t	typeref:struct:jpc_dec_seg_s
jpc_dec_seglist_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_seglist_t;$/;"	t	typeref:struct:__anon144
jpc_dec_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_t;$/;"	t	typeref:struct:__anon152
jpc_dec_tcomp_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_tcomp_t;$/;"	t	typeref:struct:__anon149
jpc_dec_tile_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_dec_tile_t;$/;"	t	typeref:struct:__anon150
jpc_dec_tiledecode	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_tiledecode(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f	file:
jpc_dec_tilefini	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_tilefini(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f	file:
jpc_dec_tileinit	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_dec_tileinit(jpc_dec_t *dec, jpc_dec_tile_t *tile)$/;"	f	file:
jpc_decode	Terrain/jasper/jpc/jpc_dec.c	/^jas_image_t *jpc_decode(jas_stream_t *in, const char *optstr)$/;"	f
jpc_dequantize	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_dequantize(jas_matrix_t *x, jpc_fix_t absstepsize)$/;"	f	file:
jpc_fix_abs	Terrain/jasper/jpc/jpc_fix.h	132;"	d
jpc_fix_add	Terrain/jasper/jpc/jpc_fix.h	113;"	d
jpc_fix_add3	Terrain/jasper/jpc/jpc_fix.h	144;"	d
jpc_fix_asl	Terrain/jasper/jpc/jpc_fix.h	124;"	d
jpc_fix_asr	Terrain/jasper/jpc/jpc_fix.h	125;"	d
jpc_fix_big_t	Terrain/jasper/jpc/jpc_fix.h	/^typedef int_fast64_t jpc_fix_big_t;$/;"	t
jpc_fix_div	Terrain/jasper/jpc/jpc_fix.h	119;"	d
jpc_fix_firstone	Terrain/jasper/jpc/jpc_math.c	/^int jpc_fix_firstone(jpc_fix_t x)$/;"	f
jpc_fix_floor	Terrain/jasper/jpc/jpc_fix.h	136;"	d
jpc_fix_isint	Terrain/jasper/jpc/jpc_fix.h	133;"	d
jpc_fix_minuseq	Terrain/jasper/jpc/jpc_fix.h	128;"	d
jpc_fix_mul	Terrain/jasper/jpc/jpc_fix.h	115;"	d
jpc_fix_mulbyint	Terrain/jasper/jpc/jpc_fix.h	117;"	d
jpc_fix_muleq	Terrain/jasper/jpc/jpc_fix.h	129;"	d
jpc_fix_neg	Terrain/jasper/jpc/jpc_fix.h	121;"	d
jpc_fix_pluseq	Terrain/jasper/jpc/jpc_fix.h	127;"	d
jpc_fix_round	Terrain/jasper/jpc/jpc_fix.h	135;"	d
jpc_fix_sgn	Terrain/jasper/jpc/jpc_fix.h	134;"	d
jpc_fix_sub	Terrain/jasper/jpc/jpc_fix.h	114;"	d
jpc_fix_t	Terrain/jasper/jpc/jpc_fix.h	/^typedef int_fast32_t jpc_fix_t;$/;"	t
jpc_fix_trunc	Terrain/jasper/jpc/jpc_fix.h	137;"	d
jpc_fixtodbl	Terrain/jasper/jpc/jpc_fix.h	110;"	d
jpc_fixtoint	Terrain/jasper/jpc/jpc_fix.h	109;"	d
jpc_floorlog2	Terrain/jasper/jpc/jpc_math.c	/^int jpc_floorlog2(int x)$/;"	f
jpc_flt_t	Terrain/jasper/jpc/jpc_flt.h	/^typedef double jpc_flt_t;$/;"	t
jpc_ft_analyze	Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ft_analyze(jpc_fix_t *a, int xstart, int ystart, int width, int height,$/;"	f
jpc_ft_fwdlift_col	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_fwdlift_col(jpc_fix_t *a, int numrows, int stride, int parity)$/;"	f
jpc_ft_fwdlift_colgrp	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_fwdlift_colgrp(jpc_fix_t *a, int numrows, int stride, int parity)$/;"	f
jpc_ft_fwdlift_colres	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_fwdlift_colres(jpc_fix_t *a, int numrows, int numcols, int stride,$/;"	f
jpc_ft_fwdlift_row	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_fwdlift_row(jpc_fix_t *a, int numcols, int parity)$/;"	f
jpc_ft_hpenergywts	Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ft_hpenergywts[32] = {$/;"	v	file:
jpc_ft_invlift_col	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_invlift_col(jpc_fix_t *a, int numrows, int stride, int parity)$/;"	f
jpc_ft_invlift_colgrp	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_invlift_colgrp(jpc_fix_t *a, int numrows, int stride, int parity)$/;"	f
jpc_ft_invlift_colres	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_invlift_colres(jpc_fix_t *a, int numrows, int numcols, int stride,$/;"	f
jpc_ft_invlift_row	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ft_invlift_row(jpc_fix_t *a, int numcols, int parity)$/;"	f
jpc_ft_lpenergywts	Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ft_lpenergywts[32] = {$/;"	v	file:
jpc_ft_qmfb2d	Terrain/jasper/jpc/jpc_qmfb.c	/^const jpc_qmfb2d_t jpc_ft_qmfb2d = {$/;"	v
jpc_ft_synthesize	Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ft_synthesize(jpc_fix_t *a, int xstart, int ystart, int width, int height,$/;"	f
jpc_getcommacode	Terrain/jasper/jpc/jpc_t2dec.c	/^static int jpc_getcommacode(jpc_bitstream_t *in)$/;"	f	file:
jpc_getdata	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getdata(jas_stream_t *in, jas_stream_t *out, long len)$/;"	f
jpc_getmagctxno	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_getmagctxno(int f)$/;"	f
jpc_getms	Terrain/jasper/jpc/jpc_cs.c	/^jpc_ms_t *jpc_getms(jas_stream_t *in, jpc_cstate_t *cstate)$/;"	f
jpc_getnumnewpasses	Terrain/jasper/jpc/jpc_t2dec.c	/^static int jpc_getnumnewpasses(jpc_bitstream_t *in)$/;"	f	file:
jpc_getrefnmsedec_macro	Terrain/jasper/jpc/jpc_t1cod.h	228;"	d
jpc_getscctxno	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_getscctxno(int f)$/;"	f
jpc_getsignmsedec_func	Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_getsignmsedec_func(jpc_fix_t x, int bitpos)$/;"	f
jpc_getsignmsedec_macro	Terrain/jasper/jpc/jpc_t1cod.h	221;"	d
jpc_getspb	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_getspb(int f)$/;"	f
jpc_getuint16	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getuint16(jas_stream_t *in, uint_fast16_t *val)$/;"	f
jpc_getuint32	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getuint32(jas_stream_t *in, uint_fast32_t *val)$/;"	f
jpc_getuint8	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_getuint8(jas_stream_t *in, uint_fast8_t *val)$/;"	f
jpc_getzcctxno	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_getzcctxno(int f, int orient)$/;"	f
jpc_initctxs	Terrain/jasper/jpc/jpc_t1cod.c	/^void jpc_initctxs(jpc_mqctx_t *ctxs)$/;"	f
jpc_initluts	Terrain/jasper/jpc/jpc_t1cod.c	/^void jpc_initluts()$/;"	f
jpc_initmqctxs	Terrain/jasper/jpc/jpc_t1cod.c	/^static void jpc_initmqctxs()$/;"	f	file:
jpc_int_firstone	Terrain/jasper/jpc/jpc_math.c	/^int jpc_int_firstone(int x)$/;"	f
jpc_inttofix	Terrain/jasper/jpc/jpc_fix.h	108;"	d
jpc_magctxnolut	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_magctxnolut[4096];$/;"	v
jpc_mqctx_t	Terrain/jasper/jpc/jpc_mqcod.h	/^} jpc_mqctx_t;$/;"	t	typeref:struct:__anon134
jpc_mqctxs	Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_mqctx_t jpc_mqctxs[JPC_NUMCTXS];$/;"	v
jpc_mqdec_bytein	Terrain/jasper/jpc/jpc_mqdec.c	/^static void jpc_mqdec_bytein(jpc_mqdec_t *mqdec)$/;"	f	file:
jpc_mqdec_bytein2	Terrain/jasper/jpc/jpc_mqdec.h	241;"	d
jpc_mqdec_create	Terrain/jasper/jpc/jpc_mqdec.c	/^jpc_mqdec_t *jpc_mqdec_create(int maxctxs, jas_stream_t *in)$/;"	f
jpc_mqdec_destroy	Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_destroy(jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_getbit	Terrain/jasper/jpc/jpc_mqdec.h	162;"	d
jpc_mqdec_getbit	Terrain/jasper/jpc/jpc_mqdec.h	165;"	d
jpc_mqdec_getbit_func	Terrain/jasper/jpc/jpc_mqdec.c	/^int jpc_mqdec_getbit_func(register jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_getbit_macro	Terrain/jasper/jpc/jpc_mqdec.h	191;"	d
jpc_mqdec_getbitnoskew	Terrain/jasper/jpc/jpc_mqdec.h	171;"	d
jpc_mqdec_getbitnoskew	Terrain/jasper/jpc/jpc_mqdec.h	174;"	d
jpc_mqdec_init	Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_init(jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_lpsexchange	Terrain/jasper/jpc/jpc_mqdec.h	214;"	d
jpc_mqdec_lpsexchrenormd	Terrain/jasper/jpc/jpc_mqdec.c	/^int jpc_mqdec_lpsexchrenormd(register jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_mpsexchange	Terrain/jasper/jpc/jpc_mqdec.h	199;"	d
jpc_mqdec_mpsexchrenormd	Terrain/jasper/jpc/jpc_mqdec.c	/^int jpc_mqdec_mpsexchrenormd(register jpc_mqdec_t *mqdec)$/;"	f
jpc_mqdec_renormd	Terrain/jasper/jpc/jpc_mqdec.h	229;"	d
jpc_mqdec_setctx	Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_setctx(jpc_mqdec_t *mqdec, int ctxno, jpc_mqctx_t *ctx)$/;"	f
jpc_mqdec_setctxs	Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_setctxs(const jpc_mqdec_t *mqdec, int numctxs, jpc_mqctx_t *ctxs)$/;"	f
jpc_mqdec_setcurctx	Terrain/jasper/jpc/jpc_mqdec.h	147;"	d
jpc_mqdec_setinput	Terrain/jasper/jpc/jpc_mqdec.c	/^void jpc_mqdec_setinput(jpc_mqdec_t *mqdec, jas_stream_t *in)$/;"	f
jpc_mqdec_t	Terrain/jasper/jpc/jpc_mqdec.h	/^} jpc_mqdec_t;$/;"	t	typeref:struct:__anon133
jpc_mqstate_s	Terrain/jasper/jpc/jpc_mqcod.h	/^typedef struct jpc_mqstate_s {$/;"	s
jpc_mqstate_t	Terrain/jasper/jpc/jpc_mqcod.h	/^} jpc_mqstate_t;$/;"	t	typeref:struct:jpc_mqstate_s
jpc_mqstates	Terrain/jasper/jpc/jpc_mqcod.c	/^const jpc_mqstate_t jpc_mqstates[47 * 2] = {$/;"	v
jpc_ms_create	Terrain/jasper/jpc/jpc_cs.c	/^jpc_ms_t *jpc_ms_create(int type)$/;"	f
jpc_ms_destroy	Terrain/jasper/jpc/jpc_cs.c	/^void jpc_ms_destroy(jpc_ms_t *ms)$/;"	f
jpc_ms_dump	Terrain/jasper/jpc/jpc_cs.h	746;"	d
jpc_ms_gettype	Terrain/jasper/jpc/jpc_cs.h	727;"	d
jpc_ms_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_ms_t;$/;"	t	typeref:struct:__anon179
jpc_msops_s	Terrain/jasper/jpc/jpc_cs.h	/^typedef struct jpc_msops_s {$/;"	s
jpc_msops_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_msops_t;$/;"	t	typeref:struct:jpc_msops_s
jpc_msparms_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_msparms_t;$/;"	t	typeref:union:__anon178
jpc_mstab	Terrain/jasper/jpc/jpc_cs.c	/^static const jpc_mstabent_t jpc_mstab[] = {$/;"	v	file:
jpc_mstab_lookup	Terrain/jasper/jpc/jpc_cs.c	/^static const jpc_mstabent_t *jpc_mstab_lookup(int id)$/;"	f	file:
jpc_mstabent_t	Terrain/jasper/jpc/jpc_cs.c	/^} jpc_mstabent_t;$/;"	t	typeref:struct:__anon156	file:
jpc_ns_analyze	Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ns_analyze(jpc_fix_t *a, int xstart, int ystart, int width, int height,$/;"	f
jpc_ns_fwdlift_colgrp	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ns_fwdlift_colgrp(jpc_fix_t *a, int numrows, int stride,$/;"	f
jpc_ns_fwdlift_colres	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ns_fwdlift_colres(jpc_fix_t *a, int numrows, int numcols,$/;"	f
jpc_ns_fwdlift_row	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ns_fwdlift_row(jpc_fix_t *a, int numcols, int parity)$/;"	f
jpc_ns_hpenergywts	Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ns_hpenergywts[32] = {$/;"	v	file:
jpc_ns_invlift_colgrp	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ns_invlift_colgrp(jpc_fix_t *a, int numrows, int stride,$/;"	f
jpc_ns_invlift_colres	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ns_invlift_colres(jpc_fix_t *a, int numrows, int numcols,$/;"	f
jpc_ns_invlift_row	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_ns_invlift_row(jpc_fix_t *a, int numcols, int parity)$/;"	f
jpc_ns_lpenergywts	Terrain/jasper/jpc/jpc_qmfb.c	/^static const double jpc_ns_lpenergywts[32] = {$/;"	v	file:
jpc_ns_qmfb2d	Terrain/jasper/jpc/jpc_qmfb.c	/^const jpc_qmfb2d_t jpc_ns_qmfb2d = {$/;"	v
jpc_ns_synthesize	Terrain/jasper/jpc/jpc_qmfb.c	/^int jpc_ns_synthesize(jpc_fix_t *a, int xstart, int ystart, int width,$/;"	f
jpc_pchg_copy	Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchg_t *jpc_pchg_copy(jpc_pchg_t *pchg)$/;"	f
jpc_pchg_destroy	Terrain/jasper/jpc/jpc_t2cod.c	/^void jpc_pchg_destroy(jpc_pchg_t *pchg)$/;"	f
jpc_pchg_t	Terrain/jasper/jpc/jpc_cs.h	/^typedef jpc_pocpchg_t jpc_pchg_t;$/;"	t
jpc_pchglist_copy	Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchglist_t *jpc_pchglist_copy(jpc_pchglist_t *pchglist)$/;"	f
jpc_pchglist_create	Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchglist_t *jpc_pchglist_create()$/;"	f
jpc_pchglist_destroy	Terrain/jasper/jpc/jpc_t2cod.c	/^void jpc_pchglist_destroy(jpc_pchglist_t *pchglist)$/;"	f
jpc_pchglist_get	Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchg_t *jpc_pchglist_get(jpc_pchglist_t *pchglist, int pchgno)$/;"	f
jpc_pchglist_insert	Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pchglist_insert(jpc_pchglist_t *pchglist, int pchgno, jpc_pchg_t *pchg)$/;"	f
jpc_pchglist_numpchgs	Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pchglist_numpchgs(jpc_pchglist_t *pchglist)$/;"	f
jpc_pchglist_remove	Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pchg_t *jpc_pchglist_remove(jpc_pchglist_t *pchglist, int pchgno)$/;"	f
jpc_pchglist_t	Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_pchglist_t;$/;"	t	typeref:struct:__anon135
jpc_pi_addpchg	Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pi_addpchg(jpc_pi_t *pi, jpc_pocpchg_t *pchg)$/;"	f
jpc_pi_addpchgfrompoc	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_pi_addpchgfrompoc(jpc_pi_t *pi, jpc_poc_t *poc)$/;"	f	file:
jpc_pi_cmptno	Terrain/jasper/jpc/jpc_t2cod.h	250;"	d
jpc_pi_create0	Terrain/jasper/jpc/jpc_t2cod.c	/^jpc_pi_t *jpc_pi_create0()$/;"	f
jpc_pi_destroy	Terrain/jasper/jpc/jpc_t2cod.c	/^void jpc_pi_destroy(jpc_pi_t *pi)$/;"	f
jpc_pi_getind	Terrain/jasper/jpc/jpc_t2cod.h	247;"	d
jpc_pi_init	Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pi_init(jpc_pi_t *pi)$/;"	f
jpc_pi_lyrno	Terrain/jasper/jpc/jpc_t2cod.h	256;"	d
jpc_pi_next	Terrain/jasper/jpc/jpc_t2cod.c	/^int jpc_pi_next(jpc_pi_t *pi)$/;"	f
jpc_pi_nextcprl	Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextcprl(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextlrcp	Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextlrcp(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextpcrl	Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextpcrl(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextrlcp	Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextrlcp(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_nextrpcl	Terrain/jasper/jpc/jpc_t2cod.c	/^static int jpc_pi_nextrpcl(register jpc_pi_t *pi)$/;"	f	file:
jpc_pi_prcno	Terrain/jasper/jpc/jpc_t2cod.h	259;"	d
jpc_pi_prg	Terrain/jasper/jpc/jpc_t2cod.h	262;"	d
jpc_pi_rlvlno	Terrain/jasper/jpc/jpc_t2cod.h	253;"	d
jpc_pi_t	Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_pi_t;$/;"	t	typeref:struct:__anon138
jpc_picomp_destroy	Terrain/jasper/jpc/jpc_t2cod.c	/^static void jpc_picomp_destroy(jpc_picomp_t *picomp)$/;"	f	file:
jpc_picomp_t	Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_picomp_t;$/;"	t	typeref:struct:__anon137
jpc_pirlvl_t	Terrain/jasper/jpc/jpc_t2cod.h	/^} jpc_pirlvl_t;$/;"	t	typeref:struct:__anon136
jpc_poc_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_poc_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_poc_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_poc_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_poc_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_poc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_poc_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_poc_t;$/;"	t	typeref:struct:__anon170
jpc_pocpchg_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_pocpchg_t;$/;"	t	typeref:struct:__anon169
jpc_pow2i	Terrain/jasper/jpc/jpc_t1cod.c	/^static double jpc_pow2i(int n)$/;"	f	file:
jpc_ppm_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_ppm_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_ppm_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppm_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_ppm_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppm_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_ppm_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_ppm_t;$/;"	t	typeref:struct:__anon171
jpc_ppmstabtostreams	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_streamlist_t *jpc_ppmstabtostreams(jpc_ppxstab_t *tab)$/;"	f	file:
jpc_ppt_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_ppt_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_ppt_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppt_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_ppt_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_ppt_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_ppt_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_ppt_t;$/;"	t	typeref:struct:__anon172
jpc_pptstabwrite	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_pptstabwrite(jas_stream_t *out, jpc_ppxstab_t *tab)$/;"	f	file:
jpc_ppxstab_create	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_ppxstab_t *jpc_ppxstab_create()$/;"	f	file:
jpc_ppxstab_destroy	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_ppxstab_destroy(jpc_ppxstab_t *tab)$/;"	f	file:
jpc_ppxstab_grow	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_ppxstab_grow(jpc_ppxstab_t *tab, int maxents)$/;"	f	file:
jpc_ppxstab_insert	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_ppxstab_insert(jpc_ppxstab_t *tab, jpc_ppxstabent_t *ent)$/;"	f	file:
jpc_ppxstab_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_ppxstab_t;$/;"	t	typeref:struct:__anon140
jpc_ppxstabent_create	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_ppxstabent_t *jpc_ppxstabent_create()$/;"	f	file:
jpc_ppxstabent_destroy	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_ppxstabent_destroy(jpc_ppxstabent_t *ent)$/;"	f	file:
jpc_ppxstabent_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_ppxstabent_t;$/;"	t	typeref:struct:__anon139
jpc_putdata	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putdata(jas_stream_t *out, jas_stream_t *in, long len)$/;"	f
jpc_putms	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putms(jas_stream_t *out, jpc_cstate_t *cstate, jpc_ms_t *ms)$/;"	f
jpc_putuint16	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putuint16(jas_stream_t *out, uint_fast16_t val)$/;"	f
jpc_putuint32	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putuint32(jas_stream_t *out, uint_fast32_t val)$/;"	f
jpc_putuint8	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_putuint8(jas_stream_t *out, uint_fast8_t val)$/;"	f
jpc_qcc_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_qcc_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_qcc_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcc_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_qcc_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_qcc_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_qcc_t;$/;"	t	typeref:struct:__anon167
jpc_qcd_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_qcd_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_qcd_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcd_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_qcd_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcd_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_qcd_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_qcd_t;$/;"	t	typeref:struct:__anon168
jpc_qcx_destroycompparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_qcx_destroycompparms(jpc_qcxcp_t *compparms)$/;"	f	file:
jpc_qcx_getcompparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcx_getcompparms(jpc_qcxcp_t *compparms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_qcx_putcompparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_qcx_putcompparms(jpc_qcxcp_t *compparms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_qcxcp_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_qcxcp_t;$/;"	t	typeref:struct:__anon166
jpc_qmfb2d_t	Terrain/jasper/jpc/jpc_qmfb.h	/^} jpc_qmfb2d_t;$/;"	t	typeref:struct:__anon128
jpc_qmfb_join_col	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_join_col(jpc_fix_t *a, int numrows, int stride,$/;"	f
jpc_qmfb_join_colgrp	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, int stride,$/;"	f
jpc_qmfb_join_colres	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, int numcols,$/;"	f
jpc_qmfb_join_row	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_join_row(jpc_fix_t *a, int numcols, int parity)$/;"	f
jpc_qmfb_split_col	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int stride,$/;"	f
jpc_qmfb_split_colgrp	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,$/;"	f
jpc_qmfb_split_colres	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,$/;"	f
jpc_qmfb_split_row	Terrain/jasper/jpc/jpc_qmfb.c	/^void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int parity)$/;"	f
jpc_rawrefpass_step	Terrain/jasper/jpc/jpc_t1dec.c	650;"	d	file:
jpc_rawsigpass_step	Terrain/jasper/jpc/jpc_t1dec.c	443;"	d	file:
jpc_refnmsedec	Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_refnmsedec[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_refnmsedec0	Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_refnmsedec0[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_refpass_step	Terrain/jasper/jpc/jpc_t1dec.c	554;"	d	file:
jpc_rgn_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_rgn_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_rgn_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_rgn_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_rgn_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_rgn_t;$/;"	t	typeref:struct:__anon165
jpc_scctxnolut	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_scctxnolut[256];$/;"	v
jpc_seg_alloc	Terrain/jasper/jpc/jpc_dec.c	/^jpc_dec_seg_t *jpc_seg_alloc()$/;"	f
jpc_seg_destroy	Terrain/jasper/jpc/jpc_dec.c	/^void jpc_seg_destroy(jpc_dec_seg_t *seg)$/;"	f
jpc_seglist_insert	Terrain/jasper/jpc/jpc_dec.c	/^void jpc_seglist_insert(jpc_dec_seglist_t *list, jpc_dec_seg_t *ins, jpc_dec_seg_t *node)$/;"	f
jpc_seglist_remove	Terrain/jasper/jpc/jpc_dec.c	/^void jpc_seglist_remove(jpc_dec_seglist_t *list, jpc_dec_seg_t *seg)$/;"	f
jpc_signmsedec	Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_signmsedec[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_signmsedec0	Terrain/jasper/jpc/jpc_t1cod.c	/^jpc_fix_t jpc_signmsedec0[1 << JPC_NMSEDEC_BITS];$/;"	v
jpc_sigpass_step	Terrain/jasper/jpc/jpc_t1dec.c	339;"	d	file:
jpc_siz_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_siz_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_siz_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_siz_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate,$/;"	f	file:
jpc_siz_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_siz_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_siz_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_siz_t;$/;"	t	typeref:struct:__anon160
jpc_sizcomp_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_sizcomp_t;$/;"	t	typeref:struct:__anon159
jpc_sop_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sop_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_sop_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sop_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_sop_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_sop_t;$/;"	t	typeref:struct:__anon174
jpc_sot_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sot_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_sot_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_sot_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_sot_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_sot_t;$/;"	t	typeref:struct:__anon158
jpc_spblut	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_spblut[256];$/;"	v
jpc_streamlist_create	Terrain/jasper/jpc/jpc_dec.c	/^static jpc_streamlist_t *jpc_streamlist_create()$/;"	f	file:
jpc_streamlist_destroy	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_streamlist_destroy(jpc_streamlist_t *streamlist)$/;"	f	file:
jpc_streamlist_insert	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_streamlist_insert(jpc_streamlist_t *streamlist, int streamno,$/;"	f	file:
jpc_streamlist_numstreams	Terrain/jasper/jpc/jpc_dec.c	/^static int jpc_streamlist_numstreams(jpc_streamlist_t *streamlist)$/;"	f	file:
jpc_streamlist_remove	Terrain/jasper/jpc/jpc_dec.c	/^static jas_stream_t *jpc_streamlist_remove(jpc_streamlist_t *streamlist, int streamno)$/;"	f	file:
jpc_streamlist_t	Terrain/jasper/jpc/jpc_dec.h	/^} jpc_streamlist_t;$/;"	t	typeref:struct:__anon141
jpc_tagtree_alloc	Terrain/jasper/jpc/jpc_tagtree.c	/^static jpc_tagtree_t *jpc_tagtree_alloc()$/;"	f	file:
jpc_tagtree_copy	Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_copy(jpc_tagtree_t *dsttree, jpc_tagtree_t *srctree)$/;"	f
jpc_tagtree_create	Terrain/jasper/jpc/jpc_tagtree.c	/^jpc_tagtree_t *jpc_tagtree_create(int numleafsh, int numleafsv)$/;"	f
jpc_tagtree_decode	Terrain/jasper/jpc/jpc_tagtree.c	/^int jpc_tagtree_decode(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,$/;"	f
jpc_tagtree_destroy	Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_destroy(jpc_tagtree_t *tree)$/;"	f
jpc_tagtree_encode	Terrain/jasper/jpc/jpc_tagtree.c	/^int jpc_tagtree_encode(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,$/;"	f
jpc_tagtree_getleaf	Terrain/jasper/jpc/jpc_tagtree.c	/^jpc_tagtreenode_t *jpc_tagtree_getleaf(jpc_tagtree_t *tree, int n)$/;"	f
jpc_tagtree_reset	Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_reset(jpc_tagtree_t *tree)$/;"	f
jpc_tagtree_setvalue	Terrain/jasper/jpc/jpc_tagtree.c	/^void jpc_tagtree_setvalue(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,$/;"	f
jpc_tagtree_t	Terrain/jasper/jpc/jpc_tagtree.h	/^} jpc_tagtree_t;$/;"	t	typeref:struct:__anon132
jpc_tagtreenode_	Terrain/jasper/jpc/jpc_tagtree.h	/^typedef struct jpc_tagtreenode_ {$/;"	s
jpc_tagtreenode_t	Terrain/jasper/jpc/jpc_tagtree.h	/^} jpc_tagtreenode_t;$/;"	t	typeref:struct:jpc_tagtreenode_
jpc_tsfb_analyze	Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_analyze(jpc_tsfb_t *tsfb, jas_seq2d_t *a)$/;"	f
jpc_tsfb_analyze2	Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_analyze2(jpc_tsfb_t *tsfb, jpc_fix_t *a, int xstart, int ystart,$/;"	f
jpc_tsfb_band_t	Terrain/jasper/jpc/jpc_tsfb.h	/^} jpc_tsfb_band_t;$/;"	t	typeref:struct:__anon130
jpc_tsfb_destroy	Terrain/jasper/jpc/jpc_tsfb.c	/^void jpc_tsfb_destroy(jpc_tsfb_t *tsfb)$/;"	f
jpc_tsfb_getbands	Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_getbands(jpc_tsfb_t *tsfb, uint_fast32_t xstart,$/;"	f
jpc_tsfb_getbands2	Terrain/jasper/jpc/jpc_tsfb.c	/^void jpc_tsfb_getbands2(jpc_tsfb_t *tsfb, int locxstart, int locystart,$/;"	f
jpc_tsfb_synthesize	Terrain/jasper/jpc/jpc_tsfb.c	/^int jpc_tsfb_synthesize(jpc_tsfb_t *tsfb, jas_seq2d_t *a)$/;"	f
jpc_tsfb_synthesize2	Terrain/jasper/jpc/jpc_tsfb.c	/^static int jpc_tsfb_synthesize2(jpc_tsfb_t *tsfb, jpc_fix_t *a, int xstart, int ystart,$/;"	f	file:
jpc_tsfb_t	Terrain/jasper/jpc/jpc_tsfb.h	/^} jpc_tsfb_t;$/;"	t	typeref:struct:__anon131
jpc_undo_roi	Terrain/jasper/jpc/jpc_dec.c	/^static void jpc_undo_roi(jas_matrix_t *x, int roishift, int bgshift, int numbps)$/;"	f	file:
jpc_unk_destroyparms	Terrain/jasper/jpc/jpc_cs.c	/^static void jpc_unk_destroyparms(jpc_ms_t *ms)$/;"	f	file:
jpc_unk_getparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_unk_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)$/;"	f	file:
jpc_unk_putparms	Terrain/jasper/jpc/jpc_cs.c	/^static int jpc_unk_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out)$/;"	f	file:
jpc_unk_t	Terrain/jasper/jpc/jpc_cs.h	/^} jpc_unk_t;$/;"	t	typeref:struct:__anon177
jpc_validate	Terrain/jasper/jpc/jpc_cs.c	/^int jpc_validate(jas_stream_t *in)$/;"	f
jpc_zcctxnolut	Terrain/jasper/jpc/jpc_t1cod.c	/^int jpc_zcctxnolut[4 * 256];$/;"	v
jvm	Java/Global.cxx	/^	JavaVM *jvm;$/;"	m	namespace:Java	file:
k	Computer/Wind/WindEKF.hpp	/^  float k;$/;"	m	class:WindEKF
k	Util/MD5.cpp	/^static constexpr uint32_t k[64] = {$/;"	v	file:
k0	Geo/UTM.cpp	/^static constexpr double k0 = 0.9996;$/;"	v	file:
k1	Atmosphere/Pressure.cpp	28;"	d	file:
k2	Atmosphere/Pressure.cpp	30;"	d	file:
k4	Atmosphere/AirDensity.cpp	29;"	d	file:
k6	Atmosphere/AirDensity.cpp	30;"	d	file:
k6bt	Device/Config.hpp	/^  bool k6bt;$/;"	m	struct:DeviceConfig
k7	Atmosphere/AirDensity.cpp	31;"	d	file:
k_ext	Device/Driver/LX/Convert.cpp	/^  LXN::ExtensionConfig k_ext, b_ext;$/;"	m	struct:Context	file:
k_ext	Device/Driver/LX/LXN.hpp	/^    const struct KExt *k_ext;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::KExt
kalman_filter	Android/BMP085Device.hpp	/^  SelfTimingKalmanFilter1d kalman_filter;$/;"	m	class:final
kalman_filter	Android/I2CbaroDevice.hpp	/^  SelfTimingKalmanFilter1d kalman_filter;$/;"	m	class:final
kalman_filter	Android/NunchuckDevice.hpp	/^  SelfTimingKalmanFilter1d kalman_filter;$/;"	m	class:final
kalman_filter	Device/Driver/BlueFly/Internal.hpp	/^  KalmanFilter1d kalman_filter;$/;"	m	class:BlueFlyDevice
kb	Dialogs/TouchTextEntry.cpp	/^static KeyboardWidget *kb = NULL;$/;"	v	file:
kd	Screen/Memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
key	Cloud/Client.hpp	/^  const uint64_t key;$/;"	m	struct:CloudClient
key	IO/KeyValueFileReader.hpp	/^  char *key;$/;"	m	struct:KeyValuePair
key	Input/InputDefaults.cpp	/^  uint16_t key;$/;"	m	struct:flat_event_map	file:
key	Input/InputDefaults.cpp	/^  unsigned char key;$/;"	m	struct:flat_event_map	file:
key	Input/InputDefaults.cpp	/^  unsigned key;$/;"	m	struct:flat_event_map	file:
key	Input/InputDefaults.cpp	/^  unsigned short key;$/;"	m	struct:flat_event_map	file:
key	Input/InputKeys.cpp	/^  unsigned key;$/;"	m	struct:string_to_key	file:
key	Screen/Memory/NEON.hpp	/^  uint8_t key;$/;"	m	class:NEONTransparentPixelOperations
key	Screen/Memory/PixelOperations.hpp	/^  argument_type key;$/;"	m	struct:ColorKey
key	Screen/Memory/PixelOperations.hpp	/^  color_type key;$/;"	m	class:TransparentInvertPixelOperations
key	StatusMessage.hpp	/^  const TCHAR *key;$/;"	m	struct:StatusMessage
key	Tracking/SkyLines/Client.hpp	/^  uint64_t key = 0;$/;"	m	class:SkyLinesTracking::Client
key	Tracking/SkyLines/CloudSettings.hpp	/^  uint64_t key;$/;"	m	struct:SkyLinesTracking::CloudSettings
key	Tracking/SkyLines/Protocol.hpp	/^  uint64_t key;$/;"	m	struct:SkyLinesTracking::Header
key	Tracking/SkyLines/Server.hpp	/^    uint64_t key;$/;"	m	struct:SkyLinesTracking::Server::Client
key	Tracking/SkyLines/Settings.hpp	/^  uint64_t key;$/;"	m	struct:SkyLinesTracking::Settings
key	Util/Cache.hxx	/^		Key key;$/;"	m	struct:Cache::Pair
key	Util/RadixTree.hpp	/^      const TCHAR *key;$/;"	m	struct:RadixTree::Node::Match
key	Util/RadixTree.hpp	/^    const TCHAR *key;$/;"	m	struct:RadixTree::KeyVisitorAdapter
key_buckets	Cloud/Client.hpp	/^  typename KeySet::bucket_type key_buckets[N_KEY_BUCKETS];$/;"	m	class:CloudClientContainer
key_code_translation_table	Event/Poll/Linux/Translate.hpp	/^} key_code_translation_table[] = {$/;"	v	typeref:struct:__anon7
key_down_function	Form/Form.hpp	/^  KeyDownFunction key_down_function;$/;"	m	class:WndForm
key_set	Cloud/Client.hpp	/^  KeySet key_set;$/;"	m	class:CloudClientContainer
key_to_event	Input/InputEvents.cpp	/^key_to_event(InputEvents::Mode mode, InputEvents::Mode overlay_mode,$/;"	f	file:
key_to_event	Input/InputEvents.cpp	/^key_to_event(InputEvents::Mode mode, unsigned key_code)$/;"	f	file:
keyboard	Event/Poll/InputQueue.hpp	/^  LinuxInputDevice keyboard;$/;"	m	class:DisplayOrientation
keyboard_letters	Widget/KeyboardWidget.cpp	/^static constexpr TCHAR keyboard_letters[] =$/;"	v	file:
keyimage	Topography/shapelib/mapserver.h	/^    char *keyimage;$/;"	m	struct:classObj
keylaenge	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t keylaenge;$/;"	m	struct:Volkslogger::TableHeader
keylaenge	Device/Driver/Volkslogger/dbbconv.h	/^    unsigned dslaenge, keylaenge;$/;"	m	struct:DBB::HEADER
keys	Form/ButtonPanel.hpp	/^  unsigned keys[8u];$/;"	m	class:ButtonPanel
keysizex	Topography/shapelib/mapserver.h	/^    int keysizex, keysizey;$/;"	m	struct:__anon55
keysizey	Topography/shapelib/mapserver.h	/^    int keysizex, keysizey;$/;"	m	struct:__anon55
keyspacingx	Topography/shapelib/mapserver.h	/^    int keyspacingx, keyspacingy;$/;"	m	struct:__anon55
keyspacingy	Topography/shapelib/mapserver.h	/^    int keyspacingx, keyspacingy;$/;"	m	struct:__anon55
khz	Device/Driver/KRT2.cpp	/^    uint8_t khz;$/;"	m	struct:final::stx_msg	file:
kinetic	Form/List.hpp	/^  KineticManager kinetic;$/;"	m	class:ListControl
kinetic_x	MapWindow/GlueMapWindow.hpp	/^  KineticManager kinetic_x = 700, kinetic_y = 700;$/;"	m	class:GlueMapWindow
kinetic_y	MapWindow/GlueMapWindow.hpp	/^  KineticManager kinetic_x = 700, kinetic_y = 700;$/;"	m	class:GlueMapWindow
known_	Terrain/jasper/jpc/jpc_tagtree.h	/^	int known_;$/;"	m	struct:jpc_tagtreenode_
kobo_model_ids	Kobo/Model.cpp	/^} kobo_model_ids[] = {$/;"	v	typeref:struct:__anon211	file:
koord	Device/Driver/Volkslogger/vlconv.cpp	/^  KOORD koord;$/;"	m	class:C2	file:
krt2_driver	Device/Driver/KRT2.cpp	/^const struct DeviceRegister krt2_driver = {$/;"	v	typeref:struct:DeviceRegister
kt	Screen/Memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
ku	Screen/Memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
kv	Screen/Memory/Murphy.hpp	/^  int ku, kt, kv, kd;$/;"	m	struct:MurphyIterator
lLastBaudrate	Device/Driver/EW.cpp	/^  unsigned lLastBaudrate;$/;"	m	class:EWDevice	file:
l_GeoPoint_tostring	Lua/Geo.cpp	/^l_GeoPoint_tostring(lua_State *L)$/;"	f	file:
l_airspace_index	Lua/Airspace.cpp	/^l_airspace_index(lua_State *L)$/;"	f	file:
l_alert	Lua/Dialogs.cpp	/^l_alert(lua_State *L)$/;"	f	file:
l_blackboard_index	Lua/Blackboard.cpp	/^l_blackboard_index(lua_State *L)$/;"	f	file:
l_cancel	Lua/InputEvent.cpp	/^  static int l_cancel(lua_State *L) {$/;"	f	class:final
l_cancel	Lua/Timer.cpp	/^LuaTimer::l_cancel(lua_State *L)$/;"	f	class:LuaTimer
l_clear	Lua/InputEvent.cpp	/^  static int l_clear(lua_State *L) {$/;"	f	class:final
l_fire_legacy_event	Lua/Legacy.cpp	/^l_fire_legacy_event(lua_State *L)$/;"	f	file:
l_gc	Lua/Class.hxx	/^	static int l_gc(lua_State *L) {$/;"	f	struct:Lua::Class
l_gc	Lua/InputEvent.cpp	/^  static int l_gc(lua_State *L) {$/;"	f	class:final
l_logger_disablelogbook	Lua/Logger.cpp	/^l_logger_disablelogbook(lua_State *L)$/;"	f	file:
l_logger_disablenmea	Lua/Logger.cpp	/^l_logger_disablenmea(lua_State *L)$/;"	f	file:
l_logger_enablelogbook	Lua/Logger.cpp	/^l_logger_enablelogbook(lua_State *L)$/;"	f	file:
l_logger_enablenmea	Lua/Logger.cpp	/^l_logger_enablenmea(lua_State *L)$/;"	f	file:
l_logger_index	Lua/Logger.cpp	/^l_logger_index(lua_State *L)$/;"	f	file:
l_logger_setautologger	Lua/Logger.cpp	/^l_logger_setautologger(lua_State *L)$/;"	f	file:
l_logger_setloggerid	Lua/Logger.cpp	/^l_logger_setloggerid(lua_State *L)$/;"	f	file:
l_logger_setpilotname	Lua/Logger.cpp	/^l_logger_setpilotname(lua_State *L)$/;"	f	file:
l_logger_settimestepcircling	Lua/Logger.cpp	/^l_logger_settimestepcircling(lua_State *L)$/;"	f	file:
l_logger_settimestepcruise	Lua/Logger.cpp	/^l_logger_settimestepcruise(lua_State *L)$/;"	f	file:
l_map_disablepan	Lua/Map.cpp	/^l_map_disablepan(lua_State *L)$/;"	f	file:
l_map_enterpan	Lua/Map.cpp	/^l_map_enterpan(lua_State *L)$/;"	f	file:
l_map_index	Lua/Map.cpp	/^l_map_index(lua_State *L)$/;"	f	file:
l_map_leavepan	Lua/Map.cpp	/^l_map_leavepan(lua_State *L)$/;"	f	file:
l_map_next	Lua/Map.cpp	/^l_map_next(lua_State *L)$/;"	f	file:
l_map_pancursor	Lua/Map.cpp	/^l_map_pancursor(lua_State *L)$/;"	f	file:
l_map_panto	Lua/Map.cpp	/^l_map_panto(lua_State *L)$/;"	f	file:
l_map_prev	Lua/Map.cpp	/^l_map_prev(lua_State *L)$/;"	f	file:
l_map_show	Lua/Map.cpp	/^l_map_show(lua_State *L)$/;"	f	file:
l_map_zoom	Lua/Map.cpp	/^l_map_zoom(lua_State *L)$/;"	f	file:
l_new	Lua/InputEvent.cpp	/^  static int l_new(lua_State *L) {$/;"	f	class:final
l_new	Lua/Timer.cpp	/^LuaTimer::l_new(lua_State *L)$/;"	f	class:LuaTimer
l_print	Lua/Log.cpp	/^l_print(lua_State *L)$/;"	f	file:
l_replay_fastforward	Lua/Replay.cpp	/^l_replay_fastforward(lua_State *L)$/;"	f	file:
l_replay_index	Lua/Replay.cpp	/^l_replay_index(lua_State *L)$/;"	f	file:
l_replay_settimescale	Lua/Replay.cpp	/^l_replay_settimescale(lua_State *L)$/;"	f	file:
l_replay_start	Lua/Replay.cpp	/^l_replay_start(lua_State *L)$/;"	f	file:
l_replay_stop	Lua/Replay.cpp	/^l_replay_stop(lua_State *L)$/;"	f	file:
l_schedule	Lua/Timer.cpp	/^LuaTimer::l_schedule(lua_State *L)$/;"	f	class:LuaTimer
l_settings_index	Lua/Settings.cpp	/^l_settings_index(lua_State *L)$/;"	f	file:
l_settings_setballast	Lua/Settings.cpp	/^l_settings_setballast(lua_State *L)$/;"	f	file:
l_settings_setbugs	Lua/Settings.cpp	/^l_settings_setbugs(lua_State *L)$/;"	f	file:
l_settings_setmaxtemp	Lua/Settings.cpp	/^l_settings_setmaxtemp(lua_State *L)$/;"	f	file:
l_settings_setmc	Lua/Settings.cpp	/^l_settings_setmc(lua_State *L)$/;"	f	file:
l_settings_setqnh	Lua/Settings.cpp	/^l_settings_setqnh(lua_State *L)$/;"	f	file:
l_task_index	Lua/Task.cpp	/^l_task_index(lua_State *L)$/;"	f	file:
l_tracking_disable_livetrack24	Lua/Tracking.cpp	/^l_tracking_disable_livetrack24(lua_State *L)$/;"	f	file:
l_tracking_disable_skylines	Lua/Tracking.cpp	/^l_tracking_disable_skylines(lua_State *L)$/;"	f	file:
l_tracking_disable_skylines_neartraffic	Lua/Tracking.cpp	/^l_tracking_disable_skylines_neartraffic(lua_State *L)$/;"	f	file:
l_tracking_disable_skylines_traffic	Lua/Tracking.cpp	/^l_tracking_disable_skylines_traffic(lua_State *L)$/;"	f	file:
l_tracking_enable_livetrack24	Lua/Tracking.cpp	/^l_tracking_enable_livetrack24(lua_State *L)$/;"	f	file:
l_tracking_enable_skylines	Lua/Tracking.cpp	/^l_tracking_enable_skylines(lua_State *L)$/;"	f	file:
l_tracking_enable_skylines_neartraffic	Lua/Tracking.cpp	/^l_tracking_enable_skylines_neartraffic(lua_State *L)$/;"	f	file:
l_tracking_enable_skylines_traffic	Lua/Tracking.cpp	/^l_tracking_enable_skylines_traffic(lua_State *L)$/;"	f	file:
l_tracking_index	Lua/Tracking.cpp	/^l_tracking_index(lua_State *L)$/;"	f	file:
l_tracking_set_livetrack24_interval	Lua/Tracking.cpp	/^l_tracking_set_livetrack24_interval(lua_State *L)$/;"	f	file:
l_tracking_set_livetrack24_vehiclename	Lua/Tracking.cpp	/^l_tracking_set_livetrack24_vehiclename(lua_State *L)$/;"	f	file:
l_tracking_set_skylines_interval	Lua/Tracking.cpp	/^l_tracking_set_skylines_interval(lua_State *L)$/;"	f	file:
l_wind_clear	Lua/Wind.cpp	/^l_wind_clear(lua_State *L)$/;"	f	file:
l_wind_index	Lua/Wind.cpp	/^l_wind_index(lua_State *L)$/;"	f	file:
l_wind_settaildrift	Lua/Wind.cpp	/^l_wind_settaildrift(lua_State *L)$/;"	f	file:
l_wind_setwindbearing	Lua/Wind.cpp	/^l_wind_setwindbearing(lua_State *L)$/;"	f	file:
l_wind_setwindmode	Lua/Wind.cpp	/^l_wind_setwindmode(lua_State *L)$/;"	f	file:
l_wind_setwindspeed	Lua/Wind.cpp	/^l_wind_setwindspeed(lua_State *L)$/;"	f	file:
label	Dialogs/Device/DeviceEditWidget.cpp	/^  const TCHAR *label;$/;"	m	struct:__anon10	file:
label	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const TCHAR *label, *help;$/;"	m	struct:VegaParametersWidget::StaticParameter
label	Gauge/GaugeVario.hpp	/^    DrawInfo label;$/;"	m	struct:GaugeVario::LabelValueDrawInfo
label	Input/InputDefaults.cpp	/^  const TCHAR *label;$/;"	m	struct:flat_label	file:
label	Input/InputParser.cpp	/^  StaticString<256> type, data, label;$/;"	m	struct:EventBuilder	file:
label	MapWindow/Items/OverlayMapItem.hpp	/^  const StaticString<64> label;$/;"	m	struct:OverlayMapItem
label	MapWindow/Items/RaspMapItem.hpp	/^  const StaticString<64> label;$/;"	m	struct:RaspMapItem
label	MapWindow/OverlayBitmap.hpp	/^     label(_label) {}$/;"	f	class:final
label	MapWindow/OverlayBitmap.hpp	/^  tstring label;$/;"	m	class:final
label	Menu/MenuData.hpp	/^  const TCHAR *label;$/;"	m	class:MenuItem
label	Topography/XShape.hpp	/^  AllocatedString<TCHAR> label;$/;"	m	class:XShape
label	Topography/shapelib/mapserver.h	/^    labelObj *label;$/;"	m	struct:__anon45
label	Topography/shapelib/mapserver.h	/^    labelObj label;$/;"	m	struct:__anon54
label	Topography/shapelib/mapserver.h	/^    labelObj label;$/;"	m	struct:__anon55
label	Util/RadixTree.hpp	/^    StaticString<8> label;$/;"	m	struct:RadixTree::Node
label	Weather/PCMet/Overlays.hpp	/^  tstring label;$/;"	m	struct:PCMet::OverlayInfo
label	Weather/Rasp/RaspStore.hpp	/^    const TCHAR *label;$/;"	m	struct:RaspStore::MapInfo
label	Weather/Rasp/RaspStore.hpp	/^    const TCHAR *label;$/;"	m	struct:RaspStore::MapItem
labelCacheMemberObj	Topography/shapelib/mapserver.h	/^  } labelCacheMemberObj;$/;"	t	typeref:struct:__anon46
labelCacheObj	Topography/shapelib/mapserver.h	/^  } labelCacheObj;$/;"	t	typeref:struct:__anon49
labelCacheSlotObj	Topography/shapelib/mapserver.h	/^  } labelCacheSlotObj;$/;"	t	typeref:struct:__anon48
labelLeaderObj	Topography/shapelib/mapserver.h	/^  } labelLeaderObj;$/;"	t	typeref:struct:__anon43
labelObj	Topography/shapelib/mapserver.h	/^  struct labelObj{$/;"	s
labelObj	Topography/shapelib/mapserver.h	/^typedef struct labelObj labelObj;$/;"	t	typeref:struct:labelObj
labelPathObj	Topography/shapelib/mapserver.h	/^  } labelPathObj;$/;"	t	typeref:struct:__anon30
labelStyleObj	Topography/shapelib/mapserver.h	/^  } labelStyleObj;$/;"	t	typeref:struct:__anon71
label_auto_result	Topography/shapelib/mapserver.h	/^  struct label_auto_result {$/;"	s
label_blank_brush	Look/ChartLook.hpp	/^  Brush label_blank_brush;$/;"	m	struct:ChartLook
label_block	MapWindow/MapWindow.hpp	/^  LabelBlock label_block;$/;"	m	class:MapWindow
label_block	MapWindow/TargetMapWindow.hpp	/^  LabelBlock label_block;$/;"	m	class:TargetMapWindow
label_bottom	Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
label_bounds	Topography/shapelib/mapserver.h	/^  } label_bounds;$/;"	t	typeref:struct:__anon44
label_brush	Look/AirspaceLook.hpp	/^  Brush label_brush;$/;"	m	struct:AirspaceLook
label_cache_mode	Topography/shapelib/mapserver.h	/^} label_cache_mode;$/;"	t	typeref:enum:__anon67
label_field	Topography/TopographyFile.hpp	/^  const int label_field;$/;"	m	class:TopographyFile
label_follow_result	Topography/shapelib/mapserver.h	/^  struct label_follow_result {$/;"	s
label_font	Look/ChartLook.hpp	/^  Font label_font;$/;"	m	struct:ChartLook
label_font	Look/FlarmTrafficLook.hpp	/^  Font label_font, side_info_font, no_traffic_font;$/;"	m	struct:FlarmTrafficLook
label_pen	Look/AirspaceLook.hpp	/^  Pen label_pen;$/;"	m	struct:AirspaceLook
label_points	Topography/shapelib/mapserver.h	/^    pointObj *label_points;$/;"	m	struct:label_auto_result
label_pos	Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BallastGeometry
label_pos	Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BugsGeometry
label_position	Dialogs/SimulatorPromptWindow.hpp	/^  PixelPoint label_position;$/;"	m	class:final
label_rect	Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BallastGeometry
label_rect	Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BugsGeometry
label_right	Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
label_selection	Renderer/AirspaceRendererSettings.hpp	/^  } label_selection;$/;"	m	struct:AirspaceRendererSettings	typeref:class:AirspaceRendererSettings::LabelSelection
label_selection	Renderer/WaypointRendererSettings.hpp	/^  } label_selection;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::LabelSelection
label_text_color	Look/AirspaceLook.hpp	/^  Color label_text_color;$/;"	m	struct:AirspaceLook
label_threshold	Topography/TopographyFile.hpp	/^  const double label_threshold;$/;"	m	class:TopographyFile
label_top	Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
label_y	Gauge/GaugeVario.hpp	/^    int label_right, label_top, label_bottom, label_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
labelcache	Topography/shapelib/mapserver.h	/^    int labelcache, postlabelcache; \/* on or off *\/$/;"	m	struct:layerObj
labelcache	Topography/shapelib/mapserver.h	/^    labelCacheObj labelcache; \/* we need this here so multiple feature processors can access it *\/$/;"	m	struct:mapObj
labelformat	Topography/shapelib/mapserver.h	/^    char    *labelformat;$/;"	m	struct:__anon56
labelitem	Topography/shapelib/mapserver.h	/^    char *labelitem;$/;"	m	struct:layerObj
labelitemindex	Topography/shapelib/mapserver.h	/^    int labelitemindex;$/;"	m	struct:layerObj
labelmaxscaledenom	Topography/shapelib/mapserver.h	/^    double labelminscaledenom, labelmaxscaledenom;$/;"	m	struct:layerObj
labelminscaledenom	Topography/shapelib/mapserver.h	/^    double labelminscaledenom, labelmaxscaledenom;$/;"	m	struct:layerObj
labelrequires	Topography/shapelib/mapserver.h	/^    char *labelrequires;$/;"	m	struct:layerObj
labels	Renderer/AirspaceLabelList.hpp	/^  StaticArray<Label, 512u> labels;$/;"	m	class:AirspaceLabelList
labels	Renderer/WaypointLabelList.hpp	/^  StaticArray<Label, 256u> labels;$/;"	m	class:WaypointLabelList
labels	Renderer/WaypointRenderer.cpp	/^  WaypointLabelList labels;$/;"	m	class:final	file:
labels	Topography/shapelib/mapserver.h	/^    labelCacheMemberObj *labels;$/;"	m	struct:__anon48
labels	Topography/shapelib/mapserver.h	/^    labelObj **labels;$/;"	m	struct:classObj
landable_reachable	Engine/Task/Stats/CommonStats.hpp	/^  bool landable_reachable;$/;"	m	class:CommonStats
landable_render_mode	Renderer/WaypointRendererSettings.hpp	/^  LabelShape landable_render_mode;$/;"	m	struct:WaypointRendererSettings
landable_rendering_scale	Renderer/WaypointRendererSettings.hpp	/^  int landable_rendering_scale;$/;"	m	struct:WaypointRendererSettings
landable_style	Renderer/WaypointRendererSettings.hpp	/^  } landable_style;$/;"	m	struct:WaypointRendererSettings	typeref:class:WaypointRendererSettings::LandableStyle
landing_location	NMEA/FlyingState.hpp	/^  GeoPoint landing_location;$/;"	m	struct:FlyingState
landing_time	Logger/FlightLogger.hpp	/^  BrokenDateTime landing_time;$/;"	m	class:FlightLogger
landing_time	NMEA/FlyingState.hpp	/^  double landing_time;$/;"	m	struct:FlyingState
landscape	InfoBoxes/InfoBoxLayout.hpp	/^    bool landscape;$/;"	m	struct:InfoBoxLayout::Layout
landscape	Screen/Layout.cpp	/^  bool landscape = false;$/;"	m	namespace:Layout	file:
language	Language/LanguageGlue.hpp	/^  unsigned language;$/;"	m	struct:BuiltinLanguage
language_allowed	Language/Language.cpp	/^static bool language_allowed = false;$/;"	v	file:
language_table	Language/LanguageGlue.cpp	/^const BuiltinLanguage language_table[] = {$/;"	v
language_table	Units/UnitsGlue.cpp	/^const struct language_unit_map language_table[] = {$/;"	v	typeref:struct:language_unit_map
language_unit_map	Units/UnitsGlue.cpp	/^struct language_unit_map {$/;"	s	file:
lar	Topography/shapelib/mapserver.h	/^    struct label_auto_result lar;$/;"	m	struct:label_follow_result	typeref:struct:label_follow_result::label_auto_result
large_extra	Widget/TabWidget.hpp	/^  bool large_extra;$/;"	m	class:TabWidget
large_threshold_flat	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^    :large_threshold_flat(_large_threshold_flat) {}$/;"	f	class:OLCTriangleValidator
large_threshold_flat	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^  unsigned large_threshold_flat;$/;"	m	class:OLCTriangleValidator
large_threshold_m	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^  static inline constexpr double large_threshold_m = 500000; \/\/ 500km for DMSt\/OLC$/;"	m	struct:OLCTriangleConstants
last	Logger/FlightParser.hpp	/^  char *last;$/;"	m	class:FlightParser
last	Monitor/AirspaceWarningMonitor.hpp	/^  Validity last;$/;"	m	class:AirspaceWarningMonitor
last	Time/GPSClock.hpp	/^  double last;$/;"	m	class:GPSClock
last	Time/PeriodClock.hpp	/^  Stamp last;$/;"	m	class:PeriodClock
last	UIUtil/KineticManager.hpp	/^  int last;$/;"	m	class:KineticManager
last	Util/OverwritingRingBuffer.hpp	/^  const T &last() const {$/;"	f	class:TrivialOverwritingRingBuffer
last1x	Screen/Memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
last1y	Screen/Memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
last2x	Screen/Memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
last2y	Screen/Memory/Murphy.hpp	/^  int last1x, last1y, last2x, last2y;$/;"	m	struct:MurphyIterator
lastLat	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lastLat;$/;"	m	struct:IMI::FlightFinish
lastLon	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lastLon;$/;"	m	struct:IMI::FlightFinish
last_active_index	Monitor/TaskAdvanceMonitor.hpp	/^  unsigned last_active_index;$/;"	m	class:TaskAdvanceMonitor
last_active_tp	Computer/RouteComputer.hpp	/^  unsigned last_active_tp;$/;"	m	class:RouteComputer
last_airspeed_available	Computer/Wind/WindEKFGlue.hpp	/^  Validity last_ground_speed_available, last_airspeed_available;$/;"	m	class:WindEKFGlue
last_altitude	Computer/GlideRatioComputer.hpp	/^  double last_altitude;$/;"	m	class:GlideRatioComputer
last_altitude	Dialogs/Settings/dlgBasicSettings.cpp	/^  double last_altitude;$/;"	m	class:final	file:
last_any	MergeThread.hpp	/^  MoreData last_any;$/;"	m	class:final
last_ballast	Gauge/GaugeVario.hpp	/^  int last_ballast = -1;$/;"	m	class:GaugeVario
last_bounds	Topography/Thread.hpp	/^  GeoBounds last_bounds;$/;"	m	class:final
last_bugs	Gauge/GaugeVario.hpp	/^  int last_bugs = -1;$/;"	m	class:GaugeVario
last_center	Terrain/Thread.hpp	/^  GeoPoint last_center = GeoPoint::Invalid();$/;"	m	class:final
last_circling	Computer/Events.hpp	/^  bool last_circling;$/;"	m	class:final
last_circling	Computer/LiftDatabaseComputer.hpp	/^  bool last_circling;$/;"	m	class:LiftDatabaseComputer
last_climb_start_time	Computer/StatsComputer.hpp	/^  double last_climb_start_time, last_cruise_start_time;$/;"	m	class:StatsComputer
last_climb_time	Tracking/SkyLines/Glue.hpp	/^  double last_climb_time = -1;$/;"	m	class:SkyLinesTracking::Glue
last_color_ramp	Terrain/TerrainRenderer.hpp	/^  const ColorRamp *last_color_ramp = nullptr;$/;"	m	class:TerrainRenderer
last_color_ramp	Weather/Rasp/RaspRenderer.hpp	/^  const ColorRamp *last_color_ramp = nullptr;$/;"	m	class:RaspRenderer
last_cruise_start_time	Computer/StatsComputer.hpp	/^  double last_climb_start_time, last_cruise_start_time;$/;"	m	class:StatsComputer
last_date	Device/Driver/XCTracer/Internal.hpp	/^  BrokenDate last_date = BrokenDate::Invalid();$/;"	m	class:final
last_day	Time/WrapClock.hpp	/^  unsigned last_day;$/;"	m	class:WrapClock
last_display_mode	MapWindow/GlueMapWindow.hpp	/^  DisplayMode last_display_mode = DisplayMode::NONE;$/;"	m	class:GlueMapWindow
last_drag	Form/Form.hpp	/^  PixelPoint last_drag;$/;"	m	class:WndForm
last_enabled	Computer/WaveComputer.hpp	/^  bool last_enabled;$/;"	m	class:WaveComputer
last_final_glide	Computer/Events.hpp	/^  bool last_final_glide;$/;"	m	class:final
last_fix	MergeThread.hpp	/^  MoreData last_fix;$/;"	m	class:final
last_flying	Computer/Events.hpp	/^  bool last_flying;$/;"	m	class:final
last_flying	Computer/TaskComputer.hpp	/^  bool last_flying;$/;"	m	class:TaskComputer
last_flying	Logger/GlueFlightLogger.hpp	/^  bool last_on_ground, last_flying;$/;"	m	class:GlueFlightLogger
last_flying	Tracking/TrackingGlue.hpp	/^  bool flying = false, last_flying;$/;"	m	class:final
last_ground_altitude	Computer/FlyingComputer.hpp	/^  double last_ground_altitude;$/;"	m	class:FlyingComputer
last_ground_speed_available	Computer/Wind/CirclingWind.hpp	/^  Validity last_track_available, last_ground_speed_available;$/;"	m	class:CirclingWind
last_ground_speed_available	Computer/Wind/WindEKFGlue.hpp	/^  Validity last_ground_speed_available, last_airspeed_available;$/;"	m	class:WindEKFGlue
last_heading	Computer/CirclingComputer.hpp	/^  Angle last_track, last_heading;$/;"	m	class:CirclingComputer
last_heading	Computer/LiftDatabaseComputer.hpp	/^  Angle last_heading;$/;"	m	class:LiftDatabaseComputer
last_heading	Dialogs/Airspace/AirspaceList.cpp	/^static Angle last_heading;$/;"	v	file:
last_heading	Dialogs/Waypoint/WaypointList.cpp	/^  Angle last_heading;$/;"	m	class:WaypointFilterWidget	file:
last_heading	Dialogs/Waypoint/WaypointList.cpp	/^  Angle last_heading;$/;"	m	class:final	file:
last_hour	Engine/Task/Stats/TaskStats.hpp	/^  WindowStats last_hour;$/;"	m	class:TaskStats
last_id	Monitor/MatTaskMonitor.hpp	/^  unsigned last_id;$/;"	m	class:MatTaskMonitor
last_input_date	Time/WrapClock.hpp	/^  BrokenDate last_input_date;$/;"	m	class:WrapClock
last_level	Atmosphere/CuSonde.hpp	/^  unsigned short last_level;$/;"	m	class:CuSonde
last_location	Computer/GlideRatioComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:GlideRatioComputer
last_location	Computer/GroundSpeedComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:GroundSpeedComputer
last_location	Computer/LogComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:LogComputer
last_location	Computer/StatsComputer.hpp	/^  GeoPoint last_location;$/;"	m	class:StatsComputer
last_location_available	Computer/GlideRatioComputer.hpp	/^  Validity last_location_available;$/;"	m	class:GlideRatioComputer
last_location_available	Computer/GroundSpeedComputer.hpp	/^  Validity last_location_available;$/;"	m	class:GroundSpeedComputer
last_location_available	Computer/TaskComputer.hpp	/^  Validity last_location_available;$/;"	m	class:TaskComputer
last_location_available	Computer/WaveComputer.hpp	/^  Validity last_location_available;$/;"	m	class:WaveComputer
last_min_location	Engine/Task/Ordered/OrderedTask.hpp	/^  GeoPoint last_min_location;$/;"	m	class:final
last_modified	Dialogs/FileManager.cpp	/^    StaticString<32u> last_modified;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
last_need_to_arm	Monitor/TaskAdvanceMonitor.hpp	/^  bool last_need_to_arm;$/;"	m	class:TaskAdvanceMonitor
last_netto_vario_available	Computer/WaveComputer.hpp	/^  Validity last_netto_vario_available;$/;"	m	class:WaveComputer
last_new_traffic	Computer/Events.hpp	/^  Validity last_new_traffic;$/;"	m	class:final
last_on_ground	Logger/GlueFlightLogger.hpp	/^  bool last_on_ground, last_flying;$/;"	m	class:GlueFlightLogger
last_output_date	Time/WrapClock.hpp	/^  BrokenDate last_output_date;$/;"	m	class:WrapClock
last_page	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  int page, last_page;$/;"	m	class:final	file:
last_page_index	Form/TabMenuDisplay.hpp	/^    unsigned last_page_index;$/;"	m	struct:final::MainMenuButton
last_point	Renderer/TaskPointRenderer.hpp	/^  GeoPoint last_point;$/;"	m	class:TaskPointRenderer
last_quantisation_pixels	Terrain/RasterRenderer.hpp	/^  unsigned last_quantisation_pixels = -1;$/;"	m	class:RasterRenderer
last_radius	Terrain/Thread.hpp	/^  double last_radius;$/;"	m	class:final
last_reachable	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  bool last_reachable;$/;"	m	class:final
last_serial	Topography/CachedTopographyRenderer.hpp	/^  unsigned last_serial;$/;"	m	class:CachedTopographyRenderer
last_stamp	Time/WrapClock.hpp	/^  double last_stamp;$/;"	m	class:WrapClock
last_state	Computer/TaskComputer.hpp	/^  AircraftState last_state;$/;"	m	class:TaskComputer
last_state	Engine/Util/AircraftStateFilter.hpp	/^  AircraftState last_state;$/;"	m	class:AircraftStateFilter
last_step	Form/DataField/Float.hpp	/^  PeriodClock last_step;$/;"	m	class:final
last_step	Form/DataField/Integer.hpp	/^  PeriodClock last_step;$/;"	m	class:final
last_step	Form/DataField/Time.hpp	/^  PeriodClock last_step;$/;"	m	class:final
last_sun_azimuth	Terrain/TerrainRenderer.hpp	/^  Angle last_sun_azimuth = Angle::Zero();$/;"	m	class:TerrainRenderer
last_tad	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  double last_tad;$/;"	m	class:final
last_task_type	Computer/RouteComputer.hpp	/^  TaskType last_task_type;$/;"	m	class:RouteComputer
last_team_code_update	Computer/GlideComputer.cpp	/^static PeriodClock last_team_code_update;$/;"	v	file:
last_teammate_in_sector	Computer/Events.hpp	/^  bool enable_team, last_teammate_in_sector;$/;"	m	class:final
last_text	Gauge/GaugeVario.hpp	/^    TCHAR last_text[32];$/;"	m	struct:GaugeVario::DrawInfo
last_thermal	NMEA/ClimbInfo.hpp	/^  OneClimbInfo last_thermal;$/;"	m	struct:ClimbInfo
last_thermal_average_smooth	NMEA/ClimbInfo.hpp	/^  double last_thermal_average_smooth;$/;"	m	struct:ClimbInfo
last_thermal_end_time	Computer/StatsComputer.hpp	/^  double last_thermal_end_time;$/;"	m	class:StatsComputer
last_time	Device/Driver/Flytec/Device.hpp	/^  double last_time;$/;"	m	class:FlytecDevice
last_time	Device/Driver/XCTracer/Internal.hpp	/^  double last_time = 0;$/;"	m	class:final
last_time	Device/Parser.hpp	/^  double last_time;$/;"	m	class:NMEAParser
last_time	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  double last_time;$/;"	m	class:IncrementalSpeedComputer
last_time	Logger/FlightLogger.hpp	/^  double last_time;$/;"	m	class:FlightLogger
last_time	Logger/GlueFlightLogger.hpp	/^  double last_time;$/;"	m	class:GlueFlightLogger
last_time	Time/DeltaTime.hpp	/^  double last_time;$/;"	m	class:DeltaTime
last_time	Time/ReplayClock.hpp	/^  double last_time;$/;"	m	class:ReplayClock
last_time	Time/WrapClock.hpp	/^  BrokenTime last_time;$/;"	m	class:WrapClock
last_time	Weather/Rasp/RaspCache.hpp	/^  unsigned last_time = 0;$/;"	m	class:RaspCache
last_timestamp	Tracking/TrackingGlue.hpp	/^  int64_t last_timestamp = 0;$/;"	m	class:final
last_track	Computer/CirclingComputer.hpp	/^  Angle last_track, last_heading;$/;"	m	class:CirclingComputer
last_track	Computer/Wind/CirclingWind.hpp	/^  Angle last_track;$/;"	m	class:CirclingWind
last_track_available	Computer/Wind/CirclingWind.hpp	/^  Validity last_track_available, last_ground_speed_available;$/;"	m	class:CirclingWind
last_traffic	Computer/Events.hpp	/^  unsigned last_traffic;$/;"	m	class:final
last_unit	Gauge/GaugeVario.hpp	/^    Unit last_unit;$/;"	m	struct:GaugeVario::DrawInfo
last_update	Dialogs/Traffic/TrafficList.cpp	/^  Validity last_update;$/;"	m	class:TrafficListWidget	file:
last_update	Weather/METAR.hpp	/^  BrokenDateTime last_update;$/;"	m	struct:METAR
last_update	Weather/TAF.hpp	/^  BrokenDateTime last_update;$/;"	m	struct:TAF
last_v_diff	Gauge/GaugeVario.hpp	/^  double last_v_diff = 0;$/;"	m	class:GaugeVario
last_value	Gauge/GaugeVario.hpp	/^    double last_value;$/;"	m	struct:GaugeVario::DrawInfo
last_vario_available	Computer/ThermalBandComputer.hpp	/^  Validity last_vario_available;$/;"	m	class:ThermalBandComputer
last_vega_switches	ApplyVegaSwitches.cpp	/^static VegaSwitchState last_vega_switches;$/;"	v	file:
last_warning	BatteryTimer.hpp	/^  PeriodClock last_warning;$/;"	m	class:BatteryTimer
last_warning_serial	Renderer/AirspaceRenderer.hpp	/^  unsigned last_warning_serial;$/;"	m	class:AirspaceRenderer
last_width	Gauge/GaugeVario.hpp	/^    unsigned last_width;$/;"	m	struct:GaugeVario::DrawInfo
last_wind	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  SpeedVector last_wind;$/;"	m	class:final
lastshape	Topography/shapelib/mapshape.h	/^    int lastshape;$/;"	m	struct:__anon85
lasttime	Device/Driver/Volkslogger/vlconv.h	/^	BrokenDateTime lasttime;  \/\/ time of last fix$/;"	m	struct:DIRENTRY
lat	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDDWORD lat:25;$/;"	m	struct:IMI::FixB
lat	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lat:25;$/;"	m	struct:IMI::TWaypoint
lat	Device/Driver/Volkslogger/vlconv.cpp	/^  long lat;$/;"	m	class:KOORD	file:
lat1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lat1:11;$/;"	m	struct:IMI::FixB2
lat2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lat2:10;$/;"	m	struct:IMI::FixB2
latest	NMEA/Derived.hpp	/^  Validity latest;$/;"	m	struct:AirspaceWarningsInfo
latitude	Device/Driver/CAI302/Protocol.hpp	/^    uint32_t latitude, longitude;$/;"	m	struct:CAI302::Navpoint
latitude	Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
latitude	Device/Driver/LX/LXN.hpp	/^    uint32_t longitude[12], latitude[12];$/;"	m	struct:LXN::Task
latitude	Device/Driver/LX/LXN.hpp	/^    uint32_t time, latitude, longitude;$/;"	m	struct:LXN::Origin
latitude	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t latitude[3];$/;"	m	struct:Volkslogger::Waypoint
latitude	Geo/GeoBounds.hpp	/^  AngleRange latitude;$/;"	m	class:GeoBounds
latitude	Geo/GeoPoint.hpp	/^  Angle latitude;$/;"	m	struct:GeoPoint
latitude	Tracking/SkyLines/Protocol.hpp	/^  int32_t latitude, longitude;$/;"	m	struct:SkyLinesTracking::GeoPoint
latitude_cos	Projection/CompareProjection.hpp	/^  double latitude_cos;$/;"	m	class:CompareProjection
latlon	Topography/shapelib/mapserver.h	/^    projectionObj latlon; \/* geographic projection definition *\/$/;"	m	struct:mapObj
layer	Topography/shapelib/mapserver.h	/^    int layer;$/;"	m	struct:__anon40
layer	Topography/shapelib/mapserver.h	/^    struct layerObj *layer;$/;"	m	struct:classObj	typeref:struct:classObj::layerObj
layerObj	Topography/shapelib/mapserver.h	/^  struct layerObj {$/;"	s
layerVTable	Topography/shapelib/mapserver.h	/^  struct layerVTable {$/;"	s
layerVTableObj	Topography/shapelib/mapserver.h	/^  typedef struct layerVTable layerVTableObj;$/;"	t	typeref:struct:layerVTable
layerindex	Topography/shapelib/mapserver.h	/^    int layerindex; \/* indexes *\/$/;"	m	struct:__anon46
layerinfo	Topography/shapelib/mapserver.h	/^    void *layerinfo; \/* all connection types should use this generic pointer to a vendor specific structure *\/$/;"	m	struct:layerObj
layerorder	Topography/shapelib/mapserver.h	/^    int *layerorder;$/;"	m	struct:mapObj
layers	Topography/shapelib/mapserver.h	/^    layerObj **layers;$/;"	m	struct:mapObj
layout	InfoBoxes/InfoBoxManager.cpp	/^  InfoBoxLayout::Layout layout;$/;"	m	namespace:InfoBoxManager	file:
ld_vario	NMEA/VarioInfo.hpp	/^  double ld_vario;$/;"	m	struct:VarioInfo
leader	Topography/shapelib/mapserver.h	/^    labelLeaderObj *leader;$/;"	m	struct:classObj
leader	Topography/shapelib/mapserver.h	/^    labelLeaderObj *leader;$/;"	m	struct:labelObj
leaderbbox	Topography/shapelib/mapserver.h	/^    rectObj *leaderbbox;$/;"	m	struct:__anon46
leaderline	Topography/shapelib/mapserver.h	/^    lineObj *leaderline;$/;"	m	struct:__anon46
leaf	Util/QuadTree.hxx	/^			:bucket(_bucket), leaf(_leaf) {}$/;"	f	class:const_iterator
leaf	Util/QuadTree.hxx	/^			:bucket(nullptr), leaf(nullptr) {}$/;"	f	class:const_iterator
leaf	Util/QuadTree.hxx	/^			:bucket(nullptr), leaf(nullptr) {}$/;"	f	class:iterator
leaf	Util/QuadTree.hxx	/^			:bucket(other.bucket), leaf(other.leaf) {}$/;"	f	class:const_iterator
leaf	Util/QuadTree.hxx	/^		Leaf *leaf;$/;"	m	class:iterator
leaf	Util/QuadTree.hxx	/^		const Leaf *leaf;$/;"	m	class:const_iterator
leaf_allocator	Util/QuadTree.hxx	/^	LeafAllocator leaf_allocator;$/;"	v
leaves	Util/QuadTree.hxx	/^		LeafList leaves;$/;"	m	struct:Bucket
leaves	Util/RadixTree.hpp	/^    LeafList leaves;$/;"	m	struct:RadixTree::Node
left	Form/DigitEntry.hpp	/^    unsigned left, right;$/;"	m	struct:CoordinateFormat::Column
left	Geo/ConvexHull/GrahamScan.hpp	/^  SearchPoint *left;$/;"	m	class:GrahamScan
left	Screen/FB/mxcfb.h	/^	__u32 left;$/;"	m	struct:mxcfb_rect
left	Screen/Point.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelPoint::PixelRect
left	Terrain/RasterProjection.hpp	/^  int left, top;$/;"	m	class:RasterProjection
left	Util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
left_padding	Renderer/TextRowRenderer.hpp	/^  unsigned left_padding, top_padding;$/;"	m	class:TextRowRenderer
leftrotate	Util/MD5.cpp	/^leftrotate(uint32_t x, uint32_t c)$/;"	f	file:
leg1	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  double leg1;$/;"	m	class:FAITrianglePointValidator
leg2	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  double leg2;$/;"	m	class:FAITrianglePointValidator
leg3	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  double leg3;$/;"	m	class:FAITrianglePointValidator
leg_active_pen	Look/TaskLook.hpp	/^  Pen leg_active_pen;$/;"	m	struct:TaskLook
leg_in	Engine/Contest/Solvers/Retrospective.hpp	/^    double leg_in;$/;"	m	struct:Retrospective::NearWaypoint
leg_inactive_pen	Look/TaskLook.hpp	/^  Pen leg_inactive_pen;$/;"	m	struct:TaskLook
leg_solutions	Engine/Task/Solvers/TaskMacCready.hpp	/^  std::array<GlideResult, MAX_SIZE> leg_solutions;$/;"	m	class:TaskMacCready
legend	Topography/shapelib/mapserver.h	/^    legendObj legend;$/;"	m	struct:mapObj
legendObj	Topography/shapelib/mapserver.h	/^  } legendObj;$/;"	t	typeref:struct:__anon55
legendformat	Topography/shapelib/mapserver.h	/^    char *legendformat;$/;"	m	struct:__anon42
len	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t len;$/;"	m	struct:jas_icctagtabent_s
len	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t len;$/;"	m	struct:__anon117
len	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon171
len	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon173
len	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon177
len	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t len;$/;"	m	struct:__anon179
len	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t len;$/;"	m	struct:__anon158
len	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t len;$/;"	m	struct:__anon172
len	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t len;$/;"	m	struct:__anon139
len_	Terrain/jasper/jas_stream.h	/^	uint_fast32_t len_;$/;"	m	struct:__anon122
length	Device/Driver/FLARM/BinaryProtocol.hpp	/^    PackedLE16 length;$/;"	m	struct:FLARM::FrameHeader
length	Device/Driver/LX/LXN.hpp	/^    uint8_t length, type;$/;"	m	struct:LXN::Security
length	Device/Driver/LX/LXN.hpp	/^    uint8_t length;$/;"	m	struct:LXN::String
length	Engine/Waypoint/Runway.hpp	/^  uint16_t length;$/;"	m	class:Runway
length	Form/DigitEntry.hpp	/^  unsigned length;$/;"	m	class:CoordinateFormat
length	Form/List.hpp	/^  unsigned length = 0;$/;"	m	class:ListControl
length	Language/MOFile.hpp	/^    uint32_t length;$/;"	m	struct:MOFile::mo_table_entry
length	MapSettings.hpp	/^  } length;$/;"	m	struct:TrailSettings	typeref:class:TrailSettings::Length
length	Net/HTTP/ToBuffer.hpp	/^    size_t length;$/;"	m	class:Net::DownloadToBufferJob
length	Topography/shapelib/mapstring.c	/^    size_t length;$/;"	m	struct:msStringBuffer	file:
length	Util/StaticString.hxx	/^	size_type length() const {$/;"	f	class:StaticStringBase
length	XML/Parser.cpp	/^    size_t length;$/;"	m	struct:XML::NextToken	file:
length_editable	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  const bool length_editable;$/;"	m	class:LineSectorZoneEditWidget
lengths	Device/Driver/LX/Protocol.hpp	/^    uint16_t lengths[N];$/;"	m	struct:LX::MemorySection
lengths	Device/Driver/LXERA/Protocol.hpp	/^    uint16_t lengths[N];$/;"	m	struct:LXEra::MemorySection
leonardo_driver	Device/Driver/Leonardo.cpp	/^const struct DeviceRegister leonardo_driver = {$/;"	v	typeref:struct:DeviceRegister
lettercursor	Dialogs/KnobTextEntry.cpp	/^  int lettercursor;$/;"	m	class:final	file:
level	Net/Option.hpp	/^  int level(const Protocol &p) const {$/;"	f	class:SendTimeoutS
level	Weather/PCMet/Overlays.hpp	/^  unsigned level;$/;"	m	struct:PCMet::OverlayInfo
levil_driver	Device/Driver/LevilAHRS_G.cpp	/^const struct DeviceRegister levil_driver = {$/;"	v	typeref:struct:DeviceRegister
li	Event/Poll/LibInput/LibInputHandler.hpp	/^  struct libinput* li = nullptr;$/;"	m	class:final	typeref:struct:final::libinput
li_if	Event/Poll/LibInput/LibInputHandler.hpp	/^  struct libinput_interface* li_if = nullptr;$/;"	m	class:final	typeref:struct:final::libinput_interface
lift	Cloud/Thermal.hpp	/^  double lift;$/;"	m	struct:CloudThermal
lift	Tracking/SkyLines/Data.hpp	/^    double lift;$/;"	m	struct:SkyLinesTracking::Data::Thermal
lift	Tracking/SkyLines/Protocol.hpp	/^  uint16_t lift;$/;"	m	struct:SkyLinesTracking::Thermal
lift	Tracking/SkyLines/Protocol.hpp	/^  uint16_t lift;$/;"	m	struct:SkyLinesTracking::Wave
lift_brush	Look/VarioLook.hpp	/^  Brush sink_brush, lift_brush;$/;"	m	struct:VarioLook
lift_color	Look/VarioLook.hpp	/^  Color sink_color, lift_color;$/;"	m	struct:VarioLook
lift_database	NMEA/VarioInfo.hpp	/^  LiftDatabase lift_database;$/;"	m	struct:VarioInfo
lift_database_computer	Computer/GlideComputerAirData.hpp	/^  LiftDatabaseComputer lift_database_computer;$/;"	m	class:GlideComputerAirData
lift_rate	NMEA/ClimbInfo.hpp	/^  double lift_rate;$/;"	m	struct:OneClimbInfo
lift_rate	NMEA/ThermalLocator.hpp	/^  double lift_rate;$/;"	m	struct:ThermalSource
lift_weight	Computer/ThermalLocator.hpp	/^    double lift_weight;$/;"	m	struct:ThermalLocator::Point
light_border_brush	Look/ButtonLook.hpp	/^    Brush light_border_brush, dark_border_brush;$/;"	m	struct:ButtonLook::StateLook
light_border_pen	Look/ButtonLook.hpp	/^    Pen light_border_pen, dark_border_pen;$/;"	m	struct:ButtonLook::StateLook
light_gray_brush	Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
limit_parameters	Dialogs/Device/Vega/LimitParameters.hpp	/^VegaParametersWidget::StaticParameter limit_parameters[] = {$/;"	v
limit_tolerance	Math/ZeroFinder.cpp	/^limit_tolerance(double &f, const double tol_act)$/;"	f	file:
line	Topography/shapelib/mapprimitive.h	/^  lineObj *line;$/;"	m	struct:__anon79
line	XML/Parser.hpp	/^    unsigned line, column;$/;"	m	struct:XML::Results
line1	Device/Driver/LX/LXN.hpp	/^    uint8_t line1[31], line2[32], line3[3];$/;"	m	struct:LXN::Security7000
line1	Renderer/UnitSymbolRenderer.cpp	/^  const TCHAR *line1;$/;"	m	struct:UnitSymbolStrings	file:
line2	Device/Driver/LX/LXN.hpp	/^    uint8_t line1[31], line2[32], line3[3];$/;"	m	struct:LXN::Security7000
line2	Renderer/UnitSymbolRenderer.cpp	/^  const TCHAR *line2;$/;"	m	struct:UnitSymbolStrings	file:
line3	Device/Driver/LX/LXN.hpp	/^    uint8_t line1[31], line2[32], line3[3];$/;"	m	struct:LXN::Security7000
lineObj	Topography/shapelib/mapprimitive.h	/^} lineObj;$/;"	t	typeref:struct:__anon78
line_height	Topography/shapelib/mapserver.h	/^  int line_height;$/;"	m	struct:textPathObj
line_lengths	Topography/shapelib/mapserver.h	/^  struct line_lengths {$/;"	s
line_mask	Screen/Memory/Murphy.hpp	/^  const unsigned line_mask;$/;"	m	struct:MurphyIterator
line_mask_position	Screen/Memory/Murphy.hpp	/^  unsigned line_mask_position;$/;"	m	struct:MurphyIterator
line_number	IO/BufferedReader.hxx	/^	unsigned line_number = 0;$/;"	m	class:BufferedReader
line_only	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD line_only:1;$/;"	m	struct:IMI::TObservationZone
line_pen	Look/TraceHistoryLook.hpp	/^  Pen line_pen;$/;"	m	struct:TraceHistoryLook
line_spacing	Android/TextUtil.hpp	/^  unsigned line_spacing, style;$/;"	m	class:TextUtil
linecap	Topography/shapelib/mapserver.h	/^    int linecap, linejoin; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
linecap	Topography/shapelib/mapserver.h	/^    int linecap; \/* MS_CJC_TRIANGLE, MS_CJC_SQUARE, MS_CJC_ROUND, MS_CJC_BUTT *\/$/;"	m	struct:__anon69
linejoin	Topography/shapelib/mapserver.h	/^    int linecap, linejoin; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
linejoin	Topography/shapelib/mapserver.h	/^    int linejoin; \/* MS_CJC_BEVEL MS_CJC_ROUND MS_CJC_MITER *\/$/;"	m	struct:__anon69
linejoinmaxsize	Topography/shapelib/mapserver.h	/^    double linejoinmaxsize; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
linejoinmaxsize	Topography/shapelib/mapserver.h	/^    double linejoinmaxsize;$/;"	m	struct:__anon69
lines	Gauge/GaugeVario.hpp	/^  BulkPixelPoint lines[gmax * 2 + 1];$/;"	m	class:GaugeVario
lines	Topography/XShape.hpp	/^  uint16_t lines[MAX_LINES];$/;"	m	class:XShape
link	Engine/Route/AirspaceRoute.cpp	/^  const RouteLink &link;$/;"	m	class:final	file:
links	Engine/Route/RoutePlanner.hpp	/^  RouteLinkQueue links;$/;"	m	class:RoutePlanner
list	Android/BluetoothHelper.cpp	/^BluetoothHelper::list(JNIEnv *env)$/;"	f	class:BluetoothHelper
list	Cloud/Client.hpp	/^  List list;$/;"	m	class:CloudClientContainer
list	Cloud/Thermal.hpp	/^  List list;$/;"	m	class:CloudThermalContainer
list	Dialogs/Airspace/AirspaceList.cpp	/^  ActionListener *list;$/;"	m	class:final	file:
list	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^static AirspaceWarningListWidget *list;$/;"	v	file:
list	Dialogs/FileManager.cpp	/^  const std::vector<AvailableFile> &list;$/;"	m	class:final	file:
list	Dialogs/MapItemListDialog.cpp	/^  const MapItemList &list;$/;"	m	class:final	file:
list	Dialogs/Plane/PlaneListDialog.cpp	/^    std::vector<ListItem> &list;$/;"	m	class:final::PlaneFileVisitor	file:
list	Dialogs/Plane/PlaneListDialog.cpp	/^  std::vector<ListItem> list;$/;"	m	class:final	file:
list	Dialogs/ProfileListDialog.cpp	/^    std::vector<ListItem> &list;$/;"	m	class:final::ProfileFileVisitor	file:
list	Dialogs/ProfileListDialog.cpp	/^  std::vector<ListItem> list;$/;"	m	class:final	file:
list	Dialogs/Traffic/TrafficList.cpp	/^  ActionListener *list;$/;"	m	class:TrafficListButtons	file:
list	Dialogs/Waypoint/WaypointList.cpp	/^  ActionListener *list;$/;"	m	class:WaypointListButtons	file:
list	FLARM/List.hpp	/^  TrivialArray<FlarmTraffic, MAX_COUNT> list;$/;"	m	struct:TrafficList
list	GliderLink/List.hpp	/^  TrivialArray<GliderLinkTraffic, MAX_COUNT> list;$/;"	m	struct:GliderLinkTrafficList
list	Kobo/ToolsDialog.cpp	/^  std::vector<ListItem> &list;$/;"	m	class:ScriptFileVisitor	file:
list	Kobo/ToolsDialog.cpp	/^  std::vector<ListItem> list;$/;"	m	class:final	file:
list	Look/DialogLook.hpp	/^  } list;$/;"	m	struct:DialogLook	typeref:struct:DialogLook::__anon20
list	MapWindow/Items/AirspaceBuilder.cpp	/^  StaticArray<const AbstractAirspace *,64> list;$/;"	m	class:AirspaceWarningList	file:
list	MapWindow/Items/Builder.cpp	/^  MapItemList &list;$/;"	m	class:WaypointListBuilderVisitor	file:
list	MapWindow/Items/Builder.hpp	/^  MapItemList &list;$/;"	m	class:MapItemListBuilder
list	Screen/Custom/WList.hpp	/^  List list;$/;"	m	class:WindowList
list	Waypoint/WaypointListBuilder.hpp	/^  WaypointList &list;$/;"	m	class:final
listNode	Topography/shapelib/mapserver.h	/^  typedef struct listNode {$/;"	s
list_method	Android/BluetoothHelper.cpp	/^  static jmethodID list_method, connect_method, createServer_method;$/;"	m	namespace:BluetoothHelper	file:
listener	Device/Port/Port.hpp	/^  PortListener *const listener;$/;"	m	class:Port
listener	Dialogs/Airspace/AirspaceList.cpp	/^  DataFieldListener *listener;$/;"	m	class:final	file:
listener	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  ActionListener *listener;$/;"	m	class:final	file:
listener	Dialogs/Device/DeviceEditWidget.hpp	/^  Listener *listener;$/;"	m	class:DeviceEditWidget
listener	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  DataFieldListener *const listener;$/;"	m	class:PolarShapeEditWidget
listener	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Listener &listener;$/;"	m	class:final	file:
listener	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  ActionListener *listener;$/;"	m	class:final	file:
listener	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  Listener *listener;$/;"	m	class:ObservationZoneEditWidget
listener	Dialogs/Traffic/TrafficList.cpp	/^  DataFieldListener *listener;$/;"	m	class:TrafficFilterWidget	file:
listener	Dialogs/Waypoint/WaypointList.cpp	/^  DataFieldListener *listener;$/;"	m	class:WaypointFilterWidget	file:
listener	Form/Button.hpp	/^  ActionListener *listener;$/;"	m	class:Button
listener	Form/CheckBox.hpp	/^  ActionListener *listener;$/;"	m	class:CheckBoxControl
listener	Form/DataField/Base.hpp	/^  DataFieldListener *listener;$/;"	m	class:DataField
listener	Widget/ActionWidget.hpp	/^  ActionListener &listener;$/;"	m	class:ActionWidget
listener	Widget/ButtonWidget.hpp	/^  ActionListener &listener;$/;"	m	class:ButtonWidget
listener	Widget/QuestionWidget.hpp	/^  ActionListener &listener;$/;"	m	class:QuestionWidget
listeners	Android/DownloadManager.hpp	/^  std::list<Net::DownloadListener *> listeners;$/;"	m	class:AndroidDownloadManager
listeners	Blackboard/LiveBlackboard.hpp	/^  std::list<BlackboardListener *> listeners;$/;"	m	class:LiveBlackboard
listeners	Device/MultipleDevices.hpp	/^  std::list<PortListener *> listeners;$/;"	m	class:final
listeners	Net/HTTP/DownloadManager.cpp	/^  std::list<Net::DownloadListener *> listeners;$/;"	m	class:final	file:
listeners_mutex	Device/MultipleDevices.hpp	/^  Mutex listeners_mutex;$/;"	m	class:final
livetrack24	Tracking/TrackingSettings.hpp	/^  LiveTrack24::Settings livetrack24;$/;"	m	struct:TrackingSettings
ll	Topography/shapelib/mapserver.h	/^    struct line_lengths *ll;$/;"	m	struct:polyline_lengths	typeref:struct:polyline_lengths::line_lengths
lo	OS/ByteOrder.hpp	/^	uint8_t hi, lo;$/;"	m	class:PackedBE16
lo	OS/ByteOrder.hpp	/^	uint8_t lo, hi;$/;"	m	class:PackedLE16
load	InfoBoxes/Panel/Panel.hpp	/^  Widget *(*load)(unsigned id);$/;"	m	struct:InfoBoxPanel
loadFileBitmap	Android/NativeView.cpp	/^jobject NativeView::loadFileBitmap(Path path)$/;"	f	class:NativeView
loadFileBitmap_method	Android/NativeView.cpp	/^jmethodID NativeView::loadFileBitmap_method;$/;"	m	class:NativeView	file:
loadFileBitmap_method	Android/NativeView.hpp	/^  static jmethodID loadFileBitmap_method;$/;"	m	class:NativeView
loadFileTiff	Android/NativeView.cpp	/^jobject NativeView::loadFileTiff(Path path)$/;"	f	class:NativeView
loadImageFromFile	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*loadImageFromFile)(char *path, rasterBufferObj *rb);$/;"	m	struct:rendererVTableObj
loadResourceBitmap	Android/NativeView.hpp	/^  jobject loadResourceBitmap(const char *name) {$/;"	f	class:NativeView
loadResourceBitmap_method	Android/NativeView.cpp	/^jmethodID NativeView::loadResourceBitmap_method;$/;"	m	class:NativeView	file:
loadResourceBitmap_method	Android/NativeView.hpp	/^  static jmethodID loadResourceBitmap_method;$/;"	m	class:NativeView
load_button	Dialogs/Plane/PlaneListDialog.cpp	/^  Button *edit_button, *delete_button, *load_button;$/;"	m	class:final	file:
load_flags	Screen/FreeType/Font.cpp	/^static FT_Int32 load_flags = FT_LOAD_DEFAULT;$/;"	v	file:
loaded	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  bool loaded;$/;"	m	class:VegaParametersWidget
loaded	Dialogs/Traffic/TrafficList.cpp	/^    bool loaded = false;$/;"	m	struct:TrafficListWidget::Item	file:
loaded	Form/DataField/File.hpp	/^  bool loaded;$/;"	m	class:final
loadedlibs	Lua/Basic.cpp	/^static constexpr luaL_Reg loadedlibs[] = {$/;"	v	file:
loader	Terrain/jasper/jpc/jpc_dec.h	/^	void *loader;$/;"	m	struct:__anon152
loc_drift	Computer/ThermalLocator.hpp	/^    FlatPoint loc_drift;$/;"	m	struct:ThermalLocator::Point
local_path_code	LocalPath.cpp	/^static constexpr TCHAR local_path_code[] = _T("%LOCAL_PATH%\\\\");$/;"	v	file:
location	Cloud/Client.hpp	/^  GeoPoint location;$/;"	m	struct:CloudClient
location	Computer/ThermalLocator.hpp	/^    GeoPoint location;$/;"	m	struct:ThermalLocator::Point
location	Computer/WaveResult.hpp	/^  GeoPoint location;$/;"	m	struct:WaveInfo
location	Device/Driver/Volkslogger/vlapi2.h	/^    GeoPoint location;$/;"	m	struct:VLAPI_DATA::WPT
location	Dialogs/Airspace/AirspaceList.cpp	/^static GeoPoint location;$/;"	v	file:
location	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
location	Dialogs/Traffic/TrafficList.cpp	/^    GeoPoint location = GeoPoint::Invalid();$/;"	m	struct:TrafficListWidget::Item	file:
location	Dialogs/Waypoint/WaypointList.cpp	/^  const GeoPoint location;$/;"	m	class:final	file:
location	Engine/Airspace/AirspaceInterceptSolution.hpp	/^  GeoPoint location;$/;"	m	struct:AirspaceInterceptSolution
location	Engine/Airspace/AirspaceSorter.cpp	/^  const GeoPoint location;$/;"	m	class:final	file:
location	Engine/Airspace/Predicate/OutsideAirspacePredicate.hpp	/^  const AGeoPoint location;$/;"	m	class:OutsideAirspacePredicate
location	Engine/Contest/ContestTrace.hpp	/^  GeoPoint location;$/;"	m	struct:ContestTracePoint
location	Engine/Contest/Solvers/Cast.hpp	/^  :time(src.GetTime()), location(src.GetLocation()) {}$/;"	f
location	Engine/Contest/Solvers/Retrospective.hpp	/^      :waypoint(std::move(_waypoint)), location(_location) {$/;"	f	struct:Retrospective::NearWaypoint
location	Engine/Contest/Solvers/Retrospective.hpp	/^    GeoPoint location;$/;"	m	struct:Retrospective::NearWaypoint
location	Engine/Navigation/Aircraft.hpp	/^  GeoPoint location;$/;"	m	struct:AircraftState
location	Engine/Task/Points/TaskPoint.hpp	/^  GeoPoint location;$/;"	m	class:TaskPoint
location	Engine/Waypoint/Waypoint.hpp	/^  GeoPoint location;$/;"	m	struct:Waypoint
location	FLARM/Traffic.hpp	/^  GeoPoint location;$/;"	m	class:FlarmTraffic::AircraftType
location	Geo/SearchPoint.hpp	/^  GeoPoint location;$/;"	m	class:SearchPoint
location	GliderLink/Traffic.hpp	/^  GeoPoint location;$/;"	m	struct:GliderLinkTraffic
location	IGC/IGCDeclaration.hpp	/^  GeoPoint location;$/;"	m	struct:IGCDeclarationTurnpoint
location	IGC/IGCFix.hpp	/^  GeoPoint location;$/;"	m	struct:IGCFix
location	Input/InputDefaults.cpp	/^  unsigned char mode, location;$/;"	m	struct:flat_label	file:
location	Input/InputParser.cpp	/^  unsigned event_id, location;$/;"	m	struct:EventBuilder	file:
location	Logger/LoggerImpl.hpp	/^    GeoPoint location;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
location	MapWindow/Items/AirspaceBuilder.cpp	/^  const GeoPoint location;$/;"	m	class:AirspaceAtPointPredicate	file:
location	MapWindow/Items/Builder.hpp	/^  GeoPoint location;$/;"	m	class:MapItemListBuilder
location	MapWindow/Items/MapItem.hpp	/^  GeoPoint location;$/;"	m	struct:SelfMapItem
location	NMEA/Info.hpp	/^  GeoPoint location;$/;"	m	struct:NMEAInfo
location	NMEA/ThermalLocator.hpp	/^  GeoPoint location;$/;"	m	struct:ThermalSource
location	Renderer/TaskPointRenderer.hpp	/^  const GeoPoint location;$/;"	m	class:TaskPointRenderer
location	Replay/CatmullRomInterpolator.hpp	/^    GeoPoint location;$/;"	m	struct:CatmullRomInterpolator::Record
location	Screen/Custom/DoubleClick.hpp	/^  PixelPoint location;$/;"	m	class:DoubleClick
location	Tracking/SkyLines/Data.hpp	/^    GeoPoint location;$/;"	m	struct:SkyLinesTracking::Data::Traffic
location	Tracking/SkyLines/Protocol.hpp	/^    GeoPoint location;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
location	Tracking/SkyLines/Protocol.hpp	/^  GeoPoint location;$/;"	m	struct:SkyLinesTracking::FixPacket
location	Tracking/TrackingGlue.hpp	/^  GeoPoint location;$/;"	m	class:final
location	Waypoint/WaypointList.cpp	/^  const GeoPoint &location;$/;"	m	class:WaypointDistanceCompare	file:
location	Waypoint/WaypointListBuilder.hpp	/^  const GeoPoint location;$/;"	m	class:final
location	Weather/ParsedMETAR.hpp	/^  GeoPoint location;$/;"	m	struct:ParsedMETAR
location_available	FLARM/Traffic.hpp	/^  bool location_available;$/;"	m	class:FlarmTraffic::AircraftType
location_available	NMEA/Info.hpp	/^  Validity location_available;$/;"	m	struct:NMEAInfo
location_available	Weather/ParsedMETAR.hpp	/^  bool location_available;$/;"	m	struct:ParsedMETAR
location_delegate	Apple/InternalSensors.hpp	/^  LocationDelegate *location_delegate;$/;"	m	class:InternalSensors
location_manager	Apple/InternalSensors.hpp	/^  CLLocationManager *location_manager;$/;"	m	class:InternalSensors
location_previous	Replay/TaskAutoPilot.hpp	/^  GeoPoint location_previous;$/;"	m	class:AbstractAutoPilot
location_remaining	Engine/Task/Stats/ElementStat.hpp	/^  GeoPoint location_remaining;$/;"	m	struct:ElementStat
location_start	Replay/TaskAutoPilot.hpp	/^  GeoPoint location_start;$/;"	m	class:AbstractAutoPilot
locations	Airspace/AirspaceWarningCopy.hpp	/^  StaticArray<GeoPoint,32> locations;$/;"	m	class:AirspaceWarningCopy
lock	Audio/PCMBufferDataSource.hpp	/^  Mutex lock;$/;"	m	class:PCMBufferDataSource
lock	Audio/PCMMixer.hpp	/^  Mutex lock;$/;"	m	class:final
lock	Audio/PCMMixerDataSource.hpp	/^  Mutex lock;$/;"	m	class:PCMMixerDataSource
lock	Audio/PCMResourcePlayer.hpp	/^  Mutex lock;$/;"	m	class:PCMResourcePlayer
lock	Logger/Logger.hpp	/^  mutable SharedMutex lock;$/;"	m	class:Logger
lock	Thread/WindowsSharedMutex.hxx	/^	void lock() {$/;"	f	class:WindowsSharedMutex
lock_shared	Thread/WindowsSharedMutex.hxx	/^	void lock_shared() {$/;"	f	class:WindowsSharedMutex
locked	zzip/lib.h	/^	int * volatile locked;$/;"	m	struct:zzip_dir::__anon212
locxend	Terrain/jasper/jpc/jpc_tsfb.h	/^	int locxend;$/;"	m	struct:__anon130
locxstart	Terrain/jasper/jpc/jpc_tsfb.h	/^	int locxstart;$/;"	m	struct:__anon130
locyend	Terrain/jasper/jpc/jpc_tsfb.h	/^	int locyend;$/;"	m	struct:__anon130
locystart	Terrain/jasper/jpc/jpc_tsfb.h	/^	int locystart;$/;"	m	struct:__anon130
log	Topography/shapelib/mapserver.h	/^    char *log;$/;"	m	struct:__anon42
log_clock	Computer/LogComputer.hpp	/^  GPSClock log_clock;$/;"	m	class:LogComputer
log_computer	Computer/GlideComputer.hpp	/^  LogComputer log_computer;$/;"	m	class:GlideComputer
log_int	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
logfont	Look/FontDescription.hpp	/^  LOGFONT logfont;$/;"	m	class:FontDescription
logger	Components.cpp	/^Logger *logger;$/;"	v
logger	Computer/LogComputer.hpp	/^  Logger *logger;$/;"	m	class:LogComputer
logger	Computer/Settings.hpp	/^  LoggerSettings logger;$/;"	m	struct:ComputerSettings
logger	Logger/Logger.hpp	/^  LoggerImpl logger;$/;"	m	class:Logger
logger	Replay/Replay.hpp	/^  Logger *logger;$/;"	m	class:final
logger_id	Device/Driver/LX/Protocol.hpp	/^    uint16_t logger_id;$/;"	m	struct:LX::FlightInfo
logger_id	Device/Driver/LXERA/Protocol.hpp	/^    uint16_t logger_id;$/;"	m	struct:LXEra::FlightInfo
logger_id	Logger/Settings.hpp	/^  StaticString<32> logger_id;$/;"	m	struct:LoggerSettings
logger_parameters	Dialogs/Device/Vega/LoggerParameters.hpp	/^VegaParametersWidget::StaticParameter logger_parameters[] = {$/;"	v
logging_code	Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 logging_code;$/;"	m	struct:CAI302::FileBinary
logo	Dialogs/StartupDialog.cpp	/^  LogoView logo;$/;"	m	class:final	file:
logo	Dialogs/StartupDialog.cpp	/^  LogoWindow logo;$/;"	m	class:final	file:
logo	Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
logo	ProgressWindow.hpp	/^  LogoView logo;$/;"	m	class:ProgressWindow
logo_position	ProgressWindow.hpp	/^  PixelRect logo_position, message_position;$/;"	m	class:ProgressWindow
logo_rect	Dialogs/SimulatorPromptWindow.hpp	/^  PixelRect logo_rect;$/;"	m	class:final
logo_view	Dialogs/SimulatorPromptWindow.hpp	/^  LogoView logo_view;$/;"	m	class:final
lon	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDDWORD lon:25;$/;"	m	struct:IMI::FixB
lon	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD lon:25;$/;"	m	struct:IMI::TWaypoint
lon	Device/Driver/Volkslogger/vlconv.cpp	/^  long lon;$/;"	m	class:KOORD	file:
lon1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lon1:11;$/;"	m	struct:IMI::FixB2
lon2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISDWORD lon2:10;$/;"	m	struct:IMI::FixB2
longest_line_index	Topography/shapelib/mapserver.h	/^    int longest_line_index;$/;"	m	struct:polyline_lengths
longest_max	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned shortest_max, longest_min, longest_max;$/;"	m	struct:TriangleContest::CandidateSet
longest_min	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned shortest_max, longest_min, longest_max;$/;"	m	struct:TriangleContest::CandidateSet
longest_segment_index	Topography/shapelib/mapserver.h	/^    int longest_segment_index;$/;"	m	struct:line_lengths
longest_segment_line_index	Topography/shapelib/mapserver.h	/^    int longest_segment_line_index, longest_segment_point_index;$/;"	m	struct:polyline_lengths
longest_segment_point_index	Topography/shapelib/mapserver.h	/^    int longest_segment_line_index, longest_segment_point_index;$/;"	m	struct:polyline_lengths
longitude	Device/Driver/CAI302/Protocol.hpp	/^    uint32_t latitude, longitude;$/;"	m	struct:CAI302::Navpoint
longitude	Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
longitude	Device/Driver/LX/LXN.hpp	/^    uint32_t longitude[12], latitude[12];$/;"	m	struct:LXN::Task
longitude	Device/Driver/LX/LXN.hpp	/^    uint32_t time, latitude, longitude;$/;"	m	struct:LXN::Origin
longitude	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t longitude[3];$/;"	m	struct:Volkslogger::Waypoint
longitude	Geo/GeoBounds.hpp	/^  AngleRange longitude;$/;"	m	class:GeoBounds
longitude	Geo/GeoPoint.hpp	/^  Angle longitude;$/;"	m	struct:GeoPoint
longitude	Tracking/SkyLines/Protocol.hpp	/^  int32_t latitude, longitude;$/;"	m	struct:SkyLinesTracking::GeoPoint
look	CrossSection/AirspaceXSRenderer.hpp	/^  const AirspaceLook &look;$/;"	m	class:AirspaceXSRenderer
look	CrossSection/CrossSectionRenderer.hpp	/^  const CrossSectionLook &look;$/;"	m	class:CrossSectionRenderer
look	CrossSection/TerrainXSRenderer.hpp	/^  const CrossSectionLook &look;$/;"	m	class:TerrainXSRenderer
look	Dialogs/Airspace/dlgAirspacePatterns.cpp	/^  const AirspaceLook &look;$/;"	m	class:AirspacePatternsDialog	file:
look	Dialogs/Device/DeviceListDialog.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  const InfoBoxLook &look;$/;"	m	class:final	file:
look	Dialogs/Settings/dlgConfiguration.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	Dialogs/SimulatorPromptWindow.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	Dialogs/StartupDialog.cpp	/^  const ButtonLook &look;$/;"	m	class:final	file:
look	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  const MapLook &look;$/;"	m	class:TaskMapButtonRenderer
look	Dialogs/Task/TaskPointDialog.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	Dialogs/dlgQuickMenu.cpp	/^  const DialogLook &look;$/;"	m	class:final	file:
look	Form/ButtonPanel.hpp	/^  const ButtonLook &look;$/;"	m	class:ButtonPanel
look	Form/CheckBox.hpp	/^  const DialogLook *look;$/;"	m	class:CheckBoxControl
look	Form/DigitEntry.hpp	/^  const DialogLook &look;$/;"	m	class:CoordinateFormat
look	Form/Edit.hpp	/^  const DialogLook &look;$/;"	m	class:WndProperty
look	Form/Form.hpp	/^  const DialogLook &look;$/;"	m	class:WndForm
look	Form/Frame.hpp	/^  const DialogLook &look;$/;"	m	class:WndFrame
look	Form/HLine.hpp	/^  const DialogLook &look;$/;"	m	class:HLine
look	Form/List.hpp	/^  const DialogLook &look;$/;"	m	class:ListControl
look	Form/TabDisplay.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	Form/TabMenuDisplay.hpp	/^  const DialogLook &look;$/;"	m	class:final
look	Gauge/BigThermalAssistantWidget.hpp	/^  const ThermalAssistantLook &look;$/;"	m	class:BigThermalAssistantWidget
look	Gauge/FlarmTrafficWindow.hpp	/^  const FlarmTrafficLook &look;$/;"	m	class:FlarmTrafficWindow
look	Gauge/GaugeFLARM.hpp	/^  const FlarmTrafficLook &look;$/;"	m	class:final
look	Gauge/GaugeThermalAssistant.hpp	/^  const ThermalAssistantLook &look;$/;"	m	class:final
look	Gauge/GaugeVario.cpp	/^  :blackboard(_blackboard), look(_look)$/;"	f
look	Gauge/GaugeVario.hpp	/^  const VarioLook &look;$/;"	m	class:GaugeVario
look	Gauge/GlueGaugeVario.hpp	/^  const VarioLook &look;$/;"	m	class:final
look	Gauge/ThermalAssistantRenderer.hpp	/^  const ThermalAssistantLook &look;$/;"	m	class:ThermalAssistantRenderer
look	HorizonWidget.cpp	/^  const HorizonLook &look;$/;"	m	class:HorizonWindow	file:
look	InfoBoxes/InfoBoxWindow.hpp	/^  const InfoBoxLook &look;$/;"	m	class:InfoBoxWindow
look	MainWindow.hpp	/^  Look *look = nullptr;$/;"	m	class:MainWindow
look	MapWindow/MapWindow.hpp	/^  const MapLook &look;$/;"	m	class:MapWindow
look	PopupMessage.hpp	/^  const DialogLook &look;$/;"	m	class:PopupMessage
look	Renderer/AirspaceLabelRenderer.hpp	/^  const AirspaceLook &look;$/;"	m	class:AirspaceLabelRenderer
look	Renderer/AirspaceRenderer.hpp	/^  const AirspaceLook &look;$/;"	m	class:AirspaceRenderer
look	Renderer/AirspaceRendererGL.cpp	/^  const AirspaceLook &look;$/;"	m	class:final	file:
look	Renderer/AirspaceRendererOther.cpp	/^  const AirspaceLook &look;$/;"	m	class:final	file:
look	Renderer/ButtonRenderer.hpp	/^  const ButtonLook &look;$/;"	m	class:ButtonFrameRenderer
look	Renderer/ChartRenderer.hpp	/^  const ChartLook &look;$/;"	m	class:ChartRenderer
look	Renderer/ClimbPercentRenderer.hpp	/^  const ClimbPercentLook &look;$/;"	m	class:ClimbPercentRenderer
look	Renderer/CompassRenderer.hpp	/^  const MapLook &look;$/;"	m	class:CompassRenderer
look	Renderer/FinalGlideBarRenderer.hpp	/^  const FinalGlideBarLook &look;$/;"	m	class:FinalGlideBarRenderer
look	Renderer/MapItemListRenderer.hpp	/^  const MapLook &look;$/;"	m	class:MapItemListRenderer
look	Renderer/NextArrowRenderer.hpp	/^  const WindArrowLook &look;$/;"	m	class:NextArrowRenderer
look	Renderer/TaskProgressRenderer.hpp	/^  const TaskLook &look;$/;"	m	class:TaskProgressRenderer
look	Renderer/ThermalBandRenderer.hpp	/^  const ThermalBandLook &look;$/;"	m	class:ThermalBandRenderer
look	Renderer/TraceHistoryRenderer.hpp	/^  const TraceHistoryLook &look;$/;"	m	class:TraceHistoryRenderer
look	Renderer/TrackLineRenderer.hpp	/^  const MapLook &look;$/;"	m	class:TrackLineRenderer
look	Renderer/TrailRenderer.hpp	/^  const TrailLook &look;$/;"	m	class:TrailRenderer
look	Renderer/VarioBarRenderer.hpp	/^  const VarioBarLook &look;$/;"	m	class:VarioBarRenderer
look	Renderer/WaveRenderer.hpp	/^  const WaveLook &look;$/;"	m	class:WaveRenderer
look	Renderer/WaypointIconRenderer.hpp	/^  const WaypointLook &look;$/;"	m	class:WaypointIconRenderer
look	Renderer/WaypointRenderer.cpp	/^  const WaypointLook &look;$/;"	m	class:final	file:
look	Renderer/WaypointRenderer.hpp	/^  const WaypointLook &look;$/;"	m	class:WaypointRenderer
look	Renderer/WindArrowRenderer.hpp	/^  const WindArrowLook &look;$/;"	m	class:WindArrowRenderer
look	Screen/TerminalWindow.hpp	/^  const TerminalLook &look;$/;"	m	class:TerminalWindow
look	Topography/TopographyFileRenderer.hpp	/^  const TopographyLook &look;$/;"	m	class:final
look	Widget/ArrowPagerWidget.hpp	/^  const ButtonLook &look;$/;"	m	class:ArrowPagerWidget
look	Widget/KeyboardWidget.hpp	/^  const ButtonLook &look;$/;"	m	class:KeyboardWidget
look	Widget/LargeTextWidget.hpp	/^  const DialogLook &look;$/;"	m	class:LargeTextWidget
look	Widget/OffsetButtonsWidget.hpp	/^  const ButtonLook &look;$/;"	m	class:OffsetButtonsWidget
look	Widget/RowFormWidget.hpp	/^  const DialogLook &look;$/;"	m	class:RowFormWidget
look_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage look_pages[] = {$/;"	v	file:
lookup	Language/MOFile.cpp	/^MOFile::lookup(const char *p) const$/;"	f	class:MOFile
low_	Terrain/jasper/jpc/jpc_tagtree.h	/^	int low_;$/;"	m	struct:jpc_tagtreenode_
lower_hull	Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> lower_hull;$/;"	m	class:GrahamScan
lower_left	Geo/Flat/FlatBoundingBox.hpp	/^  FlatGeoPoint lower_left;$/;"	m	struct:FlatBoundingBox
lower_partition_points	Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> lower_partition_points;$/;"	m	class:GrahamScan
lpEndTag	XML/Parser.cpp	/^    const TCHAR *lpEndTag;$/;"	m	struct:XML::Parser	file:
lpXML	XML/Parser.cpp	/^    const TCHAR *lpXML;$/;"	m	struct:XML::Parser	file:
lpenergywts	Terrain/jasper/jpc/jpc_qmfb.h	/^	const double *lpenergywts;$/;"	m	struct:__anon128
ls	Computer/WaveComputer.hpp	/^  LeastSquares ls;$/;"	m	class:WaveComputer
lua_timer_class	Lua/Timer.cpp	/^static constexpr char lua_timer_class[] = "xcsoar.timer";$/;"	v	file:
luminosity	Screen/Memory/Color.hpp	/^  Luminosity8 luminosity;$/;"	m	class:Color
lut16	Terrain/jasper/jas_icc.h	/^		jas_icclut16_t lut16;$/;"	m	union:jas_iccattrval_s::__anon188
lut8	Terrain/jasper/jas_icc.h	/^		jas_icclut8_t lut8;$/;"	m	union:jas_iccattrval_s::__anon188
lutdata	Terrain/jasper/jp2/jp2_cod.h	/^	int_fast32_t *lutdata;$/;"	m	struct:__anon112
luts	Terrain/jasper/jas_cm.h	/^	jas_cmshapmatlut_t luts[3];$/;"	m	struct:__anon98
lw	Device/Driver/Volkslogger/vlapi2.h	/^    unsigned lw; \/\/ linewidth (start- or finishline) in kilometers$/;"	m	struct:VLAPI_DATA::DCLWPT
lx	Device/RecordedFlight.hpp	/^    } lx;$/;"	m	union:RecordedFlightInfo::__anon197	typeref:struct:RecordedFlightInfo::__anon197::__anon198
lx_driver	Device/Driver/LX/Register.cpp	/^const struct DeviceRegister lx_driver = {$/;"	v	typeref:struct:DeviceRegister
lxera_driver	Device/Driver/LXERA/Register.cpp	/^const struct DeviceRegister lxera_driver = {$/;"	v	typeref:struct:DeviceRegister
lyrno	Terrain/jasper/jpc/jpc_dec.h	/^	int lyrno;$/;"	m	struct:jpc_dec_seg_s
lyrno	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned lyrno;$/;"	m	struct:__anon138
lyrnoend	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t lyrnoend;$/;"	m	struct:__anon169
m	Math/Histogram.hpp	/^  double m;$/;"	m	class:Histogram
m	Math/LeastSquares.hpp	/^  double m;$/;"	m	class:LeastSquares
m	Topography/shapelib/mapprimitive.h	/^  double m;$/;"	m	struct:__anon77
mFine	Form/DataField/Float.hpp	/^  bool mFine;$/;"	m	class:final
mMax	Form/DataField/Float.hpp	/^  double mMax;$/;"	m	class:final
mMin	Form/DataField/Float.hpp	/^  double mMin;$/;"	m	class:final
mOnPaintCallback	Form/Draw.hpp	/^  std::function<void(Canvas &canvas, const PixelRect &rc)> mOnPaintCallback;$/;"	m	class:WndOwnerDrawFrame
mOutBuf	Form/DataField/Float.hpp	/^  mutable TCHAR mOutBuf[OUTBUFFERSIZE+1];$/;"	m	class:final
mSpeedup	Form/DataField/Float.hpp	/^  uint8_t mSpeedup;$/;"	m	class:final
mStep	Form/DataField/Float.hpp	/^  double mStep;$/;"	m	class:final
mValue	Form/DataField/Boolean.hpp	/^  bool mValue;$/;"	m	class:final
mValue	Form/DataField/Float.hpp	/^  double mValue;$/;"	m	class:final
mValue	Form/DataField/String.hpp	/^  StaticString<EDITSTRINGSIZE> mValue;$/;"	m	class:DataFieldString
m_airspace	Engine/Airspace/AirspaceIntersectSort.hpp	/^  const AbstractAirspace *m_airspace;$/;"	m	class:AirspaceIntersectSort
m_airspaces	Engine/Route/AirspaceRoute.hpp	/^  Airspaces m_airspaces;$/;"	m	class:AirspaceRoute
m_alt	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_alt;$/;"	m	class:final	file:
m_border	Engine/Airspace/AbstractAirspace.hpp	/^  SearchPointVector m_border;$/;"	m	class:AbstractAirspace
m_center	Engine/Airspace/AirspaceCircle.hpp	/^  const GeoPoint m_center;$/;"	m	class:final
m_clearance	Engine/Airspace/AbstractAirspace.hpp	/^  mutable SearchPointVector m_clearance;$/;"	m	class:AbstractAirspace
m_d_min	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_d_min;$/;"	m	class:final	file:
m_data	OS/FileMapping.hpp	/^  void *m_data;$/;"	m	class:FileMapping
m_dh	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_dh;$/;"	m	class:final	file:
m_distance	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_distance;$/;"	m	class:final	file:
m_h_min	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const double m_h_min;$/;"	m	class:final	file:
m_head_wind	Engine/GlideSolvers/GlidePolar.cpp	/^  const double m_head_wind;$/;"	m	class:final	file:
m_inx	Engine/Route/AirspaceRoute.hpp	/^  mutable RouteAirspaceIntersection m_inx;$/;"	m	class:AirspaceRoute
m_inx_terrain	Engine/Route/TerrainRoute.hpp	/^  mutable RoutePoint m_inx_terrain;$/;"	m	class:TerrainRoute
m_net_sink_rate	Engine/GlideSolvers/GlidePolar.cpp	/^  const double m_net_sink_rate;$/;"	m	class:final	file:
m_perf	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  const AirspaceAircraftPerformance &m_perf;$/;"	m	class:final	file:
m_proj	Renderer/TaskPointRenderer.hpp	/^  const WindowProjection &m_proj;$/;"	m	class:TaskPointRenderer
m_q	Engine/Airspace/AirspaceIntersectSort.hpp	/^  std::priority_queue<Intersection, std::vector<Intersection>, Rank> m_q;$/;"	m	class:AirspaceIntersectSort
m_radius	Engine/Airspace/AirspaceCircle.hpp	/^  const double m_radius;$/;"	m	class:final
m_size	OS/FileMapping.hpp	/^  size_t m_size;$/;"	m	class:FileMapping
m_start	Engine/Airspace/AirspaceIntersectSort.hpp	/^  const GeoPoint& m_start;$/;"	m	class:AirspaceIntersectSort
mac	Engine/GlideSolvers/MacCready.cpp	/^  const MacCready &mac;$/;"	m	class:MacCreadyVopt	file:
mac_cready	NMEA/ExternalSettings.hpp	/^  double mac_cready;$/;"	m	struct:ExternalSettings
mac_cready_available	NMEA/ExternalSettings.hpp	/^  Validity mac_cready_available;$/;"	m	struct:ExternalSettings
macdata	Terrain/jasper/jas_icc.h	/^	jas_uchar macdata[69]; \/* Localizable Macintosh description *\/$/;"	m	struct:__anon183
maclen	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t maclen; \/* Localizable Macintosh description count *\/$/;"	m	struct:__anon183
magenta_brush	Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
magic	Language/MOFile.hpp	/^    uint32_t magic;$/;"	m	struct:MOFile::mo_header
magic	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t magic; \/* profile file signature *\/$/;"	m	struct:__anon189
magic	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t magic;$/;"	m	struct:__anon107
magic	Tracking/SkyLines/Protocol.hpp	/^  uint32_t magic;$/;"	m	struct:SkyLinesTracking::Header
magnify_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect magnify_button, shrink_button;$/;"	m	struct:final::Layout	file:
magnify_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button magnify_button, shrink_button;$/;"	m	class:final	file:
main	Cloud/Main.cpp	/^main(int argc, char **argv)$/;"	f
main	Cloud/ToKML.cpp	/^main(int argc, char **argv)$/;"	f
main	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect main;$/;"	m	struct:final::Layout	file:
main	Dialogs/dlgAnalysis.cpp	/^    PixelRect main;$/;"	m	struct:final::Layout	file:
main	Kobo/KoboMenu.cpp	/^int main(int argc, char **argv)$/;"	f
main	Kobo/PowerOff.cpp	/^int main(int argc, char **argv)$/;"	f
main	PageActions.cpp	39;"	d	file:
main	PageSettings.hpp	/^  } main;$/;"	m	struct:PageLayout	typeref:class:PageLayout::Main
main	VALI-XCS.cpp	/^int main(int argc, char* argv[])$/;"	f
main	Widget/ArrowPagerWidget.hpp	/^    PixelRect main;$/;"	m	struct:ArrowPagerWidget::Layout
main	XCSoar.cpp	/^int main(int argc, char **argv)$/;"	f
main_index	Form/TabMenuDisplay.hpp	/^    unsigned main_index;$/;"	m	struct:final::MenuTabIndex
main_menu_buttons	Form/TabMenuDisplay.hpp	/^  StaticArray<MainMenuButton, MAX_MAIN_MENU_ITEMS> main_menu_buttons;$/;"	m	class:final
main_menu_captions	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuGroup main_menu_captions[] = {$/;"	v	file:
main_menu_index	Form/TabMenuDisplay.hpp	/^    unsigned main_menu_index;$/;"	m	struct:final::SubMenuButton
main_thread	Thread/Debug.cpp	/^static ThreadHandle main_thread = ThreadHandle::GetCurrent();$/;"	v	file:
main_thread	Thread/Debug.cpp	/^static ThreadHandle main_thread;$/;"	v	file:
main_window	Interface.cpp	/^MainWindow *CommonInterface::main_window;$/;"	m	class:CommonInterface	file:
majver	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t majver;$/;"	m	struct:__anon108
makeLabel	Input/InputDefaults.cpp	/^makeLabel(InputConfig &input_config,$/;"	f	file:
maker	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t maker; \/* device manufacturer signature *\/$/;"	m	struct:__anon189
manage_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *manage_button, *monitor_button;$/;"	m	class:final	file:
manager	Computer/WarningComputer.hpp	/^  AirspaceWarningManager manager;$/;"	m	class:WarningComputer
manager	Monitor/AirspaceWarningMonitor.cpp	/^  ProtectedAirspaceWarningManager &manager;$/;"	m	class:final	file:
manual_modified	Dialogs/Settings/WindSettingsPanel.hpp	/^  bool manual_modified;$/;"	m	class:final
manual_wind	Computer/Wind/Settings.hpp	/^  SpeedVector manual_wind;$/;"	m	struct:WindSettings
manual_wind_available	Computer/Wind/Settings.hpp	/^  Validity manual_wind_available;$/;"	m	struct:WindSettings
manufacturer	IGC/IGCHeader.hpp	/^  char manufacturer[4];$/;"	m	struct:IGCHeader
map	Device/SettingsMap.hpp	/^  Map map;$/;"	m	class:DeviceSettingsMap
map	Dialogs/Task/TargetDialog.cpp	/^    PixelRect map;$/;"	m	struct:TargetWidget::Layout	file:
map	Dialogs/Task/TargetDialog.cpp	/^  TargetDialogMapWindow map;$/;"	m	class:TargetWidget	file:
map	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect map, properties;$/;"	m	struct:final::Layout	file:
map	Dialogs/Task/TaskPointDialog.cpp	/^  WndOwnerDrawFrame map;$/;"	m	class:final	file:
map	DrawThread.hpp	/^  GlueMapWindow &map;$/;"	m	class:final
map	FLARM/FlarmNetDatabase.hpp	/^  RecordMap map;$/;"	m	class:FlarmNetDatabase
map	Look/FontSettings.hpp	/^  FontDescription map;$/;"	m	struct:FontSettings
map	Look/GlobalFonts.cpp	/^Font Fonts::map;$/;"	m	class:Fonts	file:
map	Look/Look.hpp	/^  MapLook map;$/;"	m	struct:Look
map	MainWindow.hpp	/^  GlueMapWindow *map = nullptr;$/;"	m	class:MainWindow
map	Profile/Current.cpp	/^  ProfileMap map;$/;"	m	namespace:Profile	file:
map	Screen/Custom/TopCanvas.hpp	/^  void *map;$/;"	m	class:DisplayOrientation
map	Screen/GDI/Canvas.hpp	/^  const HWColor map(const Color color) const$/;"	f	class:Canvas
map	Terrain/RasterTerrain.hpp	/^  RasterMap map;$/;"	m	class:RasterTerrain
map	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t map;$/;"	m	struct:__anon115
map	Topography/shapelib/mapserver.h	/^    mapObj *map;$/;"	m	struct:imageObj
map	Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon31	typeref:struct:__anon31::mapObj
map	Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon42	typeref:struct:__anon42::mapObj
map	Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon52	typeref:struct:__anon52::mapObj
map	Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon53	typeref:struct:__anon53::mapObj
map	Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:__anon55	typeref:struct:__anon55::mapObj
map	Topography/shapelib/mapserver.h	/^    struct mapObj *map;$/;"	m	struct:layerObj	typeref:struct:layerObj::mapObj
map	UISettings.hpp	/^  MapSettings map;$/;"	m	struct:UISettings
map	Util/Cache.hxx	/^	KeyMap map;$/;"	m	class:Cache
map	Weather/Rasp/RaspCache.hpp	/^  RasterMap *map = nullptr;$/;"	m	class:RaspCache
map	Weather/WeatherUIState.hpp	/^  int map;$/;"	m	struct:WeatherUIState
mapObj	Topography/shapelib/mapserver.h	/^  struct mapObj { \/* structure for a map *\/$/;"	s
map_bold	Look/FontSettings.hpp	/^  FontDescription map_bold;$/;"	m	struct:FontSettings
map_bold	Look/GlobalFonts.cpp	/^Font Fonts::map_bold;$/;"	m	class:Fonts	file:
map_bpp	Screen/Custom/TopCanvas.hpp	/^  unsigned map_pitch, map_bpp;$/;"	m	class:DisplayOrientation
map_buffer	Screen/OpenGL/Dynamic.cpp	/^  PFNGLMAPBUFFEROESPROC map_buffer;$/;"	m	namespace:GLExt	file:
map_canvas	Renderer/TaskPointRenderer.hpp	/^  MapCanvas map_canvas;$/;"	m	class:TaskPointRenderer
map_datum	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t map_datum; \/\/ ignored on IGC version$/;"	m	struct:CAI302::Pilot
map_funcs	Lua/Map.cpp	/^static constexpr struct luaL_Reg map_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
map_look	Renderer/FlightStatisticsRenderer.hpp	/^  const MapLook &map_look;$/;"	m	class:FlightStatisticsRenderer
map_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage map_pages[] = {$/;"	v	file:
map_pitch	Screen/Custom/TopCanvas.hpp	/^  unsigned map_pitch, map_bpp;$/;"	m	class:DisplayOrientation
map_rect	MainWindow.hpp	/^  PixelRect map_rect;$/;"	m	class:MainWindow
map_scale_left_icon	Look/OverlayLook.hpp	/^  MaskedIcon map_scale_left_icon;$/;"	m	struct:OverlayLook
map_scale_right_icon	Look/OverlayLook.hpp	/^  MaskedIcon map_scale_right_icon;$/;"	m	struct:OverlayLook
map_shift_bias	MapSettings.hpp	/^  MapShiftBias map_shift_bias;$/;"	m	struct:MapSettings
mapbuffer	Screen/OpenGL/Globals.cpp	/^  bool mapbuffer;$/;"	m	namespace:OpenGL	file:
mapbuffer	Screen/OpenGL/Globals.hpp	/^  static constexpr bool mapbuffer = true;$/;"	m	class:DisplayOrientation
mappath	Topography/shapelib/mapserver.h	/^    char *mappath; \/* path of the mapfile, all path are relative to this path *\/$/;"	m	struct:mapObj
mapped	Event/Poll/X11Queue.hpp	/^  bool mapped = true, visible = true;$/;"	m	class:X11EventQueue
mapping	Language/MOLoader.hpp	/^  FileMapping *mapping;$/;"	m	class:MOLoader
maps	Weather/Rasp/RaspStore.hpp	/^  MapList maps;$/;"	m	class:RaspStore
margin_height	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t margin_height; \/\/ (10ths of Meters)$/;"	m	struct:CAI302::Pilot
margins	Engine/Task/Ordered/Points/StartPoint.hpp	/^  TaskStartMargins margins;$/;"	m	class:final
marker	Topography/shapelib/mapserver.h	/^    int marker;$/;"	m	struct:__anon53
markerCacheMemberObj	Topography/shapelib/mapserver.h	/^  } markerCacheMemberObj;$/;"	t	typeref:struct:__anon47
marker_icon	Look/WaypointLook.hpp	/^  MaskedIcon marker_icon;$/;"	m	struct:WaypointLook
markercachesize	Topography/shapelib/mapserver.h	/^    int markercachesize;$/;"	m	struct:__anon48
markerid	Topography/shapelib/mapserver.h	/^    int markerid; \/* corresponding marker (POINT layers only) *\/$/;"	m	struct:__anon46
markername	Topography/shapelib/mapserver.h	/^    char *markername;$/;"	m	struct:__anon53
markers	Screen/StopWatch.hpp	/^  MarkerList markers;$/;"	m	class:ScreenStopWatch
markers	Topography/shapelib/mapserver.h	/^    markerCacheMemberObj *markers;$/;"	m	struct:__anon48
markersize	Topography/shapelib/mapserver.h	/^    int markersize;$/;"	m	struct:__anon53
mask	Engine/Airspace/AirspaceActivity.hpp	/^  } mask;$/;"	m	class:AirspaceActivity	typeref:union:AirspaceActivity::__anon205
mask	Topography/shapelib/mapserver.h	/^    char *mask;$/;"	m	struct:layerObj
mask	Util/EnumBitSet.hpp	/^  I mask;$/;"	m	class:EnumBitSet
maskimage	Topography/shapelib/mapserver.h	/^    imageObj *maskimage;$/;"	m	struct:layerObj
mass_unit	Units/Settings.hpp	/^  Unit mass_unit;$/;"	m	struct:UnitSetting
master_volume	Audio/Settings.hpp	/^  uint8_t master_volume;$/;"	m	struct:SoundSettings
mat	Terrain/jasper/jas_cm.h	/^	jas_cmreal_t mat[3][4];$/;"	m	struct:__anon98
mat_constraints	Engine/Task/Factory/MatTaskFactory.cpp	/^static constexpr TaskFactoryConstraints mat_constraints = {$/;"	v	file:
mat_task	Monitor/AllMonitors.hpp	/^  MatTaskMonitor mat_task;$/;"	m	class:final
match_type	Event/Android/Queue.cpp	/^match_type(const Event &event, void *ctx)$/;"	f	file:
match_type	Event/Poll/Queue.cpp	/^match_type(const Event &event, void *ctx)$/;"	f	file:
max	Form/DataField/Integer.hpp	/^  int max;$/;"	m	class:final
max	Form/DataField/Time.hpp	/^  int max;$/;"	m	class:final
max	Renderer/ChartRenderer.hpp	/^    double scale, min, max;$/;"	m	struct:ChartRenderer::Axis
maxAlt	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD maxAlt: 14;$/;"	m	struct:IMI::TObservationZone
max_abort	Engine/Task/Unordered/AbortTask.hpp	/^  static constexpr unsigned max_abort = 10;$/;"	m	class:AbortTask
max_alt	Engine/Airspace/AirspaceWarningManager.cpp	/^  const double max_alt;$/;"	m	class:final	file:
max_alternates	Engine/Task/Unordered/AlternateTask.hpp	/^  static constexpr unsigned max_alternates = 6;$/;"	m	class:final
max_altitude	Task/TaskFileSeeYou.cpp	/^  double radius1, radius2, max_altitude;$/;"	m	struct:SeeYouTurnpointInformation	file:
max_auto_zoom_distance	MapSettings.hpp	/^  double max_auto_zoom_distance;$/;"	m	struct:MapSettings
max_ballast	Plane/Plane.hpp	/^  double max_ballast;$/;"	m	struct:Plane
max_ballast	Polar/Polar.hpp	/^  double max_ballast;  \/**< Max water ballast (l) *\/$/;"	m	struct:PolarInfo
max_ballast	Polar/PolarStore.hpp	/^    double max_ballast;$/;"	m	struct:PolarStore::Item
max_bfv	Device/Driver/Volkslogger/vlconv.cpp	/^const int max_bfv=1;$/;"	v
max_cached_shape_count	Topography/shapelib/mapserver.h	/^    int max_cached_shape_count; \/* maximum number of shapes cached in the total number of resultCacheObj *\/$/;"	m	struct:__anon40
max_cached_shape_ram_amount	Topography/shapelib/mapserver.h	/^    int max_cached_shape_ram_amount; \/* maximum number of bytes taken by shapes cached in the total number of resultCacheObj *\/$/;"	m	struct:__anon40
max_dead	Audio/VarioSettings.hpp	/^  double max_dead;$/;"	m	struct:VarioSoundSettings
max_dead	Audio/VarioSynthesiser.hpp	/^  int min_dead, max_dead;$/;"	m	class:final
max_delta	Projection/CompareProjection.hpp	/^  double max_delta;$/;"	m	class:CompareProjection
max_dt_us_	Math/SelfTimingKalmanFilter1d.hpp	/^  uint64_t max_dt_us_;$/;"	m	class:SelfTimingKalmanFilter1d
max_error	Math/LeastSquares.hpp	/^  double max_error;$/;"	m	class:LeastSquares
max_fai_angle	Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^static constexpr Angle max_fai_angle = Angle::Degrees(114);$/;"	v	file:
max_frequency	Audio/VarioSettings.hpp	/^  unsigned max_frequency;$/;"	m	struct:VarioSoundSettings
max_frequency	Audio/VarioSynthesiser.hpp	/^  unsigned max_frequency;$/;"	m	class:final
max_ground_temperature	Atmosphere/CuSonde.hpp	/^  Temperature max_ground_temperature;$/;"	m	class:CuSonde
max_height	Engine/Task/Ordered/StartConstraints.hpp	/^  unsigned max_height;$/;"	m	struct:StartConstraints
max_height_gain	NMEA/CirclingInfo.hpp	/^  double max_height_gain;$/;"	m	struct:CirclingInfo
max_height_margin	Engine/Task/TaskBehaviour.hpp	/^  unsigned max_height_margin;$/;"	m	struct:TaskStartMargins
max_height_ref	Engine/Task/Ordered/StartConstraints.hpp	/^  AltitudeReference max_height_ref;$/;"	m	struct:StartConstraints
max_iterations	Engine/Contest/Solvers/TriangleContest.hpp	/^  unsigned max_iterations = 1e6,$/;"	m	class:TriangleContest
max_length	Net/HTTP/ToBuffer.hpp	/^    size_t max_length;$/;"	m	class:Net::DownloadToBufferJob
max_period_ms	Audio/VarioSettings.hpp	/^  unsigned max_period_ms;$/;"	m	struct:VarioSoundSettings
max_period_ms	Audio/VarioSynthesiser.hpp	/^  unsigned max_period_ms;$/;"	m	class:final
max_points	Engine/Task/Factory/Constraints.hpp	/^  unsigned max_points;$/;"	m	struct:TaskFactoryConstraints
max_samples	Terrain/jasper/jpc/jpc_dec.h	/^	size_t max_samples;$/;"	m	struct:__anon152
max_samples	Terrain/jasper/jpc/jpc_dec.h	/^	size_t max_samples;$/;"	m	struct:__anon153
max_search_range	Engine/Task/Unordered/AbortTask.cpp	/^static constexpr double max_search_range = 100000;$/;"	v	file:
max_size	Engine/Trace/Trace.hpp	/^  const unsigned max_size;$/;"	m	class:Trace
max_size	Net/HTTP/ToBuffer.cpp	/^  const size_t max_size;$/;"	m	class:final	file:
max_size	Util/TrivialArray.hxx	/^	size_type max_size() const {$/;"	f	class:TrivialArray
max_speed	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double max_speed;$/;"	m	class:AirspaceAircraftPerformance
max_speed	Engine/Task/Ordered/StartConstraints.hpp	/^  double max_speed;$/;"	m	struct:StartConstraints
max_speed	Plane/Plane.hpp	/^  double max_speed;$/;"	m	struct:Plane
max_speed_margin	Engine/Task/TaskBehaviour.hpp	/^  double max_speed_margin;$/;"	m	struct:TaskStartMargins
max_start_altitude	Task/TaskFileSeeYou.cpp	/^  double max_start_altitude;$/;"	m	struct:SeeYouTaskInformation	file:
max_start_speed_clock	Monitor/TaskConstraintsMonitor.hpp	/^  PeriodClock max_start_speed_clock;$/;"	m	class:TaskConstraintsMonitor
max_time	Engine/Airspace/AirspaceWarningManager.cpp	/^  const double max_time;$/;"	m	class:final	file:
max_time	Engine/Trace/Trace.hpp	/^  const unsigned max_time;$/;"	m	class:Trace
max_tokens	Form/DataField/Time.hpp	/^  unsigned max_tokens;$/;"	m	class:final
max_tree_size	Engine/Contest/Solvers/TriangleContest.hpp	/^           max_tree_size = 5e5;$/;"	m	class:TriangleContest
max_value	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int min_value, max_value, step;$/;"	m	struct:VegaParametersWidget::StaticParameter
max_value	Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
max_vario	Audio/VarioSynthesiser.cpp	/^static constexpr int min_vario = -500, max_vario = 500;$/;"	v	file:
max_width	Dialogs/KnobTextEntry.cpp	/^  const size_t max_width;$/;"	m	class:final	file:
max_width	Dialogs/TouchTextEntry.cpp	/^static size_t max_width;$/;"	v	file:
max_width	Form/DigitEntry.hpp	/^  unsigned top, bottom, max_width;$/;"	m	class:CoordinateFormat
max_x	Event/Poll/Linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:final
max_y	Event/Poll/Linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:final
maxarcs	Topography/shapelib/mapserver.h	/^    double    maxarcs;$/;"	m	struct:__anon56
maxattrs	Terrain/jasper/jas_icc.h	/^	int maxattrs;$/;"	m	struct:__anon191
maxboxsize	Topography/shapelib/mapserver.h	/^    int maxboxsize;$/;"	m	struct:__anon53
maxclasses	Topography/shapelib/mapserver.h	/^    int maxclasses;$/;"	m	struct:layerObj
maxcmpts_	Terrain/jasper/jas_image.h	/^	int maxcmpts_;$/;"	m	struct:__anon124
maxcolor	Topography/shapelib/mapserver.h	/^    colorObj maxcolor;$/;"	m	struct:styleObj
maxctxs	Terrain/jasper/jpc/jpc_mqdec.h	/^	int maxctxs;$/;"	m	struct:__anon133
maxdepth	Topography/shapelib/maptree.h	/^    ms_int32 maxdepth;$/;"	m	struct:__anon87
maxdistance	Topography/shapelib/mapserver.h	/^    double maxdistance; \/* max distance between clusters *\/$/;"	m	struct:__anon37
maxdistance	Topography/shapelib/mapserver.h	/^    int maxdistance;$/;"	m	struct:__anon43
maxents	Terrain/jasper/jpc/jpc_dec.h	/^	int maxents;$/;"	m	struct:__anon140
maxfeatures	Topography/shapelib/mapserver.h	/^    int  maxfeatures; \/* global maxfeatures *\/$/;"	m	struct:__anon40
maxfeatures	Topography/shapelib/mapserver.h	/^    int maxfeatures;$/;"	m	struct:layerObj
maxgeowidth	Topography/shapelib/mapserver.h	/^    double mingeowidth, maxgeowidth; \/* map width (in map units) at which the layer should be drawn *\/$/;"	m	struct:layerObj
maximum_control_height	Screen/Layout.cpp	/^  unsigned minimum_control_height = 20, maximum_control_height = 44;$/;"	m	namespace:Layout	file:
maxincrement	Topography/shapelib/mapserver.h	/^    double    maxincrement;$/;"	m	struct:__anon56
maxlabels	Topography/shapelib/mapserver.h	/^    int maxlabels;$/;"	m	struct:classObj
maxlayers	Topography/shapelib/mapserver.h	/^    int maxlayers; \/* allocated size of layers[] array *\/$/;"	m	struct:mapObj
maxlength	Topography/shapelib/mapserver.h	/^    int maxlength;$/;"	m	struct:labelObj
maxlyrs	Terrain/jasper/jpc/jpc_dec.h	/^	int maxlyrs;$/;"	m	struct:__anon152
maxlyrs	Terrain/jasper/jpc/jpc_dec.h	/^	int maxlyrs;$/;"	m	struct:__anon153
maxoverlapangle	Topography/shapelib/mapserver.h	/^    double maxoverlapangle;$/;"	m	struct:labelObj
maxpasses	Terrain/jasper/jpc/jpc_dec.h	/^	int maxpasses;$/;"	m	struct:jpc_dec_seg_s
maxpchgs	Terrain/jasper/jpc/jpc_t2cod.h	/^	int maxpchgs;$/;"	m	struct:__anon135
maxpkts	Terrain/jasper/jpc/jpc_dec.h	/^	int maxpkts;$/;"	m	struct:__anon152
maxpkts	Terrain/jasper/jpc/jpc_dec.h	/^	int maxpkts;$/;"	m	struct:__anon153
maxpxforms	Terrain/jasper/jas_cm.h	/^	int maxpxforms;$/;"	m	struct:__anon102
maxresults	Topography/shapelib/mapserver.h	/^    int maxresults;$/;"	m	struct:__anon40
maxrlvls	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned maxrlvls;$/;"	m	struct:__anon138
maxrows_	Terrain/jasper/jas_seq.h	/^	int_fast32_t maxrows_;$/;"	m	struct:jas_matrix
maxscale	Topography/shapelib/mapserver.h	/^    double maxscale;$/;"	m	struct:__anon59
maxscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:__anon42
maxscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:classObj
maxscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:labelObj
maxscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:layerObj
maxscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:styleObj
maxsize	Topography/shapelib/mapserver.h	/^    double minsize, maxsize;$/;"	m	struct:styleObj
maxsize	Topography/shapelib/mapserver.h	/^    int maxsize;$/;"	m	struct:mapObj
maxsize	Topography/shapelib/mapserver.h	/^    int minsize, maxsize;$/;"	m	struct:labelObj
maxstreams	Terrain/jasper/jpc/jpc_dec.h	/^	int maxstreams;$/;"	m	struct:__anon141
maxstyles	Topography/shapelib/mapserver.h	/^    int maxstyles;$/;"	m	struct:__anon43
maxstyles	Topography/shapelib/mapserver.h	/^    int maxstyles;$/;"	m	struct:classObj
maxstyles	Topography/shapelib/mapserver.h	/^    int maxstyles;$/;"	m	struct:labelObj
maxsubdivides	Topography/shapelib/mapserver.h	/^    double    maxsubdivides;$/;"	m	struct:__anon56
maxsymbols	Topography/shapelib/mapserver.h	/^    int maxsymbols;$/;"	m	struct:__anon52
maxtemplate	Topography/shapelib/mapserver.h	/^    char *mintemplate, *maxtemplate;$/;"	m	struct:__anon42
maxvalue	Topography/shapelib/mapserver.h	/^    double maxvalue;$/;"	m	struct:styleObj
maxwidth	Topography/shapelib/mapserver.h	/^    double minwidth, maxwidth;$/;"	m	struct:styleObj
maxx	Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon75
maxx	Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon65
maxy	Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon75
maxy	Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon65
mc	Device/Driver/Vega/Volatile.hpp	/^    unsigned mc;$/;"	m	struct:Vega::VolatileData
mc	Engine/GlideSolvers/GlidePolar.hpp	/^  double mc;$/;"	m	class:GlidePolar
mc	Gauge/GaugeVario.hpp	/^    LabelValueGeometry average, gross, mc;$/;"	m	struct:GaugeVario::Geometry
mc_best	Engine/Task/Stats/TaskStats.hpp	/^  double mc_best;$/;"	m	class:TaskStats
mc_di	Gauge/GaugeVario.hpp	/^  LabelValueDrawInfo average_di, mc_di, gross_di;$/;"	m	class:GaugeVario
mc_lpf	Engine/Task/AbstractTask.hpp	/^  Filter mc_lpf;$/;"	m	class:AbstractTask
mc_lpf_valid	Engine/Task/AbstractTask.hpp	/^  bool mc_lpf_valid;$/;"	m	class:AbstractTask
mctid	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t mctid;$/;"	m	struct:__anon143
mctrans	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t mctrans;$/;"	m	struct:__anon163
md5	Logger/GRecord.hpp	/^  MD5 md5[N_MD5];$/;"	m	class:GRecord
md5_start	Util/MD5.cpp	/^static constexpr MD5::State md5_start = {$/;"	v	file:
measurements	Computer/Wind/MeasurementList.hpp	/^  StaticArray<WindMeasurement, 200> measurements;$/;"	m	class:WindMeasurementList
mem_close	Terrain/jasper/base/jas_stream.c	/^static int mem_close(jas_stream_obj_t *obj)$/;"	f	file:
mem_read	Terrain/jasper/base/jas_stream.c	/^static int mem_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
mem_resize	Terrain/jasper/base/jas_stream.c	/^static int mem_resize(jas_stream_memobj_t *m, size_t bufsize)$/;"	f	file:
mem_seek	Terrain/jasper/base/jas_stream.c	/^static long mem_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
mem_write	Terrain/jasper/base/jas_stream.c	/^static int mem_write(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
memo_max	Engine/Task/Points/TaskLeg.hpp	/^  DistanceMemento memo_max;$/;"	m	class:TaskLeg
memo_min	Engine/Task/Points/TaskLeg.hpp	/^  DistanceMemento memo_min;$/;"	m	class:TaskLeg
memo_nominal	Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_nominal;$/;"	m	class:TaskLeg
memo_planned	Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_planned;$/;"	m	class:TaskLeg
memo_remaining	Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_remaining;$/;"	m	class:TaskLeg
memo_travelled	Engine/Task/Points/TaskLeg.hpp	/^  GeoVectorMemento memo_travelled;$/;"	m	class:TaskLeg
menu	Dialogs/dlgQuickMenu.cpp	/^  const Menu &menu;$/;"	m	class:final	file:
menu_caption	Form/TabMenuData.hpp	/^  const TCHAR *menu_caption;$/;"	m	struct:TabMenuPage
menu_timeout	UISettings.hpp	/^  unsigned menu_timeout;$/;"	m	struct:UISettings
menubar_height_scale_factor	Menu/MenuBar.hpp	/^static constexpr unsigned menubar_height_scale_factor = 6;$/;"	v
menus	Input/InputConfig.hpp	/^  Menu menus[MAX_MODE];$/;"	m	struct:InputConfig
merge	Event/Poll/Linux/Input.hpp	/^  MergeMouse &merge;$/;"	m	class:final
mergeRasterBuffer	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*mergeRasterBuffer)(imageObj *dest, rasterBufferObj *overlay, double opacity, int srcX, int srcY, int dstX, int dstY, int width, int height);$/;"	m	struct:rendererVTableObj
merge_mouse	Event/Poll/InputQueue.hpp	/^  MergeMouse merge_mouse;$/;"	m	class:DisplayOrientation
merge_thread	Components.cpp	/^MergeThread *merge_thread;$/;"	v
message	Dialogs/Task/Manager/TaskClosePanel.hpp	/^    PixelRect close_button, message, revert_button;$/;"	m	struct:final::Layout
message	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  WndFrame message;$/;"	m	class:final
message	ProgressWindow.hpp	/^  StaticString<128> message;$/;"	m	class:ProgressWindow
message	Topography/shapelib/maperror.h	/^    char message[MESSAGELENGTH];$/;"	m	struct:errorObj
message	Widget/QuestionWidget.hpp	/^  const TCHAR *const message;$/;"	m	class:QuestionWidget
message_length	Util/MD5.hpp	/^  uint64_t message_length;$/;"	m	class:MD5
message_position	ProgressWindow.hpp	/^  PixelRect logo_position, message_position;$/;"	m	class:ProgressWindow
messages	PopupMessage.hpp	/^  struct Message messages[MAXMESSAGES];$/;"	m	class:PopupMessage	typeref:struct:PopupMessage::Message
meta_data	InfoBoxes/Content/Factory.cpp	/^static constexpr MetaData meta_data[] = {$/;"	v	file:
metadata	Topography/shapelib/mapserver.h	/^    hashTableObj metadata;$/;"	m	struct:__anon42
metadata	Topography/shapelib/mapserver.h	/^    hashTableObj metadata;$/;"	m	struct:classObj
metadata	Topography/shapelib/mapserver.h	/^    hashTableObj metadata;$/;"	m	struct:layerObj
metar	Weather/NOAAStore.hpp	/^    METAR metar;$/;"	m	struct:NOAAStore::Item
metar_available	Weather/NOAAStore.hpp	/^    bool metar_available;$/;"	m	struct:NOAAStore::Item
method	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t method;$/;"	m	struct:__anon111
method	zzip/file.h	/^    int method;$/;"	m	struct:zzip_file
mhz	Device/Driver/KRT2.cpp	/^    uint8_t mhz;$/;"	m	struct:final::stx_msg	file:
mid	Gauge/ThermalAssistantRenderer.hpp	/^  PixelPoint mid;$/;"	m	class:ThermalAssistantRenderer
midGetFontMetrics	Android/TextUtil.cpp	/^jmethodID TextUtil::midGetFontMetrics;$/;"	m	class:TextUtil	file:
midGetFontMetrics	Android/TextUtil.hpp	/^  static jmethodID midTextUtil, midGetFontMetrics, midGetTextBounds;$/;"	m	class:TextUtil
midGetTextBounds	Android/TextUtil.cpp	/^jmethodID TextUtil::midGetTextBounds;$/;"	m	class:TextUtil	file:
midGetTextBounds	Android/TextUtil.hpp	/^  static jmethodID midTextUtil, midGetFontMetrics, midGetTextBounds;$/;"	m	class:TextUtil
midGetTextTextureGL	Android/TextUtil.cpp	/^jmethodID TextUtil::midGetTextTextureGL;$/;"	m	class:TextUtil	file:
midGetTextTextureGL	Android/TextUtil.hpp	/^  static jmethodID midGetTextTextureGL;$/;"	m	class:TextUtil
midTextUtil	Android/TextUtil.cpp	/^jmethodID TextUtil::midTextUtil;$/;"	m	class:TextUtil	file:
midTextUtil	Android/TextUtil.hpp	/^  static jmethodID midTextUtil, midGetFontMetrics, midGetTextBounds;$/;"	m	class:TextUtil
mid_sensors_cancelAllSensorSubscriptions_	Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_cancelAllSensorSubscriptions_;$/;"	m	class:InternalSensors	file:
mid_sensors_cancelAllSensorSubscriptions_	Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_cancelAllSensorSubscriptions_;$/;"	m	class:InternalSensors
mid_sensors_cancelSensorSubscription_	Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_cancelSensorSubscription_;$/;"	m	class:InternalSensors	file:
mid_sensors_cancelSensorSubscription_	Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_cancelSensorSubscription_;$/;"	m	class:InternalSensors
mid_sensors_getSubscribableSensors	Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_getSubscribableSensors;$/;"	m	class:InternalSensors	file:
mid_sensors_getSubscribableSensors	Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_getSubscribableSensors;$/;"	m	class:InternalSensors
mid_sensors_subscribeToSensor_	Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_subscribeToSensor_;$/;"	m	class:InternalSensors	file:
mid_sensors_subscribeToSensor_	Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_subscribeToSensor_;$/;"	m	class:InternalSensors
mid_sensors_subscribedToSensor_	Android/InternalSensors.cpp	/^jmethodID InternalSensors::mid_sensors_subscribedToSensor_;$/;"	m	class:InternalSensors	file:
mid_sensors_subscribedToSensor_	Android/InternalSensors.hpp	/^  static jmethodID mid_sensors_subscribedToSensor_;$/;"	m	class:InternalSensors
milliminutes	Device/Driver/IMI/Protocol/Conversion.hpp	/^        IMIDWORD milliminutes :16;$/;"	m	struct:IMI::AngleConverter::__anon199::__anon200
mimetype	Topography/shapelib/mapserver.h	/^    char *mimetype;$/;"	m	struct:__anon39
min	Form/DataField/Integer.hpp	/^  int min;$/;"	m	class:final
min	Form/DataField/Time.hpp	/^  int min;$/;"	m	class:final
min	Renderer/ChartRenderer.hpp	/^    double scale, min, max;$/;"	m	struct:ChartRenderer::Axis
min	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t min;$/;"	m	struct:__anon180
min_altitude	Computer/CirclingComputer.hpp	/^  double min_altitude;$/;"	m	class:CirclingComputer
min_arrival_altitude	Engine/GlideSolvers/GlideResult.hpp	/^  double min_arrival_altitude;$/;"	m	struct:GlideResult
min_arrival_altitude	Engine/GlideSolvers/GlideState.hpp	/^  double min_arrival_altitude;$/;"	m	struct:GlideState
min_dead	Audio/VarioSettings.hpp	/^  double min_dead;$/;"	m	struct:VarioSoundSettings
min_dead	Audio/VarioSynthesiser.hpp	/^  int min_dead, max_dead;$/;"	m	class:final
min_distance	Engine/Route/AirspaceRoute.cpp	/^  double min_distance;$/;"	m	class:final	file:
min_fai_angle	Engine/Task/Shapes/FAITrianglePointValidator.cpp	/^static constexpr Angle min_fai_angle = Angle::Degrees(31.5);$/;"	v	file:
min_frequency	Audio/VarioSettings.hpp	/^  unsigned min_frequency;$/;"	m	struct:VarioSoundSettings
min_frequency	Audio/VarioSynthesiser.hpp	/^  unsigned min_frequency;$/;"	m	class:final
min_height	Engine/Task/Ordered/FinishConstraints.hpp	/^  unsigned min_height;$/;"	m	struct:FinishConstraints
min_height_ref	Engine/Task/Ordered/FinishConstraints.hpp	/^  AltitudeReference min_height_ref;$/;"	m	struct:FinishConstraints
min_period_ms	Audio/VarioSettings.hpp	/^  unsigned min_period_ms;$/;"	m	struct:VarioSoundSettings
min_period_ms	Audio/VarioSynthesiser.hpp	/^  unsigned min_period_ms;$/;"	m	class:final
min_points	Engine/Task/Factory/Constraints.hpp	/^  unsigned min_points;$/;"	m	struct:TaskFactoryConstraints
min_screen_pixels	Screen/Layout.cpp	/^  unsigned min_screen_pixels = 512;$/;"	m	namespace:Layout	file:
min_search_range	Engine/Task/Unordered/AbortTask.cpp	/^static constexpr double min_search_range = 50000;$/;"	v	file:
min_value	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int min_value, max_value, step;$/;"	m	struct:VegaParametersWidget::StaticParameter
min_value	Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
min_vario	Audio/VarioSynthesiser.cpp	/^static constexpr int min_vario = -500, max_vario = 500;$/;"	v	file:
min_x	Event/Poll/Linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:final
min_y	Event/Poll/Linux/Input.hpp	/^  int min_x, max_x, min_y, max_y;$/;"	m	class:final
minarcs	Topography/shapelib/mapserver.h	/^    double    minarcs;$/;"	m	struct:__anon56
minboxsize	Topography/shapelib/mapserver.h	/^    int minboxsize;$/;"	m	struct:__anon53
mincolor	Topography/shapelib/mapserver.h	/^    colorObj mincolor;$/;"	m	struct:styleObj
mindistance	Topography/shapelib/mapserver.h	/^    int mindistance;$/;"	m	struct:labelObj
minfeaturesize	Topography/shapelib/mapserver.h	/^    int minfeaturesize; \/* minimum feature size (in pixels) to label *\/$/;"	m	struct:labelObj
minfeaturesize	Topography/shapelib/mapserver.h	/^    int minfeaturesize; \/* minimum feature size (in pixels) to shape *\/$/;"	m	struct:classObj
minfeaturesize	Topography/shapelib/mapserver.h	/^    int minfeaturesize; \/* minimum feature size (in pixels) to shape *\/$/;"	m	struct:layerObj
mingeowidth	Topography/shapelib/mapserver.h	/^    double mingeowidth, maxgeowidth; \/* map width (in map units) at which the layer should be drawn *\/$/;"	m	struct:layerObj
minimum_control_height	Screen/Layout.cpp	/^  unsigned minimum_control_height = 20, maximum_control_height = 44;$/;"	m	namespace:Layout	file:
minimum_speed_to_force_flight_logging	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t minimum_speed_to_force_flight_logging; \/\/ (Knots)$/;"	m	struct:CAI302::Pilot
minincrement	Topography/shapelib/mapserver.h	/^    double    minincrement;$/;"	m	struct:__anon56
minlength	Topography/shapelib/mapserver.h	/^    int minlength;$/;"	m	struct:labelObj
minor_tick_size	Renderer/ChartRenderer.hpp	/^  int minor_tick_size;$/;"	m	class:ChartRenderer
minscale	Topography/shapelib/mapserver.h	/^    double minscale;$/;"	m	struct:__anon59
minscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:__anon42
minscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:classObj
minscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:labelObj
minscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:layerObj
minscaledenom	Topography/shapelib/mapserver.h	/^    double minscaledenom, maxscaledenom;$/;"	m	struct:styleObj
minsize	Topography/shapelib/mapserver.h	/^    double minsize, maxsize;$/;"	m	struct:styleObj
minsize	Topography/shapelib/mapserver.h	/^    int minsize, maxsize;$/;"	m	struct:labelObj
minsubdivides	Topography/shapelib/mapserver.h	/^    double    minsubdivides;$/;"	m	struct:__anon56
mintemplate	Topography/shapelib/mapserver.h	/^    char *mintemplate, *maxtemplate;$/;"	m	struct:__anon42
minute	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
minute	Time/BrokenTime.hpp	/^  uint8_t minute;$/;"	m	struct:BrokenTime
minute	Weather/ParsedMETAR.hpp	/^  uint8_t hour, minute;$/;"	m	struct:ParsedMETAR
minute_clock	Engine/Task/Computer/WindowStatsComputer.hpp	/^  DeltaTime minute_clock;$/;"	m	class:WindowStatsComputer
minutes	Math/Angle.hpp	/^    unsigned degrees, minutes, seconds;$/;"	m	struct:Angle::DMS
minvalue	Topography/shapelib/mapserver.h	/^    double minvalue;$/;"	m	struct:styleObj
minver	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t minver;$/;"	m	struct:__anon108
minwidth	Topography/shapelib/mapserver.h	/^    double minwidth, maxwidth;$/;"	m	struct:styleObj
minx	Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon75
minx	Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon65
miny	Topography/shapelib/mapprimitive.h	/^  double minx, miny, maxx, maxy;$/;"	m	struct:__anon75
miny	Topography/shapelib/mapserver.h	/^  double minx,miny,maxx,maxy,advance;$/;"	m	struct:__anon65
misc	Input/InputConfig.hpp	/^    const TCHAR *misc;$/;"	m	struct:InputConfig::Event
mix_object	Audio/AndroidPCMPlayer.hpp	/^  SLES::Object mix_object;$/;"	m	class:AndroidPCMPlayer
mixed_constraints	Engine/Task/Factory/MixedTaskFactory.cpp	/^static constexpr TaskFactoryConstraints mixed_constraints = {$/;"	v	file:
mixer_data_source	Audio/PCMMixer.hpp	/^  PCMMixerDataSource mixer_data_source;$/;"	m	class:final
mixer_parameters	Dialogs/Device/Vega/MixerParameters.hpp	/^VegaParametersWidget::StaticParameter mixer_parameters[] = {$/;"	v
mo_file	Language/Language.cpp	/^const MOFile *mo_file;$/;"	v
mo_header	Language/MOFile.hpp	/^  struct mo_header {$/;"	s	class:MOFile
mo_loader	Language/LanguageGlue.cpp	/^static MOLoader *mo_loader;$/;"	v	file:
mo_table_entry	Language/MOFile.hpp	/^  struct mo_table_entry {$/;"	s	class:MOFile
modal_result	Form/Form.hpp	/^  int modal_result = 0;$/;"	m	class:WndForm
mode	Device/Driver/CAI302/Internal.hpp	/^  Mode mode;$/;"	m	class:CAI302Device
mode	Device/Driver/FLARM/Device.hpp	/^  Mode mode = Mode::UNKNOWN;$/;"	m	class:FlarmDevice
mode	Device/Driver/LX/Internal.hpp	/^  Mode mode;$/;"	m	class:LXDevice
mode	Device/Driver/LXERA/Internal.hpp	/^  Mode mode;$/;"	m	class:LXEraDevice
mode	Dialogs/Device/Vega/AudioParameters.hpp	/^  const char *mode;$/;"	m	class:VegaAudioParametersWidget
mode	Engine/Route/Config.hpp	/^  Mode mode;$/;"	m	struct:RoutePlannerConfig
mode	Engine/Task/TaskManager.hpp	/^  TaskType mode;$/;"	m	class:TaskManager
mode	IO/FileOutputStream.hxx	/^	Mode mode;$/;"	m	class:final
mode	Input/InputDefaults.cpp	/^  unsigned char mode, location;$/;"	m	struct:flat_label	file:
mode	Input/InputDefaults.cpp	/^  unsigned char mode;$/;"	m	struct:flat_event_map	file:
mode	Input/InputDefaults.cpp	/^  unsigned char mode;$/;"	m	struct:flat_gesture_map	file:
mode	Input/InputParser.cpp	/^  StaticString<1024> mode;$/;"	m	struct:EventBuilder	file:
mode	Topography/ShapeRenderer.hpp	/^  enum { NONE, OUTLINE, SOLID } mode;$/;"	m	class:ShapeRenderer	typeref:enum:ShapeRenderer::__anon89
mode	Topography/shapelib/mapserver.h	/^    int mode; \/* MS_QUERY_MODE *\/$/;"	m	struct:__anon40
mode_du	Screen/FB/mxcfb.h	/^	int mode_du;$/;"	m	struct:mxcfb_waveform_modes
mode_gc16	Screen/FB/mxcfb.h	/^	int mode_gc16;$/;"	m	struct:mxcfb_waveform_modes
mode_gc32	Screen/FB/mxcfb.h	/^	int mode_gc32;$/;"	m	struct:mxcfb_waveform_modes
mode_gc4	Screen/FB/mxcfb.h	/^	int mode_gc4;$/;"	m	struct:mxcfb_waveform_modes
mode_gc8	Screen/FB/mxcfb.h	/^	int mode_gc8;$/;"	m	struct:mxcfb_waveform_modes
mode_init	Screen/FB/mxcfb.h	/^	int mode_init;$/;"	m	struct:mxcfb_waveform_modes
mode_inside	Engine/Airspace/AirspaceWarningManager.cpp	/^  bool mode_inside;$/;"	m	class:final	file:
mode_optional_start	Renderer/TaskPointRenderer.hpp	/^  bool mode_optional_start;$/;"	m	class:TaskPointRenderer
model	Kobo/Model.cpp	/^  KoboModel model;$/;"	m	struct:__anon211	file:
model	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t model; \/* device model signature *\/$/;"	m	struct:__anon189
modeless	Form/Form.hpp	/^  bool modeless = false;$/;"	m	class:WndForm
modes	Input/InputConfig.hpp	/^  TrivialArray<StaticString<MAX_MODE_STRING>, MAX_MODE> modes;$/;"	m	struct:InputConfig
modified	Dialogs/Task/Manager/Internal.hpp	/^  bool modified;$/;"	m	class:final
modified	Dialogs/Task/OptionalStartsDialog.cpp	/^  bool modified = false;$/;"	m	class:OptionStartsWidget	file:
modified	Dialogs/Waypoint/Manager.cpp	/^  bool modified;$/;"	m	class:final	file:
modified	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  bool modified;$/;"	m	class:final	file:
modified	FLARM/List.hpp	/^  Validity modified;$/;"	m	struct:TrafficList
modified	Profile/Map.hpp	/^  bool modified;$/;"	m	class:ProfileMap
modify_serial	Engine/Contest/Solvers/TraceManager.hpp	/^  Serial modify_serial;$/;"	m	class:TraceManager
modify_serial	Engine/Trace/Trace.hpp	/^  Serial append_serial, modify_serial;$/;"	m	class:Trace
module	OS/DynamicLibrary.hpp	/^  HMODULE module;$/;"	m	class:DynamicLibrary
monday	Engine/Airspace/AirspaceActivity.hpp	/^    bool monday:1;$/;"	m	struct:AirspaceActivity::Days
monitor	Device/Descriptor.hpp	/^  DataHandler  *monitor;$/;"	m	class:final
monitor	Monitor/AirspaceWarningMonitor.cpp	/^  AirspaceWarningMonitor &monitor;$/;"	m	class:final	file:
monitor	Monitor/MatTaskMonitor.cpp	/^  MatTaskMonitor &monitor;$/;"	m	class:final	file:
monitor	Monitor/TaskAdvanceMonitor.cpp	/^  TaskAdvanceMonitor &monitor;$/;"	m	class:final	file:
monitor_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *manage_button, *monitor_button;$/;"	m	class:final	file:
mono	Screen/FreeType/Init.cpp	/^bool FreeType::mono = true;$/;"	m	class:FreeType	file:
mono	Terrain/jasper/jas_cm.h	/^	int mono;$/;"	m	struct:__anon98
monospace	Look/FontDescription.hpp	/^  bool monospace;$/;"	m	class:FontDescription
monospace_font_path	Screen/FreeType/Font.cpp	/^static AllocatedPath monospace_font_path = nullptr;$/;"	v	file:
month	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
month	Device/Driver/LX/LXN.hpp	/^    uint8_t day, month, year;$/;"	m	struct:LXN::Task
month	Device/Driver/LX/LXN.hpp	/^    uint8_t day, month;$/;"	m	struct:LXN::Date
month	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t month;$/;"	m	struct:__anon180
month	Time/BrokenDate.hpp	/^  uint8_t month;$/;"	m	struct:BrokenDate
month2	Device/Driver/LX/LXN.hpp	/^    uint8_t day2, month2, year2;$/;"	m	struct:LXN::Task
monthinput	Device/Driver/LX/Protocol.hpp	/^    uint8_t monthinput;$/;"	m	struct:LX::Declaration
monthinput	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t monthinput;$/;"	m	struct:LXEra::Declaration
monthuser	Device/Driver/LX/Protocol.hpp	/^    uint8_t monthuser;$/;"	m	struct:LX::Declaration
monthuser	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t monthuser;$/;"	m	struct:LXEra::Declaration
more	Dialogs/Task/Manager/TaskListPanel.cpp	/^  bool more;$/;"	m	class:final	file:
more_button	Dialogs/Task/Manager/TaskListPanel.cpp	/^  Button *more_button;$/;"	m	class:final	file:
morning_twilight	Math/SunEphemeris.hpp	/^    double day_length, morning_twilight, evening_twilight;$/;"	m	struct:SunEphemeris::Result
mountain_pass_icon	Look/WaypointLook.hpp	/^  MaskedIcon mountain_pass_icon;$/;"	m	struct:WaypointLook
mountain_top_icon	Look/WaypointLook.hpp	/^  MaskedIcon mountain_top_icon, bridge_icon, obstacle_icon;$/;"	m	struct:WaypointLook
mouse	Event/Poll/InputQueue.hpp	/^  LinuxInputDevice mouse;$/;"	m	class:DisplayOrientation
mouse_down_clock	MapWindow/GlueMapWindow.hpp	/^  PeriodClock mouse_down_clock;$/;"	m	class:GlueMapWindow
move	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD move:1;$/;"	m	struct:IMI::TObservationZone
move	Dialogs/Weather/RASPDialog.cpp	/^     rasp(std::move(_rasp)) {}$/;"	f	class:final
move	Event/DelayedNotify.hpp	/^    :delay(_delay), callback(std::move(_callback)) {}$/;"	f	class:final
move	Event/Notify.cpp	/^  :callback(std::move(_callback))$/;"	f
move	Event/PeriodicTimer.hpp	/^    :callback(std::move(_callback)) {}$/;"	f	class:final
move	Event/Poll/Timer.cpp	/^   callback(std::move(_callback)) {}$/;"	f
move	Event/Timer.hpp	/^  explicit Timer(Callback &&_callback) noexcept:callback(std::move(_callback)) {}$/;"	f	class:final
move	IO/FileReader.hxx	/^		 fd(std::move(other.fd)) {}$/;"	f	class:final
move_down_button	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *move_up_button, *move_down_button;$/;"	m	class:PageListWidget	file:
move_in_view	Renderer/TextInBox.hpp	/^  bool move_in_view = false;$/;"	v
move_up_button	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  Button *move_up_button, *move_down_button;$/;"	m	class:PageListWidget	file:
moved	Event/Poll/Linux/MergeMouse.hpp	/^  bool moved = false, pressed = false, released = false;$/;"	m	class:final
movement_detected	Interface.cpp	/^bool CommonInterface::Private::movement_detected = false;$/;"	m	class:CommonInterface::Private	file:
moving	Event/Poll/Linux/Input.hpp	/^  bool moving;$/;"	m	class:final
moving_at	Computer/FlyingComputer.hpp	/^  GeoPoint moving_at;$/;"	m	class:FlyingComputer
moving_clock	Computer/FlyingComputer.hpp	/^  StateClock<30, 5> moving_clock;$/;"	m	class:FlyingComputer
moving_since	Computer/FlyingComputer.hpp	/^  double moving_since;$/;"	m	class:FlyingComputer
mps	Terrain/jasper/jpc/jpc_mqcod.h	/^	int mps;$/;"	m	struct:__anon134
mps	Terrain/jasper/jpc/jpc_mqcod.h	/^	int mps;$/;"	m	struct:jpc_mqstate_s
mqdec	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_mqdec_t *mqdec;$/;"	m	struct:__anon145
mrCancel	Form/Form.hpp	/^  mrCancel = 3,$/;"	e	enum:ModalResult
mrOK	Form/Form.hpp	/^  mrOK = 2,$/;"	e	enum:ModalResult
msAddLine	Topography/shapelib/mapprimitive.c	/^int msAddLine(shapeObj *p, lineObj *new_line)$/;"	f
msAddLineDirectly	Topography/shapelib/mapprimitive.c	/^int msAddLineDirectly(shapeObj *p, lineObj *new_line)$/;"	f
msAddPointToLine	Topography/shapelib/mapprimitive.c	/^int msAddPointToLine(lineObj *line, pointObj *point )$/;"	f
msAllocBitArray	Topography/shapelib/mapbits.c	/^ms_bitarray msAllocBitArray(int numbits)$/;"	f
msBuildPath	Topography/shapelib/mapstring.c	/^char *msBuildPath(char *pszReturnPath, const char *abs_path, const char *path)$/;"	f
msBuildPath3	Topography/shapelib/mapstring.c	/^char *msBuildPath3(char *pszReturnPath, const char *abs_path, const char *path1,const char *path2)$/;"	f
msCaseReplaceSubstring	Topography/shapelib/mapstring.c	/^char *msCaseReplaceSubstring(char *str, const char *old, const char *new)$/;"	f
msClipPolygonRect	Topography/shapelib/mapprimitive.c	/^void msClipPolygonRect(shapeObj *shape, rectObj rect)$/;"	f
msClipPolylineRect	Topography/shapelib/mapprimitive.c	/^void msClipPolylineRect(shapeObj *shape, rectObj rect)$/;"	f
msCommifyString	Topography/shapelib/mapstring.c	/^char *msCommifyString(char *str)$/;"	f
msComputeBounds	Topography/shapelib/mapprimitive.c	/^void msComputeBounds(shapeObj *shape)$/;"	f
msConvertWideStringToUTF8	Topography/shapelib/mapstring.c	/^char* msConvertWideStringToUTF8 (const wchar_t* string, const char* encoding)$/;"	f
msCopyShape	Topography/shapelib/mapprimitive.c	/^int msCopyShape(shapeObj *from, shapeObj *to)$/;"	f
msCountChars	Topography/shapelib/mapstring.c	/^int msCountChars(char *str, char ch)$/;"	f
msCreateTree	Topography/shapelib/maptree.c	/^treeObj *msCreateTree(shapefileObj *shapefile, int maxdepth)$/;"	f
msDBFAddField	Topography/shapelib/mapxbase.c	/^int msDBFAddField(DBFHandle psDBF, const char * pszFieldName, DBFFieldType eType, int nWidth, int nDecimals )$/;"	f
msDBFClose	Topography/shapelib/mapxbase.c	/^void  msDBFClose(DBFHandle psDBF)$/;"	f
msDBFCreate	Topography/shapelib/mapxbase.c	/^DBFHandle msDBFCreate( const char * pszFilename )$/;"	f
msDBFGetFieldCount	Topography/shapelib/mapxbase.c	/^int msDBFGetFieldCount( DBFHandle psDBF )$/;"	f
msDBFGetFieldInfo	Topography/shapelib/mapxbase.c	/^DBFFieldType msDBFGetFieldInfo( DBFHandle psDBF, int iField, char * pszFieldName, int * pnWidth, int * pnDecimals )$/;"	f
msDBFGetItemIndex	Topography/shapelib/mapxbase.c	/^int msDBFGetItemIndex(DBFHandle dbffile, char *name)$/;"	f
msDBFGetItemIndexes	Topography/shapelib/mapxbase.c	/^int *msDBFGetItemIndexes(DBFHandle dbffile, char **items, int numitems)$/;"	f
msDBFGetItems	Topography/shapelib/mapxbase.c	/^char **msDBFGetItems(DBFHandle dbffile)$/;"	f
msDBFGetRecordCount	Topography/shapelib/mapxbase.c	/^int msDBFGetRecordCount( DBFHandle psDBF )$/;"	f
msDBFGetValueList	Topography/shapelib/mapxbase.c	/^char **msDBFGetValueList(DBFHandle dbffile, int record, int *itemindexes, int numitems)$/;"	f
msDBFGetValues	Topography/shapelib/mapxbase.c	/^char **msDBFGetValues(DBFHandle dbffile, int record)$/;"	f
msDBFOpen	Topography/shapelib/mapxbase.c	/^DBFHandle msDBFOpen(struct zzip_dir *zdir,  const char * pszFilename, const char * pszAccess )$/;"	f
msDBFReadAttribute	Topography/shapelib/mapxbase.c	/^static const char *msDBFReadAttribute(DBFHandle psDBF, int hEntity, int iField )$/;"	f	file:
msDBFReadDoubleAttribute	Topography/shapelib/mapxbase.c	/^double  msDBFReadDoubleAttribute( DBFHandle psDBF, int iRecord, int iField )$/;"	f
msDBFReadIntegerAttribute	Topography/shapelib/mapxbase.c	/^int msDBFReadIntegerAttribute( DBFHandle psDBF, int iRecord, int iField )$/;"	f
msDBFReadStringAttribute	Topography/shapelib/mapxbase.c	/^const char *msDBFReadStringAttribute( DBFHandle psDBF, int iRecord, int iField )$/;"	f
msDBFWriteAttribute	Topography/shapelib/mapxbase.c	/^static int msDBFWriteAttribute(DBFHandle psDBF, int hEntity, int iField, void * pValue )$/;"	f	file:
msDBFWriteDoubleAttribute	Topography/shapelib/mapxbase.c	/^int msDBFWriteDoubleAttribute( DBFHandle psDBF, int iRecord, int iField, double dValue )$/;"	f
msDBFWriteIntegerAttribute	Topography/shapelib/mapxbase.c	/^int msDBFWriteIntegerAttribute( DBFHandle psDBF, int iRecord, int iField, int nValue )$/;"	f
msDBFWriteStringAttribute	Topography/shapelib/mapxbase.c	/^int msDBFWriteStringAttribute( DBFHandle psDBF, int iRecord, int iField, const char * pszValue )$/;"	f
msDebug	Topography/shapelib/maperror.h	/^msDebug(const char *fmt, ...)$/;"	f
msDecodeHTMLEntities	Topography/shapelib/mapstring.c	/^void msDecodeHTMLEntities(const char *string)$/;"	f
msDestroyTree	Topography/shapelib/maptree.c	/^void msDestroyTree(treeObj *tree)$/;"	f
msDistancePointToPoint	Topography/shapelib/mapsearch.c	/^double msDistancePointToPoint(pointObj *a, pointObj *b)$/;"	f
msDistancePointToSegment	Topography/shapelib/mapsearch.c	/^double msDistancePointToSegment(pointObj *p, pointObj *a, pointObj *b)$/;"	f
msDistancePointToShape	Topography/shapelib/mapsearch.c	/^double msDistancePointToShape(pointObj *point, shapeObj *shape)$/;"	f
msDistanceSegmentToSegment	Topography/shapelib/mapsearch.c	/^double msDistanceSegmentToSegment(pointObj *pa, pointObj *pb, pointObj *pc, pointObj *pd)$/;"	f
msDistanceShapeToShape	Topography/shapelib/mapsearch.c	/^double msDistanceShapeToShape(shapeObj *shape1, shapeObj *shape2)$/;"	f
msDoubleToString	Topography/shapelib/mapstring.c	/^char *msDoubleToString(double value, int force_f)$/;"	f
msEncodeChar	Topography/shapelib/mapstring.c	/^int msEncodeChar(const char c)$/;"	f
msEncodeHTMLEntities	Topography/shapelib/mapstring.c	/^char *msEncodeHTMLEntities(const char *string)$/;"	f
msEncodeUrl	Topography/shapelib/mapstring.c	/^char *msEncodeUrl(const char *data)$/;"	f
msEncodeUrlExcept	Topography/shapelib/mapstring.c	/^char *msEncodeUrlExcept(const char *data, const char except)$/;"	f
msEscapeJSonString	Topography/shapelib/mapstring.c	/^char* msEscapeJSonString(const char* pszJSonString)$/;"	f
msFilterTreeSearch	Topography/shapelib/maptree.c	/^void msFilterTreeSearch(shapefileObj *shp, ms_bitarray status, rectObj search_rect)$/;"	f
msFlipBit	Topography/shapelib/mapbits.c	/^void msFlipBit(ms_bitarray array, int index)$/;"	f
msFree	Topography/shapelib/mapalloc.c	/^void msFree(void *p)$/;"	f
msFree	Topography/shapelib/mapserver.h	2184;"	d
msFreeCharArray	Topography/shapelib/mapalloc.c	/^void msFreeCharArray(char **array, int num_items)$/;"	f
msFreeLabelPathObj	Topography/shapelib/mapprimitive.c	/^void msFreeLabelPathObj(labelPathObj *path)$/;"	f
msFreeShape	Topography/shapelib/mapprimitive.c	/^void msFreeShape(shapeObj *shape)$/;"	f
msGetBit	Topography/shapelib/mapbits.c	/^int msGetBit(ms_const_bitarray array, int index)$/;"	f
msGetBitArraySize	Topography/shapelib/mapbits.c	/^size_t msGetBitArraySize(int numbits)$/;"	f
msGetEncodedString	Topography/shapelib/mapstring.c	/^char *msGetEncodedString(const char *string, const char *encoding)$/;"	f
msGetFriBidiEncodedString	Topography/shapelib/mapstring.c	/^char *msGetFriBidiEncodedString(const char *string, const char *encoding)$/;"	f
msGetInnerList	Topography/shapelib/mapprimitive.c	/^int *msGetInnerList(shapeObj *shape, int r, int *outerlist)$/;"	f
msGetNextBit	Topography/shapelib/mapbits.c	/^int msGetNextBit(ms_const_bitarray array, int i, int size)$/;"	f
msGetNextGlyph	Topography/shapelib/mapstring.c	/^int msGetNextGlyph(const char **in_ptr, char *out_string)$/;"	f
msGetNumGlyphs	Topography/shapelib/mapstring.c	/^int msGetNumGlyphs(const char *in_ptr)$/;"	f
msGetOuterList	Topography/shapelib/mapprimitive.c	/^int *msGetOuterList(shapeObj *shape)$/;"	f
msGetPath	Topography/shapelib/mapstring.c	/^char *msGetPath(const char *fn)$/;"	f
msGetPolygonArea	Topography/shapelib/mapprimitive.c	/^double msGetPolygonArea(shapeObj *p)$/;"	f
msGetPolygonCentroid	Topography/shapelib/mapprimitive.c	/^int msGetPolygonCentroid(shapeObj *p, pointObj *lp, double *miny, double *maxy)$/;"	f
msGetShapeRAMSize	Topography/shapelib/mapprimitive.c	/^int msGetShapeRAMSize(shapeObj* shape)$/;"	f
msGetUnicodeEntity	Topography/shapelib/mapstring.c	/^int msGetUnicodeEntity(const char *inptr, unsigned int *unicode)$/;"	f
msHashString	Topography/shapelib/mapstring.c	/^char *msHashString(const char *pszStr)$/;"	f
msHexToInt	Topography/shapelib/mapstring.c	/^int msHexToInt(char *hex)$/;"	f
msInitShape	Topography/shapelib/mapprimitive.c	/^void msInitShape(shapeObj *shape)$/;"	f
msIntToString	Topography/shapelib/mapstring.c	/^char *msIntToString(int value)$/;"	f
msIntersectMultipointPolygon	Topography/shapelib/mapsearch.c	/^int msIntersectMultipointPolygon(shapeObj *multipoint, shapeObj *poly)$/;"	f
msIntersectPointPolygon	Topography/shapelib/mapsearch.c	/^int msIntersectPointPolygon(pointObj *point, shapeObj *poly)$/;"	f
msIntersectPolygons	Topography/shapelib/mapsearch.c	/^int msIntersectPolygons(shapeObj *p1, shapeObj *p2)$/;"	f
msIntersectPolylinePolygon	Topography/shapelib/mapsearch.c	/^int msIntersectPolylinePolygon(shapeObj *line, shapeObj *poly)$/;"	f
msIntersectPolylines	Topography/shapelib/mapsearch.c	/^int msIntersectPolylines(shapeObj *line1, shapeObj *line2)$/;"	f
msIntersectSegments	Topography/shapelib/mapsearch.c	/^int msIntersectSegments(const pointObj *a, const pointObj *b, const pointObj *c, const pointObj *d)   \/* from comp.graphics.alogorithms FAQ *\/$/;"	f
msIsDegenerateShape	Topography/shapelib/mapprimitive.c	/^int msIsDegenerateShape(shapeObj *shape)$/;"	f
msIsNan	Topography/shapelib/mapserver.h	338;"	d
msIsNan	Topography/shapelib/mapserver.h	340;"	d
msIsOuterRing	Topography/shapelib/mapprimitive.c	/^int msIsOuterRing(shapeObj *shape, int r)$/;"	f
msIsXMLTagValid	Topography/shapelib/mapstring.c	/^int msIsXMLTagValid(const char *string)$/;"	f
msJoinStrings	Topography/shapelib/mapstring.c	/^char *msJoinStrings(char **array, int arrayLength, const char *delimeter)$/;"	f
msLayerEncodeShapeAttributes	Topography/shapelib/mapstring.c	/^int msLayerEncodeShapeAttributes( layerObj *layer, shapeObj *shape) {$/;"	f
msLineLabelPath	Topography/shapelib/mapprimitive.c	/^int msLineLabelPath(mapObj *map, imageObj *img, lineObj *p, textSymbolObj *ts, struct line_lengths *ll, struct label_follow_result *lfr, labelObj *label)$/;"	f
msLineLabelPoint	Topography/shapelib/mapprimitive.c	/^int msLineLabelPoint(mapObj *map, lineObj *p, textSymbolObj *ts, struct line_lengths *ll, struct label_auto_result *lar, labelObj *label, double resolutionfactor)$/;"	f
msLongToString	Topography/shapelib/mapstring.c	/^char *msLongToString(long value)$/;"	f
msMergeRect	Topography/shapelib/mapsearch.c	/^void msMergeRect(rectObj *a, rectObj *b)$/;"	f
msOffsetPointRelativeTo	Topography/shapelib/mapprimitive.c	/^void msOffsetPointRelativeTo(pointObj *point, layerObj *layer)$/;"	f
msOffsetShapeRelativeTo	Topography/shapelib/mapprimitive.c	/^void msOffsetShapeRelativeTo(shapeObj *shape, layerObj *layer)$/;"	f
msPointInPolygon	Topography/shapelib/mapsearch.c	/^int msPointInPolygon(pointObj *p, lineObj *c)$/;"	f
msPointInRect	Topography/shapelib/mapsearch.c	/^int msPointInRect(const pointObj *p, const rectObj *rect)$/;"	f
msPointToFormattedString	Topography/shapelib/mapprimitive.c	/^void msPointToFormattedString(pointObj *point, const char *format, char *buffer, int buffer_length)$/;"	f
msPolygonDirection	Topography/shapelib/mapsearch.c	/^int msPolygonDirection(lineObj *c)$/;"	f
msPolygonLabelPoint	Topography/shapelib/mapprimitive.c	/^int msPolygonLabelPoint(shapeObj *p, pointObj *lp, double min_dimension)$/;"	f
msPolylineComputeLineSegments	Topography/shapelib/mapprimitive.c	/^void msPolylineComputeLineSegments(shapeObj *shape, struct polyline_lengths *pll)$/;"	f
msPolylineLabelPath	Topography/shapelib/mapprimitive.c	/^int msPolylineLabelPath(mapObj *map, imageObj *image, shapeObj *p, textSymbolObj *ts, labelObj *label, struct label_follow_result *lfr)$/;"	f
msPolylineLabelPoint	Topography/shapelib/mapprimitive.c	/^int msPolylineLabelPoint(mapObj *map, shapeObj *p, textSymbolObj *ts, labelObj *label, struct label_auto_result *lar, double resolutionfactor)$/;"	f
msPrintShape	Topography/shapelib/mapprimitive.c	/^void msPrintShape(shapeObj *p)$/;"	f
msReadTree	Topography/shapelib/maptree.c	/^treeObj *msReadTree(char *filename, int debug)$/;"	f
msRectContained	Topography/shapelib/mapsearch.c	/^int msRectContained(const rectObj *a, const rectObj *b)$/;"	f
msRectIntersect	Topography/shapelib/mapsearch.c	/^int msRectIntersect( rectObj *a, const rectObj *b )$/;"	f
msRectOverlap	Topography/shapelib/mapsearch.c	/^int msRectOverlap(const rectObj *a, const rectObj *b)$/;"	f
msRectToFormattedString	Topography/shapelib/mapprimitive.c	/^void msRectToFormattedString(rectObj *rect, char *format, char *buffer, int buffer_length)$/;"	f
msRectToPolygon	Topography/shapelib/mapprimitive.c	/^void msRectToPolygon(rectObj rect, shapeObj *poly)$/;"	f
msReplaceChar	Topography/shapelib/mapstring.c	/^void msReplaceChar(char *str, char old, char new)$/;"	f
msReplaceSubstring	Topography/shapelib/mapstring.c	/^char *msReplaceSubstring(char *str, const char *old, const char *new)$/;"	f
msSHPClose	Topography/shapelib/mapshape.c	/^void msSHPClose(SHPHandle psSHP )$/;"	f
msSHPCreate	Topography/shapelib/mapshape.c	/^SHPHandle msSHPCreate( const char * pszLayer, int nShapeType )$/;"	f
msSHPDiskTreeClose	Topography/shapelib/maptree.c	/^void msSHPDiskTreeClose(SHPTreeHandle disktree)$/;"	f
msSHPDiskTreeOpen	Topography/shapelib/maptree.c	/^SHPTreeHandle msSHPDiskTreeOpen(struct zzip_dir *zdir, const char * pszTree,$/;"	f
msSHPGetInfo	Topography/shapelib/mapshape.c	/^void msSHPGetInfo(SHPHandle psSHP, int * pnEntities, int * pnShapeType )$/;"	f
msSHPLayerClose	Topography/shapelib/mapshape.c	/^int msSHPLayerClose(layerObj *layer)$/;"	f
msSHPLayerFreeItemInfo	Topography/shapelib/mapshape.c	/^void msSHPLayerFreeItemInfo(layerObj *layer)$/;"	f
msSHPLayerGetExtent	Topography/shapelib/mapshape.c	/^int msSHPLayerGetExtent(layerObj *layer, rectObj *extent)$/;"	f
msSHPLayerGetItems	Topography/shapelib/mapshape.c	/^int msSHPLayerGetItems(layerObj *layer)$/;"	f
msSHPLayerGetShape	Topography/shapelib/mapshape.c	/^int msSHPLayerGetShape(layerObj *layer, shapeObj *shape, resultObj *record)$/;"	f
msSHPLayerInitItemInfo	Topography/shapelib/mapshape.c	/^int msSHPLayerInitItemInfo(layerObj *layer)$/;"	f
msSHPLayerInitializeVirtualTable	Topography/shapelib/mapshape.c	/^int msSHPLayerInitializeVirtualTable(layerObj *layer)$/;"	f
msSHPLayerIsOpen	Topography/shapelib/mapshape.c	/^int msSHPLayerIsOpen(layerObj *layer)$/;"	f
msSHPLayerNextShape	Topography/shapelib/mapshape.c	/^int msSHPLayerNextShape(layerObj *layer, shapeObj *shape)$/;"	f
msSHPLayerOpen	Topography/shapelib/mapshape.c	/^int msSHPLayerOpen(layerObj *layer)$/;"	f
msSHPLayerSupportsCommonFilters	Topography/shapelib/mapshape.c	/^int msSHPLayerSupportsCommonFilters(layerObj *layer)$/;"	f
msSHPLayerWhichShapes	Topography/shapelib/mapshape.c	/^int msSHPLayerWhichShapes(layerObj *layer, rectObj rect, int isQuery)$/;"	f
msSHPOpen	Topography/shapelib/mapshape.c	/^SHPHandle msSHPOpen(struct zzip_dir *zdir, const char * pszLayer, const char * pszAccess )$/;"	f
msSHPPassThroughFieldDefinitions	Topography/shapelib/mapshape.c	/^static void msSHPPassThroughFieldDefinitions( layerObj *layer, DBFHandle hDBF )$/;"	f	file:
msSHPReadAllocateBuffer	Topography/shapelib/mapshape.c	/^static int msSHPReadAllocateBuffer( SHPHandle psSHP, int hEntity, const char* pszCallingFunction)$/;"	f	file:
msSHPReadBounds	Topography/shapelib/mapshape.c	/^int msSHPReadBounds( SHPHandle psSHP, int hEntity, rectObj *padBounds)$/;"	f
msSHPReadPoint	Topography/shapelib/mapshape.c	/^int msSHPReadPoint( SHPHandle psSHP, int hEntity, pointObj *point )$/;"	f
msSHPReadShape	Topography/shapelib/mapshape.c	/^void msSHPReadShape( SHPHandle psSHP, int hEntity, shapeObj *shape )$/;"	f
msSHPWritePoint	Topography/shapelib/mapshape.c	/^int msSHPWritePoint(SHPHandle psSHP, pointObj *point )$/;"	f
msSHPWriteShape	Topography/shapelib/mapshape.c	/^int msSHPWriteShape(SHPHandle psSHP, shapeObj *shape )$/;"	f
msSHXLoadAll	Topography/shapelib/mapshape.c	/^int msSHXLoadAll( SHPHandle psSHP )$/;"	f
msSHXLoadPage	Topography/shapelib/mapshape.c	/^int msSHXLoadPage( SHPHandle psSHP, int shxBufferPage )$/;"	f
msSHXReadOffset	Topography/shapelib/mapshape.c	/^int msSHXReadOffset( SHPHandle psSHP, int hEntity )$/;"	f
msSHXReadSize	Topography/shapelib/mapshape.c	/^int msSHXReadSize( SHPHandle psSHP, int hEntity )$/;"	f
msSearchDiskTree	Topography/shapelib/maptree.c	/^ms_bitarray msSearchDiskTree(struct zzip_dir *zdir, const char *filename, rectObj aoi, int debug, int numshapes)$/;"	f
msSearchTree	Topography/shapelib/maptree.c	/^ms_bitarray msSearchTree(const treeObj *tree, rectObj aoi)$/;"	f
msSetAllBits	Topography/shapelib/mapbits.c	/^void msSetAllBits(ms_bitarray array, int numbits, int value)$/;"	f
msSetBit	Topography/shapelib/mapbits.c	/^void msSetBit(ms_bitarray array, int index, int value)$/;"	f
msSetError	Topography/shapelib/maperror.h	/^msSetError(int code, const char *message, const char *routine, ...)$/;"	f
msShapeDeleteLine	Topography/shapelib/mapprimitive.c	/^void msShapeDeleteLine( shapeObj *shape, int line )$/;"	f
msShapeFromWKT	Topography/shapelib/mapprimitive.c	/^shapeObj *msShapeFromWKT(const char *string)$/;"	f
msShapeToWKT	Topography/shapelib/mapprimitive.c	/^char *msShapeToWKT(shapeObj *shape)$/;"	f
msShapefileClose	Topography/shapelib/mapshape.c	/^void msShapefileClose(shapefileObj *shpfile)$/;"	f
msShapefileCreate	Topography/shapelib/mapshape.c	/^int msShapefileCreate(shapefileObj *shpfile, char *filename, int type)$/;"	f
msShapefileOpen	Topography/shapelib/mapshape.c	/^int msShapefileOpen(shapefileObj *shpfile, const char *mode, struct zzip_dir *zdir, const char *filename, int log_failures)$/;"	f
msShapefileWhichShapes	Topography/shapelib/mapshape.c	/^int msShapefileWhichShapes(shapefileObj *shpfile, struct zzip_dir *zdir, rectObj rect, int debug)$/;"	f
msSmallMalloc	Topography/shapelib/mapserver.h	/^  static inline void *msSmallMalloc( size_t nSize ) {$/;"	f
msSquareDistancePointToPoint	Topography/shapelib/mapsearch.c	/^double msSquareDistancePointToPoint(pointObj *a, pointObj *b)$/;"	f
msSquareDistancePointToSegment	Topography/shapelib/mapsearch.c	/^double msSquareDistancePointToSegment(pointObj *p, pointObj *a, pointObj *b)$/;"	f
msSquareDistancePointToShape	Topography/shapelib/mapsearch.c	/^double msSquareDistancePointToShape(pointObj *point, shapeObj *shape)$/;"	f
msStrdup	Topography/shapelib/mapstring.c	/^char *msStrdup(const char * pszString)$/;"	f
msStringBuffer	Topography/shapelib/mapserver.h	/^  typedef struct msStringBuffer msStringBuffer;$/;"	t	typeref:struct:msStringBuffer
msStringBuffer	Topography/shapelib/mapstring.c	/^struct msStringBuffer$/;"	s	file:
msStringBufferAlloc	Topography/shapelib/mapstring.c	/^msStringBuffer* msStringBufferAlloc(void)$/;"	f
msStringBufferAppend	Topography/shapelib/mapstring.c	/^int msStringBufferAppend(msStringBuffer* sb, const char* pszAppendedString)$/;"	f
msStringBufferFree	Topography/shapelib/mapstring.c	/^void msStringBufferFree(msStringBuffer* sb)$/;"	f
msStringBufferGetString	Topography/shapelib/mapstring.c	/^const char* msStringBufferGetString(msStringBuffer* sb)$/;"	f
msStringBufferReleaseStringAndFree	Topography/shapelib/mapstring.c	/^char* msStringBufferReleaseStringAndFree(msStringBuffer* sb)$/;"	f
msStringChop	Topography/shapelib/mapstring.c	/^char *msStringChop(char *string)$/;"	f
msStringConcatenate	Topography/shapelib/mapstring.c	/^char *msStringConcatenate(char *pszDest, const char *pszSrc)$/;"	f
msStringEscape	Topography/shapelib/mapstring.c	/^char* msStringEscape( const char * pszString )$/;"	f
msStringFirstCap	Topography/shapelib/mapstring.c	/^void msStringFirstCap(char *string)$/;"	f
msStringInArray	Topography/shapelib/mapstring.c	/^int msStringInArray( const char * pszString, char **array, int numelements)$/;"	f
msStringInitCap	Topography/shapelib/mapstring.c	/^void msStringInitCap(char *string)$/;"	f
msStringIsInteger	Topography/shapelib/mapstring.c	/^int msStringIsInteger(const char *string)$/;"	f
msStringSplit	Topography/shapelib/mapstring.c	/^char **msStringSplit(const char *string, char ch, int *num_tokens)$/;"	f
msStringSplitComplex	Topography/shapelib/mapstring.c	/^char ** msStringSplitComplex( const char * pszString,$/;"	f
msStringToLower	Topography/shapelib/mapstring.c	/^void msStringToLower(char *string)$/;"	f
msStringToUpper	Topography/shapelib/mapstring.c	/^void msStringToUpper(char *string)$/;"	f
msStringTokenize	Topography/shapelib/mapstring.c	/^char **msStringTokenize( const char *pszLine, const char *pszDelim,$/;"	f
msStringTrim	Topography/shapelib/mapstring.c	/^void msStringTrim(char *str)$/;"	f
msStringTrimBlanks	Topography/shapelib/mapstring.c	/^void msStringTrimBlanks(char *string)$/;"	f
msStringTrimEOL	Topography/shapelib/mapstring.c	/^void msStringTrimEOL(char *string)$/;"	f
msStringTrimLeft	Topography/shapelib/mapstring.c	/^char *msStringTrimLeft(char *string)$/;"	f
msStripPath	Topography/shapelib/mapstring.c	/^char *msStripPath(char *fn)$/;"	f
msTileIndexAbsoluteDir	Topography/shapelib/mapshape.c	/^void msTileIndexAbsoluteDir(char *tiFileAbsDir, layerObj *layer)$/;"	f
msTiledSHPClose	Topography/shapelib/mapshape.c	/^void msTiledSHPClose(layerObj *layer)$/;"	f	file:
msTiledSHPCloseVT	Topography/shapelib/mapshape.c	/^int msTiledSHPCloseVT(layerObj *layer)$/;"	f
msTiledSHPGetShape	Topography/shapelib/mapshape.c	/^int msTiledSHPGetShape(layerObj *layer, shapeObj *shape, resultObj *record)$/;"	f	file:
msTiledSHPLayerFreeItemInfo	Topography/shapelib/mapshape.c	/^void msTiledSHPLayerFreeItemInfo(layerObj *layer)$/;"	f
msTiledSHPLayerGetExtent	Topography/shapelib/mapshape.c	/^int msTiledSHPLayerGetExtent(layerObj *layer, rectObj *extent)$/;"	f
msTiledSHPLayerGetItems	Topography/shapelib/mapshape.c	/^int msTiledSHPLayerGetItems(layerObj *layer)$/;"	f
msTiledSHPLayerInfo	Topography/shapelib/mapshape.h	/^  } msTiledSHPLayerInfo;$/;"	t	typeref:struct:__anon86
msTiledSHPLayerInitItemInfo	Topography/shapelib/mapshape.c	/^int msTiledSHPLayerInitItemInfo(layerObj *layer)$/;"	f
msTiledSHPLayerInitializeVirtualTable	Topography/shapelib/mapshape.c	/^int msTiledSHPLayerInitializeVirtualTable(layerObj *layer)$/;"	f
msTiledSHPLayerIsOpen	Topography/shapelib/mapshape.c	/^int msTiledSHPLayerIsOpen(layerObj *layer)$/;"	f
msTiledSHPLayerSupportsCommonFilters	Topography/shapelib/mapshape.c	/^int msTiledSHPLayerSupportsCommonFilters(layerObj *layer)$/;"	f
msTiledSHPLoadEntry	Topography/shapelib/mapshape.c	/^static const char* msTiledSHPLoadEntry(layerObj *layer, int i, char* tilename, size_t tilenamesize)$/;"	f	file:
msTiledSHPNextShape	Topography/shapelib/mapshape.c	/^int msTiledSHPNextShape(layerObj *layer, shapeObj *shape)$/;"	f	file:
msTiledSHPOpenFile	Topography/shapelib/mapshape.c	/^int msTiledSHPOpenFile(layerObj *layer)$/;"	f	file:
msTiledSHPTryOpen	Topography/shapelib/mapshape.c	/^int msTiledSHPTryOpen(shapefileObj *shpfile, layerObj *layer, char *tiFileAbsDir, const char *filename)$/;"	f	file:
msTiledSHPWhichShapes	Topography/shapelib/mapshape.c	/^int msTiledSHPWhichShapes(layerObj *layer, rectObj rect, int isQuery)$/;"	f	file:
msTransformPixelToShape	Topography/shapelib/mapprimitive.c	/^void msTransformPixelToShape(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShape	Topography/shapelib/mapprimitive.c	/^void  msTransformShape(shapeObj *shape, rectObj extent, double cellsize, imageObj *image)$/;"	f
msTransformShapeSimplify	Topography/shapelib/mapprimitive.c	/^void msTransformShapeSimplify(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShapeToPixelDoublePrecision	Topography/shapelib/mapprimitive.c	/^void msTransformShapeToPixelDoublePrecision(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShapeToPixelRound	Topography/shapelib/mapprimitive.c	/^void msTransformShapeToPixelRound(shapeObj *shape, rectObj extent, double cellsize)$/;"	f
msTransformShapeToPixelSnapToGrid	Topography/shapelib/mapprimitive.c	/^void msTransformShapeToPixelSnapToGrid(shapeObj *shape, rectObj extent, double cellsize, double grid_resolution)$/;"	f
msTreeTrim	Topography/shapelib/maptree.c	/^void msTreeTrim(treeObj *tree)$/;"	f
msTryBuildPath	Topography/shapelib/mapstring.c	/^char *msTryBuildPath(char *szReturnPath, const char *abs_path, const char *path)$/;"	f
msTryBuildPath3	Topography/shapelib/mapstring.c	/^char *msTryBuildPath3(char *szReturnPath, const char *abs_path, const char *path1, const char *path2)$/;"	f
msWriteTree	Topography/shapelib/maptree.c	/^int msWriteTree(treeObj *tree, char *filename, int B_order)$/;"	f
ms_bitarray	Topography/shapelib/mapserver.h	/^typedef ms_uint32 *     ms_bitarray;$/;"	t
ms_const_bitarray	Topography/shapelib/mapserver.h	/^typedef const ms_uint32 *ms_const_bitarray;$/;"	t
ms_int32	Topography/shapelib/mapserver.h	/^typedef int             ms_int32;$/;"	t
ms_int32	Topography/shapelib/mapserver.h	/^typedef int32_t         ms_int32;$/;"	t
ms_int32	Topography/shapelib/mapserver.h	/^typedef long            ms_int32;$/;"	t
ms_uint32	Topography/shapelib/mapserver.h	/^typedef uint32_t        ms_uint32;$/;"	t
ms_uint32	Topography/shapelib/mapserver.h	/^typedef unsigned int    ms_uint32;$/;"	t
ms_uint32	Topography/shapelib/mapserver.h	/^typedef unsigned long   ms_uint32;$/;"	t
msg	Event/Windows/Event.hpp	/^  MSG msg;$/;"	m	struct:Event
msgID	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE msgID, parameter1;$/;"	m	struct:IMI::TMsg
mtime	IO/FileCache.cpp	/^  uint64_t mtime;$/;"	m	struct:FileInfo	file:
multi	Net/HTTP/Multi.hpp	/^    CURLM *multi;$/;"	m	class:Net::CurlMulti
multi	Net/HTTP/Session.hpp	/^    CurlMulti multi;$/;"	m	class:Net::Session
multi_draw_arrays	Screen/OpenGL/Dynamic.cpp	/^  PFNGLMULTIDRAWARRAYSEXTPROC multi_draw_arrays;$/;"	m	namespace:GLExt	file:
multi_draw_elements	Screen/OpenGL/Dynamic.cpp	/^  PFNGLMULTIDRAWELEMENTSEXTPROC multi_draw_elements;$/;"	m	namespace:GLExt	file:
multipointObj	Topography/shapelib/mapprimitive.h	/^typedef lineObj multipointObj;$/;"	t
mutate_button	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button edit_button, mutate_button;$/;"	m	class:final	file:
mutex	Android/DownloadManager.hpp	/^  Mutex mutex;$/;"	m	class:AndroidDownloadManager
mutex	Audio/AndroidPCMPlayer.hpp	/^  Mutex mutex;$/;"	m	class:AndroidPCMPlayer
mutex	Audio/VarioSynthesiser.hpp	/^  Mutex mutex;$/;"	m	class:final
mutex	Blackboard/DeviceBlackboard.hpp	/^  Mutex mutex;$/;"	m	class:DeviceBlackboard
mutex	CalculationThread.hpp	/^  Mutex mutex;$/;"	m	class:final
mutex	Computer/TraceComputer.hpp	/^  mutable Mutex mutex;$/;"	m	class:TraceComputer
mutex	Device/Descriptor.hpp	/^  mutable Mutex mutex;$/;"	m	class:final
mutex	Device/Driver/LX/Internal.hpp	/^  Mutex mutex;$/;"	m	class:LXDevice
mutex	Device/Driver/LXERA/Internal.hpp	/^  Mutex mutex;$/;"	m	class:LXEraDevice
mutex	Device/Port/BufferedPort.hpp	/^  Mutex mutex;$/;"	m	class:BufferedPort
mutex	Device/SettingsMap.hpp	/^  Mutex mutex;$/;"	m	class:DeviceSettingsMap
mutex	Dialogs/Device/PortMonitor.cpp	/^  Mutex mutex;$/;"	m	class:final	file:
mutex	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  Mutex mutex;$/;"	m	class:final	file:
mutex	Dialogs/DownloadFilePicker.cpp	/^  mutable Mutex mutex;$/;"	m	class:final	file:
mutex	Dialogs/FileManager.cpp	/^  mutable Mutex mutex;$/;"	m	class:ManagedFileListWidget	file:
mutex	Event/Android/Queue.hpp	/^  Mutex mutex;$/;"	m	class:EventQueue
mutex	Event/Poll/Queue.hpp	/^  Mutex mutex;$/;"	m	class:final
mutex	Event/SDL/Queue.hpp	/^  Mutex mutex;$/;"	m	class:EventQueue
mutex	Event/Windows/Queue.hpp	/^  Mutex mutex;$/;"	m	class:EventQueue
mutex	FlightStatistics.hpp	/^  mutable Mutex mutex;$/;"	m	class:FlightStatistics
mutex	Logger/NMEALogger.cpp	/^  static Mutex mutex;$/;"	m	namespace:NMEALogger	file:
mutex	Operation/ThreadedOperationEnvironment.hpp	/^  mutable Mutex mutex;$/;"	m	class:ThreadedOperationEnvironment
mutex	PopupMessage.hpp	/^  Mutex mutex;$/;"	m	class:PopupMessage
mutex	Screen/DoubleBufferWindow.hpp	/^  mutable Mutex mutex;$/;"	m	class:DoubleBufferWindow
mutex	Terrain/Loader.hpp	/^  SharedMutex &mutex;$/;"	m	class:TerrainLoader
mutex	Thread/Guard.hpp	/^  mutable SharedMutex mutex;$/;"	m	class:Guard
mutex	Thread/Mutex.hxx	/^	Mutex &mutex;$/;"	m	class:ScopeUnlock
mutex	Thread/Mutex.hxx	/^	explicit ScopeUnlock(Mutex &_mutex) noexcept:mutex(_mutex) {$/;"	f	class:ScopeUnlock
mutex	Thread/StandbyThread.hpp	/^  Mutex mutex;$/;"	m	class:StandbyThread
mutex	Thread/SuspensibleThread.hpp	/^  Mutex mutex;$/;"	m	class:SuspensibleThread
mutex	Topography/TopographyFile.hpp	/^  mutable Mutex mutex;$/;"	m	class:TopographyFile
mutex	Tracking/SkyLines/Client.hpp	/^  mutable Mutex mutex;$/;"	m	class:SkyLinesTracking::Client
mutex	Tracking/SkyLines/Data.hpp	/^  mutable Mutex mutex;$/;"	m	struct:SkyLinesTracking::Data
mutexEventQueue	Input/InputQueue.cpp	/^static Mutex mutexEventQueue;$/;"	v	file:
mutex_settings	Device/Driver/BlueFly/Internal.hpp	/^  Mutex mutex_settings;$/;"	m	class:BlueFlyDevice
mxcfb_alt_buffer_data	Screen/FB/mxcfb.h	/^struct mxcfb_alt_buffer_data {$/;"	s
mxcfb_color_key	Screen/FB/mxcfb.h	/^struct mxcfb_color_key {$/;"	s
mxcfb_gamma	Screen/FB/mxcfb.h	/^struct mxcfb_gamma {$/;"	s
mxcfb_gbl_alpha	Screen/FB/mxcfb.h	/^struct mxcfb_gbl_alpha {$/;"	s
mxcfb_loc_alpha	Screen/FB/mxcfb.h	/^struct mxcfb_loc_alpha {$/;"	s
mxcfb_pos	Screen/FB/mxcfb.h	/^struct mxcfb_pos {$/;"	s
mxcfb_rect	Screen/FB/mxcfb.h	/^struct mxcfb_rect {$/;"	s
mxcfb_update_data	Screen/FB/mxcfb.h	/^struct mxcfb_update_data {$/;"	s
mxcfb_waveform_modes	Screen/FB/mxcfb.h	/^struct mxcfb_waveform_modes {$/;"	s
myalloc_	Terrain/jasper/jas_stream.h	/^	int myalloc_;$/;"	m	struct:__anon122
n	Engine/ThermalBand/ThermalSlice.hpp	/^     double n;$/;"	m	struct:ThermalSlice
nBottom	Topography/shapelib/mapserver.h	/^    int nBottom;$/;"	m	struct:__anon57
nBufSize	Topography/shapelib/mapshape.h	/^    int   nBufSize; \/* these used static vars in shape readers, moved to be thread-safe *\/$/;"	m	struct:__anon82
nCurrentRecord	Topography/shapelib/mapshape.h	/^    int   nCurrentRecord;$/;"	m	struct:__anon83
nDepth	Topography/shapelib/maptree.h	/^    ms_int32        nDepth;$/;"	m	struct:__anon88
nFields	Topography/shapelib/mapshape.h	/^    int   nFields;$/;"	m	struct:__anon83
nFileSize	Topography/shapelib/mapshape.h	/^    int   nFileSize;        \/* SHP file *\/$/;"	m	struct:__anon82
nFirst	XML/Parser.cpp	/^    bool nFirst;$/;"	m	struct:XML::Parser	file:
nHeaderLength	Topography/shapelib/mapshape.h	/^    int   nHeaderLength;$/;"	m	struct:__anon83
nIndex	XML/Parser.cpp	/^    unsigned nIndex;$/;"	m	struct:XML::Parser	file:
nLeft	Topography/shapelib/mapserver.h	/^    int nLeft;$/;"	m	struct:__anon57
nLists	Dialogs/dlgChecklist.cpp	/^static int nLists = 0;$/;"	v	file:
nMaxRecords	Topography/shapelib/mapshape.h	/^    int   nMaxRecords;$/;"	m	struct:__anon82
nPartMax	Topography/shapelib/mapshape.h	/^    int   nPartMax;$/;"	m	struct:__anon82
nProperties	Topography/shapelib/mapserver.h	/^      int nProperties;$/;"	m	struct:__anon63
nRecordLength	Topography/shapelib/mapshape.h	/^    unsigned int nRecordLength;$/;"	m	struct:__anon83
nRecords	Topography/shapelib/mapshape.h	/^    int   nRecords;$/;"	m	struct:__anon82
nRecords	Topography/shapelib/mapshape.h	/^    int   nRecords;$/;"	m	struct:__anon83
nRight	Topography/shapelib/mapserver.h	/^    int nRight;$/;"	m	struct:__anon57
nShapeType	Topography/shapelib/mapshape.h	/^    int   nShapeType;       \/* SHPT_* *\/$/;"	m	struct:__anon82
nShapes	Topography/shapelib/maptree.h	/^    ms_int32        nShapes;$/;"	m	struct:__anon88
nStringFieldLen	Topography/shapelib/mapshape.h	/^    int   nStringFieldLen;$/;"	m	struct:__anon83
nTop	Topography/shapelib/mapserver.h	/^    int nTop;$/;"	m	struct:__anon57
n_entries	Topography/shapelib/mapserver.h	/^     int n_entries;$/;"	m	struct:__anon60
n_failures	Device/Descriptor.hpp	/^  unsigned n_failures;$/;"	m	class:final
n_index	Computer/ThermalLocator.hpp	/^  unsigned n_index;$/;"	m	class:ThermalLocator
n_keyboards	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned n_pointers = 0, n_touch_screens = 0, n_keyboards = 0;$/;"	m	class:final
n_pages	PageSettings.hpp	/^  unsigned n_pages;$/;"	m	struct:PageSettings
n_pointers	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned n_pointers = 0, n_touch_screens = 0, n_keyboards = 0;$/;"	m	class:final
n_pointers	Event/Poll/Linux/MergeMouse.hpp	/^  unsigned n_pointers = 0;$/;"	m	class:final
n_points	Computer/ThermalLocator.hpp	/^  unsigned n_points;$/;"	m	class:ThermalLocator
n_points	Engine/Contest/Solvers/TraceManager.hpp	/^  unsigned n_points;$/;"	m	class:TraceManager
n_processing	Topography/shapelib/mapserver.h	/^    int n_processing;$/;"	m	struct:__anon64
n_pts	Math/Histogram.hpp	/^  unsigned n_pts;$/;"	m	class:Histogram
n_queries	Engine/Waypoint/Waypoints.cpp	/^unsigned n_queries = 0;$/;"	v
n_thermal	Cloud/Sender.hpp	/^  unsigned n_thermal = 0;$/;"	m	class:ThermalResponseSender
n_touch_screens	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned n_pointers = 0, n_touch_screens = 0, n_keyboards = 0;$/;"	m	class:final
n_traffic	Cloud/Sender.hpp	/^  unsigned n_traffic = 0;$/;"	m	class:TrafficResponseSender
n_visible	PopupMessage.hpp	/^  unsigned n_visible;$/;"	m	class:PopupMessage
name	Airspace/AirspaceParser.cpp	/^  tstring name;$/;"	m	struct:TempAirspaceType	file:
name	Device/Driver.hpp	/^  const TCHAR *name;$/;"	m	struct:DeviceRegister
name	Device/Driver/CAI302/Protocol.hpp	/^    char name[12];$/;"	m	struct:CAI302::Navpoint
name	Device/Driver/CAI302/Protocol.hpp	/^    char name[24];$/;"	m	struct:CAI302::Pilot
name	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR name[IMIDECL_WP_NAME_LENGTH];$/;"	m	struct:IMI::TWaypoint
name	Device/Driver/LX/LXN.hpp	/^    char name[12][9];$/;"	m	struct:LXN::Task
name	Device/Driver/LX/LXN.hpp	/^    char name[4];$/;"	m	struct:LXN::ExtensionDefinition
name	Device/Driver/Volkslogger/Database.hpp	/^    char name[14];$/;"	m	struct:Volkslogger::Route
name	Device/Driver/Volkslogger/Database.hpp	/^    char name[16];$/;"	m	struct:Volkslogger::Pilot
name	Device/Driver/Volkslogger/Database.hpp	/^    char name[6];$/;"	m	struct:Volkslogger::Waypoint
name	Device/Driver/Volkslogger/vlapi2.h	/^    char name[15];$/;"	m	struct:VLAPI_DATA::ROUTE
name	Device/Driver/Volkslogger/vlapi2.h	/^    char name[17];$/;"	m	struct:VLAPI_DATA::PILOT
name	Device/Driver/Volkslogger/vlapi2.h	/^    char name[7]; \/\/ name of waypoint, zero-ended C-string, max. 6 characters$/;"	m	struct:VLAPI_DATA::WPT
name	Device/Driver/Volkslogger/vlconv.cpp	/^  char name[7];$/;"	m	class:C2	file:
name	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^    std::string name;$/;"	m	struct:final::Item	file:
name	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const char *name;$/;"	m	struct:VegaParametersWidget::Parameter
name	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    const char *name;$/;"	m	struct:VegaParametersWidget::StaticParameter
name	Dialogs/FileManager.cpp	/^    StaticString<64u> name;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
name	Dialogs/Plane/PlaneListDialog.cpp	/^    StaticString<32> name;$/;"	m	struct:final::ListItem	file:
name	Dialogs/ProfileListDialog.cpp	/^    StaticString<32> name;$/;"	m	struct:final::ListItem	file:
name	Dialogs/Traffic/TrafficList.cpp	/^    tstring name;$/;"	m	struct:TrafficListWidget::Item	file:
name	Dialogs/Waypoint/WaypointList.cpp	/^  StaticString<WaypointFilter::NAME_LENGTH + 1> name;$/;"	m	struct:WaypointListDialogState	file:
name	Dialogs/Weather/MapOverlayWidget.cpp	/^    StaticString<80> name;$/;"	m	struct:final::Item	file:
name	Engine/Airspace/AbstractAirspace.hpp	/^  tstring name;$/;"	m	class:AbstractAirspace
name	Engine/Task/Ordered/OrderedTask.hpp	/^  StaticString<64> name;$/;"	m	class:final
name	Engine/Waypoint/Waypoint.hpp	/^  tstring name;$/;"	m	struct:Waypoint
name	FLARM/NameDatabase.hpp	/^    StaticString<21> name;$/;"	m	struct:FlarmNameDatabase::Record
name	FLARM/Traffic.hpp	/^  StaticString<10> name;$/;"	m	class:FlarmTraffic::AircraftType
name	GliderLink/Traffic.hpp	/^  StaticString<10> name;$/;"	m	struct:GliderLinkTraffic
name	IGC/IGCDeclaration.hpp	/^  NarrowString<256> name;$/;"	m	struct:IGCDeclarationTurnpoint
name	InfoBoxes/Content/Factory.cpp	/^  const TCHAR *name;$/;"	m	struct:MetaData	file:
name	InfoBoxes/InfoBoxSettings.hpp	/^    StaticString<32u> name;$/;"	m	struct:InfoBoxSettings::Panel
name	InfoBoxes/Panel/Panel.hpp	/^  const TCHAR *name;$/;"	m	struct:InfoBoxPanel
name	Input/InputKeys.cpp	/^  const TCHAR *name;$/;"	m	struct:string_to_key	file:
name	Kobo/ToolsDialog.cpp	/^  StaticString<32> name;$/;"	m	struct:ListItem	file:
name	Language/LanguageGlue.hpp	/^  const TCHAR *name;$/;"	m	struct:BuiltinLanguage
name	MapWindow/Items/MapItem.hpp	/^  StaticString<40> name;$/;"	m	struct:SkyLinesTrafficMapItem
name	Net/Option.hpp	/^  int name(const Protocol &p) const {$/;"	f	class:SendTimeoutS
name	OS/Args.hpp	/^  const char *name, *usage;$/;"	m	class:Args
name	Polar/PolarStore.hpp	/^    const TCHAR* name;   \/**< Name of the glider type *\/$/;"	m	struct:PolarStore::Item
name	Repository/AvailableFile.hpp	/^  std::string name;$/;"	m	struct:AvailableFile
name	Repository/FileRepository.cpp	/^  const char *name;$/;"	m	struct:AvailableFileNameComparator	file:
name	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t name;$/;"	m	struct:__anon190
name	Terrain/jasper/jas_image.h	/^	char *name;$/;"	m	struct:__anon127
name	Terrain/jasper/jas_tvp.h	/^	const char *name;$/;"	m	struct:__anon105
name	Terrain/jasper/jp2/jp2_cod.h	/^	const char *name;$/;"	m	struct:jp2_boxinfo_s
name	Terrain/jasper/jpc/jpc_cs.c	/^	const char *name;$/;"	m	struct:__anon156	file:
name	Thread/Thread.hpp	/^  const char *const name;$/;"	m	class:Thread
name	Topography/TopographyStore.cpp	/^  const char *name;$/;"	m	struct:__anon90	file:
name	Topography/shapelib/mapprimitive.h	/^  char *name;$/;"	m	struct:__anon80
name	Topography/shapelib/mapserver.h	/^     char *name;$/;"	m	struct:__anon60
name	Topography/shapelib/mapserver.h	/^    char *name; \/* should be unique *\/$/;"	m	struct:layerObj
name	Topography/shapelib/mapserver.h	/^    char *name; \/* should be unique within a layer *\/$/;"	m	struct:classObj
name	Topography/shapelib/mapserver.h	/^    char *name; \/* small identifier for naming etc. *\/$/;"	m	struct:mapObj
name	Topography/shapelib/mapserver.h	/^    char *name;$/;"	m	struct:__anon38
name	Topography/shapelib/mapserver.h	/^    char *name;$/;"	m	struct:__anon39
name	Units/Descriptor.hpp	/^  const TCHAR *name;$/;"	m	struct:UnitDescriptor
name	Waypoint/WaypointFilter.hpp	/^  StaticString<NAME_LENGTH + 1> name;$/;"	m	struct:WaypointFilter
name	Weather/PCMet/Images.hpp	/^    const char *name;$/;"	m	struct:PCMet::ImageArea
name	Weather/ParsedMETAR.hpp	/^  StaticString<128> name;$/;"	m	struct:ParsedMETAR
name	Weather/Rasp/Providers.hpp	/^  const TCHAR *name;$/;"	m	struct:RaspProvider
name	Weather/Rasp/RaspStore.hpp	/^    StaticString<32> name;$/;"	m	struct:RaspStore::MapItem
name	Weather/Rasp/RaspStore.hpp	/^    const TCHAR *name;$/;"	m	struct:RaspStore::MapInfo
name	Weather/Rasp/RaspStyle.hpp	/^  const TCHAR *name;$/;"	m	struct:RaspStyle
name	XML/Node.hpp	/^      tstring name, value;$/;"	m	struct:XMLNode::Data::Attribute
name	XML/Node.hpp	/^    tstring name;$/;"	m	struct:XMLNode::Data
name_available	Weather/ParsedMETAR.hpp	/^  bool name_available;$/;"	m	struct:ParsedMETAR
name_button	Dialogs/Task/TargetDialog.cpp	/^    PixelRect name_button;$/;"	m	struct:TargetWidget::Layout	file:
name_button	Dialogs/Task/TargetDialog.cpp	/^  Button name_button;$/;"	m	class:TargetWidget	file:
name_font	Look/AirspaceLook.hpp	/^  const Font *name_font;$/;"	m	struct:AirspaceLook
name_length	Tracking/SkyLines/Protocol.hpp	/^  uint8_t name_length;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
name_prefix	Engine/Airspace/AirspaceSorter.hpp	/^  const TCHAR *name_prefix;$/;"	m	struct:AirspaceFilterData
name_tree	Engine/Waypoint/Waypoints.hpp	/^  WaypointNameTree name_tree;$/;"	m	class:Waypoints
names	Dialogs/Device/Vega/AudioParameters.hpp	/^  char names[5][64];$/;"	m	class:VegaAudioParametersWidget
namesuffixes	Task/TaskFile.hpp	/^  StaticArray<TCHAR *, 64> namesuffixes;$/;"	m	class:TaskFile
nano_filename	Device/RecordedFlight.hpp	/^      char nano_filename[16];$/;"	m	struct:RecordedFlightInfo::__anon197::__anon198
nano_setting_names	Dialogs/Device/LX/NanoConfigWidget.cpp	/^static const char *const nano_setting_names[] = {$/;"	v	file:
nano_settings	Device/Driver/LX/Internal.hpp	/^  DeviceSettingsMap<std::string> nano_settings;$/;"	m	class:LXDevice
nano_settings	Device/Driver/LXERA/Internal.hpp	/^  DeviceSettingsMap<std::string> nano_settings;$/;"	m	class:LXEraDevice
native_byte_order	Language/MOFile.hpp	/^  bool native_byte_order;$/;"	m	class:MOFile
native_string	Topography/shapelib/mapserver.h	/^    char *native_string; \/* RFC 91 *\/$/;"	m	struct:__anon35
native_view	Android/Main.cpp	/^NativeView *native_view;$/;"	v
nav_altitude	NMEA/MoreData.hpp	/^  double nav_altitude;$/;"	m	struct:MoreData
nav_baro_altitude_enabled	Computer/Settings.hpp	/^  bool nav_baro_altitude_enabled;$/;"	m	struct:FeaturesSettings
near_distance	Dialogs/Traffic/TrafficList.cpp	/^    double near_distance;$/;"	m	struct:TrafficListWidget::Item	file:
near_name	Dialogs/Traffic/TrafficList.cpp	/^    StaticString<20> near_name;$/;"	m	struct:TrafficListWidget::Item	file:
near_traffic_enabled	Tracking/SkyLines/Glue.hpp	/^  bool near_traffic_enabled = false;$/;"	m	class:SkyLinesTracking::Glue
near_traffic_enabled	Tracking/SkyLines/Settings.hpp	/^  bool near_traffic_enabled;$/;"	m	struct:SkyLinesTracking::Settings
nearest	Engine/Route/AirspaceRoute.cpp	/^  AIVResult nearest;$/;"	m	class:final	file:
nearest_waypoint	Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  const WaypointPtr nearest_waypoint;$/;"	m	class:FlightStatusPanel
need_geotransform	Topography/shapelib/mapprimitive.h	/^  int  need_geotransform;$/;"	m	struct:__anon81
need_to_arm	Engine/Task/Stats/TaskStats.hpp	/^  bool need_to_arm;$/;"	m	class:TaskStats
needle_gauge_types	Dialogs/Device/Vega/DisplayParameters.hpp	/^static constexpr StaticEnumChoice needle_gauge_types[] = {$/;"	v
needle_initialised	Gauge/GaugeVario.hpp	/^  bool needle_initialised = false;$/;"	m	class:GaugeVario
needswap	Topography/shapelib/maptree.h	/^    char        needswap;$/;"	m	struct:__anon88
neg_brush	Look/ChartLook.hpp	/^  Brush neg_brush;$/;"	m	struct:ChartLook
negative	Math/Angle.hpp	/^    bool negative;$/;"	m	struct:Angle::DMS
net_coupe	Engine/Contest/ContestManager.hpp	/^  NetCoupe net_coupe;$/;"	m	class:ContestManager
net_state_strings	Dialogs/StatusPanels/SystemStatusPanel.cpp	/^static const TCHAR *const net_state_strings[] = {$/;"	v	file:
netto_30s_filter	Computer/AverageVarioComputer.hpp	/^  WindowFilter<30> netto_30s_filter;$/;"	m	class:AverageVarioComputer
netto_average	NMEA/VarioInfo.hpp	/^  double netto_average;$/;"	m	struct:VarioInfo
netto_vario	Engine/Navigation/Aircraft.hpp	/^  double netto_vario;$/;"	m	struct:VarioState
netto_vario	NMEA/Info.hpp	/^  double netto_vario;$/;"	m	struct:NMEAInfo
netto_vario_available	NMEA/Info.hpp	/^  Validity netto_vario_available;$/;"	m	struct:NMEAInfo
networks	Kobo/WifiDialog.cpp	/^  TrivialArray<NetworkInfo, 64> networks;$/;"	m	class:final	file:
new_button	Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
new_items	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  std::forward_list<Item> new_items;$/;"	m	class:final	file:
new_size	Screen/TopWindow.hpp	/^  PixelSize new_size;$/;"	m	class:TopWindow
new_traffic	FLARM/List.hpp	/^  Validity new_traffic;$/;"	m	struct:TrafficList
new_traffic	GliderLink/List.hpp	/^  Validity new_traffic;$/;"	m	struct:GliderLinkTrafficList
newestValIndex	Computer/ClimbAverageCalculator.hpp	/^  int newestValIndex;$/;"	m	class:ClimbAverageCalculator
nexprbindings	Topography/shapelib/mapserver.h	/^    int nexprbindings;$/;"	m	struct:labelObj
nexprbindings	Topography/shapelib/mapserver.h	/^    int nexprbindings;$/;"	m	struct:styleObj
next	Audio/AndroidPCMPlayer.hpp	/^  unsigned next;$/;"	m	class:AndroidPCMPlayer
next	Blackboard/ProxyBlackboardListener.hpp	/^  BlackboardListener &next;$/;"	m	class:ProxyBlackboardListener
next	IO/GunzipReader.hxx	/^	Reader &next;$/;"	m	class:final
next	Input/InputConfig.hpp	/^    unsigned next;$/;"	m	struct:InputConfig::Event
next	Terrain/jasper/jpc/jpc_dec.h	/^	struct jpc_dec_seg_s *next;$/;"	m	struct:jpc_dec_seg_s	typeref:struct:jpc_dec_seg_s::jpc_dec_seg_s
next	Topography/TopographyFile.hpp	/^    const ShapeList *next;$/;"	m	struct:TopographyFile::ShapeList
next	Topography/shapelib/maperror.h	/^    struct debug_info_obj *next;$/;"	m	struct:debug_info_obj	typeref:struct:debug_info_obj::debug_info_obj
next	Topography/shapelib/maperror.h	/^    struct errorObj *next;$/;"	m	struct:errorObj	typeref:struct:errorObj::errorObj
next	Topography/shapelib/mapserver.h	/^    struct _CompositingFilter *next;$/;"	m	struct:_CompositingFilter	typeref:struct:_CompositingFilter::_CompositingFilter
next	Topography/shapelib/mapserver.h	/^    struct _LayerCompositer *next;$/;"	m	struct:_LayerCompositer	typeref:struct:_LayerCompositer::_LayerCompositer
next	Topography/shapelib/mapserver.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	Topography/shapelib/mapserver.h	/^    struct tokenListNode *next;$/;"	m	struct:tokenListNode	typeref:struct:tokenListNode::tokenListNode
next	Topography/shapelib/mapserver.h	/^    tileCacheObj *next;$/;"	m	struct:tileCacheObj
next	Util/OverwritingRingBuffer.hpp	/^  static unsigned next(unsigned i) {$/;"	f	class:TrivialOverwritingRingBuffer
next	Util/QuadTree.hxx	/^		Leaf *next;$/;"	m	struct:QuadTree::Leaf
next	Util/RadixTree.hpp	/^    Leaf *next;$/;"	m	struct:RadixTree::Leaf
next	Util/SliceAllocator.hxx	/^		Area *next;$/;"	m	struct:SliceAllocator::Area
next	Util/SliceAllocator.hxx	/^		Item *next;$/;"	m	struct:SliceAllocator::Item
next_button	Dialogs/Task/TargetDialog.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:TargetWidget::Layout	file:
next_button	Dialogs/Task/TargetDialog.cpp	/^  Button next_button;$/;"	m	class:TargetWidget	file:
next_button	Dialogs/Task/TaskPointDialog.cpp	/^  Button *previous_button, *next_button;$/;"	m	class:final	file:
next_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:final::Layout	file:
next_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button previous_button, next_button;$/;"	m	class:final	file:
next_button	Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
next_button	Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
next_button	Widget/ArrowPagerWidget.hpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:ArrowPagerWidget::Layout
next_button	Widget/ArrowPagerWidget.hpp	/^  Button previous_button, next_button;$/;"	m	class:ArrowPagerWidget
next_center	Terrain/Thread.hpp	/^  GeoPoint next_center;$/;"	m	class:final
next_data	Replay/Replay.hpp	/^  NMEAInfo next_data;$/;"	m	class:final
next_id	Cloud/Client.hpp	/^  unsigned next_id = 1;$/;"	m	class:CloudClientContainer
next_id	Engine/Waypoint/Waypoints.hpp	/^  unsigned next_id;$/;"	m	class:Waypoints
next_is_last	Engine/Task/Stats/CommonStats.hpp	/^  bool next_is_last;$/;"	m	class:CommonStats
next_item_button	Gauge/BigTrafficWidget.hpp	/^  Button *previous_item_button, *next_item_button;$/;"	m	class:TrafficWidget
next_leg_eq_thermal	NMEA/Derived.hpp	/^  double next_leg_eq_thermal;$/;"	m	struct:DerivedInfo
next_leg_vector	Engine/Task/Stats/ElementStat.hpp	/^   GeoVector next_leg_vector;$/;"	m	struct:ElementStat
next_mutex	MapWindow/GlueMapWindow.hpp	/^  Mutex next_mutex;$/;"	m	class:GlueMapWindow
next_projection	Topography/Thread.hpp	/^  WindowProjection next_projection;$/;"	m	class:final
next_radius	Terrain/Thread.hpp	/^  double next_radius;$/;"	m	class:final
next_settings_computer	MapWindow/GlueMapWindow.hpp	/^  ComputerSettings next_settings_computer;$/;"	m	class:GlueMapWindow
next_settings_map	MapWindow/GlueMapWindow.hpp	/^  MapSettings next_settings_map;$/;"	m	class:GlueMapWindow
next_sibling	Util/RadixTree.hpp	/^    Node *next_sibling, *children;$/;"	m	struct:RadixTree::Node
next_ui_state	MapWindow/GlueMapWindow.hpp	/^  UIState next_ui_state;$/;"	m	class:GlueMapWindow
next_waypoint_infobox_panels	InfoBoxes/Content/Task.cpp	/^const InfoBoxPanel next_waypoint_infobox_panels[] = {$/;"	v
nlength0	Gauge/GaugeVario.hpp	/^    unsigned nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nlength1	Gauge/GaugeVario.hpp	/^    unsigned nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nline	Gauge/GaugeVario.hpp	/^    unsigned nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nlps	Terrain/jasper/jpc/jpc_mqcod.h	/^	const struct jpc_mqstate_s *nlps;$/;"	m	struct:jpc_mqstate_s	typeref:struct:jpc_mqstate_s::jpc_mqstate_s
nmea_out_driver	Device/Driver/NmeaOut.cpp	/^const struct DeviceRegister nmea_out_driver = {$/;"	v	typeref:struct:DeviceRegister
nmps	Terrain/jasper/jpc/jpc_mqcod.h	/^	const struct jpc_mqstate_s *nmps;$/;"	m	struct:jpc_mqstate_s	typeref:struct:jpc_mqstate_s::jpc_mqstate_s
no_gps_icon	Look/MapLook.hpp	/^  MaskedIcon waiting_for_fix_icon, no_gps_icon;$/;"	m	struct:MapLook
no_thin_time	Engine/Trace/Trace.hpp	/^  const unsigned no_thin_time;$/;"	m	class:Trace
no_traffic_font	Look/FlarmTrafficLook.hpp	/^  Font label_font, side_info_font, no_traffic_font;$/;"	m	struct:FlarmTrafficLook
noaa	Look/MapLook.hpp	/^  NOAALook noaa;$/;"	m	struct:MapLook
noaa_store	MapWindow/MapWindow.hpp	/^  NOAAStore *noaa_store = nullptr;$/;"	m	class:MapWindow
noaa_store	Weather/NOAAGlue.cpp	/^NOAAStore *noaa_store;$/;"	v
node	Util/RadixTree.hpp	/^      Node *node;$/;"	m	struct:RadixTree::Node::Match
node	XML/DataNodeXML.hpp	/^  XMLNode &node;$/;"	m	class:final
node	XML/DataNodeXML.hpp	/^  const XMLNode &node;$/;"	m	class:final
node_parent_const_iterator	Engine/Route/AStar.hpp	/^  typedef typename node_parent_map::const_iterator node_parent_const_iterator;$/;"	t	class:AStar
node_parent_iterator	Engine/Route/AStar.hpp	/^  typedef typename node_parent_map::iterator node_parent_iterator;$/;"	t	class:AStar
node_parent_map	Engine/Route/AStar.hpp	/^  typedef std::unordered_map<Node, Node, Hash, KeyEqual> node_parent_map;$/;"	t	class:AStar
node_parents	Engine/Route/AStar.hpp	/^  node_parent_map node_parents;$/;"	m	class:AStar
node_value_const_iterator	Engine/Route/AStar.hpp	/^  typedef typename node_value_map::const_iterator node_value_const_iterator;$/;"	t	class:AStar
node_value_iterator	Engine/Route/AStar.hpp	/^  typedef typename node_value_map::iterator node_value_iterator;$/;"	t	class:AStar
node_value_map	Engine/Route/AStar.hpp	/^  typedef std::unordered_map<Node, AStarPriorityValue, Hash, KeyEqual> node_value_map;$/;"	t	class:AStar
node_values	Engine/Route/AStar.hpp	/^  node_value_map node_values;$/;"	m	class:AStar
nodes_	Terrain/jasper/jpc/jpc_tagtree.h	/^	jpc_tagtreenode_t *nodes_;$/;"	m	struct:__anon132
noexcept	Android/NativeView.hpp	/^             jstring _product) noexcept;$/;"	m	class:NativeView
noexcept	BallastDumpManager.hpp	/^  bool Update(GlidePolar &glide_polar, unsigned dump_time) noexcept;$/;"	m	class:BallastDumpManager
noexcept	BallastDumpManager.hpp	/^  void SetEnabled(bool _enabled) noexcept;$/;"	m	class:BallastDumpManager
noexcept	BallastDumpManager.hpp	/^  void Start() noexcept;$/;"	m	class:BallastDumpManager
noexcept	BallastDumpManager.hpp	/^  void Stop() noexcept;$/;"	m	class:BallastDumpManager
noexcept	Device/Descriptor.hpp	/^  bool DoOpen(OperationEnvironment &env) noexcept;$/;"	m	class:final
noexcept	Device/Descriptor.hpp	/^  void EnableDumpTemporarily(std::chrono::steady_clock::duration duration) noexcept;$/;"	m	class:final
noexcept	Device/Descriptor.hpp	/^  void OnJobFinished() noexcept;$/;"	m	class:final
noexcept	Device/Driver/BlueFly/Internal.hpp	/^  BlueFlySettings GetSettings() noexcept;$/;"	m	class:BlueFlyDevice
noexcept	Device/Port/Listener.hpp	/^  virtual void PortStateChanged() noexcept = 0;$/;"	m	class:PortListener
noexcept	Device/Util/LineHandler.hpp	/^  virtual bool LineReceived(const char *line) noexcept = 0;$/;"	m	class:PortLineHandler
noexcept	Dialogs/DownloadFilePicker.cpp	/^  void OnDownloadCompleteNotification() noexcept;$/;"	m	class:final	file:
noexcept	Dialogs/FileManager.cpp	/^  void OnDownloadNotification() noexcept;$/;"	m	class:ManagedFileListWidget	file:
noexcept	Dialogs/Weather/RASPDialog.cpp	/^  void Download() noexcept;$/;"	m	class:final	file:
noexcept	Dialogs/Weather/RASPDialog.cpp	/^  void FillItemControl() noexcept;$/;"	m	class:final	file:
noexcept	Dialogs/Weather/RASPDialog.cpp	/^  void OnTimeModified(const DataFieldEnum &df) noexcept;$/;"	m	class:final	file:
noexcept	Dialogs/Weather/RASPDialog.cpp	/^  void UpdateTimeControl() noexcept;$/;"	m	class:final	file:
noexcept	Dialogs/WidgetDialog.hpp	/^               Widget *widget) noexcept;$/;"	m	class:WidgetDialog
noexcept	Dialogs/WidgetDialog.hpp	/^               const TCHAR *caption) noexcept;$/;"	m	class:WidgetDialog
noexcept	Dialogs/WidgetDialog.hpp	/^               const TCHAR *caption, Widget *widget) noexcept;$/;"	m	class:WidgetDialog
noexcept	Engine/Contest/ContestTrace.hpp	/^  ContestTracePoint(const TracePoint &src) noexcept;$/;"	m	struct:ContestTracePoint
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^                             const TracePoint &finish) const noexcept;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  AbstractContest(const unsigned _finish_alt_diff = 1000) noexcept;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  bool SaveSolution() noexcept;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual ContestResult CalculateResult() const noexcept = 0;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual SolverResult Solve(bool exhaustive) noexcept = 0;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual bool UpdateScore() noexcept;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual void CopySolution(ContestTraceVector &vec) const noexcept = 0;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/AbstractContest.hpp	/^  virtual void Reset() noexcept;$/;"	m	class:AbstractContest
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^                  const unsigned finish_alt_diff = 1000) noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  bool SaveSolution() noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  virtual ContestResult CalculateResult(const ContestTraceVector &solution) const noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  virtual void AddStartEdges() noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  virtual void StartSearch() noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void AddEdges(ScanTaskPoint origin, unsigned first_point) noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void AddIncrementalEdges(unsigned first_point) noexcept;$/;"	m	class:ContestDijkstra
noexcept	Engine/Contest/Solvers/DMStQuad.hpp	/^  explicit DMStQuad(const Trace &_trace) noexcept;$/;"	m	class:DMStQuad
noexcept	Engine/Contest/Solvers/NetCoupe.hpp	/^  explicit NetCoupe(const Trace &_trace) noexcept;$/;"	m	class:NetCoupe
noexcept	Engine/Contest/Solvers/OLCClassic.hpp	/^  explicit OLCClassic(const Trace &_trace) noexcept;$/;"	m	class:OLCClassic
noexcept	Engine/Contest/Solvers/OLCFAI.hpp	/^  OLCFAI(const Trace &_trace, bool predict) noexcept;$/;"	m	class:OLCFAI
noexcept	Engine/Contest/Solvers/OLCLeague.hpp	/^  explicit OLCLeague(const Trace &_trace) noexcept;$/;"	m	class:OLCLeague
noexcept	Engine/Contest/Solvers/OLCPlus.hpp	/^  OLCPlus() noexcept;$/;"	m	class:OLCPlus
noexcept	Engine/Contest/Solvers/OLCSISAT.hpp	/^  explicit OLCSISAT(const Trace &_trace) noexcept;$/;"	m	class:OLCSISAT
noexcept	Engine/Contest/Solvers/OLCSprint.hpp	/^  explicit OLCSprint(const Trace &_trace) noexcept;$/;"	m	class:OLCSprint
noexcept	Engine/Contest/Solvers/OLCSprint.hpp	/^  unsigned FindStart() const noexcept;$/;"	m	class:OLCSprint
noexcept	Engine/Contest/Solvers/OLCTriangleRules.hpp	/^                                            const GeoPoint &reference) noexcept;$/;"	m	struct:OLCTriangleRules
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^                 const NearWaypoint& previous) noexcept$/;"	m	struct:Retrospective::NearWaypoint
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^    NearWaypoint(WaypointPtr &&_waypoint, const GeoPoint& _location) noexcept$/;"	m	struct:Retrospective::NearWaypoint
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^  bool UpdateSample(const GeoPoint &aircraft_location) noexcept;$/;"	m	class:Retrospective
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^  explicit Retrospective(const Waypoints &wps) noexcept;$/;"	m	class:Retrospective
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^  void CalcDistances(double &d_ach, double &d_can) noexcept;$/;"	m	class:Retrospective
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^  void Clear() noexcept;$/;"	m	class:Retrospective
noexcept	Engine/Contest/Solvers/Retrospective.hpp	/^  void PruneCandidates() noexcept;$/;"	m	class:Retrospective
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  bool IsMasterUpdated(bool continuous) const noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  bool SetPredicted(const TracePoint &_predicted) noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  bool UpdateTraceTail() noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  explicit TraceManager(const Trace &_trace) noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  virtual void Reset() noexcept = 0;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  virtual void UpdateTrace(bool force) noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  void ClearTrace() noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TraceManager.hpp	/^  void UpdateTraceFull() noexcept;$/;"	m	class:TraceManager
noexcept	Engine/Contest/Solvers/TriangleContest.hpp	/^                   const unsigned min, const unsigned max) noexcept$/;"	m	struct:TriangleContest::TurnPointRange
noexcept	Engine/Contest/Solvers/TriangleContest.hpp	/^                 TurnPointRange _tp3) noexcept$/;"	m	struct:TriangleContest::CandidateSet
noexcept	Engine/Contest/Solvers/TriangleContest.hpp	/^                 unsigned first, unsigned last) noexcept$/;"	m	struct:TriangleContest::CandidateSet
noexcept	Engine/Contest/Solvers/TriangleContest.hpp	/^    explicit CandidateSet(TurnPointRange tp) noexcept$/;"	m	struct:TriangleContest::CandidateSet
noexcept	Engine/Contest/Solvers/XContestFree.hpp	/^               const bool _is_dhv=false) noexcept;$/;"	m	class:XContestFree
noexcept	Engine/Contest/Solvers/XContestTriangle.hpp	/^  XContestTriangle(const Trace &_trace, bool predict, bool _is_dhv) noexcept;$/;"	m	class:XContestTriangle
noexcept	Engine/PathSolvers/Dijkstra.hpp	/^    constexpr Edge(Node _parent, unsigned _value) noexcept$/;"	m	struct:Dijkstra::Edge
noexcept	Engine/PathSolvers/Dijkstra.hpp	/^    constexpr Value(unsigned _edge_value, edge_iterator _iterator) noexcept$/;"	m	struct:Dijkstra::Value
noexcept	Engine/PathSolvers/NavDijkstra.hpp	/^  virtual void AddEdges(const ScanTaskPoint curNode) noexcept = 0;$/;"	m	class:NavDijkstra
noexcept	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^                        const double xmin, const double xmax) noexcept;$/;"	m	class:final
noexcept	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  bool valid(const double t) noexcept;$/;"	m	class:final
noexcept	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  double f(const double t) noexcept;$/;"	m	class:final
noexcept	Engine/Task/PathSolvers/IsolineCrossingFinder.hpp	/^  double solve() noexcept;$/;"	m	class:final
noexcept	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  bool Run() noexcept;$/;"	m	class:TaskDijkstra
noexcept	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  const SearchPoint &GetPoint(ScanTaskPoint sp) const noexcept;$/;"	m	class:TaskDijkstra
noexcept	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  explicit TaskDijkstra(const bool is_min) noexcept;$/;"	m	class:TaskDijkstra
noexcept	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  unsigned GetStageSize(const unsigned stage) const noexcept;$/;"	m	class:TaskDijkstra
noexcept	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  void AddStartEdges(unsigned stage, const SearchPoint &loc) noexcept;$/;"	m	class:TaskDijkstra
noexcept	Engine/Task/PathSolvers/TaskDijkstra.hpp	/^  void AddZeroStartEdges() noexcept;$/;"	m	class:TaskDijkstra
noexcept	Engine/Task/PathSolvers/TaskDijkstraMax.hpp	/^  bool DistanceMax() noexcept;$/;"	m	class:final
noexcept	Engine/Task/PathSolvers/TaskDijkstraMin.hpp	/^  bool DistanceMin(const SearchPoint &location) noexcept;$/;"	m	class:final
noexcept	Engine/Task/Shapes/FAITriangleRules.hpp	/^                   const FAITriangleSettings &settings) noexcept;$/;"	m	namespace:FAITriangleRules
noexcept	Event/Android/Queue.hpp	/^  void AddTimer(Timer &timer, std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:EventQueue
noexcept	Event/Notify.hpp	/^  explicit Notify(CallbackFunction _callback) noexcept;$/;"	m	class:final
noexcept	Event/SDL/Queue.hpp	/^  void AddTimer(Timer &timer, std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:EventQueue
noexcept	Event/Shared/TimerQueue.hpp	/^                          std::chrono::steady_clock::time_point _due) noexcept$/;"	m	struct:TimerQueue::TimerRecord
noexcept	Event/Shared/TimerQueue.hpp	/^  Timer *Pop(std::chrono::steady_clock::time_point now) noexcept;$/;"	m	class:TimerQueue
noexcept	Event/Shared/TimerQueue.hpp	/^  std::chrono::steady_clock::duration GetTimeout(std::chrono::steady_clock::time_point now) const noexcept;$/;"	m	class:TimerQueue
noexcept	Event/Shared/TimerQueue.hpp	/^  void Add(Timer &timer, std::chrono::steady_clock::time_point due) noexcept;$/;"	m	class:TimerQueue
noexcept	Event/Timer.hpp	/^  explicit Timer(Callback _callback) noexcept;$/;"	m	class:final
noexcept	Event/Timer.hpp	/^  void Schedule(std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:final
noexcept	Event/Timer.hpp	/^  void SchedulePreserve(std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:final
noexcept	Event/Windows/Queue.hpp	/^  void AddTimer(Timer &timer, std::chrono::steady_clock::duration d) noexcept;$/;"	m	class:EventQueue
noexcept	Form/ActionListener.hpp	/^  virtual void OnAction(int id) noexcept = 0;$/;"	m	class:ActionListener
noexcept	Form/Control.hpp	/^  WindowControl() noexcept;$/;"	m	class:WindowControl
noexcept	Form/Control.hpp	/^  bool OnHelp() noexcept;$/;"	m	class:WindowControl
noexcept	Form/Control.hpp	/^  void SetCaption(const TCHAR *Value) noexcept;$/;"	m	class:WindowControl
noexcept	Form/Edit.hpp	/^              const WindowStyle style) noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  WndProperty(const DialogLook &_look) noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  bool BeginEditing() noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  int DecValue() noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  int IncValue() noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  unsigned GetRecommendedCaptionWidth() const noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  void RefreshDisplay() noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  void SetCaptionWidth(int caption_width) noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  void SetDataField(DataField *Value) noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  void SetText(const TCHAR *_value) noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  void UpdateLayout() noexcept;$/;"	m	class:WndProperty
noexcept	Form/Edit.hpp	/^  ~WndProperty() noexcept;$/;"	m	class:WndProperty
noexcept	Form/Form.hpp	/^          const WindowStyle style={}) noexcept;$/;"	m	class:WndForm
noexcept	Form/Frame.hpp	/^           const WindowStyle style=WindowStyle()) noexcept;$/;"	m	class:WndFrame
noexcept	Form/Frame.hpp	/^  explicit WndFrame(const DialogLook &look) noexcept;$/;"	m	class:WndFrame
noexcept	Form/Frame.hpp	/^  unsigned GetTextHeight() const noexcept;$/;"	m	class:WndFrame
noexcept	Form/Frame.hpp	/^  void SetAlignCenter() noexcept;$/;"	m	class:WndFrame
noexcept	Form/Frame.hpp	/^  void SetText(const TCHAR *_text) noexcept;$/;"	m	class:WndFrame
noexcept	Form/Frame.hpp	/^  void SetVAlignCenter() noexcept;$/;"	m	class:WndFrame
noexcept	Form/List.hpp	/^                           unsigned idx) noexcept = 0;$/;"	m	class:ListItemRenderer
noexcept	Form/List.hpp	/^              unsigned _item_height) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  bool CanActivateItem() const noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  bool SetCursorIndex(unsigned i) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  explicit ListControl(const DialogLook &_look) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void ActivateItem() noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void DrawItems(Canvas &canvas, unsigned start, unsigned end) const noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void DrawScrollBar(Canvas &canvas) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void EnsureVisible(unsigned i) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void MoveCursor(int delta) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void MoveOrigin(int delta) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void OnKineticTimer() noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void SetItemHeight(unsigned _item_height) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void SetLength(unsigned n) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void SetOrigin(int i) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void SetPixelOrigin(int pixel_origin) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void SetPixelPan(unsigned _pixel_pan) noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void drag_end() noexcept;$/;"	m	class:ListControl
noexcept	Form/List.hpp	/^  void show_or_hide_scroll_bar() noexcept;$/;"	m	class:ListControl
noexcept	Gauge/GaugeVario.hpp	/^                   double Value, const TCHAR *Label) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^             PixelRect rc, const WindowStyle style=WindowStyle()) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^    BallastGeometry(const VarioLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:GaugeVario::BallastGeometry
noexcept	Gauge/GaugeVario.hpp	/^    BugsGeometry(const VarioLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:GaugeVario::BugsGeometry
noexcept	Gauge/GaugeVario.hpp	/^    Geometry(const VarioLook &look, const PixelRect &rc) noexcept;$/;"	m	struct:GaugeVario::Geometry
noexcept	Gauge/GaugeVario.hpp	/^    LabelValueGeometry(const VarioLook &look, PixelPoint position) noexcept;$/;"	m	struct:GaugeVario::LabelValueGeometry
noexcept	Gauge/GaugeVario.hpp	/^    static unsigned GetHeight(const VarioLook &look) noexcept;$/;"	m	struct:GaugeVario::LabelValueGeometry
noexcept	Gauge/GaugeVario.hpp	/^  BulkPixelPoint *getPolygon(const int i) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  int  ValueToNeedlePos(double Value) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void MakeAllPolygons() noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void MakePolygon(const int i) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderBallast(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderBugs(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderClimb(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderNeedle(Canvas &canvas, int i, bool average, bool clear) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderSpeedToFly(Canvas &canvas, int x, int y) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderVarioLine(Canvas &canvas, int i, int sink, bool clear) noexcept;$/;"	m	class:GaugeVario
noexcept	Gauge/GaugeVario.hpp	/^  void RenderZero(Canvas &canvas) noexcept;$/;"	m	class:GaugeVario
noexcept	Hardware/DisplayDPI.hpp	/^             unsigned width_mm, unsigned height_mm) noexcept;$/;"	m	namespace:Display
noexcept	Hardware/DisplayDPI.hpp	/^ProvideDPI(unsigned x_dpi, unsigned y_dpi) noexcept;$/;"	m	namespace:Display
noexcept	IO/BufferedOutputStream.hxx	/^	bool AppendToBuffer(const void *data, size_t size) noexcept;$/;"	m	class:BufferedOutputStream
noexcept	IO/BufferedReader.hxx	/^	size_t ReadFromBuffer(WritableBuffer<void> dest) noexcept;$/;"	m	class:BufferedReader
noexcept	IO/DataHandler.hpp	/^  virtual bool DataReceived(const void *data, size_t length) noexcept = 0;$/;"	m	class:DataHandler
noexcept	IO/FileOutputStream.hxx	/^	uint64_t Tell() const noexcept;$/;"	m	class:final
noexcept	IO/FileOutputStream.hxx	/^	void Cancel() noexcept;$/;"	m	class:final
noexcept	IO/FileReader.hxx	/^	void Close() noexcept;$/;"	m	class:final
noexcept	IO/Reader.hxx	/^	virtual ~Reader() noexcept = default;$/;"	m	class:Reader
noexcept	InfoBoxes/InfoBoxWindow.hpp	/^  void OnDialogTimer() noexcept;$/;"	m	class:InfoBoxWindow
noexcept	Java/Exception.hxx	/^		explicit Exception(JNIEnv *env, jthrowable e) noexcept;$/;"	m	class:Java::Exception
noexcept	Java/File.hxx	/^		static void Initialise(JNIEnv *env) noexcept;$/;"	m	class:Java::File
noexcept	Java/Global.hxx	/^	void Init(JNIEnv *env) noexcept;$/;"	m	namespace:Java
noexcept	Java/String.hxx	/^				    char *buffer, size_t max_size) noexcept;$/;"	m	class:Java::String
noexcept	Java/String.hxx	/^		static std::string ToString(JNIEnv *env, jstring s) noexcept;$/;"	m	class:Java::String
noexcept	Lua/Error.hxx	/^Push(lua_State *L, std::exception_ptr e) noexcept;$/;"	m	namespace:Lua
noexcept	Lua/Util.hxx	/^	explicit constexpr LightUserData(void *_value) noexcept$/;"	m	struct:Lua::StackIndex::LightUserData
noexcept	Lua/Util.hxx	/^	explicit constexpr StackIndex(int _idx) noexcept$/;"	m	struct:Lua::StackIndex
noexcept	MainWindow.hpp	/^  void OnCalculatedNotify() noexcept;$/;"	m	class:MainWindow
noexcept	MainWindow.hpp	/^  void OnGpsNotify() noexcept;$/;"	m	class:MainWindow
noexcept	MainWindow.hpp	/^  void OnRestorePageNotify() noexcept;$/;"	m	class:MainWindow
noexcept	MainWindow.hpp	/^  void RunTimer() noexcept;$/;"	m	class:MainWindow
noexcept	MapWindow/GlueMapWindow.hpp	/^  void OnKineticTimer() noexcept;$/;"	m	class:GlueMapWindow
noexcept	MapWindow/GlueMapWindow.hpp	/^  void OnMapItemTimer() noexcept;$/;"	m	class:GlueMapWindow
noexcept	MapWindow/GlueMapWindow.hpp	/^  void PartialRedraw() noexcept;$/;"	m	class:GlueMapWindow
noexcept	MapWindow/Overlay.hpp	/^                    const WindowProjection &projection) noexcept = 0;$/;"	m	class:MapOverlay
noexcept	MapWindow/Overlay.hpp	/^  virtual ~MapOverlay() noexcept = default;$/;"	m	class:MapOverlay
noexcept	Math/Point2D.hpp	/^  constexpr DoublePoint2D(double _x, double _y) noexcept$/;"	m	struct:DoublePoint2D
noexcept	Math/Point2D.hpp	/^  constexpr FloatPoint2D(float _x, float _y) noexcept$/;"	m	struct:FloatPoint2D
noexcept	Math/Point2D.hpp	/^  constexpr IntPoint2D(int _x, int _y) noexcept$/;"	m	struct:IntPoint2D
noexcept	Math/Point2D.hpp	/^  constexpr Point2D(scalar_type _x, scalar_type _y) noexcept$/;"	m	struct:Point2D
noexcept	Math/Point2D.hpp	/^  constexpr UnsignedPoint2D(unsigned _x, unsigned _y) noexcept$/;"	m	struct:UnsignedPoint2D
noexcept	Net/AllocatedSocketAddress.hxx	/^	AllocatedSocketAddress &operator=(SocketAddress src) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	Net/AllocatedSocketAddress.hxx	/^	StringView GetLocalRaw() const noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	Net/AllocatedSocketAddress.hxx	/^	bool SetPort(unsigned port) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	Net/AllocatedSocketAddress.hxx	/^	void SetLocal(const char *path) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	Net/AllocatedSocketAddress.hxx	/^	void SetSize(size_type new_size) noexcept;$/;"	m	class:AllocatedSocketAddress
noexcept	Net/HTTP/Handler.hpp	/^    virtual bool ResponseReceived(int64_t content_length) noexcept = 0;$/;"	m	class:Net::ResponseHandler
noexcept	Net/HTTP/Request.hpp	/^    bool SubmitResponse() noexcept;$/;"	m	class:Net::Request
noexcept	Net/HTTP/Slist.hxx	/^	CurlSlist() noexcept = default;$/;"	m	class:CurlSlist
noexcept	Net/IPv4Address.hxx	/^	const char *ToString(char *buffer, size_t buffer_size) const noexcept;$/;"	m	class:IPv4Address
noexcept	Net/IPv4Address.hxx	/^	explicit IPv4Address(SocketAddress src) noexcept;$/;"	m	class:IPv4Address
noexcept	Net/IPv4Address.hxx	/^	static IPv4Address GetDeviceAddress(const char *device) noexcept;$/;"	m	class:IPv4Address
noexcept	Net/IPv6Address.hxx	/^	IPv4Address UnmapV4() const noexcept;$/;"	m	class:IPv6Address
noexcept	Net/IPv6Address.hxx	/^	bool IsAny() const noexcept;$/;"	m	class:IPv6Address
noexcept	Net/IPv6Address.hxx	/^	explicit IPv6Address(SocketAddress src) noexcept;$/;"	m	class:IPv6Address
noexcept	Net/SocketAddress.hxx	/^	ConstBuffer<void> GetSteadyPart() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	IPv4Address UnmapV4() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	StringView GetLocalRaw() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	bool IsV4Mapped() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	bool IsV6Any() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	bool operator==(const SocketAddress other) const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	const char *GetLocalPath() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketAddress.hxx	/^	unsigned GetPort() const noexcept;$/;"	m	class:SocketAddress
noexcept	Net/SocketDescriptor.hxx	/^					     SocketDescriptor &b) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^				     SocketDescriptor &b) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^			 void *value, size_t size) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^		       const void *value, size_t size) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^		      SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^		     StaticSocketAddress &address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	SocketDescriptor Accept() noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	StaticSocketAddress GetLocalAddress() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	StaticSocketAddress GetPeerAddress() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool AddMembership(SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool AddMembership(const IPv4Address &address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool AddMembership(const IPv6Address &address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool AutoBind() noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool Bind(SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool BindPort(unsigned port) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool Connect(SocketAddress address) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool Create(int domain, int type, int protocol) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool CreateNonBlock(int domain, int type, int protocol) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool IsStream() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool Listen(int backlog) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetBindToDevice(const char *name) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetCork(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetFreeBind(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetKeepAlive(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetNoDelay(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetReuseAddress(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetReusePort(bool value=true) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetTcpDeferAccept(const int &seconds) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetTcpFastOpen(int qlen=16) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetTcpUserTimeout(const unsigned &milliseconds) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	bool SetV6Only(bool value) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	int GetError() noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	int GetType() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	int WaitReadable(int timeout_ms) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	int WaitWritable(int timeout_ms) const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	ssize_t Read(void *buffer, size_t length) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	ssize_t Write(const void *buffer, size_t length) noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	struct ucred GetPeerCredentials() const noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	void Shutdown() noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	void ShutdownRead() noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/SocketDescriptor.hxx	/^	void ShutdownWrite() noexcept;$/;"	m	class:SocketDescriptor
noexcept	Net/StaticSocketAddress.hxx	/^	StaticSocketAddress &operator=(SocketAddress other) noexcept;$/;"	m	class:StaticSocketAddress
noexcept	Net/StaticSocketAddress.hxx	/^	StringView GetLocalRaw() const noexcept;$/;"	m	class:StaticSocketAddress
noexcept	Net/StaticSocketAddress.hxx	/^	bool SetPort(unsigned port) noexcept;$/;"	m	class:StaticSocketAddress
noexcept	OS/FileDescriptor.hxx	/^				       FileDescriptor &w) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^			       int flags) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^		  int flags, mode_t mode=0666) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool CheckDuplicate(FileDescriptor new_fd) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool CreateEventFD(unsigned initval=0) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool CreateInotify() noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool CreateSignalFD(const sigset_t *mask) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool IsPipe() const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool IsReadyForWriting() const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool IsRegularFile() const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool IsSocket() const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool IsValid() const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool Open(const char *pathname, int flags, mode_t mode=0666) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool Open(const wchar_t *pathname, int flags, mode_t mode=0666) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool OpenNonBlocking(const char *pathname) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool OpenReadOnly(const char *pathname) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	bool Rewind() noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	int Poll(short events, int timeout) const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	int WaitReadable(int timeout) const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	int WaitWritable(int timeout) const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	off_t GetSize() const noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	static bool CreatePipe(FileDescriptor &r, FileDescriptor &w) noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	void DisableCloseOnExec() noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	void EnableCloseOnExec() noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	void SetBlocking() noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/FileDescriptor.hxx	/^	void SetNonBlocking() noexcept;$/;"	m	class:FileDescriptor
noexcept	OS/UniqueFileDescriptor.hxx	/^	static bool CreatePipe(FileDescriptor &r, FileDescriptor &w) noexcept;$/;"	m	class:UniqueFileDescriptor
noexcept	Operation/Operation.hpp	/^  virtual void Sleep(std::chrono::steady_clock::duration duration) noexcept = 0;$/;"	m	class:OperationEnvironment
noexcept	PopupMessage.hpp	/^                  const TCHAR *Text) noexcept;$/;"	m	class:PopupMessage
noexcept	PopupMessage.hpp	/^                  std::chrono::steady_clock::time_point now) noexcept;$/;"	m	struct:PopupMessage::Message
noexcept	PopupMessage.hpp	/^             std::chrono::steady_clock::time_point now) noexcept;$/;"	m	struct:PopupMessage::Message
noexcept	PopupMessage.hpp	/^    bool Update(std::chrono::steady_clock::time_point now) noexcept;$/;"	m	struct:PopupMessage::Message
noexcept	Profile/Profile.hpp	/^  void Save() noexcept;$/;"	m	namespace:Profile
noexcept	RateLimiter.hpp	/^              std::chrono::steady_clock::duration _delay={}) noexcept;$/;"	m	class:RateLimiter
noexcept	Renderer/UnitSymbolRenderer.hpp	/^            const Pen &unit_fraction_pen) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	Renderer/UnitSymbolRenderer.hpp	/^  PixelSize GetSize(const Canvas &canvas, const Unit unit) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	Renderer/UnitSymbolRenderer.hpp	/^  PixelSize GetSize(const Font &font, const Unit unit) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	Renderer/UnitSymbolRenderer.hpp	/^  unsigned GetAscentHeight(const Font &font, const Unit unit) noexcept;$/;"	m	namespace:UnitSymbolRenderer
noexcept	Screen/ContainerWindow.hpp	/^  Window *EventChildAt(PixelPoint p) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  Window *FindNextControl(Window *reference) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  Window *FindPreviousControl(Window *reference) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  WindowReference GetFocusedWindowReference() noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  bool FocusFirstControl() noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  bool FocusNextControl() noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  bool FocusPreviousControl() noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  void AddChild(Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  void InvalidateChild(const Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  void ReleaseChildCapture(Window *window) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  void RemoveChild(Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  void SetActiveChild(Window &child) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/ContainerWindow.hpp	/^  void SetChildCapture(Window *window) noexcept;$/;"	m	class:ContainerWindow
noexcept	Screen/PaintWindow.hpp	/^  static bool register_class(HINSTANCE hInstance) noexcept;$/;"	m	class:PaintWindow
noexcept	Screen/Point.hpp	/^  constexpr PixelPoint(Args&&... args) noexcept$/;"	m	struct:PixelPoint
noexcept	Screen/Point.hpp	/^  constexpr PixelRect(PixelPoint origin, PixelSize size) noexcept$/;"	m	struct:PixelPoint::PixelRect
noexcept	Screen/Point.hpp	/^  constexpr PixelRect(RECT src) noexcept$/;"	m	struct:PixelPoint::PixelRect
noexcept	Screen/Point.hpp	/^  constexpr PixelRect(int _left, int _top, int _right, int _bottom) noexcept$/;"	m	struct:PixelPoint::PixelRect
noexcept	Screen/Point.hpp	/^  constexpr PixelSize(int _width, int _height) noexcept$/;"	m	struct:PixelPoint::PixelSize
noexcept	Screen/Point.hpp	/^  constexpr PixelSize(long _width, long _height) noexcept$/;"	m	struct:PixelPoint::PixelSize
noexcept	Screen/Point.hpp	/^  constexpr PixelSize(unsigned _width, unsigned _height) noexcept$/;"	m	struct:PixelPoint::PixelSize
noexcept	Screen/Point.hpp	/^  explicit constexpr PixelRect(PixelSize size) noexcept$/;"	m	struct:PixelPoint::PixelRect
noexcept	Screen/SingleWindow.hpp	/^  bool FilterEvent(const Event &event, Window *allowed) const noexcept;$/;"	m	class:SingleWindow
noexcept	Screen/SingleWindow.hpp	/^  bool FilterMouseEvent(PixelPoint pt, Window *allowed) const noexcept;$/;"	m	class:SingleWindow
noexcept	Screen/SingleWindow.hpp	/^  static bool RegisterClass(HINSTANCE hInstance) noexcept;$/;"	m	class:SingleWindow
noexcept	Screen/SingleWindow.hpp	/^  void AddDialog(WndForm *dialog) noexcept;$/;"	m	class:SingleWindow
noexcept	Screen/SingleWindow.hpp	/^  void CancelDialog() noexcept;$/;"	m	class:SingleWindow
noexcept	Screen/SingleWindow.hpp	/^  void RemoveDialog(WndForm *dialog) noexcept;$/;"	m	class:SingleWindow
noexcept	Screen/TopWindow.hpp	/^                    TopWindowStyle style) noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^              TopWindowStyle style=TopWindowStyle()) noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  bool CheckResumeSurface() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  bool IsVisible() const noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  bool ResumeSurface() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  int RunEventLoop() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  virtual bool OnActivate() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  virtual bool OnClose() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  virtual bool OnDeactivate() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  virtual void OnPause() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  virtual void OnResume() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void AnnounceResize(PixelSize _new_size) noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void CancelMode() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void CheckResize() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void Expose() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void Pause() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void PostQuit() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void Refresh() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void RefreshSize() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void Resume() noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void SetCaption(const TCHAR *caption) noexcept;$/;"	m	class:TopWindow
noexcept	Screen/TopWindow.hpp	/^  void SetDisplayOrientation(DisplayOrientation orientation) noexcept;$/;"	m	class:TopWindow
noexcept	Screen/Window.hpp	/^                                  WPARAM wParam, LPARAM lParam) noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^                            WPARAM wParam, LPARAM lParam) noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^              const WindowStyle window_style=WindowStyle()) noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  ContainerWindow *GetRootOwner() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  PixelRect GetParentClientRect() const noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  bool IsMaximised() const noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  virtual Window *GetFocusedWindow() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  virtual void ClearCapture() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  virtual void ClearFocus() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  virtual void Invalidate() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  virtual void SetFocus() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  virtual ~Window() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void AssertThread() const noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void AssertThreadOrUndefined() const noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void BringToBottom() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void BringToTop() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void CreateMessageWindow() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void Created(HWND _hWnd) noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void Destroy() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void FocusParent() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void Hide() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void ReleaseCapture() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void SetCapture() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void SetEnabled(bool enabled) noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void SetFont(const Font &_font) noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void Show() noexcept;$/;"	m	class:Window
noexcept	Screen/Window.hpp	/^  void ToScreen(PixelRect &rc) const noexcept;$/;"	m	class:Window
noexcept	Thread/StandbyThread.hpp	/^  virtual void Tick() noexcept = 0;$/;"	m	class:StandbyThread
noexcept	Thread/StandbyThread.hpp	/^  void WaitDone(std::unique_lock<Mutex> &lock) noexcept;$/;"	m	class:StandbyThread
noexcept	Thread/SuspensibleThread.hpp	/^                       std::chrono::steady_clock::duration timeout) noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  bool CheckStoppedOrSuspended() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  bool IsCommandPending() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  bool Start(bool suspended=false) noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  bool WaitForStopped(std::chrono::steady_clock::duration timeout) noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  bool _CheckStoppedOrSuspended(std::unique_lock<Mutex> &lock) noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  bool _IsCommandPending() const noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void BeginStop() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void BeginSuspend() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void Resume() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void Suspend() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void WaitUntilSuspended() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void _BeginStop() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void _BeginSuspend() noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/SuspensibleThread.hpp	/^  void _WaitUntilSuspended(std::unique_lock<Mutex> &lock) noexcept;$/;"	m	class:SuspensibleThread
noexcept	Thread/Thread.hpp	/^  bool Join(unsigned timeout_ms) noexcept;$/;"	m	class:Thread
noexcept	Thread/Thread.hpp	/^  bool Start() noexcept;$/;"	m	class:Thread
noexcept	Thread/Thread.hpp	/^  static DWORD WINAPI ThreadProc(LPVOID lpParameter) noexcept;$/;"	m	class:Thread
noexcept	Thread/Thread.hpp	/^  static void *ThreadProc(void *lpParameter) noexcept;$/;"	m	class:Thread
noexcept	Thread/Thread.hpp	/^  virtual void Run() noexcept = 0;$/;"	m	class:Thread
noexcept	Thread/Thread.hpp	/^  void Join() noexcept;$/;"	m	class:Thread
noexcept	Thread/Thread.hpp	/^  void SetIdlePriority() noexcept;$/;"	m	class:Thread
noexcept	Thread/WorkerThread.hpp	/^  virtual void Run() noexcept;$/;"	m	class:WorkerThread
noexcept	Thread/WorkerThread.hpp	/^  virtual void Tick() noexcept = 0;$/;"	m	class:WorkerThread
noexcept	Util/ConstBuffer.hxx	/^	constexpr ConstBuffer(const T (&_data)[_size]) noexcept$/;"	m	struct:ConstBuffer
noexcept	Util/ConstBuffer.hxx	/^	constexpr ConstBuffer(pointer _data, pointer _end) noexcept$/;"	m	struct:ConstBuffer
noexcept	Util/ConstBuffer.hxx	/^	constexpr ConstBuffer(pointer _data, size_type _size) noexcept$/;"	m	struct:ConstBuffer
noexcept	Util/ConstBuffer.hxx	/^	constexpr ConstBuffer(std::nullptr_t) noexcept$/;"	m	struct:ConstBuffer
noexcept	Util/QuadTree.hxx	/^			  position_type _right, position_type _bottom) noexcept$/;"	m	struct:QuadTree::Rectangle
noexcept	Util/QuadTree.hxx	/^		Bucket() noexcept$/;"	m	struct:Bucket
noexcept	Util/QuadTree.hxx	/^		LeafList() noexcept:head(nullptr), size(0) {}$/;"	m	struct:LeafList
noexcept	Util/QuadTree.hxx	/^		Point(position_type _x, position_type _y) noexcept$/;"	m	struct:QuadTree::Point
noexcept	Util/QuadTree.hxx	/^		explicit Leaf(U &&_value) noexcept$/;"	m	struct:QuadTree::Leaf
noexcept	Util/StringView.hxx	/^	BasicStringView(pointer _data) noexcept$/;"	m	struct:BasicStringView
noexcept	Util/StringView.hxx	/^	constexpr BasicStringView(pointer _begin, pointer _end) noexcept$/;"	m	struct:BasicStringView
noexcept	Util/StringView.hxx	/^	constexpr BasicStringView(pointer _data, size_type _size) noexcept$/;"	m	struct:BasicStringView
noexcept	Util/StringView.hxx	/^	constexpr BasicStringView(std::nullptr_t n) noexcept$/;"	m	struct:BasicStringView
noexcept	Util/StringView.hxx	/^	constexpr StringView(BasicStringView<value_type> src) noexcept$/;"	m	struct:StringView
noexcept	Util/StringView.hxx	/^	void StripLeft() noexcept;$/;"	m	struct:BasicStringView
noexcept	Util/StringView.hxx	/^	void StripRight() noexcept;$/;"	m	struct:BasicStringView
noexcept	Util/TStringView.hxx	/^	constexpr TStringView(StringView src) noexcept$/;"	m	struct:TStringView::TStringView
noexcept	Util/TStringView.hxx	/^	constexpr TStringView(WStringView src) noexcept$/;"	m	struct:TStringView
noexcept	Util/WStringView.hxx	/^	constexpr WStringView(BasicStringView<value_type> src) noexcept$/;"	m	struct:WStringView
noexcept	Util/WritableBuffer.hxx	/^	constexpr WritableBuffer(T (&_data)[_size]) noexcept$/;"	m	struct:WritableBuffer
noexcept	Util/WritableBuffer.hxx	/^	constexpr WritableBuffer(pointer _data, pointer _end) noexcept$/;"	m	struct:WritableBuffer
noexcept	Util/WritableBuffer.hxx	/^	constexpr WritableBuffer(pointer _data, size_type _size) noexcept$/;"	m	struct:WritableBuffer
noexcept	Util/WritableBuffer.hxx	/^	constexpr WritableBuffer(std::nullptr_t) noexcept$/;"	m	struct:WritableBuffer
noexcept	Widget/TextListWidget.hpp	/^  virtual const TCHAR *GetRowText(unsigned i) const noexcept = 0;$/;"	m	class:TextListWidget
nominal_points	Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPointVector nominal_points;$/;"	m	class:SampledTaskPoint
noncircling_climb_percentage	NMEA/CirclingInfo.hpp	/^  double noncircling_climb_percentage;$/;"	m	struct:CirclingInfo
noncomp_vario	NMEA/Info.hpp	/^  double noncomp_vario;$/;"	m	struct:NMEAInfo
noncomp_vario_available	NMEA/Info.hpp	/^  Validity noncomp_vario_available;$/;"	m	struct:NMEAInfo
nonexpiring_internal_gps	NMEA/GPSState.hpp	/^  bool nonexpiring_internal_gps;$/;"	m	struct:GPSState
norm	Geo/SpeedVector.hpp	/^  double norm;$/;"	m	struct:SpeedVector
norm	Topography/shapelib/mapsearch.c	375;"	d	file:
normal	Computer/WaveResult.hpp	/^  Angle normal;$/;"	m	struct:WaveInfo
north_up	Gauge/TrafficSettings.hpp	/^  bool north_up;$/;"	m	struct:TrafficSettings
northing	Geo/UTM.hpp	/^  double easting, northing;$/;"	m	struct:UTM
notify	Job/Async.hpp	/^  Notify *notify;$/;"	m	class:final
notrack	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
now_reachable	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  bool now_reachable;$/;"	m	class:final
npilots	Device/Driver/Volkslogger/vlapi2.h	/^    int npilots;$/;"	m	struct:VLAPI_DATA::DATABASE
nroutes	Device/Driver/Volkslogger/vlapi2.h	/^    int nroutes;$/;"	m	struct:VLAPI_DATA::DATABASE
ntiles	Topography/shapelib/mapserver.h	/^    int ntiles;$/;"	m	struct:imageObj
nturnpoints	Device/Driver/Volkslogger/vlapi2.h	/^      unsigned nturnpoints;$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
null_acktime	Engine/Airspace/AirspaceWarning.hpp	/^  static constexpr unsigned null_acktime = -1;$/;"	m	class:AirspaceWarning
null_delta	Engine/Trace/Trace.hpp	/^  static constexpr unsigned null_delta = 0 - 1;$/;"	m	class:Trace
null_stats	Engine/Task/TaskManager.hpp	/^  TaskStats null_stats;$/;"	m	class:TaskManager
null_time	Engine/Trace/Trace.hpp	/^  static constexpr unsigned null_time = 0 - 1;$/;"	m	class:Trace
nulldec	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_bitstream_t *nulldec;$/;"	m	struct:__anon145
nullptr	Engine/Airspace/Minimum.hpp	/^         typename Result=decltype(((Func *)nullptr)->operator()(*(const AbstractAirspace *)nullptr)),$/;"	v
num	Device/Driver/LX/LXN.hpp	/^    unsigned num;$/;"	m	struct:LXN::ExtensionConfig
num	Replay/CatmullRomInterpolator.hpp	/^  unsigned num;$/;"	m	class:CatmullRomInterpolator
num_allocated_rendered_members	Topography/shapelib/mapserver.h	/^    int num_allocated_rendered_members;$/;"	m	struct:__anon49
num_available	Util/SliceAllocator.hxx	/^		unsigned num_available;$/;"	m	struct:SliceAllocator::Area
num_blocks	Device/Driver/CAI302/Protocol.hpp	/^    PackedBE16 num_blocks;$/;"	m	struct:CAI302::FileASCII
num_buffers	Screen/OpenGL/Buffer.cpp	/^unsigned num_buffers;$/;"	v
num_buttons	Widget/KeyboardWidget.hpp	/^  unsigned num_buttons;$/;"	m	class:KeyboardWidget
num_bytes	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t num_bytes[3];$/;"	m	struct:CAI302::FileBinary
num_columns	Form/GridView.hpp	/^  unsigned num_columns;$/;"	m	class:GridView
num_files	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t num_files;$/;"	m	struct:CAI302::FileList
num_follow_labels	Topography/shapelib/mapserver.h	/^    int num_follow_labels;$/;"	m	struct:label_follow_result
num_items	Dialogs/ListPicker.cpp	/^  unsigned num_items;$/;"	m	class:ListPickerWidget	file:
num_label_points	Topography/shapelib/mapserver.h	/^    int num_label_points;$/;"	m	struct:label_auto_result
num_lines	Topography/XShape.hpp	/^  uint8_t num_lines;$/;"	m	class:XShape
num_marker_segments	Terrain/RasterTileCache.hpp	/^    unsigned num_marker_segments;$/;"	m	struct:RasterTileCache::CacheHeader
num_points	Topography/ShapeRenderer.hpp	/^  unsigned num_points;$/;"	m	class:ShapeRenderer
num_port_types	Dialogs/Device/DeviceEditWidget.cpp	/^static constexpr unsigned num_port_types = ARRAY_SIZE(port_types) - 1;$/;"	v	file:
num_raster_points	MapWindow/MapCanvas.hpp	/^  unsigned num_raster_points;$/;"	m	class:MapCanvas
num_rendered_members	Topography/shapelib/mapserver.h	/^    int num_rendered_members;$/;"	m	struct:__anon49
num_rows	Form/GridView.hpp	/^  unsigned num_rows;$/;"	m	class:GridView
num_stages	Engine/PathSolvers/NavDijkstra.hpp	/^  unsigned num_stages;$/;"	m	class:NavDijkstra
num_strings	Language/MOFile.hpp	/^    uint32_t num_strings;$/;"	m	struct:MOFile::mo_header
num_textures	Screen/OpenGL/Texture.cpp	/^unsigned num_textures;$/;"	v
num_tps	Device/Driver/LX/LXN.hpp	/^    int8_t num_tps;$/;"	m	struct:LXN::Task
num_turnpoints	IGC/IGCDeclaration.hpp	/^  unsigned num_turnpoints;$/;"	m	struct:IGCDeclarationHeader
numattrs	Terrain/jasper/jas_icc.h	/^	int numattrs;$/;"	m	struct:__anon191
numbands	Terrain/jasper/jpc/jpc_dec.h	/^	int numbands;$/;"	m	struct:__anon148
numbindings	Topography/shapelib/mapserver.h	/^    int numbindings;$/;"	m	struct:labelObj
numbindings	Topography/shapelib/mapserver.h	/^    int numbindings;$/;"	m	struct:styleObj
numbps	Terrain/jasper/jpc/jpc_dec.h	/^	int numbps;$/;"	m	struct:__anon147
numcblks	Terrain/jasper/jpc/jpc_dec.h	/^	int numcblks;$/;"	m	struct:__anon146
numchans	Terrain/jasper/jas_cm.h	/^	int numchans;$/;"	m	struct:__anon104
numchans	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numchans;$/;"	m	struct:__anon114
numchans	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numchans;$/;"	m	struct:__anon116
numchans	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t numchans;$/;"	m	struct:__anon112
numclasses	Topography/shapelib/mapserver.h	/^    int numclasses;$/;"	m	struct:layerObj
numcmpts	Terrain/jasper/jas_cm.h	/^	int numcmpts;$/;"	m	struct:__anon95
numcmpts	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numcmpts;$/;"	m	struct:__anon109
numcmpts	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numcmpts;$/;"	m	struct:__anon110
numcmpts_	Terrain/jasper/jas_image.h	/^	int numcmpts_;$/;"	m	struct:__anon124
numcolors	Topography/shapelib/mapserver.h	/^    int numcolors;$/;"	m	struct:__anon32
numcols_	Terrain/jasper/jas_seq.h	/^	jas_matind_t numcols_;$/;"	m	struct:jas_matrix
numcompatcodes	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t numcompatcodes;$/;"	m	struct:__anon108
numcomps	Terrain/jasper/jpc/jpc_cs.h	/^	int numcomps;$/;"	m	struct:__anon176
numcomps	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t numcomps;$/;"	m	struct:__anon157
numcomps	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t numcomps;$/;"	m	struct:__anon160
numcomps	Terrain/jasper/jpc/jpc_dec.h	/^	int numcomps;$/;"	m	struct:__anon143
numcomps	Terrain/jasper/jpc/jpc_dec.h	/^	int numcomps;$/;"	m	struct:__anon152
numcomps	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numcomps;$/;"	m	struct:__anon138
numdecimals	Topography/shapelib/mapprimitive.h	/^  short numdecimals;$/;"	m	struct:__anon80
numdlvls	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t numdlvls;$/;"	m	struct:__anon162
numents	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t numents;$/;"	m	struct:__anon182
numents	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t numents;$/;"	m	struct:__anon192
numents	Terrain/jasper/jpc/jpc_dec.h	/^	int numents;$/;"	m	struct:__anon140
numfonts	Topography/shapelib/mapserver.h	/^    int numfonts;$/;"	m	struct:__anon31
numfonts	Topography/shapelib/mapserver.h	/^    int numfonts;$/;"	m	struct:__anon71
numformatoptions	Topography/shapelib/mapserver.h	/^    int  numformatoptions;$/;"	m	struct:__anon39
numglyphs	Topography/shapelib/mapserver.h	/^  int numglyphs;$/;"	m	struct:textPathObj
numguard	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t numguard;$/;"	m	struct:__anon166
numguardbits	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t numguardbits;$/;"	m	struct:__anon142
numhcblks	Terrain/jasper/jpc/jpc_dec.h	/^	int numhcblks;$/;"	m	struct:__anon146
numhprcs	Terrain/jasper/jpc/jpc_dec.h	/^	int numhprcs;$/;"	m	struct:__anon148
numhprcs	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numhprcs;$/;"	m	struct:__anon136
numhtiles	Terrain/jasper/jpc/jpc_dec.h	/^	int numhtiles;$/;"	m	struct:__anon152
numimsbs	Terrain/jasper/jpc/jpc_dec.h	/^	int numimsbs;$/;"	m	struct:__anon145
numimsbstagtree	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_tagtree_t *numimsbstagtree;$/;"	m	struct:__anon146
numinchans	Terrain/jasper/jas_cm.h	/^	int numinchans;$/;"	m	struct:__anon103
numinchans	Terrain/jasper/jas_cm.h	/^	int numinchans;$/;"	m	struct:jas_cmpxform_s
numinchans	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t numinchans;$/;"	m	struct:__anon185
numinchans	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t numinchans;$/;"	m	struct:__anon186
numintabents	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t numintabents;$/;"	m	struct:__anon185
numintabents	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t numintabents;$/;"	m	struct:__anon186
numitems	Topography/shapelib/mapserver.h	/^    int numitems;$/;"	m	struct:__anon38
numitems	Topography/shapelib/mapserver.h	/^    int numitems;$/;"	m	struct:layerObj
numjoins	Topography/shapelib/mapserver.h	/^    int numjoins;$/;"	m	struct:layerObj
numlabels	Topography/shapelib/mapserver.h	/^    int numlabels;$/;"	m	struct:__anon48
numlabels	Topography/shapelib/mapserver.h	/^    int numlabels;$/;"	m	struct:classObj
numlayers	Topography/shapelib/mapserver.h	/^    int numlayers; \/* number of layers in mapfile *\/$/;"	m	struct:mapObj
numleafsh_	Terrain/jasper/jpc/jpc_tagtree.h	/^	int numleafsh_;$/;"	m	struct:__anon132
numleafsv_	Terrain/jasper/jpc/jpc_tagtree.h	/^	int numleafsv_;$/;"	m	struct:__anon132
numlenbits	Terrain/jasper/jpc/jpc_dec.h	/^	int numlenbits;$/;"	m	struct:__anon145
numlines	Topography/shapelib/mapprimitive.h	/^  int numlines;$/;"	m	struct:__anon79
numlines	Topography/shapelib/mapserver.h	/^  int numlines;$/;"	m	struct:textPathObj
numlutents	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t numlutents;$/;"	m	struct:__anon112
numlvls	Terrain/jasper/jpc/jpc_tsfb.h	/^	int numlvls;$/;"	m	struct:__anon131
numlyrs	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t numlyrs;$/;"	m	struct:__anon163
numlyrs	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t numlyrs;$/;"	m	struct:__anon143
numlyrs	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numlyrs;$/;"	m	struct:__anon138
nummarkers	Topography/shapelib/mapserver.h	/^    int nummarkers;$/;"	m	struct:__anon48
numnodes_	Terrain/jasper/jpc/jpc_tagtree.h	/^	int numnodes_;$/;"	m	struct:__anon132
numoutchans	Terrain/jasper/jas_cm.h	/^	int numoutchans;$/;"	m	struct:__anon103
numoutchans	Terrain/jasper/jas_cm.h	/^	int numoutchans;$/;"	m	struct:jas_cmpxform_s
numoutchans	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t numoutchans;$/;"	m	struct:__anon185
numoutchans	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t numoutchans;$/;"	m	struct:__anon186
numoutputformats	Topography/shapelib/mapserver.h	/^    int numoutputformats;$/;"	m	struct:mapObj
numouttabents	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t numouttabents;$/;"	m	struct:__anon185
numouttabents	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t numouttabents;$/;"	m	struct:__anon186
numparts	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t numparts;$/;"	m	struct:__anon158
numparts	Terrain/jasper/jpc/jpc_dec.h	/^	int numparts;$/;"	m	struct:__anon150
numpasses	Terrain/jasper/jpc/jpc_dec.h	/^	int numpasses;$/;"	m	struct:__anon145
numpasses	Terrain/jasper/jpc/jpc_dec.h	/^	int numpasses;$/;"	m	struct:jpc_dec_seg_s
numpchgs	Terrain/jasper/jpc/jpc_cs.h	/^	int numpchgs;$/;"	m	struct:__anon170
numpchgs	Terrain/jasper/jpc/jpc_t2cod.h	/^	int numpchgs;$/;"	m	struct:__anon135
numpkts	Terrain/jasper/jpc/jpc_dec.h	/^	int numpkts;$/;"	m	struct:__anon152
numpoints	Topography/shapelib/mapprimitive.h	/^  int numpoints;$/;"	m	struct:__anon78
numprcs	Terrain/jasper/jpc/jpc_dec.h	/^	int numprcs;$/;"	m	struct:__anon148
numprcs	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numprcs;$/;"	m	struct:__anon136
numprocessing	Topography/shapelib/mapserver.h	/^    int numprocessing;$/;"	m	struct:layerObj
numpxforms	Terrain/jasper/jas_cm.h	/^	int numpxforms;$/;"	m	struct:__anon102
numrefchans	Terrain/jasper/jas_cm.h	/^	int numrefchans;$/;"	m	struct:__anon104
numresults	Topography/shapelib/mapserver.h	/^    int numresults;$/;"	m	struct:__anon51
numrlvls	Terrain/jasper/jpc/jpc_cs.h	/^	int numrlvls;$/;"	m	struct:__anon162
numrlvls	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t numrlvls;$/;"	m	struct:__anon142
numrlvls	Terrain/jasper/jpc/jpc_dec.h	/^	unsigned numrlvls;$/;"	m	struct:__anon149
numrlvls	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned numrlvls;$/;"	m	struct:__anon137
numrows_	Terrain/jasper/jas_seq.h	/^	jas_matind_t numrows_;$/;"	m	struct:jas_matrix
numscaletokens	Topography/shapelib/mapserver.h	/^    int numscaletokens;$/;"	m	struct:layerObj
numshapes	Topography/shapelib/mapshape.h	/^    int numshapes; \/* number of shapes *\/$/;"	m	struct:__anon85
numshapes	Topography/shapelib/maptree.h	/^    ms_int32 numshapes;$/;"	m	struct:__anon87
numshapes	Topography/shapelib/maptree.h	/^    ms_int32 numshapes;$/;"	m	struct:shape_tree_node
numstepsizes	Terrain/jasper/jpc/jpc_cs.h	/^	int numstepsizes;$/;"	m	struct:__anon166
numstepsizes	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t numstepsizes;$/;"	m	struct:__anon142
numstreams	Terrain/jasper/jpc/jpc_dec.h	/^	int numstreams;$/;"	m	struct:__anon141
numstyles	Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:__anon43
numstyles	Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:__anon46
numstyles	Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:classObj
numstyles	Topography/shapelib/mapserver.h	/^    int numstyles;$/;"	m	struct:labelObj
numsubnodes	Topography/shapelib/maptree.h	/^    int numsubnodes;$/;"	m	struct:shape_tree_node
numsymbols	Topography/shapelib/mapserver.h	/^    int numsymbols;$/;"	m	struct:__anon52
numtextsymbols	Topography/shapelib/mapserver.h	/^    int numtextsymbols;$/;"	m	struct:__anon46
numtiles	Terrain/jasper/jpc/jpc_dec.h	/^	int numtiles;$/;"	m	struct:__anon152
numtps	Device/Driver/LX/Protocol.hpp	/^    uint8_t numtps;$/;"	m	struct:LX::Declaration
numtps	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t numtps;$/;"	m	struct:LXEra::Declaration
numvalues	Topography/shapelib/mapprimitive.h	/^  int numvalues;$/;"	m	struct:__anon79
numvcblks	Terrain/jasper/jpc/jpc_dec.h	/^	int numvcblks;$/;"	m	struct:__anon146
numvprcs	Terrain/jasper/jpc/jpc_dec.h	/^	int numvprcs;$/;"	m	struct:__anon148
numvtiles	Terrain/jasper/jpc/jpc_dec.h	/^	int numvtiles;$/;"	m	struct:__anon152
nunchuck	Device/Descriptor.hpp	/^  NunchuckDevice *nunchuck;$/;"	m	class:final
nunchuck_class	Android/NunchuckDevice.cpp	/^static Java::TrivialClass nunchuck_class;$/;"	v	file:
nunchuck_ctor	Android/NunchuckDevice.cpp	/^static jmethodID nunchuck_ctor, close_method;$/;"	v	file:
nwidth	Gauge/GaugeVario.hpp	/^    unsigned nlength0, nlength1, nwidth, nline;$/;"	m	struct:GaugeVario::Geometry
nwpts	Device/Driver/Volkslogger/vlapi2.h	/^    int nwpts;$/;"	m	struct:VLAPI_DATA::DATABASE
obj	Android/BMP085Device.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	Android/GliderLink.hpp	/^  Java::GlobalObject obj;$/;"	m	class:GliderLink
obj	Android/I2CbaroDevice.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	Android/NativeView.hpp	/^  Java::GlobalObject obj;$/;"	m	class:NativeView
obj	Android/NunchuckDevice.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj	Android/VoltageDevice.hpp	/^  Java::GlobalObject obj;$/;"	m	class:final
obj_	Terrain/jasper/jas_stream.h	/^	jas_stream_obj_t *obj_;$/;"	m	struct:__anon120
obj_InternalGPS_	Android/InternalSensors.hpp	/^  Java::GlobalObject obj_InternalGPS_;$/;"	m	class:InternalSensors
obj_NonGPSSensors_	Android/InternalSensors.hpp	/^  Java::GlobalObject obj_NonGPSSensors_;$/;"	m	class:InternalSensors
object	Android/DownloadManager.hpp	/^  Java::GlobalObject object;$/;"	m	class:AndroidDownloadManager
object	Android/Vibrator.hpp	/^  Java::GlobalObject object;$/;"	m	class:Vibrator
object	Audio/SLES/Object.hpp	/^    SLObjectItf object;$/;"	m	class:SLES::Object
observer	Device/Driver/LX/LXN.hpp	/^    char observer[10];$/;"	m	struct:LXN::FlightInfo
obstacle_icon	Look/WaypointLook.hpp	/^  MaskedIcon mountain_top_icon, bridge_icon, obstacle_icon;$/;"	m	struct:WaypointLook
obstacle_version	FLARM/Version.hpp	/^  NarrowString<19> obstacle_version;$/;"	m	struct:FlarmVersion
oct2	Screen/Memory/Murphy.hpp	/^  int oct2;$/;"	m	struct:MurphyIterator
oes_draw_texture	Screen/OpenGL/Globals.cpp	/^  bool oes_draw_texture;$/;"	m	namespace:OpenGL	file:
off	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t off;$/;"	m	struct:jas_icctagtabent_s
off	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t off;$/;"	m	struct:__anon179
offset	Android/VoltageDevice.hpp	/^  double offset;$/;"	m	class:final
offset	Audio/PCMBufferDataSource.hpp	/^  unsigned offset;$/;"	m	class:PCMBufferDataSource
offset	Gauge/GaugeVario.hpp	/^    IntPoint2D offset;$/;"	m	struct:GaugeVario::Geometry
offset	Language/MOFile.hpp	/^    uint32_t offset;$/;"	m	struct:MOFile::mo_table_entry
offset	Screen/OpenGL/Canvas.hpp	/^  PixelPoint offset = {0, 0};$/;"	m	class:Canvas
offset	Topography/XShape.hpp	/^  mutable unsigned offset;$/;"	m	class:XShape
offset	zzip/file.h	/^    zzip_off_t offset; \/* offset from the start of zipfile... *\/$/;"	m	struct:zzip_file
offset_history	MapWindow/GlueMapWindow.hpp	/^  OffsetHistory offset_history;$/;"	m	class:GlueMapWindow
offset_to_user	Units/Descriptor.hpp	/^  double offset_to_user;$/;"	m	struct:UnitDescriptor
offsets	MapWindow/GlueMapWindow.hpp	/^  std::array<PixelPoint, 30> offsets;$/;"	m	class:OffsetHistory
offsets	Widget/OffsetButtonsWidget.hpp	/^  const double offsets[4];$/;"	m	class:OffsetButtonsWidget
offsetx	Topography/shapelib/mapserver.h	/^    double offsetx, offsety; \/* for shadows, hollow symbols, etc... *\/$/;"	m	struct:styleObj
offsetx	Topography/shapelib/mapserver.h	/^    int offsetx, offsety;$/;"	m	struct:labelObj
offsetx	Topography/shapelib/mapserver.h	/^    int offsetx;$/;"	m	struct:__anon54
offsety	Topography/shapelib/mapserver.h	/^    double offsetx, offsety; \/* for shadows, hollow symbols, etc... *\/$/;"	m	struct:styleObj
offsety	Topography/shapelib/mapserver.h	/^    int offsetx, offsety;$/;"	m	struct:labelObj
offsety	Topography/shapelib/mapserver.h	/^    int offsety;$/;"	m	struct:__anon54
offsite	Topography/shapelib/mapserver.h	/^    colorObj offsite; \/* transparent pixel value for raster images *\/$/;"	m	struct:layerObj
ok	Math/Filter.hpp	/^  bool ok;$/;"	m	class:Filter
olc_classic	Engine/Contest/ContestManager.hpp	/^  OLCClassic olc_classic;$/;"	m	class:ContestManager
olc_fai	Engine/Contest/ContestManager.hpp	/^  OLCFAI olc_fai;$/;"	m	class:ContestManager
olc_league	Engine/Contest/ContestManager.hpp	/^  OLCLeague olc_league;$/;"	m	class:ContestManager
olc_plus	Engine/Contest/ContestManager.hpp	/^  OLCPlus olc_plus;$/;"	m	class:ContestManager
olc_sprint	Engine/Contest/ContestManager.hpp	/^  OLCSprint olc_sprint;$/;"	m	class:ContestManager
old	Device/SettingsMap.hpp	/^    bool old;$/;"	m	struct:DeviceSettingsMap::Item
old_baud_rate	Device/Driver/LX/Internal.hpp	/^  unsigned old_baud_rate;$/;"	m	class:LXDevice
old_baud_rate	Device/Driver/LXERA/Internal.hpp	/^  unsigned old_baud_rate;$/;"	m	class:LXEraDevice
old_configured	Kobo/WifiDialog.cpp	/^    bool old_visible, old_configured;$/;"	m	struct:final::NetworkInfo	file:
old_cursor	Screen/Busy.hpp	/^  HCURSOR old_cursor;$/;"	m	class:ScopeBusyIndicator
old_orientation	Screen/OpenGL/BufferCanvas.hpp	/^  DisplayOrientation old_orientation;$/;"	m	class:DisplayOrientation
old_projection_matrix	Screen/OpenGL/BufferCanvas.hpp	/^  glm::mat4 old_projection_matrix;$/;"	m	class:DisplayOrientation
old_size	Screen/OpenGL/BufferCanvas.hpp	/^  UnsignedPoint2D old_size;$/;"	m	class:DisplayOrientation
old_temperatur_units	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t old_temperatur_units; \/\/ 0 = Celcius, 1 = Farenheight$/;"	m	struct:CAI302::Pilot
old_translate	Screen/OpenGL/BufferCanvas.hpp	/^  PixelPoint old_translate;$/;"	m	class:DisplayOrientation
old_units	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t old_units; \/\/ old unit$/;"	m	struct:CAI302::Pilot
old_viewport	Screen/OpenGL/BufferCanvas.hpp	/^  GLint old_viewport[4];$/;"	m	class:DisplayOrientation
old_visible	Kobo/WifiDialog.cpp	/^    bool old_visible, old_configured;$/;"	m	struct:final::NetworkInfo	file:
oldest_path	Logger/IGCFileCleanup.cpp	/^  StaticString<MAX_PATH> oldest_path;$/;"	m	class:OldIGCFileFinder	file:
oldest_time	Logger/IGCFileCleanup.cpp	/^  time_t oldest_time;$/;"	m	class:OldIGCFileFinder	file:
onBMP085Error	Android/BMP085Device.cpp	/^BMP085Device::onBMP085Error()$/;"	f	class:BMP085Device
onBMP085Values	Android/BMP085Device.cpp	/^BMP085Device::onBMP085Values(double temperature,$/;"	f	class:BMP085Device
onI2CbaroError	Android/I2CbaroDevice.cpp	/^I2CbaroDevice::onI2CbaroError()$/;"	f	class:I2CbaroDevice
onI2CbaroValues	Android/I2CbaroDevice.cpp	/^I2CbaroDevice::onI2CbaroValues(unsigned sensor, AtmosphericPressure pressure)$/;"	f	class:I2CbaroDevice
onNunchuckError	Android/NunchuckDevice.cpp	/^NunchuckDevice::onNunchuckError()$/;"	f	class:NunchuckDevice
onNunchuckValues	Android/NunchuckDevice.cpp	/^NunchuckDevice::onNunchuckValues(int joy_x, int joy_y, int acc_x, int acc_y, int acc_z, int switches)$/;"	f	class:NunchuckDevice
onVoltageError	Android/VoltageDevice.cpp	/^VoltageDevice::onVoltageError()$/;"	f	class:VoltageDevice
onVoltageValues	Android/VoltageDevice.cpp	/^VoltageDevice::onVoltageValues(int temp_adc, int voltage_index, int volt_adc)$/;"	f	class:VoltageDevice
on_character	Form/CharacterButton.hpp	/^  OnCharacterCallback on_character;$/;"	m	class:CharacterButton
on_character	Widget/KeyboardWidget.hpp	/^  OnCharacterCallback_t on_character;$/;"	m	class:KeyboardWidget
on_ground	NMEA/FlyingState.hpp	/^  bool on_ground;$/;"	m	struct:FlyingState
only_cache_result_count	Topography/shapelib/mapserver.h	/^    int  only_cache_result_count; \/* set to 1 sometimes by WFS 2.0 GetFeature request *\/$/;"	m	struct:__anon40
opacity	Topography/shapelib/mapserver.h	/^    int opacity;$/;"	m	struct:_LayerCompositer
opacity	Topography/shapelib/mapserver.h	/^    int opacity;$/;"	m	struct:styleObj
open	Dialogs/Device/DeviceListDialog.cpp	/^    bool open:1, error:1;$/;"	m	struct:final::Flags	file:
open	zzip/plugin.h	/^    int          (*open)(zzip_char_t* name, int flags, ...);$/;"	m	struct:zzip_plugin_io
openConnection	Java/URL.cxx	/^Java::URL::openConnection(JNIEnv *env, const char *url)$/;"	f	class:Java::URL
openConnection	Java/URL.hxx	/^		static jobject openConnection(JNIEnv *env, jobject url) {$/;"	f	class:Java::URL
openConnection_method	Java/URL.cxx	/^jmethodID Java::URL::openConnection_method;$/;"	m	class:Java::URL	file:
openConnection_method	Java/URL.hxx	/^		static jmethodID ctor, openConnection_method;$/;"	m	class:Java::URL
openFile	Android/NativeView.hpp	/^  void openFile(const char *pathName) {$/;"	f	class:NativeView
openUart	Android/IOIOHelper.cpp	/^IOIOHelper::openUart(JNIEnv *env, unsigned ID, unsigned baud)$/;"	f	class:IOIOHelper
openUart_method	Android/IOIOHelper.cpp	/^  IOIOHelper::openUart_method,$/;"	m	class:IOIOHelper	file:
openUart_method	Android/IOIOHelper.hpp	/^  static jmethodID openUart_method;$/;"	m	class:IOIOHelper
open_dbb	Device/Driver/Volkslogger/dbbconv.cpp	/^void DBB::open_dbb() {$/;"	f	class:DBB
open_file_method	Android/NativeView.cpp	/^jmethodID NativeView::open_file_method;$/;"	m	class:NativeView	file:
open_file_method	Android/NativeView.hpp	/^  static jmethodID open_file_method;$/;"	m	class:NativeView
open_job	Device/Descriptor.hpp	/^  OpenDeviceJob *open_job;$/;"	m	class:final
open_method	Android/IOIOHelper.hpp	/^  static jmethodID open_method;$/;"	m	class:IOIOHelper
open_time_span	Engine/Task/Ordered/StartConstraints.hpp	/^  RoughTimeSpan open_time_span;$/;"	m	struct:StartConstraints
open_vario_driver	Device/Driver/OpenVario.cpp	/^const struct DeviceRegister open_vario_driver = {$/;"	v	typeref:struct:DeviceRegister
openmode_	Terrain/jasper/jas_stream.h	/^	int openmode_;$/;"	m	struct:__anon120
openmode_	Terrain/jasper/jpc/jpc_bs.h	/^	int openmode_;$/;"	m	struct:__anon129
operator !=	Atmosphere/Temperature.hpp	/^  constexpr bool operator!=(Temperature other) const {$/;"	f	class:Temperature
operator !=	Device/SettingsMap.hpp	/^    bool operator!=(const const_iterator &other) const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator !=	Dialogs/Device/DeviceListDialog.cpp	/^    bool operator!=(const Item &other) const {$/;"	f	union:final::Item
operator !=	Engine/Trace/Trace.cpp	/^  bool operator!=(const PointerIterator<I> &other) const {$/;"	f	class:PointerIterator
operator !=	Form/TabMenuDisplay.hpp	/^    bool operator!=(const MenuTabIndex &other) const {$/;"	f	struct:final::MenuTabIndex
operator !=	Geo/Flat/FlatGeoPoint.hpp	/^  bool operator!=(const FlatGeoPoint other) const {$/;"	f	struct:FlatGeoPoint
operator !=	Geo/GeoPoint.hpp	/^  bool operator !=(const GeoPoint &other) const {$/;"	f	struct:GeoPoint
operator !=	IO/FileCache.cpp	/^  bool operator!=(const FileInfo &other) const {$/;"	f	struct:FileInfo
operator !=	Math/Angle.hpp	/^  operator!=(const Angle x) const$/;"	f	class:Angle
operator !=	NMEA/Validity.hpp	/^  constexpr bool operator!=(const Validity &other) const {$/;"	f	class:Validity
operator !=	OS/Path.hpp	/^  bool operator!=(Path other) const {$/;"	f	class:AllocatedPath
operator !=	OS/Path.hpp	/^  bool operator!=(Path other) const {$/;"	f	class:Path
operator !=	OS/Path.hpp	/^  bool operator!=(std::nullptr_t) const {$/;"	f	class:AllocatedPath
operator !=	OS/Path.hpp	/^  constexpr bool operator!=(std::nullptr_t) const {$/;"	f	class:Path
operator !=	PageSettings.hpp	/^    bool operator!=(const InfoBoxConfig &other) const {$/;"	f	struct:PageLayout::InfoBoxConfig
operator !=	PageSettings.hpp	/^  bool operator!=(const PageLayout &other) const {$/;"	f	struct:PageLayout
operator !=	ResourceId.hpp	/^  constexpr bool operator!=(ResourceId other) const {$/;"	f	class:ResourceId
operator !=	Rough/RoughAltitude.hpp	/^  bool operator !=(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator !=	Screen/GDI/Color.hpp	/^operator !=(const Color a, const Color b)$/;"	f
operator !=	Screen/Memory/Color.hpp	/^  bool operator !=(const Color other) const$/;"	f	class:Color
operator !=	Screen/OpenGL/Color.hpp	/^  bool operator !=(const Color other) const$/;"	f	class:Color
operator !=	Screen/PortableColor.hpp	/^  constexpr bool operator !=(const BGR8Color other) const {$/;"	f	class:BGR8Color
operator !=	Screen/PortableColor.hpp	/^  constexpr bool operator !=(const BGRA8Color other) const {$/;"	f	class:BGRA8Color
operator !=	Screen/PortableColor.hpp	/^  constexpr bool operator !=(const Luminosity8 other) const {$/;"	f	class:Luminosity8
operator !=	Screen/PortableColor.hpp	/^  constexpr bool operator !=(const RGB8Color other) const {$/;"	f	class:RGB8Color
operator !=	Terrain/TerrainSettings.hpp	/^  bool operator!=(const TerrainRendererSettings &other) const {$/;"	f	struct:TerrainRendererSettings
operator !=	Time/RoughTime.hpp	/^  constexpr bool operator !=(RoughTime other) const {$/;"	f	class:RoughTime
operator !=	Time/RoughTime.hpp	/^  constexpr bool operator!=(RoughTimeDelta other) const {$/;"	f	class:RoughTimeDelta
operator !=	Topography/TopographyFile.hpp	/^    bool operator!=(const const_iterator &other) const {$/;"	f	class:TopographyFile::const_iterator
operator !=	Util/CastIterator.hpp	/^  bool operator!=(const CastIterator<VT,IT> &other) const {$/;"	f	class:CastIterator
operator !=	Util/IterableSplitString.hxx	/^		constexpr bool operator!=(Iterator other) const {$/;"	f	class:BasicIterableSplitString::final
operator !=	Util/OverwritingRingBuffer.hpp	/^    bool operator!=(const const_iterator &other) const {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator !=	Util/Serial.hpp	/^  bool operator!=(const Serial other) const {$/;"	f	class:Serial
operator !=	Util/StaticString.hxx	/^	bool operator !=(const_pointer value) const {$/;"	f	class:StaticStringBase
operator &	Net/IPv6Address.cxx	/^IPv6Address::operator&(const IPv6Address &other) const$/;"	f	class:IPv6Address
operator ()	Airspace/ActivePredicate.cpp	/^ActiveAirspacePredicate::operator()(const AbstractAirspace &airspace) const$/;"	f	class:ActiveAirspacePredicate
operator ()	Airspace/AirspaceVisibility.cpp	/^AirspaceVisibility::operator()(const AbstractAirspace &airspace) const$/;"	f	class:AirspaceVisibility
operator ()	Airspace/NearestAirspace.cpp	/^  bool operator()(const NearestAirspace &a, const NearestAirspace &b) const {$/;"	f	struct:CompareNearestAirspace
operator ()	Cloud/Client.hpp	/^    bool operator()(const CloudClient &a, const CloudClient &b) const {$/;"	f	struct:CloudClient::IdCompare
operator ()	Cloud/Client.hpp	/^    bool operator()(const CloudClient &a, const CloudClient &b) const {$/;"	f	struct:CloudClient::KeyEqual
operator ()	Cloud/Client.hpp	/^    bool operator()(uint64_t a, const CloudClient &b) const {$/;"	f	struct:CloudClient::KeyEqual
operator ()	Cloud/Client.hpp	/^    bool operator()(unsigned a, const CloudClient &b) const {$/;"	f	struct:CloudClient::IdCompare
operator ()	Cloud/Client.hpp	/^    constexpr std::size_t operator()(uint64_t key) const {$/;"	f	struct:CloudClient::KeyHash
operator ()	Cloud/Client.hpp	/^    std::size_t operator()(const CloudClient &client) const {$/;"	f	struct:CloudClient::KeyHash
operator ()	Cloud/Client.hpp	/^  result_type operator()(const CloudClientPtr &client) const {$/;"	f	struct:CloudClientIndexable
operator ()	Cloud/Thermal.hpp	/^  result_type operator()(const CloudThermalPtr &client) const {$/;"	f	struct:CloudThermalIndexable
operator ()	Engine/Airspace/AirspaceIntersectSort.hpp	/^    bool operator()(const Intersection& x, const Intersection& y) const {$/;"	f	struct:AirspaceIntersectSort::Rank
operator ()	Engine/Airspace/AirspacesInterface.hpp	/^    result_type operator()(const Airspace &airspace) const {$/;"	f	struct:AirspacesInterface::AirspaceIndexable
operator ()	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  bool operator()(const AbstractAirspace &t) const {$/;"	f	class:AirspacePredicateRef
operator ()	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  bool operator()(const T &t) const {$/;"	f	class:AndPredicate
operator ()	Engine/Airspace/Predicate/AirspacePredicateHeightRange.cpp	/^AirspacePredicateHeightRange::operator()(const AbstractAirspace& t) const$/;"	f	class:AirspacePredicateHeightRange
operator ()	Engine/Airspace/Predicate/AirspacePredicateHeightRange.cpp	/^AirspacePredicateHeightRangeExcludeTwo::operator()(const AbstractAirspace& t) const$/;"	f	class:AirspacePredicateHeightRangeExcludeTwo
operator ()	Engine/Airspace/Predicate/OutsideAirspacePredicate.cpp	/^OutsideAirspacePredicate::operator()(const AbstractAirspace &airspace) const$/;"	f	class:OutsideAirspacePredicate
operator ()	Engine/Airspace/SoonestAirspace.cpp	/^  bool operator()(const SoonestAirspace &a, const SoonestAirspace &b) const {$/;"	f	struct:CompareSoonestAirspace
operator ()	Engine/Route/AStar.hpp	/^    bool operator()(const NodeValue &x, const NodeValue &y) const {$/;"	f	struct:AStar::Rank
operator ()	Engine/Route/RoutePlanner.hpp	/^    result_type operator()(const argument_type l) const {$/;"	f	struct:RoutePlanner::RouteLinkBaseHasher
operator ()	Engine/Route/RoutePlanner.hpp	/^    result_type operator()(const argument_type p) const {$/;"	f	struct:RoutePlanner::RoutePointHasher
operator ()	Engine/Task/Unordered/AbortTask.cpp	/^  bool operator()(const AlternatePoint &x, const AlternatePoint &y) const {$/;"	f	struct:AbortRank
operator ()	Engine/Task/Unordered/AlternateTask.cpp	/^  bool operator()(const AlternateTask::Divert& x, $/;"	f	struct:AlternateRank
operator ()	Engine/Trace/Trace.hpp	/^      bool operator()(const TraceDelta &s1, const TraceDelta &s2) const {$/;"	f	struct:Trace::TraceDelta::DeltaRankOp
operator ()	Engine/Trace/Trace.hpp	/^    void operator()(typename Alloc::pointer td) {$/;"	f	struct:Trace::Disposer
operator ()	Engine/Waypoint/WaypointVisitor.hpp	/^  void operator()(const WaypointPtr &wp) {$/;"	f	class:WaypointVisitor
operator ()	Engine/Waypoint/Waypoints.cpp	/^  operator()(const WaypointPtr &wp)$/;"	f	class:WaypointEnvelopeVisitor
operator ()	Engine/Waypoint/Waypoints.cpp	/^  void operator()(const WaypointPtr &wp) {$/;"	f	struct:VisitorAdapter
operator ()	Lua/Ptr.cpp	/^Lua::StateDeleter::operator()(lua_State *state) const$/;"	f	class:Lua::StateDeleter
operator ()	MapWindow/Items/AirspaceBuilder.cpp	/^  bool operator()(const AbstractAirspace& airspace) const {$/;"	f	class:AirspaceAtPointPredicate
operator ()	Renderer/AirspaceLabelList.cpp	/^  bool operator() (const AirspaceLabelList::Label &label1,$/;"	f	class:AirspaceLabelListCompare
operator ()	Renderer/AirspaceLabelRenderer.cpp	/^  bool operator()(const AbstractAirspace& airspace) const {$/;"	f	class:AirspaceMapVisible
operator ()	Renderer/AirspaceRenderer.cpp	/^  bool operator()(const AbstractAirspace& airspace) const {$/;"	f	class:AirspaceMapVisible
operator ()	Repository/FileRepository.cpp	/^  bool operator()(const AvailableFile &file) const {$/;"	f	struct:AvailableFileNameComparator
operator ()	Screen/Custom/Cache.cpp	/^    size_t operator()(const TextCacheKey &key) const {$/;"	f	struct:TextCacheKey::Hash
operator ()	Screen/Custom/Cache.cpp	/^    size_t operator()(const char *__s) const {$/;"	f	struct:TextCacheKey::StringHash
operator ()	Screen/Memory/PixelOperations.hpp	/^  T operator()(T a, T b) const {$/;"	f	class:PixelAlphaOperation
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr bool operator()(color_type c) const {$/;"	f	struct:NotWhiteCondition
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr color_type operator()(Luminosity8 alpha) const {$/;"	f	struct:PixelOpaqueAlpha
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr color_type operator()(color_type a, Luminosity8 alpha) const {$/;"	f	struct:PixelColoredAlpha
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr color_type operator()(color_type a, color_type b) const {$/;"	f	struct:PixelPerChannelAdapter
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr color_type operator()(color_type x) const {$/;"	f	struct:PixelPerChannelAdapter
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr integer_type operator()(integer_type a, integer_type b) const {$/;"	f	struct:PixelBitNotOr
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr integer_type operator()(integer_type x) const {$/;"	f	struct:PixelBitNot
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr result_type operator()(argument_type x) const {$/;"	f	struct:PixelIntegerAdapter
operator ()	Screen/Memory/PixelOperations.hpp	/^  constexpr result_type operator()(first_argument_type a,$/;"	f	struct:PixelIntegerAdapter
operator ()	Screen/Memory/PixelOperations.hpp	/^  inline color_type operator()(typename SPT::color_type x) const {$/;"	f	struct:PixelOpaqueText
operator ()	Screen/Memory/PixelOperations.hpp	/^  result_type operator()(argument_type c) const {$/;"	f	struct:ColorKey
operator ()	Terrain/RasterTileCache.cpp	/^  bool operator()(unsigned short ai, unsigned short bi) const {$/;"	f	struct:RTDistanceSort
operator ()	Util/Cache.hxx	/^		bool operator()(const Item &a, const Item &b) const {$/;"	f	struct:Cache::ItemEqual
operator ()	Util/Cache.hxx	/^		bool operator()(const Key &a, const Item &b) const {$/;"	f	struct:Cache::ItemEqual
operator ()	Util/Cache.hxx	/^		std::size_t operator()(const Item &a) const {$/;"	f	struct:Cache::ItemHash
operator ()	Util/DeleteDisposer.hxx	/^	void operator()(T *t) {$/;"	f	class:DeleteDisposer
operator ()	Util/EnumCast.hpp	/^  constexpr U &operator()(T &x) const {$/;"	f	struct:EnumCastHelper
operator ()	Util/RadixTree.hpp	/^    void operator()(const T &value) const {$/;"	f	struct:RadixTree::KeyVisitorAdapter
operator ()	Waypoint/WaypointList.cpp	/^  bool operator()(const WaypointListItem &a,$/;"	f	class:WaypointDistanceCompare
operator *	Atmosphere/Temperature.hpp	/^  constexpr Temperature operator*(double other) const {$/;"	f	class:Temperature
operator *	Device/SettingsMap.hpp	/^    const V &operator*() const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator *	Dialogs/Device/DeviceListDialog.cpp	/^    const Flags &operator*() const {$/;"	f	union:final::Item
operator *	Engine/Trace/Trace.cpp	/^  typename I::pointer operator*() {$/;"	f	class:PointerIterator
operator *	Engine/Trace/Trace.hpp	/^    const TracePoint &operator*() const {$/;"	f	class:Trace::const_iterator
operator *	Geo/Flat/FlatGeoPoint.hpp	/^  FlatGeoPoint operator*(const double t) const {$/;"	f	struct:FlatGeoPoint
operator *	Geo/Flat/FlatPoint.hpp	/^  constexpr FlatPoint operator*(double p) const {$/;"	f	struct:FlatPoint
operator *	Geo/GeoPoint.hpp	/^  GeoPoint operator* (const double x) const {$/;"	f	struct:GeoPoint
operator *	Math/Angle.hpp	/^  operator*(const double x) const$/;"	f	class:Angle
operator *	Math/Angle.hpp	/^  operator*(const int x) const$/;"	f	class:Angle
operator *	Math/Angle.hpp	/^  operator*(const unsigned x) const$/;"	f	class:Angle
operator *	Rough/RoughAltitude.hpp	/^  double operator*(const double other) const {$/;"	f	class:RoughAltitude
operator *	Rough/RoughAltitude.hpp	/^double operator*(const double a, const RoughAltitude b) {$/;"	f
operator *	Topography/TopographyFile.hpp	/^    const XShape &operator*() const {$/;"	f	class:TopographyFile::const_iterator
operator *	Util/CastIterator.hpp	/^  reference operator*() const {$/;"	f	class:CastIterator
operator *	Util/IterableSplitString.hxx	/^		constexpr StringView operator*() const {$/;"	f	class:BasicIterableSplitString::final
operator *	Util/OverwritingRingBuffer.hpp	/^    const T &operator*() const {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator *=	Atmosphere/Temperature.hpp	/^  Temperature &operator*=(double other) {$/;"	f	class:Temperature
operator *=	Math/Angle.hpp	/^  operator*=(const double x)$/;"	f	class:Angle
operator +	Atmosphere/Temperature.hpp	/^  constexpr Temperature operator+(Temperature other) const {$/;"	f	class:Temperature
operator +	Device/Driver/FLARM/Logger.cpp	/^operator+(BrokenTime &a, BrokenTime &b)$/;"	f	file:
operator +	Device/Driver/Flytec/Logger.cpp	/^operator+(BrokenTime &a, BrokenTime &b)$/;"	f	file:
operator +	Engine/Route/AStar.hpp	/^  AStarPriorityValue operator+(const AStarPriorityValue& other) const {$/;"	f	struct:AStarPriorityValue
operator +	Geo/Flat/FlatLine.hpp	/^  constexpr FlatLine operator+(FlatPoint delta) const {$/;"	f	class:FlatLine
operator +	Geo/GeoPoint.hpp	/^  GeoPoint operator+ (const GeoPoint &delta) const {$/;"	f	struct:GeoPoint
operator +	Math/Angle.hpp	/^  operator+(const Angle x) const$/;"	f	class:Angle
operator +	OS/Path.cpp	/^Path::operator+(const_pointer other) const$/;"	f	class:Path
operator +	OS/Path.hpp	/^  AllocatedPath operator+(const_pointer other) const {$/;"	f	class:AllocatedPath
operator +	Rough/RoughAltitude.hpp	/^  RoughAltitude operator+(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator +	Screen/GDI/BulkPoint.hpp	/^  constexpr BulkPixelPoint operator+(BulkPixelPoint other) const {$/;"	f	struct:BulkPixelPoint
operator +	Time/BrokenDateTime.cpp	/^BrokenDateTime::operator+(int seconds) const$/;"	f	class:BrokenDateTime
operator +	Time/BrokenTime.cpp	/^BrokenTime::operator+(int seconds) const$/;"	f	class:BrokenTime
operator +	Time/BrokenTime.cpp	/^BrokenTime::operator+(unsigned seconds) const$/;"	f	class:BrokenTime
operator +	Time/RoughTime.hpp	/^operator+(RoughTime t, RoughTimeDelta delta)$/;"	f
operator +	Util/ScopeExit.hxx	/^	ScopeExitGuard<F> operator+(F &&f) {$/;"	f	struct:ScopeExitTag
operator ++	Engine/Trace/Trace.cpp	/^  PointerIterator<I> &operator++() {$/;"	f	class:PointerIterator
operator ++	Time/RoughTime.hpp	/^  RoughTime &operator++() {$/;"	f	class:RoughTime
operator ++	Topography/TopographyFile.hpp	/^    const_iterator &operator++() {$/;"	f	class:TopographyFile::const_iterator
operator ++	Util/CastIterator.hpp	/^  CastIterator<VT,IT> &operator++() {$/;"	f	class:CastIterator
operator ++	Util/CastIterator.hpp	/^  CastIterator<VT,IT> operator++(int) {$/;"	f	class:CastIterator
operator ++	Util/IterableSplitString.hxx	/^		Iterator &operator++() {$/;"	f	class:BasicIterableSplitString::final
operator ++	Util/OverwritingRingBuffer.hpp	/^    typename TrivialOverwritingRingBuffer::const_iterator &operator++() {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator ++	Util/Serial.hpp	/^  Serial &operator++() {$/;"	f	class:Serial
operator +=	Atmosphere/Temperature.hpp	/^  Temperature &operator+=(Temperature other) {$/;"	f	class:Temperature
operator +=	Geo/GeoPoint.hpp	/^  const GeoPoint& operator+= (const GeoPoint &delta) {$/;"	f	struct:GeoPoint
operator +=	Math/Angle.hpp	/^  operator+=(Angle x)$/;"	f	class:Angle
operator +=	Math/Line2D.hpp	/^  Line2D<P> &operator+=(P delta) {$/;"	f	struct:Line2D
operator +=	Rough/RoughAltitude.hpp	/^  RoughAltitude &operator+=(const RoughAltitude other) {$/;"	f	class:RoughAltitude
operator +=	Util/StaticString.hxx	/^	NarrowString<max> &operator +=(const_pointer new_value) {$/;"	f	class:NarrowString
operator +=	Util/StaticString.hxx	/^	NarrowString<max> &operator +=(value_type ch) {$/;"	f	class:NarrowString
operator +=	Util/StaticString.hxx	/^	StaticString<max> &operator +=(const_pointer new_value) {$/;"	f	class:StaticString
operator +=	Util/StaticString.hxx	/^	StaticString<max> &operator +=(value_type ch) {$/;"	f	class:StaticString
operator +=	Util/StaticString.hxx	/^	StaticStringBase<T, max> &operator +=(const_pointer new_value) {$/;"	f	class:StaticStringBase
operator +=	Util/StaticString.hxx	/^	StaticStringBase<T, max> &operator +=(value_type ch) {$/;"	f	class:StaticStringBase
operator -	Atmosphere/Temperature.hpp	/^  constexpr Temperature operator-() const {$/;"	f	class:Temperature
operator -	Atmosphere/Temperature.hpp	/^  constexpr Temperature operator-(Temperature other) const {$/;"	f	class:Temperature
operator -	Geo/Flat/FlatLine.hpp	/^  constexpr FlatLine operator-(FlatPoint delta) const {$/;"	f	class:FlatLine
operator -	Geo/GeoPoint.hpp	/^  GeoPoint operator- (const GeoPoint &delta) const {$/;"	f	struct:GeoPoint
operator -	Math/Angle.hpp	/^  operator-() const$/;"	f	class:Angle
operator -	Math/Angle.hpp	/^  operator-(const Angle x) const$/;"	f	class:Angle
operator -	Rough/RoughAltitude.hpp	/^  RoughAltitude operator-(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator -	Rough/RoughAngle.hpp	/^  RoughAngle operator-(RoughAngle other) const {$/;"	f	class:RoughAngle
operator -	Screen/GDI/BulkPoint.hpp	/^  constexpr BulkPixelPoint operator-(BulkPixelPoint other) const {$/;"	f	struct:BulkPixelPoint
operator -	Time/BrokenDateTime.cpp	/^BrokenDateTime::operator-(const BrokenDateTime &other) const$/;"	f	class:BrokenDateTime
operator -	Time/BrokenDateTime.hpp	/^  BrokenDateTime operator-(int seconds) const {$/;"	f	struct:BrokenDateTime
operator -	Time/BrokenTime.hpp	/^  BrokenTime operator-(int seconds) const {$/;"	f	struct:BrokenTime
operator -	Time/BrokenTime.hpp	/^  BrokenTime operator-(unsigned seconds) const {$/;"	f	struct:BrokenTime
operator -	Time/RoughTime.hpp	/^  constexpr RoughTimeDelta operator-() const {$/;"	f	class:RoughTimeDelta
operator -	Time/RoughTime.hpp	/^operator-(RoughTime t, RoughTimeDelta delta)$/;"	f
operator --	Engine/Trace/Trace.cpp	/^  PointerIterator<I> &operator--() {$/;"	f	class:PointerIterator
operator --	Time/RoughTime.hpp	/^  RoughTime &operator--() {$/;"	f	class:RoughTime
operator --	Util/CastIterator.hpp	/^  CastIterator<VT,IT> &operator--() {$/;"	f	class:CastIterator
operator --	Util/CastIterator.hpp	/^  CastIterator<VT,IT> operator--(int) {$/;"	f	class:CastIterator
operator -=	Atmosphere/Temperature.hpp	/^  Temperature &operator-=(Temperature other) {$/;"	f	class:Temperature
operator -=	Math/Angle.hpp	/^  operator-=(Angle x)$/;"	f	class:Angle
operator -=	Math/Line2D.hpp	/^  Line2D<P> &operator-=(P delta) {$/;"	f	struct:Line2D
operator -=	Rough/RoughAltitude.hpp	/^  RoughAltitude &operator-=(const RoughAltitude other) {$/;"	f	class:RoughAltitude
operator ->	Device/SettingsMap.hpp	/^    const V *operator->() const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator ->	Dialogs/Device/DeviceListDialog.cpp	/^    const Flags &operator->() const {$/;"	f	union:final::Item
operator ->	Engine/Trace/Trace.hpp	/^    const TracePoint *operator->() const {$/;"	f	class:Trace::const_iterator
operator ->	Topography/TopographyFile.hpp	/^    const XShape *operator->() const {$/;"	f	class:TopographyFile::const_iterator
operator ->	Util/CastIterator.hpp	/^  pointer operator->() const {$/;"	f	class:CastIterator
operator ->	Util/IterableSplitString.hxx	/^		constexpr const StringView *operator->() const {$/;"	f	class:BasicIterableSplitString::final
operator ->	Util/Manual.hxx	/^	T *operator->() {$/;"	f	class:Manual
operator ->	Util/Manual.hxx	/^	const T *operator->() const {$/;"	f	class:Manual
operator /	Atmosphere/Temperature.hpp	/^  constexpr Temperature operator\/(double other) const {$/;"	f	class:Temperature
operator /	Math/Angle.hpp	/^  operator\/(const Angle x) const$/;"	f	class:Angle
operator /	Math/Angle.hpp	/^  operator\/(const double x) const$/;"	f	class:Angle
operator /	Math/Angle.hpp	/^  operator\/(const int x) const$/;"	f	class:Angle
operator /	Math/Angle.hpp	/^  operator\/(const unsigned x) const$/;"	f	class:Angle
operator /	Rough/RoughAltitude.hpp	/^  double operator\/(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator /	Rough/RoughAltitude.hpp	/^  double operator\/(const double other) const {$/;"	f	class:RoughAltitude
operator /=	Atmosphere/Temperature.hpp	/^  Temperature &operator\/=(double other) {$/;"	f	class:Temperature
operator <	Atmosphere/Temperature.hpp	/^  constexpr bool operator<(Temperature other) const {$/;"	f	class:Temperature
operator <	Dialogs/Plane/PlaneListDialog.cpp	/^    bool operator<(const ListItem &i2) const {$/;"	f	struct:final::ListItem
operator <	Dialogs/ProfileListDialog.cpp	/^    bool operator<(const ListItem &i2) const {$/;"	f	struct:final::ListItem
operator <	Dialogs/Weather/MapOverlayWidget.cpp	/^    bool operator<(const Item &other) const {$/;"	f	struct:final::Item
operator <	Dialogs/Weather/NOAAList.cpp	/^    bool operator<(const ListItem &i2) const {$/;"	f	struct:final::ListItem
operator <	Engine/Airspace/AirspaceWarning.cpp	/^AirspaceWarning::operator<(const AirspaceWarning &other) const$/;"	f	class:AirspaceWarning
operator <	Event/Shared/TimerQueue.hpp	/^    bool operator<(const TimerRecord &other) const {$/;"	f	struct:TimerQueue::TimerRecord
operator <	FLARM/FlarmId.hpp	/^  bool operator<(FlarmId other) const {$/;"	f	class:FlarmId
operator <	GliderLink/GliderLinkId.hpp	/^  bool operator<(GliderLinkId other) const {$/;"	f	class:GliderLinkId
operator <	Kobo/ToolsDialog.cpp	/^  bool operator<(const ListItem &i2) const {$/;"	f	struct:ListItem
operator <	Math/Angle.hpp	/^  operator<(const Angle x) const$/;"	f	class:Angle
operator <	Rough/RoughAltitude.hpp	/^  bool operator <(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator <	Rough/RoughDistance.hpp	/^  bool operator <(const RoughDistance other) const {$/;"	f	class:RoughDistance
operator <	Task/TaskStore.hpp	/^    bool operator<(const TaskStore::Item &other) const {$/;"	f	struct:TaskStore::Item
operator <	Time/BrokenDate.hpp	/^  bool operator<(const BrokenDate other) const {$/;"	f	struct:BrokenDate
operator <	Time/BrokenTime.hpp	/^  bool operator<(const BrokenTime other) const {$/;"	f	struct:BrokenTime
operator <	Time/RoughTime.hpp	/^  constexpr bool operator <(RoughTime other) const {$/;"	f	class:RoughTime
operator <<	Cloud/Client.cpp	/^operator<<(Serialiser &s, const boost::asio::ip::udp::endpoint &endpoint)$/;"	f
operator <<	Cloud/Dump.hpp	/^operator<<(std::ostream &stream, const GeoAngle<positive, negative> value)$/;"	f
operator <<	Cloud/Dump.hpp	/^operator<<(std::ostream &stream, const GeoPoint &p)$/;"	f
operator <<	Cloud/Dump.hpp	/^operator<<(std::ostream &stream,$/;"	f
operator <<	Cloud/Serialiser.hpp	/^  Serialiser &operator<<(std::chrono::steady_clock::time_point t) {$/;"	f	class:Serialiser
operator <<	Cloud/Serialiser.hpp	/^  Serialiser &operator<<(std::chrono::system_clock::time_point t) {$/;"	f	class:Serialiser
operator <<	Terrain/RasterLocation.hpp	/^  constexpr RasterLocation operator<<(unsigned bits) const {$/;"	f	struct:RasterLocation
operator <<	Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation operator<<(int bits) const {$/;"	f	struct:SignedRasterLocation
operator <<	Util/RadixTree.hpp	/^    operator<<(typename std::basic_ostream<Char, Traits>& out,$/;"	f	struct:RadixTree::Node
operator <<	Util/RadixTree.hpp	/^  operator<<(typename std::basic_ostream<Char, Traits>& out,$/;"	f	class:RadixTree
operator <=	Atmosphere/Temperature.hpp	/^  constexpr bool operator<=(Temperature other) const {$/;"	f	class:Temperature
operator <=	Math/Angle.hpp	/^  operator<=(const Angle x) const$/;"	f	class:Angle
operator <=	Rough/RoughAltitude.hpp	/^  bool operator <=(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator <=	Time/RoughTime.hpp	/^  constexpr bool operator <=(RoughTime other) const {$/;"	f	class:RoughTime
operator =	Config/Registry.hpp	/^  RegistryKey &operator=(RegistryKey &&other) {$/;"	f	class:RegistryKey
operator =	Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 &operator=(const MemoryAddress32 &other) {$/;"	f	struct:LX::MemoryAddress24
operator =	Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 &operator=(const uint8_t other[3]) {$/;"	f	struct:LX::MemoryAddress24
operator =	Device/Driver/LXERA/Protocol.hpp	/^    MemoryAddress24 &operator=(const MemoryAddress32 &other) {$/;"	f	struct:LXEra::MemoryAddress24
operator =	Device/Driver/LXERA/Protocol.hpp	/^    MemoryAddress24 &operator=(const uint8_t other[3]) {$/;"	f	struct:LXEra::MemoryAddress24
operator =	Engine/Route/Route.hpp	/^  StaticRoute &operator=(const Route &src) {$/;"	f	struct:StaticRoute
operator =	Event/Poll/LibInput/UdevContext.cpp	/^UdevContext::operator=(const UdevContext &other)$/;"	f	class:UdevContext
operator =	Form/DataField/Enum.hpp	/^    Entry &operator=(Entry &&other) {$/;"	f	class:final::Entry
operator =	Form/DataField/File.hpp	/^    Item &operator=(Item &&src) {$/;"	f	struct:final::Item
operator =	IO/FileHandle.hpp	/^  FileHandle &operator=(FileHandle &&other) {$/;"	f	class:FileHandle
operator =	IO/TextWriter.hpp	/^  TextWriter &operator=(TextWriter &&other) {$/;"	f	class:TextWriter
operator =	IO/ZipArchive.hpp	/^  ZipArchive &operator=(ZipArchive &&src) {$/;"	f	class:ZipArchive
operator =	Logger/LoggerImpl.cpp	/^LoggerImpl::PreTakeoffBuffer::operator=(const NMEAInfo &src)$/;"	f	class:LoggerImpl::PreTakeoffBuffer
operator =	Math/FastRotation.hpp	/^  const FastIntegerRotation &operator =(Angle _angle) {$/;"	f	class:FastIntegerRotation
operator =	Math/FastRotation.hpp	/^  const FastRotation &operator =(Angle _angle) {$/;"	f	class:FastRotation
operator =	Net/HTTP/FormData.hpp	/^    MultiPartFormData &operator=(MultiPartFormData &&src) {$/;"	f	class:Net::MultiPartFormData
operator =	OS/ByteOrder.hpp	/^	PackedBE16 &operator=(uint16_t new_value) {$/;"	f	class:PackedBE16
operator =	OS/ByteOrder.hpp	/^	PackedLE16 &operator=(uint16_t new_value) {$/;"	f	class:PackedLE16
operator =	OS/Path.hpp	/^  AllocatedPath &operator=(Path src) {$/;"	f	class:AllocatedPath
operator =	OS/Path.hpp	/^  AllocatedPath &operator=(std::nullptr_t n) {$/;"	f	class:AllocatedPath
operator =	Rough/RoughAltitude.hpp	/^  RoughAltitude &operator=(double other) {$/;"	f	class:RoughAltitude
operator =	Rough/RoughAltitude.hpp	/^  RoughAltitude &operator=(int other) {$/;"	f	class:RoughAltitude
operator =	Rough/RoughAltitude.hpp	/^  RoughAltitude &operator=(short other) {$/;"	f	class:RoughAltitude
operator =	Rough/RoughAngle.hpp	/^  RoughAngle &operator=(Angle other) {$/;"	f	class:RoughAngle
operator =	Rough/RoughDistance.hpp	/^  RoughDistance &operator=(double other) {$/;"	f	class:RoughDistance
operator =	Rough/RoughSpeed.hpp	/^  RoughSpeed &operator=(double other) {$/;"	f	class:RoughSpeed
operator =	Rough/RoughVSpeed.hpp	/^  RoughVSpeed &operator=(double other) {$/;"	f	class:RoughVSpeed
operator =	Screen/Custom/Cache.cpp	/^  RenderedText &operator=(RenderedText &&other) {$/;"	f	struct:RenderedText
operator =	Screen/Custom/Cache.cpp	/^  TextCacheKey &operator=(TextCacheKey &&other) {$/;"	f	struct:TextCacheKey
operator =	Screen/GDI/Color.hpp	/^  &operator =(COLORREF c)$/;"	f	class:Color
operator =	Util/LightString.hxx	/^	LightString &operator=(LightString &&src) {$/;"	f	class:LightString
operator =	Util/ReusableArray.hpp	/^  ReusableArray<T> &operator=(ReusableArray<T> &&other) {$/;"	f	class:ReusableArray
operator =	Util/StaticString.hxx	/^	NarrowString<max> &operator =(const_pointer new_value) {$/;"	f	class:NarrowString
operator =	Util/StaticString.hxx	/^	StaticString<max> &operator =(const_pointer new_value) {$/;"	f	class:StaticString
operator =	Util/StaticString.hxx	/^	StaticStringBase<T, max> &operator =(const_pointer new_value) {$/;"	f	class:StaticStringBase
operator =	XML/Node.hpp	/^  XMLNode &operator=(XMLNode &&other) {$/;"	f	class:XMLNode
operator ==	Atmosphere/Temperature.hpp	/^  constexpr bool operator==(Temperature other) const {$/;"	f	class:Temperature
operator ==	Device/SettingsMap.hpp	/^    bool operator==(const const_iterator &other) const {$/;"	f	class:DeviceSettingsMap::const_iterator
operator ==	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  bool operator==(const AbstractAirspace &other) const {$/;"	f	struct:WarningItem
operator ==	Dialogs/Device/DeviceListDialog.cpp	/^    bool operator==(const Item &other) const {$/;"	f	union:final::Item
operator ==	Engine/Airspace/Airspace.hpp	/^  bool operator==(Airspace const &a) const {$/;"	f	class:final
operator ==	Engine/Route/RouteLink.hpp	/^  constexpr bool operator==(const RouteLinkBase o) const {$/;"	f	struct:RouteLinkBase
operator ==	Engine/Trace/Trace.cpp	/^  bool operator==(const PointerIterator<I> &other) const {$/;"	f	class:PointerIterator
operator ==	Engine/Waypoint/Waypoint.hpp	/^  operator==(const Waypoint&wp) const$/;"	f	struct:Waypoint
operator ==	FLARM/FlarmId.hpp	/^  bool operator==(FlarmId other) const {$/;"	f	class:FlarmId
operator ==	Form/TabMenuDisplay.hpp	/^    bool operator==(const MenuTabIndex &other) const {$/;"	f	struct:final::MenuTabIndex
operator ==	Geo/Flat/FlatGeoPoint.hpp	/^  bool operator==(const AFlatGeoPoint other) const {$/;"	f	struct:AFlatGeoPoint
operator ==	Geo/Flat/FlatGeoPoint.hpp	/^  bool operator==(const FlatGeoPoint other) const {$/;"	f	struct:FlatGeoPoint
operator ==	Geo/GeoPoint.hpp	/^  bool operator== (const GeoPoint other) const {$/;"	f	struct:GeoPoint
operator ==	GliderLink/GliderLinkId.hpp	/^  bool operator==(GliderLinkId other) const {$/;"	f	class:GliderLinkId
operator ==	IO/FileCache.cpp	/^  bool operator==(const FileInfo &other) const {$/;"	f	struct:FileInfo
operator ==	Math/Angle.hpp	/^  operator==(const Angle x) const$/;"	f	class:Angle
operator ==	NMEA/Validity.hpp	/^  constexpr bool operator==(const Validity &other) const {$/;"	f	class:Validity
operator ==	Net/HTTP/DownloadManager.cpp	/^    bool operator==(Path other) const {$/;"	f	struct:final::Item
operator ==	OS/Path.cpp	/^Path::operator==(Path other) const$/;"	f	class:Path
operator ==	OS/Path.hpp	/^  bool operator==(Path other) const {$/;"	f	class:AllocatedPath
operator ==	OS/Path.hpp	/^  bool operator==(std::nullptr_t) const {$/;"	f	class:AllocatedPath
operator ==	OS/Path.hpp	/^  constexpr bool operator==(std::nullptr_t) const {$/;"	f	class:Path
operator ==	PageSettings.hpp	/^    bool operator==(const InfoBoxConfig &other) const {$/;"	f	struct:PageLayout::InfoBoxConfig
operator ==	PageSettings.hpp	/^  bool operator==(const PageLayout &other) const {$/;"	f	struct:PageLayout
operator ==	ResourceId.hpp	/^  constexpr bool operator==(ResourceId other) const {$/;"	f	class:ResourceId
operator ==	Rough/RoughAltitude.hpp	/^  bool operator ==(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator ==	Screen/Custom/Cache.cpp	/^  bool operator==(const TextCacheKey &other) const {$/;"	f	struct:TextCacheKey
operator ==	Screen/GDI/Color.hpp	/^operator ==(const Color a, const Color b)$/;"	f
operator ==	Screen/Memory/Color.hpp	/^  bool operator ==(const Color other) const$/;"	f	class:Color
operator ==	Screen/OpenGL/Color.hpp	/^  bool operator ==(const Color other) const$/;"	f	class:Color
operator ==	Screen/PortableColor.hpp	/^  constexpr bool operator ==(const BGR8Color other) const {$/;"	f	class:BGR8Color
operator ==	Screen/PortableColor.hpp	/^  constexpr bool operator ==(const BGRA8Color other) const {$/;"	f	class:BGRA8Color
operator ==	Screen/PortableColor.hpp	/^  constexpr bool operator ==(const Luminosity8 other) const {$/;"	f	class:Luminosity8
operator ==	Screen/PortableColor.hpp	/^  constexpr bool operator ==(const RGB8Color other) const {$/;"	f	class:RGB8Color
operator ==	Terrain/TerrainSettings.hpp	/^  bool operator==(const TerrainRendererSettings &other) const {$/;"	f	struct:TerrainRendererSettings
operator ==	Time/BrokenDate.hpp	/^  bool operator==(const BrokenDate other) const {$/;"	f	struct:BrokenDate
operator ==	Time/BrokenDateTime.hpp	/^  bool operator==(const BrokenDateTime other) const {$/;"	f	struct:BrokenDateTime
operator ==	Time/BrokenTime.hpp	/^  bool operator==(const BrokenTime other) const {$/;"	f	struct:BrokenTime
operator ==	Time/RoughTime.hpp	/^  constexpr bool operator ==(RoughTime other) const {$/;"	f	class:RoughTime
operator ==	Time/RoughTime.hpp	/^  constexpr bool operator==(RoughTimeDelta other) const {$/;"	f	class:RoughTimeDelta
operator ==	Topography/TopographyFile.hpp	/^    bool operator==(const const_iterator &other) const {$/;"	f	class:TopographyFile::const_iterator
operator ==	Units/Settings.cpp	/^UnitSetting::operator==(const UnitSetting &right) const$/;"	f	class:UnitSetting
operator ==	Util/CastIterator.hpp	/^  bool operator==(const CastIterator<VT,IT> &other) const {$/;"	f	class:CastIterator
operator ==	Util/IterableSplitString.hxx	/^		constexpr bool operator==(Iterator other) const {$/;"	f	class:BasicIterableSplitString::final
operator ==	Util/OverwritingRingBuffer.hpp	/^    bool operator==(const const_iterator &other) const {$/;"	f	class:TrivialOverwritingRingBuffer::const_iterator
operator ==	Util/Serial.hpp	/^  bool operator==(const Serial other) const {$/;"	f	class:Serial
operator ==	Util/StaticString.hxx	/^	bool operator ==(const_pointer value) const {$/;"	f	class:StaticStringBase
operator >	Atmosphere/Temperature.hpp	/^  constexpr bool operator>(Temperature other) const {$/;"	f	class:Temperature
operator >	Engine/Route/AStar.hpp	/^  bool operator>(const AStarPriorityValue& other) const {$/;"	f	struct:AStarPriorityValue
operator >	Math/Angle.hpp	/^  operator>(const Angle x) const$/;"	f	class:Angle
operator >	Rough/RoughAltitude.hpp	/^  bool operator >(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator >	Rough/RoughDistance.hpp	/^  bool operator >(const RoughDistance other) const {$/;"	f	class:RoughDistance
operator >	Time/BrokenDate.hpp	/^  bool operator>(const BrokenDate other) const {$/;"	f	struct:BrokenDate
operator >	Time/BrokenTime.hpp	/^  bool operator>(const BrokenTime other) const {$/;"	f	struct:BrokenTime
operator >	Time/RoughTime.hpp	/^  constexpr bool operator >(RoughTime other) const {$/;"	f	class:RoughTime
operator >=	Atmosphere/Temperature.hpp	/^  constexpr bool operator>=(Temperature other) const {$/;"	f	class:Temperature
operator >=	Computer/StateClock.hpp	/^  bool operator>=(double other) const {$/;"	f	class:StateClock
operator >=	Math/Angle.hpp	/^  operator>=(const Angle x) const$/;"	f	class:Angle
operator >=	Rough/RoughAltitude.hpp	/^  bool operator >=(const RoughAltitude other) const {$/;"	f	class:RoughAltitude
operator >=	Time/RoughTime.hpp	/^  constexpr bool operator >=(RoughTime other) const {$/;"	f	class:RoughTime
operator >>	Cloud/Client.cpp	/^operator>>(Deserialiser &s, boost::asio::ip::udp::endpoint &endpoint)$/;"	f
operator >>	Cloud/Serialiser.hpp	/^  Deserialiser &operator>>(std::chrono::steady_clock::time_point &t) {$/;"	f	class:Deserialiser
operator >>	Cloud/Serialiser.hpp	/^  Deserialiser &operator>>(std::chrono::system_clock::time_point &t) {$/;"	f	class:Deserialiser
operator >>	Terrain/RasterLocation.hpp	/^  constexpr RasterLocation operator>>(unsigned bits) const {$/;"	f	struct:RasterLocation
operator >>	Terrain/RasterLocation.hpp	/^  constexpr SignedRasterLocation operator>>(int bits) const {$/;"	f	struct:SignedRasterLocation
operator Angle	Rough/RoughAngle.hpp	/^  operator Angle() const {$/;"	f	class:RoughAngle
operator COLORREF	Screen/GDI/Color.hpp	/^  constexpr operator COLORREF() const { return value; }$/;"	f	class:HWColor
operator COLORREF	Screen/GDI/Color.hpp	/^  operator COLORREF() const { return value; }$/;"	f	class:Color
operator ConstBuffer<void>	ResourceId.hpp	/^  operator ConstBuffer<void>() const {$/;"	f	class:ResourceId
operator HDC	Screen/GDI/Canvas.hpp	/^  operator HDC() const {$/;"	f	class:Canvas
operator HDC	Screen/GDI/RootDC.hpp	/^  operator HDC() {$/;"	f	class:RootDC
operator HKEY	Config/Registry.hpp	/^  operator HKEY() const {$/;"	f	class:RegistryKey
operator Mutex &	Computer/TraceComputer.hpp	/^  operator Mutex &() const {$/;"	f	class:TraceComputer
operator Mutex &	Device/SettingsMap.hpp	/^  operator Mutex &() const {$/;"	f	class:DeviceSettingsMap
operator Path	OS/ConvertPathName.hpp	/^  operator Path() const {$/;"	f	class:PathName
operator Path	OS/Path.hpp	/^  operator Path() const {$/;"	f	class:AllocatedPath
operator PixelPoint	Screen/GDI/BulkPoint.hpp	/^  constexpr operator PixelPoint() const {$/;"	f	struct:BulkPixelPoint
operator PixelPoint	Screen/OpenGL/BulkPoint.hpp	/^  constexpr operator PixelPoint() const {$/;"	f	struct:BulkPixelPoint
operator RasterLocation	Terrain/RasterLocation.hpp	/^  constexpr operator RasterLocation() const {$/;"	f	struct:SignedRasterLocation
operator SLObjectItf	Audio/SLES/Object.hpp	/^    operator SLObjectItf() {$/;"	f	class:SLES::Object
operator T &	Util/Manual.hxx	/^	operator T &() {$/;"	f	class:Manual
operator TextCache::Result	Screen/Custom/Cache.cpp	/^  operator TextCache::Result() const {$/;"	f	struct:RenderedText
operator Value::const_pointer	OS/ConvertPathName.hpp	/^  operator Value::const_pointer() const {$/;"	f	class:NarrowPathName
operator []	Device/MultipleDevices.hpp	/^  DeviceDescriptor &operator[](unsigned i) const {$/;"	f	class:final
operator []	Form/DataField/ComboList.hpp	/^  const Item& operator[](unsigned i) const {$/;"	f	class:ComboList
operator []	Menu/MenuData.hpp	/^  const MenuItem &operator[](unsigned i) const {$/;"	f	class:Menu
operator []	Polar/Shape.hpp	/^  PolarPoint &operator[](unsigned i) {$/;"	f	struct:PolarShape
operator []	Polar/Shape.hpp	/^  const PolarPoint &operator[](unsigned i) const {$/;"	f	struct:PolarShape
operator []	Renderer/AirspaceLabelList.hpp	/^  const Label &operator[](unsigned i) const {$/;"	f	class:AirspaceLabelList
operator []	Topography/TopographyStore.hpp	/^  const TopographyFile &operator [](unsigned i) const {$/;"	f	class:TopographyStore
operator []	Util/StaticString.hxx	/^	reference operator[](size_type i) {$/;"	f	class:StaticStringBase
operator []	Util/StaticString.hxx	/^	value_type operator[](size_type i) const {$/;"	f	class:StaticStringBase
operator []	Util/TrivialArray.hxx	/^	T &operator[](size_type i) {$/;"	f	class:TrivialArray
operator []	Util/TrivialArray.hxx	/^	const T &operator[](size_type i) const {$/;"	f	class:TrivialArray
operator bool	NMEA/Validity.hpp	/^  constexpr operator bool() const {$/;"	f	class:Validity
operator boost::asio::io_context &	IO/Async/AsioThread.hpp	/^  operator boost::asio::io_context &() {$/;"	f	class:final
operator const LOGFONT &	Look/FontDescription.hpp	/^  explicit operator const LOGFONT &() const {$/;"	f	class:FontDescription
operator const T &	Util/Manual.hxx	/^	operator const T &() const {$/;"	f	class:Manual
operator const_pointer	Util/ConvertString.hpp	/^  operator const_pointer() const {$/;"	f	class:UTF8ToWideConverter
operator const_pointer	Util/ConvertString.hpp	/^  operator const_pointer() const {$/;"	f	class:WideToACPConverter
operator const_pointer	Util/ConvertString.hpp	/^  operator const_pointer() const {$/;"	f	class:WideToUTF8Converter
operator const_pointer	Util/StaticString.hxx	/^	operator const_pointer() const {$/;"	f	class:StaticStringBase
operator double	Rough/RoughAltitude.hpp	/^  operator double() const {$/;"	f	class:RoughAltitude
operator double	Rough/RoughDistance.hpp	/^  operator double() const {$/;"	f	class:RoughDistance
operator double	Rough/RoughSpeed.hpp	/^  constexpr operator double() const {$/;"	f	class:RoughSpeed
operator double	Rough/RoughVSpeed.hpp	/^  operator double() const {$/;"	f	class:RoughVSpeed
operator int	Rough/RoughAltitude.hpp	/^  operator int() const {$/;"	f	class:RoughAltitude
operator short	Rough/RoughAltitude.hpp	/^  operator short() const {$/;"	f	class:RoughAltitude
operator uint16_t	OS/ByteOrder.hpp	/^	constexpr operator uint16_t() const {$/;"	f	class:PackedBE16
operator uint16_t	OS/ByteOrder.hpp	/^	constexpr operator uint16_t() const {$/;"	f	class:PackedLE16
operator unsigned	ResourceId.hpp	/^  constexpr explicit operator unsigned() const {$/;"	f	class:ResourceId
operator |	Util/EnumBitSet.hpp	/^  constexpr EnumBitSet operator|(const EnumBitSet other) const {$/;"	f	class:EnumBitSet
operator |=	Util/EnumBitSet.hpp	/^  EnumBitSet &operator|=(const EnumBitSet &other) {$/;"	f	class:EnumBitSet
ops	Terrain/jasper/jas_cm.h	/^	jas_cmpxformops_t *ops;$/;"	m	struct:jas_cmpxform_s
ops	Terrain/jasper/jas_icc.h	/^	jas_iccattrvalops_t *ops; \/* type-dependent operations *\/$/;"	m	struct:jas_iccattrval_s
ops	Terrain/jasper/jas_icc.h	/^	jas_iccattrvalops_t ops;$/;"	m	struct:__anon194
ops	Terrain/jasper/jas_image.h	/^	jas_image_fmtops_t ops;$/;"	m	struct:__anon127
ops	Terrain/jasper/jp2/jp2_cod.h	/^	const struct jp2_boxops_s *ops;$/;"	m	struct:__anon117	typeref:struct:__anon117::jp2_boxops_s
ops	Terrain/jasper/jp2/jp2_cod.h	/^	jp2_boxops_t ops;$/;"	m	struct:jp2_boxinfo_s
ops	Terrain/jasper/jpc/jpc_cs.c	/^	jpc_msops_t ops;$/;"	m	struct:__anon156	file:
ops	Terrain/jasper/jpc/jpc_cs.h	/^	const struct jpc_msops_s *ops;$/;"	m	struct:__anon179	typeref:struct:__anon179::jpc_msops_s
ops_	Terrain/jasper/jas_stream.h	/^	const jas_stream_ops_t *ops_;$/;"	m	struct:__anon120
opt_size	Engine/Trace/Trace.hpp	/^  const unsigned opt_size;$/;"	m	class:Trace
optid_t	Terrain/jasper/jpc/jpc_dec.c	/^} optid_t;$/;"	t	typeref:enum:__anon155	file:
optimise_targets_bearing	Engine/Task/TaskBehaviour.hpp	/^  bool optimise_targets_bearing;$/;"	m	struct:TaskBehaviour
optimise_targets_margin	Engine/Task/TaskBehaviour.hpp	/^  unsigned optimise_targets_margin;$/;"	m	struct:TaskBehaviour
optimise_targets_range	Engine/Task/TaskBehaviour.hpp	/^  bool optimise_targets_range;$/;"	m	struct:TaskBehaviour
optimized	Dialogs/Task/TargetDialog.cpp	/^    PixelRect optimized;$/;"	m	struct:TargetWidget::Layout	file:
optimized	Dialogs/Task/TargetDialog.cpp	/^  CheckBoxControl optimized;$/;"	m	class:TargetWidget	file:
optional_start_points	Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskPointVector optional_start_points;$/;"	m	class:final
optional_starts	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect optional_starts, score_exit;$/;"	m	struct:final::Layout	file:
optional_starts	Dialogs/Task/TaskPointDialog.cpp	/^  Button optional_starts;$/;"	m	class:final	file:
orange_brush	Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
order	Terrain/jasper/jas_cm.h	/^	int order;$/;"	m	struct:__anon98
order	Terrain/jasper/jas_cm.h	/^	int order;$/;"	m	struct:__anon99
ordered_defaults	Engine/Task/TaskBehaviour.hpp	/^  OrderedTaskSettings ordered_defaults;$/;"	m	struct:TaskBehaviour
ordered_settings	Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskSettings ordered_settings;$/;"	m	class:final
ordered_summary	Engine/Task/Stats/CommonStats.hpp	/^  TaskSummary ordered_summary;$/;"	m	class:CommonStats
ordered_task	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  OrderedTask **ordered_task_pointer, *ordered_task;$/;"	m	class:TaskEditPanel	file:
ordered_task	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  OrderedTask **ordered_task_pointer, *ordered_task;$/;"	m	class:final
ordered_task	Dialogs/Task/TaskPointDialog.cpp	/^  OrderedTask &ordered_task;$/;"	m	class:final	file:
ordered_task	Dialogs/Waypoint/WaypointList.cpp	/^  OrderedTask *const ordered_task;$/;"	m	class:final	file:
ordered_task	Engine/Task/TaskManager.hpp	/^  OrderedTask *const ordered_task;$/;"	m	class:TaskManager
ordered_task_index	Dialogs/Waypoint/WaypointList.cpp	/^  const unsigned ordered_task_index;$/;"	m	class:final	file:
ordered_task_pointer	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  OrderedTask **ordered_task_pointer, *ordered_task;$/;"	m	class:TaskEditPanel	file:
ordered_task_pointer	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  OrderedTask **ordered_task_pointer, *ordered_task;$/;"	m	class:final
ordered_task_stats	NMEA/Derived.hpp	/^  TaskStats ordered_task_stats;$/;"	m	struct:DerivedInfo
orient	Terrain/jasper/jpc/jpc_dec.h	/^	int orient;$/;"	m	struct:__anon147
orient	Terrain/jasper/jpc/jpc_tsfb.h	/^	int orient;$/;"	m	struct:__anon130
orientation	DisplaySettings.hpp	/^  DisplayOrientation orientation;$/;"	m	struct:DisplaySettings
orientation	Widget/TabWidget.hpp	/^  const Orientation orientation;$/;"	m	class:TabWidget
orientation_list	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^static constexpr StaticEnumChoice orientation_list[] = {$/;"	v	file:
orig_st	Topography/shapelib/mapserver.h	/^    originalScaleTokenStrings *orig_st;$/;"	m	struct:layerObj
orig_taskType	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  TaskFactoryType orig_taskType;$/;"	m	class:final
origin	Device/Driver/LX/LXN.hpp	/^    const struct Origin *origin;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Origin
origin	Engine/Waypoint/Waypoint.hpp	/^  WaypointOrigin origin;$/;"	m	struct:Waypoint
origin	Form/List.hpp	/^  unsigned origin = 0;$/;"	m	class:ListControl
origin	Geo/Memento/DistanceMemento.hpp	/^  mutable GeoPoint origin;$/;"	m	class:DistanceMemento
origin	Geo/Memento/GeoVectorMemento.hpp	/^  mutable GeoPoint origin;$/;"	m	class:GeoVectorMemento
origin	Screen/Icon.hpp	/^  PixelPoint origin;$/;"	m	class:MaskedIcon
origin	Screen/LargeTextWindow.hpp	/^  unsigned origin;$/;"	m	class:LargeTextWindow
origin	Waypoint/Factory.hpp	/^  WaypointOrigin origin;$/;"	m	class:WaypointFactory
origin_last	Engine/Route/RoutePlanner.hpp	/^  AFlatGeoPoint origin_last;$/;"	m	class:RoutePlanner
origin_latitude	Device/Driver/LX/Convert.cpp	/^  int origin_latitude, origin_longitude;$/;"	m	struct:Context	file:
origin_longitude	Device/Driver/LX/Convert.cpp	/^  int origin_latitude, origin_longitude;$/;"	m	struct:Context	file:
origin_time	Device/Driver/LX/Convert.cpp	/^  unsigned time, origin_time;$/;"	m	struct:Context	file:
original	Language/MOFile.hpp	/^    const char *original, *translation;$/;"	m	struct:MOFile::string_pair
original	Util/DereferenceIterator.hxx	/^		:original(_original) {}$/;"	f	class:DereferenceContainerAdapter
original	Util/DereferenceIterator.hxx	/^		:original(_original) {}$/;"	f	class:DereferenceIterator
original	Util/DereferenceIterator.hxx	/^	CT &original;$/;"	m	class:DereferenceContainerAdapter
originalScaleTokenStrings	Topography/shapelib/mapserver.h	/^  } originalScaleTokenStrings;$/;"	t	typeref:struct:__anon64
original_id	Engine/Waypoint/Waypoint.hpp	/^  unsigned original_id;$/;"	m	struct:Waypoint
original_table_offset	Language/MOFile.hpp	/^    uint32_t original_table_offset, translation_table_offset;$/;"	m	struct:MOFile::mo_header
os	IO/BufferedOutputStream.hxx	/^	OutputStream &os;$/;"	m	class:BufferedOutputStream
os	IO/KeyValueFileWriter.hpp	/^  BufferedOutputStream &os;$/;"	m	class:KeyValueFileWriter
os	OS/OverlappedEvent.hpp	/^  OVERLAPPED os;$/;"	m	class:OverlappedEvent
os_haptic_feedback_enabled	Android/Main.cpp	/^bool os_haptic_feedback_enabled;$/;"	v
ostype	zzip/format.h	/^    zzip_byte_t   ostype[1];$/;"	m	struct:zzip_version
other	Engine/Trace/Trace.cpp	/^  PointerIterator<I> &operator=(const PointerIterator<I> &other) = default;$/;"	m	class:PointerIterator	file:
other	Event/Shared/TimerQueue.hpp	/^    TimerRecord &operator=(const TimerRecord &other) = delete;$/;"	m	struct:TimerQueue::TimerRecord
other	Event/Shared/TimerQueue.hpp	/^    TimerRecord(TimerRecord &&other) = default;$/;"	m	struct:TimerQueue::TimerRecord
other	Event/Shared/TimerQueue.hpp	/^    TimerRecord(const TimerRecord &other) = delete;$/;"	m	struct:TimerQueue::TimerRecord
other	Event/Shared/TimerQueue.hpp	/^  TimerQueue &operator=(const TimerQueue &other) = delete;$/;"	m	class:TimerQueue
other	Event/Shared/TimerQueue.hpp	/^  TimerQueue(const TimerQueue &other) = delete;$/;"	m	class:TimerQueue
other	Event/Timer.hpp	/^  Timer(const Timer &other) = delete;$/;"	m	class:final
other	Form/DataField/ComboList.hpp	/^    Item &operator=(const Item &other) = delete;$/;"	m	struct:ComboList::Item
other	Form/DataField/ComboList.hpp	/^    Item(const Item &other) = delete;$/;"	m	struct:ComboList::Item
other	Form/DataField/ComboList.hpp	/^  ComboList &operator=(const ComboList &other) = delete;$/;"	m	class:ComboList
other	Form/DataField/ComboList.hpp	/^  ComboList(ComboList &&other) = default;$/;"	m	class:ComboList
other	Form/DataField/ComboList.hpp	/^  ComboList(const ComboList &other) = delete;$/;"	m	class:ComboList
other	IO/FileHandle.hpp	/^  FileHandle &operator=(const FileHandle &other) = delete;$/;"	m	class:FileHandle
other	IO/FileHandle.hpp	/^  FileHandle(const FileHandle &other) = delete;$/;"	m	class:FileHandle
other	Java/Ref.hxx	/^		GlobalRef &operator=(const GlobalRef &other) = delete;$/;"	m	class:Java::GlobalRef
other	Java/Ref.hxx	/^		GlobalRef(const GlobalRef &other) = delete;$/;"	m	class:Java::GlobalRef
other	Java/Ref.hxx	/^		LocalRef &operator=(const LocalRef &other) = delete;$/;"	m	class:Java::LocalRef
other	Java/Ref.hxx	/^		LocalRef(const LocalRef &other) = delete;$/;"	m	class:Java::LocalRef
other	Java/Ref.hxx	/^		TrivialRef &operator=(const TrivialRef &other) = delete;$/;"	m	class:Java::TrivialRef
other	Java/Ref.hxx	/^		TrivialRef(const TrivialRef &other) = delete;$/;"	m	class:Java::TrivialRef
other	Net/HTTP/DownloadManager.cpp	/^    Item &operator=(const Item &other) = delete;$/;"	m	struct:final::Item	file:
other	Net/HTTP/DownloadManager.cpp	/^    Item(const Item &other) = delete;$/;"	m	struct:final::Item	file:
other	Net/HTTP/Multi.hpp	/^    CurlMulti &operator=(const CurlMulti &other) = delete;$/;"	m	class:Net::CurlMulti
other	Net/HTTP/Multi.hpp	/^    CurlMulti(const CurlMulti &other) = delete;$/;"	m	class:Net::CurlMulti
other	OS/Args.hpp	/^  Args &operator=(const Args &other) = delete;$/;"	m	class:Args
other	OS/Args.hpp	/^  Args(const Args &other) = delete;$/;"	m	class:Args
other	Operation/ProxyOperationEnvironment.hpp	/^  OperationEnvironment &other;$/;"	m	class:ProxyOperationEnvironment
other	Operation/ThreadedOperationEnvironment.hpp	/^  OperationEnvironment &other;$/;"	m	class:ThreadedOperationEnvironment
other	Screen/Bitmap.hpp	/^  Bitmap &operator=(const Bitmap &other) = delete;$/;"	m	class:final
other	Screen/Bitmap.hpp	/^  Bitmap(const Bitmap &other) = delete;$/;"	m	class:final
other	Screen/Brush.hpp	/^  Brush &operator=(const Brush &other) = delete;$/;"	m	class:Brush
other	Screen/Brush.hpp	/^  Brush(const Brush &other) = delete;$/;"	m	class:Brush
other	Screen/Custom/Cache.cpp	/^  RenderedText &operator=(const RenderedText &other) = delete;$/;"	m	struct:RenderedText	file:
other	Screen/Custom/Cache.cpp	/^  RenderedText(const RenderedText &other) = delete;$/;"	m	struct:RenderedText	file:
other	Screen/Custom/Cache.cpp	/^  TextCacheKey &operator=(const TextCacheKey &other) = delete;$/;"	m	struct:TextCacheKey	file:
other	Screen/Custom/Cache.cpp	/^  TextCacheKey(const TextCacheKey &other) = delete;$/;"	m	struct:TextCacheKey	file:
other	Screen/Custom/UncompressedImage.hpp	/^  UncompressedImage &operator=(const UncompressedImage &other) = delete;$/;"	m	class:UncompressedImage
other	Screen/Custom/UncompressedImage.hpp	/^  UncompressedImage(UncompressedImage &&other) = default;$/;"	m	class:UncompressedImage
other	Screen/Custom/UncompressedImage.hpp	/^  UncompressedImage(const UncompressedImage &other) = delete;$/;"	m	class:UncompressedImage
other	Screen/Font.hpp	/^  Font &operator=(const Font &other) = delete;$/;"	m	class:Font
other	Screen/Font.hpp	/^  Font(const Font &other) = delete;$/;"	m	class:Font
other	Screen/GDI/Canvas.hpp	/^  Canvas &operator=(const Canvas &other) = delete;$/;"	m	class:Canvas
other	Screen/GDI/Canvas.hpp	/^  Canvas(const Canvas &other) = delete;$/;"	m	class:Canvas
other	Screen/OpenGL/Canvas.hpp	/^  Canvas &operator=(const Canvas &other) = delete;$/;"	m	class:Canvas
other	Screen/OpenGL/Canvas.hpp	/^  Canvas(const Canvas &other) = delete;$/;"	m	class:Canvas
other	Screen/Pen.hpp	/^  Pen &operator=(const Pen &other) = delete;$/;"	m	class:Pen
other	Screen/Pen.hpp	/^  Pen(const Pen &other) = delete;$/;"	m	class:Pen
other	Screen/Window.hpp	/^  Window &operator=(const Window &other) = delete;$/;"	m	class:Window
other	Screen/Window.hpp	/^  Window(const Window &other) = delete;$/;"	m	class:Window
other	Thread/CriticalSection.hxx	/^	CriticalSection &operator=(const CriticalSection &other) = delete;$/;"	m	class:CriticalSection
other	Thread/CriticalSection.hxx	/^	CriticalSection(const CriticalSection &other) = delete;$/;"	m	class:CriticalSection
other	Thread/Mutex.hxx	/^	ScopeUnlock &operator=(const ScopeUnlock &other) = delete;$/;"	m	class:ScopeUnlock
other	Thread/Mutex.hxx	/^	ScopeUnlock(const ScopeUnlock &other) = delete;$/;"	m	class:ScopeUnlock
other	Thread/Thread.hpp	/^  Thread &operator=(const Thread &other) = delete;$/;"	m	class:Thread
other	Thread/Thread.hpp	/^  Thread(const Thread &other) = delete;$/;"	m	class:Thread
other	Thread/Trigger.hpp	/^  Trigger &operator=(const Trigger &other) = delete;$/;"	m	class:Trigger
other	Thread/Trigger.hpp	/^  Trigger(const Trigger &other) = delete;$/;"	m	class:Trigger
other	Thread/WindowsCond.hxx	/^	WindowsCond &operator=(const WindowsCond &other) = delete;$/;"	m	class:WindowsCond
other	Thread/WindowsCond.hxx	/^	WindowsCond(const WindowsCond &other) = delete;$/;"	m	class:WindowsCond
other	Thread/WindowsSharedMutex.hxx	/^	WindowsSharedMutex &operator=(const WindowsSharedMutex &other) = delete;$/;"	m	class:WindowsSharedMutex
other	Thread/WindowsSharedMutex.hxx	/^	WindowsSharedMutex(const WindowsSharedMutex &other) = delete;$/;"	m	class:WindowsSharedMutex
other	Util/ConvertString.hpp	/^  UTF8ToWideConverter &operator=(const UTF8ToWideConverter &other) = delete;$/;"	m	class:UTF8ToWideConverter
other	Util/ConvertString.hpp	/^  UTF8ToWideConverter(const UTF8ToWideConverter &other) = delete;$/;"	m	class:UTF8ToWideConverter
other	Util/ConvertString.hpp	/^  WideToACPConverter &operator=(const WideToACPConverter &other) = delete;$/;"	m	class:WideToACPConverter
other	Util/ConvertString.hpp	/^  WideToACPConverter(const WideToACPConverter &other) = delete;$/;"	m	class:WideToACPConverter
other	Util/ConvertString.hpp	/^  WideToUTF8Converter &operator=(const WideToUTF8Converter &other) = delete;$/;"	m	class:WideToUTF8Converter
other	Util/ConvertString.hpp	/^  WideToUTF8Converter(const WideToUTF8Converter &other) = delete;$/;"	m	class:WideToUTF8Converter
other	Util/SliceAllocator.hxx	/^		typedef GlobalSliceAllocator<O, size> other;$/;"	t	struct:GlobalSliceAllocator::rebind
other	Util/SliceAllocator.hxx	/^		typedef SliceAllocator<O, size> other;$/;"	t	struct:SliceAllocator::rebind
out	Net/HTTP/ToFile.cpp	/^  OutputStream &out;$/;"	m	class:final	file:
out_of_date	Dialogs/FileManager.cpp	/^    bool downloading, failed, out_of_date;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
outclrspc	Terrain/jasper/jas_cm.h	/^	int outclrspc;$/;"	m	struct:__anon100
outer_circle_pen	Look/ThermalAssistantLook.hpp	/^  Pen outer_circle_pen;$/;"	m	struct:ThermalAssistantLook
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj *outlinecolor;$/;"	m	struct:__anon70
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj *outlinecolor;$/;"	m	struct:__anon71
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj color, outlinecolor, backgroundcolor;$/;"	m	struct:tileCacheObj
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj outlinecolor; \/* Color of outline of box, -1 for no outline *\/$/;"	m	struct:__anon55
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:__anon53
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:__anon54
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:labelObj
outlinecolor	Topography/shapelib/mapserver.h	/^    colorObj outlinecolor;$/;"	m	struct:styleObj
outlinewidth	Topography/shapelib/mapserver.h	/^    double outlinewidth, rotation,scale;$/;"	m	struct:tileCacheObj
outlinewidth	Topography/shapelib/mapserver.h	/^    double outlinewidth;$/;"	m	struct:__anon70
outlinewidth	Topography/shapelib/mapserver.h	/^    double outlinewidth;$/;"	m	struct:__anon71
outlinewidth	Topography/shapelib/mapserver.h	/^    double outlinewidth;$/;"	m	struct:styleObj
outlinewidth	Topography/shapelib/mapserver.h	/^    int outlinewidth;$/;"	m	struct:labelObj
output	Device/Driver/Volkslogger/vlconv.cpp	/^  output(FILE *ausgabe, int version, bool oo_fillin)$/;"	f	struct:IGCHEADER
output	Terrain/jasper/jas_icc.h	/^	int (*output)(struct jas_iccattrval_s *, jas_stream_t *);$/;"	m	struct:__anon187
outputFormatObj	Topography/shapelib/mapserver.h	/^  } outputFormatObj;$/;"	t	typeref:struct:__anon39
output_buffer	Form/DataField/Integer.hpp	/^  mutable TCHAR output_buffer[OUTBUFFERSIZE + 1];$/;"	m	class:final
output_mode	Device/Driver/BlueFly/Internal.hpp	/^    unsigned output_mode;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
outputformat	Topography/shapelib/mapserver.h	/^    outputFormatObj *outputformat;$/;"	m	struct:mapObj
outputformatlist	Topography/shapelib/mapserver.h	/^    outputFormatObj **outputformatlist;$/;"	m	struct:mapObj
outputs	NMEA/VegaSwitchState.hpp	/^  unsigned inputs, outputs;$/;"	m	struct:VegaSwitchState
outside1	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const OutsideAirspacePredicate outside1, outside2;$/;"	m	class:AirspacePredicateHeightRangeExcludeTwo
outside2	Engine/Airspace/Predicate/AirspacePredicateHeightRange.hpp	/^  const OutsideAirspacePredicate outside1, outside2;$/;"	m	class:AirspacePredicateHeightRangeExcludeTwo
outtabs	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t **outtabs;$/;"	m	struct:__anon186
outtabs	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t **outtabs;$/;"	m	struct:__anon185
outtabsbuf	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t *outtabsbuf;$/;"	m	struct:__anon186
outtabsbuf	Terrain/jasper/jas_icc.h	/^	jas_iccuint8_t *outtabsbuf;$/;"	m	struct:__anon185
overlay	Look/MapLook.hpp	/^  OverlayLook overlay;$/;"	m	struct:MapLook
overlay	MapWindow/MapWindow.hpp	/^  std::unique_ptr<MapOverlay> overlay;$/;"	m	class:MapWindow
overlay_font	Look/OverlayLook.hpp	/^  const Font *overlay_font;$/;"	m	struct:OverlayLook
overlay_font	Look/ThermalAssistantLook.hpp	/^  Font circle_label_font, overlay_font;$/;"	m	struct:ThermalAssistantLook
overlay_look	MapWindow/TargetMapWindow.hpp	/^  const OverlayLook &overlay_look;$/;"	m	class:TargetMapWindow
overlay_mode	Input/InputEvents.cpp	/^  static Mode overlay_mode = MODE_DEFAULT;$/;"	m	namespace:InputEvents	file:
override	Android/BMP085Device.hpp	/^                              AtmosphericPressure pressure) override;$/;"	m	class:final
override	Android/BMP085Device.hpp	/^  virtual void onBMP085Error() override;$/;"	m	class:final
override	Android/I2CbaroDevice.hpp	/^  virtual void onI2CbaroError() override;$/;"	m	class:final
override	Android/I2CbaroDevice.hpp	/^  virtual void onI2CbaroValues(unsigned sensor, AtmosphericPressure pressure) override;$/;"	m	class:final
override	Android/NunchuckDevice.hpp	/^                                int acc_x, int acc_y, int acc_z, int switches) override;$/;"	m	class:final
override	Android/NunchuckDevice.hpp	/^  virtual void onNunchuckError() override;$/;"	m	class:final
override	Android/VoltageDevice.hpp	/^  virtual void onVoltageError() override;$/;"	m	class:final
override	Android/VoltageDevice.hpp	/^  virtual void onVoltageValues(int temp_adc, int voltage_index, int volt_adc) override;$/;"	m	class:final
override	Audio/ALSAPCMPlayer.hpp	/^  bool Start(PCMDataSource &source) override;$/;"	m	class:ALSAPCMPlayer
override	Audio/ALSAPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:ALSAPCMPlayer
override	Audio/AndroidPCMPlayer.hpp	/^  bool Start(PCMSynthesiser &source) override;$/;"	m	class:AndroidPCMPlayer
override	Audio/AndroidPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:AndroidPCMPlayer
override	Audio/MixerPCMPlayer.hpp	/^  bool Start(PCMDataSource &source) override;$/;"	m	class:MixerPCMPlayer
override	Audio/MixerPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:MixerPCMPlayer
override	Audio/PCMBufferDataSource.hpp	/^  size_t GetData(int16_t *buffer, size_t n) override;$/;"	m	class:PCMBufferDataSource
override	Audio/PCMMixerDataSource.hpp	/^  size_t GetData(int16_t *buffer, size_t n) override;$/;"	m	class:PCMMixerDataSource
override	Audio/SDLPCMPlayer.hpp	/^  bool Start(PCMDataSource &source) override;$/;"	m	class:SDLPCMPlayer
override	Audio/SDLPCMPlayer.hpp	/^  void Stop() override;$/;"	m	class:SDLPCMPlayer
override	Blackboard/BlackboardListener.hpp	/^                          const DerivedInfo &calculated) override;$/;"	m	class:NullBlackboardListener
override	Blackboard/BlackboardListener.hpp	/^  void OnComputerSettingsUpdate(const ComputerSettings &settings) override;$/;"	m	class:NullBlackboardListener
override	Blackboard/BlackboardListener.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:NullBlackboardListener
override	Blackboard/BlackboardListener.hpp	/^  void OnUISettingsUpdate(const UISettings &settings) override;$/;"	m	class:NullBlackboardListener
override	Blackboard/ScopeCalculatedListener.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:ScopeCalculatedListener
override	Blackboard/ScopeGPSListener.hpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:ScopeGPSListener
override	CalculationThread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	Cloud/Main.cpp	/^                        bool near) override;$/;"	m	class:final	file:
override	Cloud/Main.cpp	/^                       double lift) override;$/;"	m	class:final	file:
override	Cloud/Main.cpp	/^                    double lift) override;$/;"	m	class:final	file:
override	Cloud/Main.cpp	/^             const ::GeoPoint &location, int altitude) override;$/;"	m	class:final	file:
override	Cloud/Main.cpp	/^  void OnThermalRequest(const Client &client) override;$/;"	m	class:final	file:
override	Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^                              const ComputerSettings &settings) override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorAATTime.hpp	/^  void Notify() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  void Notify() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  void SaveLast() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorGlideTerrain.hpp	/^  void Notify() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  void Notify() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorLandableReachable.hpp	/^  void SaveLast() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorSunset.hpp	/^  void Notify() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^                      const ComputerSettings &settings) override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  void Notify() override;$/;"	m	class:final
override	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  void SaveLast() override;$/;"	m	class:final
override	CrossSection/CrossSectionWidget.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:CrossSectionWidget
override	CrossSection/CrossSectionWidget.hpp	/^                       const PixelRect &rc) override;$/;"	m	class:CrossSectionWidget
override	CrossSection/CrossSectionWidget.hpp	/^  virtual void Hide() override;$/;"	m	class:CrossSectionWidget
override	CrossSection/CrossSectionWidget.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:CrossSectionWidget
override	CrossSection/CrossSectionWidget.hpp	/^  virtual void Unprepare() override;$/;"	m	class:CrossSectionWidget
override	CrossSection/CrossSectionWindow.hpp	/^  virtual void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:CrossSectionWindow
override	Device/Descriptor.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:final
override	Device/Descriptor.hpp	/^  bool LineReceived(const char *line) noexcept override;$/;"	m	class:final
override	Device/Descriptor.hpp	/^  void PortError(const char *msg) noexcept override;$/;"	m	class:final
override	Device/Descriptor.hpp	/^  void PortStateChanged() noexcept override;$/;"	m	class:final
override	Device/Dispatcher.hpp	/^  bool LineReceived(const char *line) noexcept override;$/;"	m	class:final
override	Device/Driver.hpp	/^                           OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^                          OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^                    struct NMEAInfo &info) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^                  OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  bool EnablePassThrough(OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  bool PutMacCready(double MacCready, OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  void LinkTimeout() override;$/;"	m	class:AbstractDevice
override	Device/Driver.hpp	/^  void OnSysTicker() override;$/;"	m	class:AbstractDevice
override	Device/Driver/ATR833.cpp	/^                           OperationEnvironment &env) override;$/;"	m	class:final	file:
override	Device/Driver/ATR833.cpp	/^                          OperationEnvironment &env) override;$/;"	m	class:final	file:
override	Device/Driver/ATR833.cpp	/^  bool DataReceived(const void *data, size_t length, NMEAInfo &info) override;$/;"	m	class:final	file:
override	Device/Driver/AirControlDisplay.cpp	/^                           OperationEnvironment &env) override;$/;"	m	class:ACDDevice	file:
override	Device/Driver/AirControlDisplay.cpp	/^              OperationEnvironment &env) override;$/;"	m	class:ACDDevice	file:
override	Device/Driver/AirControlDisplay.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:ACDDevice	file:
override	Device/Driver/AirControlDisplay.cpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:ACDDevice	file:
override	Device/Driver/AltairPro.cpp	/^               OperationEnvironment &env) override;$/;"	m	class:AltairProDevice	file:
override	Device/Driver/AltairPro.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:AltairProDevice	file:
override	Device/Driver/BlueFly/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:BlueFlyDevice
override	Device/Driver/BlueFly/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:BlueFlyDevice
override	Device/Driver/BorgeltB50.cpp	/^                  OperationEnvironment &env) override;$/;"	m	class:B50Device	file:
override	Device/Driver/BorgeltB50.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:B50Device	file:
override	Device/Driver/BorgeltB50.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:B50Device	file:
override	Device/Driver/BorgeltB50.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:B50Device	file:
override	Device/Driver/CAI302/Internal.hpp	/^                              OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^                          OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^                       OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^  virtual bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^  virtual bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^  virtual bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^  virtual bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:CAI302Device
override	Device/Driver/CAI302/Internal.hpp	/^  virtual void LinkTimeout() override;$/;"	m	class:CAI302Device
override	Device/Driver/CProbe.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:CProbeDevice	file:
override	Device/Driver/CaiGpsNav.cpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:CaiGpsNavDevice	file:
override	Device/Driver/CaiLNav.cpp	/^                          const DerivedInfo &calculated) override;$/;"	m	class:final	file:
override	Device/Driver/Condor.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:CondorDevice	file:
override	Device/Driver/EW.cpp	/^               OperationEnvironment &env) override;$/;"	m	class:EWDevice	file:
override	Device/Driver/EW.cpp	/^  void LinkTimeout() override;$/;"	m	class:EWDevice	file:
override	Device/Driver/EWMicroRecorder.cpp	/^               OperationEnvironment &env) override;$/;"	m	class:EWMicroRecorderDevice	file:
override	Device/Driver/EWMicroRecorder.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:EWMicroRecorderDevice	file:
override	Device/Driver/Eye.cpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:EyeDevice	file:
override	Device/Driver/FLARM/Device.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:FlarmDevice
override	Device/Driver/FLARM/Device.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:FlarmDevice
override	Device/Driver/FLARM/Device.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:FlarmDevice
override	Device/Driver/FLARM/Device.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:FlarmDevice
override	Device/Driver/FLARM/Device.hpp	/^  void LinkTimeout() override;$/;"	m	class:FlarmDevice
override	Device/Driver/FlyNet.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:FlyNetDevice	file:
override	Device/Driver/FlymasterF1.cpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:FlymasterF1Device	file:
override	Device/Driver/FlymasterF1.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:FlymasterF1Device	file:
override	Device/Driver/Flytec/Device.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:FlytecDevice
override	Device/Driver/Flytec/Device.hpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:FlytecDevice
override	Device/Driver/ILEC.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:ILECDevice	file:
override	Device/Driver/IMI/Internal.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:IMIDevice
override	Device/Driver/IMI/Internal.hpp	/^                      Path path, OperationEnvironment &env) override;$/;"	m	class:IMIDevice
override	Device/Driver/IMI/Internal.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:IMIDevice
override	Device/Driver/IMI/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:IMIDevice
override	Device/Driver/KRT2.cpp	/^                                   OperationEnvironment &env) override;$/;"	m	class:final	file:
override	Device/Driver/KRT2.cpp	/^                                  OperationEnvironment &env) override;$/;"	m	class:final	file:
override	Device/Driver/KRT2.cpp	/^                            struct NMEAInfo &info) override;$/;"	m	class:final	file:
override	Device/Driver/LX/Internal.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^                  OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  bool EnablePassThrough(OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:LXDevice
override	Device/Driver/LX/Internal.hpp	/^  void OnSysTicker() override;$/;"	m	class:LXDevice
override	Device/Driver/LXERA/Internal.hpp	/^                  OperationEnvironment &env) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  bool EnableNMEA(OperationEnvironment &env) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:LXEraDevice
override	Device/Driver/LXERA/Internal.hpp	/^  void OnSysTicker() override;$/;"	m	class:LXEraDevice
override	Device/Driver/Leonardo.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LeonardoDevice	file:
override	Device/Driver/LevilAHRS_G.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:LevilDevice	file:
override	Device/Driver/OpenVario.cpp	/^                  OperationEnvironment &env) override;$/;"	m	class:OpenVarioDevice	file:
override	Device/Driver/OpenVario.cpp	/^                  const DerivedInfo &calculated) override;$/;"	m	class:OpenVarioDevice	file:
override	Device/Driver/OpenVario.cpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:OpenVarioDevice	file:
override	Device/Driver/OpenVario.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:OpenVarioDevice	file:
override	Device/Driver/OpenVario.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:OpenVarioDevice	file:
override	Device/Driver/PosiGraph.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:PGDevice	file:
override	Device/Driver/ThermalExpress/Driver.hpp	/^  bool ParseNMEA(const char *line, NMEAInfo &info) override;$/;"	m	class:ThermalExpressDevice
override	Device/Driver/Vaulter.cpp	/^                  OperationEnvironment &env) override;$/;"	m	class:VaulterDevice	file:
override	Device/Driver/Vaulter.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:VaulterDevice	file:
override	Device/Driver/Vaulter.cpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:VaulterDevice	file:
override	Device/Driver/Vega/Internal.hpp	/^                          const DerivedInfo &calculated) override;$/;"	m	class:VegaDevice
override	Device/Driver/Vega/Internal.hpp	/^              OperationEnvironment &env) override;$/;"	m	class:VegaDevice
override	Device/Driver/Vega/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:VegaDevice
override	Device/Driver/Vega/Internal.hpp	/^  bool PutMacCready(double mc, OperationEnvironment &env) override;$/;"	m	class:VegaDevice
override	Device/Driver/Vega/Internal.hpp	/^  void LinkTimeout() override;$/;"	m	class:VegaDevice
override	Device/Driver/Volkslogger/Internal.hpp	/^                      OperationEnvironment &env) override;$/;"	m	class:VolksloggerDevice
override	Device/Driver/Volkslogger/Internal.hpp	/^               OperationEnvironment &env) override;$/;"	m	class:VolksloggerDevice
override	Device/Driver/Volkslogger/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:VolksloggerDevice
override	Device/Driver/Westerboer.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:WesterboerDevice	file:
override	Device/Driver/Westerboer.cpp	/^  bool PutBugs(double bugs, OperationEnvironment &env) override;$/;"	m	class:WesterboerDevice	file:
override	Device/Driver/Westerboer.cpp	/^  bool PutMacCready(double mac_cready, OperationEnvironment &env) override;$/;"	m	class:WesterboerDevice	file:
override	Device/Driver/XCOM760.cpp	/^                           OperationEnvironment &env) override;$/;"	m	class:XCOM760Device	file:
override	Device/Driver/XCOM760.cpp	/^                          OperationEnvironment &env) override;$/;"	m	class:XCOM760Device	file:
override	Device/Driver/XCOM760.cpp	/^  bool PutVolume(unsigned volume, OperationEnvironment &env) override;$/;"	m	class:XCOM760Device	file:
override	Device/Driver/XCTracer/Internal.hpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:final
override	Device/Driver/Zander.cpp	/^  bool ParseNMEA(const char *line, struct NMEAInfo &info) override;$/;"	m	class:ZanderDevice	file:
override	Device/MultipleDevices.hpp	/^  void PortError(const char *msg) noexcept override;$/;"	m	class:final
override	Device/MultipleDevices.hpp	/^  void PortStateChanged() noexcept override;$/;"	m	class:final
override	Device/Port/AndroidPort.hpp	/^  virtual PortState GetState() const override;$/;"	m	class:AndroidPort
override	Device/Port/AndroidPort.hpp	/^  virtual bool Drain() override;$/;"	m	class:AndroidPort
override	Device/Port/AndroidPort.hpp	/^  virtual bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:AndroidPort
override	Device/Port/AndroidPort.hpp	/^  virtual size_t Write(const void *data, size_t length) override;$/;"	m	class:AndroidPort
override	Device/Port/AndroidPort.hpp	/^  virtual unsigned GetBaudrate() const override;$/;"	m	class:AndroidPort
override	Device/Port/BufferedPort.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:BufferedPort
override	Device/Port/BufferedPort.hpp	/^  virtual WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:BufferedPort
override	Device/Port/BufferedPort.hpp	/^  virtual bool StartRxThread() override;$/;"	m	class:BufferedPort
override	Device/Port/BufferedPort.hpp	/^  virtual bool StopRxThread() override;$/;"	m	class:BufferedPort
override	Device/Port/BufferedPort.hpp	/^  virtual int Read(void *Buffer, size_t Size) override;$/;"	m	class:BufferedPort
override	Device/Port/BufferedPort.hpp	/^  virtual void Flush() override;$/;"	m	class:BufferedPort
override	Device/Port/DumpPort.hpp	/^  PortState GetState() const override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  bool Drain() override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  bool StartRxThread() override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  bool StopRxThread() override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  bool WaitConnected(OperationEnvironment &env) override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  int Read(void *buffer, size_t size) override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  unsigned GetBaudrate() const override;$/;"	m	class:final
override	Device/Port/DumpPort.hpp	/^  void Flush() override;$/;"	m	class:final
override	Device/Port/K6BtPort.hpp	/^  PortState GetState() const override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  bool Drain() override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  bool StartRxThread() override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  bool StopRxThread() override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  bool WaitConnected(OperationEnvironment &env) override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  int Read(void *Buffer, size_t Size) override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  unsigned GetBaudrate() const override;$/;"	m	class:K6BtPort
override	Device/Port/K6BtPort.hpp	/^  void Flush() override;$/;"	m	class:K6BtPort
override	Device/Port/NullPort.hpp	/^  PortState GetState() const override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  WaitResult WaitRead(std::chrono::steady_clock::duration timeout) override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  bool Drain() override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  bool StartRxThread() override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  bool StopRxThread() override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  int Read(void *Buffer, size_t Size) override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  unsigned GetBaudrate() const override;$/;"	m	class:NullPort
override	Device/Port/NullPort.hpp	/^  void Flush() override;$/;"	m	class:NullPort
override	Device/Port/SerialPort.hpp	/^  virtual PortState GetState() const override;$/;"	m	class:SerialPort
override	Device/Port/SerialPort.hpp	/^  virtual bool Drain() override;$/;"	m	class:SerialPort
override	Device/Port/SerialPort.hpp	/^  virtual bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:SerialPort
override	Device/Port/SerialPort.hpp	/^  virtual size_t Write(const void *data, size_t length) override;$/;"	m	class:SerialPort
override	Device/Port/SerialPort.hpp	/^  virtual unsigned GetBaudrate() const override;$/;"	m	class:SerialPort
override	Device/Port/SerialPort.hpp	/^  virtual void Flush() override;$/;"	m	class:SerialPort
override	Device/Port/SerialPort.hpp	/^  void Run() noexcept override;$/;"	m	class:SerialPort
override	Device/Port/TCPClientPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	Device/Port/TCPPort.hpp	/^  PortState GetState() const override;$/;"	m	class:final
override	Device/Port/TCPPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	Device/Port/TTYPort.hpp	/^  virtual PortState GetState() const override;$/;"	m	class:TTYPort
override	Device/Port/TTYPort.hpp	/^  virtual bool Drain() override;$/;"	m	class:TTYPort
override	Device/Port/TTYPort.hpp	/^  virtual bool SetBaudrate(unsigned baud_rate) override;$/;"	m	class:TTYPort
override	Device/Port/TTYPort.hpp	/^  virtual size_t Write(const void *data, size_t length) override;$/;"	m	class:TTYPort
override	Device/Port/TTYPort.hpp	/^  virtual unsigned GetBaudrate() const override;$/;"	m	class:TTYPort
override	Device/Port/TTYPort.hpp	/^  virtual void Flush() override;$/;"	m	class:TTYPort
override	Device/Port/UDPPort.hpp	/^  PortState GetState() const override;$/;"	m	class:final
override	Device/Port/UDPPort.hpp	/^  size_t Write(const void *data, size_t length) override;$/;"	m	class:final
override	Device/Util/LineSplitter.hpp	/^  bool DataReceived(const void *data, size_t length) noexcept override;$/;"	m	class:PortLineSplitter
override	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:AirspaceClassRendererSettingsPanel
override	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:AirspaceClassRendererSettingsPanel
override	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:AirspaceClassRendererSettingsPanel
override	Dialogs/Airspace/AirspaceList.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Airspace/AirspaceList.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/AirspaceList.cpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final	file:
override	Dialogs/Airspace/AirspaceList.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Airspace/AirspaceList.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/AirspaceList.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspace.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:AirspaceSettingsListWidget	file:
override	Dialogs/Airspace/dlgAirspace.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:AirspaceSettingsListWidget	file:
override	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  virtual void Hide() override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/CAI302/UnitsEditor.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final
override	Dialogs/Device/CAI302/UnitsEditor.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Device/DeviceEditWidget.hpp	/^                       const PixelRect &rc) override;$/;"	m	class:DeviceEditWidget
override	Dialogs/Device/DeviceEditWidget.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:DeviceEditWidget
override	Dialogs/Device/DeviceEditWidget.hpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:DeviceEditWidget
override	Dialogs/Device/DeviceListDialog.cpp	/^                    unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/DeviceListDialog.cpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final	file:
override	Dialogs/Device/DeviceListDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/DeviceListDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/DeviceListDialog.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final
override	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Device/LX/ManageNanoDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/LX/ManageNanoDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/LX/NanoConfigWidget.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final
override	Dialogs/Device/LX/NanoConfigWidget.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final
override	Dialogs/Device/LX/V7ConfigWidget.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Device/ManageCAI302Dialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/ManageCAI302Dialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/ManageFlarmDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/ManageFlarmDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  void Unprepare() override;$/;"	m	class:final	file:
override	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Device/Vega/VegaDemoDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:VegaParametersWidget
override	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:VegaParametersWidget
override	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:VegaParametersWidget
override	Dialogs/DownloadFilePicker.cpp	/^                       int64_t size, int64_t position) override;$/;"	m	class:final	file:
override	Dialogs/DownloadFilePicker.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/DownloadFilePicker.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/DownloadFilePicker.cpp	/^  void OnDownloadComplete(Path path_relative, bool success) override;$/;"	m	class:final	file:
override	Dialogs/DownloadFilePicker.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/DownloadFilePicker.cpp	/^  void Unprepare() override;$/;"	m	class:final	file:
override	Dialogs/FileManager.cpp	/^                                  bool success) override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^                               int64_t size, int64_t position) override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^  virtual void Unprepare() override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:ManagedFileListWidget	file:
override	Dialogs/FileManager.cpp	/^  void OnPaintItem(Canvas &canvas, const PixelRect rc, unsigned i) noexcept override;$/;"	m	class:final	file:
override	Dialogs/JobDialog.hpp	/^  bool Run(Job &job) override;$/;"	m	class:DialogJobRunner
override	Dialogs/KnobTextEntry.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/KnobTextEntry.cpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final	file:
override	Dialogs/MapItemListDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/MapItemListDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/MapItemListDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/MapItemListDialog.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/MapItemListSettingsPanel.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final
override	Dialogs/MapItemListSettingsPanel.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneListDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneListDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneListDialog.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneListDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlaneListDialog.cpp	/^  void Unprepare() override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlanePolarDialog.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlanePolarDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlanePolarDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlanePolarDialog.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Plane/PlanePolarDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:PolarShapeEditWidget
override	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:PolarShapeEditWidget
override	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:PolarShapeEditWidget
override	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:PolarShapeEditWidget
override	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  void Unprepare() override;$/;"	m	class:PolarShapeEditWidget
override	Dialogs/ProfileListDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/ProfileListDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/ProgressDialog.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:ProgressDialog
override	Dialogs/ReplayDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/ReplayDialog.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/ReplayDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  virtual void Hide() override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AirspaceConfigPanel.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AudioConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/CloudConfigPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/InterfaceConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/LoggerConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^                          const PixelRect &rc) override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual void OnModified(const PageLayout &new_value) override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:PageListWidget	file:
override	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/RouteConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/ScoringConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SiteConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:TerrainPreviewWindow	file:
override	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TimeConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/VarioConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/Panels/WeatherConfigPanel.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/WindSettingsPanel.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:final
override	Dialogs/Settings/WindSettingsPanel.hpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final
override	Dialogs/Settings/WindSettingsPanel.hpp	/^  virtual void Hide() override;$/;"	m	class:final
override	Dialogs/Settings/WindSettingsPanel.hpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final
override	Dialogs/Settings/WindSettingsPanel.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Settings/WindSettingsPanel.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Settings/WindSettingsPanel.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final
override	Dialogs/Settings/dlgBasicSettings.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Settings/dlgBasicSettings.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/dlgBasicSettings.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Settings/dlgBasicSettings.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:InfoBoxPreview	file:
override	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:InfoBoxPreview	file:
override	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:InfoBoxPreview	file:
override	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/SimulatorPromptWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:final
override	Dialogs/SimulatorPromptWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:final
override	Dialogs/SimulatorPromptWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:final
override	Dialogs/StartupDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/StartupDialog.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:FlightStatusPanel
override	Dialogs/StatusPanels/FlightStatusPanel.hpp	/^  void Refresh() override;$/;"	m	class:FlightStatusPanel
override	Dialogs/StatusPanels/RulesStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:RulesStatusPanel
override	Dialogs/StatusPanels/RulesStatusPanel.hpp	/^  void Refresh() override;$/;"	m	class:RulesStatusPanel
override	Dialogs/StatusPanels/StatusPanel.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:StatusPanel
override	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Hide() override;$/;"	m	class:final
override	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Refresh() override;$/;"	m	class:final
override	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  void OnModified(DataField &df) override;$/;"	m	class:TaskStatusPanel
override	Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TaskStatusPanel
override	Dialogs/StatusPanels/TaskStatusPanel.hpp	/^  void Refresh() override;$/;"	m	class:TaskStatusPanel
override	Dialogs/StatusPanels/TimesStatusPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TimesStatusPanel
override	Dialogs/StatusPanels/TimesStatusPanel.hpp	/^  void Refresh() override;$/;"	m	class:TimesStatusPanel
override	Dialogs/Task/AlternatesListDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Task/AlternatesListDialog.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Task/AlternatesListDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/Internal.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:final
override	Dialogs/Task/Manager/Internal.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/Internal.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final
override	Dialogs/Task/Manager/Internal.hpp	/^  void OnPageFlipped() override;$/;"	m	class:final
override	Dialogs/Task/Manager/Internal.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:TaskActionsPanel
override	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TaskActionsPanel
override	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  void ReClick() override;$/;"	m	class:TaskActionsPanel
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  bool Click() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  bool SetFocus() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Hide() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void ReClick() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool CanActivateItem(unsigned index) const noexcept override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void OnCursorMoved(unsigned index) noexcept override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void ReClick() override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:TaskEditPanel	file:
override	Dialogs/Task/Manager/TaskListPanel.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Hide() override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/TaskListPanel.cpp	/^  void Unprepare() override;$/;"	m	class:final	file:
override	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:TaskMapButtonRenderer
override	Dialogs/Task/Manager/TaskMiscPanel.hpp	/^  void ReClick() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskMiscPanel.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  bool Leave() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void OnModified(DataField &df) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void ReClick() override;$/;"	m	class:final
override	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Task/MutateTaskPointDialog.cpp	/^                   unsigned i) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Task/OptionalStartsDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:OptionStartsWidget	file:
override	Dialogs/Task/OptionalStartsDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:OptionStartsWidget	file:
override	Dialogs/Task/OptionalStartsDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:OptionStartsWidget	file:
override	Dialogs/Task/TargetDialog.cpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:TargetWidget	file:
override	Dialogs/Task/TargetDialog.cpp	/^  void OnTaskModified() override;$/;"	m	class:TargetDialogMapWindow	file:
override	Dialogs/Task/TargetDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TargetWidget	file:
override	Dialogs/Task/TaskPointDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Task/TaskPointDialog.cpp	/^  void OnModified(ObservationZoneEditWidget &widget) override;$/;"	m	class:final	file:
override	Dialogs/Task/TaskPointDialog.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:CylinderZoneEditWidget
override	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:CylinderZoneEditWidget
override	Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:KeyholeZoneEditWidget
override	Dialogs/Task/Widgets/KeyholeZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:KeyholeZoneEditWidget
override	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:LineSectorZoneEditWidget
override	Dialogs/Task/Widgets/LineSectorZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:LineSectorZoneEditWidget
override	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  void OnModified(DataField &df) override;$/;"	m	class:ObservationZoneEditWidget
override	Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:SectorZoneEditWidget
override	Dialogs/Task/Widgets/SectorZoneEditWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:SectorZoneEditWidget
override	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void Hide() override;$/;"	m	class:final	file:
override	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Traffic/TeamCodeDialog.cpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:final	file:
override	Dialogs/Traffic/TeamCodeDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Traffic/TeamCodeDialog.cpp	/^  virtual void Hide() override;$/;"	m	class:final	file:
override	Dialogs/Traffic/TeamCodeDialog.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Traffic/TeamCodeDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Traffic/TrafficList.cpp	/^                           unsigned idx) noexcept override;$/;"	m	class:TrafficListWidget	file:
override	Dialogs/Traffic/TrafficList.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:TrafficListWidget	file:
override	Dialogs/Traffic/TrafficList.cpp	/^  virtual void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:TrafficListWidget	file:
override	Dialogs/Traffic/TrafficList.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:TrafficListWidget	file:
override	Dialogs/Waypoint/Manager.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/Manager.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/Manager.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/Manager.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final
override	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	struct:WaypointInfoWidget
override	Dialogs/Waypoint/WaypointList.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:WaypointFilterWidget	file:
override	Dialogs/Waypoint/WaypointList.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/WaypointList.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/WaypointList.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/WaypointList.cpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/WaypointList.cpp	/^  void OnModified(DataField &df) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/WaypointList.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  void Unprepare() override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Weather/MapOverlayWidget.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAADetails.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAADetails.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAAList.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAAList.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAAList.cpp	/^  virtual void Unprepare() override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAAList.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Weather/NOAAList.cpp	/^  void OnActivateItem(unsigned index) noexcept override;$/;"	m	class:final	file:
override	Dialogs/Weather/RASPDialog.cpp	/^  virtual bool Save(bool &changed) override;$/;"	m	class:final	file:
override	Dialogs/Weather/RASPDialog.cpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/WidgetDialog.hpp	/^  virtual bool OnAnyKeyDown(unsigned key_code) override;$/;"	m	class:WidgetDialog
override	Dialogs/WidgetDialog.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:WidgetDialog
override	Dialogs/WidgetDialog.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:WidgetDialog
override	Dialogs/WidgetDialog.hpp	/^  virtual void ReinitialiseLayout(const PixelRect &parent_rc) override;$/;"	m	class:WidgetDialog
override	Dialogs/WidgetDialog.hpp	/^  virtual void SetDefaultFocus() override;$/;"	m	class:WidgetDialog
override	Dialogs/WidgetDialog.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:WidgetDialog
override	Dialogs/dlgAnalysis.cpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:final	file:
override	Dialogs/dlgAnalysis.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:ChartControl	file:
override	Dialogs/dlgAnalysis.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:ChartControl	file:
override	Dialogs/dlgAnalysis.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:ChartControl	file:
override	Dialogs/dlgAnalysis.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:ChartControl	file:
override	Dialogs/dlgAnalysis.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/dlgCredits.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^  bool SetFocus() override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^  unsigned GetMinimumButtonWidth() const override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final	file:
override	Dialogs/dlgQuickMenu.cpp	/^  void Unprepare() override;$/;"	m	class:final	file:
override	DrawThread.hpp	/^  void Run() noexcept override;$/;"	m	class:final
override	Engine/Airspace/AirspaceCircle.hpp	/^                                        const FlatProjection &projection) const override;$/;"	m	class:final
override	Engine/Airspace/AirspaceCircle.hpp	/^                        const FlatProjection &projection) const override;$/;"	m	class:final
override	Engine/Airspace/AirspaceCircle.hpp	/^  bool Inside(const GeoPoint &loc) const override;$/;"	m	class:final
override	Engine/Airspace/AirspacePolygon.hpp	/^                                        const FlatProjection &projection) const override;$/;"	m	class:final
override	Engine/Airspace/AirspacePolygon.hpp	/^                        const FlatProjection &projection) const override;$/;"	m	class:final
override	Engine/Airspace/AirspacePolygon.hpp	/^  bool Inside(const GeoPoint &loc) const override;$/;"	m	class:final
override	Engine/Airspace/AirspacePolygon.hpp	/^  const GeoPoint GetCenter() const override;$/;"	m	class:final
override	Engine/Airspace/AirspacePolygon.hpp	/^  const GeoPoint GetReferenceLocation() const override;$/;"	m	class:final
override	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:ContestDijkstra
override	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:ContestDijkstra
override	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void AddEdges(ScanTaskPoint curNode) noexcept override;$/;"	m	class:ContestDijkstra
override	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	m	class:ContestDijkstra
override	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void Reset() noexcept override;$/;"	m	class:ContestDijkstra
override	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  void UpdateTrace(bool force) noexcept override;$/;"	m	class:ContestDijkstra
override	Engine/Contest/Solvers/NetCoupe.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:NetCoupe
override	Engine/Contest/Solvers/OLCFAI.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCFAI
override	Engine/Contest/Solvers/OLCLeague.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCLeague
override	Engine/Contest/Solvers/OLCLeague.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:OLCLeague
override	Engine/Contest/Solvers/OLCLeague.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	m	class:OLCLeague
override	Engine/Contest/Solvers/OLCLeague.hpp	/^  void Reset() noexcept override;$/;"	m	class:OLCLeague
override	Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCPlus
override	Engine/Contest/Solvers/OLCPlus.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:OLCPlus
override	Engine/Contest/Solvers/OLCPlus.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	m	class:OLCPlus
override	Engine/Contest/Solvers/OLCPlus.hpp	/^  void Reset() noexcept override;$/;"	m	class:OLCPlus
override	Engine/Contest/Solvers/OLCSISAT.hpp	/^  ContestResult CalculateResult(const ContestTraceVector &solution) const noexcept override;$/;"	m	class:OLCSISAT
override	Engine/Contest/Solvers/OLCSprint.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:OLCSprint
override	Engine/Contest/Solvers/OLCSprint.hpp	/^  void AddEdges(ScanTaskPoint origin) noexcept override;$/;"	m	class:OLCSprint
override	Engine/Contest/Solvers/OLCSprint.hpp	/^  void AddStartEdges() noexcept override;$/;"	m	class:OLCSprint
override	Engine/Contest/Solvers/OLCSprint.hpp	/^  void UpdateTrace(bool force) noexcept override;$/;"	m	class:OLCSprint
override	Engine/Contest/Solvers/TriangleContest.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	v
override	Engine/Contest/Solvers/TriangleContest.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	v
override	Engine/Contest/Solvers/TriangleContest.hpp	/^  bool UpdateScore() noexcept override;$/;"	v
override	Engine/Contest/Solvers/TriangleContest.hpp	/^  void CopySolution(ContestTraceVector &vec) const noexcept override;$/;"	v
override	Engine/Contest/Solvers/TriangleContest.hpp	/^  void Reset() noexcept override;$/;"	v
override	Engine/Contest/Solvers/TriangleContest.hpp	/^  void UpdateTrace(bool force) noexcept override;$/;"	v
override	Engine/Contest/Solvers/XContestFree.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:XContestFree
override	Engine/Contest/Solvers/XContestTriangle.hpp	/^  ContestResult CalculateResult() const noexcept override;$/;"	m	class:XContestTriangle
override	Engine/Contest/Solvers/XContestTriangle.hpp	/^  SolverResult Solve(bool exhaustive) noexcept override;$/;"	m	class:XContestTriangle
override	Engine/Route/AirspaceRoute.hpp	/^  bool CheckClearance(const RouteLink &e, RoutePoint &inp) const override;$/;"	m	class:AirspaceRoute
override	Engine/Route/AirspaceRoute.hpp	/^  bool CheckSecondary(const RouteLink &e) override;$/;"	m	class:AirspaceRoute
override	Engine/Route/AirspaceRoute.hpp	/^  void AddNearby(const RouteLink &e) override;$/;"	m	class:AirspaceRoute
override	Engine/Route/AirspaceRoute.hpp	/^  void OnSolve(const AGeoPoint &origin, const AGeoPoint &destination) override;$/;"	m	class:AirspaceRoute
override	Engine/Route/AirspaceRoute.hpp	/^  void Reset() override;$/;"	m	class:AirspaceRoute
override	Engine/Task/AbstractTask.hpp	/^                  const GlidePolar &glide_polar) override;$/;"	m	class:AbstractTask
override	Engine/Task/AbstractTask.hpp	/^              const GlidePolar &glide_polar) override;$/;"	m	class:AbstractTask
override	Engine/Task/Factory/AATTaskFactory.hpp	/^  TaskPointFactoryType GetMutatedPointType(const OrderedTaskPoint &tp) const override;$/;"	m	class:final
override	Engine/Task/Factory/FAITaskFactory.hpp	/^                            double &finish_radius) const override;$/;"	m	class:FAITaskFactory
override	Engine/Task/Factory/FAITaskFactory.hpp	/^  TaskPointFactoryType GetMutatedPointType(const OrderedTaskPoint &tp) const override;$/;"	m	class:FAITaskFactory
override	Engine/Task/Factory/FAITaskFactory.hpp	/^  bool Validate() override;$/;"	m	class:FAITaskFactory
override	Engine/Task/Factory/FAITaskFactory.hpp	/^  void UpdateOrderedTaskSettings(OrderedTaskSettings& to) override;$/;"	m	class:FAITaskFactory
override	Engine/Task/Factory/FAITriangleTaskFactory.hpp	/^  bool Validate() override;$/;"	m	class:FAITriangleTaskFactory
override	Engine/Task/Factory/MatTaskFactory.hpp	/^  TaskPointFactoryType GetMutatedPointType(const OrderedTaskPoint &tp) const override;$/;"	m	class:final
override	Engine/Task/Factory/TouringTaskFactory.hpp	/^  void UpdateOrderedTaskSettings(OrderedTaskSettings &to) override;$/;"	m	class:TouringTaskFactory
override	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:AnnularSectorZone
override	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:AnnularSectorZone
override	Engine/Task/ObservationZones/AnnularSectorZone.hpp	/^  bool IsInSector(const GeoPoint &location) const override;$/;"	m	class:AnnularSectorZone
override	Engine/Task/ObservationZones/CylinderZone.hpp	/^  GeoPoint GetRandomPointInSector(const double mag) const override;$/;"	m	class:CylinderZone
override	Engine/Task/ObservationZones/CylinderZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:CylinderZone
override	Engine/Task/ObservationZones/CylinderZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:CylinderZone
override	Engine/Task/ObservationZones/CylinderZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:CylinderZone
override	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:final
override	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  bool IsInSector(const GeoPoint &location) const override;$/;"	m	class:final
override	Engine/Task/ObservationZones/KeyholeZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:final
override	Engine/Task/ObservationZones/LineSectorZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:LineSectorZone
override	Engine/Task/ObservationZones/SectorZone.hpp	/^  OZBoundary GetBoundary() const override;$/;"	m	class:SectorZone
override	Engine/Task/ObservationZones/SectorZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:SectorZone
override	Engine/Task/ObservationZones/SectorZone.hpp	/^  bool IsInSector(const GeoPoint &location) const override;$/;"	m	class:SectorZone
override	Engine/Task/ObservationZones/SectorZone.hpp	/^  double ScoreAdjustment() const override;$/;"	m	class:SectorZone
override	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  bool Equals(const ObservationZonePoint &other) const override;$/;"	m	class:SymmetricSectorZone
override	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  void SetLegs(const GeoPoint *previous, const GeoPoint *next) override;$/;"	m	class:SymmetricSectorZone
override	Engine/Task/Ordered/OrderedTask.hpp	/^                              GlideResult &total, GlideResult &leg) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                            const GlideResult &solution_remaining_leg) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                            double &value) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                           const GlidePolar &glide_polar) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                          double *dmin, double *dmax) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                        const AircraftState &state_last) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                       double &value) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                    const bool full_update) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                  const GlidePolar &glide_polar) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^                  double &best) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskWaypoint *GetActiveTaskPoint() const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  bool CheckTask() const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  bool IsScored() const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  bool IsValidTaskPoint(const int index_offset=0) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  bool TaskStarted(bool soft=false) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double CalcGradient(const AircraftState &state_now) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceNominal() override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistancePlanned() override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceRemaining(const GeoPoint &ref) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceScored(const GeoPoint &ref) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanDistanceTravelled(const GeoPoint &ref) override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanLegStartTime() override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  double ScanTotalStartTime() override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  void AcceptTaskPointVisitor(TaskPointConstVisitor &visitor) const override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  void Reset() override;$/;"	m	class:final
override	Engine/Task/Ordered/OrderedTask.hpp	/^  void SetActiveTaskPoint(unsigned desired) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/AATPoint.hpp	/^                        const FlatProjection &projection) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/AATPoint.hpp	/^                       const FlatProjection &projection) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/AATPoint.hpp	/^  bool Equals(const OrderedTaskPoint &other) const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/AATPoint.hpp	/^  const GeoPoint& GetLocationRemaining() const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/ASTPoint.hpp	/^  bool Equals(const OrderedTaskPoint &_other) const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^                            const AircraftState &ref_last) const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^                     OrderedTaskPoint *next) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  bool EntryPrecondition() const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  bool IsInSector(const AircraftState &ref) const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  double GetElevation() const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  void Reset() override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  void SetOrderedTaskSettings(const OrderedTaskSettings &otb) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  double GetElevation() const override;$/;"	m	class:IntermediateTaskPoint
override	Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) override;$/;"	m	class:IntermediateTaskPoint
override	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^                            const AircraftState &ref_last) const override;$/;"	m	class:OrderedTaskPoint
override	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  GeoVector GetNextLegVector() const override;$/;"	m	class:OrderedTaskPoint
override	Engine/Task/Ordered/Points/StartPoint.hpp	/^                           const AircraftState &ref_last) const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/StartPoint.hpp	/^                     OrderedTaskPoint *next) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/StartPoint.hpp	/^  bool IsInSector(const AircraftState &ref) const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/StartPoint.hpp	/^  double GetElevation() const override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/StartPoint.hpp	/^  void SetOrderedTaskSettings(const OrderedTaskSettings &s) override;$/;"	m	class:final
override	Engine/Task/Ordered/Points/StartPoint.hpp	/^  void SetTaskBehaviour(const TaskBehaviour &tb) override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskBestMc.hpp	/^  virtual double f(double mc) override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskCruiseEfficiency.hpp	/^  virtual double f(const double x) override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskEffectiveMacCready.hpp	/^  virtual double f(const double x) override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskGlideRequired.hpp	/^  virtual double f(double mc) override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^                         double minH) const override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  AircraftState get_aircraft_start(const AircraftState &aircraft) const override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^                         double minH) const override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyTotal.hpp	/^  AircraftState get_aircraft_start(const AircraftState &aircraft) const override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^                                 double minH) const override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^  virtual AircraftState get_aircraft_start(const AircraftState &aircraft) const override;$/;"	m	class:final
override	Engine/Task/Solvers/TaskMacCreadyTravelled.hpp	/^  virtual double get_min_height(const AircraftState &aircraft) const override;$/;"	m	class:final
override	Engine/Task/Unordered/AbortTask.hpp	/^                            bool full_update) override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AbortTask.hpp	/^  virtual TaskWaypoint *GetActiveTaskPoint() const override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AbortTask.hpp	/^  virtual bool IsValidTaskPoint(int index_offset) const override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AbortTask.hpp	/^  virtual unsigned TaskSize() const override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AbortTask.hpp	/^  virtual void Reset() override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AbortTask.hpp	/^  virtual void SetActiveTaskPoint(unsigned index) override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AbortTask.hpp	/^  void AcceptTaskPointVisitor(TaskPointConstVisitor &visitor) const override;$/;"	m	class:AbortTask
override	Engine/Task/Unordered/AlternateTask.hpp	/^                            bool reachable) override;$/;"	m	class:final
override	Engine/Task/Unordered/AlternateTask.hpp	/^  virtual void Clear() override;$/;"	m	class:final
override	Engine/Task/Unordered/AlternateTask.hpp	/^  virtual void Reset() override;$/;"	m	class:final
override	Engine/Task/Unordered/GotoTask.hpp	/^                            const bool full_update) override;$/;"	m	class:final
override	Engine/Task/Unordered/GotoTask.hpp	/^  virtual TaskWaypoint *GetActiveTaskPoint() const override;$/;"	m	class:final
override	Engine/Task/Unordered/GotoTask.hpp	/^  virtual bool IsValidTaskPoint(const int index_offset) const override;$/;"	m	class:final
override	Engine/Task/Unordered/GotoTask.hpp	/^  virtual unsigned TaskSize() const override;$/;"	m	class:final
override	Engine/Task/Unordered/GotoTask.hpp	/^  virtual void AcceptTaskPointVisitor(TaskPointConstVisitor& visitor) const override;$/;"	m	class:final
override	Engine/Task/Unordered/GotoTask.hpp	/^  virtual void SetActiveTaskPoint(unsigned index) override;$/;"	m	class:final
override	Engine/Task/Unordered/UnorderedTask.hpp	/^                                      GlideResult &total, GlideResult &leg) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^                                    const GlideResult &solution_remaining_leg) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^                                   const GlidePolar &glide_polar) const override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^                                  double *dmin, double *dmax) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^                                const AircraftState &state_last) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^                          double& best) const override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual bool CheckTask() const override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double CalcGradient(const AircraftState &state_now) const override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanDistanceNominal() override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanDistancePlanned() override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanDistanceRemaining(const GeoPoint &ref) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanDistanceScored(const GeoPoint &ref) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanDistanceTravelled(const GeoPoint &ref) override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanLegStartTime() override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTask.hpp	/^  virtual double ScanTotalStartTime() override;$/;"	m	class:UnorderedTask
override	Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^  virtual GeoVector GetVectorRemaining(const GeoPoint &reference) const override;$/;"	m	class:final
override	Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^  virtual double GetElevation() const override;$/;"	m	class:final
override	Event/Notify.hpp	/^  virtual bool OnUser(unsigned id) override;$/;"	m	class:final
override	Event/Poll/Queue.hpp	/^  void OnSignal(int signo) override;$/;"	m	class:final
override	Form/Button.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:Button
override	Form/Button.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:Button
override	Form/Button.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:Button
override	Form/Button.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:Button
override	Form/Button.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:Button
override	Form/Button.hpp	/^  void OnCancelMode() override;$/;"	m	class:Button
override	Form/Button.hpp	/^  void OnDestroy() override;$/;"	m	class:Button
override	Form/Button.hpp	/^  void OnKillFocus() override;$/;"	m	class:Button
override	Form/Button.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:Button
override	Form/Button.hpp	/^  void OnSetFocus() override;$/;"	m	class:Button
override	Form/CheckBox.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  void OnCancelMode() override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  void OnKillFocus() override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:CheckBoxControl
override	Form/CheckBox.hpp	/^  void OnSetFocus() override;$/;"	m	class:CheckBoxControl
override	Form/DataField/Angle.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	Form/DataField/Angle.hpp	/^  void SetFromCombo(int i, const TCHAR *s) override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  void SetAsInteger(int Value) override;$/;"	m	class:final
override	Form/DataField/Boolean.hpp	/^  void SetAsString(const TCHAR *Value) override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	Form/DataField/Enum.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/File.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	Form/DataField/Float.hpp	/^  void SetFromCombo(int iDataFieldIndex, const TCHAR *sValue) override;$/;"	m	class:final
override	Form/DataField/GeoPoint.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  void SetAsInteger(int value) override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  void SetAsString(const TCHAR *value) override;$/;"	m	class:final
override	Form/DataField/Integer.hpp	/^  void SetFromCombo(int iDataFieldIndex, const TCHAR *sValue) override;$/;"	m	class:final
override	Form/DataField/Password.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Prefix.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Prefix.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Prefix.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/RoughTime.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/RoughTime.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/RoughTime.hpp	/^  int GetAsInteger() const override;$/;"	m	class:final
override	Form/DataField/RoughTime.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/RoughTime.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/String.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:DataFieldString
override	Form/DataField/String.hpp	/^  void SetAsString(const TCHAR *Value) override;$/;"	m	class:DataFieldString
override	Form/DataField/Time.hpp	/^  ComboList CreateComboList(const TCHAR *reference) const override;$/;"	m	class:final
override	Form/DataField/Time.hpp	/^  const TCHAR *GetAsDisplayString() const override;$/;"	m	class:final
override	Form/DataField/Time.hpp	/^  const TCHAR *GetAsString() const override;$/;"	m	class:final
override	Form/DataField/Time.hpp	/^  void Dec() override;$/;"	m	class:final
override	Form/DataField/Time.hpp	/^  void Inc() override;$/;"	m	class:final
override	Form/DataField/Time.hpp	/^  void SetFromCombo(int data_field_index, const TCHAR *value_string) override;$/;"	m	class:final
override	Form/DigitEntry.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:CoordinateFormat
override	Form/DigitEntry.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:CoordinateFormat
override	Form/DigitEntry.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:CoordinateFormat
override	Form/DigitEntry.hpp	/^  void OnKillFocus() override;$/;"	m	class:CoordinateFormat
override	Form/DigitEntry.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:CoordinateFormat
override	Form/DigitEntry.hpp	/^  void OnSetFocus() override;$/;"	m	class:CoordinateFormat
override	Form/Draw.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndOwnerDrawFrame
override	Form/Edit.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  void OnCancelMode() override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  void OnKillFocus() override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:WndProperty
override	Form/Edit.hpp	/^  void OnSetFocus() override;$/;"	m	class:WndProperty
override	Form/Form.hpp	/^  bool OnCommand(unsigned id, unsigned code) override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  void OnCancelMode() override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  void OnCreate() override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  void OnDestroy() override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndForm
override	Form/Form.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:WndForm
override	Form/Frame.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:WndFrame
override	Form/GridView.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:GridView
override	Form/HLine.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:HLine
override	Form/List.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  bool OnMouseWheel(PixelPoint p, int delta) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnCancelMode() override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnDestroy() override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnKillFocus() override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnPaint(Canvas &canvas, const PixelRect &dirty) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:ListControl
override	Form/List.hpp	/^  void OnSetFocus() override;$/;"	m	class:ListControl
override	Form/TabDisplay.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  void OnCancelMode() override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  void OnKillFocus() override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:final
override	Form/TabDisplay.hpp	/^  void OnSetFocus() override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  void OnKillFocus() override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:final
override	Form/TabMenuDisplay.hpp	/^  void OnSetFocus() override;$/;"	m	class:final
override	Gauge/BigThermalAssistantWidget.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^                       const PixelRect &rc) override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^  virtual bool SetFocus() override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Hide() override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Move(const PixelRect &rc) override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^  virtual void Unprepare() override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWidget.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:BigThermalAssistantWidget
override	Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:BigThermalAssistantWindow
override	Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:BigThermalAssistantWindow
override	Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:BigThermalAssistantWindow
override	Gauge/BigThermalAssistantWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:BigThermalAssistantWindow
override	Gauge/BigThermalAssistantWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:BigThermalAssistantWindow
override	Gauge/BigThermalAssistantWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:BigThermalAssistantWindow
override	Gauge/BigTrafficWidget.cpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  virtual void OnCancelMode() override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  virtual void OnCreate() override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:FlarmTrafficControl	file:
override	Gauge/BigTrafficWidget.hpp	/^                       const PixelRect &rc) override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  virtual bool SetFocus() override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  virtual void Hide() override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  virtual void Move(const PixelRect &rc) override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  virtual void Unprepare() override;$/;"	m	class:TrafficWidget
override	Gauge/BigTrafficWidget.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:TrafficWidget
override	Gauge/FlarmTrafficWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:FlarmTrafficWindow
override	Gauge/FlarmTrafficWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:FlarmTrafficWindow
override	Gauge/GaugeFLARM.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:SmallTrafficWindow	file:
override	Gauge/GaugeFLARM.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:SmallTrafficWindow	file:
override	Gauge/GaugeFLARM.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:SmallTrafficWindow	file:
override	Gauge/GaugeFLARM.cpp	/^  virtual void OnCancelMode() override;$/;"	m	class:SmallTrafficWindow	file:
override	Gauge/GaugeFLARM.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:SmallTrafficWindow	file:
override	Gauge/GaugeFLARM.hpp	/^  virtual void Hide() override;$/;"	m	class:final
override	Gauge/GaugeFLARM.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Gauge/GaugeFLARM.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Gauge/GaugeFLARM.hpp	/^  virtual void Unprepare() override;$/;"	m	class:final
override	Gauge/GaugeFLARM.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	Gauge/GaugeThermalAssistant.cpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	Gauge/GaugeThermalAssistant.cpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	Gauge/GaugeThermalAssistant.cpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	Gauge/GaugeThermalAssistant.cpp	/^  virtual void OnCancelMode() override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	Gauge/GaugeThermalAssistant.cpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:GaugeThermalAssistantWindow	file:
override	Gauge/GaugeThermalAssistant.hpp	/^                                  const DerivedInfo &calculated) override;$/;"	m	class:final
override	Gauge/GaugeThermalAssistant.hpp	/^  virtual bool SetFocus() override;$/;"	m	class:final
override	Gauge/GaugeThermalAssistant.hpp	/^  virtual void Hide() override;$/;"	m	class:final
override	Gauge/GaugeThermalAssistant.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Gauge/GaugeThermalAssistant.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Gauge/GaugeThermalAssistant.hpp	/^  virtual void Unprepare() override;$/;"	m	class:final
override	Gauge/GaugeVario.hpp	/^  virtual void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:GaugeVario
override	Gauge/GaugeVario.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:GaugeVario
override	Gauge/GlueGaugeVario.hpp	/^  virtual void Hide() override;$/;"	m	class:final
override	Gauge/GlueGaugeVario.hpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	Gauge/GlueGaugeVario.hpp	/^  virtual void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Gauge/GlueGaugeVario.hpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:final
override	Gauge/GlueGaugeVario.hpp	/^  virtual void Unprepare() override;$/;"	m	class:final
override	Gauge/ThermalAssistantWindow.hpp	/^  virtual void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:ThermalAssistantWindow
override	Gauge/ThermalAssistantWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:ThermalAssistantWindow
override	HorizonWidget.hpp	/^  void Hide() override;$/;"	m	class:final
override	HorizonWidget.hpp	/^  void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:final
override	HorizonWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	HorizonWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:final
override	HorizonWidget.hpp	/^  void Unprepare() override;$/;"	m	class:final
override	IO/Async/AsioThread.hpp	/^  void Run() noexcept override;$/;"	m	class:final
override	IO/ConvertLineReader.hpp	/^  TCHAR *ReadLine() override;$/;"	m	class:ConvertLineReader
override	IO/ConvertLineReader.hpp	/^  long GetSize() const override;$/;"	m	class:ConvertLineReader
override	IO/ConvertLineReader.hpp	/^  long Tell() const override;$/;"	m	class:ConvertLineReader
override	IO/FileLineReader.hpp	/^  char *ReadLine() override;$/;"	m	class:FileLineReaderA
override	IO/FileLineReader.hpp	/^  long GetSize() const override;$/;"	m	class:FileLineReaderA
override	IO/FileLineReader.hpp	/^  long Tell() const override;$/;"	m	class:FileLineReaderA
override	IO/FileOutputStream.hxx	/^	void Write(const void *data, size_t size) override;$/;"	m	class:final
override	IO/FileReader.hxx	/^	size_t Read(void *data, size_t size) override;$/;"	m	class:final
override	IO/GunzipReader.hxx	/^	size_t Read(void *data, size_t size) override;$/;"	m	class:final
override	IO/ZipLineReader.hpp	/^  char *ReadLine() override;$/;"	m	class:ZipLineReaderA
override	IO/ZipLineReader.hpp	/^  long GetSize() const override;$/;"	m	class:ZipLineReaderA
override	IO/ZipLineReader.hpp	/^  long Tell() const override;$/;"	m	class:ZipLineReaderA
override	IO/ZipReader.hpp	/^  size_t Read(void *data, size_t size) override;$/;"	m	class:final
override	IO/ZlibError.hxx	/^	const char *what() const noexcept override;$/;"	m	class:final
override	InfoBoxes/Content/Alternate.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentAlternateGR
override	InfoBoxes/Content/Alternate.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentAlternateName
override	InfoBoxes/Content/Alternate.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentAlternateGR
override	InfoBoxes/Content/Alternate.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentAlternateName
override	InfoBoxes/Content/Altitude.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentAltitude
override	InfoBoxes/Content/Altitude.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentAltitudeGPS
override	InfoBoxes/Content/Contest.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentOLC
override	InfoBoxes/Content/Contest.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentOLCSpeed
override	InfoBoxes/Content/Contest.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentOLC
override	InfoBoxes/Content/Contest.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentOLCSpeed
override	InfoBoxes/Content/Direction.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentTrack
override	InfoBoxes/Content/Direction.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTrack
override	InfoBoxes/Content/MacCready.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentMacCready
override	InfoBoxes/Content/MacCready.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentMacCready
override	InfoBoxes/Content/Other.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentHorizon
override	InfoBoxes/Content/Other.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentHorizon
override	InfoBoxes/Content/Radio.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentActiveRadioFrequency
override	InfoBoxes/Content/Radio.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentStandbyRadioFrequency
override	InfoBoxes/Content/Radio.hpp	/^  virtual void Update(InfoBoxData & data) override;$/;"	m	class:InfoBoxContentActiveRadioFrequency
override	InfoBoxes/Content/Radio.hpp	/^  virtual void Update(InfoBoxData & data) override;$/;"	m	class:InfoBoxContentStandbyRadioFrequency
override	InfoBoxes/Content/Speed.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentSpeedGround
override	InfoBoxes/Content/Speed.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentSpeedGround
override	InfoBoxes/Content/Task.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentNextWaypoint
override	InfoBoxes/Content/Task.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentNextArrow
override	InfoBoxes/Content/Task.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentNextArrow
override	InfoBoxes/Content/Task.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentNextWaypoint
override	InfoBoxes/Content/Team.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentTeamCode
override	InfoBoxes/Content/Team.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentTeamCode
override	InfoBoxes/Content/Team.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTeamCode
override	InfoBoxes/Content/Thermal.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentClimbPercent
override	InfoBoxes/Content/Thermal.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentThermalAssistant
override	InfoBoxes/Content/Thermal.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentClimbPercent
override	InfoBoxes/Content/Thermal.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentThermalAssistant
override	InfoBoxes/Content/Trace.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentBarogram
override	InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentBarogram
override	InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentCirclingAverageSpark
override	InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentNettoVarioSpark
override	InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentTaskProgress
override	InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentThermalBand
override	InfoBoxes/Content/Trace.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentVarioSpark
override	InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentBarogram
override	InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentCirclingAverageSpark
override	InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentNettoVarioSpark
override	InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTaskProgress
override	InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentThermalBand
override	InfoBoxes/Content/Trace.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentVarioSpark
override	InfoBoxes/Content/Weather.hpp	/^  virtual bool HandleKey(const InfoBoxKeyCodes keycode) override;$/;"	m	class:InfoBoxContentTemperatureForecast
override	InfoBoxes/Content/Weather.hpp	/^  virtual const InfoBoxPanel *GetDialogContent() override;$/;"	m	class:InfoBoxContentWindArrow
override	InfoBoxes/Content/Weather.hpp	/^  virtual void OnCustomPaint(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:InfoBoxContentWindArrow
override	InfoBoxes/Content/Weather.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentTemperatureForecast
override	InfoBoxes/Content/Weather.hpp	/^  virtual void Update(InfoBoxData &data) override;$/;"	m	class:InfoBoxContentWindArrow
override	InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnKillFocus() override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  virtual void OnSetFocus() override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/InfoBoxWindow.hpp	/^  void OnPaintBuffer(Canvas &canvas) override;$/;"	m	class:InfoBoxWindow
override	InfoBoxes/Panel/ATCReference.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:ATCReferencePanel	file:
override	InfoBoxes/Panel/ATCReference.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:ATCReferencePanel	file:
override	InfoBoxes/Panel/AltitudeInfo.cpp	/^                          const PixelRect &rc) override;$/;"	m	class:AltitudeInfoPanel	file:
override	InfoBoxes/Panel/AltitudeInfo.cpp	/^  virtual void Hide() override;$/;"	m	class:AltitudeInfoPanel	file:
override	InfoBoxes/Panel/AltitudeInfo.cpp	/^  virtual void OnGPSUpdate(const MoreData &basic) override;$/;"	m	class:AltitudeInfoPanel	file:
override	InfoBoxes/Panel/AltitudeInfo.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:AltitudeInfoPanel	file:
override	InfoBoxes/Panel/AltitudeSetup.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:AltitudeSetupPanel	file:
override	InfoBoxes/Panel/AltitudeSetup.cpp	/^  virtual void OnModified(DataField &df) override;$/;"	m	class:AltitudeSetupPanel	file:
override	InfoBoxes/Panel/AltitudeSimulator.cpp	/^  virtual void OnOffset(double offset) override;$/;"	m	class:final	file:
override	InfoBoxes/Panel/MacCreadyEdit.cpp	/^  virtual void OnOffset(double offset) override;$/;"	m	class:final	file:
override	InfoBoxes/Panel/MacCreadySetup.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:MacCreadySetupPanel	file:
override	InfoBoxes/Panel/MacCreadySetup.cpp	/^  virtual void Show(const PixelRect &rc) override;$/;"	m	class:MacCreadySetupPanel	file:
override	InfoBoxes/Panel/MacCreadySetup.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:MacCreadySetupPanel	file:
override	InfoBoxes/Panel/RadioEdit.cpp	/^  virtual void OnOffset(double offset) override;$/;"	m	class:final	file:
override	Job/Async.hpp	/^  void Run() noexcept override;$/;"	m	class:final
override	Job/Thread.hpp	/^  void OnNotification() override;$/;"	m	class:JobThread
override	Job/Thread.hpp	/^  void Run() noexcept override;$/;"	m	class:JobThread
override	Kobo/KoboMenu.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Kobo/KoboMenu.cpp	/^  virtual bool KeyPress(unsigned key_code) override;$/;"	m	class:final	file:
override	Kobo/KoboMenu.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Kobo/NetworkDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Kobo/NetworkDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Kobo/SystemDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Kobo/SystemDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Kobo/ToolsDialog.cpp	/^                       const PixelRect &rc) override;$/;"	m	class:final	file:
override	Kobo/ToolsDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Kobo/WifiDialog.cpp	/^                   unsigned idx) noexcept override;$/;"	m	class:final	file:
override	Kobo/WifiDialog.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	MainWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual bool OnClose() noexcept override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual void OnPause() noexcept override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:MainWindow
override	MainWindow.hpp	/^  virtual void OnSetFocus() override;$/;"	m	class:MainWindow
override	MapWindow/GlueMapWindow.hpp	/^                                  const PixelPoint aircraft_pos) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^                           const PixelPoint aircraft_pos) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  bool OnMouseWheel(PixelPoint p, int delta) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual bool OnKeyDown(unsigned key_code) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual bool OnMultiTouchDown() override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void DrawThermalEstimate(Canvas &canvas) const override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void OnPaintBuffer(Canvas& canvas) override;$/;"	m	class:GlueMapWindow
override	MapWindow/GlueMapWindow.hpp	/^  virtual void Render(Canvas &canvas, const PixelRect &rc) override;$/;"	m	class:GlueMapWindow
override	MapWindow/MapWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:MapWindow
override	MapWindow/MapWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:MapWindow
override	MapWindow/MapWindow.hpp	/^  virtual void OnPaint(Canvas& canvas) override;$/;"	m	class:MapWindow
override	MapWindow/MapWindow.hpp	/^  virtual void OnPaintBuffer(Canvas& canvas) override;$/;"	m	class:MapWindow
override	MapWindow/MapWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:MapWindow
override	MapWindow/OverlayBitmap.hpp	/^            const WindowProjection &projection) noexcept override;$/;"	m	class:final
override	MapWindow/OverlayBitmap.hpp	/^  bool IsInside(GeoPoint p) const override;$/;"	m	class:final
override	MapWindow/TargetMapWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  virtual void OnCancelMode() override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  virtual void OnPaint(Canvas& canvas) override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  virtual void OnPaintBuffer(Canvas& canvas) override;$/;"	m	class:TargetMapWindow
override	MapWindow/TargetMapWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:TargetMapWindow
override	Menu/ShowMenuButton.cpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:ShowMenuButtonRenderer	file:
override	Menu/ShowMenuButton.hpp	/^  bool OnClicked() override;$/;"	m	class:ShowMenuButton
override	MergeThread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	Monitor/AirspaceWarningMonitor.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Monitor/MatTaskMonitor.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Monitor/TaskAdvanceMonitor.cpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:final	file:
override	Net/HTTP/DownloadManager.cpp	/^  void Tick() noexcept override;$/;"	m	class:final	file:
override	Operation/ConsoleOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) override;$/;"	m	class:ConsoleOperationEnvironment
override	Operation/ConsoleOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) override;$/;"	m	class:ConsoleOperationEnvironment
override	Operation/ConsoleOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) override;$/;"	m	class:ConsoleOperationEnvironment
override	Operation/MessageOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *text) override;$/;"	m	class:MessageOperationEnvironment
override	Operation/NoCancelOperationEnvironment.hpp	/^  bool IsCancelled() const override;$/;"	m	class:NoCancelOperationEnvironment
override	Operation/NoCancelOperationEnvironment.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:NoCancelOperationEnvironment
override	Operation/Operation.hpp	/^  bool IsCancelled() const override;$/;"	m	class:NullOperationEnvironment
override	Operation/Operation.hpp	/^  void SetErrorMessage(const TCHAR *text) override;$/;"	m	class:NullOperationEnvironment
override	Operation/Operation.hpp	/^  void SetProgressPosition(unsigned position) override;$/;"	m	class:NullOperationEnvironment
override	Operation/Operation.hpp	/^  void SetProgressRange(unsigned range) override;$/;"	m	class:NullOperationEnvironment
override	Operation/Operation.hpp	/^  void SetText(const TCHAR *text) override;$/;"	m	class:NullOperationEnvironment
override	Operation/Operation.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:NullOperationEnvironment
override	Operation/Operation.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:QuietOperationEnvironment
override	Operation/PopupOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *text) override;$/;"	m	class:PopupOperationEnvironment
override	Operation/ProxyOperationEnvironment.hpp	/^  bool IsCancelled() const override;$/;"	m	class:ProxyOperationEnvironment
override	Operation/ProxyOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *text) override;$/;"	m	class:ProxyOperationEnvironment
override	Operation/ProxyOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) override;$/;"	m	class:ProxyOperationEnvironment
override	Operation/ProxyOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) override;$/;"	m	class:ProxyOperationEnvironment
override	Operation/ProxyOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) override;$/;"	m	class:ProxyOperationEnvironment
override	Operation/ProxyOperationEnvironment.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:ProxyOperationEnvironment
override	Operation/ThreadedOperationEnvironment.hpp	/^  bool IsCancelled() const override;$/;"	m	class:ThreadedOperationEnvironment
override	Operation/ThreadedOperationEnvironment.hpp	/^  void SetErrorMessage(const TCHAR *error) override;$/;"	m	class:ThreadedOperationEnvironment
override	Operation/ThreadedOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) override;$/;"	m	class:ThreadedOperationEnvironment
override	Operation/ThreadedOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) override;$/;"	m	class:ThreadedOperationEnvironment
override	Operation/ThreadedOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) override;$/;"	m	class:ThreadedOperationEnvironment
override	Operation/ThreadedOperationEnvironment.hpp	/^  void Sleep(std::chrono::steady_clock::duration duration) noexcept override;$/;"	m	class:ThreadedOperationEnvironment
override	Operation/VerboseOperationEnvironment.hpp	/^  void SetProgressPosition(unsigned position) override;$/;"	m	class:VerboseOperationEnvironment
override	Operation/VerboseOperationEnvironment.hpp	/^  void SetProgressRange(unsigned range) override;$/;"	m	class:VerboseOperationEnvironment
override	Operation/VerboseOperationEnvironment.hpp	/^  void SetText(const TCHAR *text) override;$/;"	m	class:VerboseOperationEnvironment
override	PopupMessage.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:PopupMessage
override	PopupMessage.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:PopupMessage
override	ProgressWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:ProgressWindow
override	ProgressWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:ProgressWindow
override	Renderer/BitmapButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:BitmapButtonRenderer
override	Renderer/BitmapButtonRenderer.hpp	/^  unsigned GetMinimumButtonWidth() const override;$/;"	m	class:BitmapButtonRenderer
override	Renderer/ColorButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:ColorButtonRenderer
override	Renderer/SymbolButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:SymbolButtonRenderer
override	Renderer/TextButtonRenderer.hpp	/^                  bool enabled, bool focused, bool pressed) const override;$/;"	m	class:TextButtonRenderer
override	Renderer/TextButtonRenderer.hpp	/^  unsigned GetMinimumButtonWidth() const override;$/;"	m	class:TextButtonRenderer
override	Replay/DemoReplayGlue.hpp	/^  bool Update(NMEAInfo &data) override;$/;"	m	class:DemoReplayGlue
override	Replay/IgcReplay.hpp	/^  bool Update(NMEAInfo &data) override;$/;"	m	class:IgcReplay
override	Replay/IgcReplay.hpp	/^  ~IgcReplay() override;$/;"	m	class:IgcReplay
override	Replay/NmeaReplay.hpp	/^  bool Update(NMEAInfo &data) override;$/;"	m	class:NmeaReplay
override	Screen/Bitmap.hpp	/^  virtual void SurfaceCreated() override;$/;"	m	class:final
override	Screen/Bitmap.hpp	/^  virtual void SurfaceDestroyed() override;$/;"	m	class:final
override	Screen/BufferWindow.hpp	/^  void OnCreate() override;$/;"	m	class:BufferWindow
override	Screen/BufferWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:BufferWindow
override	Screen/BufferWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:BufferWindow
override	Screen/BufferWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:BufferWindow
override	Screen/ContainerWindow.hpp	/^  Window *GetFocusedWindow() noexcept override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMouseDouble(PixelPoint p) override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMouseDown(PixelPoint p) override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMouseMove(PixelPoint p, unsigned keys) override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMouseUp(PixelPoint p) override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMouseWheel(PixelPoint p, int delta) override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMultiTouchDown() override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  bool OnMultiTouchUp() override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  void ClearCapture() noexcept override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  void ClearFocus() noexcept override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  void OnCancelMode() override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  void SetFocus() noexcept override;$/;"	m	class:ContainerWindow
override	Screen/ContainerWindow.hpp	/^  ~ContainerWindow() noexcept override;$/;"	m	class:ContainerWindow
override	Screen/DoubleBufferWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:DoubleBufferWindow
override	Screen/DoubleBufferWindow.hpp	/^  virtual void OnDestroy() override;$/;"	m	class:DoubleBufferWindow
override	Screen/DoubleBufferWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:DoubleBufferWindow
override	Screen/LargeTextWindow.hpp	/^  bool OnKeyCheck(unsigned key_code) const override;$/;"	m	class:LargeTextWindow
override	Screen/LargeTextWindow.hpp	/^  bool OnKeyDown(unsigned key_code) override;$/;"	m	class:LargeTextWindow
override	Screen/LargeTextWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:LargeTextWindow
override	Screen/LargeTextWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:LargeTextWindow
override	Screen/OpenGL/BufferCanvas.hpp	/^  void SurfaceCreated() override;$/;"	m	class:DisplayOrientation
override	Screen/OpenGL/BufferCanvas.hpp	/^  void SurfaceDestroyed() override;$/;"	m	class:DisplayOrientation
override	Screen/PaintWindow.hpp	/^                    WPARAM wParam, LPARAM lParam) noexcept override;$/;"	m	class:PaintWindow
override	Screen/ProgressBar.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:ProgressBar
override	Screen/RawBitmap.hpp	/^  void SurfaceCreated() override;$/;"	m	class:final
override	Screen/RawBitmap.hpp	/^  void SurfaceDestroyed() override;$/;"	m	class:final
override	Screen/SingleWindow.hpp	/^  bool OnClose() noexcept override;$/;"	m	class:SingleWindow
override	Screen/SingleWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:SingleWindow
override	Screen/SingleWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:SingleWindow
override	Screen/SolidContainerWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:SolidContainerWindow
override	Screen/TerminalWindow.hpp	/^  virtual void OnCreate() override;$/;"	m	class:TerminalWindow
override	Screen/TerminalWindow.hpp	/^  virtual void OnPaint(Canvas &canvas) override;$/;"	m	class:TerminalWindow
override	Screen/TerminalWindow.hpp	/^  virtual void OnPaint(Canvas &canvas, const PixelRect &dirty) override;$/;"	m	class:TerminalWindow
override	Screen/TerminalWindow.hpp	/^  virtual void OnResize(PixelSize new_size) override;$/;"	m	class:TerminalWindow
override	Screen/TopWindow.hpp	/^                    WPARAM wParam, LPARAM lParam) noexcept override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  void DisableCapture() noexcept override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  void EnableCapture() noexcept override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  void Invalidate() noexcept override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  void OnDestroy() override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:TopWindow
override	Screen/TopWindow.hpp	/^  ~TopWindow() noexcept override;$/;"	m	class:TopWindow
override	Terrain/Thread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	Thread/StandbyThread.hpp	/^  void Run() noexcept override;$/;"	m	class:StandbyThread
override	Topography/Thread.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	Topography/TopographyFileRenderer.hpp	/^  virtual void SurfaceCreated() override;$/;"	m	class:final
override	Topography/TopographyFileRenderer.hpp	/^  virtual void SurfaceDestroyed() override;$/;"	m	class:final
override	Tracking/TrackingGlue.hpp	/^                         const GeoPoint &location, int altitude) override;$/;"	m	class:final
override	Tracking/TrackingGlue.hpp	/^                 double lift) override;$/;"	m	class:final
override	Tracking/TrackingGlue.hpp	/^              const GeoPoint &a, const GeoPoint &b) override;$/;"	m	class:final
override	Tracking/TrackingGlue.hpp	/^    virtual void OnUserName(uint32_t user_id, const TCHAR *name) override;$/;"	m	class:final
override	Tracking/TrackingGlue.hpp	/^  void OnSkyLinesError(std::exception_ptr e) override;$/;"	m	class:final
override	Tracking/TrackingGlue.hpp	/^  void Tick() noexcept override;$/;"	m	class:final
override	Waypoint/WaypointListBuilder.hpp	/^  void Visit(const WaypointPtr &waypoint) override;$/;"	m	class:final
override	Waypoint/WaypointReaderCompeGPS.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	Waypoint/WaypointReaderFS.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	Waypoint/WaypointReaderOzi.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	Waypoint/WaypointReaderSeeYou.hpp	/^  bool ParseLine(const TCHAR* line, Waypoints &way_points) override;$/;"	m	class:final
override	Waypoint/WaypointReaderWinPilot.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	Waypoint/WaypointReaderZander.hpp	/^  bool ParseLine(const TCHAR *line, Waypoints &way_points) override;$/;"	m	class:final
override	Widget/ActionWidget.hpp	/^  bool Click() override;$/;"	m	class:ActionWidget
override	Widget/ActionWidget.hpp	/^  void Hide() override;$/;"	m	class:ActionWidget
override	Widget/ActionWidget.hpp	/^  void ReClick() override;$/;"	m	class:ActionWidget
override	Widget/ActionWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:ActionWidget
override	Widget/ArrowPagerWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  void Hide() override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ArrowPagerWidget
override	Widget/ArrowPagerWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:ArrowPagerWidget
override	Widget/ButtonPanelWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  bool Click() override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  bool Leave() override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void Hide() override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void ReClick() override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonPanelWidget.hpp	/^  void Unprepare() override;$/;"	m	class:ButtonPanelWidget
override	Widget/ButtonWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:ButtonWidget
override	Widget/ButtonWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:ButtonWidget
override	Widget/ButtonWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:ButtonWidget
override	Widget/ButtonWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ButtonWidget
override	Widget/CallbackWidget.hpp	/^  bool Click() override;$/;"	m	class:CallbackWidget
override	Widget/CallbackWidget.hpp	/^  void Hide() override;$/;"	m	class:CallbackWidget
override	Widget/CallbackWidget.hpp	/^  void ReClick() override;$/;"	m	class:CallbackWidget
override	Widget/CallbackWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:CallbackWidget
override	Widget/ContainerWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ContainerWidget
override	Widget/CreateWindowWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:final
override	Widget/CreateWindowWidget.hpp	/^  void Unprepare() override;$/;"	m	class:final
override	Widget/DockWindow.hpp	/^  void OnResize(PixelSize new_size) override;$/;"	m	class:DockWindow
override	Widget/KeyboardWidget.hpp	/^  void Hide() override;$/;"	m	class:KeyboardWidget
override	Widget/KeyboardWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:KeyboardWidget
override	Widget/KeyboardWidget.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:KeyboardWidget
override	Widget/KeyboardWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:KeyboardWidget
override	Widget/KeyboardWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:KeyboardWidget
override	Widget/LargeTextWidget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:LargeTextWidget
override	Widget/LargeTextWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:LargeTextWidget
override	Widget/LargeTextWidget.hpp	/^  void Unprepare() override;$/;"	m	class:LargeTextWidget
override	Widget/ListWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:ListWidget
override	Widget/ListWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:ListWidget
override	Widget/OffsetButtonsWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  void Hide() override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  void OnAction(int id) noexcept override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OffsetButtonsWidget.hpp	/^  void Unprepare() override;$/;"	m	class:OffsetButtonsWidget
override	Widget/OverlappedWidget.hpp	/^  void Hide() override;$/;"	m	class:OverlappedWidget
override	Widget/PagerWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  bool Click() override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  bool Leave() override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void Hide() override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void ReClick() override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:PagerWidget
override	Widget/PagerWidget.hpp	/^  void Unprepare() override;$/;"	m	class:PagerWidget
override	Widget/QuestionWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:QuestionWidget
override	Widget/RowFormWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:RowFormWidget
override	Widget/RowFormWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:RowFormWidget
override	Widget/RowFormWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:RowFormWidget
override	Widget/RowFormWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:RowFormWidget
override	Widget/RowFormWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:RowFormWidget
override	Widget/RowFormWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:RowFormWidget
override	Widget/RowFormWidget.hpp	/^  void Unprepare() override;$/;"	m	class:RowFormWidget
override	Widget/SolidWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  bool Click() override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  bool Leave() override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void Hide() override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void ReClick() override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  void Unprepare() override;$/;"	m	class:SolidWidget
override	Widget/SolidWidget.hpp	/^  ~SolidWidget() override;$/;"	m	class:SolidWidget
override	Widget/TabWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  bool SetFocus() override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void Hide() override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void OnPageFlipped() override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  void Unprepare() override;$/;"	m	class:TabWidget
override	Widget/TabWidget.hpp	/^  ~TabWidget() override;$/;"	m	class:TabWidget
override	Widget/TextListWidget.hpp	/^                   unsigned i) noexcept override;$/;"	m	class:TextListWidget
override	Widget/TextListWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TextListWidget
override	Widget/TextListWidget.hpp	/^  void Unprepare() override;$/;"	m	class:TextListWidget
override	Widget/TextWidget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:TextWidget
override	Widget/TextWidget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:TextWidget
override	Widget/TextWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TextWidget
override	Widget/TextWidget.hpp	/^  void Unprepare() override;$/;"	m	class:TextWidget
override	Widget/TwoWidgets.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  bool Click() override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  bool Leave() override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  bool SetFocus() override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void Hide() override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void ReClick() override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:TwoWidgets
override	Widget/TwoWidgets.hpp	/^  void Unprepare() override;$/;"	m	class:TwoWidgets
override	Widget/ViewImageWidget.cpp	/^  void OnPaint(Canvas &canvas) override;$/;"	m	class:final	file:
override	Widget/ViewImageWidget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:ViewImageWidget
override	Widget/ViewImageWidget.hpp	/^  void Unprepare() override;$/;"	m	class:ViewImageWidget
override	Widget/Widget.hpp	/^  PixelSize GetMaximumSize() const override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  PixelSize GetMinimumSize() const override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  bool Click() override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  bool KeyPress(unsigned key_code) override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  bool Leave() override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  bool Save(bool &changed) override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  bool SetFocus() override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  void Initialise(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  void Prepare(ContainerWindow &parent, const PixelRect &rc) override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  void ReClick() override;$/;"	m	class:NullWidget
override	Widget/Widget.hpp	/^  void Unprepare() override;$/;"	m	class:NullWidget
override	Widget/WindowWidget.hpp	/^  void Hide() override;$/;"	m	class:WindowWidget
override	Widget/WindowWidget.hpp	/^  void Move(const PixelRect &rc) override;$/;"	m	class:WindowWidget
override	Widget/WindowWidget.hpp	/^  void Show(const PixelRect &rc) override;$/;"	m	class:WindowWidget
override	XML/DataNodeXML.hpp	/^  ConstDataNode *GetChildNamed(const TCHAR *name) const override;$/;"	m	class:final
override	XML/DataNodeXML.hpp	/^  List ListChildren() const override;$/;"	m	class:final
override	XML/DataNodeXML.hpp	/^  List ListChildrenNamed(const TCHAR *name) const override;$/;"	m	class:final
override	XML/DataNodeXML.hpp	/^  WritableDataNode *AppendChild(const TCHAR *name) override;$/;"	m	class:final
override	XML/DataNodeXML.hpp	/^  const TCHAR *GetAttribute(const TCHAR *name) const override;$/;"	m	class:final
override	XML/DataNodeXML.hpp	/^  const TCHAR *GetName() const override;$/;"	m	class:final
override	XML/DataNodeXML.hpp	/^  void SetAttribute(const TCHAR *name, const TCHAR *value) override;$/;"	m	class:final
overview	Terrain/RasterTileCache.hpp	/^  RasterBuffer overview;$/;"	m	class:RasterTileCache
overview_height_fine	Terrain/RasterTileCache.hpp	/^  unsigned int overview_width_fine, overview_height_fine;$/;"	m	class:RasterTileCache
overview_width_fine	Terrain/RasterTileCache.hpp	/^  unsigned int overview_width_fine, overview_height_fine;$/;"	m	class:RasterTileCache
own_teammate_code	NMEA/Derived.hpp	/^  TeamCode own_teammate_code;$/;"	m	struct:TeamInfo
owns_children	Engine/Airspace/Airspaces.hpp	/^  const bool owns_children;$/;"	m	class:Airspaces
oz	Device/Driver/IMI/Protocol/Types.hpp	/^    TObservationZone oz;$/;"	m	struct:IMI::TWaypoint
oz	Dialogs/Task/Widgets/ObservationZoneEditWidget.hpp	/^  ObservationZone &oz;$/;"	m	class:ObservationZoneEditWidget
oz	MapWindow/Items/MapItem.hpp	/^  const ObservationZonePoint *oz;$/;"	m	struct:TaskOZMapItem
oz_active_pen	Look/TaskLook.hpp	/^  Pen oz_active_pen;$/;"	m	struct:TaskLook
oz_current_pen	Look/TaskLook.hpp	/^  Pen oz_current_pen;$/;"	m	struct:TaskLook
oz_inactive_pen	Look/TaskLook.hpp	/^  Pen oz_inactive_pen;$/;"	m	struct:TaskLook
oz_parameter	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t oz_parameter;$/;"	m	struct:Volkslogger::DeclarationWaypoint
oz_point	Engine/Task/ObservationZones/ObservationZoneClient.hpp	/^  ObservationZonePoint *oz_point;$/;"	m	class:ObservationZoneClient
oz_shape	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t oz_shape;$/;"	m	struct:Volkslogger::DeclarationWaypoint
oztyp	Device/Driver/Volkslogger/vlapi2.h	/^    OZTYP oztyp;$/;"	m	struct:VLAPI_DATA::DCLWPT
ozv	Renderer/TaskPointRenderer.hpp	/^  OZRenderer &ozv;$/;"	m	class:TaskPointRenderer
p	Engine/Airspace/Predicate/AirspacePredicate.hpp	/^  const AirspacePredicate &p;$/;"	m	class:AirspacePredicateRef
p	Engine/Task/Stats/TaskSummary.hpp	/^  double p;$/;"	m	struct:TaskSummaryPoint
p	Geo/Flat/FlatEllipse.hpp	/^  FlatPoint p;$/;"	m	class:FlatEllipse
p	Replay/CatmullRomInterpolator.hpp	/^  Record p[4];$/;"	m	class:CatmullRomInterpolator
p	Screen/Memory/UncompressedImage.hpp	/^  const uint8_t *p;$/;"	m	struct:GrayPixelReader
p	Screen/Memory/UncompressedImage.hpp	/^  const uint8_t *p;$/;"	m	struct:RGBPixelReader
p	Screen/OpenGL/Buffer.hpp	/^  GLvoid *p;$/;"	m	class:GLBuffer
p	Util/StringBuilder.hxx	/^	pointer p;$/;"	m	class:StringBuilder
p	Util/StringParser.hxx	/^	const_pointer p;$/;"	m	class:StringParser
pOther	Topography/shapelib/mapserver.h	/^    void                *pOther;$/;"	m	struct:_FilterNode
pStr	XML/Parser.cpp	/^    const TCHAR *pStr;$/;"	m	struct:XML::NextToken	file:
p_abs_abs_	Math/KalmanFilter1d.hpp	/^  double p_abs_abs_;$/;"	m	class:KalmanFilter1d
p_abs_vel_	Math/KalmanFilter1d.hpp	/^  double p_abs_vel_;$/;"	m	class:KalmanFilter1d
p_remaining	Engine/Task/Stats/TaskSummary.hpp	/^  double p_remaining;$/;"	m	struct:TaskSummary
p_vel_vel_	Math/KalmanFilter1d.hpp	/^  double p_vel_vel_;$/;"	m	class:KalmanFilter1d
pabyRec	Topography/shapelib/mapshape.h	/^    uchar   *pabyRec;$/;"	m	struct:__anon82
pachFieldType	Topography/shapelib/mapshape.h	/^    char  *pachFieldType;$/;"	m	struct:__anon83
packed2unpacked	Device/Driver/Volkslogger/vlconv.cpp	/^  packed2unpacked(const uint8_t *packed)$/;"	f	class:C2
packet_id	Tracking/TrackingGlue.hpp	/^    unsigned packet_id;$/;"	m	struct:final::LiveTrack24State
padding	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD padding:12;$/;"	m	struct:IMI::Fix
padding	Gauge/ThermalAssistantRenderer.hpp	/^  unsigned padding;$/;"	m	class:ThermalAssistantRenderer
padding	Util/SliceAllocator.hxx	/^		char padding[sizeof(T) - sizeof(void *)];$/;"	m	struct:SliceAllocator::Item
padding	zzip/plugin.h	/^    struct { void* padding[8]; } ptr;$/;"	m	struct:_zzip_plugin_io::__anon213
padding_text	Renderer/ChartRenderer.hpp	/^  int padding_text;$/;"	m	class:ChartRenderer
page	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  int page, last_page;$/;"	m	class:final	file:
page	Dialogs/dlgAnalysis.cpp	/^static AnalysisPage page = AnalysisPage::BAROGRAPH;$/;"	v	file:
page_flipped_callback	Widget/PagerWidget.hpp	/^  PageFlippedCallback page_flipped_callback;$/;"	m	class:PagerWidget
pager	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  PagerWidget &pager;$/;"	m	class:VegaSchemeButtonsPage	file:
pager	Dialogs/Settings/dlgConfiguration.cpp	/^static ArrowPagerWidget *pager;$/;"	v	file:
pager	Form/TabDisplay.hpp	/^  TabWidget &pager;$/;"	m	class:final
pager	Form/TabMenuDisplay.hpp	/^  PagerWidget &pager;$/;"	m	class:final
pager	Widget/TabWidget.hpp	/^    PixelRect tab_display, extra, pager;$/;"	m	struct:TabWidget::Layout
pages	Form/TabMenuData.hpp	/^  const TabMenuPage *pages;$/;"	m	struct:TabMenuGroup
pages	PageSettings.hpp	/^  std::array<PageLayout, MAX_PAGES> pages;$/;"	m	struct:PageSettings
pages	PageState.hpp	/^  std::array<PageState, MAX_PAGES> pages;$/;"	m	struct:PagesState
pages	UISettings.hpp	/^  PageSettings pages;$/;"	m	struct:UISettings
pages	UIState.hpp	/^  PagesState pages;$/;"	m	struct:UIState
pair	Util/Cache.hxx	/^		Manual<Pair> pair;$/;"	m	class:Cache::Item
palette	Topography/shapelib/mapserver.h	/^    paletteObj palette; \/* holds a map palette *\/$/;"	m	struct:mapObj
paletteObj	Topography/shapelib/mapserver.h	/^  } paletteObj;$/;"	t	typeref:struct:__anon32
panFieldDecimals	Topography/shapelib/mapshape.h	/^    int   *panFieldDecimals;$/;"	m	struct:__anon83
panFieldOffset	Topography/shapelib/mapshape.h	/^    int   *panFieldOffset;$/;"	m	struct:__anon83
panFieldSize	Topography/shapelib/mapshape.h	/^    int   *panFieldSize;$/;"	m	struct:__anon83
panParts	Topography/shapelib/mapshape.h	/^    int   *panParts;$/;"	m	struct:__anon82
panRecAllLoaded	Topography/shapelib/mapshape.h	/^    int   panRecAllLoaded;$/;"	m	struct:__anon82
panRecLoaded	Topography/shapelib/mapshape.h	/^    ms_bitarray panRecLoaded;$/;"	m	struct:__anon82
panRecOffset	Topography/shapelib/mapshape.h	/^    int   *panRecOffset;$/;"	m	struct:__anon82
panRecSize	Topography/shapelib/mapshape.h	/^    int   *panRecSize;$/;"	m	struct:__anon82
panel	PageSettings.hpp	/^    unsigned panel;$/;"	m	struct:PageLayout::InfoBoxConfig
panel_index	UIState.hpp	/^  unsigned panel_index;$/;"	m	struct:UIState
panel_name	UIState.hpp	/^  StaticString<32u> panel_name;$/;"	m	struct:UIState
panels	InfoBoxes/Content/Factory.cpp	/^  const InfoBoxPanel *panels;$/;"	m	class:InfoBoxContentCallback	file:
panels	InfoBoxes/Content/Factory.cpp	/^  const InfoBoxPanel *panels;$/;"	m	struct:MetaData	file:
panels	InfoBoxes/Content/MacCready.cpp	/^static constexpr InfoBoxPanel panels[] = {$/;"	v	file:
panels	InfoBoxes/InfoBoxSettings.hpp	/^  Panel panels[MAX_PANELS];$/;"	m	struct:InfoBoxSettings
papszBottomLabels	Topography/shapelib/mapserver.h	/^    char  **papszBottomLabels;$/;"	m	struct:__anon57
papszLeftLabels	Topography/shapelib/mapserver.h	/^    char  **papszLeftLabels;$/;"	m	struct:__anon57
papszRightLabels	Topography/shapelib/mapserver.h	/^    char  **papszRightLabels;$/;"	m	struct:__anon57
papszTopLabels	Topography/shapelib/mapserver.h	/^    char  **papszTopLabels;$/;"	m	struct:__anon57
param	Event/Shared/Event.hpp	/^  unsigned param;$/;"	m	struct:Event
parameter	Weather/Rasp/RaspCache.hpp	/^  const unsigned parameter;$/;"	m	class:RaspCache
parameter1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE msgID, parameter1;$/;"	m	struct:IMI::TMsg
parameter2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD parameter2;$/;"	m	struct:IMI::TMsg
parameter3	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD parameter3;$/;"	m	struct:IMI::TMsg
parameters	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  StaticArray<Parameter, 32> parameters;$/;"	m	class:VegaParametersWidget
params	Dialogs/Device/BlueFly/BlueFlyConfigurationDialog.cpp	/^  BlueFlyDevice::BlueFlySettings params;$/;"	m	class:final	file:
parent	Dialogs/JobDialog.hpp	/^  SingleWindow &parent;$/;"	m	class:DialogJobRunner
parent	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  InfoBoxesConfigWidget *parent;$/;"	m	class:InfoBoxPreview	file:
parent	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  TaskMiscPanel &parent;$/;"	m	class:TaskActionsPanel
parent	Engine/PathSolvers/Dijkstra.hpp	/^    Node parent;$/;"	m	struct:Dijkstra::Edge
parent	Form/ButtonPanel.hpp	/^  ContainerWindow &parent;$/;"	m	class:ButtonPanel
parent	PopupMessage.hpp	/^  SingleWindow &parent;$/;"	m	class:PopupMessage
parent	Screen/Window.hpp	/^  ContainerWindow *parent = nullptr;$/;"	m	class:Window
parent	Util/QuadTree.hxx	/^		Bucket *parent;$/;"	m	struct:Bucket
parent	Widget/ManagedWidget.hpp	/^  ContainerWindow &parent;$/;"	m	class:ManagedWidget
parent	Widget/PagerWidget.hpp	/^  ContainerWindow *parent;$/;"	m	class:PagerWidget
parent_	Terrain/jasper/jpc/jpc_tagtree.h	/^	struct jpc_tagtreenode_ *parent_;$/;"	m	struct:jpc_tagtreenode_	typeref:struct:jpc_tagtreenode_::jpc_tagtreenode_
parents	Screen/Custom/Reference.hpp	/^  StaticArray<const ContainerWindow*, 6> parents;$/;"	m	class:WindowReference
parheightval	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t parheightval;$/;"	m	struct:__anon161
parms	Replay/DemoReplay.hpp	/^  AutopilotParameters parms;$/;"	m	class:DemoReplay
parms	Replay/TaskAutoPilot.hpp	/^  const AutopilotParameters &parms;$/;"	m	class:TaskAutoPilot
parms	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_msparms_t parms;$/;"	m	struct:__anon179
parseObj	Topography/shapelib/mapserver.h	/^  } parseObj;$/;"	t	typeref:struct:__anon36
parseResultObj	Topography/shapelib/mapserver.h	/^  } parseResultObj;$/;"	t	typeref:union:__anon33
parse_assignment	Input/InputParser.cpp	/^parse_assignment(TCHAR *buffer, const TCHAR *&key, const TCHAR *&value)$/;"	f	file:
parsed_metar	Weather/NOAAStore.hpp	/^    ParsedMETAR parsed_metar;$/;"	m	struct:NOAAStore::Item
parsed_metar_available	Weather/NOAAStore.hpp	/^    bool parsed_metar_available;$/;"	m	struct:NOAAStore::Item
parser	Device/Descriptor.hpp	/^  NMEAParser parser;$/;"	m	class:final
parser	Replay/NmeaReplay.hpp	/^  NMEAParser *parser;$/;"	m	class:NmeaReplay
partials	Topography/shapelib/mapserver.h	/^    int partials; \/* can labels run of an image *\/$/;"	m	struct:labelObj
partno	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t partno;$/;"	m	struct:__anon158
partno	Terrain/jasper/jpc/jpc_dec.h	/^	int partno;$/;"	m	struct:__anon150
parwidthval	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t parwidthval;$/;"	m	struct:__anon161
pasBottom	Topography/shapelib/mapserver.h	/^    pointObj *pasBottom;$/;"	m	struct:__anon57
pasLeft	Topography/shapelib/mapserver.h	/^    pointObj *pasLeft;$/;"	m	struct:__anon57
pasRight	Topography/shapelib/mapserver.h	/^    pointObj *pasRight;$/;"	m	struct:__anon57
pasTop	Topography/shapelib/mapserver.h	/^    pointObj *pasTop;$/;"	m	struct:__anon57
passive_brush	Look/FlarmTrafficLook.hpp	/^  Brush passive_brush;$/;"	m	struct:FlarmTrafficLook
passive_color	Look/FlarmTrafficLook.hpp	/^  Color passive_color;$/;"	m	struct:FlarmTrafficLook
passive_pen	Look/FlarmTrafficLook.hpp	/^  Pen passive_pen;$/;"	m	struct:FlarmTrafficLook
passno	Terrain/jasper/jpc/jpc_dec.h	/^	int passno;$/;"	m	struct:jpc_dec_seg_s
password	Net/HTTP/ToBuffer.hpp	/^    const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToBufferJob
password	Net/HTTP/ToFile.hpp	/^    const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToFileJob
password	Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> password;$/;"	m	struct:LiveTrack24::Settings
password	Weather/PCMet/Settings.hpp	/^    StaticString<64> password;$/;"	m	struct:PCMetSettings::Credentials
password_button	Dialogs/ProfileListDialog.cpp	/^  Button *password_button;$/;"	m	class:final	file:
past	Engine/Task/Points/SampledTaskPoint.hpp	/^  bool past;$/;"	m	class:SampledTaskPoint
paste_button	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^    PixelRect copy_button, paste_button, close_button;$/;"	m	struct:final::Layout	file:
paste_button	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  Button copy_button, paste_button, close_button;$/;"	m	class:final	file:
path	Device/Config.hpp	/^  StaticString<64> path;$/;"	m	struct:DeviceConfig
path	Device/Port/TTYEnumerator.hpp	/^  char path[64];$/;"	m	class:TTYEnumerator
path	Dialogs/Device/CAI302/WaypointUploader.hpp	/^  const Path path;$/;"	m	class:CAI302WaypointUploader
path	Dialogs/DownloadFilePicker.cpp	/^  AllocatedPath path = AllocatedPath(nullptr);$/;"	m	class:final	file:
path	Dialogs/Plane/PlaneListDialog.cpp	/^    AllocatedPath path;$/;"	m	struct:final::ListItem	file:
path	Dialogs/ProfileListDialog.cpp	/^    AllocatedPath path;$/;"	m	struct:final::ListItem	file:
path	Dialogs/Weather/MapOverlayWidget.cpp	/^    AllocatedPath path;$/;"	m	struct:final::Item	file:
path	Form/DataField/File.hpp	/^    AllocatedPath path;$/;"	m	struct:final::Item
path	IO/FileOutputStream.hxx	/^	const AllocatedPath path;$/;"	m	class:final
path	IO/FileReader.hxx	/^	AllocatedPath path;$/;"	m	class:final
path	Kobo/ToolsDialog.cpp	/^  AllocatedPath path;$/;"	m	struct:ListItem	file:
path	Logger/ExternalLogger.cpp	/^  const Path path;$/;"	m	class:DownloadFlightJob	file:
path	Logger/FlightLogger.hpp	/^  AllocatedPath path = nullptr;$/;"	m	class:FlightLogger
path	Net/HTTP/ToFile.hpp	/^    const Path path;$/;"	m	class:Net::DownloadToFileJob
path	Replay/Replay.hpp	/^  AllocatedPath path = nullptr;$/;"	m	class:final
path	Task/TaskFile.hpp	/^  AllocatedPath path;$/;"	m	class:TaskFile
path	Topography/shapelib/mapserver.h	/^    multipointObj path;$/;"	m	struct:__anon30
path	Weather/PCMet/Overlays.hpp	/^  AllocatedPath path;$/;"	m	struct:PCMet::Overlay
path	Weather/PCMet/Overlays.hpp	/^  AllocatedPath path;$/;"	m	struct:PCMet::OverlayInfo
path	Weather/Rasp/RaspStore.hpp	/^  const AllocatedPath path;$/;"	m	class:RaspStore
path_relative	Dialogs/DownloadFilePicker.cpp	/^  const Path path_relative;$/;"	m	class:final	file:
path_relative	Net/HTTP/DownloadManager.cpp	/^    AllocatedPath path_relative;$/;"	m	struct:final::Item	file:
pathname	Terrain/jasper/jas_stream.h	/^	char pathname[L_tmpnam + 1];$/;"	m	struct:__anon121
pattern	Topography/shapelib/mapserver.h	/^    double pattern[MS_MAXPATTERNLENGTH]; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
pattern	Topography/shapelib/mapserver.h	/^    double pattern[MS_MAXPATTERNLENGTH];$/;"	m	struct:__anon69
patternlength	Topography/shapelib/mapserver.h	/^    int patternlength;  \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
patternlength	Topography/shapelib/mapserver.h	/^    int patternlength;$/;"	m	struct:__anon69
patternoffset	Topography/shapelib/mapserver.h	/^    double patternoffset;$/;"	m	struct:__anon69
pause_button	Dialogs/Device/PortMonitor.cpp	/^  Button *pause_button;$/;"	m	class:final	file:
paused	Dialogs/Device/PortMonitor.cpp	/^  bool paused;$/;"	m	class:final	file:
paused	Screen/TopWindow.hpp	/^  bool paused = false;$/;"	m	class:TopWindow
paused_cond	Screen/TopWindow.hpp	/^  Cond paused_cond;$/;"	m	class:TopWindow
paused_mutex	Screen/TopWindow.hpp	/^  Mutex paused_mutex;$/;"	m	class:TopWindow
payload	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE payload[COMM_MAX_PAYLOAD_SIZE];$/;"	m	struct:IMI::TMsg
payloadSize	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD payloadSize;$/;"	m	struct:IMI::TMsg
pboundinglines	Topography/shapelib/mapserver.h	/^    lineObj   *pboundinglines;$/;"	m	struct:__anon56
pboundingpoints	Topography/shapelib/mapserver.h	/^    pointObj  *pboundingpoints;$/;"	m	struct:__anon56
pc_met	Dialogs/Weather/MapOverlayWidget.cpp	/^    std::unique_ptr<PCMet::OverlayInfo> pc_met;$/;"	m	struct:final::Item	file:
pchg	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchg_t *pchg;$/;"	m	struct:__anon138
pchglist	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_pchglist_t *pchglist;$/;"	m	struct:__anon143
pchglist	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchglist_t *pchglist;$/;"	m	struct:__anon138
pchgno	Terrain/jasper/jpc/jpc_t2cod.h	/^	int pchgno;$/;"	m	struct:__anon138
pchgs	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_pocpchg_t *pchgs;$/;"	m	struct:__anon170
pchgs	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pchg_t **pchgs;$/;"	m	struct:__anon135
pclr	Terrain/jasper/jp2/jp2_cod.h	/^		jp2_pclr_t pclr;$/;"	m	union:__anon117::__anon118
pcm_mixer	Audio/GlobalPCMMixer.cpp	/^PCMMixer *pcm_mixer = nullptr;$/;"	v
pcm_resource_player	Audio/GlobalPCMResourcePlayer.cpp	/^PCMResourcePlayer *pcm_resource_player = nullptr;$/;"	v
pcmet	Weather/Settings.hpp	/^  PCMetSettings pcmet;$/;"	m	struct:WeatherSettings
pcol	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t pcol;$/;"	m	struct:__anon115
pdop	NMEA/GPSState.hpp	/^  double pdop;$/;"	m	struct:GPSState
peek	Util/OverwritingRingBuffer.hpp	/^  const T &peek() const {$/;"	f	class:TrivialOverwritingRingBuffer
pen	Look/GestureLook.hpp	/^  Pen pen, invalid_pen;$/;"	m	struct:GestureLook
pen	Look/WaveLook.hpp	/^  Pen pen;$/;"	m	struct:WaveLook
pen	Screen/Memory/Canvas.hpp	/^  Pen pen;$/;"	m	class:Canvas
pen	Screen/OpenGL/Canvas.hpp	/^  Pen pen;$/;"	m	class:Canvas
pen	Screen/Pen.hpp	/^  HPEN pen = nullptr;$/;"	m	class:Pen
pen	Topography/ShapeRenderer.hpp	/^  const Pen *pen;$/;"	m	class:ShapeRenderer
pen	Topography/TopographyFileRenderer.hpp	/^  Pen pen;$/;"	m	class:final
pen_above	Look/FinalGlideBarLook.hpp	/^  Pen pen_above;$/;"	m	struct:FinalGlideBarLook
pen_active	Look/ThermalBandLook.hpp	/^  Pen pen_active;$/;"	m	struct:ThermalBandLook
pen_below	Look/FinalGlideBarLook.hpp	/^  Pen pen_below;$/;"	m	struct:FinalGlideBarLook
pen_below_landable	Look/FinalGlideBarLook.hpp	/^  Pen pen_below_landable;$/;"	m	struct:FinalGlideBarLook
pen_climb	Look/VarioBarLook.hpp	/^  Pen pen_climb;$/;"	m	struct:VarioBarLook
pen_inactive	Look/ThermalBandLook.hpp	/^  Pen pen_inactive;$/;"	m	struct:ThermalBandLook
pen_mc	Look/VarioBarLook.hpp	/^  Pen pen_mc;$/;"	m	struct:VarioBarLook
pen_sink	Look/VarioBarLook.hpp	/^  Pen pen_sink;$/;"	m	struct:VarioBarLook
pen_width	Topography/TopographyFile.hpp	/^  const unsigned pen_width;$/;"	m	class:TopographyFile
pen_width_scale	Screen/Layout.cpp	/^  unsigned pen_width_scale = 1024;$/;"	m	namespace:Layout	file:
pending	DrawThread.hpp	/^  bool pending = true;$/;"	m	class:final
pending	Event/Timer.hpp	/^  bool pending = false;$/;"	m	class:final
pending	Thread/StandbyThread.hpp	/^  bool pending = false;$/;"	m	class:StandbyThread
pens	Look/ChartLook.hpp	/^  Pen pens[STYLE_COUNT];$/;"	m	struct:ChartLook
per_device_data	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo per_device_data[NUMDEV];$/;"	m	class:DeviceBlackboard
percent_delta_time	Computer/CirclingComputer.hpp	/^  DeltaTime percent_delta_time;$/;"	m	class:CirclingComputer
perf	Engine/Airspace/AirspaceWarningManager.cpp	/^  const AirspaceAircraftPerformance &perf;$/;"	m	class:final	file:
period	RateLimiter.hpp	/^  std::chrono::steady_clock::duration period, delay;$/;"	m	class:RateLimiter
period_min	Thread/WorkerThread.hpp	/^  const std::chrono::steady_clock::duration period_min, idle_min, delay;$/;"	m	class:WorkerThread
period_scale	Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
period_scheme	Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
period_schemes	Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice period_schemes[] = {$/;"	v
persistent_callback	Lua/Persistent.cpp	/^static constexpr char persistent_callback[] = "xcsoar.persistent_callback";$/;"	v	file:
persistent_table	Lua/Persistent.cpp	/^static constexpr char persistent_table[] = "xcsoar.persistent_table";$/;"	v	file:
phys_addr	Screen/FB/mxcfb.h	/^	__u32 phys_addr;$/;"	m	struct:mxcfb_alt_buffer_data
pi	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_pi_t *pi;$/;"	m	struct:__anon150
picomp	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_picomp_t *picomp;$/;"	m	struct:__anon138
picomps	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_picomp_t *picomps;$/;"	m	struct:__anon138
pilot	Device/Driver/LX/LXN.hpp	/^    char pilot[19];$/;"	m	struct:LXN::FlightInfo
pilot	Device/Driver/LX/Protocol.hpp	/^    char pilot[52];$/;"	m	struct:LX::FlightInfo
pilot	Device/Driver/LXERA/Protocol.hpp	/^    char pilot[52];$/;"	m	struct:LXEra::FlightInfo
pilot	Device/Driver/Volkslogger/vlapi2.h	/^      char pilot[65];$/;"	m	struct:VLAPI_DATA::DECLARATION::FLIGHTINFO
pilot	Device/Driver/Volkslogger/vlconv.h	/^  char pilot[65];					\/\/ flight-info, can be enhanced by all$/;"	m	struct:DIRENTRY
pilot	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(22)> pilot;$/;"	m	struct:FlarmNetRecord
pilot_id	Tracking/SkyLines/Protocol.hpp	/^    uint32_t pilot_id;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
pilot_name	Device/Declaration.hpp	/^  StaticString<64> pilot_name;$/;"	m	struct:Declaration
pilot_name	Device/Driver/CAI302/Protocol.hpp	/^      char pilot_name[24];$/;"	m	struct:CAI302::FileList::FileInfo
pilot_name	Logger/Settings.hpp	/^  StaticString<64> pilot_name;$/;"	m	struct:LoggerSettings
pilots	Device/Driver/Volkslogger/vlapi2.h	/^    PILOT *pilots;$/;"	m	struct:VLAPI_DATA::DATABASE
pirker	Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat pirker;$/;"	m	struct:ElementStat
pirlvl	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pirlvl_t *pirlvl;$/;"	m	struct:__anon138
pirlvl_destroy	Terrain/jasper/jpc/jpc_t2cod.c	/^static void pirlvl_destroy(jpc_pirlvl_t *rlvl)$/;"	f	file:
pirlvls	Terrain/jasper/jpc/jpc_t2cod.h	/^	jpc_pirlvl_t *pirlvls;$/;"	m	struct:__anon137
pitch	Screen/Custom/UncompressedImage.hpp	/^  unsigned pitch, width, height;$/;"	m	class:UncompressedImage
pitch	Screen/Memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:ConstImageBuffer
pitch	Screen/Memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:WritableImageBuffer
pitch_and_period_scales	Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice pitch_and_period_scales[] = {$/;"	v
pitch_angle	NMEA/Attitude.hpp	/^  Angle pitch_angle;$/;"	m	struct:AttitudeState
pitch_angle_available	NMEA/Attitude.hpp	/^  Validity pitch_angle_available;$/;"	m	struct:AttitudeState
pitch_angle_computed	NMEA/Attitude.hpp	/^  bool pitch_angle_computed;$/;"	m	struct:AttitudeState
pitch_scale	Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
pitch_scheme	Dialogs/Device/Vega/Schemes.hpp	/^    int beep_type, pitch_scheme, pitch_scale, period_scheme, period_scale;$/;"	m	struct:VEGA_SCHEME::Audio
pitch_schemes	Dialogs/Device/Vega/AudioParameters.hpp	/^static constexpr StaticEnumChoice pitch_schemes[] = {$/;"	v
pitot_offset	Android/I2CbaroDevice.hpp	/^  double pitot_offset;$/;"	m	class:final
pitot_pressure	NMEA/Info.hpp	/^  AtmosphericPressure pitot_pressure;$/;"	m	struct:NMEAInfo
pitot_pressure_available	NMEA/Info.hpp	/^  Validity pitot_pressure_available;$/;"	m	struct:NMEAInfo
pixel	Topography/shapelib/mapserver.h	/^    colorObj *pixel; \/* for raster layers *\/$/;"	m	struct:__anon36
pixel_pan	Form/List.hpp	/^  unsigned pixel_pan = 0;$/;"	m	class:ListControl
pixel_size	Terrain/RasterRenderer.hpp	/^  double pixel_size;$/;"	m	class:RasterRenderer
pkthdrstream	Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t *pkthdrstream;$/;"	m	struct:__anon150
pkthdrstreampos	Terrain/jasper/jpc/jpc_dec.h	/^	long pkthdrstreampos;$/;"	m	struct:__anon150
pkthdrstreams	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_streamlist_t *pkthdrstreams;$/;"	m	struct:__anon152
pktno	Terrain/jasper/jpc/jpc_t2cod.h	/^	int pktno;$/;"	m	struct:__anon138
plane	Computer/Settings.hpp	/^  Plane plane;$/;"	m	struct:ComputerSettings
plane	Dialogs/Plane/PlaneDetailsDialog.cpp	/^  Plane plane;$/;"	m	class:final	file:
plane	Dialogs/Plane/PlanePolarDialog.cpp	/^  Plane plane;$/;"	m	class:final	file:
plane_pen	Look/FlarmTrafficLook.hpp	/^  Pen plane_pen, radar_pen;$/;"	m	struct:FlarmTrafficLook
plane_pen	Look/ThermalAssistantLook.hpp	/^  Pen plane_pen, polygon_pen;$/;"	m	struct:ThermalAssistantLook
plane_type	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(22)> plane_type;$/;"	m	struct:FlarmNetRecord
planned	Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer planned;$/;"	m	class:ElementStatComputer
planned	Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat planned;$/;"	m	struct:ElementStat
planned_route	NMEA/Derived.hpp	/^  StaticRoute planned_route;$/;"	m	struct:DerivedInfo
planner	Engine/Route/RoutePlanner.hpp	/^  AStar<RoutePoint, RoutePointHasher> planner;$/;"	m	class:RoutePlanner
planner	Task/RoutePlannerGlue.hpp	/^  AirspaceRoute planner;$/;"	m	class:RoutePlannerGlue
platform	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t platform; \/* primary platform *\/$/;"	m	struct:__anon189
play	Audio/AndroidPCMPlayer.hpp	/^  SLES::Play play;$/;"	m	class:AndroidPCMPlayer
play	Audio/SLES/Play.hpp	/^    SLPlayItf play;$/;"	m	class:SLES::Play
playExternal_method	Android/SoundUtil.cpp	/^  static jmethodID playExternal_method;$/;"	m	namespace:SoundUtil	file:
play_method	Android/SoundUtil.cpp	/^  static jmethodID play_method;$/;"	m	namespace:SoundUtil	file:
play_object	Audio/AndroidPCMPlayer.hpp	/^  SLES::Object play_object;$/;"	m	class:AndroidPCMPlayer
player	Audio/PCMMixer.hpp	/^  std::unique_ptr<PCMPlayer> player;$/;"	m	class:final
player	Audio/PCMResourcePlayer.hpp	/^  std::unique_ptr<PCMPlayer> player;$/;"	m	class:PCMResourcePlayer
player	Audio/VarioGlue.cpp	/^static PCMPlayer *player;$/;"	v	file:
plt	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR plt[IMIDECL_PLT_LENGTH];$/;"	m	struct:IMI::FlightInfo
plt	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR plt[IMIDECL_PLT_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
plugin	Topography/shapelib/mapserver.h	/^      void *plugin;$/;"	m	union:imageObj::__anon58
plugin_library	Topography/shapelib/mapserver.h	/^    char *plugin_library;$/;"	m	struct:layerObj
plugin_library_original	Topography/shapelib/mapserver.h	/^    char *plugin_library_original; \/* this is needed for mapfile writing *\/$/;"	m	struct:layerObj
pnt	Topography/shapelib/mapserver.h	/^  pointObj pnt;$/;"	m	struct:__anon66
poc	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_poc_t poc;$/;"	m	union:__anon178
poi	Computer/Settings.hpp	/^  PlacesOfInterestSettings poi;$/;"	m	struct:ComputerSettings
point	Engine/Route/AirspaceRoute.hpp	/^    RoutePoint point;$/;"	m	struct:AirspaceRoute::RouteAirspaceIntersection
point	Engine/Task/Unordered/AbortTask.hpp	/^    UnorderedTaskPoint point;$/;"	m	struct:AbortTask::AlternateTaskPoint
point	Engine/Trace/Trace.hpp	/^    TracePoint point;$/;"	m	struct:Trace::TraceDelta
point	Event/Shared/Event.hpp	/^  PixelPoint point;$/;"	m	struct:Event
point	Geo/Flat/FlatRay.hpp	/^  FlatGeoPoint point;$/;"	m	class:FlatRay
point	Renderer/WaypointRenderer.cpp	/^  PixelPoint point;$/;"	m	struct:VisibleWaypoint	file:
point	Topography/shapelib/mapprimitive.h	/^  pointObj *point;$/;"	m	struct:__anon78
point	Topography/shapelib/mapserver.h	/^    pointObj point; \/* by point *\/$/;"	m	struct:__anon40
point	Topography/shapelib/mapserver.h	/^    pointObj point; \/* label point *\/$/;"	m	struct:__anon46
pointObj	Topography/shapelib/mapprimitive.h	/^} pointObj;$/;"	t	typeref:struct:__anon77
point_buffer	Renderer/ChartRenderer.hpp	/^  ReusableArray<BulkPixelPoint> point_buffer;$/;"	m	class:ChartRenderer
point_to_real_x	Screen/TopWindow.hpp	/^  float point_to_real_x = 1, point_to_real_y = 1;$/;"	m	class:TopWindow
point_to_real_y	Screen/TopWindow.hpp	/^  float point_to_real_x = 1, point_to_real_y = 1;$/;"	m	class:TopWindow
point_types	Dialogs/Task/MutateTaskPointDialog.cpp	/^static TrivialArray<TaskPointFactoryType, LegalPointSet::N> point_types;$/;"	v	file:
pointer	Engine/Trace/Trace.cpp	/^  typedef typename I::pointer *pointer;$/;"	t	class:PointerIterator	file:
pointer	Engine/Trace/Trace.hpp	/^    typedef const TracePoint *pointer;$/;"	t	class:Trace::const_iterator
pointer	Event/Poll/WaylandQueue.hpp	/^  struct wl_pointer *pointer = nullptr;$/;"	m	class:final	typeref:struct:final::wl_pointer
pointer	OS/Path.hpp	/^  typedef Path::pointer pointer;$/;"	t	class:AllocatedPath
pointer	OS/Path.hpp	/^  typedef value_type::pointer pointer;$/;"	t	class:Path
pointer	Screen/Memory/Buffer.hpp	/^  typedef typename PixelTraits::const_pointer pointer;$/;"	t	struct:ConstImageBuffer
pointer	Screen/Memory/Buffer.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:WritableImageBuffer
pointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	class:TransparentInvertPixelOperations
pointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:BinaryWritePixel
pointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:PerPixelOperations
pointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::pointer pointer;$/;"	t	struct:UnaryWritePixel
pointer	Screen/Memory/PixelTraits.hpp	/^  typedef color_type *pointer;$/;"	t	struct:BGRAPixelTraits
pointer	Screen/Memory/PixelTraits.hpp	/^  typedef color_type *pointer;$/;"	t	struct:GreyscalePixelTraits
pointer	Util/CastIterator.hpp	/^  typedef VT *pointer;$/;"	t	class:CastIterator
pointer	Util/LightString.hxx	/^	typedef typename StringPointer<T>::pointer pointer;$/;"	t	class:LightString
pointer	Util/QuadTree.hxx	/^		typedef T *pointer;$/;"	t	class:iterator
pointer	Util/QuadTree.hxx	/^		typedef const T *pointer;$/;"	t	class:const_iterator
pointer	Util/SliceAllocator.hxx	/^	typedef T *pointer;$/;"	t	class:GlobalSliceAllocator
pointer	Util/SliceAllocator.hxx	/^	typedef T *pointer;$/;"	t	class:SliceAllocator
pointer	Util/StringBuilder.hxx	/^	typedef T *pointer;$/;"	t	class:StringBuilder
pointer	Util/StringParser.hxx	/^	typedef T *pointer;$/;"	t	class:StringParser
pointer_listener	Event/Poll/WaylandQueue.cpp	/^static constexpr struct wl_pointer_listener pointer_listener = {$/;"	v	typeref:struct:wl_pointer_listener	file:
pointer_position	Event/Poll/WaylandQueue.hpp	/^  IntPoint2D pointer_position = {0, 0};$/;"	m	class:final
points	Airspace/AirspaceParser.cpp	/^  std::vector<GeoPoint> points;$/;"	m	struct:TempAirspaceType	file:
points	Computer/ThermalLocator.hpp	/^  Point points[TLOCATOR_NMAX];$/;"	m	class:ThermalLocator
points	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PointEditor points[3];$/;"	m	class:PolarShapeEditWidget
points	Engine/Route/RoutePolar.hpp	/^  RoutePolarPoint points[ROUTEPOLAR_POINTS];$/;"	m	class:RoutePolar
points	Engine/Task/Solvers/TaskMacCready.hpp	/^  StaticArray<TaskPoint *, MAX_SIZE> points;$/;"	m	class:TaskMacCready
points	MapWindow/MapWindowGlideRange.cpp	/^  BulkPixelPointVector points;$/;"	m	struct:ProjectedFans	file:
points	Polar/Shape.hpp	/^  std::array<PolarPoint, 3> points;$/;"	m	struct:PolarShape
points	Renderer/RotatedPolygonRenderer.hpp	/^  const BulkPixelPoint *points;$/;"	m	class:RotatedPolygonRenderer
points	Renderer/TrailRenderer.hpp	/^  AllocatedArray<BulkPixelPoint> points;$/;"	m	class:TrailRenderer
points	Topography/ShapeRenderer.hpp	/^  AllocatedArray<BulkPixelPoint> points;$/;"	m	class:ShapeRenderer
points	Topography/XShape.hpp	/^  GeoPoint *points;$/;"	m	class:XShape
points	Topography/XShape.hpp	/^  ShapePoint *points;$/;"	m	class:XShape
points	UIUtil/TrackingGestureManager.hpp	/^  PointVector points;$/;"	m	class:TrackingGestureManager
polar	Computer/Settings.hpp	/^  PolarSettings polar;$/;"	m	struct:ComputerSettings
polar	Engine/GlideSolvers/GlidePolar.cpp	/^  const GlidePolar &polar;$/;"	m	class:final	file:
polar	Engine/GlideSolvers/GlidePolar.hpp	/^  PolarCoefficients polar;$/;"	m	class:GlidePolar
polar_cruise	Engine/Route/RoutePolars.hpp	/^  RoutePolar polar_cruise;$/;"	m	class:RoutePolars
polar_glide	Engine/Route/RoutePolars.hpp	/^  RoutePolar polar_glide;$/;"	m	class:RoutePolars
polar_index	Engine/Route/RouteLink.hpp	/^  unsigned polar_index;$/;"	m	struct:RouteLink
polar_name	Plane/Plane.hpp	/^  StaticString<32> polar_name;$/;"	m	struct:Plane
polar_settings	Dialogs/Settings/dlgBasicSettings.cpp	/^  PolarSettings &polar_settings;$/;"	m	class:final	file:
polar_shape	Plane/Plane.hpp	/^  PolarShape polar_shape;$/;"	m	struct:Plane
polaroffsetangle	Topography/shapelib/mapserver.h	/^    double polaroffsetpixel, polaroffsetangle;$/;"	m	struct:styleObj
polaroffsetpixel	Topography/shapelib/mapserver.h	/^    double polaroffsetpixel, polaroffsetangle;$/;"	m	struct:styleObj
poll_descs_registered	Audio/ALSAPCMPlayer.hpp	/^  bool poll_descs_registered = false;$/;"	m	class:ALSAPCMPlayer
poly	Topography/shapelib/mapserver.h	/^    lineObj *poly;$/;"	m	struct:__anon44
polygon_border_color	Look/ThermalAssistantLook.hpp	/^  Color polygon_border_color;$/;"	m	struct:ThermalAssistantLook
polygon_brush	Look/ThermalAssistantLook.hpp	/^  Brush polygon_brush;$/;"	m	struct:ThermalAssistantLook
polygon_buffer	Screen/Memory/RasterCanvas.hpp	/^  AllocatedArray<int> polygon_buffer;$/;"	m	class:RasterCanvas
polygon_fill_color	Look/ThermalAssistantLook.hpp	/^  Color polygon_fill_color;$/;"	m	struct:ThermalAssistantLook
polygon_pen	Look/ThermalAssistantLook.hpp	/^  Pen plane_pen, polygon_pen;$/;"	m	struct:ThermalAssistantLook
polyline_lengths	Topography/shapelib/mapserver.h	/^  struct polyline_lengths {$/;"	s
polys	Gauge/GaugeVario.hpp	/^  BulkPixelPoint polys[(gmax * 2 + 1) * 3];$/;"	m	class:GaugeVario
pop	Util/OverwritingRingBuffer.hpp	/^  T pop() {$/;"	f	class:TrivialOverwritingRingBuffer
pop	Util/ReservablePriorityQueue.hpp	/^  void pop() {$/;"	f	class:reservable_priority_queue
pop_front	Util/StringParser.hxx	/^	value_type pop_front() {$/;"	f	class:StringParser
popup	MainWindow.hpp	/^  PopupMessage *popup = nullptr;$/;"	m	class:MainWindow
popup_message_position	UISettings.hpp	/^  } popup_message_position;$/;"	m	struct:UISettings	typeref:class:UISettings::PopupMessagePosition
popup_msg_position_list	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice popup_msg_position_list[] = {$/;"	v	file:
port	Device/Descriptor.hpp	/^  DumpPort *port;$/;"	m	class:final
port	Device/Driver/ATR833.cpp	/^  Port &port;$/;"	m	class:final	file:
port	Device/Driver/AirControlDisplay.cpp	/^  Port &port;$/;"	m	class:ACDDevice	file:
port	Device/Driver/AltairPro.cpp	/^  Port &port;$/;"	m	class:AltairProDevice	file:
port	Device/Driver/BlueFly/Internal.hpp	/^  Port &port;$/;"	m	class:BlueFlyDevice
port	Device/Driver/BorgeltB50.cpp	/^  Port &port;$/;"	m	class:B50Device	file:
port	Device/Driver/CAI302/Internal.hpp	/^  Port &port;$/;"	m	class:CAI302Device
port	Device/Driver/CaiGpsNav.cpp	/^  Port &port;$/;"	m	class:CaiGpsNavDevice	file:
port	Device/Driver/CaiLNav.cpp	/^  Port &port;$/;"	m	class:final	file:
port	Device/Driver/EW.cpp	/^  Port &port;$/;"	m	class:EWDevice	file:
port	Device/Driver/EWMicroRecorder.cpp	/^  Port &port;$/;"	m	class:EWMicroRecorderDevice	file:
port	Device/Driver/FLARM/Device.hpp	/^  Port &port;$/;"	m	class:FlarmDevice
port	Device/Driver/FlymasterF1.cpp	/^  Port &port;$/;"	m	class:FlymasterF1Device	file:
port	Device/Driver/Flytec/Device.hpp	/^  Port &port;$/;"	m	class:FlytecDevice
port	Device/Driver/IMI/Internal.hpp	/^  Port &port;$/;"	m	class:IMIDevice
port	Device/Driver/KRT2.cpp	/^  Port &port;$/;"	m	class:final	file:
port	Device/Driver/LX/Internal.hpp	/^  Port &port;$/;"	m	class:LXDevice
port	Device/Driver/LX/Protocol.hpp	/^    Port &port;$/;"	m	class:LX::CRCWriter
port	Device/Driver/LXERA/Internal.hpp	/^  Port &port;$/;"	m	class:LXEraDevice
port	Device/Driver/LXERA/Protocol.hpp	/^    Port &port;$/;"	m	class:LXEra::CRCWriter
port	Device/Driver/OpenVario.cpp	/^  Port &port;$/;"	m	class:OpenVarioDevice	file:
port	Device/Driver/Vaulter.cpp	/^  Port &port;$/;"	m	class:VaulterDevice	file:
port	Device/Driver/Vega/Internal.hpp	/^  Port &port;$/;"	m	class:VegaDevice
port	Device/Driver/Volkslogger/Internal.hpp	/^  Port &port;$/;"	m	class:VolksloggerDevice
port	Device/Driver/Westerboer.cpp	/^  Port &port;$/;"	m	class:WesterboerDevice	file:
port	Device/Driver/XCOM760.cpp	/^  Port &port;$/;"	m	class:XCOM760Device	file:
port	Device/Port/DumpPort.hpp	/^  Port *port;$/;"	m	class:final
port	Device/Port/K6BtPort.hpp	/^  Port *port;$/;"	m	class:K6BtPort
port	Device/Util/NMEAReader.hpp	/^  Port &port;$/;"	m	class:PortNMEAReader
port	Net/IPv6Address.hxx	/^			     port, scope_id) {}$/;"	m	class:IPv6Address
port	Replay/NmeaReplay.hpp	/^  NullPort port;$/;"	m	class:NmeaReplay
port_is_nano	Device/Driver/LX/Internal.hpp	/^  const bool port_is_nano;$/;"	m	class:LXDevice
port_listener	Device/Descriptor.hpp	/^  PortListener *const port_listener;$/;"	m	class:final
port_type	Device/Config.hpp	/^  PortType port_type;$/;"	m	struct:DeviceConfig
port_type_strings	Profile/DeviceConfig.cpp	/^static const char *const port_type_strings[] = {$/;"	v	file:
port_types	Dialogs/Device/DeviceEditWidget.cpp	/^} port_types[] = {$/;"	v	typeref:struct:__anon10	file:
pos	MapWindow/GlueMapWindow.hpp	/^  unsigned int pos;$/;"	m	class:OffsetHistory
pos	Renderer/AirspaceLabelList.hpp	/^    GeoPoint pos;$/;"	m	struct:AirspaceLabelList::Label
pos	Terrain/jasper/jas_tvp.h	/^	char *pos;$/;"	m	struct:__anon106
pos_	Terrain/jasper/jas_stream.h	/^	uint_fast32_t pos_;$/;"	m	struct:__anon122
pos_ds_size	Device/Driver/Volkslogger/vlconv.cpp	/^const int  pos_ds_size[max_bfv+1][2] = {$/;"	v
posigraph_driver	Device/Driver/PosiGraph.cpp	/^const struct DeviceRegister posigraph_driver = {$/;"	v	typeref:struct:DeviceRegister
position	Device/Driver/LX/LXN.hpp	/^    const struct Position *position;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Position
position	Dialogs/FileManager.cpp	/^    int64_t size, position;$/;"	m	struct:ManagedFileListWidget::DownloadStatus	file:
position	Screen/Window.hpp	/^  PixelPoint position;$/;"	m	class:Window
position	Topography/shapelib/mapserver.h	/^    int position; \/* for embeded legends *\/$/;"	m	struct:__anon55
position	Topography/shapelib/mapserver.h	/^    int position; \/* for embeded scalebars *\/$/;"	m	struct:__anon54
position	Topography/shapelib/mapserver.h	/^    int position; \/*moved from symbolObj in version 6.0*\/$/;"	m	struct:styleObj
position	Topography/shapelib/mapserver.h	/^    int position;$/;"	m	struct:labelObj
position	Widget/ManagedWidget.hpp	/^  PixelRect position;$/;"	m	class:ManagedWidget
position	Widget/PagerWidget.hpp	/^  PixelRect position;$/;"	m	class:PagerWidget
position	Widget/RowFormWidget.hpp	/^    PixelRect position;$/;"	m	struct:RowFormWidget::Row
position_type	Util/QuadTree.hxx	/^	typedef int position_type;$/;"	t	class:QuadTree
positions	InfoBoxes/InfoBoxLayout.hpp	/^    PixelRect positions[InfoBoxSettings::Panel::MAX_CONTENTS];$/;"	m	struct:InfoBoxLayout::Layout
postlabelcache	Topography/shapelib/mapserver.h	/^    int labelcache, postlabelcache; \/* on or off *\/$/;"	m	struct:layerObj
postlabelcache	Topography/shapelib/mapserver.h	/^    int postlabelcache;$/;"	m	struct:__anon54
postlabelcache	Topography/shapelib/mapserver.h	/^    int postlabelcache;$/;"	m	struct:__anon55
postponed_patterns	Form/DataField/File.hpp	/^  PatternList postponed_patterns;$/;"	m	class:final
postponed_sort	Form/DataField/File.hpp	/^  bool postponed_sort;$/;"	m	class:final
postponed_value	Form/DataField/File.hpp	/^  AllocatedPath postponed_value;$/;"	m	class:final
power_off_location	NMEA/FlyingState.hpp	/^  GeoPoint power_off_location;$/;"	m	struct:FlyingState
power_off_time	NMEA/FlyingState.hpp	/^  double power_off_time;$/;"	m	struct:FlyingState
power_on_location	NMEA/FlyingState.hpp	/^  GeoPoint power_on_location;$/;"	m	struct:FlyingState
power_on_time	NMEA/FlyingState.hpp	/^  double power_on_time;$/;"	m	struct:FlyingState
power_plant_icon	Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
powered	NMEA/FlyingState.hpp	/^  bool powered;$/;"	m	struct:FlyingState
powered_at	Computer/FlyingComputer.hpp	/^  GeoPoint powered_at;$/;"	m	class:FlyingComputer
powered_since	Computer/FlyingComputer.hpp	/^  double powered_since;$/;"	m	class:FlyingComputer
ppm	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_ppm_t ppm;$/;"	m	union:__anon178
ppmseqno	Terrain/jasper/jpc/jpc_dec.h	/^	int ppmseqno;$/;"	m	struct:__anon152
ppmstab	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_ppxstab_t *ppmstab;$/;"	m	struct:__anon152
ppt	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_ppt_t ppt;$/;"	m	union:__anon178
pptstab	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_ppxstab_t *pptstab;$/;"	m	struct:__anon150
prcheightexpn	Terrain/jasper/jpc/jpc_dec.h	/^	int prcheightexpn;$/;"	m	struct:__anon148
prcheightexpn	Terrain/jasper/jpc/jpc_t2cod.h	/^	int prcheightexpn;$/;"	m	struct:__anon136
prcheightexpns	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t prcheightexpns[JPC_MAXRLVLS];$/;"	m	struct:__anon142
prclyrnos	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned *prclyrnos;$/;"	m	struct:__anon136
prcno	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned prcno;$/;"	m	struct:__anon138
prcs	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_prc_t *prcs;$/;"	m	struct:__anon147
prcwidthexpn	Terrain/jasper/jpc/jpc_dec.h	/^	int prcwidthexpn;$/;"	m	struct:__anon148
prcwidthexpn	Terrain/jasper/jpc/jpc_t2cod.h	/^	int prcwidthexpn;$/;"	m	struct:__anon136
prcwidthexpns	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t prcwidthexpns[JPC_MAXRLVLS];$/;"	m	struct:__anon142
pre_takeoff_buffer	Logger/LoggerImpl.hpp	/^  OverwritingRingBuffer<PreTakeoffBuffer, PRETAKEOFF_BUFFER_MAX> pre_takeoff_buffer;$/;"	m	class:LoggerImpl
prec	Terrain/jasper/jas_cm.h	/^	int prec;$/;"	m	struct:__anon94
prec	Terrain/jasper/jas_image.h	/^	int prec;$/;"	m	struct:__anon125
prec	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t prec;$/;"	m	struct:__anon159
prec	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t prec;$/;"	m	struct:__anon151
prec_	Terrain/jasper/jas_image.h	/^	int prec_;$/;"	m	struct:__anon123
predict	Engine/Contest/Settings.hpp	/^  bool predict;$/;"	m	struct:ContestSettings
predict	Engine/Contest/Solvers/TriangleContest.cpp	/^   predict(_predict)$/;"	f
predict	Engine/Contest/Solvers/TriangleContest.hpp	/^  const bool predict;$/;"	m	class:TriangleContest
predict_wind_drift	Engine/GlideSolvers/GlideSettings.hpp	/^  bool predict_wind_drift;$/;"	m	struct:GlideSettings
predicted	Engine/Contest/Solvers/TraceManager.hpp	/^  TracePoint predicted;$/;"	m	class:TraceManager
predicted_index	Engine/Contest/Solvers/TraceManager.hpp	/^  static constexpr unsigned predicted_index = 0xffff;$/;"	m	class:TraceManager
prediction_time_filter	Engine/Airspace/AirspaceWarningManager.hpp	/^  double prediction_time_filter;$/;"	m	class:AirspaceWarningManager
prediction_time_glide	Engine/Airspace/AirspaceWarningManager.hpp	/^  double prediction_time_glide;$/;"	m	class:AirspaceWarningManager
prepared	Widget/ManagedWidget.hpp	/^  bool prepared, visible;$/;"	m	class:ManagedWidget
prepared	Widget/PagerWidget.hpp	/^    bool prepared;$/;"	m	struct:PagerWidget::Child
prepared	Widget/PagerWidget.hpp	/^  bool initialised, prepared, visible;$/;"	m	class:PagerWidget
prepared	Widget/RowFormWidget.hpp	/^    bool initialised, prepared, shown;$/;"	m	struct:RowFormWidget::Row
preset_colors	Look/AirspaceLook.cpp	/^const RGB8Color AirspaceLook::preset_colors[] = {$/;"	m	class:AirspaceLook	file:
preset_colors	Look/AirspaceLook.hpp	/^  static const RGB8Color preset_colors[NUMAIRSPACECOLORS];$/;"	m	struct:AirspaceLook
press_use	Android/I2CbaroDevice.hpp	/^  DeviceConfig::PressureUse press_use;$/;"	m	class:final
press_use	Device/Config.hpp	/^  } press_use;$/;"	m	struct:DeviceConfig	typeref:class:DeviceConfig::PressureUse
pressed	Event/Poll/Linux/MergeMouse.hpp	/^  bool moved = false, pressed = false, released = false;$/;"	m	class:final
pressed	Form/CheckBox.hpp	/^  bool checked, dragging, pressed;$/;"	m	class:CheckBoxControl
pressed	Form/Edit.hpp	/^  bool dragging = false, pressed = false;$/;"	m	class:WndProperty
pressed	Gauge/GaugeFLARM.cpp	/^  bool dragging, pressed;$/;"	m	class:SmallTrafficWindow	file:
pressed	Gauge/GaugeThermalAssistant.cpp	/^  bool dragging, pressed;$/;"	m	class:GaugeThermalAssistantWindow	file:
pressed	InfoBoxes/InfoBoxWindow.hpp	/^  bool pressed = false;$/;"	m	class:InfoBoxWindow
pressed	Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
pressed	Look/DialogLook.hpp	/^    } pressed;$/;"	m	struct:DialogLook::__anon20	typeref:struct:DialogLook::__anon20::__anon23
pressed_background_color	Look/InfoBoxLook.hpp	/^  Color background_color, focused_background_color, pressed_background_color;$/;"	m	struct:InfoBoxLook
pressing	Event/Poll/Linux/Input.hpp	/^  bool pressing, releasing;$/;"	m	class:final
pressure	Computer/Settings.hpp	/^  AtmosphericPressure pressure;$/;"	m	struct:ComputerSettings
pressure	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD pressure:14;$/;"	m	struct:IMI::FixK
pressure	NMEA/Derived.hpp	/^  AtmosphericPressure pressure;$/;"	m	struct:DerivedInfo
pressure2altitude	Device/Driver/Volkslogger/vlapihlp.cpp	/^long pressure2altitude(unsigned druck) {$/;"	f
pressure_altitude	IGC/IGCFix.hpp	/^  int gps_altitude, pressure_altitude;$/;"	m	struct:IGCFix
pressure_altitude	Logger/LoggerImpl.hpp	/^    double pressure_altitude;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
pressure_altitude	NMEA/Info.hpp	/^  double pressure_altitude;$/;"	m	struct:NMEAInfo
pressure_altitude_available	Logger/LoggerImpl.hpp	/^    bool pressure_altitude_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
pressure_altitude_available	NMEA/Info.hpp	/^  Validity pressure_altitude_available;$/;"	m	struct:NMEAInfo
pressure_altitude_weak	NMEA/Info.hpp	/^  bool pressure_altitude_weak;$/;"	m	struct:NMEAInfo
pressure_available	Computer/Settings.hpp	/^  Validity pressure_available;$/;"	m	struct:ComputerSettings
pressure_available	NMEA/Derived.hpp	/^  Validity pressure_available;$/;"	m	struct:DerivedInfo
pressure_unit	Units/Settings.hpp	/^  Unit pressure_unit;$/;"	m	struct:UnitSetting
prev	Terrain/jasper/jpc/jpc_dec.h	/^	struct jpc_dec_seg_s *prev;$/;"	m	struct:jpc_dec_seg_s	typeref:struct:jpc_dec_seg_s::jpc_dec_seg_s
preview_bitmap	Dialogs/Weather/MapOverlayWidget.cpp	/^  Bitmap preview_bitmap;$/;"	m	class:final	file:
preview_widget	Dialogs/Weather/MapOverlayWidget.cpp	/^  ViewImageWidget *preview_widget;$/;"	m	class:final	file:
previews	Dialogs/Settings/dlgConfigInfoboxes.cpp	/^  StaticArray<InfoBoxPreview, InfoBoxSettings::Panel::MAX_CONTENTS> previews;$/;"	m	class:final	file:
previous	Util/OverwritingRingBuffer.hpp	/^  static unsigned previous(unsigned i) {$/;"	f	class:TrivialOverwritingRingBuffer
previousBounds	Topography/shapelib/mapserver.h	/^    rectObj previousBounds; \/* bounds at previous iteration *\/$/;"	m	struct:__anon51
previous_button	Dialogs/Task/TargetDialog.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:TargetWidget::Layout	file:
previous_button	Dialogs/Task/TargetDialog.cpp	/^  Button previous_button;$/;"	m	class:TargetWidget	file:
previous_button	Dialogs/Task/TaskPointDialog.cpp	/^  Button *previous_button, *next_button;$/;"	m	class:final	file:
previous_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:final::Layout	file:
previous_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button previous_button, next_button;$/;"	m	class:final	file:
previous_button	Dialogs/dlgAnalysis.cpp	/^    PixelRect details_button, previous_button, next_button, close_button;$/;"	m	struct:final::Layout	file:
previous_button	Dialogs/dlgAnalysis.cpp	/^  Button details_button, previous_button, next_button, close_button;$/;"	m	class:final	file:
previous_button	Widget/ArrowPagerWidget.hpp	/^    PixelRect previous_button, next_button;$/;"	m	struct:ArrowPagerWidget::Layout
previous_button	Widget/ArrowPagerWidget.hpp	/^  Button previous_button, next_button;$/;"	m	class:ArrowPagerWidget
previous_is_first	Engine/Task/Stats/CommonStats.hpp	/^  bool previous_is_first;$/;"	m	class:CommonStats
previous_item_button	Gauge/BigTrafficWidget.hpp	/^  Button *previous_item_button, *next_item_button;$/;"	m	class:TrafficWidget
prg	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t prg;$/;"	m	struct:__anon163
prgord	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t prgord;$/;"	m	struct:__anon169
prgord	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t prgord;$/;"	m	struct:__anon143
prgvolfirst	Terrain/jasper/jpc/jpc_t2cod.h	/^	bool prgvolfirst;$/;"	m	struct:__anon138
pri	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast8_t pri;$/;"	m	struct:__anon111
print	Device/Driver/Volkslogger/vlconv.cpp	/^  print(FILE *aus)$/;"	f	class:KOORD
print	Device/Driver/Volkslogger/vlconv.cpp	/^  print(int version, FILE *aus)$/;"	f	class:C_RECORD
print	Device/Driver/Volkslogger/vlconv.cpp	/^  print(int version, FILE *aus, const char *descr)$/;"	f	class:C2
print_g_record	Device/Driver/Volkslogger/grecord.cpp	/^print_g_record(FILE *datei, const uint8_t *puffer, size_t puflen)$/;"	f
priority	Engine/Route/AStar.hpp	/^    AStarPriorityValue priority;$/;"	m	struct:AStar::NodeValue
priority	Topography/shapelib/mapserver.h	/^    int priority;  \/* Priority level 1 to MS_MAX_LABEL_PRIORITY, default=1 *\/$/;"	m	struct:labelObj
priv	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
processGesture	Input/InputEvents.cpp	/^InputEvents::processGesture(const TCHAR *data)$/;"	f	class:InputEvents
processGlideComputer	Input/InputQueue.cpp	/^InputEvents::processGlideComputer(unsigned gce_id)$/;"	f	class:InputEvents
processGlideComputer_real	Input/InputEvents.cpp	/^InputEvents::processGlideComputer_real(unsigned gce_id)$/;"	f	class:InputEvents
processGo	Input/InputEvents.cpp	/^InputEvents::processGo(unsigned eventid)$/;"	f	class:InputEvents
processKey	Input/InputEvents.cpp	/^InputEvents::processKey(unsigned key_code)$/;"	f	class:InputEvents
processNmea	Input/InputQueue.cpp	/^InputEvents::processNmea(unsigned ne_id)$/;"	f	class:InputEvents
processNmea_real	Input/InputEvents.cpp	/^InputEvents::processNmea_real(unsigned ne_id)$/;"	f	class:InputEvents
processing	Topography/shapelib/mapserver.h	/^    char **processing;$/;"	m	struct:__anon64
processing	Topography/shapelib/mapserver.h	/^    char **processing;$/;"	m	struct:layerObj
processing_idx	Topography/shapelib/mapserver.h	/^    int *processing_idx;$/;"	m	struct:__anon64
product	Android/NativeView.hpp	/^  char product[20];$/;"	m	class:NativeView
product	NMEA/DeviceInfo.hpp	/^  NarrowString<16> product;$/;"	m	struct:DeviceInfo
product_type	Math/Line2D.hpp	/^  typedef typename Point::product_type product_type;$/;"	t	struct:Line2D
product_type	Math/Point2D.hpp	/^  typedef PT product_type;$/;"	t	struct:Point2D
progress	Dialogs/ProgressDialog.hpp	/^  ProgressWindow progress;$/;"	m	class:ProgressDialog
progress_bar	ProgressWindow.hpp	/^  ProgressBar progress_bar;$/;"	m	class:ProgressWindow
progress_bar_position	ProgressWindow.hpp	/^  PixelRect bottom_position, progress_bar_position;$/;"	m	class:ProgressWindow
progress_position	Operation/ThreadedOperationEnvironment.hpp	/^    unsigned progress_range, progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
progress_range	Operation/ThreadedOperationEnvironment.hpp	/^    unsigned progress_range, progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
proj	Engine/Route/AirspaceRoute.cpp	/^  const FlatProjection &proj;$/;"	m	class:final	file:
proj	MapWindow/MapWindowGlideRange.cpp	/^  const MapWindowProjection &proj;$/;"	m	class:final	file:
proj	MapWindow/StencilMapCanvas.hpp	/^  const WindowProjection &proj;$/;"	m	class:StencilMapCanvas
projContext	Topography/shapelib/mapserver.h	/^    projectionContext* projContext;$/;"	m	struct:mapObj
project	Topography/shapelib/mapserver.h	/^    int project; \/* boolean variable, do we need to project this layer or not *\/$/;"	m	struct:layerObj
projected	Geo/SearchPoint.hpp	/^  bool projected = false;$/;"	m	class:SearchPoint
projection	Computer/WaveComputer.hpp	/^  FlatProjection projection;$/;"	m	class:WaveComputer
projection	Engine/Airspace/AirspaceSorter.cpp	/^  const FlatProjection &projection;$/;"	m	class:final	file:
projection	Engine/Route/ReachFan.hpp	/^  FlatProjection projection;$/;"	m	class:ReachFan
projection	Engine/Route/ReachFanParms.hpp	/^  const FlatProjection &projection;$/;"	m	struct:ReachFanParms
projection	Engine/Route/RoutePlanner.hpp	/^  FlatProjection projection;$/;"	m	class:RoutePlanner
projection	Geo/GeoEllipse.hpp	/^  FlatProjection projection;$/;"	m	class:GeoEllipse
projection	MapWindow/MapCanvas.hpp	/^  const Projection &projection;$/;"	m	class:MapCanvas
projection	MapWindow/TargetMapWindow.hpp	/^  MapWindowProjection projection;$/;"	m	class:TargetMapWindow
projection	Renderer/WaypointRenderer.cpp	/^  const MapWindowProjection &projection;$/;"	m	class:final	file:
projection	Terrain/RasterMap.hpp	/^  RasterProjection projection;$/;"	m	class:RasterMap
projection	Topography/shapelib/mapserver.h	/^    projectionObj projection; \/* projection information for output map *\/$/;"	m	struct:mapObj
projection	Topography/shapelib/mapserver.h	/^    projectionObj projection; \/* projection information for the layer *\/$/;"	m	struct:layerObj
projection_matrix	Screen/OpenGL/Globals.cpp	/^  glm::mat4 projection_matrix;$/;"	m	namespace:OpenGL	file:
properties	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect map, properties;$/;"	m	struct:final::Layout	file:
properties	Topography/shapelib/mapserver.h	/^      sortByProperties* properties;$/;"	m	struct:__anon63
properties_dock	Dialogs/Task/TaskPointDialog.cpp	/^  DockWindow properties_dock;$/;"	m	class:final	file:
protected_manager	Computer/WarningComputer.hpp	/^  ProtectedAirspaceWarningManager protected_manager;$/;"	m	class:WarningComputer
protected_route_planner	Computer/RouteComputer.hpp	/^  ProtectedRoutePlanner protected_route_planner;$/;"	m	class:RouteComputer
protected_task_manager	Components.cpp	/^ProtectedTaskManager *protected_task_manager;$/;"	v
ps	Screen/GDI/PaintCanvas.hpp	/^  PAINTSTRUCT ps;$/;"	m	class:PaintCanvas
psLeftNode	Topography/shapelib/mapserver.h	/^    struct _FilterNode  *psLeftNode;$/;"	m	struct:_FilterNode	typeref:struct:_FilterNode::_FilterNode
psRightNode	Topography/shapelib/mapserver.h	/^    struct _FilterNode  *psRightNode;$/;"	m	struct:_FilterNode	typeref:struct:_FilterNode::_FilterNode
pszCurrentRecord	Topography/shapelib/mapshape.h	/^    char  *pszCurrentRecord;$/;"	m	struct:__anon83
pszHeader	Topography/shapelib/mapshape.h	/^    char  *pszHeader;$/;"	m	struct:__anon83
pszSRS	Topography/shapelib/mapserver.h	/^    char                *pszSRS;$/;"	m	struct:_FilterNode
pszStringField	Topography/shapelib/mapshape.h	/^    char  *pszStringField;$/;"	m	struct:__anon83
pszValue	Topography/shapelib/mapserver.h	/^    char                *pszValue;$/;"	m	struct:_FilterNode
pt2Event	Input/InputConfig.hpp	/^  typedef void (*pt2Event)(const TCHAR *);$/;"	t	struct:InputConfig
pt2Event	Input/InputEvents.hpp	/^typedef void (*pt2Event)(const TCHAR *);$/;"	t
pt2Event	Input/InputLookup.hpp	/^typedef void (*pt2Event)(const TCHAR *);$/;"	t
pt2Event	Input/InputQueue.hpp	/^typedef void (*pt2Event)(const TCHAR *);$/;"	t
pt_scale	Screen/Layout.cpp	/^  unsigned pt_scale = 1024;$/;"	m	namespace:Layout	file:
ptr	Event/Shared/Event.hpp	/^  void *ptr;$/;"	m	struct:Event
ptr	zzip/plugin.h	/^    struct { void* padding[8]; } ptr;$/;"	m	union:_zzip_plugin_io	typeref:struct:_zzip_plugin_io::__anon213
ptr_	Terrain/jasper/jas_stream.h	/^	jas_uchar *ptr_;$/;"	m	struct:__anon120
ptr_field	Android/NativeBMP085Listener.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativeBMP085Listener	file:
ptr_field	Android/NativeI2CbaroListener.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativeI2CbaroListener	file:
ptr_field	Android/NativeInputListener.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativeInputListener	file:
ptr_field	Android/NativeLeScanCallback.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativeLeScanCallback	file:
ptr_field	Android/NativeNunchuckListener.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativeNunchuckListener	file:
ptr_field	Android/NativePortListener.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativePortListener	file:
ptr_field	Android/NativeVoltageListener.cpp	/^  static jfieldID ptr_field;$/;"	m	namespace:NativeVoltageListener	file:
pts	Engine/Task/Stats/TaskSummary.hpp	/^  TaskSummaryPointVector pts;$/;"	m	struct:TaskSummary
public_position	Event/Poll/Linux/Input.hpp	/^  Position public_position;$/;"	m	class:final
pure_glide_altitude_difference	Engine/GlideSolvers/GlideResult.hpp	/^  double pure_glide_altitude_difference;$/;"	m	struct:GlideResult
pure_glide_height	Engine/GlideSolvers/GlideResult.hpp	/^  double pure_glide_height;$/;"	m	struct:GlideResult
pure_glide_min_arrival_altitude	Engine/GlideSolvers/GlideResult.hpp	/^  double pure_glide_min_arrival_altitude;$/;"	m	struct:GlideResult
push	Util/OverwritingRingBuffer.hpp	/^  void push(const T &value) {$/;"	f	class:TrivialOverwritingRingBuffer
push_back	Engine/Trace/Trace.cpp	/^Trace::push_back(const TracePoint &point)$/;"	f	class:Trace
push_back	Util/StaticString.hxx	/^	bool push_back(value_type ch) {$/;"	f	class:StaticStringBase
push_back	Util/TrivialArray.hxx	/^	void push_back(const T &value) {$/;"	f	class:TrivialArray
put	Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::DECLARATION::put(DBB *dbb) const$/;"	f	class:VLAPI_DATA::DECLARATION
put	Device/Driver/Volkslogger/vlapi2.cpp	/^VLAPI_DATA::PILOT::put(void * p) const$/;"	f	class:VLAPI_DATA::PILOT
put	Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::DCLWPT::put(void *p) const {$/;"	f	class:VLAPI_DATA::DCLWPT
put	Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::ROUTE::put(void *p) const {$/;"	f	class:VLAPI_DATA::ROUTE
put	Device/Driver/Volkslogger/vlapi2.cpp	/^void VLAPI_DATA::WPT::put(void *p) const {$/;"	f	class:VLAPI_DATA::WPT
putdata	Terrain/jasper/jp2/jp2_cod.h	/^	int (*putdata)(jp2_box_t *box, jas_stream_t *out);$/;"	m	struct:jp2_boxops_s
putparms	Terrain/jasper/jpc/jpc_cs.h	/^	int (*putparms)(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out);$/;"	m	struct:jpc_msops_s
pxforms	Terrain/jasper/jas_cm.h	/^	jas_cmpxform_t **pxforms;$/;"	m	struct:__anon102
pxformseq	Terrain/jasper/jas_cm.h	/^	jas_cmpxformseq_t *pxformseq;$/;"	m	struct:__anon103
pxformseqs	Terrain/jasper/jas_cm.h	/^	jas_cmpxformseq_t *pxformseqs[JAS_CMPROF_NUMPXFORMSEQS];$/;"	m	struct:__anon104
q	Engine/PathSolvers/Dijkstra.hpp	/^  reservable_priority_queue<Value, std::vector<Value>, Rank> q;$/;"	m	class:Dijkstra
q	Engine/Route/AStar.hpp	/^  reservable_priority_queue<NodeValue, std::vector<NodeValue>, Rank> q;$/;"	m	class:AStar
qcc	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcc_t qcc;$/;"	m	union:__anon178
qcd	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_qcd_t qcd;$/;"	m	union:__anon178
qeval	Terrain/jasper/jpc/jpc_mqcod.h	/^	uint_fast16_t qeval;$/;"	m	struct:jpc_mqstate_s
qmfb	Terrain/jasper/jpc/jpc_tsfb.h	/^	const jpc_qmfb2d_t *qmfb;$/;"	m	struct:__anon131
qmfbid	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t qmfbid;$/;"	m	struct:__anon162
qmfbid	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t qmfbid;$/;"	m	struct:__anon142
qnh	Device/Driver/Vega/Volatile.hpp	/^    unsigned qnh;$/;"	m	struct:Vega::VolatileData
qnh	Engine/Airspace/Airspaces.hpp	/^  AtmosphericPressure qnh;$/;"	m	class:Airspaces
qnh	NMEA/ExternalSettings.hpp	/^  AtmosphericPressure qnh;$/;"	m	struct:ExternalSettings
qnh	Weather/ParsedMETAR.hpp	/^  AtmosphericPressure qnh;$/;"	m	struct:ParsedMETAR
qnh_available	NMEA/ExternalSettings.hpp	/^  Validity qnh_available;$/;"	m	struct:ExternalSettings
qnh_available	Weather/ParsedMETAR.hpp	/^  bool qnh_available;$/;"	m	struct:ParsedMETAR
qntsty	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t qntsty;$/;"	m	struct:__anon166
qsty	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t qsty;$/;"	m	struct:__anon142
quad4	Screen/Memory/Murphy.hpp	/^  bool quad4;$/;"	m	struct:MurphyIterator
quality	Computer/Wind/CirclingWind.hpp	/^    unsigned quality;$/;"	m	struct:CirclingWind::Result
quality	Computer/Wind/MeasurementList.hpp	/^  unsigned quality;$/;"	m	struct:WindMeasurement
quality	Computer/Wind/WindEKFGlue.hpp	/^    int quality;$/;"	m	struct:WindEKFGlue::Result
quantisation_effective	Terrain/RasterRenderer.hpp	/^  unsigned quantisation_effective;$/;"	m	class:RasterRenderer
quantisation_pixels	Terrain/RasterRenderer.hpp	/^  unsigned quantisation_pixels = 2;$/;"	m	class:RasterRenderer
query	Topography/shapelib/mapserver.h	/^    queryObj query;$/;"	m	struct:mapObj
queryMapObj	Topography/shapelib/mapserver.h	/^  } queryMapObj;$/;"	t	typeref:struct:__anon41
queryObj	Topography/shapelib/mapserver.h	/^  } queryObj;$/;"	t	typeref:struct:__anon40
query_iterator	Cloud/Client.hpp	/^  typedef Tree::const_query_iterator query_iterator;$/;"	t	class:CloudClientContainer
query_iterator	Cloud/Thermal.hpp	/^  typedef Tree::const_query_iterator query_iterator;$/;"	t	class:CloudThermalContainer
query_iterator_range	Cloud/Client.hpp	/^  typedef boost::iterator_range<query_iterator> query_iterator_range;$/;"	t	class:CloudClientContainer
query_iterator_range	Cloud/Thermal.hpp	/^  typedef boost::iterator_range<query_iterator> query_iterator_range;$/;"	t	class:CloudThermalContainer
queryformat	Topography/shapelib/mapserver.h	/^    char *queryformat; \/* what format is the query to be returned, given as a MIME type *\/$/;"	m	struct:__anon42
querymap	Topography/shapelib/mapserver.h	/^    queryMapObj querymap;$/;"	m	struct:mapObj
queue	Audio/AndroidPCMPlayer.hpp	/^  SLES::AndroidSimpleBufferQueue queue;$/;"	m	class:AndroidPCMPlayer
queue	Audio/SLES/AndroidSimpleBufferQueue.hpp	/^    SLAndroidSimpleBufferQueueItf queue;$/;"	m	class:SLES::AndroidSimpleBufferQueue
queue	Event/Android/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:EventLoop
queue	Event/Poll/LibInput/LibInputHandler.hpp	/^  EventQueue &queue;$/;"	m	class:final
queue	Event/Poll/Linux/Input.hpp	/^  EventQueue &queue;$/;"	m	class:final
queue	Event/Poll/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:EventLoop
queue	Event/Poll/WaylandQueue.hpp	/^  EventQueue &queue;$/;"	m	class:final
queue	Event/Poll/X11Queue.hpp	/^  EventQueue &queue;$/;"	m	class:X11EventQueue
queue	Event/SDL/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:EventLoop
queue	Event/Windows/Loop.hpp	/^  EventQueue &queue;$/;"	m	class:EventLoop
queue	Net/HTTP/DownloadManager.cpp	/^  std::list<Item> queue;$/;"	m	class:final	file:
queue	Tracking/SkyLines/Glue.hpp	/^  Queue *queue = nullptr;$/;"	m	class:SkyLinesTracking::Glue
queue	Tracking/SkyLines/Queue.hpp	/^  OverwritingRingBuffer<FixPacket, 256> queue;$/;"	m	class:SkyLinesTracking::Queue
queued_data	Audio/PCMBufferDataSource.hpp	/^  std::list<PCMData> queued_data;$/;"	m	class:PCMBufferDataSource
quick_remove	Util/TrivialArray.hxx	/^	void quick_remove(size_type i) {$/;"	f	class:TrivialArray
quit	Dialogs/StartupDialog.cpp	/^  Button quit;$/;"	m	class:final	file:
quit	Event/Android/Queue.hpp	/^  bool quit = false;$/;"	m	class:EventQueue
quit	Event/Poll/Queue.hpp	/^  bool quit;$/;"	m	class:final
quit	Event/SDL/Queue.hpp	/^  bool quit;$/;"	m	class:EventQueue
quit_button	Dialogs/SimulatorPromptWindow.hpp	/^  Button quit_button;$/;"	m	class:final
r	OS/EventPipe.hpp	/^  UniqueFileDescriptor r;$/;"	m	class:EventPipe
r	Screen/OpenGL/Color.hpp	/^  Component r, g, b, a;$/;"	m	class:Color
r	Screen/PortableColor.hpp	/^  uint8_t b, g, r;$/;"	m	class:BGR8Color
r	Screen/PortableColor.hpp	/^  uint8_t r, g, b;$/;"	m	class:RGB8Color
r	Util/MD5.cpp	/^static constexpr uint32_t r[64] = {$/;"	v	file:
r_cos	Geo/Flat/FlatProjection.hpp	/^  double r_cos;$/;"	m	class:FlatProjection
rad_areas	Weather/PCMet/Images.cpp	/^static constexpr PCMet::ImageArea rad_areas[] = {$/;"	v	file:
rad_lokal_areas	Weather/PCMet/Images.cpp	/^static constexpr PCMet::ImageArea rad_lokal_areas[] = {$/;"	v	file:
radar_brush	Look/FlarmTrafficLook.hpp	/^  Brush radar_brush;$/;"	m	struct:FlarmTrafficLook
radar_color	Look/FlarmTrafficLook.hpp	/^  Color radar_color;$/;"	m	struct:FlarmTrafficLook
radar_mid	Gauge/FlarmTrafficWindow.hpp	/^  PixelPoint radar_mid;$/;"	m	class:FlarmTrafficWindow
radar_pen	Look/FlarmTrafficLook.hpp	/^  Pen plane_pen, radar_pen;$/;"	m	struct:FlarmTrafficLook
radial	Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
radial	Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
radial	Engine/Task/Ordered/Points/AATPoint.hpp	/^  Angle radial;$/;"	m	struct:RangeAndRadial
radio	Airspace/AirspaceParser.cpp	/^  tstring radio;$/;"	m	struct:TempAirspaceType	file:
radio	Computer/Settings.hpp	/^  RadioSettings radio;$/;"	m	struct:ComputerSettings
radio	Engine/Airspace/AbstractAirspace.hpp	/^  tstring radio;$/;"	m	class:AbstractAirspace
radio_frequency	Engine/Waypoint/Waypoint.hpp	/^  RadioFrequency radio_frequency;$/;"	m	struct:Waypoint
radius	Airspace/AirspaceParser.cpp	/^  double radius;$/;"	m	struct:TempAirspaceType	file:
radius	Device/Declaration.hpp	/^    unsigned radius;$/;"	m	struct:Declaration::TurnPoint
radius	Engine/Task/ObservationZones/CylinderZone.hpp	/^  double radius;$/;"	m	class:CylinderZone
radius	Gauge/FlarmTrafficWindow.hpp	/^  unsigned radius;$/;"	m	class:FlarmTrafficWindow
radius	Gauge/ThermalAssistantRenderer.hpp	/^  unsigned radius;$/;"	m	class:ThermalAssistantRenderer
radius1	Task/TaskFileSeeYou.cpp	/^  double radius1, radius2, max_altitude;$/;"	m	struct:SeeYouTurnpointInformation	file:
radius2	Task/TaskFileSeeYou.cpp	/^  double radius1, radius2, max_altitude;$/;"	m	struct:SeeYouTurnpointInformation	file:
radius_editable	Dialogs/Task/Widgets/CylinderZoneEditWidget.hpp	/^  const bool radius_editable;$/;"	m	class:CylinderZoneEditWidget
ramp	Terrain/TerrainSettings.hpp	/^  unsigned short ramp;$/;"	m	struct:TerrainRendererSettings
range	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
range	Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
range	Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
range	Engine/Contest/Solvers/Retrospective.hpp	/^    double range;$/;"	m	struct:Retrospective::NearWaypoint
range	Engine/Task/Ordered/Points/AATPoint.hpp	/^  double range;$/;"	m	struct:RangeAndRadial
range	MapWindow/Items/Builder.hpp	/^  double range;$/;"	m	class:MapItemListBuilder
range	Operation/ConsoleOperationEnvironment.hpp	/^  unsigned range;$/;"	m	class:ConsoleOperationEnvironment
range_and_radial	Dialogs/Task/TargetDialog.cpp	/^  RangeAndRadial range_and_radial;$/;"	m	class:TargetWidget	file:
rangeitem	Topography/shapelib/mapserver.h	/^    char *rangeitem;$/;"	m	struct:styleObj
rangeitemindex	Topography/shapelib/mapserver.h	/^    int rangeitemindex;$/;"	m	struct:styleObj
rasp	Dialogs/Weather/RASPDialog.cpp	/^  std::shared_ptr<RaspStore> rasp;$/;"	m	class:final	file:
rasp_colors	Weather/Rasp/RaspStyle.cpp	/^static constexpr ColorRamp rasp_colors[6][NUM_COLOR_RAMP_LEVELS] = {$/;"	v	file:
rasp_providers	Weather/Rasp/Providers.cpp	/^const RaspProvider rasp_providers[] = {$/;"	v
rasp_renderer	MapWindow/MapWindow.hpp	/^  std::unique_ptr<RaspRenderer> rasp_renderer;$/;"	m	class:MapWindow
rasp_store	MapWindow/MapWindow.hpp	/^  std::shared_ptr<RaspStore> rasp_store;$/;"	m	class:MapWindow
rasp_styles	Weather/Rasp/RaspStyle.cpp	/^const RaspStyle rasp_styles[] = {$/;"	v
raster_points	MapWindow/MapCanvas.hpp	/^  AllocatedArray<BulkPixelPoint> raster_points;$/;"	m	class:MapCanvas
raster_renderer	Terrain/TerrainRenderer.hpp	/^  RasterRenderer raster_renderer;$/;"	m	class:TerrainRenderer
raster_renderer	Weather/Rasp/RaspRenderer.hpp	/^  RasterRenderer raster_renderer;$/;"	m	class:RaspRenderer
raster_tile_cache	Terrain/Loader.hpp	/^  RasterTileCache &raster_tile_cache;$/;"	m	class:TerrainLoader
raster_tile_cache	Terrain/RasterMap.hpp	/^  RasterTileCache raster_tile_cache;$/;"	m	class:RasterMap
rate_limited_bl	Dialogs/Task/TargetDialog.cpp	/^  RateLimitedBlackboardListener rate_limited_bl;$/;"	m	class:TargetWidget	file:
rate_limiter	Dialogs/StatusPanels/SystemStatusPanel.hpp	/^  RateLimitedBlackboardListener rate_limiter;$/;"	m	class:final
ratio	Computer/WaveComputer.cpp	/^  double ratio, squared_distance;$/;"	m	struct:RatioAndDistance	file:
raw	Util/TrivialArray.hxx	/^	const T* raw() const {$/;"	f	class:TrivialArray
raw_16bit	Topography/shapelib/mapserver.h	/^      short *raw_16bit;$/;"	m	union:imageObj::__anon58
raw_byte	Topography/shapelib/mapserver.h	/^      unsigned char *raw_byte;$/;"	m	union:imageObj::__anon58
raw_float	Topography/shapelib/mapserver.h	/^      float *raw_float;$/;"	m	union:imageObj::__anon58
raw_points	Geo/ConvexHull/GrahamScan.hpp	/^  std::list<SearchPoint> raw_points;$/;"	m	class:GrahamScan
raw_vector	Geo/ConvexHull/GrahamScan.hpp	/^  SearchPointVector &raw_vector;$/;"	m	class:GrahamScan
rc	Dialogs/Task/TargetDialog.cpp	/^  PixelRect rc;$/;"	m	class:RowLayout	file:
rc	Form/ScrollBar.hpp	/^  PixelRect rc;$/;"	m	class:ScrollBar
rc	Form/TabDisplay.hpp	/^  PixelRect rc;$/;"	m	class:TabButton
rc	Form/TabMenuDisplay.hpp	/^    PixelRect rc;$/;"	m	struct:final::MainMenuButton
rc	Form/TabMenuDisplay.hpp	/^    PixelRect rc;$/;"	m	struct:final::SubMenuButton
rc	PopupMessage.hpp	/^  PixelRect rc; \/\/ maximum message size$/;"	m	class:PopupMessage
rc	Renderer/ChartRenderer.hpp	/^  PixelRect rc;$/;"	m	class:ChartRenderer
rc	Widget/TwoWidgets.hpp	/^  PixelRect rc;$/;"	m	class:TwoWidgets
rc_chart	Renderer/ChartRenderer.hpp	/^  PixelRect rc_chart;$/;"	m	class:ChartRenderer
rc_slider	Form/ScrollBar.hpp	/^  PixelRect rc_slider;$/;"	m	class:ScrollBar
reach	MapWindow/Items/MapItem.hpp	/^  ReachResult reach;$/;"	m	struct:ArrivalAltitudeMapItem
reach	Renderer/WaypointRenderer.cpp	/^  ReachResult reach;$/;"	m	struct:VisibleWaypoint	file:
reach_calc_mode	Engine/Route/Config.hpp	/^  ReachMode reach_calc_mode;$/;"	m	struct:RoutePlannerConfig
reach_clock	Computer/RouteComputer.hpp	/^  GPSClock reach_clock;$/;"	m	class:RouteComputer
reach_polar_mode	Engine/Route/Config.hpp	/^  Polar reach_polar_mode;$/;"	m	struct:RoutePlannerConfig
reach_polar_mode	Engine/Route/RoutePlanner.hpp	/^  RoutePlannerConfig::Polar reach_polar_mode;$/;"	m	class:RoutePlanner
reach_terrain	Engine/Route/RoutePlanner.hpp	/^  ReachFan reach_terrain;$/;"	m	class:RoutePlanner
reach_terrain_pen	Look/MapLook.hpp	/^  Pen reach_terrain_pen;$/;"	m	struct:MapLook
reach_terrain_pen_thick	Look/MapLook.hpp	/^  Pen reach_terrain_pen_thick;$/;"	m	struct:MapLook
reach_working	Engine/Route/RoutePlanner.hpp	/^  ReachFan reach_working;$/;"	m	class:RoutePlanner
reach_working_pen	Look/MapLook.hpp	/^  Pen reach_working_pen;$/;"	m	struct:MapLook
reach_working_pen_thick	Look/MapLook.hpp	/^  Pen reach_working_pen_thick;$/;"	m	struct:MapLook
reachable	Renderer/WaypointRenderer.cpp	/^  WaypointRenderer::Reachability reachable;$/;"	m	struct:VisibleWaypoint	file:
reachable_brush	Look/WaypointLook.hpp	/^  Brush reachable_brush, terrain_unreachable_brush, unreachable_brush;$/;"	m	struct:WaypointLook
reachable_landable	Engine/Task/Unordered/AbortTask.hpp	/^  bool reachable_landable;$/;"	m	class:AbortTask
read	Java/InputStream.hxx	/^		static int read(JNIEnv *env, jobject is, jbyteArray buffer) {$/;"	f	class:Java::InputStream
read	zzip/plugin.h	/^    zzip_ssize_t (*read)(int fd, void* buf, zzip_size_t len);$/;"	m	struct:zzip_plugin_io
readFile	Input/InputEvents.cpp	/^InputEvents::readFile()$/;"	f	class:InputEvents
readTreeNode	Topography/shapelib/maptree.c	/^treeNodeObj *readTreeNode( SHPTreeHandle disktree )$/;"	f
read_	Terrain/jasper/jas_stream.h	/^	int (*read_)(jas_stream_obj_t *obj, char *buf, unsigned cnt);$/;"	m	struct:__anon119
read_method	Java/InputStream.cxx	/^jmethodID Java::InputStream::read_method;$/;"	m	class:Java::InputStream	file:
read_method	Java/InputStream.hxx	/^		static jmethodID close_method, read_method;$/;"	m	class:Java::InputStream
read_only	Form/Edit.hpp	/^  bool read_only = false;$/;"	m	class:WndProperty
read_poll_descs	Audio/ALSAPCMPlayer.hpp	/^  std::list<boost::asio::posix::stream_descriptor> read_poll_descs;$/;"	m	class:ALSAPCMPlayer
reader	IO/BufferedReader.hxx	/^	Reader &reader;$/;"	m	class:BufferedReader
reader	IO/KeyValueFileReader.hpp	/^  NLineReader &reader;$/;"	m	class:KeyValueFileReader
reader	Logger/FlightParser.hpp	/^  NLineReader &reader;$/;"	m	class:FlightParser
reader	Replay/IgcReplay.hpp	/^  std::unique_ptr<NLineReader> reader;$/;"	m	class:IgcReplay
reader	Replay/NmeaReplay.hpp	/^  std::unique_ptr<NLineReader> reader;$/;"	m	class:NmeaReplay
real	Device/Parser.hpp	/^  bool real;$/;"	m	class:NMEAParser
real	Logger/LoggerImpl.hpp	/^    bool real;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
real	NMEA/Acceleration.hpp	/^  bool real;$/;"	m	struct:AccelerationState
real	NMEA/GPSState.hpp	/^  bool real;$/;"	m	struct:GPSState
real_clock	Blackboard/DeviceBlackboard.hpp	/^  WrapClock real_clock, replay_clock;$/;"	m	class:DeviceBlackboard
real_data	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo real_data;$/;"	m	class:DeviceBlackboard
realdir	zzip/lib.h	/^    void*  realdir;               \/* e.g. DIR* from posix dirent.h *\/$/;"	m	struct:zzip_dir
realmode	Terrain/jasper/jpc/jpc_dec.h	/^	int realmode;$/;"	m	struct:__anon150
realname	zzip/lib.h	/^    char*  realname;$/;"	m	struct:zzip_dir
rebind	Util/SliceAllocator.hxx	/^	struct rebind {$/;"	s	class:GlobalSliceAllocator
rebind	Util/SliceAllocator.hxx	/^	struct rebind {$/;"	s	class:SliceAllocator
recStartDateTime	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC recStartDateTime;$/;"	m	struct:IMI::TDeclarationHeader
recStopDateTime	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC recStopDateTime;$/;"	m	struct:IMI::FlightFinish
recalculateWind	Computer/Wind/Store.cpp	/^WindStore::recalculateWind(const MoreData &info, DerivedInfo &derived) const$/;"	f	class:WindStore
received	Net/HTTP/ToBuffer.cpp	/^  size_t received = 0;$/;"	m	class:final	file:
received	Net/HTTP/ToFile.cpp	/^  size_t received = 0;$/;"	m	class:final	file:
received_time	Tracking/SkyLines/Data.hpp	/^    std::chrono::steady_clock::time_point received_time;$/;"	m	struct:SkyLinesTracking::Data::Thermal
recency_weight	Computer/ThermalLocator.hpp	/^    double recency_weight;$/;"	m	struct:ThermalLocator::Point
reconnect_button	Dialogs/Device/DeviceListDialog.cpp	/^  Button *reconnect_button, *flight_button;$/;"	m	class:final	file:
record	Dialogs/Traffic/TrafficList.cpp	/^    const FlarmNetRecord *record;$/;"	m	struct:TrafficListWidget::Item	file:
record_size	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::NavpointMeta
record_size	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::PilotMeta
record_size	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::PilotMetaActive
record_size	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t record_size;$/;"	m	struct:CAI302::PolarMeta
recordingtime	Device/Driver/Volkslogger/vlconv.h	/^  long recordingtime; \/\/ length of trace in seconds$/;"	m	struct:DIRENTRY
records	Computer/GlideRatioCalculator.hpp	/^  Record records[180];$/;"	m	class:GlideRatioCalculator
rect	Topography/shapelib/mapserver.h	/^    rectObj rect; \/* by rect *\/$/;"	m	struct:__anon40
rect	Topography/shapelib/maptree.h	/^    rectObj rect;$/;"	m	struct:shape_tree_node
rectObj	Topography/shapelib/mapprimitive.h	/^} rectObj;$/;"	t	typeref:struct:__anon75
rectyp_end	Device/Driver/Volkslogger/vlconv.cpp	52;"	d	file:
rectyp_fil	Device/Driver/Volkslogger/vlconv.cpp	55;"	d	file:
rectyp_msk	Device/Driver/Volkslogger/vlconv.cpp	47;"	d	file:
rectyp_poc	Device/Driver/Volkslogger/vlconv.cpp	56;"	d	file:
rectyp_pos	Device/Driver/Volkslogger/vlconv.cpp	53;"	d	file:
rectyp_sep	Device/Driver/Volkslogger/vlconv.cpp	51;"	d	file:
rectyp_tnd	Device/Driver/Volkslogger/vlconv.cpp	54;"	d	file:
rectyp_vrb	Device/Driver/Volkslogger/vlconv.cpp	50;"	d	file:
rectyp_vrt	Device/Driver/Volkslogger/vlconv.cpp	49;"	d	file:
recycle_method	Android/Bitmap.cpp	/^jmethodID AndroidBitmap::recycle_method;$/;"	m	class:AndroidBitmap	file:
recycle_method	Android/Bitmap.hpp	/^  static jmethodID recycle_method;$/;"	m	class:AndroidBitmap
reduce	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reduce:1;$/;"	m	struct:IMI::TObservationZone
reduce	Task/TaskFileSeeYou.cpp	/^  bool reduce;$/;"	m	struct:SeeYouTurnpointInformation	file:
refclrspc	Terrain/jasper/jas_cm.h	/^	int refclrspc;$/;"	m	struct:__anon104
refcnt	Terrain/jasper/jas_cm.h	/^	int refcnt;$/;"	m	struct:jas_cmpxform_s
refcnt	Terrain/jasper/jas_icc.h	/^	int refcnt; \/* reference count *\/$/;"	m	struct:jas_iccattrval_s
refcolorspc	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t refcolorspc; \/* profile connection space *\/$/;"	m	struct:__anon189
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:__anon39
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:__anon52
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:classObj
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:labelObj
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:layerObj
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:mapObj
refcount	Topography/shapelib/mapserver.h	/^    int refcount;$/;"	m	struct:styleObj
refcount	zzip/lib.h	/^    long refcount;$/;"	m	struct:zzip_dir
reference	Engine/Airspace/AirspaceAltitude.hpp	/^  AltitudeReference reference;$/;"	m	struct:AirspaceAltitude
reference	Engine/Task/ObservationZones/ObservationZonePoint.hpp	/^  GeoPoint reference;$/;"	m	class:ObservationZonePoint
reference	Engine/Trace/Trace.cpp	/^  typedef value_type &reference;$/;"	t	class:PointerIterator	file:
reference	Engine/Trace/Trace.hpp	/^    typedef const TracePoint &reference;$/;"	t	class:Trace::const_iterator
reference	Topography/shapelib/mapserver.h	/^    referenceMapObj reference;$/;"	m	struct:mapObj
reference	Util/AllocatedGrid.hxx	/^	typedef typename AllocatedArray<T>::reference reference;$/;"	t	class:AllocatedGrid
reference	Util/CastIterator.hpp	/^  typedef VT &reference;$/;"	t	class:CastIterator
reference	Util/QuadTree.hxx	/^		typedef T &reference;$/;"	t	class:iterator
reference	Util/QuadTree.hxx	/^		typedef const T &reference;$/;"	t	class:const_iterator
reference	Util/SliceAllocator.hxx	/^	typedef T &reference;$/;"	t	class:GlobalSliceAllocator
reference	Util/SliceAllocator.hxx	/^	typedef T &reference;$/;"	t	class:SliceAllocator
referenceMapObj	Topography/shapelib/mapserver.h	/^  } referenceMapObj;$/;"	t	typeref:struct:__anon53
reference_mass	Engine/GlideSolvers/GlidePolar.hpp	/^  double reference_mass;$/;"	m	class:GlidePolar
reference_mass	Plane/Plane.hpp	/^  double reference_mass;$/;"	m	struct:Plane
reference_mass	Polar/Polar.hpp	/^  double reference_mass; \/**< Reference Mass (kg) *\/$/;"	m	struct:PolarInfo
reference_mass	Polar/PolarStore.hpp	/^    double reference_mass;$/;"	m	struct:PolarStore::Item
refpt	Topography/shapelib/mapserver.h	/^    pointObj refpt;$/;"	m	struct:imageObj
regex	Topography/shapelib/mapserver.h	/^    ms_regex_t regex; \/* compiled regular expression to be matched *\/$/;"	m	struct:__anon35
regid	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t regid;$/;"	m	struct:__anon173
region	Topography/shapelib/mapserver.h	/^    char* region;       \/* type of the cluster region (rectangle or ellipse) *\/$/;"	m	struct:__anon37
region_code	Units/UnitsGlue.cpp	/^  const TCHAR* region_code;$/;"	m	struct:language_unit_map	file:
region_id	Units/UnitsGlue.cpp	/^  unsigned region_id;$/;"	m	struct:language_unit_map	file:
register	Screen/FreeType/Font.cpp	43;"	d	file:
register	Screen/FreeType/Init.cpp	29;"	d	file:
registration	Device/Driver/LX/LXN.hpp	/^    char registration[8];$/;"	m	struct:LXN::FlightInfo
registration	FLARM/FlarmNetRecord.hpp	/^  StaticString<LatinBufferSize(8)> registration;$/;"	m	struct:FlarmNetRecord
registration	Plane/Plane.hpp	/^  StaticString<32> registration;$/;"	m	struct:Plane
registry_listener	Event/Poll/WaylandQueue.cpp	/^static constexpr struct wl_registry_listener registry_listener = {$/;"	v	typeref:struct:wl_registry_listener	file:
registry_table	Lua/InputEvent.cpp	/^  static constexpr const char *registry_table = "xcsoar.input_events";$/;"	m	class:final	file:
regular_label_font	Look/TopographyLook.hpp	/^  Font regular_label_font;$/;"	m	struct:TopographyLook
rel_wheel	Event/Poll/Linux/Input.hpp	/^  int rel_x, rel_y, rel_wheel;$/;"	m	class:final
rel_x	Event/Poll/Linux/Input.hpp	/^  int rel_x, rel_y, rel_wheel;$/;"	m	class:final
rel_y	Event/Poll/Linux/Input.hpp	/^  int rel_x, rel_y, rel_wheel;$/;"	m	class:final
relative	Screen/SubCanvas.hpp	/^  PixelPoint relative;$/;"	m	class:SubCanvas
relative_altitude	FLARM/Traffic.hpp	/^  RoughAltitude relative_altitude;$/;"	m	class:FlarmTraffic::AircraftType
relative_east	FLARM/Traffic.hpp	/^  double relative_east;$/;"	m	class:FlarmTraffic::AircraftType
relative_north	FLARM/Traffic.hpp	/^  double relative_north;$/;"	m	class:FlarmTraffic::AircraftType
release_location	NMEA/FlyingState.hpp	/^  GeoPoint release_location;$/;"	m	struct:FlyingState
release_time	NMEA/FlyingState.hpp	/^  double release_time;$/;"	m	struct:FlyingState
released	Event/Poll/Linux/MergeMouse.hpp	/^  bool moved = false, pressed = false, released = false;$/;"	m	class:final
releasing	Event/Poll/Linux/Input.hpp	/^  bool pressing, releasing;$/;"	m	class:final
relocate_button	Dialogs/Task/OptionalStartsDialog.cpp	/^  Button *relocate_button, *remove_button;$/;"	m	class:OptionStartsWidget	file:
remainder_x	Terrain/ScanLine.cpp	/^  unsigned remainder_x, remainder_y;$/;"	m	struct:GridLocation	file:
remainder_y	Terrain/ScanLine.cpp	/^  unsigned remainder_x, remainder_y;$/;"	m	struct:GridLocation	file:
remaining	Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer remaining;$/;"	m	class:ElementStatComputer
remaining	Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat remaining;$/;"	m	struct:ElementStat
remaining	InfoBoxes/InfoBoxLayout.hpp	/^    PixelRect remaining;$/;"	m	struct:InfoBoxLayout::Layout
remaining	MapWindow/MapWindowGlideRange.cpp	/^  unsigned remaining;$/;"	m	struct:ProjectedFans	file:
remaining_effective	Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer remaining_effective;$/;"	m	class:ElementStatComputer
remaining_effective	Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat remaining_effective;$/;"	m	struct:ElementStat
remaining_segments	Terrain/Loader.hpp	/^  mutable unsigned remaining_segments = 0;$/;"	m	class:TerrainLoader
remark	Device/Driver/CAI302/Protocol.hpp	/^    char remark[12];$/;"	m	struct:CAI302::Navpoint
remove	Util/TrivialArray.hxx	/^	void remove(size_type i) {$/;"	f	class:TrivialArray
remove_button	Dialogs/Task/OptionalStartsDialog.cpp	/^  Button *relocate_button, *remove_button;$/;"	m	class:OptionStartsWidget	file:
remove_button	Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
render	Renderer/WaypointRenderer.cpp	/^WaypointRenderer::render(Canvas &canvas, LabelBlock &label_block,$/;"	f	class:WaypointRenderer
renderEllipseSymbol	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderEllipseSymbol)(imageObj *image, double x, double y,$/;"	m	struct:rendererVTableObj
renderGlyphs	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderGlyphs)(imageObj *img, textPathObj *tp, colorObj *clr, colorObj *olcolor, int olwidth, int isMarker);$/;"	m	struct:rendererVTableObj
renderLine	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderLine)(imageObj *img, shapeObj *p, strokeStyleObj *style);$/;"	m	struct:rendererVTableObj
renderLineTiled	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderLineTiled)(imageObj *img, shapeObj *p, imageObj *tile);$/;"	m	struct:rendererVTableObj
renderPixmapSymbol	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderPixmapSymbol)(imageObj *img, double x, double y,$/;"	m	struct:rendererVTableObj
renderPolygon	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderPolygon)(imageObj *img, shapeObj *p, colorObj *color);$/;"	m	struct:rendererVTableObj
renderPolygonTiled	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderPolygonTiled)(imageObj *img, shapeObj *p, imageObj *tile);$/;"	m	struct:rendererVTableObj
renderSVGSymbol	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderSVGSymbol)(imageObj *img, double x, double y,$/;"	m	struct:rendererVTableObj
renderText	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderText)(imageObj *img, pointObj *labelpnt, char *text, double angle, colorObj *clr, colorObj *olcolor, int olwidth);$/;"	m	struct:rendererVTableObj
renderTile	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderTile)(imageObj *img, imageObj *tile, double x, double y);$/;"	m	struct:rendererVTableObj
renderVectorSymbol	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*renderVectorSymbol)(imageObj *img, double x, double y,$/;"	m	struct:rendererVTableObj
render_buffer_depth_stencil	Screen/OpenGL/Globals.cpp	/^  GLenum render_buffer_depth_stencil, render_buffer_stencil;$/;"	m	namespace:OpenGL	file:
render_buffer_stencil	Screen/OpenGL/Globals.cpp	/^  GLenum render_buffer_depth_stencil, render_buffer_stencil;$/;"	m	namespace:OpenGL	file:
render_filled_posneg	Renderer/TraceHistoryRenderer.cpp	/^TraceHistoryRenderer::render_filled_posneg(ChartRenderer &chart,$/;"	f	class:TraceHistoryRenderer
render_mode	Screen/FreeType/Font.cpp	/^static FT_Render_Mode render_mode = FT_RENDER_MODE_NORMAL;$/;"	v	file:
render_projection	MapWindow/MapWindow.hpp	/^  MapWindowProjection render_projection;$/;"	m	class:MapWindow
rendered_text_symbols	Topography/shapelib/mapserver.h	/^    labelCacheMemberObj **rendered_text_symbols;$/;"	m	struct:__anon49
renderer	CrossSection/CrossSectionWindow.hpp	/^  CrossSectionRenderer renderer;$/;"	m	class:CrossSectionWindow
renderer	Dialogs/MapItemListDialog.cpp	/^  MapItemListRenderer renderer;$/;"	m	class:final	file:
renderer	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainRenderer renderer;$/;"	m	class:TerrainPreviewWindow	file:
renderer	Form/Button.hpp	/^  ButtonRenderer *renderer;$/;"	m	class:Button
renderer	Form/TabDisplay.hpp	/^  TabRenderer renderer;$/;"	m	class:TabButton
renderer	Form/TabMenuDisplay.hpp	/^    TabRenderer renderer;$/;"	m	struct:final::MainMenuButton
renderer	Form/TabMenuDisplay.hpp	/^    TabRenderer renderer;$/;"	m	struct:final::SubMenuButton
renderer	Gauge/ThermalAssistantWindow.hpp	/^  ThermalAssistantRenderer renderer;$/;"	m	class:ThermalAssistantWindow
renderer	InfoBoxes/Content/Thermal.hpp	/^  ThermalAssistantRenderer renderer;$/;"	m	class:InfoBoxContentThermalAssistant
renderer	PopupMessage.hpp	/^  TextRenderer renderer;$/;"	m	class:PopupMessage
renderer	Renderer/BackgroundRenderer.hpp	/^  std::unique_ptr<TerrainRenderer> renderer;$/;"	m	class:BackgroundRenderer
renderer	Screen/Custom/TopCanvas.hpp	/^  SDL_Renderer *renderer;$/;"	m	class:DisplayOrientation
renderer	Screen/LargeTextWindow.hpp	/^  TextRenderer renderer;$/;"	m	class:LargeTextWindow
renderer	Topography/CachedTopographyRenderer.hpp	/^  TopographyRenderer renderer;$/;"	m	class:CachedTopographyRenderer
renderer	Topography/shapelib/mapserver.h	/^    int  renderer;  \/* MS_RENDER_WITH_* *\/$/;"	m	struct:__anon39
renderer	Widget/ButtonWidget.hpp	/^  ButtonRenderer *const renderer;$/;"	m	class:ButtonWidget
rendererVTableObj	Topography/shapelib/mapserver.h	/^  struct rendererVTableObj {$/;"	s
rendererVTableObj	Topography/shapelib/mapserver.h	/^typedef struct rendererVTableObj rendererVTableObj;$/;"	t	typeref:struct:rendererVTableObj
renderer_cache	Topography/shapelib/mapprimitive.h	/^  void *renderer_cache;$/;"	m	struct:__anon79
renderer_data	Topography/shapelib/mapserver.h	/^    void *renderer_data;$/;"	m	struct:rendererVTableObj
renderer_settings	Airspace/AirspaceVisibility.hpp	/^  const AirspaceRendererSettings &renderer_settings;$/;"	m	class:AirspaceVisibility
rendermode	Topography/shapelib/mapserver.h	/^    enum MS_RENDER_MODE rendermode;$/;"	m	struct:layerObj	typeref:enum:layerObj::MS_RENDER_MODE
reopen_clock	Device/Descriptor.hpp	/^  PeriodClock reopen_clock;$/;"	m	class:final
repeatdistance	Topography/shapelib/mapserver.h	/^    int repeatdistance;$/;"	m	struct:labelObj
repetitive_sound	Engine/Airspace/AirspaceWarningConfig.hpp	/^  bool repetitive_sound;$/;"	m	struct:AirspaceWarningConfig
replaceEnumText	Form/DataField/Enum.cpp	/^DataFieldEnum::replaceEnumText(unsigned int i, const TCHAR *Text)$/;"	f	class:DataFieldEnum
replay	Components.cpp	/^Replay *replay;$/;"	v
replay	NMEA/GPSState.hpp	/^  bool replay;$/;"	m	struct:GPSState
replay	Replay/Replay.hpp	/^  AbstractReplay *replay;$/;"	m	class:final
replay_clock	Blackboard/DeviceBlackboard.hpp	/^  WrapClock real_clock, replay_clock;$/;"	m	class:DeviceBlackboard
replay_data	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo replay_data;$/;"	m	class:DeviceBlackboard
replay_path	CommandLine.cpp	/^  const char *replay_path;$/;"	m	namespace:CommandLine	file:
repository	Dialogs/FileManager.cpp	/^  FileRepository repository;$/;"	m	class:ManagedFileListWidget	file:
repository_downloaded	Repository/Glue.cpp	/^static bool repository_downloaded = false;$/;"	v	file:
repository_failed	Dialogs/DownloadFilePicker.cpp	/^  bool repository_failed;$/;"	m	class:final	file:
repository_failed	Dialogs/FileManager.cpp	/^  bool repository_failed;$/;"	m	class:ManagedFileListWidget	file:
repository_modified	Dialogs/DownloadFilePicker.cpp	/^  bool repository_modified;$/;"	m	class:final	file:
repository_modified	Dialogs/FileManager.cpp	/^  bool repository_modified;$/;"	m	class:ManagedFileListWidget	file:
reprojectorFromTileProjToLayerProj	Topography/shapelib/mapshape.h	/^    reprojectionObj* reprojectorFromTileProjToLayerProj;$/;"	m	struct:__anon86
reprojectorLayerToMap	Topography/shapelib/mapserver.h	/^    reprojectionObj* reprojectorLayerToMap;$/;"	m	struct:layerObj
reprojectorMapToLayer	Topography/shapelib/mapserver.h	/^    reprojectionObj* reprojectorMapToLayer;$/;"	m	struct:layerObj
request	Terrain/RasterTile.hpp	/^  bool request;$/;"	m	class:RasterTile
request_armed	Engine/Task/Ordered/TaskAdvance.hpp	/^  bool request_armed = false;$/;"	m	class:TaskAdvance
request_headers	Net/HTTP/Request.hpp	/^    CurlSlist request_headers;$/;"	m	class:Net::Request
request_tiles	Terrain/RasterTileCache.hpp	/^  StaticArray<uint16_t, MAX_RTC_TILES> request_tiles;$/;"	m	class:RasterTileCache
require_arm	Engine/Task/Ordered/StartConstraints.hpp	/^  bool require_arm;$/;"	m	struct:StartConstraints
require_restart	UtilsSettings.cpp	/^bool require_restart;$/;"	v
requires	Topography/shapelib/mapserver.h	/^    char *requires; \/* context expressions, simple enough to not use expressionObj *\/$/;"	m	struct:layerObj
res	Engine/GlideSolvers/MacCready.cpp	/^  GlideResult res;$/;"	m	class:MacCreadyVopt	file:
res	Engine/Task/Solvers/TaskBestMc.hpp	/^  GlideResult res;$/;"	m	class:final
res	Engine/Task/Solvers/TaskGlideRequired.hpp	/^  GlideResult res;$/;"	m	class:final
res	Engine/Task/Solvers/TaskMinTarget.hpp	/^  GlideResult res;$/;"	m	class:final
res	Engine/Task/Solvers/TaskOptTarget.hpp	/^  GlideResult res;$/;"	m	class:final
reservable_priority_queue	Util/ReservablePriorityQueue.hpp	/^  reservable_priority_queue(size_type capacity = 0) {$/;"	f	class:reservable_priority_queue
reservable_priority_queue	Util/ReservablePriorityQueue.hpp	/^class reservable_priority_queue:$/;"	c
reserve	Util/ReservablePriorityQueue.hpp	/^  void reserve(size_type capacity) {$/;"	f	class:reservable_priority_queue
reserved	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved[15];$/;"	m	struct:CAI302::GeneralInfo
reserved	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[160 - (IMIRSA_MAX_BITS \/ 8) - 7];$/;"	m	struct:IMI::Signature
reserved	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[64 - 22];$/;"	m	struct:IMI::TDeviceInfo
reserved	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[96 - 82];$/;"	m	struct:IMI::FlightInfo
reserved	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved[sizeof(TWaypoint) - sizeof(IMIWORD)];$/;"	m	struct:IMI::TDeclaration
reserved	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved: 6;$/;"	m	struct:IMI::TObservationZone
reserved	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD reserved;$/;"	m	struct:IMI::FlightFinish
reserved	Tracking/SkyLines/Protocol.hpp	/^    uint16_t reserved;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
reserved	Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved;$/;"	m	struct:SkyLinesTracking::ACKPacket
reserved	Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved;$/;"	m	struct:SkyLinesTracking::PingPacket
reserved	Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
reserved	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved;$/;"	m	struct:SkyLinesTracking::FixPacket
reserved	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved;$/;"	m	struct:SkyLinesTracking::TrafficRequestPacket
reserved	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved;$/;"	m	struct:SkyLinesTracking::UserNameRequestPacket
reserved1	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved1;$/;"	m	struct:CAI302::Polar
reserved1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved1:23;$/;"	m	struct:IMI::FixK
reserved1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved1:7;$/;"	m	struct:IMI::TWaypoint
reserved1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD reserved1;$/;"	m	struct:IMI::TDeclarationHeader
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved1;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint16_t reserved1;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::Thermal
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::ThermalRequestPacket
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::Wave
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved1;$/;"	m	struct:SkyLinesTracking::WaveRequestPacket
reserved1	Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved1, reserved2, reserved3;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved2	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t reserved2;$/;"	m	struct:CAI302::Pilot
reserved2	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t reserved2;$/;"	m	struct:CAI302::Polar
reserved2	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved2[5];$/;"	m	struct:CAI302::GeneralInfo
reserved2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved2[28];$/;"	m	struct:IMI::TDeclarationHeader
reserved2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved2[3];$/;"	m	struct:IMI::FixK
reserved2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE reserved2[66];$/;"	m	struct:IMI::FlightFinish
reserved2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD reserved2:7;$/;"	m	struct:IMI::TWaypoint
reserved2	Tracking/SkyLines/Protocol.hpp	/^    uint32_t reserved2;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
reserved2	Tracking/SkyLines/Protocol.hpp	/^  int16_t reserved2;$/;"	m	struct:SkyLinesTracking::Thermal
reserved2	Tracking/SkyLines/Protocol.hpp	/^  int16_t reserved2;$/;"	m	struct:SkyLinesTracking::Wave
reserved2	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved2;$/;"	m	struct:SkyLinesTracking::PingPacket
reserved2	Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved1, reserved2, reserved3;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved2	Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved2;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
reserved2	Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved2;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
reserved2	Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved2;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
reserved3	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved3[2];$/;"	m	struct:CAI302::GeneralInfo
reserved3	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved3;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
reserved3	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved3;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
reserved3	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved3;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
reserved3	Tracking/SkyLines/Protocol.hpp	/^  uint8_t reserved1, reserved2, reserved3;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved4	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved4, reserved5;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved5	Tracking/SkyLines/Protocol.hpp	/^  uint32_t reserved4, reserved5;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
reserved_vario	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t reserved_vario; \/\/ multiplexed w\/ vario mode:$/;"	m	struct:CAI302::Pilot
reset	Computer/Wind/Store.cpp	/^WindStore::reset()$/;"	f	class:WindStore
reset	Engine/Task/Computer/TaskVarioComputer.cpp	/^TaskVarioComputer::reset(TaskVario &data, const GlideResult& solution)$/;"	f	class:TaskVarioComputer
reset	Engine/Task/Stats/TaskStats.cpp	/^TaskStats::reset()$/;"	f	class:TaskStats
reset	Renderer/LabelBlock.cpp	/^void LabelBlock::reset()$/;"	f	class:LabelBlock
resetClip	Topography/shapelib/mapserver.h	/^    int (*resetClip)(imageObj *img);$/;"	m	struct:rendererVTableObj
reset_gettext_cache	Language/Language.cpp	/^reset_gettext_cache()$/;"	f
reset_pending	Computer/Wind/WindEKFGlue.hpp	/^  bool reset_pending;$/;"	m	class:WindEKFGlue
resizable	Screen/TopWindow.hpp	/^  bool resizable = false;$/;"	m	class:DisplayOrientation
resize	Util/TrivialArray.hxx	/^	void resize(size_type new_size) {$/;"	f	class:TrivialArray
resized	Screen/TopWindow.hpp	/^  bool resized = false;$/;"	m	class:TopWindow
resolution	Topography/shapelib/mapserver.h	/^    double resolution;$/;"	m	struct:imageObj
resolution	Topography/shapelib/mapserver.h	/^    double resolution;$/;"	m	struct:mapObj
resolutionfactor	Topography/shapelib/mapserver.h	/^    double resolutionfactor;$/;"	m	struct:imageObj
resolutionfactor	Topography/shapelib/mapserver.h	/^    double scalefactor,resolutionfactor;$/;"	m	struct:__anon45
resolver	Device/Port/TCPClientPort.hpp	/^  boost::asio::ip::tcp::resolver resolver;$/;"	m	class:final
resolver	Tracking/SkyLines/Client.hpp	/^  boost::asio::ip::udp::resolver resolver;$/;"	m	class:SkyLinesTracking::Client
resolving	Tracking/SkyLines/Client.hpp	/^  bool resolving = false;$/;"	m	class:SkyLinesTracking::Client
resource	Language/LanguageGlue.hpp	/^  const TCHAR *resource;$/;"	m	struct:BuiltinLanguage
resource_id	Topography/TopographyStore.cpp	/^  ResourceId resource_id, big_resource_id;$/;"	m	struct:__anon90	file:
response	Device/Driver/KRT2.cpp	/^  uint8_t response;$/;"	m	class:final	file:
response_mutex	Device/Driver/KRT2.cpp	/^  Mutex response_mutex;$/;"	m	class:final	file:
rest	Util/IterableSplitString.hxx	/^		StringView current, rest;$/;"	m	class:BasicIterableSplitString::final
restlen	zzip/file.h	/^    zzip_size_t restlen;$/;"	m	struct:zzip_file
restore_page_pending	MainWindow.hpp	/^  bool restore_page_pending = false;$/;"	m	class:MainWindow
result	Device/Driver/CAI302/Protocol.hpp	/^    char result;$/;"	m	struct:CAI302::FileASCII
result	Device/Driver/CAI302/Protocol.hpp	/^    char result;$/;"	m	struct:CAI302::FileBinary
result	Engine/Contest/ContestStatistics.hpp	/^  ContestResult result[3];$/;"	m	struct:ContestStatistics
result	Job/TriStateJob.hpp	/^  TriStateJobResult result;$/;"	m	class:final
result	Topography/shapelib/mapserver.h	/^    parseResultObj result; \/* parse result *\/$/;"	m	struct:__anon36
resultCacheObj	Topography/shapelib/mapserver.h	/^  } resultCacheObj;$/;"	t	typeref:struct:__anon51
resultObj	Topography/shapelib/mapserver.h	/^  } resultObj;$/;"	t	typeref:struct:__anon50
result_classic	Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestResult result_classic;$/;"	m	class:OLCPlus
result_fai	Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestResult result_fai;$/;"	m	class:OLCPlus
result_type	Cloud/Client.hpp	/^  typedef GeoPoint result_type;$/;"	t	struct:CloudClientIndexable
result_type	Cloud/Thermal.hpp	/^  typedef GeoPoint result_type;$/;"	t	struct:CloudThermalIndexable
result_type	Engine/Airspace/AirspacesInterface.hpp	/^    typedef FlatBoundingBox result_type;$/;"	t	struct:AirspacesInterface::AirspaceIndexable
result_type	Screen/Memory/PixelOperations.hpp	/^  typedef bool result_type;$/;"	t	struct:ColorKey
result_type	Screen/Memory/PixelOperations.hpp	/^  typedef color_type result_type;$/;"	t	struct:PixelIntegerAdapter
resultcache	Topography/shapelib/mapserver.h	/^    resultCacheObj *resultcache; \/* holds the results of a query against this layer *\/$/;"	m	struct:layerObj
resultindex	Topography/shapelib/mapprimitive.h	/^  int resultindex; \/* index within a query result set *\/$/;"	m	struct:__anon79
resultindex	Topography/shapelib/mapserver.h	/^    int resultindex;$/;"	m	struct:__anon50
results	Net/HTTP/Multi.hpp	/^    std::map<const CURL *, CURLcode> results;$/;"	m	class:Net::CurlMulti
results	Topography/shapelib/mapserver.h	/^    resultObj *results;$/;"	m	struct:__anon51
resumed	Screen/TopWindow.hpp	/^  bool resumed = false;$/;"	m	class:TopWindow
retrospective	Computer/GlideComputer.hpp	/^  Retrospective retrospective;$/;"	m	class:GlideComputer
return	zzip/zip.c	184;"	d	file:
return	zzip/zip.c	387;"	d	file:
reverse	Dialogs/Task/Manager/TaskEditPanel.cpp	/^    PixelRect edit, down, up, reverse, clear_all;$/;"	m	struct:final::Layout	file:
reverse_button	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button reverse_button, clear_all_button;$/;"	m	class:final	file:
revert_button	Dialogs/Task/Manager/TaskClosePanel.hpp	/^    PixelRect close_button, message, revert_button;$/;"	m	struct:final::Layout
revert_button	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  Button revert_button;$/;"	m	class:final
rgn	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_rgn_t rgn;$/;"	m	union:__anon178
right	Form/DigitEntry.hpp	/^    unsigned left, right;$/;"	m	struct:CoordinateFormat::Column
right	Geo/ConvexHull/GrahamScan.hpp	/^  SearchPoint *right;$/;"	m	class:GrahamScan
right	Screen/Point.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelPoint::PixelRect
right	Util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
risk_gamma	Engine/Task/TaskBehaviour.hpp	/^  double risk_gamma;$/;"	m	struct:TaskBehaviour
rlvlno	Terrain/jasper/jpc/jpc_t2cod.h	/^	unsigned rlvlno;$/;"	m	struct:__anon138
rlvlnoend	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t rlvlnoend;$/;"	m	struct:__anon169
rlvlnostart	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t rlvlnostart;$/;"	m	struct:__anon169
rlvls	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_coxrlvl_t rlvls[JPC_MAXRLVLS];$/;"	m	struct:__anon162
rlvls	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_rlvl_t *rlvls;$/;"	m	struct:__anon149
rms_error	Math/LeastSquares.hpp	/^  double rms_error;$/;"	m	class:LeastSquares
roaming	Tracking/SkyLines/Glue.hpp	/^  bool roaming = true;$/;"	m	class:SkyLinesTracking::Glue
roaming	Tracking/SkyLines/Settings.hpp	/^  bool roaming;$/;"	m	struct:SkyLinesTracking::Settings
roishift	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t roishift;$/;"	m	struct:__anon165
roishift	Terrain/jasper/jpc/jpc_dec.h	/^	int roishift;$/;"	m	struct:__anon147
roishift	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast8_t roishift;$/;"	m	struct:__anon142
roisty	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t roisty;$/;"	m	struct:__anon165
root	Engine/Route/ReachFan.hpp	/^  FlatTriangleFanTree root;$/;"	m	class:ReachFan
root	Topography/shapelib/maptree.h	/^    treeNodeObj *root;$/;"	m	struct:__anon87
root	Util/QuadTree.hxx	/^	Bucket root;$/;"	v
root	Util/RadixTree.hpp	/^  Node root;$/;"	m	class:RadixTree
rot	Topography/shapelib/mapserver.h	/^  double rot;$/;"	m	struct:__anon66
rotate	Event/Poll/Linux/MergeMouse.hpp	/^  RotatePointer rotate;$/;"	m	class:final
rotate_shift	Renderer/RotatedPolygonRenderer.hpp	/^  CanvasRotateShift rotate_shift;$/;"	m	class:RotatedPolygonRenderer
rotation	Airspace/AirspaceParser.cpp	/^  int rotation;$/;"	m	struct:TempAirspaceType	file:
rotation	Topography/shapelib/mapserver.h	/^    double outlinewidth, rotation,scale;$/;"	m	struct:tileCacheObj
rotation	Topography/shapelib/mapserver.h	/^    double rotation;$/;"	m	struct:__anon45
rotation	Topography/shapelib/mapserver.h	/^    double rotation;$/;"	m	struct:__anon70
rotation	Topography/shapelib/mapserver.h	/^    double rotation;$/;"	m	struct:__anon71
rotation_angle	Topography/shapelib/mapprimitive.h	/^  double rotation_angle;$/;"	m	struct:__anon81
roundshift	Math/Screen.cpp	/^roundshift(int x)$/;"	f	file:
route	Computer/TaskComputer.hpp	/^  RouteComputer route;$/;"	m	class:TaskComputer
route	Task/ProtectedTaskManager.hpp	/^  const RoutePlannerGlue *route;$/;"	m	class:ReachIntersectionTest
route_clock	Computer/RouteComputer.hpp	/^  GPSClock route_clock;$/;"	m	class:RouteComputer
route_planner	Computer/RouteComputer.hpp	/^  RoutePlannerGlue route_planner;$/;"	m	class:RouteComputer
route_planner	Engine/Task/TaskBehaviour.hpp	/^  RoutePlannerConfig route_planner;$/;"	m	struct:TaskBehaviour
route_planner	MapWindow/MapWindow.hpp	/^  const ProtectedRoutePlanner *route_planner = nullptr;$/;"	m	class:MapWindow
routes	Device/Driver/Volkslogger/vlapi2.h	/^    ROUTE *routes;$/;"	m	struct:VLAPI_DATA::DATABASE
routine	Topography/shapelib/maperror.h	/^    char routine[ROUTINELENGTH];$/;"	m	struct:errorObj
row_height	Dialogs/ListPicker.cpp	/^  unsigned row_height;$/;"	m	class:ListPickerWidget	file:
row_height	Form/GridView.hpp	/^  unsigned row_height;$/;"	m	class:GridView
row_renderer	Dialogs/Airspace/AirspaceList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Airspace/dlgAirspace.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:AirspaceSettingsListWidget	file:
row_renderer	Dialogs/ComboPicker.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:ComboPickerSupport	file:
row_renderer	Dialogs/FileManager.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/FileManager.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:ManagedFileListWidget	file:
row_renderer	Dialogs/Plane/PlaneListDialog.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Task/AlternatesListDialog.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:TaskEditPanel	file:
row_renderer	Dialogs/Task/MutateTaskPointDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Task/OptionalStartsDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:OptionStartsWidget	file:
row_renderer	Dialogs/Traffic/TrafficList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:TrafficListWidget	file:
row_renderer	Dialogs/Waypoint/Manager.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Waypoint/WaypointList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Weather/NOAAList.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Dialogs/Weather/RASPDialog.cpp	/^  TextRowRenderer row_renderer;$/;"	m	class:RaspProviderRenderer	file:
row_renderer	Kobo/WifiDialog.cpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:final	file:
row_renderer	Renderer/MapItemListRenderer.hpp	/^  TwoTextRowsRenderer row_renderer;$/;"	m	class:MapItemListRenderer
row_renderer	Widget/TextListWidget.hpp	/^  TextRowRenderer row_renderer;$/;"	m	class:TextListWidget
rows	Widget/RowFormWidget.hpp	/^  StaticArray<Row, 32u> rows;$/;"	m	class:RowFormWidget
rows_	Terrain/jasper/jas_seq.h	/^	jas_seqent_t **rows_;$/;"	m	struct:jas_matrix
rpm	IGC/IGCFix.hpp	/^  int16_t rpm;$/;"	m	struct:IGCFix
rpointer	Screen/Memory/Buffer.hpp	/^  typedef typename PixelTraits::const_rpointer rpointer;$/;"	t	struct:ConstImageBuffer
rpointer	Screen/Memory/Buffer.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	struct:WritableImageBuffer
rpointer	Screen/Memory/Optimised.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	class:SelectOptimisedPixelOperations
rpointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	struct:ConditionalWritePixel
rpointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename PixelTraits::rpointer rpointer;$/;"	t	struct:PerPixelOperations
rpointer	Screen/Memory/PixelTraits.hpp	/^  typedef color_type *gcc_restrict rpointer;$/;"	t	struct:BGRAPixelTraits
rpointer	Screen/Memory/PixelTraits.hpp	/^  typedef color_type *gcc_restrict rpointer;$/;"	t	struct:GreyscalePixelTraits
rpolar	Engine/Route/AirspaceRoute.cpp	/^  const RoutePolars &rpolar;$/;"	m	class:final	file:
rpolars	Engine/Route/ReachFanParms.hpp	/^  const RoutePolars &rpolars;$/;"	m	struct:ReachFanParms
rpolars_reach	Engine/Route/RoutePlanner.hpp	/^  RoutePolars rpolars_reach;$/;"	m	class:RoutePlanner
rpolars_reach_working	Engine/Route/RoutePlanner.hpp	/^  RoutePolars rpolars_reach_working;$/;"	m	class:RoutePlanner
rpolars_route	Engine/Route/RoutePlanner.hpp	/^  RoutePolars rpolars_route;$/;"	m	class:RoutePlanner
rs	Device/Driver/Volkslogger/vlapi2.h	/^    unsigned rs;  \/\/ sector radius in meters   (0..15000m)$/;"	m	struct:VLAPI_DATA::DCLWPT
rsaBits	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD rsaBits;$/;"	m	struct:IMI::Signature
rt_constraints	Engine/Task/Factory/RTTaskFactory.cpp	/^static constexpr TaskFactoryConstraints rt_constraints = {$/;"	v	file:
rtc	Terrain/RasterTileCache.cpp	/^  const RasterTileCache &rtc;$/;"	m	struct:RTDistanceSort	file:
rtree	Cloud/Client.hpp	/^  Tree rtree;$/;"	m	class:CloudClientContainer
rtree	Cloud/Thermal.hpp	/^  Tree rtree;$/;"	m	class:CloudThermalContainer
run_time	Weather/PCMet/Overlays.hpp	/^  BrokenDateTime run_time, valid_time;$/;"	m	struct:PCMet::Overlay
running	Device/Port/BufferedPort.hpp	/^  bool running;$/;"	m	class:BufferedPort
running	Engine/Contest/Solvers/TriangleContest.hpp	/^  bool running;$/;"	m	class:TriangleContest
running	Job/Async.hpp	/^  std::atomic<bool> running;$/;"	m	class:final
running	Job/Thread.hpp	/^  std::atomic<bool> running;$/;"	m	class:JobThread
runway	Engine/Waypoint/Waypoint.hpp	/^  Runway runway;$/;"	m	struct:Waypoint
rwcnt_	Terrain/jasper/jas_stream.h	/^	long rwcnt_;$/;"	m	struct:__anon120
rwlimit_	Terrain/jasper/jas_stream.h	/^	long rwlimit_;$/;"	m	struct:__anon120
rx	FLARM/Status.hpp	/^  unsigned short rx;$/;"	m	struct:FlarmStatus
rx_buf	Device/Driver/KRT2.cpp	/^  StaticFifoBuffer<uint8_t, 256u> rx_buf;$/;"	m	class:final	file:
rx_cond	Device/Driver/KRT2.cpp	/^  Cond rx_cond;$/;"	m	class:final	file:
rz	Device/Driver/Volkslogger/vlapi2.h	/^    unsigned rz;  \/\/ cylinder radius in meters (0..1500m)$/;"	m	struct:VLAPI_DATA::DCLWPT
s	Util/IterableSplitString.hxx	/^	StringView s;$/;"	m	class:BasicIterableSplitString
sTDECL	Device/Driver/Volkslogger/vlconv.cpp	/^  char sTDECL[20];$/;"	m	class:C_RECORD	file:
sTileProj	Topography/shapelib/mapshape.h	/^    projectionObj sTileProj;$/;"	m	struct:__anon86
safe_brush	Look/TrafficLook.hpp	/^  Brush safe_brush;$/;"	m	struct:TrafficLook
safe_color	Look/TrafficLook.hpp	/^  Color safe_color;$/;"	m	struct:TrafficLook
safe_fseek	Topography/shapelib/mapxbase.c	44;"	d	file:
safety_height	Engine/Task/Ordered/Points/FinishPoint.hpp	/^  double safety_height;$/;"	m	class:final
safety_height	Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  double safety_height;$/;"	m	class:IntermediateTaskPoint
safety_height	Engine/Task/Ordered/Points/StartPoint.hpp	/^  double safety_height;$/;"	m	class:final
safety_height	MapWindow/Items/MapItem.hpp	/^  double safety_height;$/;"	m	struct:ArrivalAltitudeMapItem
safety_height_arrival	Engine/Task/TaskBehaviour.hpp	/^  double safety_height_arrival;$/;"	m	struct:TaskBehaviour
safety_height_arrival	Engine/Task/Unordered/UnorderedTaskPoint.hpp	/^  double safety_height_arrival;$/;"	m	class:final
safety_height_terrain	Engine/Route/Config.hpp	/^  double safety_height_terrain;$/;"	m	struct:RoutePlannerConfig
safety_mc	Engine/Task/TaskBehaviour.hpp	/^  double safety_mc;$/;"	m	struct:TaskBehaviour
safety_polar	Engine/Task/TaskManager.hpp	/^  GlidePolar safety_polar;$/;"	m	class:TaskManager
sample_rate	Audio/PCMMixerDataSource.hpp	/^  const unsigned sample_rate;$/;"	m	class:PCMMixerDataSource
sample_rate	Audio/ToneSynthesiser.hpp	/^  const unsigned sample_rate;$/;"	m	class:ToneSynthesiser
sample_rate	Audio/VarioGlue.cpp	/^static constexpr unsigned sample_rate = 44100;$/;"	v	file:
sampled_points	Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPointVector sampled_points;$/;"	m	class:SampledTaskPoint
samples	Computer/Wind/CirclingWind.hpp	/^  StaticArray<Sample, 50> samples;$/;"	m	class:CirclingWind
sat_areas	Weather/PCMet/Images.cpp	/^static constexpr PCMet::ImageArea sat_areas[] = {$/;"	v	file:
satellite_ids	Logger/LoggerFRecord.hpp	/^  int satellite_ids[GPSState::MAXSATELLITES];$/;"	m	class:LoggerFRecord
satellite_ids	Logger/LoggerImpl.hpp	/^    int satellite_ids[GPSState::MAXSATELLITES];$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellite_ids	NMEA/GPSState.hpp	/^  int satellite_ids[MAXSATELLITES];$/;"	m	struct:GPSState
satellite_ids_available	Logger/LoggerFRecord.hpp	/^  bool satellite_ids_available;$/;"	m	class:LoggerFRecord
satellite_ids_available	Logger/LoggerImpl.hpp	/^    bool satellite_ids_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellite_ids_available	NMEA/GPSState.hpp	/^  Validity satellite_ids_available;$/;"	m	struct:GPSState
satellites_used	Logger/LoggerImpl.hpp	/^    int satellites_used;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellites_used	NMEA/GPSState.hpp	/^  int satellites_used;$/;"	m	struct:GPSState
satellites_used_available	Logger/LoggerImpl.hpp	/^    bool satellites_used_available;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
satellites_used_available	NMEA/GPSState.hpp	/^  Validity satellites_used_available;$/;"	m	struct:GPSState
saturday	Engine/Airspace/AirspaceActivity.hpp	/^    bool saturday:1;$/;"	m	struct:AirspaceActivity::Days
save	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^    PixelRect demo, save;$/;"	m	struct:final::Layout	file:
saveImage	Topography/shapelib/mapserver.h	/^    int WARN_UNUSED (*saveImage)(imageObj *img, mapObj *map, FILE *fp, outputFormatObj *format);$/;"	m	struct:rendererVTableObj
saveImageBuffer	Topography/shapelib/mapserver.h	/^    unsigned char* WARN_UNUSED (*saveImageBuffer)(imageObj *img, int *size_ptr, outputFormatObj *format);$/;"	m	struct:rendererVTableObj
save_button	Dialogs/Device/Vega/VegaConfigurationDialog.cpp	/^  Button demo_button, save_button;$/;"	m	class:final	file:
save_button	Dialogs/Waypoint/Manager.cpp	/^  Button *new_button, *edit_button, *save_button, *delete_button;$/;"	m	class:final	file:
save_timer	Cloud/Main.cpp	/^  boost::asio::steady_timer save_timer, expire_timer;$/;"	m	class:final	file:
saved_extent	Topography/shapelib/mapserver.h	/^    rectObj saved_extent;$/;"	m	struct:mapObj
saved_targets	Engine/Task/Solvers/TaskMacCreadyRemaining.hpp	/^  std::array<GeoPoint, MAX_SIZE> saved_targets;$/;"	m	class:final
sc	Gauge/FlarmTrafficWindow.hpp	/^  PixelPoint sc[TrafficList::MAX_COUNT];$/;"	m	class:FlarmTrafficWindow
scalar_type	Math/Line2D.hpp	/^  typedef typename Point::scalar_type scalar_type;$/;"	t	struct:Line2D
scalar_type	Math/Point2D.hpp	/^  typedef T scalar_type;$/;"	t	struct:Point2D
scale	Projection/Projection.hpp	/^  double scale;$/;"	m	class:Projection
scale	Renderer/ChartRenderer.hpp	/^    double scale, min, max;$/;"	m	struct:ChartRenderer::Axis
scale	Screen/Layout.cpp	/^  unsigned scale = 1;$/;"	m	namespace:Layout	file:
scale	Topography/shapelib/mapserver.h	/^    double outlinewidth, rotation,scale;$/;"	m	struct:tileCacheObj
scale	Topography/shapelib/mapserver.h	/^    double scale;$/;"	m	struct:__anon70
scale	UISettings.hpp	/^  unsigned scale;$/;"	m	struct:UISettings
scaleTokenEntryObj	Topography/shapelib/mapserver.h	/^  } scaleTokenEntryObj;$/;"	t	typeref:struct:__anon59
scaleTokenObj	Topography/shapelib/mapserver.h	/^  } scaleTokenObj;$/;"	t	typeref:struct:__anon60
scale_1024	Screen/Layout.cpp	/^  unsigned scale_1024 = 1024;$/;"	m	namespace:Layout	file:
scale_buffer	MapWindow/MapWindow.hpp	/^  unsigned scale_buffer = 0;$/;"	m	class:MapWindow
scale_runway_length	Renderer/WaypointRendererSettings.hpp	/^  bool scale_runway_length;$/;"	m	struct:WaypointRendererSettings
scale_threshold	Topography/Thread.hpp	/^  double scale_threshold;$/;"	m	class:final
scale_threshold	Topography/TopographyFile.hpp	/^  const double scale_threshold;$/;"	m	class:TopographyFile
scalebar	Topography/shapelib/mapserver.h	/^    scalebarObj scalebar;$/;"	m	struct:mapObj
scalebarObj	Topography/shapelib/mapserver.h	/^  } scalebarObj;$/;"	t	typeref:struct:__anon54
scaled_trail_pens	Look/TrailLook.hpp	/^  Pen scaled_trail_pens[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
scaledenom	Topography/shapelib/mapserver.h	/^    double scaledenom; \/* scale of the output image *\/$/;"	m	struct:mapObj
scalefactor	Topography/shapelib/mapserver.h	/^    double scalefactor,resolutionfactor;$/;"	m	struct:__anon45
scalefactor	Topography/shapelib/mapserver.h	/^    double scalefactor; \/* computed, not set *\/$/;"	m	struct:layerObj
scaletokens	Topography/shapelib/mapserver.h	/^    scaleTokenObj *scaletokens;$/;"	m	struct:layerObj
scaling_enabled	MapSettings.hpp	/^  bool scaling_enabled;$/;"	m	struct:TrailSettings
scan_overview	Terrain/Loader.hpp	/^  const bool scan_overview, scan_tiles;$/;"	m	class:TerrainLoader
scan_tiles	Terrain/Loader.hpp	/^  const bool scan_overview, scan_tiles;$/;"	m	class:TerrainLoader
sccode	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t sccode; \/* ScriptCode code *\/$/;"	m	struct:__anon183
score	Engine/Contest/ContestResult.hpp	/^  double score;$/;"	m	struct:ContestResult
score_exit	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect optional_starts, score_exit;$/;"	m	struct:final::Layout	file:
score_exit	Dialogs/Task/TaskPointDialog.cpp	/^  CheckBoxControl score_exit;$/;"	m	class:final	file:
score_exit	Engine/Task/Ordered/Points/ASTPoint.hpp	/^  bool score_exit = false;$/;"	m	class:final
scratch	Topography/shapelib/mapprimitive.h	/^  int scratch;$/;"	m	struct:__anon79
screen	Screen/TopWindow.hpp	/^  TopCanvas *screen = nullptr;$/;"	m	class:TopWindow
screen_blanked	UIState.hpp	/^  bool screen_blanked;$/;"	m	struct:UIState
screen_bounds	Projection/WindowProjection.hpp	/^  GeoBounds screen_bounds;$/;"	m	class:WindowProjection
screen_bounds	Renderer/TaskRenderer.hpp	/^  GeoBounds screen_bounds;$/;"	m	class:TaskRenderer
screen_distance_meters	CalculationThread.hpp	/^  double screen_distance_meters;$/;"	m	class:final
screen_initialized	Screen/Debug.cpp	/^static bool screen_initialized = false;$/;"	v	file:
screen_origin	Projection/Projection.hpp	/^  PixelPoint screen_origin;$/;"	m	class:Projection
screen_radius	MapWindow/MapCanvas.hpp	/^  unsigned screen_radius;$/;"	m	class:MapCanvas
screen_rotation	Projection/Projection.hpp	/^  FastIntegerRotation screen_rotation;$/;"	m	class:Projection
screen_rotation	Renderer/WaypointIconRenderer.hpp	/^  Angle screen_rotation;$/;"	m	class:WaypointIconRenderer
screen_size	Projection/WindowProjection.hpp	/^  UnsignedPoint2D screen_size;$/;"	m	class:WindowProjection
screen_size_initialised	Projection/WindowProjection.hpp	/^  bool screen_size_initialised;$/;"	m	class:WindowProjection
scroll_bar	Form/List.cpp	/^   scroll_bar(look.button)$/;"	f
scroll_bar	Form/List.hpp	/^  ScrollBar scroll_bar;$/;"	m	class:ListControl
sea_brush	Look/CrossSectionLook.hpp	/^  Brush sea_brush;$/;"	m	struct:CrossSectionLook
sea_color	Look/CrossSectionLook.hpp	/^  Color sea_color;$/;"	m	struct:CrossSectionLook
search	Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::search(const double mc)$/;"	f	class:TaskBestMc
search	Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::search(const double mc, double &result)$/;"	f	class:TaskBestMc
search	Engine/Task/Solvers/TaskGlideRequired.cpp	/^TaskGlideRequired::search(const double S)$/;"	f	class:TaskGlideRequired
search	Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::search(const double tp)$/;"	f	class:TaskMinTarget
search	Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::search(const double tp)$/;"	f	class:TaskOptTarget
search	Engine/Task/Solvers/TaskSolveTravelled.cpp	/^TaskSolveTravelled::search(const double ce)$/;"	f	class:TaskSolveTravelled
searchDiskTreeNode	Topography/shapelib/maptree.c	/^static void searchDiskTreeNode(SHPTreeHandle disktree, rectObj aoi, ms_bitarray status)$/;"	f	file:
search_hull	Engine/Route/RoutePlanner.hpp	/^  SearchPointVector search_hull;$/;"	m	class:RoutePlanner
search_max	Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPoint search_max;$/;"	m	class:SampledTaskPoint
search_min	Engine/Task/Points/SampledTaskPoint.hpp	/^  SearchPoint search_min;$/;"	m	class:SampledTaskPoint
search_range	Engine/Contest/Solvers/Retrospective.hpp	/^  double search_range;$/;"	m	class:Retrospective
searchrect	Topography/shapelib/mapshape.h	/^    rectObj searchrect;$/;"	m	struct:__anon86
seat	Event/Poll/WaylandQueue.hpp	/^  struct wl_seat *seat = nullptr;$/;"	m	class:final	typeref:struct:final::wl_seat
seat_listener	Event/Poll/WaylandQueue.cpp	/^static constexpr struct wl_seat_listener seat_listener = {$/;"	v	typeref:struct:wl_seat_listener	file:
sec	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t sec;$/;"	m	struct:__anon180
second	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
second	Engine/Route/RouteLink.hpp	/^  RoutePoint second;$/;"	m	struct:RouteLinkBase
second	Time/BrokenTime.hpp	/^  uint8_t second;$/;"	m	struct:BrokenTime
second	Widget/TwoWidgets.hpp	/^  Widget *first, *second;$/;"	m	class:TwoWidgets
second_argument_type	Screen/Memory/PixelOperations.hpp	/^  typedef color_type second_argument_type;$/;"	t	struct:PixelIntegerAdapter
second_device	Device/Descriptor.hpp	/^  Device *second_device;$/;"	m	class:final
second_driver	Device/Descriptor.hpp	/^  const DeviceRegister *second_driver;$/;"	m	class:final
second_font	Renderer/TwoTextRowsRenderer.hpp	/^  const Font *first_font, *second_font;$/;"	m	class:TwoTextRowsRenderer
second_y	Renderer/TwoTextRowsRenderer.hpp	/^  int x, first_y, second_y;$/;"	m	class:TwoTextRowsRenderer
secondary_device	NMEA/Info.hpp	/^  DeviceInfo secondary_device;$/;"	m	struct:NMEAInfo
secondary_info	Dialogs/Device/LX/ManageV7Dialog.cpp	/^  const DeviceInfo secondary_info;$/;"	m	class:final	file:
seconds	Math/Angle.hpp	/^    unsigned degrees, minutes, seconds;$/;"	m	struct:Angle::DMS
sector_angle	Engine/Task/ObservationZones/SymmetricSectorZone.hpp	/^  Angle sector_angle;$/;"	m	class:SymmetricSectorZone
sector_defaults	Engine/Task/TaskBehaviour.hpp	/^  SectorDefaults sector_defaults;$/;"	m	struct:TaskBehaviour
sector_end	Engine/Task/ObservationZones/SectorZone.hpp	/^  GeoPoint sector_end;$/;"	m	class:SectorZone
sector_start	Engine/Task/ObservationZones/SectorZone.hpp	/^  GeoPoint sector_start;$/;"	m	class:SectorZone
security	Device/Driver/LX/LXN.hpp	/^    const struct Security *security;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Security
security	Kobo/WPASupplicant.hpp	/^  enum WifiSecurity security;$/;"	m	struct:WifiVisibleNetwork	typeref:enum:WifiVisibleNetwork::WifiSecurity
security	Kobo/WifiDialog.cpp	/^    enum WifiSecurity security;$/;"	m	struct:final::NetworkInfo	typeref:enum:final::NetworkInfo::WifiSecurity	file:
security_7000	Device/Driver/LX/LXN.hpp	/^    const Security7000 *security_7000;$/;"	m	union:LXN::Packet
security_old	Device/Driver/LX/LXN.hpp	/^    const struct SecurityOld *security_old;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::SecurityOld
seek_	Terrain/jasper/jas_stream.h	/^	long (*seek_)(jas_stream_obj_t *obj, long offset, int origin);$/;"	m	struct:__anon119
seeks	zzip/plugin.h	/^    zzip_off_t   (*seeks)(int fd, zzip_off_t offset, int whence);$/;"	m	struct:zzip_plugin_io
seen_flying	Logger/FlightLogger.hpp	/^  bool seen_on_ground, seen_flying;$/;"	m	class:FlightLogger
seen_on_ground	Logger/FlightLogger.hpp	/^  bool seen_on_ground, seen_flying;$/;"	m	class:FlightLogger
segment_lengths	Topography/shapelib/mapserver.h	/^    double *segment_lengths;$/;"	m	struct:line_lengths
segments	Terrain/RasterTileCache.hpp	/^  StaticArray<MarkerSegmentInfo, 8192> segments;$/;"	m	class:RasterTileCache
segs	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seglist_t segs;$/;"	m	struct:__anon145
select	Dialogs/ProfileListDialog.cpp	/^  const bool select;$/;"	m	class:final	file:
select_button	Dialogs/Device/ScanBluetoothLeDialog.cpp	/^  Button *select_button;$/;"	m	class:final	file:
selected	Form/Button.hpp	/^  bool selected;$/;"	m	class:Button
selected	Look/DialogLook.hpp	/^    } selected;$/;"	m	struct:DialogLook::__anon20	typeref:struct:DialogLook::__anon20::__anon21
selected_airspace	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  const AbstractAirspace *selected_airspace;$/;"	m	class:final	file:
selected_index	Form/ButtonPanel.hpp	/^  int selected_index;$/;"	m	class:ButtonPanel
selection	Gauge/FlarmTrafficWindow.hpp	/^  int selection;$/;"	m	class:FlarmTrafficWindow
selection_brush	Look/FlarmTrafficLook.hpp	/^  Brush selection_brush;$/;"	m	struct:FlarmTrafficLook
selection_color	Look/FlarmTrafficLook.hpp	/^  Color selection_color;$/;"	m	struct:FlarmTrafficLook
selection_pen	Look/FlarmTrafficLook.hpp	/^  Pen selection_pen;$/;"	m	struct:FlarmTrafficLook
sender_endpoint	Tracking/SkyLines/Client.hpp	/^  boost::asio::ip::udp::endpoint sender_endpoint;$/;"	m	class:SkyLinesTracking::Client
sensor	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE sensor;$/;"	m	struct:IMI::TDeclarationHeader
sensor	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE sensor;$/;"	m	struct:IMI::TDeviceInfo
sensor0Offset	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISWORD sensor0Offset;$/;"	m	struct:IMI::TDeviceInfo
sensor8kOffset	Device/Driver/IMI/Protocol/Types.hpp	/^    IMISWORD sensor8kOffset;$/;"	m	struct:IMI::TDeviceInfo
sensor_calibration_available	NMEA/Info.hpp	/^  Validity sensor_calibration_available;$/;"	m	struct:NMEAInfo
sensor_calibration_factor	NMEA/Info.hpp	/^  double sensor_calibration_factor; \/\/ 0 is not a valid factor.$/;"	m	struct:NMEAInfo
sensor_calibration_offset	NMEA/Info.hpp	/^  double sensor_calibration_offset;$/;"	m	struct:NMEAInfo
sensor_factor	Device/Config.hpp	/^  double sensor_factor;$/;"	m	struct:DeviceConfig
sensor_offset	Device/Config.hpp	/^  double sensor_offset;$/;"	m	struct:DeviceConfig
sensors	Device/Driver/IMI/Protocol/IGC.cpp	/^static const IMI::IMICHAR *const sensors[] =$/;"	m	class:IMI	file:
sensors_cls	Android/InternalSensors.cpp	/^Java::TrivialClass InternalSensors::gps_cls, InternalSensors::sensors_cls;$/;"	m	class:InternalSensors	file:
sensors_cls	Android/InternalSensors.hpp	/^  static Java::TrivialClass gps_cls, sensors_cls;$/;"	m	class:InternalSensors
sensors_ctor_id	Android/InternalSensors.cpp	/^jmethodID InternalSensors::sensors_ctor_id;$/;"	m	class:InternalSensors	file:
sensors_ctor_id	Android/InternalSensors.hpp	/^  static jmethodID sensors_ctor_id;$/;"	m	class:InternalSensors
separator	Util/IterableSplitString.hxx	/^		value_type separator;$/;"	m	class:BasicIterableSplitString::final
separator	Util/IterableSplitString.hxx	/^	value_type separator;$/;"	m	class:BasicIterableSplitString
separator_height	MainWindow.cpp	/^static constexpr unsigned separator_height = 2;$/;"	v	file:
seqno	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t seqno;$/;"	m	struct:__anon174
sequence_number	Device/Driver/FLARM/BinaryProtocol.hpp	/^    PackedLE16 sequence_number;$/;"	m	struct:FLARM::FrameHeader
sequence_number	Device/Driver/FLARM/Device.hpp	/^  uint16_t sequence_number = 0;$/;"	m	class:FlarmDevice
serial	Airspace/AirspaceWarningCopy.hpp	/^  unsigned serial;$/;"	m	class:AirspaceWarningCopy
serial	Device/Driver/LX/LXN.hpp	/^    char serial[9];$/;"	m	struct:LXN::Serial
serial	Device/Driver/LX/LXN.hpp	/^    const struct Serial *serial;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Serial
serial	Dialogs/Task/Manager/TaskListPanel.cpp	/^  unsigned serial;$/;"	m	class:final	file:
serial	Engine/Airspace/AirspaceWarningManager.hpp	/^  unsigned serial;$/;"	m	class:AirspaceWarningManager
serial	Engine/Airspace/Airspaces.hpp	/^  Serial serial;$/;"	m	class:Airspaces
serial	Engine/Waypoint/Waypoints.hpp	/^  Serial serial;$/;"	m	class:Waypoints
serial	NMEA/DeviceInfo.hpp	/^  NarrowString<16> serial;$/;"	m	struct:DeviceInfo
serial	Terrain/RasterTileCache.hpp	/^  Serial serial;$/;"	m	class:RasterTileCache
serial	Topography/TopographyFile.hpp	/^  Serial serial;$/;"	m	class:TopographyFile
serial	Topography/TopographyStore.hpp	/^  unsigned serial;$/;"	m	class:TopographyStore
serial_port	Device/Port/TTYPort.hpp	/^  boost::asio::serial_port serial_port;$/;"	m	class:TTYPort
serno	Device/Driver/Volkslogger/vlconv.h	/^	unsigned int  serno; \/\/ FR serial number$/;"	m	struct:DIRENTRY
server	Cloud/Sender.hpp	/^  SkyLinesTracking::Server &server;$/;"	m	class:ThermalResponseSender
server	Cloud/Sender.hpp	/^  SkyLinesTracking::Server &server;$/;"	m	class:TrafficResponseSender
server	Tracking/LiveTrack24.cpp	/^  NarrowString<256> server;$/;"	m	namespace:LiveTrack24	file:
server	Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> server;$/;"	m	struct:LiveTrack24::Settings
server_list	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^static constexpr StaticEnumChoice server_list[] = {$/;"	v	file:
session	Net/HTTP/Request.hpp	/^    Session &session;$/;"	m	class:Net::Request
session	Net/HTTP/ToBuffer.hpp	/^    Session &session;$/;"	m	class:Net::DownloadToBufferJob
session	Net/HTTP/ToFile.hpp	/^    Session &session;$/;"	m	class:Net::DownloadToFileJob
session_id	Tracking/TrackingGlue.hpp	/^    LiveTrack24::SessionID session_id;$/;"	m	struct:final::LiveTrack24State
set	Geo/Boost/GeoPoint.hpp	/^  static inline void set(GeoPoint &p, double value) {$/;"	f	struct:boost::geometry::traits::access
setBaudRate	Android/PortBridge.hpp	/^  bool setBaudRate(JNIEnv *env, int baud_rate) {$/;"	f	class:PortBridge
setBaudRate_method	Android/PortBridge.cpp	/^jmethodID PortBridge::setBaudRate_method;$/;"	m	class:PortBridge	file:
setBaudRate_method	Android/PortBridge.hpp	/^  static jmethodID getBaudRate_method, setBaudRate_method;$/;"	m	class:PortBridge
setClip	Topography/shapelib/mapserver.h	/^    int (*setClip)(imageObj *img, rectObj clipRect);$/;"	m	struct:rendererVTableObj
setConnectTimeout	Java/URL.hxx	/^		static void setConnectTimeout(JNIEnv *env, jobject connection,$/;"	f	class:Java::URLConnection
setConnectTimeout_method	Java/URL.cxx	/^jmethodID Java::URLConnection::setConnectTimeout_method;$/;"	m	class:Java::URLConnection	file:
setConnectTimeout_method	Java/URL.hxx	/^		static jmethodID setConnectTimeout_method;$/;"	m	class:Java::URLConnection
setInputListener	Android/PortBridge.cpp	/^PortBridge::setInputListener(JNIEnv *env, DataHandler *handler)$/;"	f	class:PortBridge
setInputListener_method	Android/PortBridge.cpp	/^jmethodID PortBridge::setInputListener_method;$/;"	m	class:PortBridge	file:
setInputListener_method	Android/PortBridge.hpp	/^  static jmethodID setInputListener_method;$/;"	m	class:PortBridge
setListener	Android/PortBridge.cpp	/^PortBridge::setListener(JNIEnv *env, PortListener *_listener)$/;"	f	class:PortBridge
setListener_method	Android/PortBridge.cpp	/^jmethodID PortBridge::setListener_method;$/;"	m	class:PortBridge	file:
setListener_method	Android/PortBridge.hpp	/^  static jmethodID setListener_method;$/;"	m	class:PortBridge
setMode	Input/InputEvents.cpp	/^InputEvents::setMode(Mode mode)$/;"	f	class:InputEvents
setMode	Input/InputEvents.cpp	/^InputEvents::setMode(const TCHAR *mode)$/;"	f	class:InputEvents
setReadTimeout	Java/URL.hxx	/^		static void setReadTimeout(JNIEnv *env, jobject connection,$/;"	f	class:Java::URLConnection
setReadTimeout_method	Java/URL.cxx	/^jmethodID Java::URLConnection::setReadTimeout_method;$/;"	m	class:Java::URLConnection	file:
setReadTimeout_method	Java/URL.hxx	/^		static jmethodID setReadTimeout_method;$/;"	m	class:Java::URLConnection
setRequestedOrientation	Android/NativeView.hpp	/^  bool setRequestedOrientation(ScreenOrientation so) {$/;"	f	class:NativeView
setRequestedOrientationID	Android/NativeView.cpp	/^jmethodID NativeView::setRequestedOrientationID;$/;"	m	class:NativeView	file:
setRequestedOrientationID	Android/NativeView.hpp	/^  static jmethodID setRequestedOrientationID;$/;"	m	class:NativeView
set_active_freq	InfoBoxes/Panel/RadioEdit.cpp	/^  bool set_active_freq;$/;"	m	class:final	file:
set_cruise_efficiency	Engine/Task/Solvers/TaskMacCready.hpp	/^  void set_cruise_efficiency(double ce) {$/;"	f	class:TaskMacCready
set_depth	Engine/Route/ReachFanParms.hpp	/^  unsigned char set_depth = 0;$/;"	m	struct:ReachFanParms
set_mc	Engine/Task/Solvers/TaskMacCready.hpp	/^  void set_mc(double mc) {$/;"	f	class:TaskMacCready
set_range	Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::set_range(const double tp, const bool force_current)$/;"	f	class:TaskMacCreadyRemaining
set_range	Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::set_range(const double p)$/;"	f	class:TaskMinTarget
set_system_time_from_gps	Computer/Settings.hpp	/^  bool set_system_time_from_gps;$/;"	m	struct:ComputerSettings
set_terrain	Computer/RouteComputer.cpp	/^RouteComputer::set_terrain(const RasterTerrain* _terrain) {$/;"	f	class:RouteComputer
set_tp_search_achieved	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::set_tp_search_achieved(unsigned tp, const SearchPoint &sol)$/;"	f	class:OrderedTask
set_way_points	Renderer/WaypointRenderer.hpp	/^  void set_way_points(const Waypoints *_way_points) {$/;"	f	class:WaypointRenderer
settings	CrossSection/AirspaceXSRenderer.cpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:final	file:
settings	CrossSection/AirspaceXSRenderer.hpp	/^  AirspaceRendererSettings settings;$/;"	m	class:AirspaceXSRenderer
settings	Device/Driver/BlueFly/Internal.hpp	/^  BlueFlySettings settings;$/;"	m	class:BlueFlyDevice
settings	Device/Driver/FLARM/Device.hpp	/^  DeviceSettingsMap<std::string> settings;$/;"	m	class:FlarmDevice
settings	Device/Driver/Vega/Internal.hpp	/^  DeviceSettingsMap<int> settings;$/;"	m	class:VegaDevice
settings	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  AirspaceClassRendererSettings settings;$/;"	m	class:AirspaceClassRendererSettingsPanel
settings	Dialogs/MapItemListDialog.cpp	/^  const MapSettings &settings;$/;"	m	class:final	file:
settings	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageSettings settings;$/;"	m	class:PageListWidget	file:
settings	Engine/GlideSolvers/MacCready.hpp	/^  gcc_unused_field const GlideSettings &settings;$/;"	m	class:MacCready
settings	Engine/Task/Solvers/TaskMacCready.hpp	/^  const GlideSettings &settings;$/;"	m	class:TaskMacCready
settings	Gauge/FlarmTrafficWindow.hpp	/^  TeamCodeSettings settings;$/;"	m	class:FlarmTrafficWindow
settings	InfoBoxes/InfoBoxWindow.hpp	/^  const InfoBoxSettings &settings;$/;"	m	class:InfoBoxWindow
settings	MapWindow/StencilMapCanvas.hpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:StencilMapCanvas
settings	NMEA/Info.hpp	/^  ExternalSettings settings;$/;"	m	struct:NMEAInfo
settings	PopupMessage.hpp	/^  const UISettings &settings;$/;"	m	class:PopupMessage
settings	Renderer/AirspaceRendererGL.cpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:final	file:
settings	Renderer/AirspaceRendererOther.cpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:final	file:
settings	Renderer/MapItemListRenderer.hpp	/^  const MapSettings &settings;$/;"	m	class:MapItemListRenderer
settings	Renderer/OZRenderer.hpp	/^  const AirspaceRendererSettings &settings;$/;"	m	class:OZRenderer
settings	Renderer/WaypointIconRenderer.hpp	/^  const WaypointRendererSettings &settings;$/;"	m	class:WaypointIconRenderer
settings	Renderer/WaypointRenderer.cpp	/^  const WaypointRendererSettings &settings;$/;"	m	class:final	file:
settings	Terrain/TerrainRenderer.hpp	/^  struct TerrainRendererSettings settings;$/;"	m	class:TerrainRenderer	typeref:struct:TerrainRenderer::TerrainRendererSettings
settings	Tracking/TrackingGlue.hpp	/^  TrackingSettings settings;$/;"	m	class:final
settings_button	Dialogs/MapItemListDialog.cpp	/^  Button *settings_button, *details_button, *cancel_button, *goto_button;$/;"	m	class:final	file:
settings_computer	CalculationThread.hpp	/^  ComputerSettings settings_computer;$/;"	m	class:final
settings_cond	Device/Driver/BlueFly/Internal.hpp	/^  Cond settings_cond;$/;"	m	class:BlueFlyDevice
settings_funcs	Lua/Logger.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	Lua/Replay.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	Lua/Settings.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	Lua/Tracking.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_funcs	Lua/Wind.cpp	/^static constexpr struct luaL_Reg settings_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
settings_keys	Device/Driver/BlueFly/Internal.hpp	/^  char *settings_keys;$/;"	m	class:BlueFlyDevice
settings_map	Blackboard/MapSettingsBlackboard.hpp	/^  MapSettings settings_map;$/;"	m	class:MapSettingsBlackboard
settings_ready	Device/Driver/BlueFly/Internal.hpp	/^  bool settings_ready;$/;"	m	class:BlueFlyDevice
settings_received	Device/Descriptor.hpp	/^  ExternalSettings settings_received;$/;"	m	class:final
settings_sent	Device/Descriptor.hpp	/^  ExternalSettings settings_sent;$/;"	m	class:final
setup_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage setup_pages[] = {$/;"	v	file:
severity	FLARM/Error.hpp	/^  Severity severity;$/;"	v
severity_strings	FLARM/Error.cpp	/^static const TCHAR *const severity_strings[] = {$/;"	v	file:
sfile_close	Terrain/jasper/base/jas_stream.c	/^static int sfile_close(jas_stream_obj_t *obj)$/;"	f	file:
sfile_read	Terrain/jasper/base/jas_stream.c	/^static int sfile_read(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
sfile_seek	Terrain/jasper/base/jas_stream.c	/^static long sfile_seek(jas_stream_obj_t *obj, long offset, int origin)$/;"	f	file:
sfile_write	Terrain/jasper/base/jas_stream.c	/^static int sfile_write(jas_stream_obj_t *obj, char *buf, unsigned cnt)$/;"	f	file:
sgn	Geo/Flat/FlatRay.cpp	28;"	d	file:
sgnd	Terrain/jasper/jas_cm.h	/^	int sgnd;$/;"	m	struct:__anon94
sgnd	Terrain/jasper/jas_image.h	/^	int sgnd;$/;"	m	struct:__anon125
sgnd	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t sgnd;$/;"	m	struct:__anon159
sgnd	Terrain/jasper/jpc/jpc_dec.h	/^	bool sgnd;$/;"	m	struct:__anon151
sgnd_	Terrain/jasper/jas_image.h	/^	int sgnd_;$/;"	m	struct:__anon123
sha256	Net/HTTP/ToFile.cpp	/^  SHA256State sha256;$/;"	m	class:final	file:
sha256	Net/HTTP/ToFile.hpp	/^    std::array<std::byte, 32> sha256;$/;"	m	class:Net::DownloadToFileJob
sha256_hash	Repository/AvailableFile.hpp	/^  std::array<std::byte, 32> sha256_hash;$/;"	m	struct:AvailableFile
shading_angle	Renderer/BackgroundRenderer.hpp	/^  Angle shading_angle = DEFAULT_SHADING_ANGLE;$/;"	m	class:BackgroundRenderer
shadowcolor	Topography/shapelib/mapserver.h	/^    colorObj shadowcolor;$/;"	m	struct:labelObj
shadowsizex	Topography/shapelib/mapserver.h	/^    int shadowsizex, shadowsizey;$/;"	m	struct:labelObj
shadowsizey	Topography/shapelib/mapserver.h	/^    int shadowsizex, shadowsizey;$/;"	m	struct:labelObj
shape	Device/Declaration.hpp	/^    Shape shape;$/;"	m	struct:Declaration::TurnPoint
shape	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  PolarShape shape;$/;"	m	class:PolarShapeEditWidget
shape	Engine/Airspace/AbstractAirspace.hpp	/^  const Shape shape;$/;"	m	class:AbstractAirspace
shape	Engine/Task/ObservationZones/ObservationZone.hpp	/^  const Shape shape;$/;"	m	class:ObservationZone
shape	Polar/Polar.hpp	/^  PolarShape shape;$/;"	m	struct:PolarInfo
shape	Renderer/TextInBox.hpp	/^  LabelShape shape = LabelShape::SIMPLE;$/;"	v
shape	Topography/TopographyFile.hpp	/^    const XShape *shape;$/;"	m	struct:TopographyFile::ShapeList
shape	Topography/shapelib/mapserver.h	/^    shapeObj *shape; \/* by shape & operator (OGC filter) *\/$/;"	m	struct:__anon40
shape	Topography/shapelib/mapserver.h	/^    shapeObj *shape; \/* for vector layers *\/$/;"	m	struct:__anon36
shape	Topography/shapelib/mapserver.h	/^    shapeObj shape;$/;"	m	struct:listNode
shape	Topography/shapelib/mapserver.h	/^    shapeObj* shape;$/;"	m	struct:__anon50
shapeObj	Topography/shapelib/mapprimitive.h	/^} shapeObj;$/;"	t	typeref:struct:__anon79
shape_renderer	Topography/TopographyFileRenderer.hpp	/^  mutable ShapeRenderer shape_renderer;$/;"	m	class:final
shape_tree_node	Topography/shapelib/maptree.h	/^  typedef struct shape_tree_node {$/;"	s
shapefileObj	Topography/shapelib/mapshape.h	/^  } shapefileObj;$/;"	t	typeref:struct:__anon85
shapeindex	Topography/shapelib/mapserver.h	/^    long shapeindex; \/* by index *\/$/;"	m	struct:__anon40
shapeindex	Topography/shapelib/mapserver.h	/^    long shapeindex;$/;"	m	struct:__anon50
shapepath	Topography/shapelib/mapserver.h	/^    char *shapepath; \/* where are the shape files located *\/$/;"	m	struct:mapObj
shapes	Topography/TopographyFile.hpp	/^  AllocatedArray<ShapeList> shapes;$/;"	m	class:TopographyFile
shapetype	Topography/shapelib/mapserver.h	/^    int shapetype; \/* source geometry type, can be removed once annotation layers are dropped *\/$/;"	m	struct:__anon46
shaplut	Terrain/jasper/jas_cm.h	/^		jas_cmshaplut_t shaplut;$/;"	m	union:jas_cmpxform_s::__anon101
shapmat	Terrain/jasper/jas_cm.h	/^		jas_cmshapmat_t shapmat;$/;"	m	union:jas_cmpxform_s::__anon101
shell	Event/Poll/WaylandQueue.hpp	/^  struct wl_shell *shell = nullptr;$/;"	m	class:final	typeref:struct:final::wl_shell
shell_surface_listener	Screen/Wayland/TopWindow.cpp	/^static constexpr struct wl_shell_surface_listener shell_surface_listener = {$/;"	v	typeref:struct:wl_shell_surface_listener	file:
shift	Util/OverwritingRingBuffer.hpp	/^  const T &shift() {$/;"	f	class:TrivialOverwritingRingBuffer
shift_bias_list	Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp	/^static constexpr StaticEnumChoice shift_bias_list[] = {$/;"	v	file:
shift_button	Widget/KeyboardWidget.hpp	/^  Button shift_button;$/;"	m	class:KeyboardWidget
shift_state	Widget/KeyboardWidget.hpp	/^  bool shift_state;$/;"	m	class:KeyboardWidget
shortest_max	Engine/Contest/Solvers/TriangleContest.hpp	/^    unsigned shortest_max, longest_min, longest_max;$/;"	m	struct:TriangleContest::CandidateSet
shortname	Engine/Waypoint/Waypoint.hpp	/^  tstring shortname;$/;"	m	struct:Waypoint
show_average	Gauge/VarioSettings.hpp	/^  bool show_average;$/;"	m	struct:VarioSettings
show_average_needle	Gauge/VarioSettings.hpp	/^  bool show_average_needle;$/;"	m	struct:VarioSettings
show_ballast	Gauge/VarioSettings.hpp	/^  bool show_ballast;$/;"	m	struct:VarioSettings
show_bugs	Gauge/VarioSettings.hpp	/^  bool show_bugs;$/;"	m	struct:VarioSettings
show_down	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool show_edit, show_mutate, show_down, show_up, show_reverse;$/;"	m	class:final	file:
show_edit	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool show_edit, show_mutate, show_down, show_up, show_reverse;$/;"	m	class:final	file:
show_fai_triangle_areas	MapSettings.hpp	/^  bool show_fai_triangle_areas;$/;"	m	struct:MapSettings
show_final_glide_altitude_difference	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t show_final_glide_altitude_difference;$/;"	m	struct:CAI302::Pilot
show_flarm_alarm_level	MapSettings.hpp	/^  bool show_flarm_alarm_level;$/;"	m	struct:MapSettings
show_flarm_on_map	MapSettings.hpp	/^  bool show_flarm_on_map;$/;"	m	struct:MapSettings
show_gross	Gauge/VarioSettings.hpp	/^  bool show_gross;$/;"	m	struct:VarioSettings
show_mc	Gauge/VarioSettings.hpp	/^  bool show_mc;$/;"	m	struct:VarioSettings
show_menu_button	MainWindow.hpp	/^  ShowMenuButton *show_menu_button = nullptr;$/;"	m	class:MainWindow
show_menu_button	UISettings.hpp	/^  bool show_menu_button;$/;"	m	struct:UISettings
show_mutate	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool show_edit, show_mutate, show_down, show_up, show_reverse;$/;"	m	class:final	file:
show_reverse	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool show_edit, show_mutate, show_down, show_up, show_reverse;$/;"	m	class:final	file:
show_shift_button	Widget/KeyboardWidget.hpp	/^  const bool show_shift_button;$/;"	m	class:KeyboardWidget
show_speed_to_fly	Gauge/VarioSettings.hpp	/^  bool show_speed_to_fly;$/;"	m	struct:VarioSettings
show_thermal_average_needle	Gauge/VarioSettings.hpp	/^  bool show_thermal_average_needle;$/;"	m	struct:VarioSettings
show_thermal_profile	MapSettings.hpp	/^  bool show_thermal_profile;$/;"	m	struct:MapSettings
show_thermals	Tracking/SkyLines/CloudSettings.hpp	/^  bool show_thermals;$/;"	m	struct:SkyLinesTracking::CloudSettings
show_up	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool show_edit, show_mutate, show_down, show_up, show_reverse;$/;"	m	class:final	file:
shown	Widget/RowFormWidget.hpp	/^    bool initialised, prepared, shown;$/;"	m	struct:RowFormWidget::Row
shpfile	Topography/shapelib/mapshape.h	/^    shapefileObj *shpfile;$/;"	m	struct:__anon86
shpval	Topography/shapelib/mapserver.h	/^    shapeObj *shpval;$/;"	m	union:__anon33
shpval	Topography/shapelib/mapserver.h	/^    shapeObj *shpval;$/;"	m	union:__anon34
shrink	Util/TrivialArray.hxx	/^	void shrink(size_type _size) {$/;"	f	class:TrivialArray
shrink_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^    PixelRect magnify_button, shrink_button;$/;"	m	struct:final::Layout	file:
shrink_button	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  Button magnify_button, shrink_button;$/;"	m	class:final	file:
shutdown	Android/IOIOHelper.hpp	/^  void shutdown(JNIEnv *env) {$/;"	f	class:IOIOHelper
shutdown_method	Android/IOIOHelper.cpp	/^  IOIOHelper::shutdown_method;$/;"	m	class:IOIOHelper	file:
shutdown_method	Android/IOIOHelper.hpp	/^  static jmethodID shutdown_method;$/;"	m	class:IOIOHelper
siblings	Screen/Window.hpp	/^  SiblingsHook siblings;$/;"	m	class:Window
side_display_type	Gauge/FlarmTrafficWindow.hpp	/^  } side_display_type;$/;"	m	class:FlarmTrafficWindow	typeref:enum:FlarmTrafficWindow::SideInfoType
side_info_font	Look/FlarmTrafficLook.hpp	/^  Font label_font, side_info_font, no_traffic_font;$/;"	m	struct:FlarmTrafficLook
sign	Device/Driver/IMI/Protocol/Conversion.hpp	/^        IMIDWORD sign :1;$/;"	m	struct:IMI::AngleConverter::__anon199::__anon200
signal_level	Kobo/WPASupplicant.hpp	/^  unsigned signal_level;$/;"	m	struct:WifiVisibleNetwork
signal_level	Kobo/WifiDialog.cpp	/^    int signal_level;$/;"	m	struct:final::NetworkInfo	file:
signature	Device/Driver/CAI302/Protocol.hpp	/^    char signature[201];$/;"	m	struct:CAI302::FileSignatureASCII
signature	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE signature[IMIRSA_MAX_BITS \/ 8];$/;"	m	struct:IMI::Signature
signature	Device/Driver/IMI/Protocol/Types.hpp	/^    Signature signature;$/;"	m	struct:IMI::Flight
signature	Topography/shapelib/maptree.h	/^    char        signature[3];$/;"	m	struct:__anon88
silence_count	Audio/VarioSynthesiser.hpp	/^  size_t silence_count;$/;"	m	class:final
silence_remaining	Audio/VarioSynthesiser.hpp	/^  size_t audible_remaining, silence_remaining;$/;"	m	class:final
sim_bitmap	Dialogs/SimulatorPromptWindow.hpp	/^  Bitmap fly_bitmap, sim_bitmap;$/;"	m	class:final
sim_button	Dialogs/SimulatorPromptWindow.hpp	/^  Button fly_button, sim_button;$/;"	m	class:final
sim_set_in_cmd_line_flag	Simulator.cpp	/^bool sim_set_in_cmd_line_flag;$/;"	v
simple_bounds	MapWindow/OverlayBitmap.hpp	/^  GeoBounds simple_bounds;$/;"	m	class:final
simulator	Blackboard/DeviceBlackboard.hpp	/^  Simulator simulator;$/;"	m	class:DeviceBlackboard
simulator	Logger/LoggerImpl.hpp	/^  bool simulator;$/;"	m	class:LoggerImpl
simulator	NMEA/GPSState.hpp	/^  bool simulator;$/;"	m	struct:GPSState
simulator_data	Blackboard/DeviceBlackboard.hpp	/^  NMEAInfo simulator_data;$/;"	m	class:DeviceBlackboard
sin	Math/Angle.hpp	/^  inline double sin() const {$/;"	f	class:Angle
sin_cos	Math/Trig.hpp	/^sin_cos(const double thetha)$/;"	f
sink_brush	Look/VarioLook.hpp	/^  Brush sink_brush, lift_brush;$/;"	m	struct:VarioLook
sink_color	Look/VarioLook.hpp	/^  Color sink_color, lift_color;$/;"	m	struct:VarioLook
sink_factor	Replay/TaskAutoPilot.hpp	/^  double sink_factor;$/;"	m	struct:AutopilotParameters
sink_rate	NMEA/VarioInfo.hpp	/^  double sink_rate;$/;"	m	struct:VarioInfo
sink_tone	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t sink_tone;$/;"	m	struct:CAI302::Pilot
sinking_altitude	Computer/FlyingComputer.hpp	/^  double sinking_altitude;$/;"	m	class:FlyingComputer
sinking_clock	Computer/WaveComputer.hpp	/^  StateClock<20, 5> sinking_clock;$/;"	m	class:WaveComputer
sinking_location	Computer/FlyingComputer.hpp	/^  GeoPoint sinking_location;$/;"	m	class:FlyingComputer
sinking_since	Computer/FlyingComputer.hpp	/^  double sinking_since;$/;"	m	class:FlyingComputer
sint	Math/FastRotation.hpp	/^  const int cost, sint, y_cost, y_sint;$/;"	m	class:FastRowRotation
sint	Math/FastRotation.hpp	/^  double cost, sint;$/;"	m	class:FastRotation
sint	Math/FastRotation.hpp	/^  int cost, sint;$/;"	m	class:FastIntegerRotation
sis_at	Engine/Contest/ContestManager.hpp	/^  OLCSISAT sis_at;$/;"	m	class:ContestManager
sit	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR sit[IMIDECL_SIT_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
siu	Device/Driver/IMI/Protocol/IGC.cpp	/^static unsigned siu = 0;$/;"	v	file:
siu	IGC/IGCFix.hpp	/^  int16_t siu;$/;"	m	struct:IGCFix
siz	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_siz_t siz;$/;"	m	union:__anon178
size	Computer/GlideRatioCalculator.hpp	/^  unsigned short size;$/;"	m	class:GlideRatioCalculator
size	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t size;$/;"	m	struct:CAI302::FileSignatureASCII
size	Dialogs/FileManager.cpp	/^    StaticString<32u> size;$/;"	m	struct:ManagedFileListWidget::FileItem	file:
size	Dialogs/FileManager.cpp	/^    int64_t size, position;$/;"	m	struct:ManagedFileListWidget::DownloadStatus	file:
size	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  mutable PixelSize size;$/;"	m	class:TaskMapButtonRenderer
size	Engine/Airspace/AirspaceWarningManager.hpp	/^  AirspaceWarningList::size_type size() const {$/;"	f	class:AirspaceWarningManager
size	Engine/ThermalBand/ThermalBand.hpp	/^     unsigned size() const {$/;"	f	class:ThermalBand
size	Engine/Trace/Trace.hpp	/^  unsigned size() const {$/;"	f	class:Trace
size	Engine/Waypoint/Waypoints.hpp	/^  unsigned size() const {$/;"	f	class:Waypoints
size	Form/DataField/ComboList.hpp	/^  unsigned size() const {$/;"	f	class:ComboList
size	Form/DataField/File.cpp	/^FileDataField::size() const$/;"	f	class:FileDataField
size	Geo/ConvexHull/GrahamScan.hpp	/^  const unsigned size;$/;"	m	class:GrahamScan
size	IO/FileCache.cpp	/^  uint64_t size;$/;"	m	struct:FileInfo	file:
size	Language/LanguageGlue.hpp	/^  const size_t size;$/;"	m	struct:BuiltinLanguage
size	Language/MOFile.hpp	/^  size_t size;$/;"	m	class:MOFile
size	MapWindow/MapWindowGlideRange.cpp	/^  ProjectedFanVector::size_type size() const {$/;"	f	struct:ProjectedFans
size	MapWindow/MapWindowGlideRange.cpp	/^  unsigned size;$/;"	m	struct:ProjectedFan	file:
size	Net/AllocatedSocketAddress.hxx	/^		:address(src.address), size(src.size) {$/;"	f	class:AllocatedSocketAddress
size	Net/AllocatedSocketAddress.hxx	/^	size_type size = 0;$/;"	m	class:AllocatedSocketAddress
size	Net/Option.hpp	/^  size_t size(const Protocol& p) const {$/;"	f	class:SendTimeoutS
size	Net/SocketAddress.hxx	/^		:address(_address), size(_size) {}$/;"	f	class:SocketAddress
size	Net/SocketAddress.hxx	/^	size_type size;$/;"	m	class:SocketAddress
size	Net/StaticSocketAddress.hxx	/^	size_type size;$/;"	m	class:StaticSocketAddress
size	OS/FileMapping.hpp	/^  size_t size() const {$/;"	f	class:FileMapping
size	Replay/TaskAccessor.hpp	/^  unsigned size() const {$/;"	f	class:TaskAccessor
size	Screen/Bitmap.hpp	/^  PixelSize size;$/;"	m	class:final
size	Screen/GDI/Canvas.hpp	/^  PixelSize size;$/;"	m	class:Canvas
size	Screen/Icon.hpp	/^  PixelSize size;$/;"	m	class:MaskedIcon
size	Screen/OpenGL/Canvas.hpp	/^  PixelSize size = {0, 0};$/;"	m	class:Canvas
size	Screen/OpenGL/Texture.hpp	/^  PixelSize size;$/;"	m	class:GLTexture
size	Screen/Window.hpp	/^  PixelSize size = {0, 0};$/;"	m	class:Window
size	Terrain/ScanLine.cpp	/^  unsigned size;$/;"	m	struct:GridRay	file:
size	Terrain/jasper/base/jas_malloc.c	/^	size_t size;$/;"	m	struct:__anon195	file:
size	Terrain/jasper/jas_cm.h	/^	int size;$/;"	m	struct:__anon97
size	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t size; \/* profile size *\/$/;"	m	struct:__anon189
size	Topography/TopographyStore.hpp	/^  unsigned size() const {$/;"	f	class:TopographyStore
size	Topography/shapelib/mapprimitive.h	/^  int size;$/;"	m	struct:__anon80
size	Topography/shapelib/mapserver.h	/^    double size;$/;"	m	struct:__anon71
size	Topography/shapelib/mapserver.h	/^    double size;$/;"	m	struct:styleObj
size	Topography/shapelib/mapserver.h	/^    int size;$/;"	m	struct:imageObj
size	Topography/shapelib/mapserver.h	/^    int size;$/;"	m	struct:labelObj
size	Topography/shapelib/mapserver.h	/^    size_t size;$/;"	m	struct:_autobuffer
size	Util/ConstBuffer.hxx	/^		:data(_data), size(_size) {}$/;"	f	struct:ConstBuffer
size	Util/ConstBuffer.hxx	/^	size_type size;$/;"	m	struct:ConstBuffer
size	Util/QuadTree.hxx	/^		unsigned size;$/;"	m	struct:LeafList
size	Util/StringView.hxx	/^		:ConstBuffer<T>(src.data(), src.size()) {}$/;"	f	struct:BasicStringView
size	Util/TrivialArray.hxx	/^	size_type size() const {$/;"	f	class:TrivialArray
size	Util/WritableBuffer.hxx	/^		:data(_data), size(_size) {}$/;"	f	struct:WritableBuffer
size	Util/WritableBuffer.hxx	/^	size_type size;$/;"	m	struct:WritableBuffer
size_cache	Screen/Custom/Cache.cpp	/^static Cache<TextCacheKey, PixelSize, 1024u, 701u, TextCacheKey::Hash> size_cache;$/;"	v	file:
size_type	Net/AllocatedSocketAddress.hxx	/^	typedef SocketAddress::size_type size_type;$/;"	t	class:AllocatedSocketAddress
size_type	Net/SocketAddress.hxx	/^	typedef int size_type;$/;"	t	class:SocketAddress
size_type	Net/StaticSocketAddress.hxx	/^	typedef SocketAddress::size_type size_type;$/;"	t	class:StaticSocketAddress
size_type	Util/ConstBuffer.hxx	/^	typedef std::size_t size_type;$/;"	t	struct:ConstBuffer
size_type	Util/ReservablePriorityQueue.hpp	/^  typedef typename std::priority_queue<T, Container, Compare>::size_type size_type;$/;"	t	class:reservable_priority_queue
size_type	Util/ReusableArray.hpp	/^  typedef typename AllocatedArray<T>::size_type size_type;$/;"	t	class:ReusableArray
size_type	Util/SliceAllocator.hxx	/^	typedef size_t size_type;$/;"	t	class:GlobalSliceAllocator
size_type	Util/SliceAllocator.hxx	/^	typedef std::size_t size_type;$/;"	t	class:SliceAllocator
size_type	Util/StringBuilder.hxx	/^	typedef size_t size_type;$/;"	t	class:StringBuilder
size_type	Util/StringParser.hxx	/^	typedef size_t size_type;$/;"	t	class:StringParser
size_type	Util/TrivialArray.hxx	/^	typedef typename Array::size_type size_type;$/;"	t	class:TrivialArray
size_type	Util/WritableBuffer.hxx	/^	typedef std::size_t size_type;$/;"	t	struct:WritableBuffer
sizeof	OS/ByteOrder.hpp	/^static_assert(sizeof(PackedBE16) == sizeof(uint16_t), "Wrong size");$/;"	v
sizeof	OS/ByteOrder.hpp	/^static_assert(sizeof(PackedLE16) == sizeof(uint16_t), "Wrong size");$/;"	v
sizeof	Screen/Memory/PixelTraits.hpp	/^  static_assert(sizeof(color_type) == sizeof(integer_type),$/;"	m	struct:BGRAPixelTraits
sizeunits	Topography/shapelib/mapserver.h	/^    int sizeunits; \/* applies to all classes *\/$/;"	m	struct:layerObj
sky_brush	Look/HorizonLook.hpp	/^  Brush sky_brush;$/;"	m	struct:HorizonLook
sky_color	Look/CrossSectionLook.hpp	/^  Color sky_color;$/;"	m	struct:CrossSectionLook
sky_color	Look/HorizonLook.hpp	/^  Color sky_color;$/;"	m	struct:HorizonLook
sky_pen	Look/HorizonLook.hpp	/^  Pen sky_pen;$/;"	m	struct:HorizonLook
skylines	Tracking/TrackingGlue.hpp	/^  SkyLinesTracking::Glue skylines;$/;"	m	class:final
skylines	Tracking/TrackingSettings.hpp	/^  SkyLinesTracking::Settings skylines;$/;"	m	struct:TrackingSettings
skylines_data	MapWindow/MapWindow.hpp	/^  const SkyLinesTracking::Data *skylines_data = nullptr;$/;"	m	class:MapWindow
skylines_data	Tracking/TrackingGlue.hpp	/^  SkyLinesTracking::Data skylines_data;$/;"	m	class:final
skylines_id	Dialogs/Traffic/TrafficList.cpp	/^    uint32_t skylines_id = 0;$/;"	m	struct:TrafficListWidget::Item	file:
skylines_map_mode_list	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice skylines_map_mode_list[] = {$/;"	v	file:
skylines_traffic_map_mode	MapSettings.hpp	/^  DisplaySkyLinesTrafficMapMode skylines_traffic_map_mode;$/;"	m	struct:MapSettings
slayer	Topography/shapelib/mapserver.h	/^    int slayer; \/* selection layer, used for msQueryByFeatures() (note this is not a query mode per se) *\/$/;"	m	struct:__anon40
slices	Engine/ThermalBand/ThermalBand.hpp	/^     TrivialArray<ThermalSlice, NUM_SLICES> slices;$/;"	m	class:ThermalBand
slope	Topography/shapelib/mapsearch.c	377;"	d	file:
slope_shading	Terrain/TerrainSettings.hpp	/^  SlopeShading slope_shading;$/;"	m	struct:TerrainRendererSettings
slopek	Screen/FB/mxcfb.h	/^	int slopek[16];$/;"	m	struct:mxcfb_gamma
slots	Math/XYDataStore.hpp	/^  TrivialArray<Slot, 1000> slots;$/;"	m	class:XYDataStore
slots	Topography/shapelib/mapserver.h	/^    labelCacheSlotObj slots[MS_MAX_LABEL_PRIORITY];$/;"	m	struct:__anon49
slowness	Engine/Route/RoutePolar.hpp	/^    double slowness;$/;"	m	struct:RoutePolar::RoutePolarPoint
small	Gauge/FlarmTrafficWindow.hpp	/^  bool small;$/;"	m	class:FlarmTrafficWindow
small	Gauge/ThermalAssistantRenderer.hpp	/^  bool small;$/;"	m	class:ThermalAssistantRenderer
small_circle_buffer	Screen/OpenGL/Shapes.cpp	/^  GLArrayBuffer *circle_buffer, *small_circle_buffer;$/;"	m	namespace:OpenGL	file:
small_font	Look/DialogLook.hpp	/^  Font text_font, bold_font, small_font;$/;"	m	struct:DialogLook
small_icon	Look/WaypointLook.hpp	/^  MaskedIcon small_icon, turn_point_icon, task_turn_point_icon;$/;"	m	struct:WaypointLook
small_icons	Renderer/WaypointIconRenderer.hpp	/^  bool small_icons;$/;"	m	class:WaypointIconRenderer
small_scale	Screen/Layout.cpp	/^  unsigned small_scale = 1024;$/;"	m	namespace:Layout	file:
small_value_font	Look/InfoBoxLook.hpp	/^  Font value_font, small_value_font;$/;"	m	struct:InfoBoxLook
smpltype	Terrain/jasper/jas_image.h	/^	int smpltype;$/;"	m	struct:__anon125
smpltype_	Terrain/jasper/jas_image.h	/^	int smpltype_;$/;"	m	struct:__anon123
sn	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD sn;$/;"	m	struct:IMI::FlightInfo
sn	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD sn;$/;"	m	struct:IMI::TDeclarationHeader
sn	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD sn;$/;"	m	struct:IMI::TMsg
snDigits	Device/Driver/IMI/Protocol/IGC.cpp	/^static constexpr IMI::IMICHAR snDigits[] = "0123456789ABCDEFHJKLMNPRSTUVWXYZ";$/;"	v	file:
snprintf	Topography/shapelib/mapserver.h	183;"	d
soc	Terrain/jasper/jpc/jpc_cs.h	/^	int soc;	\/* unused *\/$/;"	m	union:__anon178
socket	Device/Port/TCPClientPort.hpp	/^  boost::asio::ip::tcp::socket socket;$/;"	m	class:final
socket	Device/Port/UDPPort.hpp	/^  boost::asio::ip::udp::socket socket;$/;"	m	class:final
socket	Tracking/SkyLines/Client.hpp	/^  boost::asio::ip::udp::socket socket;$/;"	m	class:SkyLinesTracking::Client
socket	Tracking/SkyLines/Server.hpp	/^  boost::asio::ip::udp::socket socket;$/;"	m	class:SkyLinesTracking::Server
sod	Terrain/jasper/jpc/jpc_cs.h	/^	int sod;	\/* unused *\/$/;"	m	union:__anon178
software	Device/Driver/LX/LXN.hpp	/^    uint8_t hardware, software;$/;"	m	struct:LXN::Version
software_version	FLARM/Version.hpp	/^  NarrowString<7> hardware_version, software_version;$/;"	m	struct:FlarmVersion
software_version	NMEA/DeviceInfo.hpp	/^  NarrowString<16> software_version;$/;"	m	struct:DeviceInfo
solid_brush	Look/AirspaceLook.hpp	/^  Brush solid_brush;$/;"	m	struct:AirspaceClassLook
solid_fragment_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char solid_fragment_shader[] =$/;"	v	file:
solid_modelview	Screen/OpenGL/Shaders.cpp	/^  GLint solid_projection, solid_modelview;$/;"	m	namespace:OpenGL	file:
solid_projection	Screen/OpenGL/Shaders.cpp	/^  GLint solid_projection, solid_modelview;$/;"	m	namespace:OpenGL	file:
solid_shader	Screen/OpenGL/Shaders.cpp	/^  GLProgram *solid_shader;$/;"	m	namespace:OpenGL	file:
solid_vertex_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char solid_vertex_shader[] =$/;"	v	file:
solution	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  AirspaceInterceptSolution solution;$/;"	m	struct:WarningItem	file:
solution	Engine/Airspace/AirspaceWarning.hpp	/^  AirspaceInterceptSolution solution;$/;"	m	class:AirspaceWarning
solution	Engine/Contest/ContestStatistics.hpp	/^  ContestTraceVector solution[3];$/;"	m	struct:ContestStatistics
solution	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  ContestTraceVector solution;$/;"	m	class:ContestDijkstra
solution	Engine/Contest/Solvers/OLCLeague.hpp	/^  ContestTraceVector solution;$/;"	m	class:OLCLeague
solution	Engine/Contest/Solvers/TriangleContest.hpp	/^  ContestTraceVector solution;$/;"	m	class:TriangleContest
solution	Engine/PathSolvers/NavDijkstra.hpp	/^  unsigned solution[MAX_STAGES];$/;"	m	class:NavDijkstra
solution	Engine/Task/Unordered/AbortTask.hpp	/^    GlideResult solution;$/;"	m	struct:AbortTask::AlternateTaskPoint
solution	Engine/Task/Unordered/AlternatePoint.hpp	/^  GlideResult solution;$/;"	m	struct:AlternatePoint
solution_classic	Engine/Contest/Solvers/OLCLeague.hpp	/^  ContestTraceVector solution_classic;$/;"	m	class:OLCLeague
solution_classic	Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestTraceVector solution_classic;$/;"	m	class:OLCPlus
solution_fai	Engine/Contest/Solvers/OLCPlus.hpp	/^  ContestTraceVector solution_fai;$/;"	m	class:OLCPlus
solution_mc0	Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_mc0;$/;"	m	struct:ElementStat
solution_planned	Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_planned;$/;"	m	struct:ElementStat
solution_remaining	Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_remaining;$/;"	m	struct:ElementStat
solution_route	Engine/Route/RoutePlanner.hpp	/^  Route solution_route;$/;"	m	class:RoutePlanner
solution_travelled	Engine/Task/Stats/ElementStat.hpp	/^  GlideResult solution_travelled;$/;"	m	struct:ElementStat
solution_within_tolerance	Math/ZeroFinder.cpp	/^ZeroFinder::solution_within_tolerance(const double x,$/;"	f	class:ZeroFinder
solve	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  double solve(double &distance) {$/;"	f	class:final
solve	Engine/Airspace/AirspaceAircraftPerformance.cpp	/^  double solve(double &h) {$/;"	f	class:final
solve	Engine/GlideSolvers/GlidePolar.cpp	/^  double solve(const double Vstart) {$/;"	f	class:final
some_out_of_date	Dialogs/FileManager.cpp	/^  bool some_out_of_date;$/;"	m	class:ManagedFileListWidget	file:
sop	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_sop_t sop;$/;"	m	union:__anon178
sortBy	Topography/shapelib/mapserver.h	/^    sortByClause sortBy;$/;"	m	struct:layerObj
sortByClause	Topography/shapelib/mapserver.h	/^  } sortByClause;$/;"	t	typeref:struct:__anon63
sortByProperties	Topography/shapelib/mapserver.h	/^  } sortByProperties;$/;"	t	typeref:struct:__anon62
sortOrder	Topography/shapelib/mapserver.h	/^      sortOrderEnum sortOrder;$/;"	m	struct:__anon62
sortOrderEnum	Topography/shapelib/mapserver.h	/^  } sortOrderEnum;$/;"	t	typeref:enum:__anon61
sortleft	Geo/ConvexHull/GrahamScan.cpp	/^sortleft$/;"	f	file:
sot	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_sot_t sot;$/;"	m	union:__anon178
sound	StatusMessage.hpp	/^  const TCHAR *sound;$/;"	m	struct:StatusMessage
sound	UISettings.hpp	/^  SoundSettings sound;$/;"	m	struct:UISettings
sound_deadband	Audio/Settings.hpp	/^  uint8_t sound_deadband;$/;"	m	struct:SoundSettings
sound_interval_counter	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  unsigned sound_interval_counter;$/;"	m	class:final	file:
sound_modes_enabled	Audio/Settings.hpp	/^  bool sound_modes_enabled;$/;"	m	struct:SoundSettings
sound_task_enabled	Audio/Settings.hpp	/^  bool sound_task_enabled;$/;"	m	struct:SoundSettings
source	Audio/PCMPlayer.hpp	/^  PCMDataSource *source = nullptr;$/;"	m	class:PCMPlayer
source	Audio/PCMPlayer.hpp	/^  PCMSynthesiser *source = nullptr;$/;"	m	class:PCMPlayer
source	IO/ConvertLineReader.hpp	/^  std::unique_ptr<LineReader<char>> source;$/;"	m	class:ConvertLineReader
source	Topography/shapelib/mapshape.h	/^    char source[MS_PATH_LENGTH]; \/* full path to this file data *\/$/;"	m	struct:__anon85
source_color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::color_type source_color_type;$/;"	t	struct:BinaryWritePixel
source_color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::color_type source_color_type;$/;"	t	struct:PerPixelOperations
source_color_type	Screen/Memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::color_type source_color_type;$/;"	t	struct:UnaryWritePixel
source_const_rpointer	Screen/Memory/PixelOperations.hpp	/^  typedef typename SourcePixelTraits::const_rpointer source_const_rpointer;$/;"	t	struct:PerPixelOperations
sources	Audio/PCMMixerDataSource.hpp	/^  PCMDataSource *sources[MAX_MIXER_SOURCES_COUNT] = {};$/;"	m	class:PCMMixerDataSource
sources	NMEA/ThermalLocator.hpp	/^  TrivialArray<ThermalSource, MAX_SOURCES> sources;$/;"	m	struct:ThermalLocatorInfo
space_size_10	Topography/shapelib/mapserver.h	/^    double space_size_10; \/*cached size of a single space character used for label text alignment of rfc40 *\/$/;"	m	struct:labelObj
spacer_1	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  spacer_1,$/;"	e	enum:ControlIndex	file:
spacer_1	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  spacer_1,$/;"	e	enum:ControlIndex	file:
spacer_1	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  spacer_1,$/;"	e	enum:ControlIndex	file:
spacer_2	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  spacer_2,$/;"	e	enum:ControlIndex	file:
spacer_2	Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp	/^  spacer_2,$/;"	e	enum:ControlIndex	file:
spacer_2	Dialogs/Settings/Panels/UnitsConfigPanel.cpp	/^  spacer_2,$/;"	e	enum:ControlIndex	file:
spacer_3	Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp	/^  spacer_3,$/;"	e	enum:ControlIndex	file:
special_page	PageState.hpp	/^  PageLayout special_page;$/;"	m	struct:PagesState
speed	Engine/Task/Stats/DistanceStat.hpp	/^  double speed;$/;"	m	class:DistanceStat
speed	Engine/Task/Stats/WindowStats.hpp	/^  double speed;$/;"	m	struct:WindowStats
speed	FLARM/Traffic.hpp	/^  RoughSpeed speed;$/;"	m	class:FlarmTraffic::AircraftType
speed	GliderLink/Traffic.hpp	/^  RoughSpeed speed;$/;"	m	struct:GliderLinkTraffic
speed_achieved	Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
speed_achieved	Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
speed_factor	Replay/TaskAutoPilot.hpp	/^  double speed_factor;$/;"	m	class:TaskAutoPilot
speed_incremental	Engine/Task/Stats/DistanceStat.hpp	/^  double speed_incremental;$/;"	m	class:DistanceStat
speed_received	FLARM/Traffic.hpp	/^  bool speed_received;$/;"	m	class:FlarmTraffic::AircraftType
speed_received	GliderLink/Traffic.hpp	/^  bool speed_received;$/;"	m	struct:GliderLinkTraffic
speed_remaining	Dialogs/Task/TargetDialog.cpp	/^    PixelRect range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	struct:TargetWidget::Layout	file:
speed_remaining	Dialogs/Task/TargetDialog.cpp	/^  WndProperty range, radial, ete, delta_t, speed_remaining, speed_achieved;$/;"	m	class:TargetWidget	file:
speed_unit	Units/Settings.hpp	/^  Unit speed_unit;$/;"	m	struct:UnitSetting
speedup	Form/DataField/Integer.hpp	/^  int speedup;$/;"	m	class:final
speedup	Form/DataField/Time.hpp	/^  uint8_t speedup;$/;"	m	class:final
sprint	Computer/TraceComputer.hpp	/^  Trace full, contest, sprint;$/;"	m	class:TraceComputer
sprint_trace_size	Computer/TraceComputer.cpp	/^static constexpr unsigned sprint_trace_size =$/;"	v	file:
sqrt_epsilon	Math/ZeroFinder.cpp	/^static const double sqrt_epsilon = sqrt(epsilon);$/;"	v	file:
squared_distance	Computer/WaveComputer.cpp	/^  double ratio, squared_distance;$/;"	m	struct:RatioAndDistance	file:
src	Form/DataField/ComboList.hpp	/^    Item &operator=(Item &&src) = default;$/;"	m	struct:ComboList::Item
src	Form/DataField/ComboList.hpp	/^    Item(Item &&src) = default;$/;"	m	struct:ComboList::Item
src	Screen/Bitmap.hpp	/^  Bitmap(Bitmap &&src) = default;$/;"	m	class:final
src	Screen/Custom/UncompressedImage.hpp	/^  UncompressedImage &operator=(UncompressedImage &&src) = default;$/;"	m	class:UncompressedImage
src_counter	Terrain/RasterBuffer.cpp	/^  unsigned src_increment, src_counter;$/;"	m	class:PixelIterator	file:
src_increment	Terrain/RasterBuffer.cpp	/^  unsigned src_increment, src_counter;$/;"	m	class:PixelIterator	file:
srwlock	Thread/WindowsSharedMutex.hxx	/^	SRWLOCK srwlock = SRWLOCK_INIT;$/;"	m	class:WindowsSharedMutex
ssid	Kobo/WPASupplicant.hpp	/^  StaticString<256> ssid;$/;"	m	struct:WifiConfiguredNetworkInfo
ssid	Kobo/WPASupplicant.hpp	/^  StaticString<256> ssid;$/;"	m	struct:WifiStatus
ssid	Kobo/WPASupplicant.hpp	/^  StaticString<256> ssid;$/;"	m	struct:WifiVisibleNetwork
ssid	Kobo/WifiDialog.cpp	/^    StaticString<256> ssid;$/;"	m	struct:final::NetworkInfo	file:
st_size	zzip/zzip.h	/^    int	 	st_size;	\/* file size \/ decompressed size *\/$/;"	m	struct:zzip_dirent
stage_weights	Engine/Contest/Solvers/ContestDijkstra.hpp	/^  unsigned stage_weights[MAX_STAGES];$/;"	m	class:ContestDijkstra
stall_ratio	NMEA/Info.hpp	/^  double stall_ratio;$/;"	m	struct:NMEAInfo
stall_ratio_available	NMEA/Info.hpp	/^  Validity stall_ratio_available;$/;"	m	struct:NMEAInfo
stamp	Cloud/Client.hpp	/^  std::chrono::steady_clock::time_point stamp;$/;"	m	struct:CloudClient
standard	Look/ButtonLook.hpp	/^  } standard, focused;$/;"	m	struct:ButtonLook	typeref:struct:ButtonLook::StateLook
standard	Look/CheckBoxLook.hpp	/^  } standard, focused, pressed, disabled;$/;"	m	struct:CheckBoxLook	typeref:struct:CheckBoxLook::StateLook
standby_freq_name	NMEA/ExternalSettings.hpp	/^  StaticString<32> standby_freq_name;$/;"	m	struct:ExternalSettings
standby_frequency	Computer/Settings.hpp	/^  RadioFrequency standby_frequency;$/;"	m	struct:RadioSettings
standby_frequency	NMEA/ExternalSettings.hpp	/^  RadioFrequency standby_frequency;$/;"	m	struct:ExternalSettings
standby_frequency_panels	InfoBoxes/Content/Radio.cpp	/^static constexpr InfoBoxPanel standby_frequency_panels[] = {$/;"	v	file:
standby_name	Computer/Settings.hpp	/^  StaticString<32> standby_name;$/;"	m	struct:RadioSettings
start	Computer/GlideRatioCalculator.hpp	/^  unsigned short start;$/;"	m	class:GlideRatioCalculator
start	CrossSection/AirspaceXSRenderer.cpp	/^  const GeoPoint start;$/;"	m	class:final	file:
start	CrossSection/CrossSectionRenderer.hpp	/^  GeoPoint start;$/;"	m	class:CrossSectionRenderer
start	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDATETIMESEC start;$/;"	m	struct:IMI::FlightInfo
start	Device/Driver/KRT2.cpp	/^    uint8_t start = STX;$/;"	m	struct:final::stx_msg	file:
start	Device/Driver/LX/LXN.hpp	/^    const struct Start *start;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Start
start	Engine/Task/Stats/TaskStats.hpp	/^  StartStats start;$/;"	m	class:TaskStats
start	IGC/IGCExtensions.hpp	/^  uint16_t start, finish;$/;"	m	struct:IGCExtension
start	Math/ARange.hpp	/^  Angle start, end;$/;"	m	struct:AngleRange
start	Terrain/ScanLine.cpp	/^  GridLocation start, end;$/;"	m	struct:GridRay	file:
start	Time/RoughTime.hpp	/^  RoughTime start;$/;"	m	class:RoughTimeSpan
start	Weather/METARParser.cpp	/^  TCHAR *start, *data, *end;$/;"	m	class:METARLine	file:
start	Weather/NOAAFormatter.cpp	/^  const TCHAR *start;$/;"	m	class:NOAALineSplitter	file:
startLayer	Topography/shapelib/mapserver.h	/^    int (*startLayer)(imageObj *img, mapObj *map, layerObj *layer);$/;"	m	struct:rendererVTableObj
startLeScan_method	Android/BluetoothHelper.cpp	/^  static jmethodID startLeScan_method, stopLeScan_method;$/;"	m	namespace:BluetoothHelper	file:
startProfileFile	Profile/Profile.cpp	/^static AllocatedPath startProfileFile = nullptr;$/;"	v	file:
startShape	Topography/shapelib/mapserver.h	/^    int (*startShape)(imageObj *img, shapeObj *shape);$/;"	m	struct:rendererVTableObj
start_address	Device/Driver/LX/Protocol.hpp	/^    MemoryAddress24 start_address, end_address;$/;"	m	struct:LX::SeekMemory
start_address	Device/Driver/LX/Protocol.hpp	/^    MemoryAddress32 start_address;$/;"	m	struct:LX::FlightInfo
start_address	Device/Driver/LXERA/Protocol.hpp	/^    MemoryAddress24 start_address, end_address;$/;"	m	struct:LXEra::SeekMemory
start_address	Device/Driver/LXERA/Protocol.hpp	/^    MemoryAddress32 start_address;$/;"	m	struct:LXEra::FlightInfo
start_address	Device/RecordedFlight.hpp	/^      uint8_t start_address[3];$/;"	m	struct:RecordedFlightInfo::__anon197::__anon198
start_alt	Replay/TaskAutoPilot.hpp	/^  double start_alt;$/;"	m	struct:AutopilotParameters
start_altitude	Engine/GlideSolvers/GlideResult.hpp	/^  double start_altitude;$/;"	m	struct:GlideResult
start_altitude	NMEA/ClimbInfo.hpp	/^  double start_altitude;$/;"	m	struct:OneClimbInfo
start_constraints	Engine/Task/Ordered/Settings.hpp	/^  StartConstraints start_constraints;$/;"	m	struct:OrderedTaskSettings
start_margins	Engine/Task/TaskBehaviour.hpp	/^  TaskStartMargins start_margins;$/;"	m	struct:TaskBehaviour
start_offset	Device/Driver/Volkslogger/Database.hpp	/^    uint16_t start_offset;$/;"	m	struct:Volkslogger::TableHeader
start_open_time_span	Engine/Task/Stats/CommonStats.hpp	/^  RoughTimeSpan start_open_time_span;$/;"	m	class:CommonStats
start_point	Engine/Waypoint/Waypoint.hpp	/^    bool start_point:1;$/;"	m	struct:Waypoint::Flags
start_radial	Engine/Task/ObservationZones/SectorZone.hpp	/^  Angle start_radial;$/;"	m	class:SectorZone
start_radius	Engine/Task/TaskBehaviour.hpp	/^  double start_radius;$/;"	m	struct:SectorDefaults
start_requires_arm	Engine/Task/Factory/Constraints.hpp	/^  bool start_requires_arm;$/;"	m	struct:TaskFactoryConstraints
start_time	Device/Driver/LX/Protocol.hpp	/^    char start_time[9];$/;"	m	struct:LX::FlightInfo
start_time	Device/Driver/LXERA/Protocol.hpp	/^    char start_time[9];$/;"	m	struct:LXEra::FlightInfo
start_time	FlightInfo.hpp	/^  BrokenTime start_time, end_time;$/;"	m	struct:FlightInfo
start_time	Logger/FlightLogger.hpp	/^  BrokenDateTime start_time;$/;"	m	class:FlightLogger
start_time	Logger/GlueFlightLogger.hpp	/^  BrokenDateTime start_time;$/;"	m	class:GlueFlightLogger
start_time	NMEA/ClimbInfo.hpp	/^  double start_time;$/;"	m	struct:OneClimbInfo
start_type	Engine/Task/TaskBehaviour.hpp	/^  TaskPointFactoryType start_type;$/;"	m	struct:SectorDefaults
start_types	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  const LegalPointSet start_types;$/;"	m	class:AbstractTaskFactory
start_utc	Device/Driver/CAI302/Protocol.hpp	/^      struct DateTime start_utc, end_utc;$/;"	m	struct:CAI302::FileList::FileInfo	typeref:struct:CAI302::FileList::FileInfo::DateTime
startindex	Topography/shapelib/mapserver.h	/^    int  startindex;$/;"	m	struct:__anon40
startindex	Topography/shapelib/mapserver.h	/^    int startindex;$/;"	m	struct:layerObj
startpoint	Device/Driver/Volkslogger/vlapi2.h	/^      DCLWPT startpoint;$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
state	Airspace/AirspaceVisibility.hpp	/^  const AltitudeState &state;$/;"	m	class:AirspaceVisibility
state	CrossSection/AirspaceXSRenderer.cpp	/^  const AltitudeState& state;$/;"	m	class:final	file:
state	Crypto/SHA256.hxx	/^	crypto_hash_sha256_state state;$/;"	m	class:SHA256State
state	Device/Driver/IMI/Protocol/MessageParser.cpp	/^  } state;$/;"	m	namespace:IMI::MessageParser	typeref:enum:IMI::MessageParser::TState	file:
state	Device/Port/TCPClientPort.hpp	/^  PortState state = PortState::LIMBO;$/;"	m	class:final
state	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  AirspaceWarning::State state;$/;"	m	struct:WarningItem	file:
state	Engine/Airspace/AirspaceWarning.hpp	/^  State state;$/;"	m	class:AirspaceWarning
state	Engine/Airspace/AirspaceWarningManager.cpp	/^  const AircraftState state;$/;"	m	class:final	file:
state	Engine/Task/Ordered/SmartTaskAdvance.hpp	/^  State state;$/;"	m	class:final
state	Lua/Background.cpp	/^  Lua::StatePtr state;$/;"	m	class:final	file:
state	Monitor/AirspaceWarningMonitor.cpp	/^  AirspaceWarning::State state;$/;"	m	class:final	file:
state	Replay/AircraftSim.hpp	/^  AircraftState state, state_last;$/;"	m	class:AircraftSim
state	Terrain/jasper/jpc/jpc_dec.h	/^	int state;$/;"	m	struct:__anon150
state	Terrain/jasper/jpc/jpc_dec.h	/^	int state;$/;"	m	struct:__anon152
state	Tracking/TrackingGlue.hpp	/^  LiveTrack24State state;$/;"	m	class:final
state	Util/MD5.hpp	/^  State state;$/;"	m	class:MD5
state_entered	Engine/Task/Points/ScoredTaskPoint.hpp	/^  AircraftState state_entered;$/;"	m	class:ScoredTaskPoint
state_last	Engine/Airspace/AirspaceWarning.hpp	/^  State state_last;$/;"	m	class:AirspaceWarning
state_last	Replay/AircraftSim.hpp	/^  AircraftState state, state_last;$/;"	m	class:AircraftSim
static_p	Android/I2CbaroDevice.cpp	/^static double static_p = 0;$/;"	v	file:
static_parameters	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^  const StaticParameter *static_parameters;$/;"	m	class:VegaParametersWidget
static_pressure	NMEA/Info.hpp	/^  AtmosphericPressure static_pressure;$/;"	m	struct:NMEAInfo
static_pressure_available	NMEA/Info.hpp	/^  Validity static_pressure_available;$/;"	m	struct:NMEAInfo
station	Device/Driver/KRT2.cpp	/^    char station[MAX_NAME_LENGTH];$/;"	m	struct:final::stx_msg	file:
station	MapWindow/Items/MapItem.hpp	/^  NOAAStore::iterator station;$/;"	m	struct:WeatherStationMapItem
station_iterator	Dialogs/Weather/NOAADetails.cpp	/^  NOAAStore::iterator station_iterator;$/;"	m	class:final	file:
stationary_at	Computer/FlyingComputer.hpp	/^  GeoPoint stationary_at;$/;"	m	class:FlyingComputer
stationary_clock	Computer/FlyingComputer.hpp	/^  StateClock<60, 5> stationary_clock;$/;"	m	class:FlyingComputer
stationary_since	Computer/FlyingComputer.hpp	/^  double stationary_since;$/;"	m	class:FlyingComputer
stations	Dialogs/Weather/NOAAList.cpp	/^  TrivialArray<ListItem, 20> stations;$/;"	m	class:final	file:
stations	Weather/NOAAStore.hpp	/^  StationContainer stations;$/;"	m	class:NOAAStore
stats	Engine/Contest/ContestManager.hpp	/^  ContestStatistics stats;$/;"	m	class:ContestManager
stats	Engine/Task/AbstractTask.hpp	/^  TaskStats stats;$/;"	m	class:AbstractTask
stats_clock	Computer/StatsComputer.hpp	/^  GPSClock stats_clock;$/;"	m	class:StatsComputer
stats_computer	Computer/GlideComputer.hpp	/^  StatsComputer stats_computer;$/;"	m	class:GlideComputer
stats_computer	Engine/Task/AbstractTask.hpp	/^  TaskStatsComputer stats_computer;$/;"	m	class:AbstractTask
status	FLARM/Data.hpp	/^  FlarmStatus status;$/;"	m	struct:FlarmData
status	Kobo/WifiDialog.cpp	/^  WifiStatus status;$/;"	m	class:final	file:
status	Topography/shapelib/mapserver.h	/^    int status; \/* ON, OFF or EMBED *\/$/;"	m	struct:__anon54
status	Topography/shapelib/mapserver.h	/^    int status; \/* ON, OFF or EMBED *\/$/;"	m	struct:__anon55
status	Topography/shapelib/mapserver.h	/^    int status; \/* has this label been drawn or not *\/$/;"	m	struct:__anon46
status	Topography/shapelib/mapserver.h	/^    int status; \/* is map creation on or off *\/$/;"	m	struct:mapObj
status	Topography/shapelib/mapserver.h	/^    int status; \/* on or off *\/$/;"	m	struct:layerObj
status	Topography/shapelib/mapserver.h	/^    int status;$/;"	m	struct:__anon41
status	Topography/shapelib/mapserver.h	/^    int status;$/;"	m	struct:__anon53
status	Topography/shapelib/mapserver.h	/^    int status;$/;"	m	struct:classObj
status	Topography/shapelib/mapshape.h	/^    ms_bitarray status;$/;"	m	struct:__anon85
status_page	Dialogs/dlgStatus.cpp	/^static int status_page = 0;$/;"	v	file:
std	NMEA/LiftDatabase.hpp	/^namespace std {$/;"	n
steady	UIUtil/KineticManager.hpp	/^  bool steady;$/;"	m	class:KineticManager
steady_clock_cache	Event/Android/Queue.hpp	/^  ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:EventQueue
steady_clock_cache	Event/SDL/Queue.hpp	/^  ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:EventQueue
steady_clock_cache	Event/Windows/Queue.hpp	/^  ClockCache<std::chrono::steady_clock> steady_clock_cache;$/;"	m	class:EventQueue
steady_now	Cloud/Serialiser.hpp	/^  const std::chrono::steady_clock::time_point steady_now =$/;"	m	class:Deserialiser
steady_now	Cloud/Serialiser.hpp	/^  const std::chrono::steady_clock::time_point steady_now =$/;"	m	class:Serialiser
stealth	FLARM/Traffic.hpp	/^  bool stealth;$/;"	m	class:FlarmTraffic::AircraftType
stencil	MapWindow/StencilMapCanvas.hpp	/^  Canvas &stencil;$/;"	m	class:StencilMapCanvas
stencil_buffer	Screen/OpenGL/BufferCanvas.hpp	/^  GLRenderBuffer *stencil_buffer = nullptr;$/;"	m	class:DisplayOrientation
step	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int min_value, max_value, step;$/;"	m	struct:VegaParametersWidget::StaticParameter
step	Form/DataField/Angle.hpp	/^  unsigned step;$/;"	m	class:final
step	Form/DataField/Integer.hpp	/^  int step;$/;"	m	class:final
step	Form/DataField/Time.hpp	/^  unsigned step;$/;"	m	class:final
step	Weather/PCMet/Overlays.hpp	/^  unsigned step;$/;"	m	struct:PCMet::OverlayInfo
step_size	Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
stepsize	Terrain/jasper/jpc/jpc_dec.h	/^	int stepsize;$/;"	m	struct:__anon147
stepsizes	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t *stepsizes;$/;"	m	struct:__anon166
stepsizes	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast16_t stepsizes[3 * JPC_MAXRLVLS + 1];$/;"	m	struct:__anon142
stf	Device/Driver/Vega/Volatile.hpp	/^    unsigned stf;$/;"	m	struct:Vega::VolatileData
stf_dead_band	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t stf_dead_band; \/\/ (10ths M\/S)$/;"	m	struct:CAI302::Pilot
stop	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD stop;$/;"	m	struct:IMI::FlightFinish
stop	Thread/StandbyThread.hpp	/^  bool stop = false;$/;"	m	class:StandbyThread
stopLeScan_method	Android/BluetoothHelper.cpp	/^  static jmethodID startLeScan_method, stopLeScan_method;$/;"	m	namespace:BluetoothHelper	file:
stop_received	Thread/SuspensibleThread.hpp	/^  bool stop_received, suspend_received, suspended;$/;"	m	class:SuspensibleThread
stop_time	Device/Driver/LX/Protocol.hpp	/^    char stop_time[9];$/;"	m	struct:LX::FlightInfo
stop_time	Device/Driver/LXERA/Protocol.hpp	/^    char stop_time[9];$/;"	m	struct:LXEra::FlightInfo
stop_trigger	Thread/StoppableThread.hpp	/^  Trigger stop_trigger;$/;"	m	class:StoppableThread
stopping_time	UIUtil/KineticManager.hpp	/^  const std::chrono::duration<double> stopping_time;$/;"	m	class:KineticManager
store	Task/TaskStore.cpp	/^  TaskStore::ItemVector &store;$/;"	m	class:TaskFileVisitor	file:
store	Task/TaskStore.hpp	/^  ItemVector store;$/;"	m	class:TaskStore
store	Topography/Thread.hpp	/^  TopographyStore &store;$/;"	m	class:final
store	Topography/TopographyRenderer.hpp	/^  const TopographyStore &store;$/;"	m	class:TopographyRenderer
store	Weather/Rasp/RaspCache.hpp	/^  const RaspStore &store;$/;"	m	class:RaspCache
store_index	Units/UnitsGlue.cpp	/^  unsigned store_index;$/;"	m	struct:language_unit_map	file:
str	Topography/shapelib/mapstring.c	/^    char  *str;$/;"	m	struct:msStringBuffer	file:
strcasecmp	Topography/shapelib/mapstring.c	/^int strcasecmp(const char *s1, const char *s2)$/;"	f
strcasecmp	zzip/conf.h	187;"	d
strcasestr	Topography/shapelib/mapstring.c	/^char *strcasestr(const char *s, const char *find)$/;"	f
stream	Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t *stream;$/;"	m	struct:jpc_dec_seg_s
stream_	Terrain/jasper/jas_image.h	/^	jas_stream_t *stream_;$/;"	m	struct:__anon123
stream_	Terrain/jasper/jpc/jpc_bs.h	/^	jas_stream_t *stream_;$/;"	m	struct:__anon129
streams	Terrain/jasper/jpc/jpc_dec.h	/^	jas_stream_t **streams;$/;"	m	struct:__anon141
streraz	Device/Driver/LX/LXN.hpp	/^    char streraz[8];$/;"	m	struct:LXN::Start
string	Airspace/AirspaceParser.cpp	/^  const TCHAR *string;$/;"	m	struct:AirspaceClassStringCouple	file:
string	Device/Driver/LX/LXN.hpp	/^    const struct String *string;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::String
string	FLARM/Error.cpp	/^  const TCHAR *string;$/;"	m	struct:__anon1	file:
string	Form/DataField/Enum.hpp	/^    TCHAR *string;$/;"	m	class:final::Entry
string	Terrain/jasper/jas_icc.h	/^	char *string;	\/* ASCII character string *\/$/;"	m	struct:__anon184
string	Topography/shapelib/mapserver.h	/^    char *string;$/;"	m	struct:__anon35
string_buffer	Form/DataField/Time.hpp	/^  mutable TCHAR string_buffer[OUTBUFFERSIZE + 1];$/;"	m	class:final
string_hash	Screen/Custom/Cache.cpp	/^    StringHash string_hash;$/;"	m	struct:TextCacheKey::Hash	file:
string_pair	Language/MOFile.hpp	/^  struct string_pair {$/;"	s	class:MOFile
string_to_key	Input/InputKeys.cpp	/^static constexpr struct string_to_key string_to_key[] = {$/;"	v	typeref:struct:string_to_key	file:
string_to_key	Input/InputKeys.cpp	/^struct string_to_key {$/;"	s	file:
string_value	Form/DataField/ComboList.hpp	/^    tstring string_value;$/;"	m	struct:ComboList::Item
strings	Language/MOFile.hpp	/^  AllocatedArray<string_pair> strings;$/;"	m	class:MOFile
strlcat	Topography/shapelib/mapstring.c	/^size_t strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	Topography/shapelib/mapstring.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strncasecmp	Topography/shapelib/mapstring.c	/^int strncasecmp(const char *s1, const char *s2, int len)$/;"	f
strokeStyleObj	Topography/shapelib/mapserver.h	/^  } strokeStyleObj;$/;"	t	typeref:struct:__anon69
strrchr_basename	zzip/file.c	/^strrchr_basename(zzip_char_t* name)$/;"	f	file:
strrstr	Topography/shapelib/mapstring.c	/^char *strrstr(const char *string, const char *find)$/;"	f
strtoull	Terrain/jasper/jas_types.h	137;"	d
strval	Topography/shapelib/mapserver.h	/^    char *strval;$/;"	m	union:__anon33
strval	Topography/shapelib/mapserver.h	/^    char *strval;$/;"	m	union:__anon34
stx_msg	Device/Driver/KRT2.cpp	/^  struct stx_msg {$/;"	s	class:final	file:
style	Android/TextUtil.hpp	/^  unsigned line_spacing, style;$/;"	m	class:TextUtil
style	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD style:3;$/;"	m	struct:IMI::TObservationZone
style	Form/ButtonPanel.hpp	/^  WindowStyle style;$/;"	m	class:ButtonPanel
style	Screen/Pen.hpp	/^  Style style;$/;"	m	class:Pen
style	Task/TaskFileSeeYou.cpp	/^  } style;$/;"	m	struct:SeeYouTurnpointInformation	typeref:enum:SeeYouTurnpointInformation::Style	file:
style	Topography/shapelib/mapserver.h	/^    int style; \/* HILITE, SELECTED or NORMAL *\/$/;"	m	struct:__anon41
style	Topography/shapelib/mapserver.h	/^    int style;$/;"	m	struct:__anon54
style	Topography/shapelib/mapserver.h	/^    styleObj *style;$/;"	m	struct:__anon70
styleObj	Topography/shapelib/mapserver.h	/^  struct styleObj{$/;"	s
style_bounds	Topography/shapelib/mapserver.h	/^    label_bounds **style_bounds;$/;"	m	struct:__anon45
styleitem	Topography/shapelib/mapserver.h	/^    char *styleitem; \/* item to be used for style lookup - can also be 'AUTO' *\/$/;"	m	struct:layerObj
styleitemindex	Topography/shapelib/mapserver.h	/^    int styleitemindex;$/;"	m	struct:layerObj
styles	Topography/shapelib/mapserver.h	/^    styleObj **styles;$/;"	m	struct:__anon43
styles	Topography/shapelib/mapserver.h	/^    styleObj **styles;$/;"	m	struct:classObj
styles	Topography/shapelib/mapserver.h	/^    styleObj **styles;$/;"	m	struct:labelObj
styles	Topography/shapelib/mapserver.h	/^    styleObj *styles; \/* copied from the classObj, only present if there is a marker to be drawn *\/$/;"	m	struct:__anon46
sub_AutoZoom	Input/InputEventsMap.cpp	/^InputEvents::sub_AutoZoom(int vswitch)$/;"	f	class:InputEvents
sub_PanCursor	Input/InputEventsMap.cpp	/^InputEvents::sub_PanCursor(int dx, int dy)$/;"	f	class:InputEvents
sub_ScaleZoom	Input/InputEventsMap.cpp	/^InputEvents::sub_ScaleZoom(int vswitch)$/;"	f	class:InputEvents
sub_SetZoom	Input/InputEventsMap.cpp	/^InputEvents::sub_SetZoom(double value)$/;"	f	class:InputEvents
sub_TerrainTopography	Input/InputEventsSettings.cpp	/^InputEvents::sub_TerrainTopography(int vswitch)$/;"	f	class:InputEvents
sub_index	Form/TabMenuDisplay.hpp	/^    unsigned sub_index;$/;"	m	struct:final::MenuTabIndex
submitted	Net/HTTP/Request.hpp	/^    bool submitted = false;$/;"	m	class:Net::Request
subnode	Topography/shapelib/maptree.h	/^    struct shape_tree_node *subnode[MAX_SUBNODES];$/;"	m	struct:shape_tree_node	typeref:struct:shape_tree_node::shape_tree_node
subscribable_sensors_	Android/InternalSensors.hpp	/^  std::vector<int> subscribable_sensors_;$/;"	m	class:InternalSensors
subscribeToSensor	Android/InternalSensors.cpp	/^InternalSensors::subscribeToSensor(int id)$/;"	f	class:InternalSensors
subscribedToSensor	Android/InternalSensors.cpp	/^InternalSensors::subscribedToSensor(int id) const$/;"	f	class:InternalSensors
subtract_start_finish_cylinder_radius	Engine/Task/Ordered/OrderedTask.cpp	/^constexpr bool subtract_start_finish_cylinder_radius = true;$/;"	v
success	Dialogs/DownloadFilePicker.cpp	/^  bool got_size = false, complete = false, success;$/;"	m	class:final	file:
sum_error	Math/LeastSquares.hpp	/^  double sum_error;$/;"	m	class:LeastSquares
sum_n	Math/XYDataStore.hpp	/^  unsigned sum_n;$/;"	m	class:XYDataStore
sum_weights	Math/XYDataStore.hpp	/^  double sum_weights;$/;"	m	class:XYDataStore
sum_xw	Math/XYDataStore.hpp	/^  double sum_xw, sum_yw;$/;"	m	class:XYDataStore
sum_xxw	Math/LeastSquares.hpp	/^  double sum_xxw, sum_xyw;$/;"	m	class:LeastSquares
sum_xyw	Math/LeastSquares.hpp	/^  double sum_xxw, sum_xyw;$/;"	m	class:LeastSquares
sum_yw	Math/XYDataStore.hpp	/^  double sum_xw, sum_yw;$/;"	m	class:XYDataStore
summary	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TextWidget &summary;$/;"	m	class:TaskEditPanel	file:
summary	Dialogs/Task/Manager/TaskListPanel.cpp	/^  TextWidget &summary;$/;"	m	class:final	file:
sun_azimuth	NMEA/Derived.hpp	/^  Angle sun_azimuth;$/;"	m	struct:DerivedInfo
sun_data_available	NMEA/Derived.hpp	/^  Validity sun_data_available;$/;"	m	struct:DerivedInfo
sunday	Engine/Airspace/AirspaceActivity.hpp	/^    bool sunday:1;$/;"	m	struct:AirspaceActivity::Days
supports_clipping	Topography/shapelib/mapserver.h	/^    int supports_clipping;$/;"	m	struct:rendererVTableObj
supports_combolist	Form/DataField/Base.hpp	/^  const bool supports_combolist;$/;"	m	class:DataField
supports_pixel_buffer	Topography/shapelib/mapserver.h	/^    int supports_pixel_buffer;$/;"	m	struct:rendererVTableObj
supports_svg	Topography/shapelib/mapserver.h	/^    int supports_svg;$/;"	m	struct:rendererVTableObj
suppress_traffic_gauge	MainWindow.hpp	/^  bool suppress_traffic_gauge = false, force_traffic_gauge = false;$/;"	m	class:MainWindow
surface	Screen/Custom/TopCanvas.hpp	/^  EGLSurface surface;$/;"	m	class:DisplayOrientation
surface_listeners	Screen/OpenGL/Surface.cpp	/^static GLSurfaceListenerList surface_listeners;$/;"	v	file:
surface_valid	Screen/OpenGL/Surface.cpp	/^bool surface_valid = true;$/;"	v
suspend_count	Thread/RecursivelySuspensibleThread.hpp	/^  unsigned suspend_count;$/;"	m	class:RecursivelySuspensibleThread
suspend_received	Thread/SuspensibleThread.hpp	/^  bool stop_received, suspend_received, suspended;$/;"	m	class:SuspensibleThread
suspended	Thread/SuspensibleThread.hpp	/^  bool stop_received, suspend_received, suspended;$/;"	m	class:SuspensibleThread
sval_last	Gauge/GaugeVario.hpp	/^  int sval_last = 0;$/;"	m	class:GaugeVario
swVersion	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE swVersion;$/;"	m	struct:IMI::TDeclarationHeader
swVersion	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE swVersion;$/;"	m	struct:IMI::TDeviceInfo
swap	Event/Shared/RotatePointer.hpp	/^  bool swap = false;$/;"	m	class:RotatePointer
swap	Form/DataField/Enum.hpp	/^    friend void swap(Entry &a, Entry &b) {$/;"	f	class:final::Entry
swap_frequencies	NMEA/ExternalSettings.hpp	/^  Validity swap_frequencies;$/;"	m	struct:ExternalSettings
swapdir	Screen/Memory/Bresenham.hpp	/^  bool swapdir;$/;"	m	class:BresenhamIterator
switch_state	NMEA/Info.hpp	/^  SwitchState switch_state;$/;"	m	struct:NMEAInfo
sx	Screen/Memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
sy	Screen/Memory/Bresenham.hpp	/^  int dx, dy, sx, sy, error;$/;"	m	class:BresenhamIterator
symbol	Topography/shapelib/mapserver.h	/^    int symbol;$/;"	m	struct:styleObj
symbol	Topography/shapelib/mapserver.h	/^    symbolObj *symbol;$/;"	m	struct:tileCacheObj
symbol	Topography/shapelib/mapserver.h	/^    symbolObj** symbol;$/;"	m	struct:__anon52
symbolSetObj	Topography/shapelib/mapserver.h	/^  } symbolSetObj;$/;"	t	typeref:struct:__anon52
symbolStyleObj	Topography/shapelib/mapserver.h	/^  } symbolStyleObj;$/;"	t	typeref:struct:__anon70
symbol_strings	Renderer/UnitSymbolRenderer.cpp	/^static constexpr UnitSymbolStrings symbol_strings[] = {$/;"	v	file:
symbolname	Topography/shapelib/mapserver.h	/^    char *symbolname;$/;"	m	struct:styleObj
symbolscaledenom	Topography/shapelib/mapserver.h	/^    double symbolscaledenom; \/* scale at which symbols are default size *\/$/;"	m	struct:layerObj
symbolset	Topography/shapelib/mapserver.h	/^    symbolSetObj symbolset;$/;"	m	struct:mapObj
syncChar1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE syncChar1, syncChar2;$/;"	m	struct:IMI::TMsg
syncChar2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE syncChar1, syncChar2;$/;"	m	struct:IMI::TMsg
sync_from_device	Device/Config.hpp	/^  bool sync_from_device;$/;"	m	struct:DeviceConfig
sync_to_device	Device/Config.hpp	/^  bool sync_to_device;$/;"	m	struct:DeviceConfig
synenergywt	Terrain/jasper/jpc/jpc_tsfb.h	/^	jpc_fix_t synenergywt;$/;"	m	struct:__anon130
synthesiser	Audio/VarioGlue.cpp	/^static VarioSynthesiser *synthesiser;$/;"	v	file:
synthesize	Terrain/jasper/jpc/jpc_qmfb.h	/^	int (*synthesize)(jpc_fix_t *, int, int, int, int, int);$/;"	m	struct:__anon128
sys	zzip/plugin.h	/^    long         sys;$/;"	m	struct:zzip_plugin_io
system_now	Cloud/Serialiser.hpp	/^  const std::chrono::system_clock::time_point system_now =$/;"	m	class:Deserialiser
system_now	Cloud/Serialiser.hpp	/^  const std::chrono::system_clock::time_point system_now =$/;"	m	class:Serialiser
system_settings	Blackboard/SettingsBlackboard.hpp	/^  SystemSettings system_settings;$/;"	m	class:SettingsBlackboard
szFail	VALI-XCS.cpp	/^static const char szFail[] = "Validation check failed.  G Record is invalid";$/;"	v	file:
szNoFile	VALI-XCS.cpp	/^static const char szNoFile[] = "Validation check failed.  File not found";$/;"	v	file:
szPass	VALI-XCS.cpp	/^static const char szPass[] = "Validation check passed, data indicated as correct";$/;"	v	file:
t1dec_cnt	Terrain/jasper/jpc/jpc_t1dec.c	/^static long t1dec_cnt = 0;$/;"	v	file:
t_0	Computer/ThermalLocator.hpp	/^    double t_0;$/;"	m	struct:ThermalLocator::Point
t_down	Engine/Task/Ordered/AATIsolineSegment.hpp	/^  double t_down;$/;"	m	class:AATIsolineSegment
t_index	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  const unsigned t_index;$/;"	m	class:FAITrianglePointValidator
t_last_update_us_	Math/SelfTimingKalmanFilter1d.hpp	/^  uint64_t t_last_update_us_ = 0;$/;"	m	class:SelfTimingKalmanFilter1d
t_remaining	Engine/Task/Solvers/TaskMinTarget.hpp	/^  const double t_remaining;$/;"	m	class:final
t_size	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  unsigned t_size;$/;"	m	class:FAITrianglePointValidator
t_up	Engine/Task/Ordered/AATIsolineSegment.hpp	/^  double t_up;$/;"	m	class:AATIsolineSegment
tab_display	Widget/TabWidget.hpp	/^    PixelRect tab_display, extra, pager;$/;"	m	struct:TabWidget::Layout
tab_display	Widget/TabWidget.hpp	/^  TabDisplay *tab_display;$/;"	m	class:TabWidget
tab_line_height	Form/TabDisplay.hpp	/^  const unsigned tab_line_height;$/;"	m	class:final
tab_stop	Screen/Window.hpp	/^  bool tab_stop = false, control_parent = false;$/;"	m	class:WindowStyle
tab_stop	Screen/Window.hpp	/^  bool tab_stop, control_parent;$/;"	m	class:Window
tab_style	Dialogs/DialogSettings.hpp	/^  TabStyle tab_style;$/;"	m	struct:DialogSettings
tabdialog_style_list	Dialogs/Settings/Panels/LayoutConfigPanel.cpp	/^static constexpr StaticEnumChoice tabdialog_style_list[] = {$/;"	v	file:
table	Topography/shapelib/mapserver.h	/^    char *table;$/;"	m	struct:__anon38
tad	Computer/ConditionMonitor/ConditionMonitorFinalGlide.hpp	/^  double tad;$/;"	m	class:final
taf	Weather/NOAAStore.hpp	/^    TAF taf;$/;"	m	struct:NOAAStore::Item
taf_available	Weather/NOAAStore.hpp	/^    bool taf_available;$/;"	m	struct:NOAAStore::Item
tag	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t tag;$/;"	m	struct:jas_icctagtabent_s
tag	Terrain/jasper/jas_tvp.h	/^	char *tag;$/;"	m	struct:__anon106
tagtab	Terrain/jasper/jas_icc.h	/^	jas_icctagtab_t tagtab;$/;"	m	struct:__anon193
tail	Net/HTTP/FormData.hpp	/^    struct curl_httppost *head = nullptr, *tail = nullptr;$/;"	m	class:Net::MultiPartFormData	typeref:struct:Net::MultiPartFormData::
tail	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_seg_t *tail;$/;"	m	struct:__anon144
tail	Util/ForeignFifoBuffer.hxx	/^	size_type head = 0, tail = 0, capacity;$/;"	m	class:ForeignFifoBuffer
tail	Util/OverwritingRingBuffer.hpp	/^  unsigned head, tail;$/;"	m	class:TrivialOverwritingRingBuffer
tail	Util/StaticFifoBuffer.hxx	/^	size_type head = 0, tail = 0;$/;"	m	class:StaticFifoBuffer
tail_pen	Look/WindArrowLook.hpp	/^  Pen arrow_pen, tail_pen;$/;"	m	struct:WindArrowLook
tailifhead	Topography/shapelib/mapserver.h	/^    struct listNode *tailifhead; \/* this is the tail node in the list, if this is the head element, otherwise NULL *\/$/;"	m	struct:listNode	typeref:struct:listNode::listNode
tailifhead	Topography/shapelib/mapserver.h	/^    struct tokenListNode *tailifhead; \/* this is the tail node in the list if this is the head element, otherwise NULL *\/$/;"	m	struct:tokenListNode	typeref:struct:tokenListNode::tokenListNode
takeoff	Device/Driver/Volkslogger/vlconv.h	/^  int	 takeoff;				\/\/ set to one if VL has detected a takeoff$/;"	m	struct:DIRENTRY
takeoff_location	NMEA/FlyingState.hpp	/^  GeoPoint takeoff_location;$/;"	m	struct:FlyingState
takeoff_time	NMEA/FlyingState.hpp	/^  double takeoff_time;$/;"	m	struct:FlyingState
tampered	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tampered;$/;"	m	struct:IMI::Signature
tampered	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tampered;$/;"	m	struct:IMI::TDeviceInfo
tan	Math/Angle.hpp	/^  inline double tan() const {$/;"	f	class:Angle
target_icon	Look/TaskLook.hpp	/^  MaskedIcon target_icon;$/;"	m	struct:TaskLook
target_id	Dialogs/Traffic/FlarmTrafficDetails.cpp	/^  const FlarmId target_id;$/;"	m	class:final	file:
target_index	MapWindow/TargetMapWindow.hpp	/^  unsigned target_index;$/;"	m	class:TargetMapWindow
target_location	Engine/Task/Ordered/Points/AATPoint.hpp	/^  GeoPoint target_location;$/;"	m	class:final
target_locked	Engine/Task/Ordered/Points/AATPoint.hpp	/^  bool target_locked;$/;"	m	class:final
target_noise	Replay/TaskAutoPilot.hpp	/^  double target_noise;$/;"	m	struct:AutopilotParameters
target_point	Dialogs/Task/TargetDialog.cpp	/^  unsigned target_point;$/;"	m	class:TargetWidget	file:
target_restore	Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::target_restore()$/;"	f	class:TaskMacCreadyRemaining
target_save	Engine/Task/Solvers/TaskMacCreadyRemaining.cpp	/^TaskMacCreadyRemaining::target_save()$/;"	f	class:TaskMacCreadyRemaining
target_visibility	Renderer/TaskPointRenderer.hpp	/^  TargetVisibility target_visibility;$/;"	m	class:TaskPointRenderer
tas	IGC/IGCFix.hpp	/^  int16_t tas;$/;"	m	struct:IGCFix
task	Computer/Settings.hpp	/^  TaskBehaviour task;$/;"	m	struct:ComputerSettings
task	Computer/TaskComputer.hpp	/^  ProtectedTaskManager &task;$/;"	m	class:TaskComputer
task	Device/Driver/LX/LXN.hpp	/^    const struct Task *task;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Task
task	Device/Driver/Volkslogger/vlapi2.h	/^    } task;$/;"	m	struct:VLAPI_DATA::DECLARATION	typeref:struct:VLAPI_DATA::DECLARATION::TASK
task	Dialogs/Task/Manager/Internal.hpp	/^  OrderedTask *task;$/;"	m	class:final
task	Dialogs/Task/Manager/TaskMapButtonRenderer.hpp	/^  const OrderedTask *task;$/;"	m	class:TaskMapButtonRenderer
task	Dialogs/Task/OptionalStartsDialog.cpp	/^  OrderedTask &task;$/;"	m	class:OptionStartsWidget	file:
task	Engine/GlideSolvers/MacCready.cpp	/^  const GlideState &task;$/;"	m	class:MacCreadyVopt	file:
task	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  OrderedTask &task;$/;"	m	class:AbstractTaskFactory
task	Engine/Task/Shapes/FAITrianglePointValidator.hpp	/^  OrderedTask *const task;$/;"	m	class:FAITrianglePointValidator
task	Look/MapLook.hpp	/^  TaskLook task;$/;"	m	struct:MapLook
task	MapWindow/MapWindow.hpp	/^  ProtectedTaskManager *task = nullptr;$/;"	m	class:MapWindow
task	MapWindow/TargetMapWindow.hpp	/^  ProtectedTaskManager *task = nullptr;$/;"	m	class:TargetMapWindow
task	Task/TaskStore.hpp	/^    OrderedTask* task;$/;"	m	struct:TaskStore::Item
task_advance	Engine/Task/Ordered/OrderedTask.hpp	/^  SmartTaskAdvance task_advance;$/;"	m	class:final
task_advance	Monitor/AllMonitors.hpp	/^  TaskAdvanceMonitor task_advance;$/;"	m	class:final
task_behaviour	Engine/Task/AbstractTask.hpp	/^  TaskBehaviour task_behaviour;$/;"	m	class:AbstractTask
task_behaviour	Engine/Task/TaskManager.hpp	/^  TaskBehaviour task_behaviour;$/;"	m	class:TaskManager
task_behaviour	Renderer/WaypointRenderer.cpp	/^  const TaskBehaviour &task_behaviour;$/;"	m	class:final	file:
task_behaviour	Task/ProtectedTaskManager.hpp	/^  const TaskBehaviour &task_behaviour;$/;"	m	class:ProtectedTaskManager
task_changed	Dialogs/Task/Manager/TaskPropertiesPanel.hpp	/^  bool *task_changed;$/;"	m	class:final
task_computer	Computer/GlideComputer.hpp	/^  TaskComputer task_computer;$/;"	m	class:GlideComputer
task_constraints	Monitor/AllMonitors.hpp	/^  TaskConstraintsMonitor task_constraints;$/;"	m	class:final
task_direction	Gauge/BigTrafficWidget.cpp	/^  Angle task_direction;$/;"	m	class:FlarmTrafficControl	file:
task_event_observer	UIReceiveBlackboard.cpp	/^static TaskEventObserver task_event_observer;$/;"	v	file:
task_events	Engine/Task/AbstractTask.hpp	/^  TaskEvents *task_events;$/;"	m	class:AbstractTask
task_events	Startup.cpp	/^static GlideComputerTaskEvents *task_events;$/;"	v	file:
task_factory_descriptions	Task/TypeStrings.cpp	/^static const TCHAR *const task_factory_descriptions[] = {$/;"	v	file:
task_factory_names	Task/TypeStrings.cpp	/^static const TCHAR *const task_factory_names[] = {$/;"	v	file:
task_finished	Engine/Task/Stats/TaskStats.hpp	/^  bool task_finished;$/;"	m	class:TaskStats
task_finished	Renderer/TaskPointRenderer.hpp	/^  bool task_finished;$/;"	m	class:TaskPointRenderer
task_id	Device/Driver/LX/LXN.hpp	/^    uint16_t task_id;$/;"	m	struct:LXN::Task
task_id	IGC/IGCDeclaration.hpp	/^  char task_id[4];$/;"	m	struct:IGCDeclarationHeader
task_index	Task/TaskStore.hpp	/^    unsigned task_index;$/;"	m	struct:TaskStore::Item
task_list_serial	Dialogs/Task/Manager/TaskListPanel.cpp	/^static unsigned task_list_serial;$/;"	v	file:
task_look	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  const TaskLook &task_look;$/;"	m	class:TaskEditPanel	file:
task_look	MapWindow/TargetMapWindow.hpp	/^  const TaskLook &task_look;$/;"	m	class:TargetMapWindow
task_look	Renderer/FinalGlideBarRenderer.hpp	/^  const TaskLook &task_look;$/;"	m	class:FinalGlideBarRenderer
task_look	Renderer/OZRenderer.hpp	/^  const TaskLook &task_look;$/;"	m	class:OZRenderer
task_look	Renderer/TaskPointRenderer.hpp	/^  const TaskLook &task_look;$/;"	m	class:TaskPointRenderer
task_manager	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  ProtectedTaskManager *const task_manager;$/;"	m	class:final
task_manager	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  ProtectedTaskManager *const task_manager;$/;"	m	class:final	file:
task_manager	Replay/DemoReplayGlue.hpp	/^  ProtectedTaskManager* task_manager;$/;"	m	class:DemoReplayGlue
task_manager	Replay/Replay.hpp	/^  ProtectedTaskManager &task_manager;$/;"	m	class:final
task_manager	Replay/TaskAccessor.hpp	/^  TaskManager &task_manager;$/;"	m	class:TaskAccessor
task_manager	Startup.cpp	/^static TaskManager *task_manager;$/;"	v	file:
task_modified	Dialogs/Task/Manager/TaskActionsPanel.hpp	/^  bool *task_modified;$/;"	m	class:TaskActionsPanel
task_modified	Dialogs/Task/Manager/TaskClosePanel.hpp	/^  bool *task_modified;$/;"	m	class:final
task_modified	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool *task_modified;$/;"	m	class:TaskEditPanel	file:
task_modified	Dialogs/Task/Manager/TaskListPanel.cpp	/^  bool *task_modified;$/;"	m	class:final	file:
task_modified	Dialogs/Task/TaskPointDialog.cpp	/^  bool task_modified;$/;"	m	class:final	file:
task_name	IGC/IGCDeclaration.hpp	/^  NarrowString<256> task_name;$/;"	m	struct:IGCDeclarationHeader
task_name	Task/TaskStore.hpp	/^    tstring task_name;$/;"	m	struct:TaskStore::Item
task_pages	Dialogs/Settings/dlgConfiguration.cpp	/^static constexpr TabMenuPage task_pages[] = {$/;"	v	file:
task_points	Engine/Task/Ordered/OrderedTask.hpp	/^  OrderedTaskPointVector task_points;$/;"	m	class:final
task_points	Engine/Task/Unordered/AbortTask.hpp	/^  AlternateTaskVector task_points;$/;"	m	class:AbortTask
task_projection	Engine/Airspace/Airspaces.hpp	/^  TaskProjection task_projection;$/;"	m	class:Airspaces
task_projection	Engine/Task/Ordered/OrderedTask.hpp	/^  TaskProjection task_projection;$/;"	m	class:final
task_projection	Engine/Trace/Trace.hpp	/^  TaskProjection task_projection;$/;"	m	class:Trace
task_projection	Engine/Waypoint/Waypoints.hpp	/^  TaskProjection task_projection;$/;"	m	class:Waypoints
task_scored	Engine/Task/Factory/Constraints.hpp	/^  bool task_scored;$/;"	m	struct:TaskFactoryConstraints
task_size	Dialogs/Task/TargetDialog.cpp	/^  unsigned task_size;$/;"	m	class:TargetWidget	file:
task_speed	FlightStatistics.hpp	/^  LeastSquares task_speed;$/;"	m	class:FlightStatistics
task_speed_unit	Units/Settings.hpp	/^  Unit task_speed_unit;$/;"	m	struct:UnitSetting
task_started	Engine/Task/Stats/StartStats.hpp	/^  bool task_started;$/;"	m	struct:StartStats
task_stats	NMEA/Derived.hpp	/^  TaskStats task_stats;$/;"	m	struct:DerivedInfo
task_store	Dialogs/Task/Manager/TaskListPanel.cpp	/^  TaskStore *task_store;$/;"	m	class:final	file:
task_time	Task/TaskFileSeeYou.cpp	/^  double task_time;$/;"	m	struct:SeeYouTaskInformation	file:
task_turn_point_icon	Look/WaypointLook.hpp	/^  MaskedIcon small_icon, turn_point_icon, task_turn_point_icon;$/;"	m	struct:WaypointLook
task_type	Engine/Task/Stats/CommonStats.hpp	/^  TaskType task_type;$/;"	m	class:CommonStats
task_type_default	Engine/Task/TaskBehaviour.hpp	/^  TaskFactoryType task_type_default;$/;"	m	struct:TaskBehaviour
task_valid	Engine/Task/Stats/TaskStats.hpp	/^  bool task_valid;$/;"	m	class:TaskStats
task_valid	Renderer/WaypointRenderer.cpp	/^  bool task_valid;$/;"	m	class:final	file:
taskid	Device/Driver/LX/Protocol.hpp	/^    int16_t taskid;$/;"	m	struct:LX::Declaration
taskid	Device/Driver/LXERA/Protocol.hpp	/^    int16_t taskid;$/;"	m	struct:LXEra::Declaration
taskpoint_finish	Engine/Task/Ordered/OrderedTask.hpp	/^  FinishPoint *taskpoint_finish;$/;"	m	class:final
taskpoint_start	Engine/Task/Ordered/OrderedTask.hpp	/^  StartPoint *taskpoint_start;$/;"	m	class:final
tbuffer	IO/ConvertLineReader.hpp	/^  ReusableArray<TCHAR> tbuffer;$/;"	m	class:ConvertLineReader
tcomps	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_tcomp_t *tcomps;$/;"	m	struct:__anon150
tcp_port	Device/Config.hpp	/^  unsigned tcp_port;$/;"	m	struct:DeviceConfig
team_brush_blue	Look/FlarmTrafficLook.hpp	/^  Brush team_brush_blue;$/;"	m	struct:FlarmTrafficLook
team_brush_green	Look/FlarmTrafficLook.hpp	/^  Brush team_brush_green;$/;"	m	struct:FlarmTrafficLook
team_brush_magenta	Look/FlarmTrafficLook.hpp	/^  Brush team_brush_magenta;$/;"	m	struct:FlarmTrafficLook
team_brush_yellow	Look/FlarmTrafficLook.hpp	/^  Brush team_brush_yellow;$/;"	m	struct:FlarmTrafficLook
team_code	Computer/Settings.hpp	/^  TeamCodeSettings team_code;$/;"	m	struct:ComputerSettings
team_code	TeamCode/Settings.hpp	/^  TeamCode team_code;$/;"	m	struct:TeamCodeSettings
team_code_infobox_panels	InfoBoxes/Content/Team.cpp	/^static constexpr InfoBoxPanel team_code_infobox_panels[] = {$/;"	v	file:
team_code_ref_found	Computer/GlideComputer.hpp	/^  bool team_code_ref_found;$/;"	m	class:GlideComputer
team_code_ref_id	Computer/GlideComputer.hpp	/^  int team_code_ref_id;$/;"	m	class:GlideComputer
team_code_ref_location	Computer/GlideComputer.hpp	/^  GeoPoint team_code_ref_location;$/;"	m	class:GlideComputer
team_code_reference_waypoint	TeamCode/Settings.hpp	/^  int team_code_reference_waypoint;$/;"	m	struct:TeamCodeSettings
team_color_blue	Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_blue;$/;"	m	class:TrafficLook	file:
team_color_blue	Look/TrafficLook.hpp	/^  static constexpr Color team_color_blue = Color(0, 0x90, 0xff);$/;"	m	struct:TrafficLook
team_color_green	Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_green;$/;"	m	class:TrafficLook	file:
team_color_green	Look/TrafficLook.hpp	/^  static constexpr Color team_color_green = Color(0x74, 0xff, 0);$/;"	m	struct:TrafficLook
team_color_magenta	Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_magenta;$/;"	m	class:TrafficLook	file:
team_color_magenta	Look/TrafficLook.hpp	/^  static constexpr Color team_color_magenta = Color(0xff, 0, 0xcb);$/;"	m	struct:TrafficLook
team_color_yellow	Look/TrafficLook.cpp	/^constexpr Color TrafficLook::team_color_yellow;$/;"	m	class:TrafficLook	file:
team_color_yellow	Look/TrafficLook.hpp	/^  static constexpr Color team_color_yellow = Color(0xff, 0xe8, 0);$/;"	m	struct:TrafficLook
team_flarm_callsign	TeamCode/Settings.hpp	/^  StaticString<4> team_flarm_callsign;$/;"	m	struct:TeamCodeSettings
team_flarm_id	FLARM/TrafficDatabases.hpp	/^  FlarmId team_flarm_id;$/;"	m	struct:TrafficDatabases
team_flarm_id	TeamCode/Settings.hpp	/^  FlarmId team_flarm_id;$/;"	m	struct:TeamCodeSettings
team_pen_blue	Look/FlarmTrafficLook.hpp	/^  Pen team_pen_blue;$/;"	m	struct:FlarmTrafficLook
team_pen_blue	Look/TrafficLook.hpp	/^  Pen team_pen_blue;$/;"	m	struct:TrafficLook
team_pen_green	Look/FlarmTrafficLook.hpp	/^  Pen team_pen_green;$/;"	m	struct:FlarmTrafficLook
team_pen_green	Look/TrafficLook.hpp	/^  Pen team_pen_green;$/;"	m	struct:TrafficLook
team_pen_magenta	Look/FlarmTrafficLook.hpp	/^  Pen team_pen_magenta;$/;"	m	struct:FlarmTrafficLook
team_pen_magenta	Look/TrafficLook.hpp	/^  Pen team_pen_magenta;$/;"	m	struct:TrafficLook
team_pen_yellow	Look/FlarmTrafficLook.hpp	/^  Pen team_pen_yellow;$/;"	m	struct:FlarmTrafficLook
team_pen_yellow	Look/TrafficLook.hpp	/^  Pen team_pen_yellow;$/;"	m	struct:TrafficLook
teammate_available	NMEA/Derived.hpp	/^  bool teammate_available;$/;"	m	struct:TeamInfo
teammate_icon	Look/TrafficLook.hpp	/^  MaskedIcon teammate_icon;$/;"	m	struct:TrafficLook
teammate_location	NMEA/Derived.hpp	/^  GeoPoint teammate_location;$/;"	m	struct:TeamInfo
teammate_vector	NMEA/Derived.hpp	/^  GeoVector teammate_vector;$/;"	m	struct:TeamInfo
tells	zzip/file.c	33;"	d	file:
temp	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD temp:12;$/;"	m	struct:IMI::FixK
temp	Screen/FB/mxcfb.h	/^	int temp;$/;"	m	struct:mxcfb_update_data
temperature	Dialogs/Device/DeviceListDialog.cpp	/^    bool temperature:1;$/;"	m	struct:final::Flags	file:
temperature	NMEA/Info.hpp	/^  Temperature temperature;$/;"	m	struct:NMEAInfo
temperature	Weather/ParsedMETAR.hpp	/^  double temperature, dew_point;$/;"	m	struct:ParsedMETAR
temperature_available	NMEA/Info.hpp	/^  bool temperature_available;$/;"	m	struct:NMEAInfo
temperature_filter	Android/VoltageDevice.hpp	/^  WindowFilter<64> temperature_filter;$/;"	m	class:final
temperature_unit	Units/Settings.hpp	/^  Unit temperature_unit;$/;"	m	struct:UnitSetting
temperatures_available	Weather/ParsedMETAR.hpp	/^  bool temperatures_available;$/;"	m	struct:ParsedMETAR
templatepattern	Topography/shapelib/mapserver.h	/^    char *datapattern, *templatepattern; \/* depricated, use VALIDATION ... END block instead *\/$/;"	m	struct:mapObj
temporary_path	IO/FileTransaction.hpp	/^  AllocatedPath temporary_path;$/;"	m	class:FileTransaction
temppath	Topography/shapelib/mapserver.h	/^    char *imagepath, *imageurl, *temppath;$/;"	m	struct:__anon42
tempx	Screen/Memory/Murphy.hpp	/^  int tempx, tempy;$/;"	m	struct:MurphyIterator
tempy	Screen/Memory/Murphy.hpp	/^  int tempx, tempy;$/;"	m	struct:MurphyIterator
terminal	Dialogs/Device/PortMonitor.cpp	/^  TerminalWindow &terminal;$/;"	m	class:final	file:
terminal	Dialogs/Device/PortMonitor.cpp	/^  TerminalWindow terminal;$/;"	m	class:final	file:
terminal	Look/Look.hpp	/^  TerminalLook terminal;$/;"	m	struct:Look
terrain	Components.cpp	/^RasterTerrain *terrain;$/;"	v
terrain	Computer/GlideComputerAirData.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:GlideComputerAirData
terrain	Computer/RouteComputer.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:RouteComputer
terrain	CrossSection/CrossSectionRenderer.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:CrossSectionRenderer
terrain	Engine/Route/ReachFanParms.hpp	/^  const RasterMap *terrain;$/;"	m	struct:ReachFanParms
terrain	Engine/Route/ReachResult.hpp	/^  int terrain;$/;"	m	struct:ReachResult
terrain	Engine/Route/RoutePlanner.hpp	/^  const RasterMap *terrain;$/;"	m	class:RoutePlanner
terrain	MapSettings.hpp	/^  TerrainRendererSettings terrain;$/;"	m	struct:MapSettings
terrain	MapWindow/MapWindow.hpp	/^  RasterTerrain *terrain = nullptr;$/;"	m	class:MapWindow
terrain	Renderer/BackgroundRenderer.hpp	/^  const RasterTerrain *terrain = nullptr;$/;"	m	class:BackgroundRenderer
terrain	Task/RoutePlannerGlue.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:RoutePlannerGlue
terrain	Terrain/TerrainRenderer.hpp	/^  const RasterTerrain &terrain;$/;"	m	class:TerrainRenderer
terrain	Terrain/Thread.hpp	/^  RasterTerrain &terrain;$/;"	m	class:final
terrain	Waypoint/Factory.hpp	/^  const RasterTerrain *terrain;$/;"	m	class:WaypointFactory
terrain_altitude	Device/Driver/Vega/Volatile.hpp	/^    int terrain_altitude;$/;"	m	struct:Vega::VolatileData
terrain_altitude	NMEA/Derived.hpp	/^  double terrain_altitude;$/;"	m	struct:TerrainInfo
terrain_base	Engine/Route/ReachFan.hpp	/^  int terrain_base;$/;"	m	class:ReachFan
terrain_base	Engine/Route/ReachFanParms.hpp	/^  int terrain_base;$/;"	m	struct:ReachFanParms
terrain_base	NMEA/Derived.hpp	/^  double terrain_base;$/;"	m	struct:TerrainInfo
terrain_base_valid	NMEA/Derived.hpp	/^  bool terrain_base_valid;$/;"	m	struct:TerrainInfo
terrain_brush	Look/CrossSectionLook.hpp	/^  Brush terrain_brush;$/;"	m	struct:CrossSectionLook
terrain_brush	Look/HorizonLook.hpp	/^  Brush terrain_brush;$/;"	m	struct:HorizonLook
terrain_cache_name	Terrain/RasterTerrain.cpp	/^static const TCHAR *const terrain_cache_name = _T("terrain");$/;"	v	file:
terrain_color	Look/CrossSectionLook.hpp	/^  Color terrain_color;$/;"	m	struct:CrossSectionLook
terrain_color	Look/HorizonLook.hpp	/^  Color terrain_color;$/;"	m	struct:HorizonLook
terrain_colors	Terrain/TerrainRenderer.cpp	/^static constexpr ColorRamp terrain_colors[][NUM_COLOR_RAMP_LEVELS] = {$/;"	v	file:
terrain_counter	Engine/Route/ReachFanParms.hpp	/^  unsigned terrain_counter = 0;$/;"	m	struct:ReachFanParms
terrain_pen	Look/HorizonLook.hpp	/^  Pen terrain_pen;$/;"	m	struct:HorizonLook
terrain_renderer	CrossSection/CrossSectionRenderer.hpp	/^  TerrainXSRenderer terrain_renderer;$/;"	m	class:CrossSectionRenderer
terrain_serial	Terrain/TerrainRenderer.hpp	/^  Serial terrain_serial;$/;"	m	class:TerrainRenderer
terrain_settings	Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp	/^  TerrainRendererSettings terrain_settings;$/;"	m	class:final	file:
terrain_thread	MapWindow/GlueMapWindow.hpp	/^  TerrainThread *terrain_thread = nullptr;$/;"	m	class:GlueMapWindow
terrain_unreachable_brush	Look/WaypointLook.hpp	/^  Brush reachable_brush, terrain_unreachable_brush, unreachable_brush;$/;"	m	struct:WaypointLook
terrain_valid	Engine/Route/ReachResult.hpp	/^  Validity terrain_valid;$/;"	m	struct:ReachResult
terrain_valid	NMEA/Derived.hpp	/^  bool terrain_valid;$/;"	m	struct:TerrainInfo
terrain_warning_icon	Look/MapLook.hpp	/^  MaskedIcon terrain_warning_icon;$/;"	m	struct:MapLook
terrain_warning_location	NMEA/Derived.hpp	/^  GeoPoint terrain_warning_location;$/;"	m	struct:TerrainInfo
text	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE text[12];$/;"	m	struct:IMI::FixE
text	Form/Frame.hpp	/^  tstring text;$/;"	m	class:WndFrame
text	Input/InputLookup.cpp	/^  const TCHAR *text;$/;"	m	struct:Text2EventSTRUCT	file:
text	Menu/ButtonLabel.hpp	/^    const TCHAR *text;$/;"	m	struct:ButtonLabel::Expanded
text	Operation/ThreadedOperationEnvironment.hpp	/^    StaticString<128u> text;$/;"	m	struct:ThreadedOperationEnvironment::Data
text	PopupMessage.hpp	/^    StaticString<256u> text;$/;"	m	struct:PopupMessage::Message
text	PopupMessage.hpp	/^  StaticString<2000> text;$/;"	m	class:PopupMessage
text	Screen/Custom/Cache.cpp	/^  const char *text;$/;"	m	struct:TextCacheKey	file:
text	Screen/StopWatch.hpp	/^    const char *text;$/;"	m	struct:ScreenStopWatch::Marker
text	Topography/shapelib/mapprimitive.h	/^  char *text;$/;"	m	struct:__anon79
text	Topography/shapelib/mapserver.h	/^    expressionObj text;$/;"	m	struct:classObj
text	Topography/shapelib/mapserver.h	/^    expressionObj text;$/;"	m	struct:labelObj
text	Widget/LargeTextWidget.hpp	/^  const TCHAR *text;$/;"	m	class:LargeTextWidget
text	XML/Node.hpp	/^    tstring text;$/;"	m	struct:XMLNode::Data
textPathObj	Topography/shapelib/mapserver.h	/^struct textPathObj{$/;"	s
textPathObj	Topography/shapelib/mapserver.h	/^typedef struct textPathObj textPathObj;$/;"	t	typeref:struct:textPathObj
textRunObj	Topography/shapelib/mapserver.h	/^typedef struct textRunObj textRunObj;$/;"	t	typeref:struct:textRunObj
textSymbolObj	Topography/shapelib/mapserver.h	/^  } textSymbolObj;$/;"	t	typeref:struct:__anon45
text_cache	Screen/Custom/Cache.cpp	/^static Cache<TextCacheKey, RenderedText, 256u, 211u, TextCacheKey::Hash> text_cache;$/;"	v	file:
text_cache_mutex	Screen/Custom/Cache.cpp	/^static Mutex text_cache_mutex;$/;"	v	file:
text_color	Form/Frame.cpp	/^   text_color(look.text_color)$/;"	f
text_color	Form/Frame.hpp	/^  Color text_color;$/;"	m	class:WndFrame
text_color	Look/CheckBoxLook.hpp	/^    Color text_color;$/;"	m	struct:CheckBoxLook::StateLook
text_color	Look/CrossSectionLook.hpp	/^  Color text_color;$/;"	m	struct:CrossSectionLook
text_color	Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20::__anon21
text_color	Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20::__anon22
text_color	Look/DialogLook.hpp	/^      Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20::__anon23
text_color	Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon19
text_color	Look/DialogLook.hpp	/^    Color background_color, text_color;$/;"	m	struct:DialogLook::__anon20
text_color	Look/DialogLook.hpp	/^    Color text_color;$/;"	m	struct:DialogLook::__anon18
text_color	Look/DialogLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:DialogLook
text_color	Look/TerminalLook.hpp	/^  Color background_color, text_color;$/;"	m	struct:TerminalLook
text_color	Look/ThermalAssistantLook.hpp	/^  Color text_color;$/;"	m	struct:ThermalAssistantLook
text_color	Look/VarioLook.hpp	/^  Color background_color, text_color, dimmed_text_color;$/;"	m	struct:VarioLook
text_color	Screen/Memory/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
text_color	Screen/Memory/PixelOperations.hpp	/^  const color_type background_color, text_color;$/;"	m	struct:PixelOpaqueText
text_color	Screen/OpenGL/Canvas.hpp	/^  Color text_color, background_color;$/;"	m	class:Canvas
text_font	Look/DialogLook.hpp	/^  Font text_font, bold_font, small_font;$/;"	m	struct:DialogLook
text_font	Look/VarioLook.hpp	/^  const Font *text_font;$/;"	m	struct:VarioLook
text_height	ProgressWindow.hpp	/^  unsigned text_height;$/;"	m	class:ProgressWindow
text_input_style	Dialogs/DialogSettings.hpp	/^  TextInputStyle text_input_style;$/;"	m	struct:DialogSettings
text_padding	Screen/Layout.cpp	/^  unsigned text_padding = 2;$/;"	m	namespace:Layout	file:
text_renderer	Dialogs/dlgQuickMenu.cpp	/^  TextRenderer text_renderer;$/;"	m	class:final	file:
text_renderer	Form/Frame.hpp	/^  TextRenderer text_renderer;$/;"	m	class:WndFrame
text_renderer	Renderer/TabRenderer.hpp	/^  TextRenderer text_renderer;$/;"	m	class:TabRenderer
text_renderer	Renderer/TextButtonRenderer.hpp	/^  TextRenderer text_renderer;$/;"	m	class:TextButtonRenderer
textpath	Topography/shapelib/mapserver.h	/^    textPathObj *textpath;$/;"	m	struct:__anon45
textsymbols	Topography/shapelib/mapserver.h	/^    textSymbolObj **textsymbols;$/;"	m	struct:__anon46
texture	Screen/Bitmap.hpp	/^  GLTexture *texture = nullptr;$/;"	m	class:final
texture	Screen/Custom/Cache.cpp	/^  GLTexture *texture;$/;"	m	struct:RenderedText	file:
texture	Screen/Custom/TopCanvas.hpp	/^  SDL_Texture *texture;$/;"	m	class:DisplayOrientation
texture	Screen/OpenGL/BufferCanvas.hpp	/^  GLTexture *texture = nullptr;$/;"	m	class:DisplayOrientation
texture	Screen/RawBitmap.hpp	/^  GLTexture *texture;$/;"	m	class:final
textureNonPowerOfTwo_field	Android/NativeView.cpp	/^jfieldID NativeView::textureNonPowerOfTwo_field;$/;"	m	class:NativeView	file:
textureNonPowerOfTwo_field	Android/NativeView.hpp	/^  static jfieldID textureNonPowerOfTwo_field;$/;"	m	class:NativeView
texture_fragment_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char texture_fragment_shader[] =$/;"	v	file:
texture_non_power_of_two	Screen/OpenGL/Globals.cpp	/^  bool texture_non_power_of_two;$/;"	m	namespace:OpenGL	file:
texture_projection	Screen/OpenGL/Shaders.cpp	/^  GLint texture_projection, texture_texture;$/;"	m	namespace:OpenGL	file:
texture_shader	Screen/OpenGL/Shaders.cpp	/^  GLProgram *texture_shader;$/;"	m	namespace:OpenGL	file:
texture_texture	Screen/OpenGL/Shaders.cpp	/^  GLint texture_projection, texture_texture;$/;"	m	namespace:OpenGL	file:
texture_vertex_shader	Screen/OpenGL/Shaders.cpp	/^static constexpr char texture_vertex_shader[] =$/;"	v	file:
the_size	Util/TrivialArray.hxx	/^	size_type the_size;$/;"	m	class:TrivialArray
thermal	Cloud/Sender.hpp	/^    std::array<SkyLinesTracking::Thermal, MAX_THERMAL> thermal;$/;"	m	struct:ThermalResponseSender::Packet
thermal	MapWindow/Items/MapItem.hpp	/^  ThermalSource thermal;$/;"	m	struct:ThermalMapItem
thermal	Tracking/SkyLines/Protocol.hpp	/^  Thermal thermal;$/;"	m	struct:SkyLinesTracking::ThermalSubmitPacket
thermal_assistant_dialog	Look/Look.hpp	/^  ThermalAssistantLook thermal_assistant_dialog;$/;"	m	struct:Look
thermal_assistant_gauge	Look/Look.hpp	/^  ThermalAssistantLook thermal_assistant_gauge;$/;"	m	struct:Look
thermal_assistant_position	UISettings.hpp	/^  } thermal_assistant_position;$/;"	m	struct:UISettings	typeref:class:UISettings::ThermalAssistantPosition
thermal_assistant_position_list	Dialogs/Settings/Panels/GaugesConfigPanel.cpp	/^static constexpr StaticEnumChoice thermal_assistant_position_list[] = {$/;"	v	file:
thermal_average	FlightStatistics.hpp	/^  LeastSquares thermal_average;$/;"	m	class:FlightStatistics
thermal_band	Look/Look.hpp	/^  ThermalBandLook thermal_band;$/;"	m	struct:Look
thermal_band_computer	Computer/GlideComputerAirData.hpp	/^  ThermalBandComputer thermal_band_computer;$/;"	m	class:GlideComputerAirData
thermal_band_renderer	Dialogs/dlgAnalysis.cpp	/^  ThermalBandRenderer thermal_band_renderer;$/;"	m	class:ChartControl	file:
thermal_band_renderer	MapWindow/GlueMapWindow.hpp	/^  ThermalBandRenderer thermal_band_renderer;$/;"	m	class:GlueMapWindow
thermal_clock	Tracking/SkyLines/Glue.hpp	/^  GPSClock thermal_clock;$/;"	m	class:SkyLinesTracking::Glue
thermal_count	Tracking/SkyLines/Protocol.hpp	/^  uint8_t thermal_count;$/;"	m	struct:SkyLinesTracking::ThermalResponsePacket
thermal_enabled	Tracking/SkyLines/Glue.hpp	/^  bool thermal_enabled = false;$/;"	m	class:SkyLinesTracking::Glue
thermal_encounter_band	NMEA/Derived.hpp	/^  ThermalEncounterBand thermal_encounter_band;$/;"	m	struct:DerivedInfo
thermal_encounter_collection	NMEA/Derived.hpp	/^  ThermalEncounterCollection thermal_encounter_collection;$/;"	m	struct:DerivedInfo
thermal_height	Atmosphere/CuSonde.hpp	/^    double thermal_height;$/;"	m	struct:CuSonde::Level
thermal_height	Atmosphere/CuSonde.hpp	/^  double thermal_height;$/;"	m	class:CuSonde
thermal_hotspot_icon	Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
thermal_index	Atmosphere/CuSonde.hpp	/^    Temperature thermal_index;$/;"	m	struct:CuSonde::Level
thermal_locator	NMEA/Derived.hpp	/^  ThermalLocatorInfo thermal_locator;$/;"	m	struct:DerivedInfo
thermal_recency_fn	Math/FastMath.cpp	/^thermal_recency_fn(unsigned x)$/;"	f
thermal_source_icon	Look/MapLook.hpp	/^  MaskedIcon thermal_source_icon;$/;"	m	struct:MapLook
thermalexpress_driver	Device/Driver/ThermalExpress/Driver.cpp	/^const struct DeviceRegister thermalexpress_driver = {$/;"	v	typeref:struct:DeviceRegister
thermallocator	Computer/GlideComputerAirData.hpp	/^  ThermalLocator thermallocator;$/;"	m	class:GlideComputerAirData
thermals	Cloud/Data.hpp	/^  CloudThermalContainer thermals;$/;"	m	struct:CloudData
thermals	Tracking/SkyLines/Data.hpp	/^  std::list<Thermal> thermals;$/;"	m	struct:SkyLinesTracking::Data
theta	Geo/Flat/FlatEllipse.hpp	/^  Angle theta;$/;"	m	class:FlatEllipse
theta_initial	Geo/Flat/FlatEllipse.hpp	/^  Angle theta_initial;$/;"	m	class:FlatEllipse
thick_background_pen	Look/VarioLook.hpp	/^  Pen thick_background_pen, thick_sink_pen, thick_lift_pen;$/;"	m	struct:VarioLook
thick_lift_pen	Look/VarioLook.hpp	/^  Pen thick_background_pen, thick_sink_pen, thick_lift_pen;$/;"	m	struct:VarioLook
thick_pen	Look/AirspaceLook.hpp	/^  Pen thick_pen;$/;"	m	struct:AirspaceLook
thick_sink_pen	Look/VarioLook.hpp	/^  Pen thick_background_pen, thick_sink_pen, thick_lift_pen;$/;"	m	struct:VarioLook
thre	Dialogs/Device/FLARM/ConfigWidget.hpp	/^  unsigned baud, priv, thre, range, acft, log_int, notrack;$/;"	m	class:final
thread	Event/Poll/Queue.hpp	/^  const ThreadHandle thread;$/;"	m	class:final
thread	Net/HTTP/DownloadManager.cpp	/^static DownloadManagerThread *thread;$/;"	v	file:
thread	Screen/OpenGL/Globals.cpp	/^  pthread_t thread;$/;"	m	namespace:OpenGL	file:
thread_id	Topography/shapelib/maperror.h	/^    void* thread_id;$/;"	m	struct:debug_info_obj
threshold	Engine/Task/Shapes/FAITriangleSettings.hpp	/^  Threshold threshold;$/;"	m	struct:FAITriangleSettings
threshold	UIUtil/GestureManager.hpp	/^  int threshold;$/;"	m	class:GestureManager
throttle_clock	ProgressGlue.cpp	/^static PeriodClock throttle_clock;$/;"	v	file:
thursday	Engine/Airspace/AirspaceActivity.hpp	/^    bool thursday:1;$/;"	m	struct:AirspaceActivity::Days
tick_iterations	Engine/Contest/Solvers/TriangleContest.hpp	/^  unsigned tick_iterations;$/;"	m	class:TriangleContest
ticker	Device/Descriptor.hpp	/^  bool ticker;$/;"	m	class:final
tiff	Screen/Custom/LibTiff.cpp	/^  TIFF *const tiff;$/;"	m	class:TiffLoader	file:
tile	Terrain/RasterTileCache.hpp	/^    uint16_t tile;$/;"	m	struct:RasterTileCache::MarkerSegmentInfo
tileCacheObj	Topography/shapelib/mapserver.h	/^  struct tileCacheObj {$/;"	s
tileCacheObj	Topography/shapelib/mapserver.h	/^typedef struct tileCacheObj tileCacheObj;$/;"	t	typeref:struct:tileCacheObj
tile_columns	Terrain/RasterTileCache.hpp	/^    unsigned tile_columns, tile_rows;$/;"	m	struct:RasterTileCache::CacheHeader
tile_height	Terrain/RasterTileCache.hpp	/^    unsigned short tile_width, tile_height;$/;"	m	struct:RasterTileCache::CacheHeader
tile_height	Terrain/RasterTileCache.hpp	/^  unsigned short tile_width, tile_height;$/;"	m	class:RasterTileCache
tile_height	Terrain/ScanLine.cpp	/^  unsigned tile_width, tile_height;$/;"	m	struct:GridRay	file:
tile_rows	Terrain/RasterTileCache.hpp	/^    unsigned tile_columns, tile_rows;$/;"	m	struct:RasterTileCache::CacheHeader
tile_width	Terrain/RasterTileCache.hpp	/^    unsigned short tile_width, tile_height;$/;"	m	struct:RasterTileCache::CacheHeader
tile_width	Terrain/RasterTileCache.hpp	/^  unsigned short tile_width, tile_height;$/;"	m	class:RasterTileCache
tile_width	Terrain/ScanLine.cpp	/^  unsigned tile_width, tile_height;$/;"	m	struct:GridRay	file:
tile_x	Terrain/ScanLine.cpp	/^  unsigned short tile_x, tile_y;$/;"	m	struct:GridLocation	file:
tile_y	Terrain/ScanLine.cpp	/^  unsigned short tile_x, tile_y;$/;"	m	struct:GridLocation	file:
tilecache	Topography/shapelib/mapserver.h	/^    tileCacheObj *tilecache;$/;"	m	struct:imageObj
tileheight	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tileheight;$/;"	m	struct:__anon160
tileheight	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tileheight;$/;"	m	struct:__anon152
tileindex	Topography/shapelib/mapprimitive.h	/^  int tileindex;$/;"	m	struct:__anon79
tileindex	Topography/shapelib/mapserver.h	/^    char *tileindex; \/* layer index file for tiling support *\/$/;"	m	struct:layerObj
tileindex	Topography/shapelib/mapserver.h	/^    char *tileindex;$/;"	m	struct:__anon64
tileindex	Topography/shapelib/mapserver.h	/^    int tileindex;$/;"	m	struct:__anon50
tileindex	Topography/shapelib/mapserver.h	/^    long tileindex;$/;"	m	struct:__anon40
tileitem	Topography/shapelib/mapserver.h	/^    char *tileitem;$/;"	m	struct:__anon64
tileitem	Topography/shapelib/mapserver.h	/^    char *tileitem;$/;"	m	struct:layerObj
tileitemindex	Topography/shapelib/mapserver.h	/^    int tileitemindex;$/;"	m	struct:layerObj
tilelayerindex	Topography/shapelib/mapshape.h	/^    int tilelayerindex;$/;"	m	struct:__anon86
tileno	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t tileno;$/;"	m	struct:__anon158
tiles	Terrain/RasterTileCache.hpp	/^  AllocatedGrid<RasterTile> tiles;$/;"	m	class:RasterTileCache
tiles	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_dec_tile_t *tiles;$/;"	m	struct:__anon152
tileshpfile	Topography/shapelib/mapshape.h	/^    shapefileObj *tileshpfile;$/;"	m	struct:__anon86
tilesrs	Topography/shapelib/mapserver.h	/^    char *tilesrs;$/;"	m	struct:layerObj
tilewidth	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tilewidth;$/;"	m	struct:__anon160
tilewidth	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tilewidth;$/;"	m	struct:__anon152
tilexoff	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tilexoff;$/;"	m	struct:__anon160
tilexoff	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tilexoff;$/;"	m	struct:__anon152
tileyoff	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t tileyoff;$/;"	m	struct:__anon160
tileyoff	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t tileyoff;$/;"	m	struct:__anon152
time	Cloud/Thermal.hpp	/^  std::chrono::steady_clock::time_point time;$/;"	m	struct:CloudThermal
time	Computer/ClimbAverageCalculator.hpp	/^    double time;$/;"	m	struct:ClimbAverageCalculator::HistoryItem
time	Computer/WaveResult.hpp	/^  double time;$/;"	m	struct:WaveInfo
time	Computer/Wind/CirclingWind.hpp	/^    double time;$/;"	m	struct:CirclingWind::Sample
time	Computer/Wind/MeasurementList.hpp	/^  unsigned time;$/;"	m	struct:WindMeasurement
time	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time:17;$/;"	m	struct:IMI::Fix
time	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time:17;$/;"	m	struct:IMI::FixB
time	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time:17;$/;"	m	struct:IMI::FixK
time	Device/Driver/LX/Convert.cpp	/^  unsigned time, origin_time;$/;"	m	struct:Context	file:
time	Device/Driver/LX/LXN.hpp	/^    uint16_t time, dat;$/;"	m	struct:LXN::ExtConfig
time	Device/Driver/LX/LXN.hpp	/^    uint16_t time, latitude, longitude, aalt, galt;$/;"	m	struct:LXN::Position
time	Device/Driver/LX/LXN.hpp	/^    uint32_t time, latitude, longitude;$/;"	m	struct:LXN::Origin
time	Device/Driver/LX/LXN.hpp	/^    uint32_t time;$/;"	m	struct:LXN::Task
time	Dialogs/Weather/RASPDialog.cpp	/^  BrokenTime time;$/;"	m	class:final	file:
time	Engine/Airspace/SoonestAirspace.cpp	/^  double time = -1;$/;"	m	struct:SoonestAirspace	file:
time	Engine/Contest/ContestResult.hpp	/^  double time;$/;"	m	struct:ContestResult
time	Engine/Contest/ContestTrace.hpp	/^  unsigned time;$/;"	m	struct:ContestTracePoint
time	Engine/Navigation/Aircraft.hpp	/^  double time;$/;"	m	struct:AircraftState
time	Engine/Task/Stats/StartStats.hpp	/^  double time;$/;"	m	struct:StartStats
time	Engine/ThermalBand/ThermalSlice.hpp	/^     double time;$/;"	m	struct:ThermalSlice
time	Engine/Trace/Point.hpp	/^  unsigned time;$/;"	m	class:TracePoint
time	IGC/IGCFix.hpp	/^  BrokenTime time;$/;"	m	struct:IGCFix
time	Logger/LoggerImpl.hpp	/^    double time;$/;"	m	struct:LoggerImpl::PreTakeoffBuffer
time	NMEA/Info.hpp	/^  double time;$/;"	m	struct:NMEAInfo
time	NMEA/ThermalLocator.hpp	/^  double time;$/;"	m	struct:ThermalSource
time	Replay/CatmullRomInterpolator.hpp	/^    double time;$/;"	m	struct:CatmullRomInterpolator::Record
time	Replay/CatmullRomInterpolator.hpp	/^  const double time;$/;"	m	class:CatmullRomInterpolator
time	Tracking/SkyLines/Protocol.hpp	/^    uint32_t time;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket::Traffic
time	Tracking/SkyLines/Protocol.hpp	/^  uint32_t time;$/;"	m	struct:SkyLinesTracking::FixPacket
time	Tracking/SkyLines/Protocol.hpp	/^  uint32_t time;$/;"	m	struct:SkyLinesTracking::Thermal
time	Tracking/SkyLines/Protocol.hpp	/^  uint32_t time;$/;"	m	struct:SkyLinesTracking::Wave
time	Weather/Rasp/RaspCache.hpp	/^  unsigned time = 0;$/;"	m	class:RaspCache
time	Weather/WeatherUIState.hpp	/^  BrokenTime time;$/;"	m	struct:WeatherUIState
time	zzip/format.h	/^    zzip_byte_t   time[2];$/;"	m	struct:zzip_dostime
time1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE time1:5;$/;"	m	struct:IMI::FixE
time1	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time1:5;$/;"	m	struct:IMI::FixB2
time2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE time2:8;$/;"	m	struct:IMI::FixE
time2	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD time2:4;$/;"	m	struct:IMI::FixB2
time3	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE time3:4;$/;"	m	struct:IMI::FixE
time_available	NMEA/Info.hpp	/^  Validity time_available;$/;"	m	struct:NMEAInfo
time_between_flight_logs	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t time_between_flight_logs; \/\/ [Minutes]$/;"	m	struct:CAI302::Pilot
time_blackout	Computer/Wind/WindEKFGlue.hpp	/^  unsigned time_blackout;$/;"	m	class:WindEKFGlue
time_circling	NMEA/CirclingInfo.hpp	/^  double time_circling;$/;"	m	struct:CirclingInfo
time_climb_circling	NMEA/CirclingInfo.hpp	/^  double time_climb_circling;$/;"	m	struct:CirclingInfo
time_climb_noncircling	NMEA/CirclingInfo.hpp	/^  double time_climb_noncircling;$/;"	m	struct:CirclingInfo
time_cruise	NMEA/CirclingInfo.hpp	/^  double time_cruise;$/;"	m	struct:CirclingInfo
time_elapsed	Engine/GlideSolvers/GlideResult.hpp	/^  double time_elapsed;$/;"	m	struct:GlideResult
time_elapsed	Engine/Task/Stats/ElementStat.hpp	/^  double time_elapsed;$/;"	m	struct:ElementStat
time_error	Engine/Task/Solvers/TaskSolveTravelled.cpp	/^TaskSolveTravelled::time_error()$/;"	f	class:TaskSolveTravelled
time_of_day_ms	Dialogs/Traffic/TrafficList.cpp	/^    uint32_t time_of_day_ms;$/;"	m	struct:TrafficListWidget::Item	file:
time_of_day_ms	MapWindow/Items/MapItem.hpp	/^  uint32_t id, time_of_day_ms;$/;"	m	struct:SkyLinesTrafficMapItem
time_of_day_ms	Tracking/SkyLines/Data.hpp	/^    uint32_t time_of_day_ms;$/;"	m	struct:SkyLinesTracking::Data::Traffic
time_of_day_ms	Tracking/SkyLines/Data.hpp	/^    uint32_t time_of_day_ms;$/;"	m	struct:SkyLinesTracking::Data::Wave
time_of_noon	Math/SunEphemeris.hpp	/^    double time_of_noon, time_of_sunset, time_of_sunrise;$/;"	m	struct:SunEphemeris::Result
time_of_sunrise	Math/SunEphemeris.hpp	/^    double time_of_noon, time_of_sunset, time_of_sunrise;$/;"	m	struct:SunEphemeris::Result
time_of_sunset	Math/SunEphemeris.hpp	/^    double time_of_noon, time_of_sunset, time_of_sunrise;$/;"	m	struct:SunEphemeris::Result
time_planned	Engine/Task/Stats/ElementStat.hpp	/^  double time_planned;$/;"	m	struct:ElementStat
time_remaining_now	Engine/Task/Stats/ElementStat.hpp	/^  double time_remaining_now;$/;"	m	struct:ElementStat
time_remaining_start	Engine/Task/Stats/ElementStat.hpp	/^  double time_remaining_start;$/;"	m	struct:ElementStat
time_scale	Replay/Replay.hpp	/^  double time_scale;$/;"	m	class:final
time_scales	Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice time_scales[] = {$/;"	v
time_start	Engine/ThermalBand/ThermalBand.hpp	/^     double time_start;$/;"	m	class:ThermalBand
time_started	Engine/Task/Stats/ElementStat.hpp	/^  double time_started;$/;"	m	struct:ElementStat
time_step_circling	Logger/Settings.hpp	/^  uint16_t time_step_circling;$/;"	m	struct:LoggerSettings
time_step_cruise	Logger/Settings.hpp	/^  uint16_t time_step_cruise;$/;"	m	struct:LoggerSettings
time_virtual	Engine/GlideSolvers/GlideResult.hpp	/^  double time_virtual;$/;"	m	struct:GlideResult
time_zone	Form/DataField/RoughTime.hpp	/^  RoughTimeDelta time_zone;$/;"	m	class:final
timegm	Time/BrokenDateTime.cpp	/^timegm (struct tm *tm)$/;"	f	file:
timer	Event/Shared/TimerQueue.hpp	/^    Timer *timer;$/;"	m	struct:TimerQueue::TimerRecord
timer	Event/Timer.hpp	/^  boost::asio::steady_timer timer;$/;"	m	class:final
timer	Lua/Timer.cpp	/^  Lua::Value timer;$/;"	m	class:final	file:
timer_funcs	Lua/Timer.cpp	/^static constexpr struct luaL_Reg timer_funcs[] = {$/;"	v	typeref:struct:luaL_Reg	file:
timer_methods	Lua/Timer.cpp	/^static constexpr struct luaL_Reg timer_methods[] = {$/;"	v	typeref:struct:luaL_Reg	file:
timers	Event/Android/Queue.hpp	/^  TimerQueue timers;$/;"	m	class:EventQueue
timers	Event/SDL/Queue.hpp	/^  TimerQueue timers;$/;"	m	class:EventQueue
timers	Event/Shared/TimerQueue.hpp	/^  std::multiset<TimerRecord> timers;$/;"	m	class:TimerQueue
timers	Event/Windows/Queue.hpp	/^  TimerQueue timers;$/;"	m	class:EventQueue
times	Weather/Rasp/RaspStore.hpp	/^    bool times[MAX_WEATHER_TIMES];$/;"	m	struct:RaspStore::MapItem
tinybuf_	Terrain/jasper/jas_stream.h	/^	jas_uchar tinybuf_[JAS_STREAM_MAXPUTBACK + 1];$/;"	m	struct:__anon120
title	Gauge/LogoView.hpp	/^  Bitmap logo, big_logo, title, big_title;$/;"	m	class:LogoView
title	InfoBoxes/Data.hpp	/^  StaticString<32> title;$/;"	m	struct:InfoBoxData
title	Look/InfoBoxLook.hpp	/^  } title, value, comment;$/;"	m	struct:InfoBoxLook	typeref:struct:InfoBoxLook::__anon24
title	MainWindow.hpp	/^  static constexpr const TCHAR *title = _T("XCSoar");$/;"	m	class:MainWindow
title	Topography/shapelib/mapserver.h	/^    char *title; \/* used for legend labelling *\/$/;"	m	struct:classObj
title_color	InfoBoxes/Data.hpp	/^  uint8_t title_color, value_color, comment_color;$/;"	m	struct:InfoBoxData
title_font	Look/InfoBoxLook.hpp	/^  Font title_font;$/;"	m	struct:InfoBoxLook
title_rect	Form/Form.hpp	/^  PixelRect title_rect;$/;"	m	class:WndForm
title_rect	InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect title_rect;$/;"	m	class:InfoBoxWindow
tlEmpty	Profile/PageProfile.cpp	/^  tlEmpty,$/;"	e	enum:eTopLayout	file:
tlMap	Profile/PageProfile.cpp	/^  tlMap,$/;"	e	enum:eTopLayout	file:
tlMapAndInfoBoxes	Profile/PageProfile.cpp	/^  tlMapAndInfoBoxes,$/;"	e	enum:eTopLayout	file:
tlx	Terrain/jasper/jas_image.h	/^	jas_image_coord_t tlx;$/;"	m	struct:__anon125
tlx_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t tlx_;$/;"	m	struct:__anon123
tlx_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t tlx_;$/;"	m	struct:__anon124
tly	Terrain/jasper/jas_image.h	/^	jas_image_coord_t tly;$/;"	m	struct:__anon125
tly_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t tly_;$/;"	m	struct:__anon123
tly_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t tly_;$/;"	m	struct:__anon124
tm	Engine/Task/Solvers/TaskBestMc.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	Engine/Task/Solvers/TaskGlideRequired.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	Engine/Task/Solvers/TaskMinTarget.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	Engine/Task/Solvers/TaskOptTarget.hpp	/^  TaskMacCreadyRemaining tm;$/;"	m	class:final
tm	Engine/Task/Solvers/TaskSolveTravelled.hpp	/^  TaskMacCreadyTravelled tm; \/**< Travelled calculator *\/$/;"	m	class:TaskSolveTravelled
tmp_as	Engine/Airspace/Airspaces.hpp	/^  std::deque<AbstractAirspace *> tmp_as;$/;"	m	class:Airspaces
tmsg	Device/Driver/IMI/Protocol/MessageParser.cpp	/^    TMsg tmsg;$/;"	m	union:IMI::MessageParser::__anon201	file:
tmval	Topography/shapelib/mapserver.h	/^    struct tm tmval;$/;"	m	union:__anon34	typeref:struct:__anon34::tm
to	Event/Poll/Linux/Translate.hpp	/^  unsigned from, to;$/;"	m	struct:__anon7
to	Topography/shapelib/mapserver.h	/^    char *from, *to; \/* item names *\/$/;"	m	struct:__anon38
toString	Java/Object.hxx	/^		static jstring toString(JNIEnv *env, jobject o) {$/;"	f	class:Java::Object
toString_method	Java/Object.cxx	/^jmethodID Java::Object::toString_method;$/;"	m	class:Java::Object	file:
toString_method	Java/Object.hxx	/^		static jmethodID toString_method;$/;"	m	class:Java::Object
toggle_wifi_button	Kobo/NetworkDialog.cpp	/^  Button *toggle_wifi_button, *wifi_button;$/;"	m	class:final	file:
token	Topography/shapelib/mapserver.h	/^    int token;$/;"	m	struct:tokenListNode
tokenListNode	Topography/shapelib/mapserver.h	/^  typedef struct tokenListNode {$/;"	s
tokenListNodeObj	Topography/shapelib/mapserver.h	/^  } tokenListNodeObj;$/;"	t	typeref:struct:tokenListNode
tokenListNodeObjPtr	Topography/shapelib/mapserver.h	/^  typedef tokenListNodeObj * tokenListNodeObjPtr;$/;"	t
tokenValueObj	Topography/shapelib/mapserver.h	/^  } tokenValueObj;$/;"	t	typeref:union:__anon34
tokens	Topography/shapelib/mapserver.h	/^     scaleTokenEntryObj *tokens;$/;"	m	struct:__anon60
tokens	Topography/shapelib/mapserver.h	/^    tokenListNodeObjPtr tokens;$/;"	m	struct:__anon35
tokensrc	Topography/shapelib/mapserver.h	/^    char *tokensrc; \/* on occassion we may want to access to the original source string (e.g. date\/time) *\/$/;"	m	struct:tokenListNode
tokenval	Topography/shapelib/mapserver.h	/^    tokenValueObj tokenval;$/;"	m	struct:tokenListNode
tolerance	Geo/ConvexHull/GrahamScan.hpp	/^  const double tolerance;$/;"	m	class:GrahamScan
tolerance	Math/ZeroFinder.hpp	/^  const double tolerance;$/;"	m	class:ZeroFinder
tolerance	Topography/shapelib/mapserver.h	/^    double tolerance; \/* search buffer for point and line queries (in toleranceunits) *\/$/;"	m	struct:layerObj
tolerance_actual_min	Math/ZeroFinder.cpp	/^ZeroFinder::tolerance_actual_min(const double x) const$/;"	f	class:ZeroFinder
tolerance_actual_zero	Math/ZeroFinder.cpp	/^ZeroFinder::tolerance_actual_zero(const double x) const$/;"	f	class:ZeroFinder
toleranceunits	Topography/shapelib/mapserver.h	/^    int toleranceunits;$/;"	m	struct:layerObj
tone_climb_comparisons	Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice tone_climb_comparisons[] = {$/;"	v
tone_cruise_lift_detection_types	Dialogs/Device/Vega/AudioModeParameters.hpp	/^static constexpr StaticEnumChoice tone_cruise_lift_detection_types[] = {$/;"	v
top	Airspace/AirspaceParser.cpp	/^  AirspaceAltitude top;$/;"	m	struct:TempAirspaceType	file:
top	Engine/Airspace/AirspaceIntersectSort.cpp	/^AirspaceIntersectSort::top(GeoPoint &p) const$/;"	f	class:AirspaceIntersectSort
top	Form/DigitEntry.hpp	/^  unsigned top, bottom, max_width;$/;"	m	class:CoordinateFormat
top	Renderer/AirspaceLabelList.hpp	/^    AirspaceAltitude top;$/;"	m	struct:AirspaceLabelList::Label
top	Screen/FB/mxcfb.h	/^	__u32 top;$/;"	m	struct:mxcfb_rect
top	Screen/Point.hpp	/^  int left, top, right, bottom;$/;"	m	struct:PixelPoint::PixelRect
top	Terrain/RasterProjection.hpp	/^  int left, top;$/;"	m	class:RasterProjection
top	Util/QuadTree.hxx	/^		position_type left, top, right, bottom;$/;"	m	struct:QuadTree::Rectangle
top_altitude	Tracking/SkyLines/Protocol.hpp	/^  int16_t top_altitude;$/;"	m	struct:SkyLinesTracking::Thermal
top_altitude	Tracking/SkyLines/Protocol.hpp	/^  int16_t top_altitude;$/;"	m	struct:SkyLinesTracking::Wave
top_left	Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
top_location	Cloud/Thermal.hpp	/^  AGeoPoint bottom_location, top_location;$/;"	m	struct:CloudThermal
top_location	Tracking/SkyLines/Data.hpp	/^    AGeoPoint bottom_location, top_location;$/;"	m	struct:SkyLinesTracking::Data::Thermal
top_location	Tracking/SkyLines/Protocol.hpp	/^  GeoPoint top_location;$/;"	m	struct:SkyLinesTracking::Thermal
top_padding	Renderer/TextRowRenderer.hpp	/^  unsigned left_padding, top_padding;$/;"	m	class:TextRowRenderer
top_right	Geo/Quadrilateral.hpp	/^  GeoPoint top_left, top_right, bottom_left, bottom_right;$/;"	m	struct:GeoQuadrilateral
top_window	Event/Android/Loop.hpp	/^  TopWindow &top_window;$/;"	m	class:EventLoop
top_window	Event/Poll/Loop.hpp	/^  TopWindow *top_window;$/;"	m	class:EventLoop
top_window	Event/SDL/Loop.hpp	/^  TopWindow *top_window;$/;"	m	class:EventLoop
topography	Components.cpp	/^TopographyStore *topography;$/;"	v
topography	Look/MapLook.hpp	/^  TopographyLook topography;$/;"	m	struct:MapLook
topography	MapWindow/MapWindow.hpp	/^  TopographyStore *topography = nullptr;$/;"	m	class:MapWindow
topography_enabled	MapSettings.hpp	/^  bool topography_enabled;$/;"	m	struct:MapSettings
topography_look	MapWindow/TargetMapWindow.hpp	/^  const TopographyLook &topography_look;$/;"	m	class:TargetMapWindow
topography_renderer	MapWindow/MapWindow.hpp	/^  CachedTopographyRenderer *topography_renderer = nullptr;$/;"	m	class:MapWindow
topography_renderer	MapWindow/TargetMapWindow.hpp	/^  TopographyRenderer *topography_renderer = nullptr;$/;"	m	class:TargetMapWindow
topography_thread	MapWindow/GlueMapWindow.hpp	/^  TopographyThread *topography_thread = nullptr;$/;"	m	class:GlueMapWindow
total	Engine/Task/Computer/TaskStatsComputer.hpp	/^  ElementStatComputer total;$/;"	m	class:TaskStatsComputer
total	Engine/Task/Stats/TaskStats.hpp	/^  ElementStat total;$/;"	m	class:TaskStats
total_energy_final_glide	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t total_energy_final_glide;$/;"	m	struct:CAI302::Pilot
total_energy_vario	NMEA/Info.hpp	/^  double total_energy_vario;$/;"	m	struct:NMEAInfo
total_energy_vario_available	NMEA/Info.hpp	/^  Validity total_energy_vario_available;$/;"	m	struct:NMEAInfo
total_height_gain	NMEA/CirclingInfo.hpp	/^  double total_height_gain;$/;"	m	struct:CirclingInfo
total_length	Topography/shapelib/mapserver.h	/^    double total_length;$/;"	m	struct:line_lengths
total_length	Topography/shapelib/mapserver.h	/^    double total_length;$/;"	m	struct:polyline_lengths
totaldistance	Computer/GlideRatioCalculator.hpp	/^  unsigned totaldistance;$/;"	m	class:GlideRatioCalculator
touring_constraints	Engine/Task/Factory/TouringTaskFactory.cpp	/^static constexpr TaskFactoryConstraints touring_constraints = {$/;"	v	file:
tower_icon	Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
tp	Engine/Contest/Solvers/TriangleContest.hpp	/^      :CandidateSet(tp, tp, tp) {}$/;"	m	struct:TriangleContest::CandidateSet
tp	Engine/Task/Unordered/GotoTask.hpp	/^  UnorderedTaskPoint *tp;$/;"	m	class:final
tp1	Engine/Contest/Solvers/TriangleContest.hpp	/^    TurnPointRange tp1, tp2, tp3;$/;"	m	struct:TriangleContest::CandidateSet
tp2	Engine/Contest/Solvers/TriangleContest.hpp	/^    TurnPointRange tp1, tp2, tp3;$/;"	m	struct:TriangleContest::CandidateSet
tp3	Engine/Contest/Solvers/TriangleContest.hpp	/^      :tp1(_tp1), tp2(_tp2), tp3(_tp3)$/;"	f	struct:TriangleContest::CandidateSet
tp3	Engine/Contest/Solvers/TriangleContest.hpp	/^    TurnPointRange tp1, tp2, tp3;$/;"	m	struct:TriangleContest::CandidateSet
tp_current	Engine/Task/Solvers/TaskOptTarget.hpp	/^  AATPoint &tp_current;$/;"	m	class:final
tp_factory_descriptions	Task/TypeStrings.cpp	/^static const TCHAR *const tp_factory_descriptions[] = {$/;"	v	file:
tp_factory_names	Task/TypeStrings.cpp	/^static const TCHAR *const tp_factory_names[] = {$/;"	v	file:
tp_next	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint* tp_next;$/;"	m	class:OrderedTaskPoint
tp_panel	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect tp_panel;$/;"	m	struct:final::Layout	file:
tp_panel	Dialogs/Task/TaskPointDialog.cpp	/^  PanelControl tp_panel;$/;"	m	class:final	file:
tp_previous	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  OrderedTaskPoint* tp_previous;$/;"	m	class:OrderedTaskPoint
tp_start	Engine/Task/Solvers/TaskMinTarget.hpp	/^  StartPoint *tp_start;$/;"	m	class:final
tp_start	Engine/Task/Solvers/TaskOptTarget.hpp	/^  StartPoint *tp_start;$/;"	m	class:final
tp_type	MapWindow/Items/MapItem.hpp	/^  TaskPointType tp_type;$/;"	m	struct:TaskOZMapItem
tptypes	Device/Driver/LX/Protocol.hpp	/^    uint8_t tptypes[NUMTPS];$/;"	m	struct:LX::Declaration
tptypes	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t tptypes[NUMTPS];$/;"	m	struct:LXEra::Declaration
tpv	Renderer/TaskRenderer.hpp	/^  TaskPointRenderer &tpv;$/;"	m	class:TaskRenderer
trace	Computer/TaskComputer.hpp	/^  TraceComputer trace;$/;"	m	class:TaskComputer
trace	Engine/Contest/Solvers/OLCLeague.cpp	/^  :AbstractContest(0), trace(_trace)$/;"	f
trace	Engine/Contest/Solvers/OLCLeague.hpp	/^  const Trace &trace;$/;"	m	class:OLCLeague
trace	Engine/Contest/Solvers/TraceManager.hpp	/^  TracePointerVector trace;$/;"	m	class:TraceManager
trace	Renderer/TrailRenderer.hpp	/^  TracePointVector trace;$/;"	m	class:TrailRenderer
trace_dirty	Engine/Contest/Solvers/TraceManager.hpp	/^  bool trace_dirty;$/;"	m	class:TraceManager
trace_history	Look/Look.hpp	/^  TraceHistoryLook trace_history;$/;"	m	struct:Look
trace_history	NMEA/Derived.hpp	/^  TraceHistory trace_history;$/;"	m	struct:DerivedInfo
trace_history_time	Computer/GlideComputer.hpp	/^  DeltaTime trace_history_time;$/;"	m	class:GlideComputer
trace_master	Engine/Contest/Solvers/TraceManager.hpp	/^  const Trace &trace_master;$/;"	m	class:TraceManager
trace_pen	Look/TrailLook.hpp	/^  Pen trace_pen;$/;"	m	struct:TrailLook
track	Engine/Navigation/Aircraft.hpp	/^  Angle track;$/;"	m	struct:AircraftState
track	FLARM/Traffic.hpp	/^  RoughAngle track;$/;"	m	class:FlarmTraffic::AircraftType
track	GliderLink/Traffic.hpp	/^  RoughAngle track;$/;"	m	struct:GliderLinkTraffic
track	NMEA/Info.hpp	/^  Angle track;$/;"	m	struct:NMEAInfo
track	Tracking/SkyLines/Protocol.hpp	/^  uint16_t track;$/;"	m	struct:SkyLinesTracking::FixPacket
track	Tracking/TrackingGlue.hpp	/^  Angle track;$/;"	m	class:final
track_available	NMEA/Info.hpp	/^  Validity track_available;$/;"	m	struct:NMEAInfo
track_line_pen	Look/MapLook.hpp	/^  Pen track_line_pen;$/;"	m	struct:MapLook
track_received	FLARM/Traffic.hpp	/^  bool track_received;$/;"	m	class:FlarmTraffic::AircraftType
track_received	GliderLink/Traffic.hpp	/^  bool track_received;$/;"	m	struct:GliderLinkTraffic
tracking	Components.cpp	/^TrackingGlue *tracking;$/;"	v
tracking	Computer/Settings.hpp	/^  TrackingSettings tracking;$/;"	m	struct:ComputerSettings
tracking_intervals	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^static constexpr StaticEnumChoice tracking_intervals[] = {$/;"	v	file:
traffic	Cloud/Sender.hpp	/^    std::array<SkyLinesTracking::TrafficResponsePacket::Traffic, MAX_TRAFFIC> traffic;$/;"	m	struct:TrafficResponseSender::Packet
traffic	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
traffic	FLARM/Data.hpp	/^  TrafficList traffic;$/;"	m	struct:FlarmData
traffic	GliderLink/GliderLinkData.hpp	/^  GliderLinkTrafficList traffic;$/;"	m	struct:GliderLinkData
traffic	Look/Look.hpp	/^  TrafficLook traffic;$/;"	m	struct:Look
traffic	Tracking/SkyLines/Data.hpp	/^  std::map<uint32_t, Traffic> traffic;$/;"	m	struct:SkyLinesTracking::Data
traffic	UISettings.hpp	/^  TrafficSettings traffic;$/;"	m	struct:UISettings
traffic_alarm_icon	Look/MapLook.hpp	/^  MaskedIcon traffic_alarm_icon;$/;"	m	struct:MapLook
traffic_clock	Tracking/SkyLines/Glue.hpp	/^  GPSClock traffic_clock;$/;"	m	class:SkyLinesTracking::Glue
traffic_count	Tracking/SkyLines/Protocol.hpp	/^  uint8_t traffic_count;$/;"	m	struct:SkyLinesTracking::TrafficResponsePacket
traffic_databases	FLARM/Global.cpp	/^TrafficDatabases *traffic_databases;$/;"	v
traffic_enabled	Tracking/SkyLines/Glue.hpp	/^  bool traffic_enabled = false;$/;"	m	class:SkyLinesTracking::Glue
traffic_enabled	Tracking/SkyLines/Settings.hpp	/^  bool traffic_enabled;$/;"	m	struct:SkyLinesTracking::Settings
traffic_look	MapWindow/MapWindow.hpp	/^  const TrafficLook &traffic_look;$/;"	m	class:MapWindow
traffic_look	Renderer/MapItemListRenderer.hpp	/^  const TrafficLook &traffic_look;$/;"	m	class:MapItemListRenderer
traffic_safe_icon	Look/MapLook.hpp	/^  MaskedIcon traffic_safe_icon;$/;"	m	struct:MapLook
traffic_warning_icon	Look/MapLook.hpp	/^  MaskedIcon traffic_warning_icon;$/;"	m	struct:MapLook
trail	Look/MapLook.hpp	/^  TrailLook trail;$/;"	m	struct:MapLook
trail	MapSettings.hpp	/^  TrailSettings trail;$/;"	m	struct:MapSettings
trail_brushes	Look/TrailLook.hpp	/^  Brush trail_brushes[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
trail_length_list	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice trail_length_list[] = {$/;"	v	file:
trail_pens	Look/TrailLook.hpp	/^  Pen trail_pens[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
trail_renderer	MapWindow/MapWindow.hpp	/^  TrailRenderer trail_renderer;$/;"	m	class:MapWindow
trail_renderer	MapWindow/TargetMapWindow.hpp	/^  TrailRenderer trail_renderer;$/;"	m	class:TargetMapWindow
trail_renderer	Renderer/FlightStatisticsRenderer.hpp	/^  mutable TrailRenderer trail_renderer;$/;"	m	class:FlightStatisticsRenderer
trail_type_list	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice trail_type_list[] = {$/;"	v	file:
trail_widths	Look/TrailLook.hpp	/^  unsigned trail_widths[NUMSNAILCOLORS];$/;"	m	struct:TrailLook
traits	Geo/Boost/GeoPoint.hpp	/^namespace traits {$/;"	n	namespace:boost::geometry
transform	Topography/shapelib/mapserver.h	/^    int transform; \/* does this layer have to be transformed to file coordinates *\/$/;"	m	struct:layerObj
transform_mode	Topography/shapelib/mapserver.h	/^    enum MS_TRANSFORM_MODE transform_mode;$/;"	m	struct:rendererVTableObj	typeref:enum:rendererVTableObj::MS_TRANSFORM_MODE
translate	Screen/OpenGL/Globals.cpp	/^  PixelPoint translate;$/;"	m	namespace:OpenGL	file:
translation	Language/MOFile.hpp	/^    const char *original, *translation;$/;"	m	struct:MOFile::string_pair
translation_map	Language/Language.cpp	/^typedef std::map<tstring,tstring> translation_map;$/;"	t	file:
translation_table_offset	Language/MOFile.hpp	/^    uint32_t original_table_offset, translation_table_offset;$/;"	m	struct:MOFile::mo_header
translations	Language/Language.cpp	/^static translation_map translations;$/;"	v	file:
transparency	Renderer/AirspaceRendererSettings.hpp	/^  bool transparency;$/;"	m	struct:AirspaceRendererSettings
transparent	Gauge/ThermalAssistantWindow.hpp	/^  const bool transparent;$/;"	m	class:ThermalAssistantWindow
transparent	Screen/Window.hpp	/^  bool transparent = false;$/;"	m	class:Window
transparent	Topography/shapelib/mapserver.h	/^    int  transparent;$/;"	m	struct:__anon39
transparent	Topography/shapelib/mapserver.h	/^    int transparent; \/* TODO - Deprecated *\/$/;"	m	struct:mapObj
transparent	Topography/shapelib/mapserver.h	/^    int transparent;$/;"	m	struct:__anon54
transparent	Topography/shapelib/mapserver.h	/^    int transparent;$/;"	m	struct:__anon55
travelled	Engine/Task/Computer/ElementStatComputer.hpp	/^  DistanceStatComputer travelled;$/;"	m	class:ElementStatComputer
travelled	Engine/Task/Stats/ElementStat.hpp	/^  DistanceStat travelled;$/;"	m	struct:ElementStat
travelled_distance	Engine/Task/Computer/WindowStatsComputer.hpp	/^  DifferentialWindowFilter<60> travelled_distance;$/;"	m	class:WindowStatsComputer
treeAddShapeId	Topography/shapelib/maptree.c	/^static int treeAddShapeId(treeObj *tree, int id, rectObj rect)$/;"	f	file:
treeCollectShapeIds	Topography/shapelib/maptree.c	/^static void treeCollectShapeIds(treeNodeObj *node, rectObj aoi, ms_bitarray status)$/;"	f	file:
treeNodeAddShapeId	Topography/shapelib/maptree.c	/^static int treeNodeAddShapeId( treeNodeObj *node, int id, rectObj rect, int maxdepth)$/;"	f	file:
treeNodeCreate	Topography/shapelib/maptree.c	/^static treeNodeObj *treeNodeCreate(rectObj rect)$/;"	f	file:
treeNodeObj	Topography/shapelib/maptree.h	/^  } treeNodeObj;$/;"	t	typeref:struct:shape_tree_node
treeNodeTrim	Topography/shapelib/maptree.c	/^static int treeNodeTrim( treeNodeObj *node )$/;"	f	file:
treeObj	Topography/shapelib/maptree.h	/^  } treeObj;$/;"	t	typeref:struct:__anon87
treeSplitBounds	Topography/shapelib/maptree.c	/^static void treeSplitBounds( rectObj *in, rectObj *out1, rectObj *out2)$/;"	f	file:
tri_state	Dialogs/Device/Vega/HardwareParameters.hpp	/^static constexpr StaticEnumChoice tri_state[] = {$/;"	v
triangle_validator	Waypoint/WaypointListBuilder.hpp	/^  const FAITrianglePointValidator triangle_validator;$/;"	m	class:final
tricnt	Device/Driver/Volkslogger/grecord.h	/^  int  tricnt;$/;"	m	class:GRECORD
trigger	Event/Windows/Queue.hpp	/^  HANDLE trigger;$/;"	m	class:EventQueue
trigger_cond	Thread/WorkerThread.hpp	/^  Cond trigger_cond;$/;"	m	class:WorkerThread
trigger_flag	Thread/WorkerThread.hpp	/^  bool trigger_flag = false;$/;"	m	class:WorkerThread
trigger_redraw	Input/InputEventsActions.cpp	/^trigger_redraw()$/;"	f	file:
trigger_redraw	Input/InputEventsTask.cpp	/^trigger_redraw()$/;"	f	file:
trim_inplace	Util/tstring.cpp	/^trim_inplace(tstring &s)$/;"	f
trm	IGC/IGCFix.hpp	/^  int16_t trm;$/;"	m	struct:IGCFix
trt	IGC/IGCFix.hpp	/^  int16_t trt;$/;"	m	struct:IGCFix
true	Dialogs/WidgetDialog.cpp	/^   full(true), auto_size(false)$/;"	v
true	Terrain/jasper/jas_types.h	118;"	d
true_airspeed	Engine/Navigation/Aircraft.hpp	/^  double true_airspeed;$/;"	m	struct:SpeedState
true_airspeed	NMEA/Info.hpp	/^  double true_airspeed;$/;"	m	struct:NMEAInfo
true_text	Form/DataField/Boolean.hpp	/^  StaticString<32> true_text;$/;"	m	class:final
try_lock	Thread/WindowsSharedMutex.hxx	/^	bool try_lock() {$/;"	f	class:WindowsSharedMutex
try_lock_shared	Thread/WindowsSharedMutex.hxx	/^	bool try_lock_shared() {$/;"	f	class:WindowsSharedMutex
tsfb	Terrain/jasper/jpc/jpc_dec.h	/^	jpc_tsfb_t *tsfb;$/;"	m	struct:__anon149
tshow	PopupMessage.hpp	/^    std::chrono::steady_clock::duration tshow; \/\/ time message is visible for$/;"	m	struct:PopupMessage::Message
tskDay	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tskDay, tskMonth;$/;"	m	struct:IMI::TDeclarationHeader
tskMonth	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE tskDay, tskMonth;$/;"	m	struct:IMI::TDeclarationHeader
tskName	Device/Driver/IMI/Protocol/Types.hpp	/^    IMICHAR tskName[IMIDECL_TASK_NAME_LENGTH];$/;"	m	struct:IMI::TDeclarationHeader
tskNumber	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD tskNumber;$/;"	m	struct:IMI::TDeclarationHeader
tskYear	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIWORD tskYear;$/;"	m	struct:IMI::TDeclarationHeader
tty_fd	Screen/Custom/TopCanvas.hpp	/^  int tty_fd;$/;"	m	class:DisplayOrientation
tuesday	Engine/Airspace/AirspaceActivity.hpp	/^    bool tuesday:1;$/;"	m	struct:AirspaceActivity::Days
tunnel_icon	Look/WaypointLook.hpp	/^  MaskedIcon tower_icon, power_plant_icon, tunnel_icon, thermal_hotspot_icon;$/;"	m	struct:WaypointLook
tuple_size	NMEA/LiftDatabase.hpp	/^  class tuple_size<LiftDatabase> : public integral_constant<size_t, 36> {$/;"	c	namespace:std
turn_mode	NMEA/CirclingInfo.hpp	/^  CirclingMode turn_mode;$/;"	m	struct:CirclingInfo
turn_point	Engine/Waypoint/Waypoint.hpp	/^    bool turn_point:1;$/;"	m	struct:Waypoint::Flags
turn_point_icon	Look/WaypointLook.hpp	/^  MaskedIcon small_icon, turn_point_icon, task_turn_point_icon;$/;"	m	struct:WaypointLook
turn_rate	FLARM/Traffic.hpp	/^  double turn_rate;$/;"	m	class:FlarmTraffic::AircraftType
turn_rate	NMEA/CirclingInfo.hpp	/^  Angle turn_rate;$/;"	m	struct:CirclingInfo
turn_rate_delta_time	Computer/CirclingComputer.hpp	/^  DeltaTime turn_rate_delta_time;$/;"	m	class:CirclingComputer
turn_rate_heading	NMEA/CirclingInfo.hpp	/^  Angle turn_rate_heading;$/;"	m	struct:CirclingInfo
turn_rate_heading_smoothed	NMEA/CirclingInfo.hpp	/^  Angle turn_rate_heading_smoothed;$/;"	m	struct:CirclingInfo
turn_rate_received	FLARM/Traffic.hpp	/^  bool turn_rate_received;$/;"	m	class:FlarmTraffic::AircraftType
turn_rate_smoothed	NMEA/CirclingInfo.hpp	/^  Angle turn_rate_smoothed;$/;"	m	struct:CirclingInfo
turn_speed	Replay/TaskAutoPilot.hpp	/^  double turn_speed;$/;"	m	struct:AutopilotParameters
turn_start_altitude	Computer/CirclingComputer.hpp	/^  double turn_start_altitude;$/;"	m	class:CirclingComputer
turn_start_energy_height	Computer/CirclingComputer.hpp	/^  double turn_start_energy_height;$/;"	m	class:CirclingComputer
turn_start_location	Computer/CirclingComputer.hpp	/^  GeoPoint turn_start_location;$/;"	m	class:CirclingComputer
turn_start_time	Computer/CirclingComputer.hpp	/^  double turn_start_time;$/;"	m	class:CirclingComputer
turning	NMEA/CirclingInfo.hpp	/^  bool turning;$/;"	m	struct:CirclingInfo
turning_delta_time	Computer/CirclingComputer.hpp	/^  DeltaTime turning_delta_time;$/;"	m	class:CirclingComputer
turnpoint_radius	Engine/Task/TaskBehaviour.hpp	/^  double turnpoint_radius;$/;"	m	struct:SectorDefaults
turnpoint_type	Engine/Task/TaskBehaviour.hpp	/^  TaskPointFactoryType turnpoint_type;$/;"	m	struct:SectorDefaults
turnpoints	Device/Declaration.hpp	/^  std::vector<TurnPoint> turnpoints;$/;"	m	struct:Declaration
turnpoints	Device/Driver/Volkslogger/vlapi2.h	/^      DCLWPT turnpoints[12];$/;"	m	struct:VLAPI_DATA::DECLARATION::TASK
two_ms_sink_at_speed	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t two_ms_sink_at_speed;$/;"	m	struct:CAI302::Polar
two_widgets	Dialogs/ListPicker.cpp	/^  TwoWidgets *two_widgets;$/;"	m	class:ListPickerWidget	file:
two_widgets	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  TwoWidgets *two_widgets;$/;"	m	class:TaskEditPanel	file:
two_widgets	Dialogs/Task/Manager/TaskListPanel.cpp	/^  TwoWidgets *two_widgets;$/;"	m	class:final	file:
tx	FLARM/Status.hpp	/^  bool tx;$/;"	m	struct:FlarmStatus
txt	Terrain/jasper/jas_icc.h	/^		jas_icctxt_t txt;$/;"	m	union:jas_iccattrval_s::__anon188
txtdesc	Terrain/jasper/jas_icc.h	/^		jas_icctxtdesc_t txtdesc;$/;"	m	union:jas_iccattrval_s::__anon188
typ	Device/Driver/Volkslogger/vlapi2.h	/^    uint8_t typ; \/\/ type(attributes) of WPT, or-combination of enum WPTTYP$/;"	m	struct:VLAPI_DATA::WPT
typ	Device/Driver/Volkslogger/vlconv.cpp	/^  int typ;$/;"	m	class:C2	file:
type	Airspace/AirspaceParser.cpp	/^  AirspaceClass type;$/;"	m	struct:AirspaceClassCharCouple	file:
type	Airspace/AirspaceParser.cpp	/^  AirspaceClass type;$/;"	m	struct:AirspaceClassStringCouple	file:
type	Airspace/AirspaceParser.cpp	/^  AirspaceClass type;$/;"	m	struct:TempAirspaceType	file:
type	Device/Driver/CAI302/Protocol.hpp	/^    char type;$/;"	m	struct:CAI302::GeneralInfo
type	Device/Driver/FLARM/BinaryProtocol.hpp	/^    uint8_t type;$/;"	m	struct:FLARM::FrameHeader
type	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIBYTE type:4;$/;"	m	struct:IMI::FixE
type	Device/Driver/LX/LXN.hpp	/^    uint8_t length, type;$/;"	m	struct:LXN::Security
type	Dialogs/Airspace/AirspaceCRendererSettingsPanel.hpp	/^  AirspaceClass type;$/;"	m	class:AirspaceClassRendererSettingsPanel
type	Dialogs/Airspace/AirspaceList.cpp	/^  unsigned type;$/;"	m	struct:AirspaceListWidgetState	file:
type	Dialogs/Device/DeviceEditWidget.cpp	/^  DeviceConfig::PortType type;$/;"	m	struct:__anon10	file:
type	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    DataField::Type type;$/;"	m	struct:VegaParametersWidget::StaticParameter
type	Dialogs/Weather/PCMetDialog.cpp	/^  const PCMet::ImageType *type = nullptr;$/;"	m	class:final	file:
type	Engine/Airspace/AbstractAirspace.hpp	/^  AirspaceClass type;$/;"	m	class:AbstractAirspace
type	Engine/Task/Points/TaskPoint.hpp	/^  TaskPointType type;$/;"	m	class:TaskPoint
type	Engine/Task/TaskInterface.hpp	/^  const TaskType type;$/;"	m	class:TaskInterface
type	Engine/Waypoint/Waypoint.hpp	/^  Type type;$/;"	m	struct:Waypoint
type	Event/Shared/Event.hpp	/^  Type type;$/;"	m	struct:Event
type	FLARM/Traffic.hpp	/^  AircraftType type;$/;"	m	class:FlarmTraffic::AircraftType
type	Form/DataField/Base.hpp	/^  const Type type;$/;"	m	class:DataField
type	Form/DigitEntry.hpp	/^    Type type;$/;"	m	struct:CoordinateFormat::Column
type	Input/InputParser.cpp	/^  StaticString<256> type, data, label;$/;"	m	struct:EventBuilder	file:
type	MapSettings.hpp	/^  } type;$/;"	m	struct:TrailSettings	typeref:class:TrailSettings::Type
type	MapWindow/Items/MapItem.hpp	/^  } type;$/;"	m	class:TaskPointType	typeref:enum:TaskPointType::Type
type	Plane/Plane.hpp	/^  StaticString<32> type;$/;"	m	struct:Plane
type	PopupMessage.hpp	/^    Type type;$/;"	m	struct:PopupMessage::Message
type	Repository/AvailableFile.hpp	/^  FileType type;$/;"	m	struct:AvailableFile
type	Screen/Bitmap.hpp	/^  Type type;$/;"	m	class:final
type	Terrain/jasper/jas_icc.h	/^	jas_iccsig_t type; \/* type *\/$/;"	m	struct:jas_iccattrval_s
type	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t type;$/;"	m	struct:__anon194
type	Terrain/jasper/jp2/jp2_cod.h	/^	int type;$/;"	m	struct:jp2_boxinfo_s
type	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast16_t type;$/;"	m	struct:__anon113
type	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t type;$/;"	m	struct:__anon117
type	Terrain/jasper/jpc/jpc_dec.h	/^	int type;$/;"	m	struct:jpc_dec_seg_s
type	Topography/XShape.hpp	/^  uint8_t type;$/;"	m	class:XShape
type	Topography/shapelib/mapprimitive.h	/^  int type; \/* MS_SHAPE_TYPE *\/$/;"	m	struct:__anon79
type	Topography/shapelib/mapprimitive.h	/^  long type;$/;"	m	struct:__anon80
type	Topography/shapelib/mapserver.h	/^    enum MS_JOIN_TYPE type;$/;"	m	struct:__anon38	typeref:enum:__anon38::MS_JOIN_TYPE
type	Topography/shapelib/mapserver.h	/^    enum MS_LAYER_TYPE type;$/;"	m	struct:layerObj	typeref:enum:layerObj::MS_LAYER_TYPE
type	Topography/shapelib/mapserver.h	/^    int type; \/* MS_QUERY_TYPE *\/$/;"	m	struct:__anon40
type	Topography/shapelib/mapserver.h	/^    int type; \/* type of parse: boolean, string\/text or shape\/geometry *\/$/;"	m	struct:__anon36
type	Topography/shapelib/mapserver.h	/^    int type;$/;"	m	struct:__anon35
type	Topography/shapelib/mapshape.h	/^    int type; \/* shapefile type *\/$/;"	m	struct:__anon85
type	Tracking/SkyLines/Protocol.hpp	/^  uint16_t type;$/;"	m	struct:SkyLinesTracking::Header
type	Weather/PCMet/Overlays.hpp	/^  Type type;$/;"	m	struct:PCMet::OverlayInfo
type	Widget/RowFormWidget.hpp	/^    Type type;$/;"	m	struct:RowFormWidget::Row
type	XML/Parser.cpp	/^    TokenTypeTag type;$/;"	m	struct:XML::NextToken	file:
type	zzip/plugin.h	/^    long         type;$/;"	m	struct:zzip_plugin_io
type_	Terrain/jasper/jas_image.h	/^	jas_image_cmpttype_t type_;$/;"	m	struct:__anon123
type_and_longitude_sign	Device/Driver/Volkslogger/Database.hpp	/^    uint8_t type_and_longitude_sign;$/;"	m	struct:Volkslogger::Waypoint
type_filter_items	Dialogs/Waypoint/WaypointList.cpp	/^static const TCHAR *const type_filter_items[] = {$/;"	v	file:
type_filter_list	Dialogs/Airspace/AirspaceList.cpp	/^static constexpr StaticEnumChoice type_filter_list[] = {$/;"	v	file:
type_index	Dialogs/Waypoint/WaypointList.cpp	/^  TypeFilter type_index;$/;"	m	struct:WaypointListDialogState	file:
type_index	Waypoint/WaypointFilter.hpp	/^  TypeFilter type_index;$/;"	m	struct:WaypointFilter
type_label	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect type_label, change_type;$/;"	m	struct:final::Layout	file:
type_label	Dialogs/Task/TaskPointDialog.cpp	/^  WndFrame type_label;$/;"	m	class:final	file:
type_labels	Weather/PCMet/Overlays.cpp	/^static constexpr const TCHAR *type_labels[] = {$/;"	v	file:
type_names	Weather/PCMet/Overlays.cpp	/^static constexpr const char *type_names[] = {$/;"	v	file:
u	Screen/Memory/Murphy.hpp	/^  int u, v;$/;"	m	struct:MurphyIterator
ucdata	Terrain/jasper/jas_icc.h	/^	jas_uchar *ucdata; \/* Unicode localizable description *\/$/;"	m	struct:__anon183
uchar	Topography/shapelib/mapshape.h	/^  typedef unsigned char uchar;$/;"	t
uclangcode	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t uclangcode; \/* Unicode language code *\/$/;"	m	struct:__anon183
uclen	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t uclen; \/* Unicode localizable description count *\/$/;"	m	struct:__anon183
ud	Event/Poll/LibInput/UdevContext.hpp	/^  struct udev *ud;$/;"	m	class:UdevContext	typeref:struct:UdevContext::udev
udev_context	Event/Poll/LibInput/LibInputHandler.hpp	/^  UdevContext* udev_context = nullptr;$/;"	m	class:final
udev_context_mutex	Event/Poll/LibInput/UdevContext.cpp	/^static Mutex udev_context_mutex;$/;"	v	file:
udev_root_context	Event/Poll/LibInput/UdevContext.cpp	/^static UdevContext *udev_root_context = nullptr;$/;"	v	file:
ui_generation	MapWindow/MapWindow.hpp	/^  unsigned ui_generation = 1, buffer_generation = 0;$/;"	m	class:MapWindow
ui_settings	Blackboard/SettingsBlackboard.hpp	/^  UISettings ui_settings;$/;"	m	class:SettingsBlackboard
ui_state	Interface.cpp	/^UIState CommonInterface::Private::ui_state;$/;"	m	class:CommonInterface::Private	file:
ui_state	MapWindow/MapWindowBlackboard.hpp	/^  UIState ui_state;$/;"	m	class:MapWindowBlackboard
uint16_t	zzip/stdint.h	/^    typedef unsigned int uint16_t;      typedef signed int int16_t;$/;"	t
uint16_t	zzip/stdint.h	/^    typedef unsigned short uint16_t;    typedef signed short int16_t;$/;"	t
uint32_t	zzip/stdint.h	/^    typedef unsigned int uint32_t;      typedef signed int int32_t;$/;"	t
uint32_t	zzip/stdint.h	/^    typedef unsigned long uint32_t;     typedef signed long int32_t;$/;"	t
uint64_t	zzip/stdint.h	/^typedef unsigned _zzip___int64 uint64_t; typedef _zzip___int64 int64_t;$/;"	t
uint8_t	Engine/Airspace/AirspaceClass.hpp	/^enum AirspaceClass : uint8_t$/;"	g
uint8_t	FLARM/Error.hpp	/^  enum Code : uint8_t {$/;"	g
uint8_t	Renderer/TextInBox.hpp	/^  enum VerticalPosition : uint8_t {$/;"	g
uint8_t	zzip/stdint.h	/^    typedef unsigned char uint8_t;      typedef signed char int8_t;$/;"	t
unallocated_list	Util/Cache.hxx	/^	ItemList unallocated_list;$/;"	m	class:Cache
uncompressed	Screen/Bitmap.hpp	/^  UncompressedImage uncompressed;$/;"	m	class:final
unique_links	Engine/Route/RoutePlanner.hpp	/^  RouteLinkSet unique_links;$/;"	m	class:RoutePlanner
unit	Form/DataField/Float.hpp	/^  StaticString<8> unit;$/;"	m	class:final
unit_descriptors	Units/Descriptor.cpp	/^const UnitDescriptor Units::unit_descriptors[] = {$/;"	m	class:Units	file:
unit_font	Look/InfoBoxLook.hpp	/^  Font unit_font;$/;"	m	struct:InfoBoxLook
unit_font	Look/VarioLook.hpp	/^  Font unit_font;$/;"	m	struct:VarioLook
unit_fraction_pen	Look/FlarmTrafficLook.hpp	/^  Pen unit_fraction_pen;$/;"	m	struct:FlarmTrafficLook
unit_fraction_pen	Look/InfoBoxLook.hpp	/^  Pen unit_fraction_pen;$/;"	m	struct:InfoBoxLook
unit_fraction_pen	Look/VarioLook.hpp	/^  Pen unit_fraction_pen;$/;"	m	struct:VarioLook
unit_width	InfoBoxes/InfoBoxWindow.hpp	/^  unsigned unit_width = 0;$/;"	m	class:InfoBoxWindow
unit_word	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t unit_word;$/;"	m	struct:CAI302::Pilot
units	FormatSettings.hpp	/^  UnitSetting units;$/;"	m	struct:FormatSettings
units	Topography/shapelib/mapserver.h	/^    enum MS_UNITS units; \/* units of the projection *\/$/;"	m	struct:mapObj	typeref:enum:mapObj::MS_UNITS
units	Topography/shapelib/mapserver.h	/^    int units; \/* units of the projection *\/$/;"	m	struct:layerObj
units	Topography/shapelib/mapserver.h	/^    int units;$/;"	m	struct:__anon54
unk	Terrain/jasper/jpc/jpc_cs.h	/^	jpc_unk_t unk;$/;"	m	union:__anon178
unknown1	Device/Driver/LX/Protocol.hpp	/^    uint8_t unknown1[3];$/;"	m	struct:LX::Pilot
unknown1	Device/Driver/LX/Protocol.hpp	/^    uint8_t unknown1[5];$/;"	m	struct:LX::Declaration
unknown1	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t unknown1[3];$/;"	m	struct:LXEra::Pilot
unknown1	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t unknown1[5];$/;"	m	struct:LXEra::Declaration
unknown2	Device/Driver/LX/Protocol.hpp	/^    uint8_t unknown2[73];$/;"	m	struct:LX::Pilot
unknown2	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t unknown2[73];$/;"	m	struct:LXEra::Pilot
unlock	Thread/WindowsSharedMutex.hxx	/^	void unlock() {$/;"	f	class:WindowsSharedMutex
unlock_shared	Thread/WindowsSharedMutex.hxx	/^	void unlock_shared() {$/;"	f	class:WindowsSharedMutex
unmap_buffer	Screen/OpenGL/Dynamic.cpp	/^  PFNGLUNMAPBUFFEROESPROC unmap_buffer;$/;"	m	namespace:GLExt	file:
unpowered_at	Computer/FlyingComputer.hpp	/^  GeoPoint unpowered_at;$/;"	m	class:FlyingComputer
unpowered_since	Computer/FlyingComputer.hpp	/^  double unpowered_since;$/;"	m	class:FlyingComputer
unreachable_brush	Look/WaypointLook.hpp	/^  Brush reachable_brush, terrain_unreachable_brush, unreachable_brush;$/;"	m	struct:WaypointLook
unscaled	Renderer/ChartRenderer.hpp	/^    bool unscaled;$/;"	m	struct:ChartRenderer::Axis
until	Device/Port/DumpPort.hpp	/^  std::chrono::steady_clock::time_point until =$/;"	m	class:final
up	Dialogs/Task/Manager/TaskEditPanel.cpp	/^    PixelRect edit, down, up, reverse, clear_all;$/;"	m	struct:final::Layout	file:
up_button	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  Button down_button, up_button;$/;"	m	class:final	file:
update	Device/Driver/Volkslogger/grecord.cpp	/^GRECORD::update(uint8_t b)$/;"	f	class:GRECORD
update	Engine/Task/Computer/TaskVarioComputer.cpp	/^TaskVarioComputer::update(TaskVario &data, const GlideResult &solution)$/;"	f	class:TaskVarioComputer
update	Engine/Task/Stats/TaskSummary.hpp	/^  void update(double d_remaining, double d_planned) {$/;"	f	struct:TaskSummary
update	InfoBoxes/Content/Factory.cpp	/^  void (*update)(InfoBoxData &data);$/;"	m	class:InfoBoxContentCallback	file:
update	InfoBoxes/Content/Factory.cpp	/^  void (*update)(InfoBoxData &data);$/;"	m	struct:MetaData	file:
update_button	Dialogs/FileManager.cpp	/^  Button *download_button, *add_button, *cancel_button, *update_button;$/;"	m	class:ManagedFileListWidget	file:
update_button	Dialogs/Weather/MapOverlayWidget.cpp	/^  Button *use_button, *disable_button, *update_button;$/;"	m	class:final	file:
update_button	Dialogs/Weather/NOAAList.cpp	/^  Button *details_button, *add_button, *update_button, *remove_button;$/;"	m	class:final	file:
update_clock	Computer/Wind/Store.hpp	/^  double update_clock;$/;"	m	class:WindStore
update_date	Repository/AvailableFile.hpp	/^  BrokenDate update_date;$/;"	m	struct:AvailableFile
update_error	Operation/ThreadedOperationEnvironment.hpp	/^    bool update_error;$/;"	m	struct:ThreadedOperationEnvironment::Data
update_marker	Screen/FB/mxcfb.h	/^	__u32 update_marker;$/;"	m	struct:mxcfb_update_data
update_mode	Screen/FB/mxcfb.h	/^	__u32 update_mode;$/;"	m	struct:mxcfb_update_data
update_progress_position	Operation/ThreadedOperationEnvironment.hpp	/^    bool update_text, update_progress_range, update_progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
update_progress_range	Operation/ThreadedOperationEnvironment.hpp	/^    bool update_text, update_progress_range, update_progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
update_region	Screen/FB/mxcfb.h	/^	struct mxcfb_rect update_region;$/;"	m	struct:mxcfb_update_data	typeref:struct:mxcfb_update_data::mxcfb_rect
update_text	Operation/ThreadedOperationEnvironment.hpp	/^    bool update_text, update_progress_range, update_progress_position;$/;"	m	struct:ThreadedOperationEnvironment::Data
updated	Computer/Wind/Store.hpp	/^  bool updated;$/;"	m	class:WindStore
upper_hull	Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> upper_hull;$/;"	m	class:GrahamScan
upper_partition_points	Geo/ConvexHull/GrahamScan.hpp	/^  std::vector<SearchPoint*> upper_partition_points;$/;"	m	class:GrahamScan
upper_right	Geo/Flat/FlatBoundingBox.hpp	/^  FlatGeoPoint upper_right;$/;"	m	struct:FlatBoundingBox
uri	Net/HTTP/DownloadManager.cpp	/^    std::string uri;$/;"	m	struct:final::Item	file:
uri	Repository/AvailableFile.hpp	/^  std::string uri;$/;"	m	struct:AvailableFile
uri	Weather/PCMet/Images.hpp	/^    const char *uri;$/;"	m	struct:PCMet::ImageType
url	Net/HTTP/ToBuffer.hpp	/^    const char *url;$/;"	m	class:Net::DownloadToBufferJob
url	Net/HTTP/ToFile.hpp	/^    const char *url;$/;"	m	class:Net::DownloadToFileJob
url	Weather/Rasp/Providers.hpp	/^  const char *url;$/;"	m	struct:RaspProvider
uround	Math/Util.hpp	/^uround(const double x)$/;"	f
usage	Device/Driver/LX/LXN.hpp	/^    uint8_t usage[12];$/;"	m	struct:LXN::Task
usage	OS/Args.hpp	/^  const char *name, *usage;$/;"	m	class:Args
use_bitmap_alpha	MapWindow/OverlayBitmap.hpp	/^  bool use_bitmap_alpha = true;$/;"	m	class:final
use_button	Dialogs/Weather/MapOverlayWidget.cpp	/^  Button *use_button, *disable_button, *update_button;$/;"	m	class:final	file:
use_ceiling	Engine/Route/Config.hpp	/^  bool use_ceiling;$/;"	m	struct:RoutePlannerConfig
use_colors	InfoBoxes/InfoBoxSettings.hpp	/^  bool inverse, use_colors;$/;"	m	struct:InfoBoxSettings
use_final_glide	InfoBoxes/InfoBoxSettings.hpp	/^  bool use_final_glide;$/;"	m	struct:InfoBoxSettings
use_geoid	Device/Parser.hpp	/^  bool use_geoid;$/;"	m	class:NMEAParser
use_imagecache	Topography/shapelib/mapserver.h	/^    int use_imagecache;$/;"	m	struct:rendererVTableObj
use_second_device	Device/Config.hpp	/^  bool use_second_device;$/;"	m	struct:DeviceConfig
use_stencil	MapWindow/StencilMapCanvas.hpp	/^  bool use_stencil;$/;"	m	class:StencilMapCanvas
usegetshape	Topography/shapelib/mapserver.h	/^    int usegetshape;$/;"	m	struct:__anon51
useluts	Terrain/jasper/jas_cm.h	/^	int useluts;$/;"	m	struct:__anon98
usemat	Terrain/jasper/jas_cm.h	/^	int usemat;$/;"	m	struct:__anon98
user_coordinate_format	Formatter/UserGeoPointFormatter.cpp	/^static CoordinateFormat user_coordinate_format = CoordinateFormat::DDMMSS;$/;"	v	file:
user_id	Tracking/SkyLines/Protocol.hpp	/^  uint32_t user_id;$/;"	m	struct:SkyLinesTracking::UserNameRequestPacket
user_id	Tracking/SkyLines/Protocol.hpp	/^  uint32_t user_id;$/;"	m	struct:SkyLinesTracking::UserNameResponsePacket
user_idle_clock	Event/Idle.cpp	/^static PeriodClock user_idle_clock;$/;"	v	file:
user_names	Tracking/SkyLines/Data.hpp	/^  std::map<uint32_t, tstring> user_names;$/;"	m	struct:SkyLinesTracking::Data
user_switch	NMEA/SwitchState.hpp	/^  UserSwitch user_switch;$/;"	m	struct:SwitchState
user_switch_list	Dialogs/Device/Vega/SwitchesDialog.cpp	/^static constexpr StaticEnumChoice user_switch_list[] = {$/;"	v	file:
username	Net/HTTP/ToBuffer.hpp	/^    const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToBufferJob
username	Net/HTTP/ToFile.hpp	/^    const char *username = nullptr, *password = nullptr;$/;"	m	class:Net::DownloadToFileJob
username	Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> username;$/;"	m	struct:LiveTrack24::Settings
username	Weather/PCMet/Settings.hpp	/^    StaticString<64> username;$/;"	m	struct:PCMetSettings::Credentials
usize	zzip/file.h	/^    zzip_size_t usize;$/;"	m	struct:zzip_file
utc_offset	Computer/Settings.hpp	/^  RoughTimeDelta utc_offset;$/;"	m	struct:ComputerSettings
utc_offset	Renderer/MapItemListRenderer.hpp	/^  const RoughTimeDelta utc_offset;$/;"	m	class:MapItemListRenderer
utfdata	Topography/shapelib/mapserver.h	/^    expressionObj utfdata;$/;"	m	struct:layerObj
utfitem	Topography/shapelib/mapserver.h	/^    char *utfitem;$/;"	m	struct:layerObj
utfitemindex	Topography/shapelib/mapserver.h	/^    int utfitemindex;$/;"	m	struct:layerObj
util_class	Android/DownloadManager.cpp	/^static Java::TrivialClass util_class;$/;"	v	file:
v	Dialogs/Plane/PolarShapeEditWidget.hpp	/^    WndProperty *v, *w;$/;"	m	struct:PolarShapeEditWidget::PointEditor
v	Polar/Shape.hpp	/^  double v;$/;"	m	struct:PolarPoint
v	Screen/Memory/Murphy.hpp	/^  int u, v;$/;"	m	struct:MurphyIterator
v	Screen/OpenGL/VertexArray.hpp	/^  BulkPixelPoint v[SIZE];$/;"	m	struct:GLVertexArray
v	UIUtil/KineticManager.hpp	/^  double v;$/;"	m	class:KineticManager
v1	Polar/PolarStore.hpp	/^    double v1;$/;"	m	struct:PolarStore::Item
v2	Polar/PolarStore.hpp	/^    double v2;$/;"	m	struct:PolarStore::Item
v3	Polar/PolarStore.hpp	/^    double v3;$/;"	m	struct:PolarStore::Item
v7_setting_names	Dialogs/Device/LX/V7ConfigWidget.cpp	/^static const char *const v7_setting_names[] = {$/;"	v	file:
v7_settings	Device/Driver/LX/Internal.hpp	/^  DeviceSettingsMap<std::string> v7_settings;$/;"	m	class:LXDevice
v7_settings	Device/Driver/LXERA/Internal.hpp	/^  DeviceSettingsMap<std::string> v7_settings;$/;"	m	class:LXEraDevice
v8context	Topography/shapelib/mapserver.h	/^    void *v8context;$/;"	m	struct:mapObj
v_alt	Engine/Util/AircraftStateFilter.hpp	/^  double v_x, v_y, v_alt;$/;"	m	class:AircraftStateFilter
v_label	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  WndFrame *v_label, *w_label;$/;"	m	class:PolarShapeEditWidget
v_lpf	Engine/Task/Computer/IncrementalSpeedComputer.hpp	/^  Filter v_lpf;$/;"	m	class:IncrementalSpeedComputer
v_lpf	Engine/Task/Computer/TaskVarioComputer.hpp	/^  Filter v_lpf;$/;"	m	class:TaskVarioComputer
v_no	Polar/Polar.hpp	/^  double v_no;         \/**< Maximum speed for normal operations (m\/s) *\/$/;"	m	struct:PolarInfo
v_no	Polar/PolarStore.hpp	/^    double v_no;$/;"	m	struct:PolarStore::Item
v_opt	Engine/GlideSolvers/GlideResult.hpp	/^  double v_opt;$/;"	m	struct:GlideResult
v_padding	Gauge/FlarmTrafficWindow.hpp	/^  const unsigned h_padding, v_padding;$/;"	m	class:FlarmTrafficWindow
v_x	Engine/Util/AircraftStateFilter.hpp	/^  double v_x, v_y, v_alt;$/;"	m	class:AircraftStateFilter
v_y	Engine/Util/AircraftStateFilter.hpp	/^  double v_x, v_y, v_alt;$/;"	m	class:AircraftStateFilter
val	Terrain/jasper/jas_icc.h	/^	jas_iccattrval_t *val;$/;"	m	struct:__anon190
val	Terrain/jasper/jas_tvp.h	/^	const char *val;$/;"	m	struct:__anon106
valid	Computer/GlideRatioCalculator.hpp	/^  bool valid;$/;"	m	class:GlideRatioCalculator
valid	Device/Driver/LX/Protocol.hpp	/^    uint8_t valid;$/;"	m	struct:LX::FlightInfo
valid	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t valid;$/;"	m	struct:LXEra::FlightInfo
valid	Device/Port/TTYPort.hpp	/^  std::atomic<bool> valid;$/;"	m	class:TTYPort
valid	Engine/Route/RoutePolar.hpp	/^    bool valid;$/;"	m	struct:RoutePolar::RoutePolarPoint
valid	Engine/Task/Ordered/Points/IntermediatePoint.hpp	/^  bool valid() const {$/;"	f	class:IntermediateTaskPoint
valid	Engine/Task/Solvers/TaskBestMc.cpp	/^TaskBestMc::valid(const double mc) const$/;"	f	class:TaskBestMc
valid	Engine/Task/Solvers/TaskMinTarget.cpp	/^TaskMinTarget::valid(const double tp)$/;"	f	class:TaskMinTarget
valid	Engine/Task/Solvers/TaskOptTarget.cpp	/^TaskOptTarget::valid(const double tp)$/;"	f	class:TaskOptTarget
valid	FLARM/Traffic.hpp	/^  Validity valid;$/;"	m	class:FlarmTraffic::AircraftType
valid	Form/DigitEntry.hpp	/^  bool valid;$/;"	m	class:CoordinateFormat
valid	GliderLink/Traffic.hpp	/^  Validity valid;$/;"	m	struct:GliderLinkTraffic
valid	PageSettings.hpp	/^  bool valid;$/;"	m	struct:PageLayout
valid	Task/TaskFileSeeYou.cpp	/^  bool valid;$/;"	m	struct:SeeYouTurnpointInformation	file:
valid	Task/TaskStore.hpp	/^    bool valid;$/;"	m	struct:TaskStore::Item
valid	Terrain/jasper/jpc/jpc_t2cod.h	/^	bool valid;$/;"	m	struct:__anon138
valid_bytes	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t valid_bytes;$/;"	m	struct:CAI302::FileData
valid_last_state	Computer/TaskComputer.hpp	/^  bool valid_last_state;$/;"	m	class:TaskComputer
valid_time	Weather/PCMet/Overlays.hpp	/^  BrokenDateTime run_time, valid_time;$/;"	m	struct:PCMet::Overlay
validate	Terrain/jasper/jas_image.h	/^	int (*validate)(jas_stream_t *in);$/;"	m	struct:__anon126
validation	Topography/shapelib/mapserver.h	/^    hashTableObj validation;$/;"	m	struct:__anon42
validation	Topography/shapelib/mapserver.h	/^    hashTableObj validation;$/;"	m	struct:classObj
validation	Topography/shapelib/mapserver.h	/^    hashTableObj validation;$/;"	m	struct:layerObj
validation_error_strings	Task/ValidationErrorStrings.cpp	/^static const TCHAR *const validation_error_strings[] = {$/;"	v	file:
validation_errors	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  TaskValidationErrorSet validation_errors;$/;"	m	class:AbstractTaskFactory
validity	Engine/GlideSolvers/GlideResult.hpp	/^  Validity validity;$/;"	m	struct:GlideResult
validstates	Terrain/jasper/jpc/jpc_dec.c	/^	int validstates;$/;"	m	struct:__anon154	file:
value	Atmosphere/Pressure.hpp	/^  double value;$/;"	m	class:AtmosphericPressure
value	Atmosphere/Temperature.hpp	/^  double value;$/;"	m	class:Temperature
value	Computer/StateClock.hpp	/^  double value;$/;"	m	class:StateClock
value	Device/Driver/IMI/Protocol/Conversion.hpp	/^      IMIDWORD value;$/;"	m	union:IMI::AngleConverter::__anon199
value	Device/Driver/LX/LXN.hpp	/^    char value[0];$/;"	m	struct:LXN::String
value	Device/SettingsMap.hpp	/^    V value;$/;"	m	struct:DeviceSettingsMap::Item
value	Dialogs/Device/Vega/VegaParametersWidget.hpp	/^    int value;$/;"	m	struct:VegaParametersWidget::Parameter
value	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  PageLayout value;$/;"	m	class:final	file:
value	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^  Waypoint value;$/;"	m	class:final	file:
value	Engine/Airspace/AirspaceActivity.hpp	/^    unsigned char value;$/;"	m	union:AirspaceActivity::__anon205
value	Engine/PathSolvers/Dijkstra.hpp	/^      :parent(_parent), value(_value) {}$/;"	f	struct:Dijkstra::Edge
value	Engine/PathSolvers/Dijkstra.hpp	/^    unsigned value;$/;"	m	struct:Dijkstra::Edge
value	Engine/PathSolvers/ScanTaskPoint.hpp	/^    :value((stage_number << 16) | point_index) {}$/;"	f	class:ScanTaskPoint
value	Engine/PathSolvers/ScanTaskPoint.hpp	/^  uint32_t value;$/;"	m	class:ScanTaskPoint
value	Engine/Task/Stats/TaskVario.hpp	/^  double value;$/;"	m	class:TaskVario
value	FLARM/FlarmId.hpp	/^  uint32_t value;$/;"	m	class:FlarmId
value	Form/DataField/Angle.hpp	/^  unsigned value;$/;"	m	class:final
value	Form/DataField/Enum.hpp	/^  unsigned int value;$/;"	m	class:final
value	Form/DataField/GeoPoint.hpp	/^  GeoPoint value;$/;"	m	class:final
value	Form/DataField/Integer.hpp	/^  int value;$/;"	m	class:final
value	Form/DataField/RoughTime.hpp	/^  RoughTime value;$/;"	m	class:final
value	Form/DataField/Time.hpp	/^  int value;$/;"	m	class:final
value	Form/DigitEntry.hpp	/^    uint8_t value;$/;"	m	struct:CoordinateFormat::Column
value	Form/Edit.hpp	/^  tstring value;$/;"	m	class:WndProperty
value	Gauge/GaugeVario.hpp	/^    DrawInfo value;$/;"	m	struct:GaugeVario::LabelValueDrawInfo
value	Geo/Memento/DistanceMemento.hpp	/^  mutable double value;$/;"	m	class:DistanceMemento
value	Geo/Memento/GeoVectorMemento.hpp	/^  mutable GeoVector value;$/;"	m	class:GeoVectorMemento
value	GliderLink/GliderLinkId.hpp	/^  uint32_t value;$/;"	m	class:GliderLinkId
value	IO/KeyValueFileReader.hpp	/^  char *value;$/;"	m	struct:KeyValuePair
value	InfoBoxes/Data.hpp	/^  StaticString<32> value;$/;"	m	struct:InfoBoxData
value	Java/Ref.hxx	/^			:env(_env), value(_value)$/;"	f	class:Java::LocalRef
value	Java/Ref.hxx	/^			:value(_value)$/;"	f	class:Java::GlobalRef
value	Java/Ref.hxx	/^		T value;$/;"	m	class:Java::GlobalRef
value	Java/Ref.hxx	/^		T value;$/;"	m	class:Java::TrivialRef
value	Java/Ref.hxx	/^		const T value;$/;"	m	class:Java::LocalRef
value	Look/InfoBoxLook.hpp	/^  } title, value, comment;$/;"	m	struct:InfoBoxLook	typeref:struct:InfoBoxLook::__anon24
value	Lua/Util.hxx	/^	void *value;$/;"	m	struct:Lua::StackIndex::LightUserData
value	Math/Angle.hpp	/^  double value;$/;"	m	class:Angle
value	Net/Option.hpp	/^  DWORD value;$/;"	m	class:SendTimeoutS
value	OS/ConvertPathName.hpp	/^  Value value;$/;"	m	class:NarrowPathName
value	OS/ConvertPathName.hpp	/^  Value value;$/;"	m	class:PathName
value	OS/Path.hpp	/^  value_type value;$/;"	m	class:AllocatedPath
value	OS/Path.hpp	/^  value_type value;$/;"	m	class:Path
value	RadioFrequency.hpp	/^  uint16_t value;$/;"	m	class:RadioFrequency
value	Rough/RoughAltitude.hpp	/^  short value;$/;"	m	class:RoughAltitude
value	Rough/RoughAngle.hpp	/^  int16_t value;$/;"	m	class:RoughAngle
value	Rough/RoughDistance.hpp	/^  uint32_t value;$/;"	m	class:RoughDistance
value	Rough/RoughSpeed.hpp	/^  uint16_t value;$/;"	m	class:RoughSpeed
value	Rough/RoughVSpeed.hpp	/^  int16_t value;$/;"	m	class:RoughVSpeed
value	Screen/GDI/Color.hpp	/^  COLORREF value;$/;"	m	class:Color
value	Screen/GDI/Color.hpp	/^  COLORREF value;$/;"	m	class:HWColor
value	Screen/LargeTextWindow.hpp	/^  tstring value;$/;"	m	class:LargeTextWindow
value	Screen/PortableColor.hpp	/^  uint16_t value;$/;"	m	class:RGB555Color
value	Screen/PortableColor.hpp	/^  uint16_t value;$/;"	m	class:RGB565Color
value	Screen/PortableColor.hpp	/^  uint8_t value;$/;"	m	class:Luminosity8
value	Screen/ProgressBar.hpp	/^  unsigned min_value = 0, max_value = 0, value = 0, step_size = 1;$/;"	m	class:ProgressBar
value	Screen/RawBitmap.hpp	/^  BGR8Color value;$/;"	m	struct:RawColor
value	Screen/RawBitmap.hpp	/^  Luminosity8 value;$/;"	m	struct:RawColor
value	Screen/RawBitmap.hpp	/^  RGB565Color value;$/;"	m	struct:RawColor
value	Screen/RawBitmap.hpp	/^  RGB8Color value;$/;"	m	struct:RawColor
value	Terrain/Height.hpp	/^  int16_t value;$/;"	m	class:TerrainHeight
value	Thread/Guard.hpp	/^      :value(_guard.value) {}$/;"	f	class:Guard::UnprotectedLease
value	Thread/Guard.hpp	/^    T &value;$/;"	m	class:Guard::UnprotectedLease
value	Thread/Guard.hpp	/^  T &value;$/;"	m	class:Guard
value	Thread/Guard.hpp	/^  explicit Guard(T &_value) noexcept:value(_value) {}$/;"	f	class:Guard
value	Time/RoughTime.hpp	/^  int16_t value;$/;"	m	class:RoughTimeDelta
value	Time/RoughTime.hpp	/^  uint16_t value;$/;"	m	class:RoughTime
value	Topography/shapelib/mapserver.h	/^    char *value;$/;"	m	struct:__anon59
value	Util/AllocatedString.hxx	/^		:value(_value) {}$/;"	f	class:AllocatedString
value	Util/AllocatedString.hxx	/^		:value(n) {}$/;"	f	class:AllocatedString
value	Util/AllocatedString.hxx	/^		:value(src.Steal()) {}$/;"	f	class:AllocatedString
value	Util/AllocatedString.hxx	/^	pointer value;$/;"	m	class:AllocatedString
value	Util/ConvertString.hpp	/^  Value value;$/;"	m	class:UTF8ToWideConverter
value	Util/ConvertString.hpp	/^  Value value;$/;"	m	class:WideToACPConverter
value	Util/ConvertString.hpp	/^  Value value;$/;"	m	class:WideToUTF8Converter
value	Util/QuadTree.hxx	/^		T value;$/;"	m	struct:QuadTree::Leaf
value	Util/RadixTree.hpp	/^    T value;$/;"	m	struct:RadixTree::Leaf
value	Util/Serial.hpp	/^  unsigned value;$/;"	m	class:Serial
value	Util/StringPointer.hxx	/^		:value(_value) {}$/;"	f	class:StringPointer
value	Util/StringPointer.hxx	/^	const_pointer value;$/;"	m	class:StringPointer
value	XML/Node.hpp	/^      tstring name, value;$/;"	m	struct:XMLNode::Data::Attribute
value_	Terrain/jasper/jpc/jpc_tagtree.h	/^	int value_;$/;"	m	struct:jpc_tagtreenode_
value_and_comment_rect	InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect value_and_comment_rect;$/;"	m	class:InfoBoxWindow
value_bottom	Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
value_color	InfoBoxes/Data.hpp	/^  uint8_t title_color, value_color, comment_color;$/;"	m	struct:InfoBoxData
value_font	Look/InfoBoxLook.hpp	/^  Font value_font, small_value_font;$/;"	m	struct:InfoBoxLook
value_font	Look/VarioLook.hpp	/^  Font value_font;$/;"	m	struct:VarioLook
value_pos	Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BallastGeometry
value_pos	Gauge/GaugeVario.hpp	/^    PixelPoint label_pos, value_pos;$/;"	m	struct:GaugeVario::BugsGeometry
value_rect	Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BallastGeometry
value_rect	Gauge/GaugeVario.hpp	/^    PixelRect label_rect, value_rect;$/;"	m	struct:GaugeVario::BugsGeometry
value_rect	InfoBoxes/InfoBoxWindow.hpp	/^  PixelRect value_rect;$/;"	m	class:InfoBoxWindow
value_right	Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
value_top	Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
value_type	Engine/Trace/Trace.cpp	/^  typedef typename I::pointer value_type;$/;"	t	class:PointerIterator	file:
value_type	Engine/Trace/Trace.hpp	/^    typedef const TracePoint value_type;$/;"	t	class:Trace::const_iterator
value_type	OS/Path.hpp	/^  typedef AllocatedString<char_type> value_type;$/;"	t	class:AllocatedPath
value_type	OS/Path.hpp	/^  typedef StringPointer<char_type> value_type;$/;"	t	class:Path
value_type	Util/CastIterator.hpp	/^  typedef VT value_type;$/;"	t	class:CastIterator
value_type	Util/IterableSplitString.hxx	/^	typedef typename StringView::value_type value_type;$/;"	t	class:BasicIterableSplitString
value_type	Util/LightString.hxx	/^	typedef typename StringPointer<T>::value_type value_type;$/;"	t	class:LightString
value_type	Util/QuadTree.hxx	/^		typedef T value_type;$/;"	t	class:iterator
value_type	Util/QuadTree.hxx	/^		typedef const T value_type;$/;"	t	class:const_iterator
value_type	Util/SliceAllocator.hxx	/^	typedef T value_type;$/;"	t	class:GlobalSliceAllocator
value_type	Util/SliceAllocator.hxx	/^	typedef T value_type;$/;"	t	class:SliceAllocator
value_type	Util/StringBuffer.hxx	/^	typedef T value_type;$/;"	t	class:BasicStringBuffer
value_type	Util/StringBuilder.hxx	/^	typedef T value_type;$/;"	t	class:StringBuilder
value_type	Util/StringParser.hxx	/^	typedef T value_type;$/;"	t	class:StringParser
value_type	Util/TrivialArray.hxx	/^	typedef T value_type;$/;"	t	class:TrivialArray
value_unit	InfoBoxes/Data.hpp	/^  Unit value_unit;$/;"	m	struct:InfoBoxData
value_y	Gauge/GaugeVario.hpp	/^    int value_right, value_top, value_bottom, value_y;$/;"	m	struct:GaugeVario::LabelValueGeometry
values	Lua/Util.hxx	/^	std::tuple<T...> values;$/;"	m	struct:Lua::StackIndex::LightUserData::CClosure
values	Topography/shapelib/mapprimitive.h	/^  char **values;$/;"	m	struct:__anon79
values	Topography/shapelib/mapserver.h	/^    char **items, **values; \/* items\/values (process 1 record at a time) *\/$/;"	m	struct:__anon38
var_x_accel_	Math/KalmanFilter1d.hpp	/^  double var_x_accel_;$/;"	m	class:KalmanFilter1d
variation	NMEA/Info.hpp	/^  Angle variation;$/;"	m	struct:NMEAInfo
variation_available	NMEA/Info.hpp	/^  Validity variation_available;$/;"	m	struct:NMEAInfo
vario	Audio/Settings.hpp	/^  VarioSoundSettings vario;$/;"	m	struct:SoundSettings
vario	Dialogs/Device/DeviceListDialog.cpp	/^    bool alive:1, location:1, gps:1, baro:1, airspeed:1, vario:1, traffic:1;$/;"	m	struct:final::Flags	file:
vario	Engine/Navigation/Aircraft.hpp	/^  double vario;$/;"	m	struct:VarioState
vario	Engine/Task/Computer/ElementStatComputer.hpp	/^  TaskVarioComputer vario;$/;"	m	class:ElementStatComputer
vario	Engine/Task/Stats/ElementStat.hpp	/^  TaskVario vario;$/;"	m	struct:ElementStat
vario	Engine/Trace/Point.hpp	/^  RoughVSpeed vario;$/;"	m	class:TracePoint
vario	Gauge/ThermalAssistantRenderer.hpp	/^  VarioInfo vario;$/;"	m	class:ThermalAssistantRenderer
vario	InfoBoxes/InfoBoxLayout.hpp	/^    PixelRect vario;$/;"	m	struct:InfoBoxLayout::Layout
vario	Look/Look.hpp	/^  VarioLook vario;$/;"	m	struct:Look
vario	NMEA/ClimbHistory.hpp	/^  double vario[SIZE];$/;"	m	class:ClimbHistory
vario	Tracking/SkyLines/Protocol.hpp	/^  int16_t vario;$/;"	m	struct:SkyLinesTracking::FixPacket
vario	UISettings.hpp	/^  VarioSettings vario;$/;"	m	struct:UISettings
vario_30s_filter	Computer/AverageVarioComputer.hpp	/^  WindowFilter<30> vario_30s_filter;$/;"	m	class:AverageVarioComputer
vario_bar	Look/Look.hpp	/^  VarioBarLook vario_bar;$/;"	m	struct:Look
vario_bar_enabled	MapSettings.hpp	/^  bool vario_bar_enabled;$/;"	m	struct:MapSettings
vario_bar_renderer	MapWindow/GlueMapWindow.hpp	/^  VarioBarRenderer vario_bar_renderer;$/;"	m	class:GlueMapWindow
vario_circling_histogram	FlightStatistics.hpp	/^  Histogram vario_circling_histogram;$/;"	m	class:FlightStatistics
vario_cruise_histogram	FlightStatistics.hpp	/^  Histogram vario_cruise_histogram;$/;"	m	class:FlightStatistics
vario_filter	Device/Driver/FlyNet.cpp	/^  WindowFilter<40> vario_filter;$/;"	m	class:FlyNetDevice	file:
vario_look	Renderer/TraceHistoryRenderer.hpp	/^  const VarioLook &vario_look;$/;"	m	class:TraceHistoryRenderer
vario_scale_negative	Engine/Task/Stats/CommonStats.hpp	/^  double vario_scale_negative;$/;"	m	class:CommonStats
vario_scale_positive	Engine/Task/Stats/CommonStats.hpp	/^  double vario_scale_positive;$/;"	m	class:CommonStats
vaulter_driver	Device/Driver/Vaulter.cpp	/^const struct DeviceRegister vaulter_driver = {$/;"	v	typeref:struct:DeviceRegister
vcenter	Renderer/TextRenderer.hpp	/^  bool center = false, vcenter = false;$/;"	m	class:TextRenderer
vdop	NMEA/GPSState.hpp	/^  double vdop;$/;"	m	struct:GPSState
vec	CrossSection/CrossSectionRenderer.hpp	/^  GeoVector vec;$/;"	m	class:CrossSectionRenderer
vec	Engine/Airspace/AirspaceSorter.hpp	/^  mutable GeoVector vec;$/;"	m	class:AirspaceSelectInfo
vec	Waypoint/WaypointList.hpp	/^  mutable GeoVector vec = GeoVector::Invalid();$/;"	m	struct:WaypointListItem
vector	Computer/Wind/CirclingWind.hpp	/^    SpeedVector vector;$/;"	m	struct:CirclingWind::Sample
vector	Computer/Wind/MeasurementList.hpp	/^  Vector vector;                \/**< Wind speed vector *\/$/;"	m	struct:WindMeasurement
vector	Dialogs/Traffic/TrafficList.cpp	/^    GeoVector vector = GeoVector::Invalid();$/;"	m	struct:TrafficListWidget::Item	file:
vector	Engine/GlideSolvers/GlideResult.hpp	/^  GeoVector vector;$/;"	m	struct:GlideResult
vector	Engine/GlideSolvers/GlideState.hpp	/^  GeoVector vector;$/;"	m	struct:GlideState
vector	Engine/Task/Unordered/AbortTask.cpp	/^  AlternateList &vector;$/;"	m	class:final	file:
vector	Geo/Flat/FlatRay.hpp	/^  FlatGeoPoint vector;$/;"	m	class:FlatRay
vector	MapWindow/Items/MapItem.hpp	/^  GeoVector vector;$/;"	m	struct:LocationMapItem
vectorObj	Topography/shapelib/mapprimitive.h	/^} vectorObj;$/;"	t	typeref:struct:__anon76
vector_home	Engine/Task/Stats/CommonStats.hpp	/^  GeoVector vector_home;$/;"	m	class:CommonStats
vector_landable_rendering	Renderer/WaypointRendererSettings.hpp	/^  bool vector_landable_rendering;$/;"	m	struct:WaypointRendererSettings
vector_planned	Engine/Task/Points/TaskLeg.hpp	/^  GeoVector vector_planned;$/;"	m	class:TaskLeg
vector_remaining	Engine/Task/Points/TaskLeg.hpp	/^  GeoVector vector_remaining;$/;"	m	class:TaskLeg
vector_remaining	Engine/Task/Stats/ElementStat.hpp	/^  GeoVector vector_remaining;$/;"	m	struct:ElementStat
vector_travelled	Engine/Task/Points/TaskLeg.hpp	/^  GeoVector vector_travelled;$/;"	m	class:TaskLeg
vega	NMEA/SwitchState.hpp	/^  VegaSwitchState vega;$/;"	m	struct:SwitchState
vega_driver	Device/Driver/Vega/Register.cpp	/^const struct DeviceRegister vega_driver = {$/;"	v	typeref:struct:DeviceRegister
vehicleType	Tracking/LiveTrack24/Settings.hpp	/^  VehicleType vehicleType;$/;"	m	struct:LiveTrack24::Settings
vehicle_name	Tracking/LiveTrack24/Settings.hpp	/^  StaticString<64> vehicle_name;$/;"	m	struct:LiveTrack24::Settings
vehicle_type_list	Dialogs/Settings/Panels/TrackingConfigPanel.cpp	/^static constexpr StaticEnumChoice vehicle_type_list[] = {$/;"	v	file:
vendor	Device/Driver/LX/Convert.cpp	/^  char vendor[3];$/;"	m	struct:Context	file:
version	Device/Driver/BlueFly/Internal.hpp	/^    unsigned version;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
version	Device/Driver/CAI302/Protocol.hpp	/^    char version[5];$/;"	m	struct:CAI302::GeneralInfo
version	Device/Driver/FLARM/BinaryProtocol.hpp	/^    uint8_t version;$/;"	m	struct:FLARM::FrameHeader
version	Device/Driver/LX/LXN.hpp	/^    const struct Version *version;$/;"	m	union:LXN::Packet	typeref:struct:LXN::Packet::Version
version	Dialogs/Device/ManageFlarmDialog.cpp	/^  const FlarmVersion version;$/;"	m	class:final	file:
version	FLARM/Data.hpp	/^  FlarmVersion version;$/;"	m	struct:FlarmData
version	Terrain/RasterTileCache.hpp	/^    unsigned version;$/;"	m	struct:RasterTileCache::CacheHeader
version	Terrain/jasper/jas_icc.h	/^	jas_iccuint32_t version; \/* profile version *\/$/;"	m	struct:__anon189
version	Topography/shapelib/maptree.h	/^    char  version;$/;"	m	struct:__anon88
version	zzip/format.h	/^    zzip_byte_t   version[1];$/;"	m	struct:zzip_version
vertex_buffer	Screen/OpenGL/Canvas.cpp	/^AllocatedArray<BulkPixelPoint> Canvas::vertex_buffer;$/;"	m	class:Canvas	file:
vertex_buffer	Screen/OpenGL/Canvas.hpp	/^  static AllocatedArray<BulkPixelPoint> vertex_buffer;$/;"	m	class:Canvas
vertex_counter	Engine/Route/ReachFanParms.hpp	/^  unsigned vertex_counter = 0;$/;"	m	struct:ReachFanParms
vertical	Form/TabDisplay.hpp	/^  bool vertical;$/;"	m	class:final
vertical	Widget/RowFormWidget.hpp	/^  const bool vertical;$/;"	m	class:RowFormWidget
vertical	Widget/TabWidget.hpp	/^    bool vertical;$/;"	m	struct:TabWidget::Layout
vertical	Widget/TwoWidgets.hpp	/^  const bool vertical;$/;"	m	class:TwoWidgets
vertical_position	Renderer/TextInBox.hpp	/^  VerticalPosition vertical_position = VerticalPosition::BELOW;$/;"	v
vertical_speed_unit	Units/Settings.hpp	/^  Unit vertical_speed_unit;$/;"	m	struct:UnitSetting
vertical_tolerance	Engine/Airspace/AirspaceAircraftPerformance.hpp	/^  double vertical_tolerance;$/;"	m	class:AirspaceAircraftPerformance
vext	Device/Driver/IMI/Protocol/Types.hpp	/^    IMIDWORD vext:8;$/;"	m	struct:IMI::FixK
vibrate_method	Android/Vibrator.cpp	/^jmethodID Vibrator::cancel_method, Vibrator::vibrate_method;$/;"	m	class:Vibrator	file:
vibrate_method	Android/Vibrator.hpp	/^  static jmethodID cancel_method, vibrate_method;$/;"	m	class:Vibrator
vibrator	Android/Main.cpp	/^Vibrator *vibrator;$/;"	v
view	Gauge/BigThermalAssistantWidget.hpp	/^  BigThermalAssistantWindow *view;$/;"	m	class:BigThermalAssistantWidget
view	Gauge/BigTrafficWidget.hpp	/^  FlarmTrafficControl *view;$/;"	m	class:TrafficWidget
viewport_size	Screen/OpenGL/Globals.cpp	/^  UnsignedPoint2D window_size, viewport_size;$/;"	m	namespace:OpenGL	file:
virt_addr	Screen/FB/mxcfb.h	/^	void *virt_addr;$/;"	m	struct:mxcfb_alt_buffer_data
virtual_time	Replay/Replay.hpp	/^  double virtual_time;$/;"	m	class:final
visibility	Weather/ParsedMETAR.hpp	/^  unsigned visibility;$/;"	m	struct:ParsedMETAR
visibility_available	Weather/ParsedMETAR.hpp	/^  bool visibility_available;$/;"	m	struct:ParsedMETAR
visible	Dialogs/ListPicker.cpp	/^  bool visible;$/;"	m	class:ListPickerWidget	file:
visible	Dialogs/Task/Manager/TaskEditPanel.cpp	/^  bool visible;$/;"	m	class:final	file:
visible	Event/Poll/X11Queue.hpp	/^  bool mapped = true, visible = true;$/;"	m	class:X11EventQueue
visible	Menu/ButtonLabel.hpp	/^    bool visible, enabled;$/;"	m	struct:ButtonLabel::Expanded
visible	Screen/Window.hpp	/^  bool visible = true;$/;"	m	class:Window
visible	Screen/Window.hpp	/^  bool visible = true;$/;"	m	class:WindowStyle
visible	StatusMessage.hpp	/^  bool visible;$/;"	m	struct:StatusMessage
visible	Widget/ManagedWidget.hpp	/^  bool prepared, visible;$/;"	m	class:ManagedWidget
visible	Widget/PagerWidget.hpp	/^  bool initialised, prepared, visible;$/;"	m	class:PagerWidget
visible	Widget/RowFormWidget.hpp	/^    bool visible;$/;"	m	struct:RowFormWidget::Row
visible_bounds	Topography/TopographyFileRenderer.hpp	/^  GeoBounds visible_bounds;$/;"	m	class:final
visible_labels	Topography/TopographyFileRenderer.hpp	/^  std::vector<const XShape *> visible_shapes, visible_labels;$/;"	m	class:final
visible_predicate	MapWindow/Items/AirspaceBuilder.cpp	/^  const AirspaceVisibility visible_predicate;$/;"	m	class:AirspaceAtPointPredicate	file:
visible_predicate	Renderer/AirspaceLabelRenderer.cpp	/^  const AirspaceVisibility visible_predicate;$/;"	m	class:AirspaceMapVisible	file:
visible_predicate	Renderer/AirspaceRenderer.cpp	/^  const AirspaceVisibility visible_predicate;$/;"	m	class:AirspaceMapVisible	file:
visible_projection	MapWindow/MapWindow.hpp	/^  MapWindowProjection visible_projection;$/;"	m	class:MapWindow
visible_serial	Topography/TopographyFileRenderer.hpp	/^  Serial visible_serial;$/;"	m	class:final
visible_shapes	Topography/TopographyFileRenderer.hpp	/^  std::vector<const XShape *> visible_shapes, visible_labels;$/;"	m	class:final
visitor	Engine/Waypoint/Waypoints.cpp	/^  WaypointVisitor &visitor;$/;"	m	struct:VisitorAdapter	file:
visitor	Util/RadixTree.hpp	/^    V &visitor;$/;"	m	struct:RadixTree::KeyVisitorAdapter
vl_PGCS1	Device/Driver/Volkslogger/Parser.cpp	/^vl_PGCS1(NMEAInputLine &line, NMEAInfo &info)$/;"	f	file:
voff	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast16_t voff;$/;"	m	struct:__anon175
vol_percent	Audio/PCMMixerDataSource.hpp	/^  unsigned vol_percent = 100 \/ MAX_MIXER_SOURCES_COUNT;$/;"	m	class:PCMMixerDataSource
volatile_data	Device/Driver/Vega/Internal.hpp	/^  Vega::VolatileData volatile_data;$/;"	m	class:VegaDevice
volkslogger	Device/RecordedFlight.hpp	/^    uint8_t volkslogger;$/;"	m	union:RecordedFlightInfo::__anon197
volkslogger_driver	Device/Driver/Volkslogger/Register.cpp	/^const struct DeviceRegister volkslogger_driver = {$/;"	v	typeref:struct:DeviceRegister
voltage	Device/Descriptor.hpp	/^  VoltageDevice *voltage;$/;"	m	class:final
voltage	NMEA/Info.hpp	/^  double voltage;$/;"	m	struct:NMEAInfo
voltage_available	NMEA/Info.hpp	/^  Validity voltage_available;$/;"	m	struct:NMEAInfo
voltage_class	Android/VoltageDevice.cpp	/^static Java::TrivialClass voltage_class;$/;"	v	file:
voltage_ctor	Android/VoltageDevice.cpp	/^static jmethodID voltage_ctor, close_method;$/;"	v	file:
voltage_filter	Android/VoltageDevice.hpp	/^  WindowFilter<16> voltage_filter[NUMBER_OF_VOLTAGES];$/;"	m	class:final
volume	Audio/ToneSynthesiser.hpp	/^  unsigned volume = 100, angle = 0, increment = 0;$/;"	m	class:ToneSynthesiser
volume	Audio/VarioSettings.hpp	/^  uint8_t volume;$/;"	m	struct:VarioSoundSettings
volume	Device/Driver/BlueFly/Internal.hpp	/^    double volume;$/;"	m	struct:BlueFlyDevice::BlueFlySettings
volume	NMEA/ExternalSettings.hpp	/^  unsigned volume;$/;"	m	struct:ExternalSettings
volume_available	NMEA/ExternalSettings.hpp	/^  Validity volume_available;$/;"	m	struct:ExternalSettings
volume_controller	Audio/GlobalVolumeController.cpp	/^VolumeController *volume_controller = nullptr;$/;"	v
vpt_scale	Screen/Layout.cpp	/^  unsigned vpt_scale = 1024;$/;"	m	namespace:Layout	file:
vs	Engine/Route/FlatTriangleFan.hpp	/^  VertexVector vs;$/;"	m	class:FlatTriangleFan
vsamp	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast8_t vsamp;$/;"	m	struct:__anon159
vsamp	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t vsamp;$/;"	m	struct:__anon137
vsnprintf	Topography/shapelib/mapserver.h	114;"	d
vstep	Terrain/jasper/jas_image.h	/^	jas_image_coord_t vstep;$/;"	m	struct:__anon125
vstep	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t vstep;$/;"	m	struct:__anon151
vstep_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t vstep_;$/;"	m	struct:__anon123
vsubstep	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t vsubstep;$/;"	m	struct:__anon151
vtable	Topography/shapelib/mapserver.h	/^    layerVTableObj *vtable;$/;"	m	struct:layerObj
vtable	Topography/shapelib/mapserver.h	/^    rendererVTableObj *vtable;$/;"	m	struct:__anon39
vval_last	Gauge/GaugeVario.hpp	/^  int vval_last = 0;$/;"	m	class:GaugeVario
w	Computer/ThermalLocator.hpp	/^    double w;$/;"	m	struct:ThermalLocator::Point
w	Dialogs/Plane/PolarShapeEditWidget.hpp	/^    WndProperty *v, *w;$/;"	m	struct:PolarShapeEditWidget::PointEditor
w	Dialogs/dlgSimulatorPrompt.cpp	/^  SimulatorPromptWindow w;$/;"	m	class:final	file:
w	Kobo/KoboMenu.cpp	/^  SimulatorPromptWindow w;$/;"	m	class:final	file:
w	OS/EventPipe.hpp	/^  UniqueFileDescriptor w;$/;"	m	class:EventPipe
w	Polar/Shape.hpp	/^  double w;$/;"	m	struct:PolarPoint
w	Replay/TaskAutoPilot.hpp	/^  GeoPoint w[2];$/;"	m	class:TaskAutoPilot
w1	Polar/PolarStore.hpp	/^    double w1;$/;"	m	struct:PolarStore::Item
w2	Polar/PolarStore.hpp	/^    double w2;$/;"	m	struct:PolarStore::Item
w3	Polar/PolarStore.hpp	/^    double w3;$/;"	m	struct:PolarStore::Item
w_label	Dialogs/Plane/PolarShapeEditWidget.hpp	/^  WndFrame *v_label, *w_label;$/;"	m	class:PolarShapeEditWidget
w_n	Engine/ThermalBand/ThermalSlice.hpp	/^     double w_n;$/;"	m	struct:ThermalSlice
w_t	Engine/ThermalBand/ThermalSlice.hpp	/^     double w_t;$/;"	m	struct:ThermalSlice
waiting_for_fix_icon	Look/MapLook.hpp	/^  MaskedIcon waiting_for_fix_icon, no_gps_icon;$/;"	m	struct:MapLook
wants_thermals	Cloud/Client.hpp	/^  std::chrono::steady_clock::time_point wants_thermals =$/;"	m	struct:CloudClient
wants_traffic	Cloud/Client.hpp	/^  std::chrono::steady_clock::time_point wants_traffic =$/;"	m	struct:CloudClient
warning	Gauge/FlarmTrafficWindow.hpp	/^  int warning;$/;"	m	class:FlarmTrafficWindow
warning_brush	Look/FlarmTrafficLook.hpp	/^  Brush warning_brush;$/;"	m	struct:FlarmTrafficLook
warning_brush	Look/TrafficLook.hpp	/^  Brush warning_brush;$/;"	m	struct:TrafficLook
warning_color	Look/FlarmTrafficLook.hpp	/^  Color warning_color;$/;"	m	struct:FlarmTrafficLook
warning_color	Look/TrafficLook.hpp	/^  Color warning_color;$/;"	m	struct:TrafficLook
warning_computer	Computer/GlideComputer.hpp	/^  WarningComputer warning_computer;$/;"	m	class:GlideComputer
warning_list	Dialogs/Airspace/dlgAirspaceWarnings.cpp	/^  TrivialArray<WarningItem, 64u> warning_list;$/;"	m	class:final	file:
warning_manager	Engine/Airspace/AirspaceWarningManager.cpp	/^  AirspaceWarningManager &warning_manager;$/;"	m	class:final	file:
warning_manager	Renderer/AirspaceLabelRenderer.hpp	/^  const ProtectedAirspaceWarningManager *warning_manager;$/;"	m	class:AirspaceLabelRenderer
warning_manager	Renderer/AirspaceRenderer.hpp	/^  const ProtectedAirspaceWarningManager *warning_manager;$/;"	m	class:AirspaceRenderer
warning_manager	Renderer/AirspaceRendererGL.cpp	/^  const AirspaceWarningCopy &warning_manager;$/;"	m	class:final	file:
warning_pen	Look/FlarmTrafficLook.hpp	/^  Pen warning_pen;$/;"	m	struct:FlarmTrafficLook
warning_state	Engine/Airspace/AirspaceWarningManager.cpp	/^  const AirspaceWarning::State warning_state;$/;"	m	class:final	file:
warning_time	Engine/Airspace/AirspaceWarningConfig.hpp	/^  unsigned warning_time;$/;"	m	struct:AirspaceWarningConfig
warnings	Airspace/ActivePredicate.hpp	/^  const ProtectedAirspaceWarningManager *warnings;$/;"	m	class:ActiveAirspacePredicate
warnings	Airspace/AirspaceComputerSettings.hpp	/^  AirspaceWarningConfig warnings;$/;"	m	struct:AirspaceComputerSettings
warnings	Dialogs/Airspace/dlgAirspaceDetails.cpp	/^  ProtectedAirspaceWarningManager *warnings;$/;"	m	class:final	file:
warnings	Engine/Airspace/AirspaceWarningManager.hpp	/^  AirspaceWarningList warnings;$/;"	m	class:AirspaceWarningManager
warnings	MapWindow/Items/AirspaceBuilder.cpp	/^  const AirspaceWarningList &warnings;$/;"	m	class:AirspaceAtPointPredicate	file:
warnings	Renderer/AirspaceLabelRenderer.cpp	/^  const AirspaceWarningCopy &warnings;$/;"	m	class:AirspaceMapVisible	file:
warnings	Renderer/AirspaceRenderer.cpp	/^  const AirspaceWarningCopy &warnings;$/;"	m	class:AirspaceMapVisible	file:
warnings	Renderer/AirspaceRendererOther.cpp	/^  const AirspaceWarningCopy &warnings;$/;"	m	class:final	file:
warnings	Task/ProtectedRoutePlanner.hpp	/^  const ProtectedAirspaceWarningManager *warnings;$/;"	m	class:ProtectedRoutePlanner
was_alive	Device/Descriptor.hpp	/^  bool was_alive;$/;"	m	class:final
was_running	Job/Thread.hpp	/^  bool was_running;$/;"	m	class:JobThread
watched	Engine/Waypoint/Waypoint.hpp	/^    bool watched:1;$/;"	m	struct:Waypoint::Flags
wave	Computer/Settings.hpp	/^  WaveSettings wave;$/;"	m	struct:ComputerSettings
wave	Look/MapLook.hpp	/^  WaveLook wave;$/;"	m	struct:MapLook
wave	NMEA/Derived.hpp	/^  WaveResult wave;$/;"	m	struct:DerivedInfo
wave	Tracking/SkyLines/Protocol.hpp	/^  Wave wave;$/;"	m	struct:SkyLinesTracking::WaveSubmitPacket
wave_computer	Computer/GlideComputerAirData.hpp	/^  WaveComputer wave_computer;$/;"	m	class:GlideComputerAirData
wave_count	Tracking/SkyLines/Protocol.hpp	/^  uint8_t wave_count;$/;"	m	struct:SkyLinesTracking::WaveResponsePacket
waveform_mode	Screen/FB/mxcfb.h	/^	__u32 waveform_mode;$/;"	m	struct:mxcfb_update_data
waves	Computer/WaveComputer.hpp	/^  std::list<WaveInfo> waves;$/;"	m	class:WaveComputer
waves	Computer/WaveResult.hpp	/^  TrivialArray<WaveInfo, 32> waves;$/;"	m	struct:WaveResult
waves	Tracking/SkyLines/Data.hpp	/^  std::list<Wave> waves;$/;"	m	struct:SkyLinesTracking::Data
way_point_renderer	MapWindow/TargetMapWindow.hpp	/^  WaypointRenderer way_point_renderer;$/;"	m	class:TargetMapWindow
way_points	Components.cpp	/^Waypoints way_points;$/;"	v
way_points	Renderer/WaypointRenderer.hpp	/^  const Waypoints *way_points;$/;"	m	class:WaypointRenderer
waypoint	Device/Declaration.hpp	/^    Waypoint waypoint;$/;"	m	struct:Declaration::TurnPoint
waypoint	Dialogs/Waypoint/WaypointCommandsWidget.hpp	/^  const WaypointPtr waypoint;$/;"	m	class:final
waypoint	Dialogs/Waypoint/WaypointInfoWidget.hpp	/^  const WaypointPtr waypoint;$/;"	m	struct:WaypointInfoWidget
waypoint	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  const WaypointPtr waypoint;$/;"	m	class:final	file:
waypoint	Engine/Contest/Solvers/Retrospective.hpp	/^    WaypointPtr waypoint;$/;"	m	struct:Retrospective::NearWaypoint
waypoint	Engine/Task/Points/TaskWaypoint.hpp	/^  WaypointPtr waypoint;$/;"	m	class:TaskWaypoint
waypoint	Engine/Task/Unordered/AlternatePoint.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:AlternatePoint
waypoint	Look/MapLook.hpp	/^  WaypointLook waypoint;$/;"	m	struct:MapLook
waypoint	MapSettings.hpp	/^  WaypointRendererSettings waypoint;$/;"	m	struct:MapSettings
waypoint	MapWindow/Items/MapItem.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:TaskOZMapItem
waypoint	MapWindow/Items/MapItem.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:WaypointMapItem
waypoint	Monitor/MatTaskMonitor.cpp	/^  const WaypointPtr waypoint;$/;"	m	class:final	file:
waypoint	Renderer/WaypointRenderer.cpp	/^  WaypointPtr waypoint;$/;"	m	struct:VisibleWaypoint	file:
waypoint	Waypoint/WaypointList.hpp	/^  WaypointPtr waypoint;$/;"	m	struct:WaypointListItem
waypoint_details	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	struct:final::Layout	file:
waypoint_details	Dialogs/Task/TaskPointDialog.cpp	/^  Button waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	class:final	file:
waypoint_ids	Waypoint/LastUsed.cpp	/^  WaypointIDList waypoint_ids;$/;"	m	namespace:LastUsedWaypoints	file:
waypoint_name	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_name;$/;"	m	struct:final::Layout	file:
waypoint_name	Dialogs/Task/TaskPointDialog.cpp	/^  WndFrame waypoint_name;$/;"	m	class:final	file:
waypoint_panel	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_panel;$/;"	m	struct:final::Layout	file:
waypoint_panel	Dialogs/Task/TaskPointDialog.cpp	/^  PanelControl waypoint_panel;$/;"	m	class:final	file:
waypoint_relocate	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	struct:final::Layout	file:
waypoint_relocate	Dialogs/Task/TaskPointDialog.cpp	/^  Button waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	class:final	file:
waypoint_remove	Dialogs/Task/TaskPointDialog.cpp	/^    PixelRect waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	struct:final::Layout	file:
waypoint_remove	Dialogs/Task/TaskPointDialog.cpp	/^  Button waypoint_details, waypoint_remove, waypoint_relocate;$/;"	m	class:final	file:
waypoint_renderer	MapWindow/MapWindow.hpp	/^  WaypointRenderer waypoint_renderer;$/;"	m	class:MapWindow
waypoint_tree	Engine/Waypoint/Waypoints.hpp	/^  WaypointTree waypoint_tree;$/;"	m	class:Waypoints
waypoint_types	Dialogs/Waypoint/dlgWaypointEdit.cpp	/^static constexpr StaticEnumChoice waypoint_types[] = {$/;"	v	file:
waypoint_visitor	Engine/Waypoint/Waypoints.cpp	/^  WaypointVisitor *const waypoint_visitor;$/;"	m	class:WaypointEnvelopeVisitor	file:
waypoints	Computer/GlideComputer.hpp	/^  const Waypoints &waypoints;$/;"	m	class:GlideComputer
waypoints	Computer/GlideComputerAirData.hpp	/^  const Waypoints &waypoints;$/;"	m	class:GlideComputerAirData
waypoints	Device/Driver/Volkslogger/Database.hpp	/^    Waypoint waypoints[10];$/;"	m	struct:Volkslogger::Route
waypoints	Engine/Contest/Solvers/Retrospective.hpp	/^  const Waypoints &waypoints;$/;"	m	class:Retrospective
waypoints	Engine/Task/Unordered/AbortTask.hpp	/^  const Waypoints &waypoints;$/;"	m	class:AbortTask
waypoints	Engine/Task/Unordered/GotoTask.hpp	/^  const Waypoints &waypoints;$/;"	m	class:final
waypoints	MapWindow/MapWindow.hpp	/^  const Waypoints *waypoints = nullptr;$/;"	m	class:MapWindow
waypoints	Renderer/WaypointRenderer.cpp	/^  StaticArray<VisibleWaypoint, 256> waypoints;$/;"	m	class:final	file:
weather	Computer/Settings.hpp	/^  WeatherSettings weather;$/;"	m	struct:ComputerSettings
weather	UIState.hpp	/^  WeatherUIState weather;$/;"	m	struct:UIState
weather_page	Dialogs/Weather/WeatherDialog.cpp	/^static int weather_page = 0;$/;"	v	file:
web	Topography/shapelib/mapserver.h	/^    webObj web;$/;"	m	struct:mapObj
webObj	Topography/shapelib/mapserver.h	/^  } webObj;$/;"	t	typeref:struct:__anon42
wednesday	Engine/Airspace/AirspaceActivity.hpp	/^    bool wednesday:1;$/;"	m	struct:AirspaceActivity::Days
weight	Math/XYDataStore.hpp	/^    double weight;$/;"	m	struct:XYDataStore::Slot
weight_in_litres	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t weight_in_litres;$/;"	m	struct:CAI302::Polar
welt2000_format	Waypoint/WaypointReaderWinPilot.hpp	/^  bool welt2000_format = false;$/;"	m	class:final
westerboer_driver	Device/Driver/Westerboer.cpp	/^const struct DeviceRegister westerboer_driver = {$/;"	v	typeref:struct:DeviceRegister
wfslayerinfo	Topography/shapelib/mapserver.h	/^    void *wfslayerinfo; \/* For WFS layers, will contain a msWFSLayerInfo struct *\/$/;"	m	struct:layerObj
wheel	Event/Poll/Linux/MergeMouse.hpp	/^  int wheel = 0;$/;"	m	class:final
white_brush	Look/WaypointLook.hpp	/^  Brush white_brush, light_gray_brush, magenta_brush, orange_brush;$/;"	m	struct:WaypointLook
white_pen	Look/ThermalBandLook.hpp	/^  Pen white_pen, black_pen;$/;"	m	struct:ThermalBandLook
widget	Dialogs/Task/TargetDialog.cpp	/^  TargetWidget &widget;$/;"	m	class:TargetDialogMapWindow	file:
widget	Dialogs/WidgetDialog.hpp	/^  ManagedWidget widget;$/;"	m	class:WidgetDialog
widget	MainWindow.hpp	/^  Widget *widget = nullptr;$/;"	m	class:MainWindow
widget	Monitor/AirspaceWarningMonitor.hpp	/^  class AirspaceWarningWidget *widget;$/;"	m	class:AirspaceWarningMonitor	typeref:class:AirspaceWarningMonitor::AirspaceWarningWidget
widget	Monitor/MatTaskMonitor.hpp	/^  class MatTaskAddWidget *widget;$/;"	m	class:MatTaskMonitor	typeref:class:MatTaskMonitor::MatTaskAddWidget
widget	Monitor/TaskAdvanceMonitor.hpp	/^  class TaskAdvanceWidget *widget;$/;"	m	class:TaskAdvanceMonitor	typeref:class:TaskAdvanceMonitor::TaskAdvanceWidget
widget	Widget/ButtonPanelWidget.hpp	/^  Widget *widget;$/;"	m	class:ButtonPanelWidget
widget	Widget/DockWindow.hpp	/^  Widget *widget;$/;"	m	class:DockWindow
widget	Widget/ManagedWidget.hpp	/^  Widget *widget = nullptr;$/;"	m	class:ManagedWidget
widget	Widget/PagerWidget.hpp	/^    Widget *widget;$/;"	m	struct:PagerWidget::Child
widget	Widget/RowFormWidget.hpp	/^    Widget *widget;$/;"	m	struct:RowFormWidget::Row
widget	Widget/SolidWidget.hpp	/^  Widget *const widget;$/;"	m	class:SolidWidget
width	Android/NativeView.hpp	/^  unsigned width, height;$/;"	m	class:NativeView
width	Android/TextUtil.hpp	/^    unsigned width, height;$/;"	m	struct:TextUtil::Texture
width	CommandLine.cpp	/^  unsigned width = IsKobo() ? 600 : 640;$/;"	m	namespace:CommandLine	file:
width	Device/Driver/LX/LXN.hpp	/^    unsigned width;$/;"	m	struct:LXN::ExtensionDefinition
width	Event/Poll/LibInput/LibInputHandler.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:final
width	Event/Shared/RotatePointer.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:RotatePointer
width	Geo/GeoClip.hpp	/^  Angle width;$/;"	m	class:GeoClip
width	Renderer/WaypointLabelList.hpp	/^  const unsigned width, height;$/;"	m	class:WaypointLabelList
width	Screen/Custom/UncompressedImage.hpp	/^  unsigned pitch, width, height;$/;"	m	class:UncompressedImage
width	Screen/FB/mxcfb.h	/^	__u32 width;	\/* width of entire buffer *\/$/;"	m	struct:mxcfb_alt_buffer_data
width	Screen/FB/mxcfb.h	/^	__u32 width;$/;"	m	struct:mxcfb_rect
width	Screen/Memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:ConstImageBuffer
width	Screen/Memory/Buffer.hpp	/^  unsigned pitch, width, height;$/;"	m	struct:WritableImageBuffer
width	Screen/Pen.hpp	/^  uint8_t width = 0;$/;"	m	class:Pen
width	Screen/RawBitmap.hpp	/^  const unsigned width;$/;"	m	class:final
width	Terrain/HeightMatrix.hpp	/^  unsigned width, height;$/;"	m	class:HeightMatrix
width	Terrain/RasterTile.hpp	/^  unsigned width = 0, height = 0;$/;"	m	class:RasterTile
width	Terrain/RasterTileCache.hpp	/^    unsigned width, height;$/;"	m	struct:RasterTileCache::CacheHeader
width	Terrain/RasterTileCache.hpp	/^  unsigned int width, height;$/;"	m	class:RasterTileCache
width	Terrain/jasper/jas_cm.h	/^	int width;$/;"	m	struct:__anon94
width	Terrain/jasper/jas_image.h	/^	jas_image_coord_t width;$/;"	m	struct:__anon125
width	Terrain/jasper/jp2/jp2_cod.h	/^	uint_fast32_t width;$/;"	m	struct:__anon109
width	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t width;$/;"	m	struct:__anon160
width	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t width;$/;"	m	struct:__anon151
width	Topography/shapelib/mapserver.h	/^    double width; \/* line width in pixels *\/$/;"	m	struct:__anon69
width	Topography/shapelib/mapserver.h	/^    double width;$/;"	m	struct:styleObj
width	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon41
width	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon53
width	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon54
width	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:__anon55
width	Topography/shapelib/mapserver.h	/^    int height, width;$/;"	m	struct:mapObj
width	Topography/shapelib/mapserver.h	/^    int width, height;$/;"	m	struct:imageObj
width	Topography/shapelib/mapserver.h	/^    int width;$/;"	m	struct:tileCacheObj
width	Util/AllocatedGrid.hxx	/^	unsigned width = 0, height = 0;$/;"	m	class:AllocatedGrid
width_	Terrain/jasper/jas_image.h	/^	jas_image_coord_t width_;$/;"	m	struct:__anon123
wifi_button	Kobo/NetworkDialog.cpp	/^  Button *toggle_wifi_button, *wifi_button;$/;"	m	class:final	file:
win32_getpagesize	zzip/__mmap.h	/^static size_t win32_getpagesize (void)$/;"	f
win32_mmap	zzip/__mmap.h	/^static void*  win32_mmap (long* user, int fd, zzip_off_t offs, size_t len)$/;"	f
win32_munmap	zzip/__mmap.h	/^static void win32_munmap (long* user, char* fd_map, size_t len)$/;"	f
wind	Computer/ConditionMonitor/ConditionMonitorWind.hpp	/^  SpeedVector wind;$/;"	m	class:final
wind	Computer/Settings.hpp	/^  WindSettings wind;$/;"	m	struct:ComputerSettings
wind	Computer/Wind/CirclingWind.hpp	/^    SpeedVector wind;$/;"	m	struct:CirclingWind::Result
wind	Computer/Wind/WindEKFGlue.hpp	/^    SpeedVector wind;$/;"	m	struct:WindEKFGlue::Result
wind	Engine/GlideSolvers/GlideState.hpp	/^  SpeedVector wind;$/;"	m	struct:GlideState
wind	Engine/Navigation/Aircraft.hpp	/^  SpeedVector wind;$/;"	m	struct:AircraftState
wind	Look/MapLook.hpp	/^  WindArrowLook wind;$/;"	m	struct:MapLook
wind	Monitor/AllMonitors.hpp	/^  WindMonitor wind;$/;"	m	class:final
wind	NMEA/Derived.hpp	/^  SpeedVector wind;$/;"	m	struct:DerivedInfo
wind	Weather/ParsedMETAR.hpp	/^  SpeedVector wind;$/;"	m	struct:ParsedMETAR
wind_arrow_info_box	Look/Look.hpp	/^  WindArrowLook wind_arrow_info_box;$/;"	m	struct:Look
wind_arrow_list	Dialogs/Settings/Panels/SymbolsConfigPanel.cpp	/^static constexpr StaticEnumChoice wind_arrow_list[] = {$/;"	v	file:
wind_arrow_style	MapSettings.hpp	/^  WindArrowStyle wind_arrow_style;$/;"	m	struct:MapSettings
wind_available	NMEA/Derived.hpp	/^  Validity wind_available;$/;"	m	struct:DerivedInfo
wind_available	Weather/ParsedMETAR.hpp	/^  bool wind_available;$/;"	m	struct:ParsedMETAR
wind_computer	Computer/GlideComputerAirData.hpp	/^  WindComputer wind_computer;$/;"	m	class:GlideComputerAirData
wind_drift_enabled	MapSettings.hpp	/^  bool wind_drift_enabled;$/;"	m	struct:TrailSettings
wind_ekf	Computer/Wind/Computer.hpp	/^  WindEKFGlue wind_ekf;$/;"	m	class:WindComputer
wind_infobox_panels	InfoBoxes/Content/Weather.cpp	/^const InfoBoxPanel wind_infobox_panels[] = {$/;"	v
wind_source	NMEA/Derived.hpp	/^  } wind_source;$/;"	m	struct:DerivedInfo	typeref:class:DerivedInfo::WindSource
wind_speed_squared	Engine/GlideSolvers/GlideState.hpp	/^  double wind_speed_squared;$/;"	m	struct:GlideState
wind_speed_unit	Units/Settings.hpp	/^  Unit wind_speed_unit;$/;"	m	struct:UnitSetting
wind_store	Computer/Wind/Computer.hpp	/^  WindStore wind_store;$/;"	m	class:WindComputer
windlist	Computer/Wind/Store.hpp	/^  WindMeasurementList windlist;$/;"	m	class:WindStore
window	Dialogs/KnobTextEntry.cpp	/^  KnobTextEntryWindow window;$/;"	m	class:final	file:
window	Engine/Task/Computer/TaskStatsComputer.hpp	/^  WindowStatsComputer window;$/;"	m	class:TaskStatsComputer
window	Screen/Custom/Reference.hpp	/^  Window *window;$/;"	m	class:WindowReference
window	Screen/Custom/TopCanvas.hpp	/^  SDL_Window *window;$/;"	m	class:DisplayOrientation
window	Screen/GDI/PaintCanvas.hpp	/^  Window &window;$/;"	m	class:PaintCanvas
window	Widget/RowFormWidget.hpp	/^    Window *window;$/;"	m	struct:RowFormWidget::Row
window	Widget/WindowWidget.hpp	/^  Window *window;$/;"	m	class:WindowWidget
window_size	Screen/OpenGL/Globals.cpp	/^  UnsignedPoint2D window_size, viewport_size;$/;"	m	namespace:OpenGL	file:
wing_area	Device/Driver/CAI302/Protocol.hpp	/^    uint16_t wing_area; \/\/ 100ths square meters$/;"	m	struct:CAI302::Polar
wing_area	Engine/GlideSolvers/GlidePolar.hpp	/^  double wing_area;$/;"	m	class:GlidePolar
wing_area	Plane/Plane.hpp	/^  double wing_area;$/;"	m	struct:Plane
wing_area	Polar/Polar.hpp	/^  double wing_area;    \/**< Reference wing area (m^2) *\/$/;"	m	struct:PolarInfo
wing_area	Polar/PolarStore.hpp	/^    double wing_area;$/;"	m	struct:PolarStore::Item
wing_loading	NMEA/ExternalSettings.hpp	/^  double wing_loading;$/;"	m	struct:ExternalSettings
wing_loading_available	NMEA/ExternalSettings.hpp	/^  Validity wing_loading_available;$/;"	m	struct:ExternalSettings
wing_loading_unit	Units/Settings.hpp	/^  Unit wing_loading_unit;$/;"	m	struct:UnitSetting
wm_delete_window	Event/Poll/X11Queue.hpp	/^  Atom wm_delete_window;$/;"	m	class:X11EventQueue
wordtoserno	Device/Driver/Volkslogger/vlapihlp.cpp	/^wordtoserno(char *Seriennummer, unsigned Binaer)$/;"	f
working_band_fraction	Engine/Navigation/Aircraft.hpp	/^  double working_band_fraction;$/;"	m	struct:AltitudeState
working_band_pen	Look/ThermalBandLook.hpp	/^  Pen working_band_pen;$/;"	m	struct:ThermalBandLook
wp	Device/Driver/IMI/Protocol/Types.hpp	/^    TWaypoint wp[IMIDECL_MAX_WAYPOINTS];$/;"	m	struct:IMI::TDeclaration
wp_dis	Task/TaskFileSeeYou.cpp	/^  bool wp_dis;$/;"	m	struct:SeeYouTaskInformation	file:
wpa_supplicant	Kobo/WifiDialog.cpp	/^  WPASupplicant wpa_supplicant;$/;"	m	class:final	file:
wpt	Device/Driver/Volkslogger/vlapi2.h	/^    WPT wpt[10];$/;"	m	struct:VLAPI_DATA::ROUTE
wpts	Device/Driver/Volkslogger/vlapi2.h	/^    WPT *wpts;$/;"	m	struct:VLAPI_DATA::DATABASE
wrap	Topography/shapelib/mapserver.h	/^    char wrap;$/;"	m	struct:labelObj
write	Android/PortBridge.cpp	/^PortBridge::write(JNIEnv *env, const void *data, size_t length)$/;"	f	class:PortBridge
write	zzip/plugin.h	/^    zzip_ssize_t (*write)(int fd, _zzip_const void* buf, zzip_size_t len);$/;"	m	struct:zzip_plugin_io
writeBounds	Topography/shapelib/mapshape.c	/^static void writeBounds( uchar * pabyRec, shapeObj *shape, int nVCount )$/;"	f	file:
writeHeader	Topography/shapelib/mapshape.c	/^static void writeHeader( SHPHandle psSHP )$/;"	f	file:
writeHeader	Topography/shapelib/mapxbase.c	/^static void writeHeader(DBFHandle psDBF)$/;"	f	file:
writeTreeNode	Topography/shapelib/maptree.c	/^static void writeTreeNode(SHPTreeHandle disktree, treeNodeObj *node)$/;"	f	file:
write_	Terrain/jasper/jas_stream.h	/^	int (*write_)(jas_stream_obj_t *obj, char *buf, unsigned cnt);$/;"	m	struct:__anon119
write_buffer	Android/PortBridge.hpp	/^  Java::GlobalRef<jbyteArray> write_buffer;$/;"	m	class:PortBridge
write_buffer_size	Android/PortBridge.hpp	/^  static constexpr size_t write_buffer_size = 4096;$/;"	m	class:PortBridge
write_method	Android/PortBridge.cpp	/^jmethodID PortBridge::write_method;$/;"	m	class:PortBridge	file:
write_method	Android/PortBridge.hpp	/^  static jmethodID write_method;$/;"	m	class:PortBridge
write_poll_descs	Audio/ALSAPCMPlayer.hpp	/^  std::list<boost::asio::posix::stream_descriptor> write_poll_descs;$/;"	m	class:ALSAPCMPlayer
writer	JSON/Writer.hpp	/^    BufferedOutputStream &writer;$/;"	m	class:JSON::ArrayWriter
writer	JSON/Writer.hpp	/^    BufferedOutputStream &writer;$/;"	m	class:JSON::ObjectWriter
writer	Logger/LoggerImpl.hpp	/^  IGCWriter *writer;$/;"	m	class:LoggerImpl
writer	Logger/NMEALogger.cpp	/^  static TextWriter *writer;$/;"	m	namespace:NMEALogger	file:
ws	Device/Driver/Volkslogger/vlapi2.h	/^    unsigned ws;  \/\/ sector direction in degrees$/;"	m	struct:VLAPI_DATA::DCLWPT
www_credentials	Weather/PCMet/Settings.hpp	/^  Credentials www_credentials;$/;"	m	struct:PCMetSettings
x	Engine/Util/AircraftStateFilter.hpp	/^  double x, y;$/;"	m	class:AircraftStateFilter
x	Event/Poll/LibInput/LibInputHandler.hpp	/^  double x = -1.0, y = -1.0;$/;"	m	class:final
x	Event/Poll/Linux/MergeMouse.hpp	/^  unsigned x = 0, y = 0;$/;"	m	class:final
x	Math/AvFilter.hpp	/^  StaticArray<double, max> x;$/;"	m	class:AvFilter
x	Math/DiffFilter.hpp	/^  std::array<double, 7> x;$/;"	m	class:DiffFilter
x	Math/DifferentialWindowFilter.hpp	/^    double x, y;$/;"	m	struct:DifferentialWindowFilter::Sample
x	Math/Filter.hpp	/^  double x[3];$/;"	m	class:Filter
x	Math/LeastSquares.hpp	/^  double x;$/;"	m	struct:ErrorEllipse
x	Math/Point2D.hpp	/^  scalar_type x, y;$/;"	m	struct:Point2D
x	Math/XYDataStore.hpp	/^    double x, y;$/;"	m	struct:XYDataStore::Slot
x	Renderer/ChartRenderer.hpp	/^  } x, y;$/;"	m	class:ChartRenderer	typeref:struct:ChartRenderer::Axis
x	Renderer/TwoTextRowsRenderer.hpp	/^  int x, first_y, second_y;$/;"	m	class:TwoTextRowsRenderer
x	Screen/FB/mxcfb.h	/^	__u16 x;$/;"	m	struct:mxcfb_pos
x	Screen/Memory/Bresenham.hpp	/^  int x, y;$/;"	m	class:BresenhamIterator
x	Terrain/jasper/jas_icc.h	/^	jas_iccs15fixed16_t x;$/;"	m	struct:__anon181
x	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t x;$/;"	m	struct:__anon138
x	Topography/shapelib/mapprimitive.h	/^  double x;$/;"	m	struct:__anon76
x	Topography/shapelib/mapprimitive.h	/^  double x;$/;"	m	struct:__anon77
x	Util/QuadTree.hxx	/^		position_type x, y;$/;"	m	struct:QuadTree::Point
x40	Device/Driver/LX/LXN.hpp	/^    uint8_t x40;$/;"	m	struct:LXN::Security7000
x_S	Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
x_abs_	Math/KalmanFilter1d.hpp	/^  double x_abs_;  \/\/ The absolute quantity x.$/;"	m	class:KalmanFilter1d
x_diff_filter	Engine/Util/AircraftStateFilter.hpp	/^  DiffFilter x_diff_filter, y_diff_filter, alt_diff_filter;$/;"	m	class:AircraftStateFilter
x_display	Screen/Custom/TopCanvas.hpp	/^  _XDisplay *x_display;$/;"	m	class:DisplayOrientation
x_display	Screen/TopWindow.hpp	/^  _XDisplay *x_display;$/;"	m	class:TopWindow
x_e	Screen/Memory/Bresenham.hpp	/^  int x_e, y_e;$/;"	m	class:BresenhamIterator
x_low_pass	Engine/Util/AircraftStateFilter.hpp	/^  Filter x_low_pass, y_low_pass, alt_low_pass;$/;"	m	class:AircraftStateFilter
x_max	Math/XYDataStore.hpp	/^  double x_max;$/;"	m	class:XYDataStore
x_mean	Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
x_min	Math/XYDataStore.hpp	/^  double x_min;$/;"	m	class:XYDataStore
x_origin	Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
x_rotation	Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
x_scale	Terrain/RasterProjection.hpp	/^  double x_scale, y_scale;$/;"	m	class:RasterProjection
x_scale	Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
x_var	Math/LeastSquares.hpp	/^  double x_var, y_var, xy_var;$/;"	m	class:LeastSquares
x_vel_	Math/KalmanFilter1d.hpp	/^  double x_vel_;  \/\/ The rate of change of x, in x units per second squared.$/;"	m	class:KalmanFilter1d
x_window	Screen/TopWindow.hpp	/^  X11Window x_window;$/;"	m	class:TopWindow
xcom760_driver	Device/Driver/XCOM760.cpp	/^const struct DeviceRegister xcom760_driver = {$/;"	v	typeref:struct:DeviceRegister
xcontest_free	Engine/Contest/ContestManager.hpp	/^  XContestFree xcontest_free;$/;"	m	class:ContestManager
xcontest_triangle	Engine/Contest/ContestManager.hpp	/^  XContestTriangle xcontest_triangle;$/;"	m	class:ContestManager
xctracer_driver	Device/Driver/XCTracer/Register.cpp	/^const struct DeviceRegister xctracer_driver = {$/;"	v	typeref:struct:DeviceRegister
xend	Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
xend	Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
xend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon146
xend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon148
xend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon149
xend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon150
xend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon152
xend	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t xend;$/;"	m	struct:__anon138
xend	Terrain/jasper/jpc/jpc_tsfb.h	/^	int xend;$/;"	m	struct:__anon130
xend_	Terrain/jasper/jas_seq.h	/^	jas_matind_t xend_;$/;"	m	struct:jas_matrix
xmax	Math/ZeroFinder.hpp	/^  const double xmax;$/;"	m	class:ZeroFinder
xmin	Math/ZeroFinder.hpp	/^  const double xmin;$/;"	m	class:ZeroFinder
xoff	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t xoff;$/;"	m	struct:__anon160
xstart	Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
xstart	Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
xstart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon146
xstart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon148
xstart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon149
xstart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon150
xstart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon152
xstart	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t xstart;$/;"	m	struct:__anon138
xstart	Terrain/jasper/jpc/jpc_tsfb.h	/^	int xstart;$/;"	m	struct:__anon130
xstart_	Terrain/jasper/jas_seq.h	/^	jas_matind_t xstart_;$/;"	m	struct:jas_matrix
xstep	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t xstep;$/;"	m	struct:__anon138
xy_C	Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
xy_var	Math/LeastSquares.hpp	/^  double x_var, y_var, xy_var;$/;"	m	class:LeastSquares
xyz	Terrain/jasper/jas_icc.h	/^		jas_iccxyz_t xyz;$/;"	m	union:jas_iccattrval_s::__anon188
y	Engine/Util/AircraftStateFilter.hpp	/^  double x, y;$/;"	m	class:AircraftStateFilter
y	Event/Poll/LibInput/LibInputHandler.hpp	/^  double x = -1.0, y = -1.0;$/;"	m	class:final
y	Event/Poll/Linux/MergeMouse.hpp	/^  unsigned x = 0, y = 0;$/;"	m	class:final
y	Math/DifferentialWindowFilter.hpp	/^    double x, y;$/;"	m	struct:DifferentialWindowFilter::Sample
y	Math/Filter.hpp	/^  double y[2];$/;"	m	class:Filter
y	Math/LeastSquares.hpp	/^  double y;$/;"	m	struct:ErrorEllipse
y	Math/Point2D.hpp	/^    :x(_x), y(_y) {}$/;"	f	struct:Point2D
y	Math/Point2D.hpp	/^  scalar_type x, y;$/;"	m	struct:Point2D
y	Math/XYDataStore.hpp	/^    double x, y;$/;"	m	struct:XYDataStore::Slot
y	Renderer/ChartRenderer.hpp	/^  } x, y;$/;"	m	class:ChartRenderer	typeref:struct:ChartRenderer::Axis
y	Screen/FB/mxcfb.h	/^	__u16 y;$/;"	m	struct:mxcfb_pos
y	Screen/Memory/Bresenham.hpp	/^  int x, y;$/;"	m	class:BresenhamIterator
y	Terrain/jasper/jas_icc.h	/^	jas_iccs15fixed16_t y;$/;"	m	struct:__anon181
y	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t y;$/;"	m	struct:__anon138
y	Topography/shapelib/mapprimitive.h	/^  double y;$/;"	m	struct:__anon76
y	Topography/shapelib/mapprimitive.h	/^  double y;$/;"	m	struct:__anon77
y	Util/QuadTree.hxx	/^			:x(_x), y(_y) {}$/;"	f	struct:QuadTree::Point
y	Util/QuadTree.hxx	/^		position_type x, y;$/;"	m	struct:QuadTree::Point
y_S	Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
y_ave	Math/LeastSquares.hpp	/^  double y_ave;$/;"	m	class:LeastSquares
y_cost	Math/FastRotation.hpp	/^  const int cost, sint, y_cost, y_sint;$/;"	m	class:FastRowRotation
y_diff_filter	Engine/Util/AircraftStateFilter.hpp	/^  DiffFilter x_diff_filter, y_diff_filter, alt_diff_filter;$/;"	m	class:AircraftStateFilter
y_e	Screen/Memory/Bresenham.hpp	/^  int x_e, y_e;$/;"	m	class:BresenhamIterator
y_low_pass	Engine/Util/AircraftStateFilter.hpp	/^  Filter x_low_pass, y_low_pass, alt_low_pass;$/;"	m	class:AircraftStateFilter
y_max	Math/XYDataStore.hpp	/^  double y_max;$/;"	m	class:XYDataStore
y_mean	Math/LeastSquares.hpp	/^  double x_mean, y_mean, x_S, y_S, xy_C;$/;"	m	class:LeastSquares
y_min	Math/XYDataStore.hpp	/^  double y_min;$/;"	m	class:XYDataStore
y_origin	Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
y_rotation	Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
y_scale	Terrain/RasterProjection.hpp	/^  double x_scale, y_scale;$/;"	m	class:RasterProjection
y_scale	Terrain/WorldFile.cpp	/^  double x_scale, y_rotation, x_rotation, y_scale, x_origin, y_origin;$/;"	m	struct:WorldFileData	file:
y_sint	Math/FastRotation.hpp	/^  const int cost, sint, y_cost, y_sint;$/;"	m	class:FastRowRotation
y_var	Math/LeastSquares.hpp	/^  double x_var, y_var, xy_var;$/;"	m	class:LeastSquares
year	Device/Driver/CAI302/Protocol.hpp	/^    uint8_t year, month, day, hour, minute, second;$/;"	m	struct:CAI302::DateTime
year	Device/Driver/LX/LXN.hpp	/^    uint16_t year;$/;"	m	struct:LXN::Date
year	Device/Driver/LX/LXN.hpp	/^    uint8_t day, month, year;$/;"	m	struct:LXN::Task
year	Terrain/jasper/jas_icc.h	/^	jas_iccuint16_t year;$/;"	m	struct:__anon180
year	Time/BrokenDate.hpp	/^  uint16_t year;$/;"	m	struct:BrokenDate
year2	Device/Driver/LX/LXN.hpp	/^    uint8_t day2, month2, year2;$/;"	m	struct:LXN::Task
yearinput	Device/Driver/LX/Protocol.hpp	/^    uint8_t yearinput;$/;"	m	struct:LX::Declaration
yearinput	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t yearinput;$/;"	m	struct:LXEra::Declaration
yearuser	Device/Driver/LX/Protocol.hpp	/^    uint8_t yearuser;$/;"	m	struct:LX::Declaration
yearuser	Device/Driver/LXERA/Protocol.hpp	/^    uint8_t yearuser;$/;"	m	struct:LXEra::Declaration
yend	Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
yend	Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
yend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon146
yend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon148
yend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon149
yend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon150
yend	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon152
yend	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t yend;$/;"	m	struct:__anon138
yend	Terrain/jasper/jpc/jpc_tsfb.h	/^	int yend;$/;"	m	struct:__anon130
yend_	Terrain/jasper/jas_seq.h	/^	jas_matind_t yend_;$/;"	m	struct:jas_matrix
yoff	Terrain/jasper/jpc/jpc_cs.h	/^	uint_fast32_t yoff;$/;"	m	struct:__anon160
ystart	Terrain/RasterTile.hpp	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RasterTile::MetaData
ystart	Terrain/RasterTile.hpp	/^  unsigned xstart = 0, ystart = 0, xend = 0, yend = 0;$/;"	m	class:RasterTile
ystart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon146
ystart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon148
ystart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon149
ystart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon150
ystart	Terrain/jasper/jpc/jpc_dec.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon152
ystart	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t ystart;$/;"	m	struct:__anon138
ystart	Terrain/jasper/jpc/jpc_tsfb.h	/^	int ystart;$/;"	m	struct:__anon130
ystart_	Terrain/jasper/jas_seq.h	/^	jas_matind_t ystart_;$/;"	m	struct:jas_matrix
ystep	Terrain/jasper/jpc/jpc_t2cod.h	/^	uint_fast32_t ystep;$/;"	m	struct:__anon138
z	IO/GunzipReader.hxx	/^	z_stream z;$/;"	m	class:final
z	Terrain/jasper/jas_icc.h	/^	jas_iccs15fixed16_t z;$/;"	m	struct:__anon181
z	Topography/shapelib/mapprimitive.h	/^  double z;$/;"	m	struct:__anon77
z_comment	zzip/format.h	/^    zzip_byte_t    z_comment[2];$/;"	m	struct:zzip_root_dirent
z_comment	zzip/format.h	/^    zzip_byte_t  z_comment[2];  \/* zipfile comment length *\/$/;"	m	struct:zzip_disk_trailer
z_comment	zzip/format.h	/^    zzip_byte_t  z_comment[2]; \/* file comment length *\/$/;"	m	struct:zzip_disk_entry
z_compr	zzip/format.h	/^    zzip_byte_t    z_compr[2];$/;"	m	struct:zzip_root_dirent
z_compr	zzip/format.h	/^    zzip_byte_t   z_compr[2]; \/* compression method *\/$/;"	m	struct:zzip_file_header
z_compr	zzip/format.h	/^    zzip_byte_t  z_compr[2];  \/* compression method *\/$/;"	m	struct:zzip_disk_entry
z_crc32	zzip/format.h	/^    zzip_byte_t    z_crc32[4];$/;"	m	struct:zzip_root_dirent
z_crc32	zzip/format.h	/^    zzip_byte_t   z_crc32[4]; \/* crc-32 *\/$/;"	m	struct:zzip_file_header
z_crc32	zzip/format.h	/^    zzip_byte_t   z_crc32[4]; \/* crc-32 *\/$/;"	m	struct:zzip_file_trailer
z_crc32	zzip/format.h	/^    zzip_byte_t  z_crc32[4];  \/* crc-32 *\/$/;"	m	struct:zzip_disk_entry
z_csize	zzip/format.h	/^    zzip_byte_t    z_csize[4];$/;"	m	struct:zzip_root_dirent
z_csize	zzip/format.h	/^    zzip_byte_t   z_csize[4]; \/* compressed size *\/$/;"	m	struct:zzip_file_header
z_csize	zzip/format.h	/^    zzip_byte_t   z_csize[4]; \/* compressed size *\/$/;"	m	struct:zzip_file_trailer
z_csize	zzip/format.h	/^    zzip_byte_t  z_csize[4];  \/* compressed size *\/$/;"	m	struct:zzip_disk_entry
z_datasize	zzip/format.h	/^    zzip_byte_t  z_datasize[2];       \/* being returned by xx_to_extras usually *\/$/;"	m	struct:zzip_extra_block
z_datatype	zzip/format.h	/^    zzip_byte_t  z_datatype[2];       \/* as input type - a mere <char*> is okay *\/$/;"	m	struct:zzip_extra_block
z_disk	zzip/format.h	/^    zzip_byte_t  z_disk[2];  \/* number of this disk *\/$/;"	m	struct:zzip_disk_trailer
z_disk	zzip/format.h	/^    zzip_byte_t  z_disk[4];  \/* number of this disk *\/$/;"	m	struct:zzip_disk64_trailer
z_diskstart	zzip/format.h	/^    zzip_byte_t    z_diskstart[2];$/;"	m	struct:zzip_root_dirent
z_diskstart	zzip/format.h	/^    zzip_byte_t  z_diskstart[2]; \/* disk number of start (if spanning zip over multiple disks) *\/$/;"	m	struct:zzip_disk_entry
z_dostime	zzip/format.h	/^    zzip_dostime_t z_dostime;  \/* last mod file time&date (dos format) *\/$/;"	m	struct:zzip_disk_entry
z_dostime	zzip/format.h	/^    zzip_dostime_t z_dostime; \/* last mod file time (dos format) *\/$/;"	m	struct:zzip_file_header
z_dostime	zzip/format.h	/^    zzip_dostime_t z_dostime;$/;"	m	struct:zzip_root_dirent
z_encoder	zzip/format.h	/^    zzip_version_t z_encoder;  \/* version made by *\/$/;"	m	struct:zzip_disk64_trailer
z_encoder	zzip/format.h	/^    zzip_version_t z_encoder;  \/* version made by *\/$/;"	m	struct:zzip_disk_entry
z_encoder	zzip/format.h	/^    zzip_version_t z_encoder;$/;"	m	struct:zzip_root_dirent
z_entries	zzip/format.h	/^    zzip_byte_t  z_entries[2]; \/* total number of entries in the central dir on this disk *\/$/;"	m	struct:zzip_disk_trailer
z_entries	zzip/format.h	/^    zzip_byte_t  z_entries[8]; \/* total number of entries in the central dir on this disk *\/$/;"	m	struct:zzip_disk64_trailer
z_extract	zzip/format.h	/^    zzip_version_t z_extract;  \/* version need to extract *\/$/;"	m	struct:zzip_disk64_trailer
z_extract	zzip/format.h	/^    zzip_version_t z_extract;  \/* version need to extract *\/$/;"	m	struct:zzip_disk_entry
z_extract	zzip/format.h	/^    zzip_version_t z_extract; \/* version needed to extract *\/$/;"	m	struct:zzip_file_header
z_extract	zzip/format.h	/^    zzip_version_t z_extract;$/;"	m	struct:zzip_root_dirent
z_extras	zzip/format.h	/^    zzip_byte_t    z_extras[2];$/;"	m	struct:zzip_root_dirent
z_extras	zzip/format.h	/^    zzip_byte_t   z_extras[2]; \/* extra field length *\/$/;"	m	struct:zzip_file_header
z_extras	zzip/format.h	/^    zzip_byte_t  z_extras[2];  \/* extra field length *\/$/;"	m	struct:zzip_disk_entry
z_filemode	zzip/format.h	/^    zzip_byte_t    z_filemode[4];$/;"	m	struct:zzip_root_dirent
z_filemode	zzip/format.h	/^    zzip_byte_t  z_filemode[4];  \/* extrnal file attributes, eg. msdos attrib byte *\/$/;"	m	struct:zzip_disk_entry
z_filetype	zzip/format.h	/^    zzip_byte_t    z_filetype[2];$/;"	m	struct:zzip_root_dirent
z_filetype	zzip/format.h	/^    zzip_byte_t  z_filetype[2];  \/* internal file attributes, bit0 = ascii *\/$/;"	m	struct:zzip_disk_entry
z_finaldisk	zzip/format.h	/^    zzip_byte_t  z_finaldisk[2]; \/* number of the disk with the start of the central dir *\/$/;"	m	struct:zzip_disk_trailer
z_finaldisk	zzip/format.h	/^    zzip_byte_t  z_finaldisk[4]; \/* number of the disk with the start of the central dir *\/$/;"	m	struct:zzip_disk64_trailer
z_finalentries	zzip/format.h	/^    zzip_byte_t  z_finalentries[2]; \/* total number of entries in the central dir *\/$/;"	m	struct:zzip_disk_trailer
z_finalentries	zzip/format.h	/^    zzip_byte_t  z_finalentries[8]; \/* total number of entries in the central dir *\/$/;"	m	struct:zzip_disk64_trailer
z_flags	zzip/format.h	/^    zzip_byte_t    z_flags[2];$/;"	m	struct:zzip_root_dirent
z_flags	zzip/format.h	/^    zzip_byte_t   z_flags[2]; \/* general purpose bit flag *\/$/;"	m	struct:zzip_file_header
z_flags	zzip/format.h	/^    zzip_byte_t  z_flags[2];  \/* general purpose bit flag *\/$/;"	m	struct:zzip_disk_entry
z_magic	zzip/format.h	/^    zzip_byte_t    z_magic[4];$/;"	m	struct:zzip_root_dirent
z_magic	zzip/format.h	/^    zzip_byte_t   z_magic[4]; \/* data descriptor signature (0x08074b50) *\/$/;"	m	struct:zzip_file_trailer
z_magic	zzip/format.h	/^    zzip_byte_t   z_magic[4]; \/* local file header signature (0x04034b50) *\/$/;"	m	struct:zzip_file_header
z_magic	zzip/format.h	/^    zzip_byte_t  z_magic[4];  \/* central file header signature (0x02014b50) *\/$/;"	m	struct:zzip_disk_entry
z_magic	zzip/format.h	/^    zzip_byte_t  z_magic[4]; \/* end of central dir signature (0x06054b50) *\/$/;"	m	struct:zzip_disk64_trailer
z_magic	zzip/format.h	/^    zzip_byte_t  z_magic[4]; \/* end of central dir signature (0x06054b50) *\/$/;"	m	struct:zzip_disk_trailer
z_namlen	zzip/format.h	/^    zzip_byte_t    z_namlen[2];$/;"	m	struct:zzip_root_dirent
z_namlen	zzip/format.h	/^    zzip_byte_t   z_namlen[2]; \/* filename length (null if stdin) *\/$/;"	m	struct:zzip_file_header
z_namlen	zzip/format.h	/^    zzip_byte_t  z_namlen[2]; \/* filename length (null if stdin) *\/$/;"	m	struct:zzip_disk_entry
z_off	zzip/format.h	/^    zzip_byte_t    z_off[4];$/;"	m	struct:zzip_root_dirent
z_offset	zzip/format.h	/^    zzip_byte_t  z_offset[4];    \/* relative offset of local file header, seekval if singledisk *\/$/;"	m	struct:zzip_disk_entry
z_rootseek	zzip/format.h	/^    zzip_byte_t  z_rootseek[4]; \/* offset of start of central directory with respect to *$/;"	m	struct:zzip_disk_trailer
z_rootseek	zzip/format.h	/^    zzip_byte_t  z_rootseek[8]; \/* offset of start of central directory with respect to *$/;"	m	struct:zzip_disk64_trailer
z_rootsize	zzip/format.h	/^    zzip_byte_t  z_rootsize[4]; \/* size of the central directory *\/$/;"	m	struct:zzip_disk_trailer
z_rootsize	zzip/format.h	/^    zzip_byte_t  z_rootsize[8]; \/* size of the central directory *\/$/;"	m	struct:zzip_disk64_trailer
z_size	zzip/format.h	/^    zzip_byte_t  z_size[8];  \/* size of this central directory record *\/$/;"	m	struct:zzip_disk64_trailer
z_usize	zzip/format.h	/^    zzip_byte_t    z_usize[4];$/;"	m	struct:zzip_root_dirent
z_usize	zzip/format.h	/^    zzip_byte_t   z_usize[4]; \/* uncompressed size *\/$/;"	m	struct:zzip_file_header
z_usize	zzip/format.h	/^    zzip_byte_t   z_usize[4]; \/* uncompressed size *\/$/;"	m	struct:zzip_file_trailer
z_usize	zzip/format.h	/^    zzip_byte_t  z_usize[4];  \/* uncompressed size *\/$/;"	m	struct:zzip_disk_entry
zander_driver	Device/Driver/Zander.cpp	/^const struct DeviceRegister zander_driver = {$/;"	v	typeref:struct:DeviceRegister
zero	Device/Driver/LX/LXN.hpp	/^    uint8_t zero[0x40];$/;"	m	struct:LXN::Security7000
zero_frequency	Audio/VarioSettings.hpp	/^  unsigned zero_frequency;$/;"	m	struct:VarioSoundSettings
zero_frequency	Audio/VarioSynthesiser.hpp	/^  unsigned zero_frequency;$/;"	m	class:final
zero_skipped	Math/ZeroFinder.cpp	/^unsigned long zero_skipped = 0;$/;"	v
zero_thread_handle	Components.cpp	/^static const ThreadHandle zero_thread_handle = ThreadHandle();$/;"	v	file:
zero_total	Math/ZeroFinder.cpp	/^unsigned long zero_total = 0;$/;"	v
zig_zag_wind	Computer/Wind/Settings.hpp	/^  bool zig_zag_wind;$/;"	m	struct:WindSettings
zip	IO/ZipLineReader.hpp	/^  ZipReader zip;$/;"	m	class:ZipLineReaderA
zone_letter	Geo/UTM.hpp	/^  char zone_letter;$/;"	m	struct:UTM
zone_number	Geo/UTM.hpp	/^  unsigned char zone_number;$/;"	m	struct:UTM
zoom	Dialogs/Waypoint/dlgWaypointDetails.cpp	/^  int zoom;$/;"	m	class:final	file:
zoom	Gauge/BigTrafficWidget.cpp	/^  unsigned zoom;$/;"	m	class:FlarmTrafficControl	file:
zoom_in_button	Gauge/BigTrafficWidget.hpp	/^  Button *zoom_in_button, *zoom_out_button;$/;"	m	class:TrafficWidget
zoom_out_button	Gauge/BigTrafficWidget.hpp	/^  Button *zoom_in_button, *zoom_out_button;$/;"	m	class:TrafficWidget
zz_entries	zzip/zip.c	/^    zzip_off64_t zz_entries;$/;"	m	struct:_disk_trailer	file:
zz_finalentries	zzip/zip.c	/^    zzip_off64_t zz_finalentries;$/;"	m	struct:_disk_trailer	file:
zz_for_correct_rootseek	zzip/zip.c	/^    void *zz_for_correct_rootseek;      \/\/ ZZIP_CORRECT_ROOTSEEK$/;"	m	struct:_disk_trailer	file:
zz_min	Device/Driver/Volkslogger/vlconv.cpp	/^  int zz_min;$/;"	m	class:C_RECORD	file:
zz_rootseek	zzip/zip.c	/^    zzip_off64_t zz_rootseek;$/;"	m	struct:_disk_trailer	file:
zz_rootsize	zzip/zip.c	/^    zzip_off64_t zz_rootsize;$/;"	m	struct:_disk_trailer	file:
zz_tail	zzip/zip.c	/^    void *zz_tail;$/;"	m	struct:_disk_trailer	file:
zzip__new__	zzip/conf.h	77;"	d
zzip__new__	zzip/conf.h	79;"	d
zzip__new__	zzip/conf.h	81;"	d
zzip_byte_t	zzip/types.h	/^typedef unsigned char zzip_byte_t; \/\/ especially zlib decoding data$/;"	t
zzip_char_t	zzip/zzip.h	/^typedef  char _zzip_const       zzip_char_t;$/;"	t
zzip_close	zzip/file.c	/^zzip_close(ZZIP_FILE * fp)$/;"	f
zzip_dir	zzip/lib.h	/^struct zzip_dir$/;"	s
zzip_dir_alloc	zzip/zip.c	/^zzip_dir_alloc(zzip_strings_t * fileext)$/;"	f
zzip_dir_alloc_ext_io	zzip/zip.c	/^zzip_dir_alloc_ext_io(zzip_strings_t * ext, const zzip_plugin_io_t io)$/;"	f
zzip_dir_close	zzip/zip.c	/^zzip_dir_close(ZZIP_DIR * dir)$/;"	f
zzip_dir_fdopen	zzip/zip.c	/^zzip_dir_fdopen(int fd, zzip_error_t * errcode_p)$/;"	f
zzip_dir_fdopen_ext_io	zzip/zip.c	/^zzip_dir_fdopen_ext_io(int fd, zzip_error_t * errcode_p,$/;"	f
zzip_dir_free	zzip/zip.c	/^zzip_dir_free(ZZIP_DIR * dir)$/;"	f
zzip_dir_hdr	zzip/lib.h	/^struct zzip_dir_hdr$/;"	s
zzip_dir_open	zzip/zip.c	/^zzip_dir_open(zzip_char_t * filename, zzip_error_t * e)$/;"	f
zzip_dir_open_ext_io	zzip/zip.c	/^zzip_dir_open_ext_io(zzip_char_t * filename, zzip_error_t * e,$/;"	f
zzip_dir_open_ext_io	zzip/zzip.h	227;"	d
zzip_dir_read	zzip/zip.c	/^zzip_dir_read(ZZIP_DIR * dir, ZZIP_DIRENT * d)$/;"	f
zzip_dir_stat	zzip/stat.c	/^zzip_dir_stat(ZZIP_DIR * dir, zzip_char_t * name, ZZIP_STAT * zs, int flags)$/;"	f
zzip_dirent	zzip/zzip.h	/^struct zzip_dirent$/;"	s
zzip_disk64_trailer	zzip/format.h	/^struct zzip_disk64_trailer$/;"	s
zzip_disk64_trailer_check_magic	zzip/fetch.h	184;"	d
zzip_disk64_trailer_finaldisk	zzip/fetch.h	290;"	d
zzip_disk64_trailer_finalentries	zzip/fetch.h	294;"	d
zzip_disk64_trailer_get_disk	zzip/fetch.h	172;"	d
zzip_disk64_trailer_get_entries	zzip/fetch.h	176;"	d
zzip_disk64_trailer_get_finaldisk	zzip/fetch.h	174;"	d
zzip_disk64_trailer_get_finalentries	zzip/fetch.h	178;"	d
zzip_disk64_trailer_get_magic	zzip/fetch.h	168;"	d
zzip_disk64_trailer_get_rootseek	zzip/fetch.h	182;"	d
zzip_disk64_trailer_get_rootsize	zzip/fetch.h	180;"	d
zzip_disk64_trailer_get_size	zzip/fetch.h	170;"	d
zzip_disk64_trailer_headerlength	zzip/format.h	194;"	d
zzip_disk64_trailer_localdisk	zzip/fetch.h	288;"	d
zzip_disk64_trailer_localentries	zzip/fetch.h	292;"	d
zzip_disk64_trailer_rootseek	zzip/fetch.h	298;"	d
zzip_disk64_trailer_rootsize	zzip/fetch.h	296;"	d
zzip_disk64_trailer_set_disk	zzip/fetch.h	173;"	d
zzip_disk64_trailer_set_entries	zzip/fetch.h	177;"	d
zzip_disk64_trailer_set_finaldisk	zzip/fetch.h	175;"	d
zzip_disk64_trailer_set_finalentries	zzip/fetch.h	179;"	d
zzip_disk64_trailer_set_magic	zzip/fetch.h	169;"	d
zzip_disk64_trailer_set_rootseek	zzip/fetch.h	183;"	d
zzip_disk64_trailer_set_rootsize	zzip/fetch.h	181;"	d
zzip_disk64_trailer_set_size	zzip/fetch.h	171;"	d
zzip_disk64_trailer_sizeof_tail	zzip/fetch.h	300;"	d
zzip_disk64_trailer_sizeto_end	zzip/fetch.h	302;"	d
zzip_disk64_trailer_skipto_end	zzip/fetch.h	304;"	d
zzip_disk_entry	zzip/format.h	/^struct zzip_disk_entry$/;"	s
zzip_disk_entry_check_magic	zzip/fetch.h	139;"	d
zzip_disk_entry_comment	zzip/fetch.h	234;"	d
zzip_disk_entry_csize	zzip/fetch.h	226;"	d
zzip_disk_entry_data_ascii	zzip/fetch.h	338;"	d
zzip_disk_entry_data_comprlevel	zzip/fetch.h	330;"	d
zzip_disk_entry_data_deflated	zzip/fetch.h	336;"	d
zzip_disk_entry_data_encrypted	zzip/fetch.h	328;"	d
zzip_disk_entry_data_low_deflated	zzip/fetch.h	364;"	d
zzip_disk_entry_data_max_deflated	zzip/fetch.h	361;"	d
zzip_disk_entry_data_min_deflated	zzip/fetch.h	367;"	d
zzip_disk_entry_data_not_deflated	zzip/fetch.h	356;"	d
zzip_disk_entry_data_std_deflated	zzip/fetch.h	358;"	d
zzip_disk_entry_data_stored	zzip/fetch.h	334;"	d
zzip_disk_entry_data_streamed	zzip/fetch.h	332;"	d
zzip_disk_entry_diskstart	zzip/fetch.h	236;"	d
zzip_disk_entry_extras	zzip/fetch.h	232;"	d
zzip_disk_entry_filemode	zzip/fetch.h	240;"	d
zzip_disk_entry_fileoffset	zzip/fetch.h	242;"	d
zzip_disk_entry_filetype	zzip/fetch.h	238;"	d
zzip_disk_entry_get_comment	zzip/fetch.h	126;"	d
zzip_disk_entry_get_compr	zzip/fetch.h	114;"	d
zzip_disk_entry_get_crc32	zzip/fetch.h	116;"	d
zzip_disk_entry_get_csize	zzip/fetch.h	118;"	d
zzip_disk_entry_get_diskstart	zzip/fetch.h	128;"	d
zzip_disk_entry_get_extras	zzip/fetch.h	124;"	d
zzip_disk_entry_get_filemode	zzip/fetch.h	132;"	d
zzip_disk_entry_get_filetype	zzip/fetch.h	130;"	d
zzip_disk_entry_get_flags	zzip/fetch.h	112;"	d
zzip_disk_entry_get_magic	zzip/fetch.h	110;"	d
zzip_disk_entry_get_namlen	zzip/fetch.h	122;"	d
zzip_disk_entry_get_offset	zzip/fetch.h	134;"	d
zzip_disk_entry_get_usize	zzip/fetch.h	120;"	d
zzip_disk_entry_headerlength	zzip/format.h	124;"	d
zzip_disk_entry_namlen	zzip/fetch.h	230;"	d
zzip_disk_entry_set_comment	zzip/fetch.h	127;"	d
zzip_disk_entry_set_compr	zzip/fetch.h	115;"	d
zzip_disk_entry_set_crc32	zzip/fetch.h	117;"	d
zzip_disk_entry_set_csize	zzip/fetch.h	119;"	d
zzip_disk_entry_set_diskstart	zzip/fetch.h	129;"	d
zzip_disk_entry_set_extras	zzip/fetch.h	125;"	d
zzip_disk_entry_set_filemode	zzip/fetch.h	133;"	d
zzip_disk_entry_set_filetype	zzip/fetch.h	131;"	d
zzip_disk_entry_set_flags	zzip/fetch.h	113;"	d
zzip_disk_entry_set_magic	zzip/fetch.h	111;"	d
zzip_disk_entry_set_namlen	zzip/fetch.h	123;"	d
zzip_disk_entry_set_offset	zzip/fetch.h	135;"	d
zzip_disk_entry_set_usize	zzip/fetch.h	121;"	d
zzip_disk_entry_sizeof_tail	zzip/fetch.h	244;"	d
zzip_disk_entry_sizeof_tails	zzip/fetch.h	136;"	d
zzip_disk_entry_sizeto_end	zzip/fetch.h	246;"	d
zzip_disk_entry_skipto_end	zzip/fetch.h	248;"	d
zzip_disk_entry_to_comment	zzip/fetch.h	255;"	d
zzip_disk_entry_to_extras	zzip/fetch.h	253;"	d
zzip_disk_entry_to_filename	zzip/fetch.h	251;"	d
zzip_disk_entry_to_next_entry	zzip/fetch.h	257;"	d
zzip_disk_entry_usize	zzip/fetch.h	228;"	d
zzip_disk_trailer	zzip/format.h	/^struct zzip_disk_trailer$/;"	s
zzip_disk_trailer_check_magic	zzip/fetch.h	159;"	d
zzip_disk_trailer_comment	zzip/fetch.h	273;"	d
zzip_disk_trailer_finaldisk	zzip/fetch.h	263;"	d
zzip_disk_trailer_finalentries	zzip/fetch.h	267;"	d
zzip_disk_trailer_get_comment	zzip/fetch.h	156;"	d
zzip_disk_trailer_get_disk	zzip/fetch.h	144;"	d
zzip_disk_trailer_get_entries	zzip/fetch.h	148;"	d
zzip_disk_trailer_get_finaldisk	zzip/fetch.h	146;"	d
zzip_disk_trailer_get_finalentries	zzip/fetch.h	150;"	d
zzip_disk_trailer_get_magic	zzip/fetch.h	142;"	d
zzip_disk_trailer_get_rootseek	zzip/fetch.h	154;"	d
zzip_disk_trailer_get_rootsize	zzip/fetch.h	152;"	d
zzip_disk_trailer_headerlength	zzip/format.h	166;"	d
zzip_disk_trailer_localdisk	zzip/fetch.h	261;"	d
zzip_disk_trailer_localentries	zzip/fetch.h	265;"	d
zzip_disk_trailer_rootseek	zzip/fetch.h	271;"	d
zzip_disk_trailer_rootsize	zzip/fetch.h	269;"	d
zzip_disk_trailer_set_comment	zzip/fetch.h	157;"	d
zzip_disk_trailer_set_disk	zzip/fetch.h	145;"	d
zzip_disk_trailer_set_entries	zzip/fetch.h	149;"	d
zzip_disk_trailer_set_finaldisk	zzip/fetch.h	147;"	d
zzip_disk_trailer_set_finalentries	zzip/fetch.h	151;"	d
zzip_disk_trailer_set_magic	zzip/fetch.h	143;"	d
zzip_disk_trailer_set_rootseek	zzip/fetch.h	155;"	d
zzip_disk_trailer_set_rootsize	zzip/fetch.h	153;"	d
zzip_disk_trailer_sizeof_tail	zzip/fetch.h	275;"	d
zzip_disk_trailer_sizeof_tails	zzip/fetch.h	158;"	d
zzip_disk_trailer_sizeto_end	zzip/fetch.h	277;"	d
zzip_disk_trailer_skipto_end	zzip/fetch.h	279;"	d
zzip_disk_trailer_to_comment	zzip/fetch.h	282;"	d
zzip_disk_trailer_to_endoffile	zzip/fetch.h	284;"	d
zzip_dostime	zzip/format.h	/^struct zzip_dostime$/;"	s
zzip_dostime_t	zzip/format.h	/^typedef struct zzip_dostime zzip_dostime_t;$/;"	t	typeref:struct:zzip_dostime
zzip_dostime_t	zzip/format.h	/^typedef zzip_byte_t zzip_dostime_t[4];$/;"	t
zzip_error_t	zzip/zzip.h	/^} zzip_error_t;$/;"	t	typeref:enum:__anon214
zzip_extra_block	zzip/format.h	/^struct zzip_extra_block$/;"	s
zzip_extra_block_get_datasize	zzip/fetch.h	164;"	d
zzip_extra_block_get_datatype	zzip/fetch.h	162;"	d
zzip_extra_block_headerlength	zzip/format.h	174;"	d
zzip_extra_block_set_datasize	zzip/fetch.h	165;"	d
zzip_extra_block_set_datatype	zzip/fetch.h	163;"	d
zzip_extra_block_sizeof_tail	zzip/fetch.h	308;"	d
zzip_extra_block_sizeto_end	zzip/fetch.h	310;"	d
zzip_extra_block_skipto_end	zzip/fetch.h	312;"	d
zzip_fclose	zzip/file.c	/^zzip_fclose(ZZIP_FILE * fp)$/;"	f
zzip_file	zzip/file.h	/^struct zzip_file$/;"	s
zzip_file_close	zzip/file.c	/^zzip_file_close(ZZIP_FILE * fp)$/;"	f
zzip_file_header	zzip/format.h	/^struct zzip_file_header$/;"	s
zzip_file_header_check_magic	zzip/fetch.h	96;"	d
zzip_file_header_csize	zzip/fetch.h	189;"	d
zzip_file_header_data_comprlevel	zzip/fetch.h	319;"	d
zzip_file_header_data_deflated	zzip/fetch.h	325;"	d
zzip_file_header_data_encrypted	zzip/fetch.h	317;"	d
zzip_file_header_data_low_deflated	zzip/fetch.h	349;"	d
zzip_file_header_data_max_deflated	zzip/fetch.h	346;"	d
zzip_file_header_data_min_deflated	zzip/fetch.h	352;"	d
zzip_file_header_data_not_deflated	zzip/fetch.h	341;"	d
zzip_file_header_data_std_deflated	zzip/fetch.h	343;"	d
zzip_file_header_data_stored	zzip/fetch.h	323;"	d
zzip_file_header_data_streamed	zzip/fetch.h	321;"	d
zzip_file_header_extras	zzip/fetch.h	195;"	d
zzip_file_header_get_compr	zzip/fetch.h	82;"	d
zzip_file_header_get_crc32	zzip/fetch.h	101;"	d
zzip_file_header_get_crc32	zzip/fetch.h	84;"	d
zzip_file_header_get_csize	zzip/fetch.h	86;"	d
zzip_file_header_get_extras	zzip/fetch.h	92;"	d
zzip_file_header_get_flags	zzip/fetch.h	80;"	d
zzip_file_header_get_magic	zzip/fetch.h	78;"	d
zzip_file_header_get_namlen	zzip/fetch.h	90;"	d
zzip_file_header_get_usize	zzip/fetch.h	88;"	d
zzip_file_header_headerlength	zzip/format.h	74;"	d
zzip_file_header_namlen	zzip/fetch.h	193;"	d
zzip_file_header_set_compr	zzip/fetch.h	83;"	d
zzip_file_header_set_crc32	zzip/fetch.h	85;"	d
zzip_file_header_set_csize	zzip/fetch.h	87;"	d
zzip_file_header_set_extras	zzip/fetch.h	93;"	d
zzip_file_header_set_flags	zzip/fetch.h	81;"	d
zzip_file_header_set_magic	zzip/fetch.h	79;"	d
zzip_file_header_set_namlen	zzip/fetch.h	91;"	d
zzip_file_header_set_usize	zzip/fetch.h	89;"	d
zzip_file_header_sizeof_tail	zzip/fetch.h	197;"	d
zzip_file_header_sizeof_tails	zzip/fetch.h	94;"	d
zzip_file_header_sizeto_end	zzip/fetch.h	199;"	d
zzip_file_header_skipto_end	zzip/fetch.h	201;"	d
zzip_file_header_to_data	zzip/fetch.h	208;"	d
zzip_file_header_to_extras	zzip/fetch.h	206;"	d
zzip_file_header_to_filename	zzip/fetch.h	204;"	d
zzip_file_header_to_trailer	zzip/fetch.h	210;"	d
zzip_file_header_usize	zzip/fetch.h	191;"	d
zzip_file_open	zzip/file.c	/^zzip_file_open(ZZIP_DIR * dir, zzip_char_t * name, int o_mode)$/;"	f
zzip_file_read	zzip/file.c	/^zzip_file_read(ZZIP_FILE * fp, void *buf, zzip_size_t len)$/;"	f
zzip_file_saveoffset	zzip/file.c	/^zzip_file_saveoffset(ZZIP_FILE * fp)$/;"	f	file:
zzip_file_stat	zzip/stat.c	/^zzip_file_stat(ZZIP_FILE * file, ZZIP_STAT * zs)$/;"	f
zzip_file_trailer	zzip/format.h	/^struct zzip_file_trailer$/;"	s
zzip_file_trailer_check_magic	zzip/fetch.h	108;"	d
zzip_file_trailer_csize	zzip/fetch.h	214;"	d
zzip_file_trailer_get_csize	zzip/fetch.h	103;"	d
zzip_file_trailer_get_magic	zzip/fetch.h	99;"	d
zzip_file_trailer_get_usize	zzip/fetch.h	105;"	d
zzip_file_trailer_headerlength	zzip/format.h	90;"	d
zzip_file_trailer_set_crc32	zzip/fetch.h	102;"	d
zzip_file_trailer_set_csize	zzip/fetch.h	104;"	d
zzip_file_trailer_set_magic	zzip/fetch.h	100;"	d
zzip_file_trailer_set_usize	zzip/fetch.h	106;"	d
zzip_file_trailer_sizeof_tail	zzip/fetch.h	218;"	d
zzip_file_trailer_sizeof_tails	zzip/fetch.h	107;"	d
zzip_file_trailer_sizeto_end	zzip/fetch.h	220;"	d
zzip_file_trailer_skipto_end	zzip/fetch.h	222;"	d
zzip_file_trailer_usize	zzip/fetch.h	216;"	d
zzip_filesize	zzip/plugin.c	/^zzip_filesize(int fd)$/;"	f
zzip_filesize	zzip/plugin.h	65;"	d
zzip_fopen	zzip/file.c	/^zzip_fopen(zzip_char_t * filename, zzip_char_t * mode)$/;"	f
zzip_fread	zzip/file.c	/^zzip_fread(void *ptr, zzip_size_t size, zzip_size_t nmemb, ZZIP_FILE * file)$/;"	f
zzip_freopen	zzip/file.c	/^zzip_freopen(zzip_char_t * filename, zzip_char_t * mode, ZZIP_FILE * stream)$/;"	f
zzip_fstat	zzip/stat.c	/^zzip_fstat(ZZIP_FILE * file, ZZIP_STAT * zs)$/;"	f
zzip_get_default_ext	zzip/zip.c	/^zzip_get_default_ext(void)$/;"	f	file:
zzip_get_default_io	zzip/plugin.c	/^zzip_get_default_io(void)$/;"	f
zzip_get_default_io	zzip/plugin.h	66;"	d
zzip_inflate_init	zzip/file.c	/^zzip_inflate_init(ZZIP_FILE * fp, struct zzip_dir_hdr *hdr)$/;"	f	file:
zzip_init_io	zzip/plugin.c	/^zzip_init_io(zzip_plugin_io_handlers_t io, int flags)$/;"	f
zzip_init_io	zzip/plugin.h	67;"	d
zzip_off64_t	zzip/types.h	/^typedef       _zzip_off64_t     zzip_off64_t;$/;"	t
zzip_off_t	zzip/types.h	/^typedef       _zzip_off_t       zzip_off_t;$/;"	t
zzip_open	zzip/file.c	/^zzip_open(zzip_char_t * filename, int o_flags)$/;"	f
zzip_open_ext_io	zzip/file.c	/^zzip_open_ext_io(zzip_char_t * filename, int o_flags, int o_modes,$/;"	f
zzip_open_ext_io	zzip/file.c	/^zzip_open_ext_io(zzip_char_t * name, int o_flags, int o_modes,$/;"	f
zzip_open_ext_io	zzip/file.c	916;"	d	file:
zzip_open_ext_io	zzip/zzip.h	225;"	d
zzip_open_rb	zzip/util.h	/^zzip_open_rb(ZZIP_DIR *dir, const char *path)$/;"	f
zzip_open_shared_io	zzip/file.c	/^zzip_open_shared_io(ZZIP_FILE * stream,$/;"	f
zzip_open_shared_io	zzip/file.c	915;"	d	file:
zzip_open_shared_io	zzip/zzip.h	224;"	d
zzip_opendir_ext_io	zzip/file.c	/^zzip_opendir_ext_io(zzip_char_t * name, int o_modes,$/;"	f
zzip_opendir_ext_io	zzip/file.c	917;"	d	file:
zzip_opendir_ext_io	zzip/zzip.h	226;"	d
zzip_plugin_io	zzip/plugin.h	/^struct zzip_plugin_io { \/* use "zzip_plugin_io_handlers" in applications !! *\/$/;"	s
zzip_plugin_io_handlers	zzip/plugin.h	/^} zzip_plugin_io_handlers;$/;"	t	typeref:union:_zzip_plugin_io
zzip_plugin_io_handlers_t	zzip/plugin.h	/^typedef zzip_plugin_io_handlers* zzip_plugin_io_handlers_t;$/;"	t
zzip_plugin_io_t	zzip/zzip.h	/^typedef union _zzip_plugin_io _zzip_const * zzip_plugin_io_t;$/;"	t	typeref:union:_zzip_const
zzip_plugin_io_t	zzip/zzip.h	228;"	d
zzip_pread	zzip/file.c	/^zzip_pread(ZZIP_FILE *file, void *ptr, zzip_size_t size, zzip_off_t offset)$/;"	f
zzip_pread_fallback	zzip/file.c	/^zzip_pread_fallback(ZZIP_FILE *file, void *ptr, zzip_size_t size,$/;"	f	file:
zzip_read	zzip/file.c	/^zzip_read(ZZIP_FILE * fp, void *buf, zzip_size_t len)$/;"	f
zzip_rewind	zzip/file.c	/^zzip_rewind(ZZIP_FILE * fp)$/;"	f
zzip_root_dirent	zzip/format.h	/^struct zzip_root_dirent$/;"	s
zzip_seek	zzip/file.c	/^zzip_seek(ZZIP_FILE * fp, zzip_off_t offset, int whence)$/;"	f
zzip_seek32	zzip/file.c	/^zzip_seek32(ZZIP_FILE * fp, long offset, int whence)$/;"	f
zzip_seekdir	zzip/zzip.h	65;"	d
zzip_size_t	zzip/types.h	/^typedef       _zzip_size_t      zzip_size_t;      \/* Some error here? *\/$/;"	t
zzip_ssize_t	zzip/types.h	/^typedef       _zzip_ssize_t     zzip_ssize_t;     \/* See notes above! *\/$/;"	t
zzip_stream_ops	Terrain/ZzipStream.cpp	/^static constexpr jas_stream_ops_t zzip_stream_ops = {$/;"	v	file:
zzip_strings_t	zzip/zzip.h	/^typedef  char _zzip_const * _zzip_const zzip_strings_t;$/;"	t
zzip_tell	zzip/file.c	/^zzip_tell(ZZIP_FILE * fp)$/;"	f
zzip_tell32	zzip/file.c	/^zzip_tell32(ZZIP_FILE * fp)$/;"	f
zzip_telldir	zzip/zzip.h	64;"	d
zzip_version	zzip/format.h	/^struct zzip_version$/;"	s
zzip_version_t	zzip/format.h	/^typedef struct zzip_version zzip_version_t;$/;"	t	typeref:struct:zzip_version
zzip_version_t	zzip/format.h	/^typedef zzip_byte_t zzip_version_t[2];$/;"	t
~AATTaskFactory	Engine/Task/Factory/AATTaskFactory.hpp	/^  ~AATTaskFactory() {};$/;"	f	class:final
~ALSAPCMPlayer	Audio/ALSAPCMPlayer.cpp	/^ALSAPCMPlayer::~ALSAPCMPlayer()$/;"	f	class:ALSAPCMPlayer
~AbstractAirspace	Engine/Airspace/AbstractAirspace.cpp	/^AbstractAirspace::~AbstractAirspace() {}$/;"	f	class:AbstractAirspace
~AbstractReplay	Replay/AbstractReplay.hpp	/^  virtual ~AbstractReplay() {}$/;"	f	class:AbstractReplay
~AbstractTaskFactory	Engine/Task/Factory/AbstractTaskFactory.hpp	/^  virtual ~AbstractTaskFactory() {}$/;"	f	class:AbstractTaskFactory
~AirspaceRoute	Engine/Route/AirspaceRoute.cpp	/^AirspaceRoute::~AirspaceRoute()$/;"	f	class:AirspaceRoute
~AirspaceVisitorRenderer	Renderer/AirspaceRendererGL.cpp	/^  ~AirspaceVisitorRenderer() {$/;"	f	class:final
~AirspaceWarningWidget	Monitor/AirspaceWarningMonitor.cpp	/^  ~AirspaceWarningWidget() {$/;"	f	class:final
~Airspaces	Engine/Airspace/Airspaces.hpp	/^  ~Airspaces() {$/;"	f	class:Airspaces
~AllMonitors	Monitor/AllMonitors.cpp	/^AllMonitors::~AllMonitors() {$/;"	f	class:AllMonitors
~AllocatedSocketAddress	Net/AllocatedSocketAddress.hxx	/^	~AllocatedSocketAddress() {$/;"	f	class:AllocatedSocketAddress
~AndroidPCMPlayer	Audio/AndroidPCMPlayer.cpp	/^AndroidPCMPlayer::~AndroidPCMPlayer()$/;"	f	class:AndroidPCMPlayer
~AndroidPort	Device/Port/AndroidPort.cpp	/^AndroidPort::~AndroidPort()$/;"	f	class:AndroidPort
~Area	Util/SliceAllocator.hxx	/^		~Area() {$/;"	f	struct:SliceAllocator::Area
~Args	OS/Args.hpp	/^  ~Args() {$/;"	f	class:Args
~ArrayWriter	JSON/Writer.hpp	/^    ~ArrayWriter() {$/;"	f	class:JSON::ArrayWriter
~ArrowPagerWidget	Widget/ArrowPagerWidget.cpp	/^ArrowPagerWidget::~ArrowPagerWidget()$/;"	f	class:ArrowPagerWidget
~AsyncJobRunner	Job/Async.hpp	/^  ~AsyncJobRunner() {$/;"	f	class:final
~BMP085Device	Android/BMP085Device.cpp	/^BMP085Device::~BMP085Device()$/;"	f	class:BMP085Device
~BackgroundLua	Lua/Background.cpp	/^  ~BackgroundLua() {$/;"	f	class:final
~BackgroundRenderer	Renderer/BackgroundRenderer.cpp	/^BackgroundRenderer::~BackgroundRenderer() {}$/;"	f	class:BackgroundRenderer
~Bitmap	Screen/Bitmap.hpp	/^  ~Bitmap() {$/;"	f	class:final
~BlueFlyDevice	Device/Driver/BlueFly/Misc.cpp	/^BlueFlyDevice::~BlueFlyDevice()$/;"	f	class:BlueFlyDevice
~Brush	Screen/Brush.hpp	/^  ~Brush() {$/;"	f	class:Brush
~BufferCanvas	Screen/GDI/BufferCanvas.cpp	/^BufferCanvas::~BufferCanvas()$/;"	f	class:BufferCanvas
~BufferCanvas	Screen/OpenGL/BufferCanvas.hpp	/^  ~BufferCanvas() {$/;"	f	class:DisplayOrientation
~Button	Form/Button.cpp	/^Button::~Button() {$/;"	f	class:Button
~ButtonPanel	Form/ButtonPanel.cpp	/^ButtonPanel::~ButtonPanel()$/;"	f	class:ButtonPanel
~ButtonPanelWidget	Widget/ButtonPanelWidget.cpp	/^ButtonPanelWidget::~ButtonPanelWidget()$/;"	f	class:ButtonPanelWidget
~ButtonRenderer	Renderer/ButtonRenderer.hpp	/^  virtual ~ButtonRenderer() {}$/;"	f	class:ButtonRenderer
~ButtonWidget	Widget/ButtonWidget.cpp	/^ButtonWidget::~ButtonWidget()$/;"	f	class:ButtonWidget
~Cache	Util/Cache.hxx	/^	~Cache() {$/;"	f	class:Cache
~Canvas	Screen/GDI/Canvas.hpp	/^  ~Canvas() {$/;"	f	class:Canvas
~CanvasRotateShift	Screen/OpenGL/CanvasRotateShift.hpp	/^  ~CanvasRotateShift() {$/;"	f	class:CanvasRotateShift
~Client	Tracking/SkyLines/Client.hpp	/^  ~Client() { Close(); }$/;"	f	class:SkyLinesTracking::Client
~CloudClientContainer	Cloud/Client.cpp	/^CloudClientContainer::~CloudClientContainer()$/;"	f	class:CloudClientContainer
~CloudThermalContainer	Cloud/Thermal.cpp	/^CloudThermalContainer::~CloudThermalContainer()$/;"	f	class:CloudThermalContainer
~ConstDataNode	XML/DataNode.cpp	/^ConstDataNode::~ConstDataNode()$/;"	f	class:ConstDataNode
~CurlMulti	Net/HTTP/Multi.cpp	/^Net::CurlMulti::~CurlMulti()$/;"	f	class:Net::CurlMulti
~DataField	Form/DataField/Base.hpp	/^  virtual ~DataField() {}$/;"	f	class:DataField
~Device	Device/Driver.cpp	/^Device::~Device() {}$/;"	f	class:Device
~DeviceDescriptor	Device/Descriptor.hpp	/^  ~DeviceDescriptor() {$/;"	f	class:final
~DigitEntry	Form/DigitEntry.cpp	/^DigitEntry::~DigitEntry()$/;"	f	class:DigitEntry
~DownloadProgress	Dialogs/DownloadFilePicker.cpp	/^  ~DownloadProgress() {$/;"	f	class:final
~DumpPort	Device/Port/DumpPort.cpp	/^DumpPort::~DumpPort()$/;"	f	class:DumpPort
~DynamicLibrary	OS/DynamicLibrary.hpp	/^  ~DynamicLibrary() {$/;"	f	class:DynamicLibrary
~Entry	Form/DataField/Enum.cpp	/^DataFieldEnum::Entry::~Entry()$/;"	f	class:DataFieldEnum::Entry
~EventQueue	Event/Poll/Queue.cpp	/^EventQueue::~EventQueue()$/;"	f	class:EventQueue
~EventQueue	Event/Windows/Queue.hpp	/^  ~EventQueue() {$/;"	f	class:EventQueue
~FAITaskFactory	Engine/Task/Factory/FAITaskFactory.hpp	/^  virtual ~FAITaskFactory() {};$/;"	f	class:FAITaskFactory
~FAITriangleTaskFactory	Engine/Task/Factory/FAITriangleTaskFactory.hpp	/^  virtual ~FAITriangleTaskFactory() {};$/;"	f	class:FAITriangleTaskFactory
~FileHandle	IO/FileHandle.hpp	/^  ~FileHandle() {$/;"	f	class:FileHandle
~FileMapping	OS/FileMapping.cpp	/^FileMapping::~FileMapping()$/;"	f	class:FileMapping
~FileTransaction	IO/FileTransaction.cpp	/^FileTransaction::~FileTransaction()$/;"	f	class:FileTransaction
~Font	Screen/Font.hpp	/^  ~Font() { Destroy(); }$/;"	f	class:Font
~GLBuffer	Screen/OpenGL/Buffer.hpp	/^  ~GLBuffer() {$/;"	f	class:GLBuffer
~GLEnable	Screen/OpenGL/Scope.hpp	/^  ~GLEnable() {$/;"	f	class:GLEnable
~GLFrameBuffer	Screen/OpenGL/FrameBuffer.hpp	/^  ~GLFrameBuffer() {$/;"	f	class:GLFrameBuffer
~GLProgram	Screen/OpenGL/Program.hpp	/^  ~GLProgram() {$/;"	f	class:GLProgram
~GLRenderBuffer	Screen/OpenGL/RenderBuffer.hpp	/^  ~GLRenderBuffer() {$/;"	f	class:GLRenderBuffer
~GLShader	Screen/OpenGL/Program.hpp	/^  ~GLShader() {$/;"	f	class:GLShader
~GLTexture	Screen/OpenGL/Texture.hpp	/^  ~GLTexture() {$/;"	f	class:GLTexture
~GliderLink	Android/GliderLink.cpp	/^GliderLink::~GliderLink() {$/;"	f	class:GliderLink
~Glue	Tracking/SkyLines/Glue.cpp	/^SkyLinesTracking::Glue::~Glue()$/;"	f	class:SkyLinesTracking::Glue
~GlueFlightLogger	Logger/GlueFlightLogger.cpp	/^GlueFlightLogger::~GlueFlightLogger()$/;"	f	class:GlueFlightLogger
~GlueMapWindow	MapWindow/GlueMapWindow.cpp	/^GlueMapWindow::~GlueMapWindow()$/;"	f	class:GlueMapWindow
~GotoTask	Engine/Task/Unordered/GotoTask.cpp	/^GotoTask::~GotoTask() $/;"	f	class:GotoTask
~I2CbaroDevice	Android/I2CbaroDevice.cpp	/^I2CbaroDevice::~I2CbaroDevice()$/;"	f	class:I2CbaroDevice
~IOIOHelper	Android/IOIOHelper.hpp	/^  ~IOIOHelper() {$/;"	f	class:IOIOHelper
~IgcReplay	Replay/IgcReplay.cpp	/^IgcReplay::~IgcReplay()$/;"	f	class:IgcReplay
~InfoBoxContent	InfoBoxes/Content/Base.cpp	/^InfoBoxContent::~InfoBoxContent() {}$/;"	f	class:InfoBoxContent
~InputEventQueue	Event/Poll/InputQueue.cpp	/^InputEventQueue::~InputEventQueue()$/;"	f	class:InputEventQueue
~InternalSensors	Android/InternalSensors.cpp	/^InternalSensors::~InternalSensors()$/;"	f	class:InternalSensors
~InternalSensors	Apple/InternalSensors.cpp	/^InternalSensors::~InternalSensors()$/;"	f	class:InternalSensors
~Item	Task/TaskStore.cpp	/^TaskStore::Item::~Item()$/;"	f	class:TaskStore::Item
~K6BtPort	Device/Port/K6BtPort.cpp	/^K6BtPort::~K6BtPort()$/;"	f	class:K6BtPort
~LeafList	Util/RadixTree.hpp	/^    ~LeafList() {$/;"	f	struct:RadixTree::LeafList
~LibInputHandler	Event/Poll/LibInput/LibInputHandler.hpp	/^  ~LibInputHandler() {$/;"	f	class:final
~LineReader	IO/LineReader.hpp	/^  virtual ~LineReader() {}$/;"	f	class:LineReader
~LinuxInputDevice	Event/Poll/Linux/Input.hpp	/^  ~LinuxInputDevice() {$/;"	f	class:final
~LoggerImpl	Logger/LoggerImpl.cpp	/^LoggerImpl::~LoggerImpl()$/;"	f	class:LoggerImpl
~LuaInputEvent	Lua/InputEvent.cpp	/^  ~LuaInputEvent() {$/;"	f	class:final
~METARLine	Weather/METARParser.cpp	/^  ~METARLine() {$/;"	f	class:METARLine
~MOLoader	Language/MOLoader.hpp	/^  ~MOLoader() {$/;"	f	class:MOLoader
~MainWindow	MainWindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~ManagedWidget	Widget/ManagedWidget.hpp	/^  ~ManagedWidget() {$/;"	f	class:ManagedWidget
~Manual	Util/Manual.hxx	/^	~Manual() {$/;"	f	class:Manual
~MapItem	MapWindow/Items/MapItem.hpp	/^  virtual ~MapItem() {}$/;"	f	class:TaskPointType
~MapItemList	MapWindow/Items/List.cpp	/^MapItemList::~MapItemList()$/;"	f	class:MapItemList
~MapWindow	MapWindow/MapWindow.cpp	/^MapWindow::~MapWindow()$/;"	f	class:MapWindow
~MatTaskAddWidget	Monitor/MatTaskMonitor.cpp	/^  ~MatTaskAddWidget() {$/;"	f	class:final
~MergeMouse	Event/Poll/Linux/MergeMouse.hpp	/^  ~MergeMouse() {$/;"	f	class:final
~MixerPCMPlayer	Audio/MixerPCMPlayer.cpp	/^MixerPCMPlayer::~MixerPCMPlayer()$/;"	f	class:MixerPCMPlayer
~MultiPartFormData	Net/HTTP/FormData.hpp	/^    ~MultiPartFormData() {$/;"	f	class:Net::MultiPartFormData
~MultipleDevices	Device/MultipleDevices.cpp	/^MultipleDevices::~MultipleDevices()$/;"	f	class:MultipleDevices
~NmeaReplay	Replay/NmeaReplay.cpp	/^NmeaReplay::~NmeaReplay()$/;"	f	class:NmeaReplay
~Node	Util/RadixTree.hpp	/^    ~Node() {$/;"	f	struct:RadixTree::Node
~NonCopyable	Util/NonCopyable.hpp	/^  ~NonCopyable () {}$/;"	f	class:NonCopyable
~Notify	Event/Notify.hpp	/^  ~Notify() {$/;"	f	class:final
~NullWidget	Widget/Widget.cpp	/^NullWidget::~NullWidget()$/;"	f	class:NullWidget
~NunchuckDevice	Android/NunchuckDevice.cpp	/^NunchuckDevice::~NunchuckDevice()$/;"	f	class:NunchuckDevice
~ObjectWriter	JSON/Writer.hpp	/^    ~ObjectWriter() {$/;"	f	class:JSON::ObjectWriter
~ObservationZone	Engine/Task/ObservationZones/ObservationZone.hpp	/^  virtual ~ObservationZone() {}$/;"	f	class:ObservationZone
~ObservationZoneClient	Engine/Task/ObservationZones/ObservationZoneClient.cpp	/^ObservationZoneClient::~ObservationZoneClient() {$/;"	f	class:ObservationZoneClient
~OrderedTask	Engine/Task/Ordered/OrderedTask.cpp	/^OrderedTask::~OrderedTask()$/;"	f	class:OrderedTask
~OrderedTaskPoint	Engine/Task/Ordered/Points/OrderedTaskPoint.hpp	/^  virtual ~OrderedTaskPoint() {}$/;"	f	class:OrderedTaskPoint
~OverlappedEvent	OS/OverlappedEvent.hpp	/^  ~OverlappedEvent() {$/;"	f	class:OverlappedEvent
~PCMPlayer	Audio/PCMPlayer.hpp	/^  virtual ~PCMPlayer() {}$/;"	f	class:PCMPlayer
~PageListWidget	Dialogs/Settings/Panels/PagesConfigPanel.cpp	/^  ~PageListWidget() {$/;"	f	class:PageListWidget
~PagerWidget	Widget/PagerWidget.cpp	/^PagerWidget::~PagerWidget()$/;"	f	class:PagerWidget
~PaintCanvas	Screen/GDI/PaintCanvas.cpp	/^PaintCanvas::~PaintCanvas()$/;"	f	class:PaintCanvas
~Pen	Screen/Pen.hpp	/^  ~Pen() {$/;"	f	class:Pen
~Port	Device/Port/Port.cpp	/^Port::~Port() {}$/;"	f	class:Port
~PortBridge	Android/PortBridge.hpp	/^  ~PortBridge() {$/;"	f	class:PortBridge
~PortTerminalBridge	Dialogs/Device/PortMonitor.cpp	/^  virtual ~PortTerminalBridge() {}$/;"	f	class:final
~ProtectedTaskManager	Task/ProtectedTaskManager.cpp	/^ProtectedTaskManager::~ProtectedTaskManager() {$/;"	f	class:ProtectedTaskManager
~RTTaskFactory	Engine/Task/Factory/RTTaskFactory.hpp	/^  ~RTTaskFactory() {};$/;"	f	class:RTTaskFactory
~RaspCache	Weather/Rasp/RaspCache.hpp	/^  ~RaspCache() {$/;"	f	class:RaspCache
~RasterRenderer	Terrain/RasterRenderer.cpp	/^RasterRenderer::~RasterRenderer()$/;"	f	class:RasterRenderer
~RawBitmap	Screen/GDI/RawBitmap.cpp	/^RawBitmap::~RawBitmap()$/;"	f	class:RawBitmap
~RawBitmap	Screen/OpenGL/RawBitmap.cpp	/^RawBitmap::~RawBitmap()$/;"	f	class:RawBitmap
~RegistryKey	Config/Registry.hpp	/^  ~RegistryKey() {$/;"	f	class:RegistryKey
~RenderedText	Screen/Custom/Cache.cpp	/^  ~RenderedText() {$/;"	f	struct:RenderedText
~Replay	Replay/Replay.hpp	/^  ~Replay() {$/;"	f	class:final
~Request	Net/HTTP/Request.cpp	/^Net::Request::~Request()$/;"	f	class:Net::Request
~RootDC	Screen/GDI/RootDC.hpp	/^  ~RootDC() {$/;"	f	class:RootDC
~RowFormWidget	Widget/RowFormWidget.cpp	/^RowFormWidget::~RowFormWidget()$/;"	f	class:RowFormWidget
~SDLPCMPlayer	Audio/SDLPCMPlayer.cpp	/^SDLPCMPlayer::~SDLPCMPlayer()$/;"	f	class:SDLPCMPlayer
~ScopeBusyIndicator	Screen/Busy.hpp	/^  ~ScopeBusyIndicator() {$/;"	f	class:ScopeBusyIndicator
~ScopeCalculatedListener	Blackboard/ScopeCalculatedListener.hpp	/^  ~ScopeCalculatedListener() {$/;"	f	class:ScopeCalculatedListener
~ScopeCheckStack	Lua/Assert.hxx	/^	~ScopeCheckStack() {$/;"	f	class:Lua::ScopeCheckStack
~ScopeColorPointer	Screen/OpenGL/Color.hpp	/^  ~ScopeColorPointer() {$/;"	f	struct:ScopeColorPointer
~ScopeExitGuard	Util/ScopeExit.hxx	/^	~ScopeExitGuard() {$/;"	f	class:ScopeExitGuard
~ScopeGPSListener	Blackboard/ScopeGPSListener.hpp	/^  ~ScopeGPSListener() {$/;"	f	class:ScopeGPSListener
~ScopeGlobalAsioThread	IO/Async/GlobalAsioThread.hpp	/^  ~ScopeGlobalAsioThread() {$/;"	f	class:ScopeGlobalAsioThread
~ScopeGlobalPCMMixer	Audio/GlobalPCMMixer.hpp	/^  ~ScopeGlobalPCMMixer() {$/;"	f	class:final
~ScopeGlobalPCMResourcePlayer	Audio/GlobalPCMResourcePlayer.hpp	/^  ~ScopeGlobalPCMResourcePlayer() {$/;"	f	class:final
~ScopeGlobalVolumeController	Audio/GlobalVolumeController.hpp	/^  ~ScopeGlobalVolumeController() {$/;"	f	class:final
~ScopeLockCPU	Hardware/CPU.hpp	/^  ~ScopeLockCPU() {$/;"	f	struct:ScopeLockCPU
~ScopeReturnDevice	Device/Descriptor.cpp	/^  ~ScopeReturnDevice() {$/;"	f	struct:ScopeReturnDevice
~ScopeSuspendAllThreads	Protection.hpp	/^  ~ScopeSuspendAllThreads() { ResumeAllThreads(); }$/;"	f	class:ScopeSuspendAllThreads
~ScopeTextureConstantAlpha	Screen/OpenGL/ConstantAlpha.cpp	/^ScopeTextureConstantAlpha::~ScopeTextureConstantAlpha()$/;"	f	class:ScopeTextureConstantAlpha
~ScopeVertexPointer	Screen/OpenGL/VertexPointer.hpp	/^  ~ScopeVertexPointer() {$/;"	f	struct:ScopeVertexPointer
~ScreenGlobalInit	Screen/EGL/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	Screen/FB/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	Screen/GDI/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	Screen/GLX/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~ScreenGlobalInit	Screen/SDL/Init.cpp	/^ScreenGlobalInit::~ScreenGlobalInit()$/;"	f	class:ScreenGlobalInit
~SerialPort	Device/Port/SerialPort.cpp	/^SerialPort::~SerialPort()$/;"	f	class:SerialPort
~Server	Tracking/SkyLines/Server.cpp	/^Server::~Server()$/;"	f	class:SkyLinesTracking::Server
~SliceAllocator	Util/SliceAllocator.hxx	/^	~SliceAllocator() {$/;"	f	class:SliceAllocator
~SolidWidget	Widget/SolidWidget.cpp	/^SolidWidget::~SolidWidget()$/;"	f	class:SolidWidget
~StandbyThread	Thread/StandbyThread.cpp	/^StandbyThread::~StandbyThread()$/;"	f	class:StandbyThread
~SubCanvas	Screen/OpenGL/SubCanvas.cpp	/^SubCanvas::~SubCanvas()$/;"	f	class:SubCanvas
~TCPClientPort	Device/Port/TCPClientPort.cpp	/^TCPClientPort::~TCPClientPort()$/;"	f	class:TCPClientPort
~TCPPort	Device/Port/TCPPort.cpp	/^TCPPort::~TCPPort()$/;"	f	class:TCPPort
~TTYEnumerator	Device/Port/TTYEnumerator.hpp	/^  ~TTYEnumerator() {$/;"	f	class:TTYEnumerator
~TTYPort	Device/Port/TTYPort.cpp	/^TTYPort::~TTYPort()$/;"	f	class:TTYPort
~TabDisplay	Form/TabDisplay.cpp	/^TabDisplay::~TabDisplay()$/;"	f	class:TabDisplay
~TabWidget	Widget/TabWidget.cpp	/^TabWidget::~TabWidget()$/;"	f	class:TabWidget
~TargetMapWindow	MapWindow/TargetMapWindow.cpp	/^TargetMapWindow::~TargetMapWindow()$/;"	f	class:TargetMapWindow
~TaskAdvanceWidget	Monitor/TaskAdvanceMonitor.cpp	/^  ~TaskAdvanceWidget() {$/;"	f	class:final
~TaskFile	Task/TaskFile.cpp	/^TaskFile::~TaskFile()$/;"	f	class:TaskFile
~TaskManager	Engine/Task/TaskManager.cpp	/^TaskManager::~TaskManager()$/;"	f	class:TaskManager
~TaskManagerDialog	Dialogs/Task/Manager/TaskManagerDialog.cpp	/^TaskManagerDialog::~TaskManagerDialog()$/;"	f	class:TaskManagerDialog
~TaskOZMapItem	MapWindow/Items/MapItem.cpp	/^TaskOZMapItem::~TaskOZMapItem()$/;"	f	class:TaskOZMapItem
~TerrainRenderer	Terrain/TerrainRenderer.hpp	/^  ~TerrainRenderer() {}$/;"	f	class:TerrainRenderer
~TextCacheKey	Screen/Custom/Cache.cpp	/^  ~TextCacheKey() {$/;"	f	struct:TextCacheKey
~TiffLoader	Screen/Custom/LibTiff.cpp	/^  ~TiffLoader() {$/;"	f	class:TiffLoader
~Timer	Event/Timer.hpp	/^  ~Timer() {$/;"	f	class:final
~TopCanvas	Screen/Custom/TopCanvas.hpp	/^  ~TopCanvas() {$/;"	f	class:DisplayOrientation
~TopographyFile	Topography/TopographyFile.cpp	/^TopographyFile::~TopographyFile()$/;"	f	class:TopographyFile
~TopographyFileRenderer	Topography/TopographyFileRenderer.cpp	/^TopographyFileRenderer::~TopographyFileRenderer()$/;"	f	class:TopographyFileRenderer
~TopographyRenderer	Topography/TopographyRenderer.cpp	/^TopographyRenderer::~TopographyRenderer()$/;"	f	class:TopographyRenderer
~TopographyStore	Topography/TopographyStore.cpp	/^TopographyStore::~TopographyStore()$/;"	f	class:TopographyStore
~TopographyThread	Topography/Thread.cpp	/^TopographyThread::~TopographyThread()$/;"	f	class:TopographyThread
~TouringTaskFactory	Engine/Task/Factory/TouringTaskFactory.hpp	/^  ~TouringTaskFactory() {};$/;"	f	class:TouringTaskFactory
~Trace	Engine/Trace/Trace.hpp	/^  ~Trace() {$/;"	f	class:Trace
~Trigger	Thread/Trigger.hpp	/^  ~Trigger() {$/;"	f	class:Trigger
~TwoWidgets	Widget/TwoWidgets.cpp	/^TwoWidgets::~TwoWidgets()$/;"	f	class:TwoWidgets
~UDPPort	Device/Port/UDPPort.cpp	/^UDPPort::~UDPPort()$/;"	f	class:UDPPort
~UdevContext	Event/Poll/LibInput/UdevContext.cpp	/^UdevContext::~UdevContext()$/;"	f	class:UdevContext
~Value	Lua/Value.hxx	/^	~Value() {$/;"	f	class:Lua::Value
~VirtualCanvas	Screen/VirtualCanvas.hpp	/^  ~VirtualCanvas() {$/;"	f	class:VirtualCanvas
~VoltageDevice	Android/VoltageDevice.cpp	/^VoltageDevice::~VoltageDevice()$/;"	f	class:VoltageDevice
~VolumeController	Audio/VolumeController.cpp	/^VolumeController::~VolumeController()$/;"	f	class:VolumeController
~WPASupplicant	Kobo/WPASupplicant.hpp	/^  ~WPASupplicant() {$/;"	f	class:WPASupplicant
~WaylandEventQueue	Event/Poll/WaylandQueue.cpp	/^WaylandEventQueue::~WaylandEventQueue()$/;"	f	class:WaylandEventQueue
~WaypointReaderBase	Waypoint/WaypointReaderBase.hpp	/^  virtual ~WaypointReaderBase() {}$/;"	f	class:WaypointReaderBase
~Widget	Widget/Widget.cpp	/^Widget::~Widget()$/;"	f	class:Widget
~WidgetDialog	Dialogs/WidgetDialog.cpp	/^WidgetDialog::~WidgetDialog()$/;"	f	class:WidgetDialog
~WindowList	Screen/Custom/WList.hpp	/^  ~WindowList() {$/;"	f	class:WindowList
~WritableDataNode	XML/DataNode.cpp	/^WritableDataNode::~WritableDataNode()$/;"	f	class:WritableDataNode
~X11EventQueue	Event/Poll/X11Queue.cpp	/^X11EventQueue::~X11EventQueue()$/;"	f	class:X11EventQueue
~XMLNode	XML/Node.hpp	/^  ~XMLNode() {$/;"	f	class:XMLNode
~XShape	Topography/XShape.cpp	/^XShape::~XShape()$/;"	f	class:XShape
~ZipArchive	IO/ZipArchive.cpp	/^ZipArchive::~ZipArchive()$/;"	f	class:ZipArchive
~ZipReader	IO/ZipReader.cpp	/^ZipReader::~ZipReader()$/;"	f	class:ZipReader
