
Vagrant.configure("2") do |config|
    config.vm.box = "generic/debian11"

    config.vm.synced_folder "../..", "/xcsoar-host-src", type: "rsync", rsync__auto: true

    # Change directory to shared folder directory when connecting using vagrant ssh
    config.ssh.extra_args = ["-t", "cd /xcsoar-host-src; bash --login"]

    config.vm.define "XCSoarDevEnv"
    config.vm.hostname = "XCSoarDevEnv"

    host = RbConfig::CONFIG['host_os']
    # Give VM 1/2 system memory & access to all cpu cores on the host
    if host =~ /darwin/
        cpus = `sysctl -n hw.ncpu`.to_i
        # sysctl returns Bytes and we need to convert to MB
        mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 2

    elsif host =~ /linux/
        cpus = `nproc`.to_i
        # meminfo shows KB and we need to convert to MB
        mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 2

    else
        cpus = 4
        mem = 2048
    end

    config.vm.provider "virtualbox" do |v|
        v.name = "xcsoar-" + Time.now.strftime("%y%m%d%H%M")

        v.customize ["modifyvm", :id, "--memory", mem]
        v.customize ["modifyvm", :id, "--cpus", cpus]

        # Decrease VirtualBox timesync threshold to 500 ms
        v.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 500]
    end

    config.vm.provision "os_setup", type: "shell", privileged: false, inline: <<-SCRIPT
        set -e
        
        if ! grep -q "export LANG=C" ~/.profile ; then
            echo "export LANG=C" >> ~/.profile
        fi
        if ! grep -q "export LC_CTYPE=C" ~/.profile ; then
            echo "export LC_CTYPE=C" >> ~/.profile
        fi

        sudo apt-get update
    SCRIPT

    config.vm.provision "install-debian-packages", type: "shell", path: "../provisioning/install-debian-packages.sh"

    config.vm.provision "install-android-tools", type: "shell", privileged: false, path: "../provisioning/install-android-tools.sh"

    config.vm.provision "xcsoar-source", type: "shell", privileged: false, inline: <<-SCRIPT
        sudo apt-get clean

        # download source from XCSoar Github repository
        # cd
        # git clone --recurse-submodules -o host /xcsoar-host-src xcsoar-src
        # cd xcsoar-src
        # git remote add master https://github.com/XCSoar/XCSoar.git

        # use source from this current XCSoar repository
        # be aware that submodules need to be downloaded
        # using git submodule update --init --recursive
        cd /xcsoar-host-src

        sudo ln -s /xcsoar-host-src /opt/xcsoar
    SCRIPT

    config.vm.provision "compile-xsoar-with-make", privileged: false, type: "shell" do |s|
        s.inline = "cd /opt/xcsoar; make -j $1 TARGET=$2 OUT=~/output"
        s.args   = [cpus, "UNIX"]
    end

    # config.vm.provision "compile-xsoar-with-script", type: "shell", privileged: false, path: "../ide/docker/bin/xcsoar-compile", args:["UNIX OUT=~/output"]
    
    config.vm.provision "install-gui", type: "shell", privileged: false, inline: <<-SCRIPT
        # running GUI needs a desktop environment which can be installed using (on guest side)
        # sudo tasksel install xfce-desktop
        # sudo dpkg-reconfigure keyboard-configuration
        # VirtualBox Guest Additions can be installed using (on host side)
        # vagrant plugin install vagrant-vbguest
    SCRIPT
end
